_xamzrequire = function() {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;
                    if (!f && c) return c(i, !0);
                    if (u) return u(i, !0);
                    var a = new Error("Cannot find module '" + i + "'");
                    throw a.code = "MODULE_NOT_FOUND", a;
                }
                var p = n[i] = {
                    exports: {}
                };
                e[i][0].call(p.exports, function(r) {
                    var n = e[i][1][r];
                    return o(n || r);
                }, p, p.exports, r, e, n, t);
            }
            return n[i].exports;
        }
        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
        return o;
    }
    return r;
}()({
    117: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var AWS = require("../core");
                var regionUtil = require("../region_config");
                var s3util = {
                    isArnInParam: function isArnInParam(req, paramName) {
                        var inputShape = (req.service.api.operations[req.operation] || {}).input || {};
                        var inputMembers = inputShape.members || {};
                        if (!req.params[paramName] || !inputMembers[paramName]) return false;
                        return AWS.util.ARN.validate(req.params[paramName]);
                    },
                    validateArnService: function validateArnService(req) {
                        var parsedArn = req._parsedArn;
                        if (parsedArn.service !== "s3" && parsedArn.service !== "s3-outposts" && parsedArn.service !== "s3-object-lambda") {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component"
                            });
                        }
                    },
                    validateArnAccount: function validateArnAccount(req) {
                        var parsedArn = req._parsedArn;
                        if (!/[0-9]{12}/.exec(parsedArn.accountId)) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: 'ARN accountID does not match regex "[0-9]{12}"'
                            });
                        }
                    },
                    validateS3AccessPointArn: function validateS3AccessPointArn(req) {
                        var parsedArn = req._parsedArn;
                        var delimiter = parsedArn.resource["accesspoint".length];
                        if (parsedArn.resource.split(delimiter).length !== 2) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "Access Point ARN should have one resource accesspoint/{accesspointName}"
                            });
                        }
                        var accessPoint = parsedArn.resource.split(delimiter)[1];
                        var accessPointPrefix = accessPoint + "-" + parsedArn.accountId;
                        if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\./)) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "Access point resource in ARN is not DNS compatible. Got " + accessPoint
                            });
                        }
                        req._parsedArn.accessPoint = accessPoint;
                    },
                    validateOutpostsArn: function validateOutpostsArn(req) {
                        var parsedArn = req._parsedArn;
                        if (parsedArn.resource.indexOf("outpost:") !== 0 && parsedArn.resource.indexOf("outpost/") !== 0) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "ARN resource should begin with 'outpost/'"
                            });
                        }
                        var delimiter = parsedArn.resource["outpost".length];
                        var outpostId = parsedArn.resource.split(delimiter)[1];
                        var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
                        if (!dnsHostRegex.test(outpostId)) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "Outpost resource in ARN is not DNS compatible. Got " + outpostId
                            });
                        }
                        req._parsedArn.outpostId = outpostId;
                    },
                    validateOutpostsAccessPointArn: function validateOutpostsAccessPointArn(req) {
                        var parsedArn = req._parsedArn;
                        var delimiter = parsedArn.resource["outpost".length];
                        if (parsedArn.resource.split(delimiter).length !== 4) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "Outposts ARN should have two resources outpost/{outpostId}/accesspoint/{accesspointName}"
                            });
                        }
                        var accessPoint = parsedArn.resource.split(delimiter)[3];
                        var accessPointPrefix = accessPoint + "-" + parsedArn.accountId;
                        if (!s3util.dnsCompatibleBucketName(accessPointPrefix) || accessPointPrefix.match(/\./)) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: "Access point resource in ARN is not DNS compatible. Got " + accessPoint
                            });
                        }
                        req._parsedArn.accessPoint = accessPoint;
                    },
                    validateArnRegion: function validateArnRegion(req, options) {
                        if (options === undefined) {
                            options = {};
                        }
                        var useArnRegion = s3util.loadUseArnRegionConfig(req);
                        var regionFromArn = req._parsedArn.region;
                        var clientRegion = req.service.config.region;
                        var useFipsEndpoint = req.service.config.useFipsEndpoint;
                        var allowFipsEndpoint = options.allowFipsEndpoint || false;
                        if (!regionFromArn) {
                            var message = "ARN region is empty";
                            if (req._parsedArn.service === "s3") {
                                message = message + "\nYou may want to use multi-regional ARN. The feature is not supported in current SDK. " + "You should consider switching to V3(https://github.com/aws/aws-sdk-js-v3).";
                            }
                            throw AWS.util.error(new Error(), {
                                code: "InvalidARN",
                                message: message
                            });
                        }
                        if (useFipsEndpoint && !allowFipsEndpoint) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "ARN endpoint is not compatible with FIPS region"
                            });
                        }
                        if (regionFromArn.indexOf("fips") >= 0) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "FIPS region not allowed in ARN"
                            });
                        }
                        if (!useArnRegion && regionFromArn !== clientRegion) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "Configured region conflicts with access point region"
                            });
                        } else if (useArnRegion && regionUtil.getEndpointSuffix(regionFromArn) !== regionUtil.getEndpointSuffix(clientRegion)) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "Configured region and access point region not in same partition"
                            });
                        }
                        if (req.service.config.useAccelerateEndpoint) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "useAccelerateEndpoint config is not supported with access point ARN"
                            });
                        }
                        if (req._parsedArn.service === "s3-outposts" && req.service.config.useDualstackEndpoint) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "Dualstack is not supported with outposts access point ARN"
                            });
                        }
                    },
                    loadUseArnRegionConfig: function loadUseArnRegionConfig(req) {
                        var envName = "AWS_S3_USE_ARN_REGION";
                        var configName = "s3_use_arn_region";
                        var useArnRegion = true;
                        var originalConfig = req.service._originalConfig || {};
                        if (req.service.config.s3UseArnRegion !== undefined) {
                            return req.service.config.s3UseArnRegion;
                        } else if (originalConfig.s3UseArnRegion !== undefined) {
                            useArnRegion = originalConfig.s3UseArnRegion === true;
                        } else if (AWS.util.isNode()) {
                            if (process.env[envName]) {
                                var value = process.env[envName].trim().toLowerCase();
                                if ([ "false", "true" ].indexOf(value) < 0) {
                                    throw AWS.util.error(new Error(), {
                                        code: "InvalidConfiguration",
                                        message: envName + " only accepts true or false. Got " + process.env[envName],
                                        retryable: false
                                    });
                                }
                                useArnRegion = value === "true";
                            } else {
                                var profiles = {};
                                var profile = {};
                                try {
                                    profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);
                                    profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];
                                } catch (e) {}
                                if (profile[configName]) {
                                    if ([ "false", "true" ].indexOf(profile[configName].trim().toLowerCase()) < 0) {
                                        throw AWS.util.error(new Error(), {
                                            code: "InvalidConfiguration",
                                            message: configName + " only accepts true or false. Got " + profile[configName],
                                            retryable: false
                                        });
                                    }
                                    useArnRegion = profile[configName].trim().toLowerCase() === "true";
                                }
                            }
                        }
                        req.service.config.s3UseArnRegion = useArnRegion;
                        return useArnRegion;
                    },
                    validatePopulateUriFromArn: function validatePopulateUriFromArn(req) {
                        if (req.service._originalConfig && req.service._originalConfig.endpoint) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "Custom endpoint is not compatible with access point ARN"
                            });
                        }
                        if (req.service.config.s3ForcePathStyle) {
                            throw AWS.util.error(new Error(), {
                                code: "InvalidConfiguration",
                                message: "Cannot construct path-style endpoint with access point"
                            });
                        }
                    },
                    dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {
                        var b = bucketName;
                        var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);
                        var ipAddress = new RegExp(/(\d+\.){3}\d+/);
                        var dots = new RegExp(/\.\./);
                        return b.match(domain) && !b.match(ipAddress) && !b.match(dots) ? true : false;
                    }
                };
                module.exports = s3util;
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "../core": 44,
        "../region_config": 89,
        _process: 11
    } ],
    113: [ function(require, module, exports) {
        var AWS = require("../core");
        var rdsutil = {
            setupRequestListeners: function setupRequestListeners(service, request, crossRegionOperations) {
                if (crossRegionOperations.indexOf(request.operation) !== -1 && request.params.SourceRegion) {
                    request.params = AWS.util.copy(request.params);
                    if (request.params.PreSignedUrl || request.params.SourceRegion === service.config.region) {
                        delete request.params.SourceRegion;
                    } else {
                        var doesParamValidation = !!service.config.paramValidation;
                        if (doesParamValidation) {
                            request.removeListener("validate", AWS.EventListeners.Core.VALIDATE_PARAMETERS);
                        }
                        request.onAsync("validate", rdsutil.buildCrossRegionPresignedUrl);
                        if (doesParamValidation) {
                            request.addListener("validate", AWS.EventListeners.Core.VALIDATE_PARAMETERS);
                        }
                    }
                }
            },
            buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {
                var config = AWS.util.copy(req.service.config);
                config.region = req.params.SourceRegion;
                delete req.params.SourceRegion;
                delete config.endpoint;
                delete config.params;
                config.signatureVersion = "v4";
                var destinationRegion = req.service.config.region;
                var svc = new req.service.constructor(config);
                var newReq = svc[req.operation](AWS.util.copy(req.params));
                newReq.on("build", function addDestinationRegionParam(request) {
                    var httpRequest = request.httpRequest;
                    httpRequest.params.DestinationRegion = destinationRegion;
                    httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);
                });
                newReq.presign(function(err, url) {
                    if (err) done(err); else {
                        req.params.PreSignedUrl = url;
                        done();
                    }
                });
            }
        };
        module.exports = rdsutil;
    }, {
        "../core": 44
    } ],
    43: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var AWS = require("./core");
                function validateRegionalEndpointsFlagValue(configValue, errorOptions) {
                    if (typeof configValue !== "string") return undefined; else if ([ "legacy", "regional" ].indexOf(configValue.toLowerCase()) >= 0) {
                        return configValue.toLowerCase();
                    } else {
                        throw AWS.util.error(new Error(), errorOptions);
                    }
                }
                function resolveRegionalEndpointsFlag(originalConfig, options) {
                    originalConfig = originalConfig || {};
                    var resolved;
                    if (originalConfig[options.clientConfig]) {
                        resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {
                            code: "InvalidConfiguration",
                            message: 'invalid "' + options.clientConfig + '" configuration. Expect "legacy" ' + ' or "regional". Got "' + originalConfig[options.clientConfig] + '".'
                        });
                        if (resolved) return resolved;
                    }
                    if (!AWS.util.isNode()) return resolved;
                    if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {
                        var envFlag = process.env[options.env];
                        resolved = validateRegionalEndpointsFlagValue(envFlag, {
                            code: "InvalidEnvironmentalVariable",
                            message: "invalid " + options.env + ' environmental variable. Expect "legacy" ' + ' or "regional". Got "' + process.env[options.env] + '".'
                        });
                        if (resolved) return resolved;
                    }
                    var profile = {};
                    try {
                        var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);
                        profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];
                    } catch (e) {}
                    if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {
                        var fileFlag = profile[options.sharedConfig];
                        resolved = validateRegionalEndpointsFlagValue(fileFlag, {
                            code: "InvalidConfiguration",
                            message: "invalid " + options.sharedConfig + ' profile config. Expect "legacy" ' + ' or "regional". Got "' + profile[options.sharedConfig] + '".'
                        });
                        if (resolved) return resolved;
                    }
                    return resolved;
                }
                module.exports = resolveRegionalEndpointsFlag;
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "./core": 44,
        _process: 11
    } ],
    44: [ function(require, module, exports) {
        var AWS = {
            util: require("./util")
        };
        var _hidden = {};
        _hidden.toString();
        module.exports = AWS;
        AWS.util.update(AWS, {
            VERSION: "2.1519.0",
            Signers: {},
            Protocol: {
                Json: require("./protocol/json"),
                Query: require("./protocol/query"),
                Rest: require("./protocol/rest"),
                RestJson: require("./protocol/rest_json"),
                RestXml: require("./protocol/rest_xml")
            },
            XML: {
                Builder: require("./xml/builder"),
                Parser: null
            },
            JSON: {
                Builder: require("./json/builder"),
                Parser: require("./json/parser")
            },
            Model: {
                Api: require("./model/api"),
                Operation: require("./model/operation"),
                Shape: require("./model/shape"),
                Paginator: require("./model/paginator"),
                ResourceWaiter: require("./model/resource_waiter")
            },
            apiLoader: require("./api_loader"),
            EndpointCache: require("../vendor/endpoint-cache").EndpointCache
        });
        require("./sequential_executor");
        require("./service");
        require("./config");
        require("./http");
        require("./event_listeners");
        require("./request");
        require("./response");
        require("./resource_waiter");
        require("./signers/request_signer");
        require("./param_validator");
        require("./maintenance_mode_message");
        AWS.events = new AWS.SequentialExecutor();
        AWS.util.memoizedProperty(AWS, "endpointCache", function() {
            return new AWS.EndpointCache(AWS.config.endpointCacheSize);
        }, true);
    }, {
        "../vendor/endpoint-cache": 138,
        "./api_loader": 32,
        "./config": 42,
        "./event_listeners": 65,
        "./http": 66,
        "./json/builder": 68,
        "./json/parser": 69,
        "./maintenance_mode_message": 70,
        "./model/api": 71,
        "./model/operation": 73,
        "./model/paginator": 74,
        "./model/resource_waiter": 75,
        "./model/shape": 76,
        "./param_validator": 77,
        "./protocol/json": 80,
        "./protocol/query": 81,
        "./protocol/rest": 82,
        "./protocol/rest_json": 83,
        "./protocol/rest_xml": 84,
        "./request": 91,
        "./resource_waiter": 92,
        "./response": 93,
        "./sequential_executor": 95,
        "./service": 96,
        "./signers/request_signer": 123,
        "./util": 131,
        "./xml/builder": 133
    } ],
    138: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var LRU_1 = require("./utils/LRU");
        var CACHE_SIZE = 1e3;
        var EndpointCache = function() {
            function EndpointCache(maxSize) {
                if (maxSize === void 0) {
                    maxSize = CACHE_SIZE;
                }
                this.maxSize = maxSize;
                this.cache = new LRU_1.LRUCache(maxSize);
            }
            Object.defineProperty(EndpointCache.prototype, "size", {
                get: function() {
                    return this.cache.length;
                },
                enumerable: true,
                configurable: true
            });
            EndpointCache.prototype.put = function(key, value) {
                var keyString = typeof key !== "string" ? EndpointCache.getKeyString(key) : key;
                var endpointRecord = this.populateValue(value);
                this.cache.put(keyString, endpointRecord);
            };
            EndpointCache.prototype.get = function(key) {
                var keyString = typeof key !== "string" ? EndpointCache.getKeyString(key) : key;
                var now = Date.now();
                var records = this.cache.get(keyString);
                if (records) {
                    for (var i = records.length - 1; i >= 0; i--) {
                        var record = records[i];
                        if (record.Expire < now) {
                            records.splice(i, 1);
                        }
                    }
                    if (records.length === 0) {
                        this.cache.remove(keyString);
                        return undefined;
                    }
                }
                return records;
            };
            EndpointCache.getKeyString = function(key) {
                var identifiers = [];
                var identifierNames = Object.keys(key).sort();
                for (var i = 0; i < identifierNames.length; i++) {
                    var identifierName = identifierNames[i];
                    if (key[identifierName] === undefined) continue;
                    identifiers.push(key[identifierName]);
                }
                return identifiers.join(" ");
            };
            EndpointCache.prototype.populateValue = function(endpoints) {
                var now = Date.now();
                return endpoints.map(function(endpoint) {
                    return {
                        Address: endpoint.Address || "",
                        Expire: now + (endpoint.CachePeriodInMinutes || 1) * 60 * 1e3
                    };
                });
            };
            EndpointCache.prototype.empty = function() {
                this.cache.empty();
            };
            EndpointCache.prototype.remove = function(key) {
                var keyString = typeof key !== "string" ? EndpointCache.getKeyString(key) : key;
                this.cache.remove(keyString);
            };
            return EndpointCache;
        }();
        exports.EndpointCache = EndpointCache;
    }, {
        "./utils/LRU": 139
    } ],
    139: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var LinkedListNode = function() {
            function LinkedListNode(key, value) {
                this.key = key;
                this.value = value;
            }
            return LinkedListNode;
        }();
        var LRUCache = function() {
            function LRUCache(size) {
                this.nodeMap = {};
                this.size = 0;
                if (typeof size !== "number" || size < 1) {
                    throw new Error("Cache size can only be positive number");
                }
                this.sizeLimit = size;
            }
            Object.defineProperty(LRUCache.prototype, "length", {
                get: function() {
                    return this.size;
                },
                enumerable: true,
                configurable: true
            });
            LRUCache.prototype.prependToList = function(node) {
                if (!this.headerNode) {
                    this.tailNode = node;
                } else {
                    this.headerNode.prev = node;
                    node.next = this.headerNode;
                }
                this.headerNode = node;
                this.size++;
            };
            LRUCache.prototype.removeFromTail = function() {
                if (!this.tailNode) {
                    return undefined;
                }
                var node = this.tailNode;
                var prevNode = node.prev;
                if (prevNode) {
                    prevNode.next = undefined;
                }
                node.prev = undefined;
                this.tailNode = prevNode;
                this.size--;
                return node;
            };
            LRUCache.prototype.detachFromList = function(node) {
                if (this.headerNode === node) {
                    this.headerNode = node.next;
                }
                if (this.tailNode === node) {
                    this.tailNode = node.prev;
                }
                if (node.prev) {
                    node.prev.next = node.next;
                }
                if (node.next) {
                    node.next.prev = node.prev;
                }
                node.next = undefined;
                node.prev = undefined;
                this.size--;
            };
            LRUCache.prototype.get = function(key) {
                if (this.nodeMap[key]) {
                    var node = this.nodeMap[key];
                    this.detachFromList(node);
                    this.prependToList(node);
                    return node.value;
                }
            };
            LRUCache.prototype.remove = function(key) {
                if (this.nodeMap[key]) {
                    var node = this.nodeMap[key];
                    this.detachFromList(node);
                    delete this.nodeMap[key];
                }
            };
            LRUCache.prototype.put = function(key, value) {
                if (this.nodeMap[key]) {
                    this.remove(key);
                } else if (this.size === this.sizeLimit) {
                    var tailNode = this.removeFromTail();
                    var key_1 = tailNode.key;
                    delete this.nodeMap[key_1];
                }
                var newNode = new LinkedListNode(key, value);
                this.nodeMap[key] = newNode;
                this.prependToList(newNode);
            };
            LRUCache.prototype.empty = function() {
                var keys = Object.keys(this.nodeMap);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var node = this.nodeMap[key];
                    this.detachFromList(node);
                    delete this.nodeMap[key];
                }
            };
            return LRUCache;
        }();
        exports.LRUCache = LRUCache;
    }, {} ],
    133: [ function(require, module, exports) {
        var util = require("../util");
        var XmlNode = require("./xml-node").XmlNode;
        var XmlText = require("./xml-text").XmlText;
        function XmlBuilder() {}
        XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
            var xml = new XmlNode(rootElement);
            applyNamespaces(xml, shape, true);
            serialize(xml, params, shape);
            return xml.children.length > 0 || noEmpty ? xml.toString() : "";
        };
        function serialize(xml, value, shape) {
            switch (shape.type) {
              case "structure":
                return serializeStructure(xml, value, shape);

              case "map":
                return serializeMap(xml, value, shape);

              case "list":
                return serializeList(xml, value, shape);

              default:
                return serializeScalar(xml, value, shape);
            }
        }
        function serializeStructure(xml, params, shape) {
            util.arrayEach(shape.memberNames, function(memberName) {
                var memberShape = shape.members[memberName];
                if (memberShape.location !== "body") return;
                var value = params[memberName];
                var name = memberShape.name;
                if (value !== undefined && value !== null) {
                    if (memberShape.isXmlAttribute) {
                        xml.addAttribute(name, value);
                    } else if (memberShape.flattened) {
                        serialize(xml, value, memberShape);
                    } else {
                        var element = new XmlNode(name);
                        xml.addChildNode(element);
                        applyNamespaces(element, memberShape);
                        serialize(element, value, memberShape);
                    }
                }
            });
        }
        function serializeMap(xml, map, shape) {
            var xmlKey = shape.key.name || "key";
            var xmlValue = shape.value.name || "value";
            util.each(map, function(key, value) {
                var entry = new XmlNode(shape.flattened ? shape.name : "entry");
                xml.addChildNode(entry);
                var entryKey = new XmlNode(xmlKey);
                var entryValue = new XmlNode(xmlValue);
                entry.addChildNode(entryKey);
                entry.addChildNode(entryValue);
                serialize(entryKey, key, shape.key);
                serialize(entryValue, value, shape.value);
            });
        }
        function serializeList(xml, list, shape) {
            if (shape.flattened) {
                util.arrayEach(list, function(value) {
                    var name = shape.member.name || shape.name;
                    var element = new XmlNode(name);
                    xml.addChildNode(element);
                    serialize(element, value, shape.member);
                });
            } else {
                util.arrayEach(list, function(value) {
                    var name = shape.member.name || "member";
                    var element = new XmlNode(name);
                    xml.addChildNode(element);
                    serialize(element, value, shape.member);
                });
            }
        }
        function serializeScalar(xml, value, shape) {
            xml.addChildNode(new XmlText(shape.toWireFormat(value)));
        }
        function applyNamespaces(xml, shape, isRoot) {
            var uri, prefix = "xmlns";
            if (shape.xmlNamespaceUri) {
                uri = shape.xmlNamespaceUri;
                if (shape.xmlNamespacePrefix) prefix += ":" + shape.xmlNamespacePrefix;
            } else if (isRoot && shape.api.xmlNamespaceUri) {
                uri = shape.api.xmlNamespaceUri;
            }
            if (uri) xml.addAttribute(prefix, uri);
        }
        module.exports = XmlBuilder;
    }, {
        "../util": 131,
        "./xml-node": 136,
        "./xml-text": 137
    } ],
    137: [ function(require, module, exports) {
        var escapeElement = require("./escape-element").escapeElement;
        function XmlText(value) {
            this.value = value;
        }
        XmlText.prototype.toString = function() {
            return escapeElement("" + this.value);
        };
        module.exports = {
            XmlText: XmlText
        };
    }, {
        "./escape-element": 135
    } ],
    135: [ function(require, module, exports) {
        function escapeElement(value) {
            return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
        }
        module.exports = {
            escapeElement: escapeElement
        };
    }, {} ],
    136: [ function(require, module, exports) {
        var escapeAttribute = require("./escape-attribute").escapeAttribute;
        function XmlNode(name, children) {
            if (children === void 0) {
                children = [];
            }
            this.name = name;
            this.children = children;
            this.attributes = {};
        }
        XmlNode.prototype.addAttribute = function(name, value) {
            this.attributes[name] = value;
            return this;
        };
        XmlNode.prototype.addChildNode = function(child) {
            this.children.push(child);
            return this;
        };
        XmlNode.prototype.removeAttribute = function(name) {
            delete this.attributes[name];
            return this;
        };
        XmlNode.prototype.toString = function() {
            var hasChildren = Boolean(this.children.length);
            var xmlText = "<" + this.name;
            var attributes = this.attributes;
            for (var i = 0, attributeNames = Object.keys(attributes); i < attributeNames.length; i++) {
                var attributeName = attributeNames[i];
                var attribute = attributes[attributeName];
                if (typeof attribute !== "undefined" && attribute !== null) {
                    xmlText += " " + attributeName + '="' + escapeAttribute("" + attribute) + '"';
                }
            }
            return xmlText += !hasChildren ? "/>" : ">" + this.children.map(function(c) {
                return c.toString();
            }).join("") + "</" + this.name + ">";
        };
        module.exports = {
            XmlNode: XmlNode
        };
    }, {
        "./escape-attribute": 134
    } ],
    134: [ function(require, module, exports) {
        function escapeAttribute(value) {
            return value.replace(/&/g, "&amp;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
        }
        module.exports = {
            escapeAttribute: escapeAttribute
        };
    }, {} ],
    123: [ function(require, module, exports) {
        var AWS = require("../core");
        var inherit = AWS.util.inherit;
        AWS.Signers.RequestSigner = inherit({
            constructor: function RequestSigner(request) {
                this.request = request;
            },
            setServiceClientId: function setServiceClientId(id) {
                this.serviceClientId = id;
            },
            getServiceClientId: function getServiceClientId() {
                return this.serviceClientId;
            }
        });
        AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
            switch (version) {
              case "v2":
                return AWS.Signers.V2;

              case "v3":
                return AWS.Signers.V3;

              case "s3v4":
                return AWS.Signers.V4;

              case "v4":
                return AWS.Signers.V4;

              case "s3":
                return AWS.Signers.S3;

              case "v3https":
                return AWS.Signers.V3Https;

              case "bearer":
                return AWS.Signers.Bearer;
            }
            throw new Error("Unknown signing version " + version);
        };
        require("./v2");
        require("./v3");
        require("./v3https");
        require("./v4");
        require("./s3");
        require("./presign");
        require("./bearer");
    }, {
        "../core": 44,
        "./bearer": 121,
        "./presign": 122,
        "./s3": 124,
        "./v2": 125,
        "./v3": 126,
        "./v3https": 127,
        "./v4": 128
    } ],
    128: [ function(require, module, exports) {
        var AWS = require("../core");
        var v4Credentials = require("./v4_credentials");
        var inherit = AWS.util.inherit;
        var expiresHeader = "presigned-expires";
        AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
            constructor: function V4(request, serviceName, options) {
                AWS.Signers.RequestSigner.call(this, request);
                this.serviceName = serviceName;
                options = options || {};
                this.signatureCache = typeof options.signatureCache === "boolean" ? options.signatureCache : true;
                this.operation = options.operation;
                this.signatureVersion = options.signatureVersion;
            },
            algorithm: "AWS4-HMAC-SHA256",
            addAuthorization: function addAuthorization(credentials, date) {
                var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, "");
                if (this.isPresigned()) {
                    this.updateForPresigned(credentials, datetime);
                } else {
                    this.addHeaders(credentials, datetime);
                }
                this.request.headers["Authorization"] = this.authorization(credentials, datetime);
            },
            addHeaders: function addHeaders(credentials, datetime) {
                this.request.headers["X-Amz-Date"] = datetime;
                if (credentials.sessionToken) {
                    this.request.headers["x-amz-security-token"] = credentials.sessionToken;
                }
            },
            updateForPresigned: function updateForPresigned(credentials, datetime) {
                var credString = this.credentialString(datetime);
                var qs = {
                    "X-Amz-Date": datetime,
                    "X-Amz-Algorithm": this.algorithm,
                    "X-Amz-Credential": credentials.accessKeyId + "/" + credString,
                    "X-Amz-Expires": this.request.headers[expiresHeader],
                    "X-Amz-SignedHeaders": this.signedHeaders()
                };
                if (credentials.sessionToken) {
                    qs["X-Amz-Security-Token"] = credentials.sessionToken;
                }
                if (this.request.headers["Content-Type"]) {
                    qs["Content-Type"] = this.request.headers["Content-Type"];
                }
                if (this.request.headers["Content-MD5"]) {
                    qs["Content-MD5"] = this.request.headers["Content-MD5"];
                }
                if (this.request.headers["Cache-Control"]) {
                    qs["Cache-Control"] = this.request.headers["Cache-Control"];
                }
                AWS.util.each.call(this, this.request.headers, function(key, value) {
                    if (key === expiresHeader) return;
                    if (this.isSignableHeader(key)) {
                        var lowerKey = key.toLowerCase();
                        if (lowerKey.indexOf("x-amz-meta-") === 0) {
                            qs[lowerKey] = value;
                        } else if (lowerKey.indexOf("x-amz-") === 0) {
                            qs[key] = value;
                        }
                    }
                });
                var sep = this.request.path.indexOf("?") >= 0 ? "&" : "?";
                this.request.path += sep + AWS.util.queryParamsToString(qs);
            },
            authorization: function authorization(credentials, datetime) {
                var parts = [];
                var credString = this.credentialString(datetime);
                parts.push(this.algorithm + " Credential=" + credentials.accessKeyId + "/" + credString);
                parts.push("SignedHeaders=" + this.signedHeaders());
                parts.push("Signature=" + this.signature(credentials, datetime));
                return parts.join(", ");
            },
            signature: function signature(credentials, datetime) {
                var signingKey = v4Credentials.getSigningKey(credentials, datetime.substr(0, 8), this.request.region, this.serviceName, this.signatureCache);
                return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), "hex");
            },
            stringToSign: function stringToSign(datetime) {
                var parts = [];
                parts.push("AWS4-HMAC-SHA256");
                parts.push(datetime);
                parts.push(this.credentialString(datetime));
                parts.push(this.hexEncodedHash(this.canonicalString()));
                return parts.join("\n");
            },
            canonicalString: function canonicalString() {
                var parts = [], pathname = this.request.pathname();
                if (this.serviceName !== "s3" && this.signatureVersion !== "s3v4") pathname = AWS.util.uriEscapePath(pathname);
                parts.push(this.request.method);
                parts.push(pathname);
                parts.push(this.request.search());
                parts.push(this.canonicalHeaders() + "\n");
                parts.push(this.signedHeaders());
                parts.push(this.hexEncodedBodyHash());
                return parts.join("\n");
            },
            canonicalHeaders: function canonicalHeaders() {
                var headers = [];
                AWS.util.each.call(this, this.request.headers, function(key, item) {
                    headers.push([ key, item ]);
                });
                headers.sort(function(a, b) {
                    return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
                });
                var parts = [];
                AWS.util.arrayEach.call(this, headers, function(item) {
                    var key = item[0].toLowerCase();
                    if (this.isSignableHeader(key)) {
                        var value = item[1];
                        if (typeof value === "undefined" || value === null || typeof value.toString !== "function") {
                            throw AWS.util.error(new Error("Header " + key + " contains invalid value"), {
                                code: "InvalidHeader"
                            });
                        }
                        parts.push(key + ":" + this.canonicalHeaderValues(value.toString()));
                    }
                });
                return parts.join("\n");
            },
            canonicalHeaderValues: function canonicalHeaderValues(values) {
                return values.replace(/\s+/g, " ").replace(/^\s+|\s+$/g, "");
            },
            signedHeaders: function signedHeaders() {
                var keys = [];
                AWS.util.each.call(this, this.request.headers, function(key) {
                    key = key.toLowerCase();
                    if (this.isSignableHeader(key)) keys.push(key);
                });
                return keys.sort().join(";");
            },
            credentialString: function credentialString(datetime) {
                return v4Credentials.createScope(datetime.substr(0, 8), this.request.region, this.serviceName);
            },
            hexEncodedHash: function hash(string) {
                return AWS.util.crypto.sha256(string, "hex");
            },
            hexEncodedBodyHash: function hexEncodedBodyHash() {
                var request = this.request;
                if (this.isPresigned() && [ "s3", "s3-object-lambda" ].indexOf(this.serviceName) > -1 && !request.body) {
                    return "UNSIGNED-PAYLOAD";
                } else if (request.headers["X-Amz-Content-Sha256"]) {
                    return request.headers["X-Amz-Content-Sha256"];
                } else {
                    return this.hexEncodedHash(this.request.body || "");
                }
            },
            unsignableHeaders: [ "authorization", "content-type", "content-length", "user-agent", expiresHeader, "expect", "x-amzn-trace-id" ],
            isSignableHeader: function isSignableHeader(key) {
                if (key.toLowerCase().indexOf("x-amz-") === 0) return true;
                return this.unsignableHeaders.indexOf(key) < 0;
            },
            isPresigned: function isPresigned() {
                return this.request.headers[expiresHeader] ? true : false;
            }
        });
        module.exports = AWS.Signers.V4;
    }, {
        "../core": 44,
        "./v4_credentials": 129
    } ],
    129: [ function(require, module, exports) {
        var AWS = require("../core");
        var cachedSecret = {};
        var cacheQueue = [];
        var maxCacheEntries = 50;
        var v4Identifier = "aws4_request";
        module.exports = {
            createScope: function createScope(date, region, serviceName) {
                return [ date.substr(0, 8), region, serviceName, v4Identifier ].join("/");
            },
            getSigningKey: function getSigningKey(credentials, date, region, service, shouldCache) {
                var credsIdentifier = AWS.util.crypto.hmac(credentials.secretAccessKey, credentials.accessKeyId, "base64");
                var cacheKey = [ credsIdentifier, date, region, service ].join("_");
                shouldCache = shouldCache !== false;
                if (shouldCache && cacheKey in cachedSecret) {
                    return cachedSecret[cacheKey];
                }
                var kDate = AWS.util.crypto.hmac("AWS4" + credentials.secretAccessKey, date, "buffer");
                var kRegion = AWS.util.crypto.hmac(kDate, region, "buffer");
                var kService = AWS.util.crypto.hmac(kRegion, service, "buffer");
                var signingKey = AWS.util.crypto.hmac(kService, v4Identifier, "buffer");
                if (shouldCache) {
                    cachedSecret[cacheKey] = signingKey;
                    cacheQueue.push(cacheKey);
                    if (cacheQueue.length > maxCacheEntries) {
                        delete cachedSecret[cacheQueue.shift()];
                    }
                }
                return signingKey;
            },
            emptyCache: function emptyCache() {
                cachedSecret = {};
                cacheQueue = [];
            }
        };
    }, {
        "../core": 44
    } ],
    127: [ function(require, module, exports) {
        var AWS = require("../core");
        var inherit = AWS.util.inherit;
        require("./v3");
        AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
            authorization: function authorization(credentials) {
                return "AWS3-HTTPS " + "AWSAccessKeyId=" + credentials.accessKeyId + "," + "Algorithm=HmacSHA256," + "Signature=" + this.signature(credentials);
            },
            stringToSign: function stringToSign() {
                return this.request.headers["X-Amz-Date"];
            }
        });
        module.exports = AWS.Signers.V3Https;
    }, {
        "../core": 44,
        "./v3": 126
    } ],
    126: [ function(require, module, exports) {
        var AWS = require("../core");
        var inherit = AWS.util.inherit;
        AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
            addAuthorization: function addAuthorization(credentials, date) {
                var datetime = AWS.util.date.rfc822(date);
                this.request.headers["X-Amz-Date"] = datetime;
                if (credentials.sessionToken) {
                    this.request.headers["x-amz-security-token"] = credentials.sessionToken;
                }
                this.request.headers["X-Amzn-Authorization"] = this.authorization(credentials, datetime);
            },
            authorization: function authorization(credentials) {
                return "AWS3 " + "AWSAccessKeyId=" + credentials.accessKeyId + "," + "Algorithm=HmacSHA256," + "SignedHeaders=" + this.signedHeaders() + "," + "Signature=" + this.signature(credentials);
            },
            signedHeaders: function signedHeaders() {
                var headers = [];
                AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
                    headers.push(h.toLowerCase());
                });
                return headers.sort().join(";");
            },
            canonicalHeaders: function canonicalHeaders() {
                var headers = this.request.headers;
                var parts = [];
                AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
                    parts.push(h.toLowerCase().trim() + ":" + String(headers[h]).trim());
                });
                return parts.sort().join("\n") + "\n";
            },
            headersToSign: function headersToSign() {
                var headers = [];
                AWS.util.each(this.request.headers, function iterator(k) {
                    if (k === "Host" || k === "Content-Encoding" || k.match(/^X-Amz/i)) {
                        headers.push(k);
                    }
                });
                return headers;
            },
            signature: function signature(credentials) {
                return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), "base64");
            },
            stringToSign: function stringToSign() {
                var parts = [];
                parts.push(this.request.method);
                parts.push("/");
                parts.push("");
                parts.push(this.canonicalHeaders());
                parts.push(this.request.body);
                return AWS.util.crypto.sha256(parts.join("\n"));
            }
        });
        module.exports = AWS.Signers.V3;
    }, {
        "../core": 44
    } ],
    125: [ function(require, module, exports) {
        var AWS = require("../core");
        var inherit = AWS.util.inherit;
        AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
            addAuthorization: function addAuthorization(credentials, date) {
                if (!date) date = AWS.util.date.getDate();
                var r = this.request;
                r.params.Timestamp = AWS.util.date.iso8601(date);
                r.params.SignatureVersion = "2";
                r.params.SignatureMethod = "HmacSHA256";
                r.params.AWSAccessKeyId = credentials.accessKeyId;
                if (credentials.sessionToken) {
                    r.params.SecurityToken = credentials.sessionToken;
                }
                delete r.params.Signature;
                r.params.Signature = this.signature(credentials);
                r.body = AWS.util.queryParamsToString(r.params);
                r.headers["Content-Length"] = r.body.length;
            },
            signature: function signature(credentials) {
                return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), "base64");
            },
            stringToSign: function stringToSign() {
                var parts = [];
                parts.push(this.request.method);
                parts.push(this.request.endpoint.host.toLowerCase());
                parts.push(this.request.pathname());
                parts.push(AWS.util.queryParamsToString(this.request.params));
                return parts.join("\n");
            }
        });
        module.exports = AWS.Signers.V2;
    }, {
        "../core": 44
    } ],
    124: [ function(require, module, exports) {
        var AWS = require("../core");
        var inherit = AWS.util.inherit;
        AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
            subResources: {
                acl: 1,
                accelerate: 1,
                analytics: 1,
                cors: 1,
                lifecycle: 1,
                delete: 1,
                inventory: 1,
                location: 1,
                logging: 1,
                metrics: 1,
                notification: 1,
                partNumber: 1,
                policy: 1,
                requestPayment: 1,
                replication: 1,
                restore: 1,
                tagging: 1,
                torrent: 1,
                uploadId: 1,
                uploads: 1,
                versionId: 1,
                versioning: 1,
                versions: 1,
                website: 1
            },
            responseHeaders: {
                "response-content-type": 1,
                "response-content-language": 1,
                "response-expires": 1,
                "response-cache-control": 1,
                "response-content-disposition": 1,
                "response-content-encoding": 1
            },
            addAuthorization: function addAuthorization(credentials, date) {
                if (!this.request.headers["presigned-expires"]) {
                    this.request.headers["X-Amz-Date"] = AWS.util.date.rfc822(date);
                }
                if (credentials.sessionToken) {
                    this.request.headers["x-amz-security-token"] = credentials.sessionToken;
                }
                var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
                var auth = "AWS " + credentials.accessKeyId + ":" + signature;
                this.request.headers["Authorization"] = auth;
            },
            stringToSign: function stringToSign() {
                var r = this.request;
                var parts = [];
                parts.push(r.method);
                parts.push(r.headers["Content-MD5"] || "");
                parts.push(r.headers["Content-Type"] || "");
                parts.push(r.headers["presigned-expires"] || "");
                var headers = this.canonicalizedAmzHeaders();
                if (headers) parts.push(headers);
                parts.push(this.canonicalizedResource());
                return parts.join("\n");
            },
            canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {
                var amzHeaders = [];
                AWS.util.each(this.request.headers, function(name) {
                    if (name.match(/^x-amz-/i)) amzHeaders.push(name);
                });
                amzHeaders.sort(function(a, b) {
                    return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
                });
                var parts = [];
                AWS.util.arrayEach.call(this, amzHeaders, function(name) {
                    parts.push(name.toLowerCase() + ":" + String(this.request.headers[name]));
                });
                return parts.join("\n");
            },
            canonicalizedResource: function canonicalizedResource() {
                var r = this.request;
                var parts = r.path.split("?");
                var path = parts[0];
                var querystring = parts[1];
                var resource = "";
                if (r.virtualHostedBucket) resource += "/" + r.virtualHostedBucket;
                resource += path;
                if (querystring) {
                    var resources = [];
                    AWS.util.arrayEach.call(this, querystring.split("&"), function(param) {
                        var name = param.split("=")[0];
                        var value = param.split("=")[1];
                        if (this.subResources[name] || this.responseHeaders[name]) {
                            var subresource = {
                                name: name
                            };
                            if (value !== undefined) {
                                if (this.subResources[name]) {
                                    subresource.value = value;
                                } else {
                                    subresource.value = decodeURIComponent(value);
                                }
                            }
                            resources.push(subresource);
                        }
                    });
                    resources.sort(function(a, b) {
                        return a.name < b.name ? -1 : 1;
                    });
                    if (resources.length) {
                        querystring = [];
                        AWS.util.arrayEach(resources, function(res) {
                            if (res.value === undefined) {
                                querystring.push(res.name);
                            } else {
                                querystring.push(res.name + "=" + res.value);
                            }
                        });
                        resource += "?" + querystring.join("&");
                    }
                }
                return resource;
            },
            sign: function sign(secret, string) {
                return AWS.util.crypto.hmac(secret, string, "base64", "sha1");
            }
        });
        module.exports = AWS.Signers.S3;
    }, {
        "../core": 44
    } ],
    122: [ function(require, module, exports) {
        var AWS = require("../core");
        var inherit = AWS.util.inherit;
        var expiresHeader = "presigned-expires";
        function signedUrlBuilder(request) {
            var expires = request.httpRequest.headers[expiresHeader];
            var signerClass = request.service.getSignerClass(request);
            delete request.httpRequest.headers["User-Agent"];
            delete request.httpRequest.headers["X-Amz-User-Agent"];
            if (signerClass === AWS.Signers.V4) {
                if (expires > 604800) {
                    var message = "Presigning does not support expiry time greater " + "than a week with SigV4 signing.";
                    throw AWS.util.error(new Error(), {
                        code: "InvalidExpiryTime",
                        message: message,
                        retryable: false
                    });
                }
                request.httpRequest.headers[expiresHeader] = expires;
            } else if (signerClass === AWS.Signers.S3) {
                var now = request.service ? request.service.getSkewCorrectedDate() : AWS.util.date.getDate();
                request.httpRequest.headers[expiresHeader] = parseInt(AWS.util.date.unixTimestamp(now) + expires, 10).toString();
            } else {
                throw AWS.util.error(new Error(), {
                    message: "Presigning only supports S3 or SigV4 signing.",
                    code: "UnsupportedSigner",
                    retryable: false
                });
            }
        }
        function signedUrlSigner(request) {
            var endpoint = request.httpRequest.endpoint;
            var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
            var queryParams = {};
            if (parsedUrl.search) {
                queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
            }
            var auth = request.httpRequest.headers["Authorization"].split(" ");
            if (auth[0] === "AWS") {
                auth = auth[1].split(":");
                queryParams["Signature"] = auth.pop();
                queryParams["AWSAccessKeyId"] = auth.join(":");
                AWS.util.each(request.httpRequest.headers, function(key, value) {
                    if (key === expiresHeader) key = "Expires";
                    if (key.indexOf("x-amz-meta-") === 0) {
                        delete queryParams[key];
                        key = key.toLowerCase();
                    }
                    queryParams[key] = value;
                });
                delete request.httpRequest.headers[expiresHeader];
                delete queryParams["Authorization"];
                delete queryParams["Host"];
            } else if (auth[0] === "AWS4-HMAC-SHA256") {
                auth.shift();
                var rest = auth.join(" ");
                var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
                queryParams["X-Amz-Signature"] = signature;
                delete queryParams["Expires"];
            }
            endpoint.pathname = parsedUrl.pathname;
            endpoint.search = AWS.util.queryParamsToString(queryParams);
        }
        AWS.Signers.Presign = inherit({
            sign: function sign(request, expireTime, callback) {
                request.httpRequest.headers[expiresHeader] = expireTime || 3600;
                request.on("build", signedUrlBuilder);
                request.on("sign", signedUrlSigner);
                request.removeListener("afterBuild", AWS.EventListeners.Core.SET_CONTENT_LENGTH);
                request.removeListener("afterBuild", AWS.EventListeners.Core.COMPUTE_SHA256);
                request.emit("beforePresign", [ request ]);
                if (callback) {
                    request.build(function() {
                        if (this.response.error) callback(this.response.error); else {
                            callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
                        }
                    });
                } else {
                    request.build();
                    if (request.response.error) throw request.response.error;
                    return AWS.util.urlFormat(request.httpRequest.endpoint);
                }
            }
        });
        module.exports = AWS.Signers.Presign;
    }, {
        "../core": 44
    } ],
    121: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.Signers.Bearer = AWS.util.inherit(AWS.Signers.RequestSigner, {
            constructor: function Bearer(request) {
                AWS.Signers.RequestSigner.call(this, request);
            },
            addAuthorization: function addAuthorization(token) {
                this.request.headers["Authorization"] = "Bearer " + token.token;
            }
        });
    }, {
        "../core": 44
    } ],
    96: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var AWS = require("./core");
                var Api = require("./model/api");
                var regionConfig = require("./region_config");
                var inherit = AWS.util.inherit;
                var clientCount = 0;
                var region_utils = require("./region/utils");
                AWS.Service = inherit({
                    constructor: function Service(config) {
                        if (!this.loadServiceClass) {
                            throw AWS.util.error(new Error(), "Service must be constructed with `new' operator");
                        }
                        if (config) {
                            if (config.region) {
                                var region = config.region;
                                if (region_utils.isFipsRegion(region)) {
                                    config.region = region_utils.getRealRegion(region);
                                    config.useFipsEndpoint = true;
                                }
                                if (region_utils.isGlobalRegion(region)) {
                                    config.region = region_utils.getRealRegion(region);
                                }
                            }
                            if (typeof config.useDualstack === "boolean" && typeof config.useDualstackEndpoint !== "boolean") {
                                config.useDualstackEndpoint = config.useDualstack;
                            }
                        }
                        var ServiceClass = this.loadServiceClass(config || {});
                        if (ServiceClass) {
                            var originalConfig = AWS.util.copy(config);
                            var svc = new ServiceClass(config);
                            Object.defineProperty(svc, "_originalConfig", {
                                get: function() {
                                    return originalConfig;
                                },
                                enumerable: false,
                                configurable: true
                            });
                            svc._clientId = ++clientCount;
                            return svc;
                        }
                        this.initialize(config);
                    },
                    initialize: function initialize(config) {
                        var svcConfig = AWS.config[this.serviceIdentifier];
                        this.config = new AWS.Config(AWS.config);
                        if (svcConfig) this.config.update(svcConfig, true);
                        if (config) this.config.update(config, true);
                        this.validateService();
                        if (!this.config.endpoint) regionConfig.configureEndpoint(this);
                        this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
                        this.setEndpoint(this.config.endpoint);
                        AWS.SequentialExecutor.call(this);
                        AWS.Service.addDefaultMonitoringListeners(this);
                        if ((this.config.clientSideMonitoring || AWS.Service._clientSideMonitoring) && this.publisher) {
                            var publisher = this.publisher;
                            this.addNamedListener("PUBLISH_API_CALL", "apiCall", function PUBLISH_API_CALL(event) {
                                process.nextTick(function() {
                                    publisher.eventHandler(event);
                                });
                            });
                            this.addNamedListener("PUBLISH_API_ATTEMPT", "apiCallAttempt", function PUBLISH_API_ATTEMPT(event) {
                                process.nextTick(function() {
                                    publisher.eventHandler(event);
                                });
                            });
                        }
                    },
                    validateService: function validateService() {},
                    loadServiceClass: function loadServiceClass(serviceConfig) {
                        var config = serviceConfig;
                        if (!AWS.util.isEmpty(this.api)) {
                            return null;
                        } else if (config.apiConfig) {
                            return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
                        } else if (!this.constructor.services) {
                            return null;
                        } else {
                            config = new AWS.Config(AWS.config);
                            config.update(serviceConfig, true);
                            var version = config.apiVersions[this.constructor.serviceIdentifier];
                            version = version || config.apiVersion;
                            return this.getLatestServiceClass(version);
                        }
                    },
                    getLatestServiceClass: function getLatestServiceClass(version) {
                        version = this.getLatestServiceVersion(version);
                        if (this.constructor.services[version] === null) {
                            AWS.Service.defineServiceApi(this.constructor, version);
                        }
                        return this.constructor.services[version];
                    },
                    getLatestServiceVersion: function getLatestServiceVersion(version) {
                        if (!this.constructor.services || this.constructor.services.length === 0) {
                            throw new Error("No services defined on " + this.constructor.serviceIdentifier);
                        }
                        if (!version) {
                            version = "latest";
                        } else if (AWS.util.isType(version, Date)) {
                            version = AWS.util.date.iso8601(version).split("T")[0];
                        }
                        if (Object.hasOwnProperty(this.constructor.services, version)) {
                            return version;
                        }
                        var keys = Object.keys(this.constructor.services).sort();
                        var selectedVersion = null;
                        for (var i = keys.length - 1; i >= 0; i--) {
                            if (keys[i][keys[i].length - 1] !== "*") {
                                selectedVersion = keys[i];
                            }
                            if (keys[i].substr(0, 10) <= version) {
                                return selectedVersion;
                            }
                        }
                        throw new Error("Could not find " + this.constructor.serviceIdentifier + " API to satisfy version constraint `" + version + "'");
                    },
                    api: {},
                    defaultRetryCount: 3,
                    customizeRequests: function customizeRequests(callback) {
                        if (!callback) {
                            this.customRequestHandler = null;
                        } else if (typeof callback === "function") {
                            this.customRequestHandler = callback;
                        } else {
                            throw new Error("Invalid callback type '" + typeof callback + "' provided in customizeRequests");
                        }
                    },
                    makeRequest: function makeRequest(operation, params, callback) {
                        if (typeof params === "function") {
                            callback = params;
                            params = null;
                        }
                        params = params || {};
                        if (this.config.params) {
                            var rules = this.api.operations[operation];
                            if (rules) {
                                params = AWS.util.copy(params);
                                AWS.util.each(this.config.params, function(key, value) {
                                    if (rules.input.members[key]) {
                                        if (params[key] === undefined || params[key] === null) {
                                            params[key] = value;
                                        }
                                    }
                                });
                            }
                        }
                        var request = new AWS.Request(this, operation, params);
                        this.addAllRequestListeners(request);
                        this.attachMonitoringEmitter(request);
                        if (callback) request.send(callback);
                        return request;
                    },
                    makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
                        if (typeof params === "function") {
                            callback = params;
                            params = {};
                        }
                        var request = this.makeRequest(operation, params).toUnauthenticated();
                        return callback ? request.send(callback) : request;
                    },
                    waitFor: function waitFor(state, params, callback) {
                        var waiter = new AWS.ResourceWaiter(this, state);
                        return waiter.wait(params, callback);
                    },
                    addAllRequestListeners: function addAllRequestListeners(request) {
                        var list = [ AWS.events, AWS.EventListeners.Core, this.serviceInterface(), AWS.EventListeners.CorePost ];
                        for (var i = 0; i < list.length; i++) {
                            if (list[i]) request.addListeners(list[i]);
                        }
                        if (!this.config.paramValidation) {
                            request.removeListener("validate", AWS.EventListeners.Core.VALIDATE_PARAMETERS);
                        }
                        if (this.config.logger) {
                            request.addListeners(AWS.EventListeners.Logger);
                        }
                        this.setupRequestListeners(request);
                        if (typeof this.constructor.prototype.customRequestHandler === "function") {
                            this.constructor.prototype.customRequestHandler(request);
                        }
                        if (Object.prototype.hasOwnProperty.call(this, "customRequestHandler") && typeof this.customRequestHandler === "function") {
                            this.customRequestHandler(request);
                        }
                    },
                    apiCallEvent: function apiCallEvent(request) {
                        var api = request.service.api.operations[request.operation];
                        var monitoringEvent = {
                            Type: "ApiCall",
                            Api: api ? api.name : request.operation,
                            Version: 1,
                            Service: request.service.api.serviceId || request.service.api.endpointPrefix,
                            Region: request.httpRequest.region,
                            MaxRetriesExceeded: 0,
                            UserAgent: request.httpRequest.getUserAgent()
                        };
                        var response = request.response;
                        if (response.httpResponse.statusCode) {
                            monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;
                        }
                        if (response.error) {
                            var error = response.error;
                            var statusCode = response.httpResponse.statusCode;
                            if (statusCode > 299) {
                                if (error.code) monitoringEvent.FinalAwsException = error.code;
                                if (error.message) monitoringEvent.FinalAwsExceptionMessage = error.message;
                            } else {
                                if (error.code || error.name) monitoringEvent.FinalSdkException = error.code || error.name;
                                if (error.message) monitoringEvent.FinalSdkExceptionMessage = error.message;
                            }
                        }
                        return monitoringEvent;
                    },
                    apiAttemptEvent: function apiAttemptEvent(request) {
                        var api = request.service.api.operations[request.operation];
                        var monitoringEvent = {
                            Type: "ApiCallAttempt",
                            Api: api ? api.name : request.operation,
                            Version: 1,
                            Service: request.service.api.serviceId || request.service.api.endpointPrefix,
                            Fqdn: request.httpRequest.endpoint.hostname,
                            UserAgent: request.httpRequest.getUserAgent()
                        };
                        var response = request.response;
                        if (response.httpResponse.statusCode) {
                            monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;
                        }
                        if (!request._unAuthenticated && request.service.config.credentials && request.service.config.credentials.accessKeyId) {
                            monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;
                        }
                        if (!response.httpResponse.headers) return monitoringEvent;
                        if (request.httpRequest.headers["x-amz-security-token"]) {
                            monitoringEvent.SessionToken = request.httpRequest.headers["x-amz-security-token"];
                        }
                        if (response.httpResponse.headers["x-amzn-requestid"]) {
                            monitoringEvent.XAmznRequestId = response.httpResponse.headers["x-amzn-requestid"];
                        }
                        if (response.httpResponse.headers["x-amz-request-id"]) {
                            monitoringEvent.XAmzRequestId = response.httpResponse.headers["x-amz-request-id"];
                        }
                        if (response.httpResponse.headers["x-amz-id-2"]) {
                            monitoringEvent.XAmzId2 = response.httpResponse.headers["x-amz-id-2"];
                        }
                        return monitoringEvent;
                    },
                    attemptFailEvent: function attemptFailEvent(request) {
                        var monitoringEvent = this.apiAttemptEvent(request);
                        var response = request.response;
                        var error = response.error;
                        if (response.httpResponse.statusCode > 299) {
                            if (error.code) monitoringEvent.AwsException = error.code;
                            if (error.message) monitoringEvent.AwsExceptionMessage = error.message;
                        } else {
                            if (error.code || error.name) monitoringEvent.SdkException = error.code || error.name;
                            if (error.message) monitoringEvent.SdkExceptionMessage = error.message;
                        }
                        return monitoringEvent;
                    },
                    attachMonitoringEmitter: function attachMonitoringEmitter(request) {
                        var attemptTimestamp;
                        var attemptStartRealTime;
                        var attemptLatency;
                        var callStartRealTime;
                        var attemptCount = 0;
                        var region;
                        var callTimestamp;
                        var self = this;
                        var addToHead = true;
                        request.on("validate", function() {
                            callStartRealTime = AWS.util.realClock.now();
                            callTimestamp = Date.now();
                        }, addToHead);
                        request.on("sign", function() {
                            attemptStartRealTime = AWS.util.realClock.now();
                            attemptTimestamp = Date.now();
                            region = request.httpRequest.region;
                            attemptCount++;
                        }, addToHead);
                        request.on("validateResponse", function() {
                            attemptLatency = Math.round(AWS.util.realClock.now() - attemptStartRealTime);
                        });
                        request.addNamedListener("API_CALL_ATTEMPT", "success", function API_CALL_ATTEMPT() {
                            var apiAttemptEvent = self.apiAttemptEvent(request);
                            apiAttemptEvent.Timestamp = attemptTimestamp;
                            apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
                            apiAttemptEvent.Region = region;
                            self.emit("apiCallAttempt", [ apiAttemptEvent ]);
                        });
                        request.addNamedListener("API_CALL_ATTEMPT_RETRY", "retry", function API_CALL_ATTEMPT_RETRY() {
                            var apiAttemptEvent = self.attemptFailEvent(request);
                            apiAttemptEvent.Timestamp = attemptTimestamp;
                            attemptLatency = attemptLatency || Math.round(AWS.util.realClock.now() - attemptStartRealTime);
                            apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;
                            apiAttemptEvent.Region = region;
                            self.emit("apiCallAttempt", [ apiAttemptEvent ]);
                        });
                        request.addNamedListener("API_CALL", "complete", function API_CALL() {
                            var apiCallEvent = self.apiCallEvent(request);
                            apiCallEvent.AttemptCount = attemptCount;
                            if (apiCallEvent.AttemptCount <= 0) return;
                            apiCallEvent.Timestamp = callTimestamp;
                            var latency = Math.round(AWS.util.realClock.now() - callStartRealTime);
                            apiCallEvent.Latency = latency >= 0 ? latency : 0;
                            var response = request.response;
                            if (response.error && response.error.retryable && typeof response.retryCount === "number" && typeof response.maxRetries === "number" && response.retryCount >= response.maxRetries) {
                                apiCallEvent.MaxRetriesExceeded = 1;
                            }
                            self.emit("apiCall", [ apiCallEvent ]);
                        });
                    },
                    setupRequestListeners: function setupRequestListeners(request) {},
                    getSigningName: function getSigningName() {
                        return this.api.signingName || this.api.endpointPrefix;
                    },
                    getSignerClass: function getSignerClass(request) {
                        var version;
                        var operation = null;
                        var authtype = "";
                        if (request) {
                            var operations = request.service.api.operations || {};
                            operation = operations[request.operation] || null;
                            authtype = operation ? operation.authtype : "";
                        }
                        if (this.config.signatureVersion) {
                            version = this.config.signatureVersion;
                        } else if (authtype === "v4" || authtype === "v4-unsigned-body") {
                            version = "v4";
                        } else if (authtype === "bearer") {
                            version = "bearer";
                        } else {
                            version = this.api.signatureVersion;
                        }
                        return AWS.Signers.RequestSigner.getVersion(version);
                    },
                    serviceInterface: function serviceInterface() {
                        switch (this.api.protocol) {
                          case "ec2":
                            return AWS.EventListeners.Query;

                          case "query":
                            return AWS.EventListeners.Query;

                          case "json":
                            return AWS.EventListeners.Json;

                          case "rest-json":
                            return AWS.EventListeners.RestJson;

                          case "rest-xml":
                            return AWS.EventListeners.RestXml;
                        }
                        if (this.api.protocol) {
                            throw new Error("Invalid service `protocol' " + this.api.protocol + " in API config");
                        }
                    },
                    successfulResponse: function successfulResponse(resp) {
                        return resp.httpResponse.statusCode < 300;
                    },
                    numRetries: function numRetries() {
                        if (this.config.maxRetries !== undefined) {
                            return this.config.maxRetries;
                        } else {
                            return this.defaultRetryCount;
                        }
                    },
                    retryDelays: function retryDelays(retryCount, err) {
                        return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions, err);
                    },
                    retryableError: function retryableError(error) {
                        if (this.timeoutError(error)) return true;
                        if (this.networkingError(error)) return true;
                        if (this.expiredCredentialsError(error)) return true;
                        if (this.throttledError(error)) return true;
                        if (error.statusCode >= 500) return true;
                        return false;
                    },
                    networkingError: function networkingError(error) {
                        return error.code === "NetworkingError";
                    },
                    timeoutError: function timeoutError(error) {
                        return error.code === "TimeoutError";
                    },
                    expiredCredentialsError: function expiredCredentialsError(error) {
                        return error.code === "ExpiredTokenException";
                    },
                    clockSkewError: function clockSkewError(error) {
                        switch (error.code) {
                          case "RequestTimeTooSkewed":
                          case "RequestExpired":
                          case "InvalidSignatureException":
                          case "SignatureDoesNotMatch":
                          case "AuthFailure":
                          case "RequestInTheFuture":
                            return true;

                          default:
                            return false;
                        }
                    },
                    getSkewCorrectedDate: function getSkewCorrectedDate() {
                        return new Date(Date.now() + this.config.systemClockOffset);
                    },
                    applyClockOffset: function applyClockOffset(newServerTime) {
                        if (newServerTime) {
                            this.config.systemClockOffset = newServerTime - Date.now();
                        }
                    },
                    isClockSkewed: function isClockSkewed(newServerTime) {
                        if (newServerTime) {
                            return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 3e5;
                        }
                    },
                    throttledError: function throttledError(error) {
                        if (error.statusCode === 429) return true;
                        switch (error.code) {
                          case "ProvisionedThroughputExceededException":
                          case "Throttling":
                          case "ThrottlingException":
                          case "RequestLimitExceeded":
                          case "RequestThrottled":
                          case "RequestThrottledException":
                          case "TooManyRequestsException":
                          case "TransactionInProgressException":
                          case "EC2ThrottledException":
                            return true;

                          default:
                            return false;
                        }
                    },
                    endpointFromTemplate: function endpointFromTemplate(endpoint) {
                        if (typeof endpoint !== "string") return endpoint;
                        var e = endpoint;
                        e = e.replace(/\{service\}/g, this.api.endpointPrefix);
                        e = e.replace(/\{region\}/g, this.config.region);
                        e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? "https" : "http");
                        return e;
                    },
                    setEndpoint: function setEndpoint(endpoint) {
                        this.endpoint = new AWS.Endpoint(endpoint, this.config);
                    },
                    paginationConfig: function paginationConfig(operation, throwException) {
                        var paginator = this.api.operations[operation].paginator;
                        if (!paginator) {
                            if (throwException) {
                                var e = new Error();
                                throw AWS.util.error(e, "No pagination configuration for " + operation);
                            }
                            return null;
                        }
                        return paginator;
                    }
                });
                AWS.util.update(AWS.Service, {
                    defineMethods: function defineMethods(svc) {
                        AWS.util.each(svc.prototype.api.operations, function iterator(method) {
                            if (svc.prototype[method]) return;
                            var operation = svc.prototype.api.operations[method];
                            if (operation.authtype === "none") {
                                svc.prototype[method] = function(params, callback) {
                                    return this.makeUnauthenticatedRequest(method, params, callback);
                                };
                            } else {
                                svc.prototype[method] = function(params, callback) {
                                    return this.makeRequest(method, params, callback);
                                };
                            }
                        });
                    },
                    defineService: function defineService(serviceIdentifier, versions, features) {
                        AWS.Service._serviceMap[serviceIdentifier] = true;
                        if (!Array.isArray(versions)) {
                            features = versions;
                            versions = [];
                        }
                        var svc = inherit(AWS.Service, features || {});
                        if (typeof serviceIdentifier === "string") {
                            AWS.Service.addVersions(svc, versions);
                            var identifier = svc.serviceIdentifier || serviceIdentifier;
                            svc.serviceIdentifier = identifier;
                        } else {
                            svc.prototype.api = serviceIdentifier;
                            AWS.Service.defineMethods(svc);
                        }
                        AWS.SequentialExecutor.call(this.prototype);
                        if (!this.prototype.publisher && AWS.util.clientSideMonitoring) {
                            var Publisher = AWS.util.clientSideMonitoring.Publisher;
                            var configProvider = AWS.util.clientSideMonitoring.configProvider;
                            var publisherConfig = configProvider();
                            this.prototype.publisher = new Publisher(publisherConfig);
                            if (publisherConfig.enabled) {
                                AWS.Service._clientSideMonitoring = true;
                            }
                        }
                        AWS.SequentialExecutor.call(svc.prototype);
                        AWS.Service.addDefaultMonitoringListeners(svc.prototype);
                        return svc;
                    },
                    addVersions: function addVersions(svc, versions) {
                        if (!Array.isArray(versions)) versions = [ versions ];
                        svc.services = svc.services || {};
                        for (var i = 0; i < versions.length; i++) {
                            if (svc.services[versions[i]] === undefined) {
                                svc.services[versions[i]] = null;
                            }
                        }
                        svc.apiVersions = Object.keys(svc.services).sort();
                    },
                    defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
                        var svc = inherit(superclass, {
                            serviceIdentifier: superclass.serviceIdentifier
                        });
                        function setApi(api) {
                            if (api.isApi) {
                                svc.prototype.api = api;
                            } else {
                                svc.prototype.api = new Api(api, {
                                    serviceIdentifier: superclass.serviceIdentifier
                                });
                            }
                        }
                        if (typeof version === "string") {
                            if (apiConfig) {
                                setApi(apiConfig);
                            } else {
                                try {
                                    setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
                                } catch (err) {
                                    throw AWS.util.error(err, {
                                        message: "Could not find API configuration " + superclass.serviceIdentifier + "-" + version
                                    });
                                }
                            }
                            if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {
                                superclass.apiVersions = superclass.apiVersions.concat(version).sort();
                            }
                            superclass.services[version] = svc;
                        } else {
                            setApi(version);
                        }
                        AWS.Service.defineMethods(svc);
                        return svc;
                    },
                    hasService: function(identifier) {
                        return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);
                    },
                    addDefaultMonitoringListeners: function addDefaultMonitoringListeners(attachOn) {
                        attachOn.addNamedListener("MONITOR_EVENTS_BUBBLE", "apiCallAttempt", function EVENTS_BUBBLE(event) {
                            var baseClass = Object.getPrototypeOf(attachOn);
                            if (baseClass._events) baseClass.emit("apiCallAttempt", [ event ]);
                        });
                        attachOn.addNamedListener("CALL_EVENTS_BUBBLE", "apiCall", function CALL_EVENTS_BUBBLE(event) {
                            var baseClass = Object.getPrototypeOf(attachOn);
                            if (baseClass._events) baseClass.emit("apiCall", [ event ]);
                        });
                    },
                    _serviceMap: {}
                });
                AWS.util.mixin(AWS.Service, AWS.SequentialExecutor);
                module.exports = AWS.Service;
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "./core": 44,
        "./model/api": 71,
        "./region/utils": 88,
        "./region_config": 89,
        _process: 11
    } ],
    89: [ function(require, module, exports) {
        var util = require("./util");
        var regionConfig = require("./region_config_data.json");
        function generateRegionPrefix(region) {
            if (!region) return null;
            var parts = region.split("-");
            if (parts.length < 3) return null;
            return parts.slice(0, parts.length - 2).join("-") + "-*";
        }
        function derivedKeys(service) {
            var region = service.config.region;
            var regionPrefix = generateRegionPrefix(region);
            var endpointPrefix = service.api.endpointPrefix;
            return [ [ region, endpointPrefix ], [ regionPrefix, endpointPrefix ], [ region, "*" ], [ regionPrefix, "*" ], [ "*", endpointPrefix ], [ region, "internal-*" ], [ "*", "*" ] ].map(function(item) {
                return item[0] && item[1] ? item.join("/") : null;
            });
        }
        function applyConfig(service, config) {
            util.each(config, function(key, value) {
                if (key === "globalEndpoint") return;
                if (service.config[key] === undefined || service.config[key] === null) {
                    service.config[key] = value;
                }
            });
        }
        function configureEndpoint(service) {
            var keys = derivedKeys(service);
            var useFipsEndpoint = service.config.useFipsEndpoint;
            var useDualstackEndpoint = service.config.useDualstackEndpoint;
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (!key) continue;
                var rules = useFipsEndpoint ? useDualstackEndpoint ? regionConfig.dualstackFipsRules : regionConfig.fipsRules : useDualstackEndpoint ? regionConfig.dualstackRules : regionConfig.rules;
                if (Object.prototype.hasOwnProperty.call(rules, key)) {
                    var config = rules[key];
                    if (typeof config === "string") {
                        config = regionConfig.patterns[config];
                    }
                    service.isGlobalEndpoint = !!config.globalEndpoint;
                    if (config.signingRegion) {
                        service.signingRegion = config.signingRegion;
                    }
                    if (!config.signatureVersion) {
                        config.signatureVersion = "v4";
                    }
                    var useBearer = (service.api && service.api.signatureVersion) === "bearer";
                    applyConfig(service, Object.assign({}, config, {
                        signatureVersion: useBearer ? "bearer" : config.signatureVersion
                    }));
                    return;
                }
            }
        }
        function getEndpointSuffix(region) {
            var regionRegexes = {
                "^(us|eu|ap|sa|ca|me)\\-\\w+\\-\\d+$": "amazonaws.com",
                "^cn\\-\\w+\\-\\d+$": "amazonaws.com.cn",
                "^us\\-gov\\-\\w+\\-\\d+$": "amazonaws.com",
                "^us\\-iso\\-\\w+\\-\\d+$": "c2s.ic.gov",
                "^us\\-isob\\-\\w+\\-\\d+$": "sc2s.sgov.gov"
            };
            var defaultSuffix = "amazonaws.com";
            var regexes = Object.keys(regionRegexes);
            for (var i = 0; i < regexes.length; i++) {
                var regionPattern = RegExp(regexes[i]);
                var dnsSuffix = regionRegexes[regexes[i]];
                if (regionPattern.test(region)) return dnsSuffix;
            }
            return defaultSuffix;
        }
        module.exports = {
            configureEndpoint: configureEndpoint,
            getEndpointSuffix: getEndpointSuffix
        };
    }, {
        "./region_config_data.json": 90,
        "./util": 131
    } ],
    90: [ function(require, module, exports) {
        module.exports = {
            rules: {
                "*/*": {
                    endpoint: "{service}.{region}.amazonaws.com"
                },
                "cn-*/*": {
                    endpoint: "{service}.{region}.amazonaws.com.cn"
                },
                "us-iso-*/*": "usIso",
                "us-isob-*/*": "usIsob",
                "*/budgets": "globalSSL",
                "*/cloudfront": "globalSSL",
                "*/sts": "globalSSL",
                "*/importexport": {
                    endpoint: "{service}.amazonaws.com",
                    signatureVersion: "v2",
                    globalEndpoint: true
                },
                "*/route53": "globalSSL",
                "cn-*/route53": {
                    endpoint: "{service}.amazonaws.com.cn",
                    globalEndpoint: true,
                    signingRegion: "cn-northwest-1"
                },
                "us-gov-*/route53": "globalGovCloud",
                "us-iso-*/route53": {
                    endpoint: "{service}.c2s.ic.gov",
                    globalEndpoint: true,
                    signingRegion: "us-iso-east-1"
                },
                "us-isob-*/route53": {
                    endpoint: "{service}.sc2s.sgov.gov",
                    globalEndpoint: true,
                    signingRegion: "us-isob-east-1"
                },
                "*/waf": "globalSSL",
                "*/iam": "globalSSL",
                "cn-*/iam": {
                    endpoint: "{service}.cn-north-1.amazonaws.com.cn",
                    globalEndpoint: true,
                    signingRegion: "cn-north-1"
                },
                "us-iso-*/iam": {
                    endpoint: "{service}.us-iso-east-1.c2s.ic.gov",
                    globalEndpoint: true,
                    signingRegion: "us-iso-east-1"
                },
                "us-gov-*/iam": "globalGovCloud",
                "*/ce": {
                    endpoint: "{service}.us-east-1.amazonaws.com",
                    globalEndpoint: true,
                    signingRegion: "us-east-1"
                },
                "cn-*/ce": {
                    endpoint: "{service}.cn-northwest-1.amazonaws.com.cn",
                    globalEndpoint: true,
                    signingRegion: "cn-northwest-1"
                },
                "us-gov-*/sts": {
                    endpoint: "{service}.{region}.amazonaws.com"
                },
                "us-gov-west-1/s3": "s3signature",
                "us-west-1/s3": "s3signature",
                "us-west-2/s3": "s3signature",
                "eu-west-1/s3": "s3signature",
                "ap-southeast-1/s3": "s3signature",
                "ap-southeast-2/s3": "s3signature",
                "ap-northeast-1/s3": "s3signature",
                "sa-east-1/s3": "s3signature",
                "us-east-1/s3": {
                    endpoint: "{service}.amazonaws.com",
                    signatureVersion: "s3"
                },
                "us-east-1/sdb": {
                    endpoint: "{service}.amazonaws.com",
                    signatureVersion: "v2"
                },
                "*/sdb": {
                    endpoint: "{service}.{region}.amazonaws.com",
                    signatureVersion: "v2"
                },
                "*/resource-explorer-2": "dualstackByDefault",
                "*/kendra-ranking": "dualstackByDefault",
                "*/internetmonitor": "dualstackByDefault",
                "*/codecatalyst": "globalDualstackByDefault"
            },
            fipsRules: {
                "*/*": "fipsStandard",
                "us-gov-*/*": "fipsStandard",
                "us-iso-*/*": {
                    endpoint: "{service}-fips.{region}.c2s.ic.gov"
                },
                "us-iso-*/dms": "usIso",
                "us-isob-*/*": {
                    endpoint: "{service}-fips.{region}.sc2s.sgov.gov"
                },
                "us-isob-*/dms": "usIsob",
                "cn-*/*": {
                    endpoint: "{service}-fips.{region}.amazonaws.com.cn"
                },
                "*/api.ecr": "fips.api.ecr",
                "*/api.sagemaker": "fips.api.sagemaker",
                "*/batch": "fipsDotPrefix",
                "*/eks": "fipsDotPrefix",
                "*/models.lex": "fips.models.lex",
                "*/runtime.lex": "fips.runtime.lex",
                "*/runtime.sagemaker": {
                    endpoint: "runtime-fips.sagemaker.{region}.amazonaws.com"
                },
                "*/iam": "fipsWithoutRegion",
                "*/route53": "fipsWithoutRegion",
                "*/transcribe": "fipsDotPrefix",
                "*/waf": "fipsWithoutRegion",
                "us-gov-*/transcribe": "fipsDotPrefix",
                "us-gov-*/api.ecr": "fips.api.ecr",
                "us-gov-*/models.lex": "fips.models.lex",
                "us-gov-*/runtime.lex": "fips.runtime.lex",
                "us-gov-*/access-analyzer": "fipsWithServiceOnly",
                "us-gov-*/acm": "fipsWithServiceOnly",
                "us-gov-*/acm-pca": "fipsWithServiceOnly",
                "us-gov-*/api.sagemaker": "fipsWithServiceOnly",
                "us-gov-*/appconfig": "fipsWithServiceOnly",
                "us-gov-*/application-autoscaling": "fipsWithServiceOnly",
                "us-gov-*/autoscaling": "fipsWithServiceOnly",
                "us-gov-*/autoscaling-plans": "fipsWithServiceOnly",
                "us-gov-*/batch": "fipsWithServiceOnly",
                "us-gov-*/cassandra": "fipsWithServiceOnly",
                "us-gov-*/clouddirectory": "fipsWithServiceOnly",
                "us-gov-*/cloudformation": "fipsWithServiceOnly",
                "us-gov-*/cloudshell": "fipsWithServiceOnly",
                "us-gov-*/cloudtrail": "fipsWithServiceOnly",
                "us-gov-*/config": "fipsWithServiceOnly",
                "us-gov-*/connect": "fipsWithServiceOnly",
                "us-gov-*/databrew": "fipsWithServiceOnly",
                "us-gov-*/dlm": "fipsWithServiceOnly",
                "us-gov-*/dms": "fipsWithServiceOnly",
                "us-gov-*/dynamodb": "fipsWithServiceOnly",
                "us-gov-*/ec2": "fipsWithServiceOnly",
                "us-gov-*/eks": "fipsWithServiceOnly",
                "us-gov-*/elasticache": "fipsWithServiceOnly",
                "us-gov-*/elasticbeanstalk": "fipsWithServiceOnly",
                "us-gov-*/elasticloadbalancing": "fipsWithServiceOnly",
                "us-gov-*/elasticmapreduce": "fipsWithServiceOnly",
                "us-gov-*/events": "fipsWithServiceOnly",
                "us-gov-*/fis": "fipsWithServiceOnly",
                "us-gov-*/glacier": "fipsWithServiceOnly",
                "us-gov-*/greengrass": "fipsWithServiceOnly",
                "us-gov-*/guardduty": "fipsWithServiceOnly",
                "us-gov-*/identitystore": "fipsWithServiceOnly",
                "us-gov-*/imagebuilder": "fipsWithServiceOnly",
                "us-gov-*/kafka": "fipsWithServiceOnly",
                "us-gov-*/kinesis": "fipsWithServiceOnly",
                "us-gov-*/logs": "fipsWithServiceOnly",
                "us-gov-*/mediaconvert": "fipsWithServiceOnly",
                "us-gov-*/monitoring": "fipsWithServiceOnly",
                "us-gov-*/networkmanager": "fipsWithServiceOnly",
                "us-gov-*/organizations": "fipsWithServiceOnly",
                "us-gov-*/outposts": "fipsWithServiceOnly",
                "us-gov-*/participant.connect": "fipsWithServiceOnly",
                "us-gov-*/ram": "fipsWithServiceOnly",
                "us-gov-*/rds": "fipsWithServiceOnly",
                "us-gov-*/redshift": "fipsWithServiceOnly",
                "us-gov-*/resource-groups": "fipsWithServiceOnly",
                "us-gov-*/runtime.sagemaker": "fipsWithServiceOnly",
                "us-gov-*/serverlessrepo": "fipsWithServiceOnly",
                "us-gov-*/servicecatalog-appregistry": "fipsWithServiceOnly",
                "us-gov-*/servicequotas": "fipsWithServiceOnly",
                "us-gov-*/sns": "fipsWithServiceOnly",
                "us-gov-*/sqs": "fipsWithServiceOnly",
                "us-gov-*/ssm": "fipsWithServiceOnly",
                "us-gov-*/streams.dynamodb": "fipsWithServiceOnly",
                "us-gov-*/sts": "fipsWithServiceOnly",
                "us-gov-*/support": "fipsWithServiceOnly",
                "us-gov-*/swf": "fipsWithServiceOnly",
                "us-gov-west-1/states": "fipsWithServiceOnly",
                "us-iso-east-1/elasticfilesystem": {
                    endpoint: "elasticfilesystem-fips.{region}.c2s.ic.gov"
                },
                "us-gov-west-1/organizations": "fipsWithServiceOnly",
                "us-gov-west-1/route53": {
                    endpoint: "route53.us-gov.amazonaws.com"
                },
                "*/resource-explorer-2": "fipsDualstackByDefault",
                "*/kendra-ranking": "dualstackByDefault",
                "*/internetmonitor": "dualstackByDefault",
                "*/codecatalyst": "fipsGlobalDualstackByDefault"
            },
            dualstackRules: {
                "*/*": {
                    endpoint: "{service}.{region}.api.aws"
                },
                "cn-*/*": {
                    endpoint: "{service}.{region}.api.amazonwebservices.com.cn"
                },
                "*/s3": "dualstackLegacy",
                "cn-*/s3": "dualstackLegacyCn",
                "*/s3-control": "dualstackLegacy",
                "cn-*/s3-control": "dualstackLegacyCn",
                "ap-south-1/ec2": "dualstackLegacyEc2",
                "eu-west-1/ec2": "dualstackLegacyEc2",
                "sa-east-1/ec2": "dualstackLegacyEc2",
                "us-east-1/ec2": "dualstackLegacyEc2",
                "us-east-2/ec2": "dualstackLegacyEc2",
                "us-west-2/ec2": "dualstackLegacyEc2"
            },
            dualstackFipsRules: {
                "*/*": {
                    endpoint: "{service}-fips.{region}.api.aws"
                },
                "cn-*/*": {
                    endpoint: "{service}-fips.{region}.api.amazonwebservices.com.cn"
                },
                "*/s3": "dualstackFipsLegacy",
                "cn-*/s3": "dualstackFipsLegacyCn",
                "*/s3-control": "dualstackFipsLegacy",
                "cn-*/s3-control": "dualstackFipsLegacyCn"
            },
            patterns: {
                globalSSL: {
                    endpoint: "https://{service}.amazonaws.com",
                    globalEndpoint: true,
                    signingRegion: "us-east-1"
                },
                globalGovCloud: {
                    endpoint: "{service}.us-gov.amazonaws.com",
                    globalEndpoint: true,
                    signingRegion: "us-gov-west-1"
                },
                s3signature: {
                    endpoint: "{service}.{region}.amazonaws.com",
                    signatureVersion: "s3"
                },
                usIso: {
                    endpoint: "{service}.{region}.c2s.ic.gov"
                },
                usIsob: {
                    endpoint: "{service}.{region}.sc2s.sgov.gov"
                },
                fipsStandard: {
                    endpoint: "{service}-fips.{region}.amazonaws.com"
                },
                fipsDotPrefix: {
                    endpoint: "fips.{service}.{region}.amazonaws.com"
                },
                fipsWithoutRegion: {
                    endpoint: "{service}-fips.amazonaws.com"
                },
                "fips.api.ecr": {
                    endpoint: "ecr-fips.{region}.amazonaws.com"
                },
                "fips.api.sagemaker": {
                    endpoint: "api-fips.sagemaker.{region}.amazonaws.com"
                },
                "fips.models.lex": {
                    endpoint: "models-fips.lex.{region}.amazonaws.com"
                },
                "fips.runtime.lex": {
                    endpoint: "runtime-fips.lex.{region}.amazonaws.com"
                },
                fipsWithServiceOnly: {
                    endpoint: "{service}.{region}.amazonaws.com"
                },
                dualstackLegacy: {
                    endpoint: "{service}.dualstack.{region}.amazonaws.com"
                },
                dualstackLegacyCn: {
                    endpoint: "{service}.dualstack.{region}.amazonaws.com.cn"
                },
                dualstackFipsLegacy: {
                    endpoint: "{service}-fips.dualstack.{region}.amazonaws.com"
                },
                dualstackFipsLegacyCn: {
                    endpoint: "{service}-fips.dualstack.{region}.amazonaws.com.cn"
                },
                dualstackLegacyEc2: {
                    endpoint: "api.ec2.{region}.aws"
                },
                dualstackByDefault: {
                    endpoint: "{service}.{region}.api.aws"
                },
                fipsDualstackByDefault: {
                    endpoint: "{service}-fips.{region}.api.aws"
                },
                globalDualstackByDefault: {
                    endpoint: "{service}.global.api.aws"
                },
                fipsGlobalDualstackByDefault: {
                    endpoint: "{service}-fips.global.api.aws"
                }
            }
        };
    }, {} ],
    88: [ function(require, module, exports) {
        function isFipsRegion(region) {
            return typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
        }
        function isGlobalRegion(region) {
            return typeof region === "string" && [ "aws-global", "aws-us-gov-global" ].includes(region);
        }
        function getRealRegion(region) {
            return [ "fips-aws-global", "aws-fips", "aws-global" ].includes(region) ? "us-east-1" : [ "fips-aws-us-gov-global", "aws-us-gov-global" ].includes(region) ? "us-gov-west-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "");
        }
        module.exports = {
            isFipsRegion: isFipsRegion,
            isGlobalRegion: isGlobalRegion,
            getRealRegion: getRealRegion
        };
    }, {} ],
    93: [ function(require, module, exports) {
        var AWS = require("./core");
        var inherit = AWS.util.inherit;
        var jmespath = require("jmespath");
        AWS.Response = inherit({
            constructor: function Response(request) {
                this.request = request;
                this.data = null;
                this.error = null;
                this.retryCount = 0;
                this.redirectCount = 0;
                this.httpResponse = new AWS.HttpResponse();
                if (request) {
                    this.maxRetries = request.service.numRetries();
                    this.maxRedirects = request.service.config.maxRedirects;
                }
            },
            nextPage: function nextPage(callback) {
                var config;
                var service = this.request.service;
                var operation = this.request.operation;
                try {
                    config = service.paginationConfig(operation, true);
                } catch (e) {
                    this.error = e;
                }
                if (!this.hasNextPage()) {
                    if (callback) callback(this.error, null); else if (this.error) throw this.error;
                    return null;
                }
                var params = AWS.util.copy(this.request.params);
                if (!this.nextPageTokens) {
                    return callback ? callback(null, null) : null;
                } else {
                    var inputTokens = config.inputToken;
                    if (typeof inputTokens === "string") inputTokens = [ inputTokens ];
                    for (var i = 0; i < inputTokens.length; i++) {
                        params[inputTokens[i]] = this.nextPageTokens[i];
                    }
                    return service.makeRequest(this.request.operation, params, callback);
                }
            },
            hasNextPage: function hasNextPage() {
                this.cacheNextPageTokens();
                if (this.nextPageTokens) return true;
                if (this.nextPageTokens === undefined) return undefined; else return false;
            },
            cacheNextPageTokens: function cacheNextPageTokens() {
                if (Object.prototype.hasOwnProperty.call(this, "nextPageTokens")) return this.nextPageTokens;
                this.nextPageTokens = undefined;
                var config = this.request.service.paginationConfig(this.request.operation);
                if (!config) return this.nextPageTokens;
                this.nextPageTokens = null;
                if (config.moreResults) {
                    if (!jmespath.search(this.data, config.moreResults)) {
                        return this.nextPageTokens;
                    }
                }
                var exprs = config.outputToken;
                if (typeof exprs === "string") exprs = [ exprs ];
                AWS.util.arrayEach.call(this, exprs, function(expr) {
                    var output = jmespath.search(this.data, expr);
                    if (output) {
                        this.nextPageTokens = this.nextPageTokens || [];
                        this.nextPageTokens.push(output);
                    }
                });
                return this.nextPageTokens;
            }
        });
    }, {
        "./core": 44,
        jmespath: 10
    } ],
    92: [ function(require, module, exports) {
        var AWS = require("./core");
        var inherit = AWS.util.inherit;
        var jmespath = require("jmespath");
        function CHECK_ACCEPTORS(resp) {
            var waiter = resp.request._waiter;
            var acceptors = waiter.config.acceptors;
            var acceptorMatched = false;
            var state = "retry";
            acceptors.forEach(function(acceptor) {
                if (!acceptorMatched) {
                    var matcher = waiter.matchers[acceptor.matcher];
                    if (matcher && matcher(resp, acceptor.expected, acceptor.argument)) {
                        acceptorMatched = true;
                        state = acceptor.state;
                    }
                }
            });
            if (!acceptorMatched && resp.error) state = "failure";
            if (state === "success") {
                waiter.setSuccess(resp);
            } else {
                waiter.setError(resp, state === "retry");
            }
        }
        AWS.ResourceWaiter = inherit({
            constructor: function constructor(service, state) {
                this.service = service;
                this.state = state;
                this.loadWaiterConfig(this.state);
            },
            service: null,
            state: null,
            config: null,
            matchers: {
                path: function(resp, expected, argument) {
                    try {
                        var result = jmespath.search(resp.data, argument);
                    } catch (err) {
                        return false;
                    }
                    return jmespath.strictDeepEqual(result, expected);
                },
                pathAll: function(resp, expected, argument) {
                    try {
                        var results = jmespath.search(resp.data, argument);
                    } catch (err) {
                        return false;
                    }
                    if (!Array.isArray(results)) results = [ results ];
                    var numResults = results.length;
                    if (!numResults) return false;
                    for (var ind = 0; ind < numResults; ind++) {
                        if (!jmespath.strictDeepEqual(results[ind], expected)) {
                            return false;
                        }
                    }
                    return true;
                },
                pathAny: function(resp, expected, argument) {
                    try {
                        var results = jmespath.search(resp.data, argument);
                    } catch (err) {
                        return false;
                    }
                    if (!Array.isArray(results)) results = [ results ];
                    var numResults = results.length;
                    for (var ind = 0; ind < numResults; ind++) {
                        if (jmespath.strictDeepEqual(results[ind], expected)) {
                            return true;
                        }
                    }
                    return false;
                },
                status: function(resp, expected) {
                    var statusCode = resp.httpResponse.statusCode;
                    return typeof statusCode === "number" && statusCode === expected;
                },
                error: function(resp, expected) {
                    if (typeof expected === "string" && resp.error) {
                        return expected === resp.error.code;
                    }
                    return expected === !!resp.error;
                }
            },
            listeners: new AWS.SequentialExecutor().addNamedListeners(function(add) {
                add("RETRY_CHECK", "retry", function(resp) {
                    var waiter = resp.request._waiter;
                    if (resp.error && resp.error.code === "ResourceNotReady") {
                        resp.error.retryDelay = (waiter.config.delay || 0) * 1e3;
                    }
                });
                add("CHECK_OUTPUT", "extractData", CHECK_ACCEPTORS);
                add("CHECK_ERROR", "extractError", CHECK_ACCEPTORS);
            }),
            wait: function wait(params, callback) {
                if (typeof params === "function") {
                    callback = params;
                    params = undefined;
                }
                if (params && params.$waiter) {
                    params = AWS.util.copy(params);
                    if (typeof params.$waiter.delay === "number") {
                        this.config.delay = params.$waiter.delay;
                    }
                    if (typeof params.$waiter.maxAttempts === "number") {
                        this.config.maxAttempts = params.$waiter.maxAttempts;
                    }
                    delete params.$waiter;
                }
                var request = this.service.makeRequest(this.config.operation, params);
                request._waiter = this;
                request.response.maxRetries = this.config.maxAttempts;
                request.addListeners(this.listeners);
                if (callback) request.send(callback);
                return request;
            },
            setSuccess: function setSuccess(resp) {
                resp.error = null;
                resp.data = resp.data || {};
                resp.request.removeAllListeners("extractData");
            },
            setError: function setError(resp, retryable) {
                resp.data = null;
                resp.error = AWS.util.error(resp.error || new Error(), {
                    code: "ResourceNotReady",
                    message: "Resource is not in the state " + this.state,
                    retryable: retryable
                });
            },
            loadWaiterConfig: function loadWaiterConfig(state) {
                if (!this.service.api.waiters[state]) {
                    throw new AWS.util.error(new Error(), {
                        code: "StateNotFoundError",
                        message: "State " + state + " not found."
                    });
                }
                this.config = AWS.util.copy(this.service.api.waiters[state]);
            }
        });
    }, {
        "./core": 44,
        jmespath: 10
    } ],
    91: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var AWS = require("./core");
                var AcceptorStateMachine = require("./state_machine");
                var inherit = AWS.util.inherit;
                var domain = AWS.util.domain;
                var jmespath = require("jmespath");
                var hardErrorStates = {
                    success: 1,
                    error: 1,
                    complete: 1
                };
                function isTerminalState(machine) {
                    return Object.prototype.hasOwnProperty.call(hardErrorStates, machine._asm.currentState);
                }
                var fsm = new AcceptorStateMachine();
                fsm.setupStates = function() {
                    var transition = function(_, done) {
                        var self = this;
                        self._haltHandlersOnError = false;
                        self.emit(self._asm.currentState, function(err) {
                            if (err) {
                                if (isTerminalState(self)) {
                                    if (domain && self.domain instanceof domain.Domain) {
                                        err.domainEmitter = self;
                                        err.domain = self.domain;
                                        err.domainThrown = false;
                                        self.domain.emit("error", err);
                                    } else {
                                        throw err;
                                    }
                                } else {
                                    self.response.error = err;
                                    done(err);
                                }
                            } else {
                                done(self.response.error);
                            }
                        });
                    };
                    this.addState("validate", "build", "error", transition);
                    this.addState("build", "afterBuild", "restart", transition);
                    this.addState("afterBuild", "sign", "restart", transition);
                    this.addState("sign", "send", "retry", transition);
                    this.addState("retry", "afterRetry", "afterRetry", transition);
                    this.addState("afterRetry", "sign", "error", transition);
                    this.addState("send", "validateResponse", "retry", transition);
                    this.addState("validateResponse", "extractData", "extractError", transition);
                    this.addState("extractError", "extractData", "retry", transition);
                    this.addState("extractData", "success", "retry", transition);
                    this.addState("restart", "build", "error", transition);
                    this.addState("success", "complete", "complete", transition);
                    this.addState("error", "complete", "complete", transition);
                    this.addState("complete", null, null, transition);
                };
                fsm.setupStates();
                AWS.Request = inherit({
                    constructor: function Request(service, operation, params) {
                        var endpoint = service.endpoint;
                        var region = service.config.region;
                        var customUserAgent = service.config.customUserAgent;
                        if (service.signingRegion) {
                            region = service.signingRegion;
                        } else if (service.isGlobalEndpoint) {
                            region = "us-east-1";
                        }
                        this.domain = domain && domain.active;
                        this.service = service;
                        this.operation = operation;
                        this.params = params || {};
                        this.httpRequest = new AWS.HttpRequest(endpoint, region);
                        this.httpRequest.appendToUserAgent(customUserAgent);
                        this.startTime = service.getSkewCorrectedDate();
                        this.response = new AWS.Response(this);
                        this._asm = new AcceptorStateMachine(fsm.states, "validate");
                        this._haltHandlersOnError = false;
                        AWS.SequentialExecutor.call(this);
                        this.emit = this.emitEvent;
                    },
                    send: function send(callback) {
                        if (callback) {
                            this.httpRequest.appendToUserAgent("callback");
                            this.on("complete", function(resp) {
                                callback.call(resp, resp.error, resp.data);
                            });
                        }
                        this.runTo();
                        return this.response;
                    },
                    build: function build(callback) {
                        return this.runTo("send", callback);
                    },
                    runTo: function runTo(state, done) {
                        this._asm.runTo(state, done, this);
                        return this;
                    },
                    abort: function abort() {
                        this.removeAllListeners("validateResponse");
                        this.removeAllListeners("extractError");
                        this.on("validateResponse", function addAbortedError(resp) {
                            resp.error = AWS.util.error(new Error("Request aborted by user"), {
                                code: "RequestAbortedError",
                                retryable: false
                            });
                        });
                        if (this.httpRequest.stream && !this.httpRequest.stream.didCallback) {
                            this.httpRequest.stream.abort();
                            if (this.httpRequest._abortCallback) {
                                this.httpRequest._abortCallback();
                            } else {
                                this.removeAllListeners("send");
                            }
                        }
                        return this;
                    },
                    eachPage: function eachPage(callback) {
                        callback = AWS.util.fn.makeAsync(callback, 3);
                        function wrappedCallback(response) {
                            callback.call(response, response.error, response.data, function(result) {
                                if (result === false) return;
                                if (response.hasNextPage()) {
                                    response.nextPage().on("complete", wrappedCallback).send();
                                } else {
                                    callback.call(response, null, null, AWS.util.fn.noop);
                                }
                            });
                        }
                        this.on("complete", wrappedCallback).send();
                    },
                    eachItem: function eachItem(callback) {
                        var self = this;
                        function wrappedCallback(err, data) {
                            if (err) return callback(err, null);
                            if (data === null) return callback(null, null);
                            var config = self.service.paginationConfig(self.operation);
                            var resultKey = config.resultKey;
                            if (Array.isArray(resultKey)) resultKey = resultKey[0];
                            var items = jmespath.search(data, resultKey);
                            var continueIteration = true;
                            AWS.util.arrayEach(items, function(item) {
                                continueIteration = callback(null, item);
                                if (continueIteration === false) {
                                    return AWS.util.abort;
                                }
                            });
                            return continueIteration;
                        }
                        this.eachPage(wrappedCallback);
                    },
                    isPageable: function isPageable() {
                        return this.service.paginationConfig(this.operation) ? true : false;
                    },
                    createReadStream: function createReadStream() {
                        var streams = AWS.util.stream;
                        var req = this;
                        var stream = null;
                        if (AWS.HttpClient.streamsApiVersion === 2) {
                            stream = new streams.PassThrough();
                            process.nextTick(function() {
                                req.send();
                            });
                        } else {
                            stream = new streams.Stream();
                            stream.readable = true;
                            stream.sent = false;
                            stream.on("newListener", function(event) {
                                if (!stream.sent && event === "data") {
                                    stream.sent = true;
                                    process.nextTick(function() {
                                        req.send();
                                    });
                                }
                            });
                        }
                        this.on("error", function(err) {
                            stream.emit("error", err);
                        });
                        this.on("httpHeaders", function streamHeaders(statusCode, headers, resp) {
                            if (statusCode < 300) {
                                req.removeListener("httpData", AWS.EventListeners.Core.HTTP_DATA);
                                req.removeListener("httpError", AWS.EventListeners.Core.HTTP_ERROR);
                                req.on("httpError", function streamHttpError(error) {
                                    resp.error = error;
                                    resp.error.retryable = false;
                                });
                                var shouldCheckContentLength = false;
                                var expectedLen;
                                if (req.httpRequest.method !== "HEAD") {
                                    expectedLen = parseInt(headers["content-length"], 10);
                                }
                                if (expectedLen !== undefined && !isNaN(expectedLen) && expectedLen >= 0) {
                                    shouldCheckContentLength = true;
                                    var receivedLen = 0;
                                }
                                var checkContentLengthAndEmit = function checkContentLengthAndEmit() {
                                    if (shouldCheckContentLength && receivedLen !== expectedLen) {
                                        stream.emit("error", AWS.util.error(new Error("Stream content length mismatch. Received " + receivedLen + " of " + expectedLen + " bytes."), {
                                            code: "StreamContentLengthMismatch"
                                        }));
                                    } else if (AWS.HttpClient.streamsApiVersion === 2) {
                                        stream.end();
                                    } else {
                                        stream.emit("end");
                                    }
                                };
                                var httpStream = resp.httpResponse.createUnbufferedStream();
                                if (AWS.HttpClient.streamsApiVersion === 2) {
                                    if (shouldCheckContentLength) {
                                        var lengthAccumulator = new streams.PassThrough();
                                        lengthAccumulator._write = function(chunk) {
                                            if (chunk && chunk.length) {
                                                receivedLen += chunk.length;
                                            }
                                            return streams.PassThrough.prototype._write.apply(this, arguments);
                                        };
                                        lengthAccumulator.on("end", checkContentLengthAndEmit);
                                        stream.on("error", function(err) {
                                            shouldCheckContentLength = false;
                                            httpStream.unpipe(lengthAccumulator);
                                            lengthAccumulator.emit("end");
                                            lengthAccumulator.end();
                                        });
                                        httpStream.pipe(lengthAccumulator).pipe(stream, {
                                            end: false
                                        });
                                    } else {
                                        httpStream.pipe(stream);
                                    }
                                } else {
                                    if (shouldCheckContentLength) {
                                        httpStream.on("data", function(arg) {
                                            if (arg && arg.length) {
                                                receivedLen += arg.length;
                                            }
                                        });
                                    }
                                    httpStream.on("data", function(arg) {
                                        stream.emit("data", arg);
                                    });
                                    httpStream.on("end", checkContentLengthAndEmit);
                                }
                                httpStream.on("error", function(err) {
                                    shouldCheckContentLength = false;
                                    stream.emit("error", err);
                                });
                            }
                        });
                        return stream;
                    },
                    emitEvent: function emit(eventName, args, done) {
                        if (typeof args === "function") {
                            done = args;
                            args = null;
                        }
                        if (!done) done = function() {};
                        if (!args) args = this.eventParameters(eventName, this.response);
                        var origEmit = AWS.SequentialExecutor.prototype.emit;
                        origEmit.call(this, eventName, args, function(err) {
                            if (err) this.response.error = err;
                            done.call(this, err);
                        });
                    },
                    eventParameters: function eventParameters(eventName) {
                        switch (eventName) {
                          case "restart":
                          case "validate":
                          case "sign":
                          case "build":
                          case "afterValidate":
                          case "afterBuild":
                            return [ this ];

                          case "error":
                            return [ this.response.error, this.response ];

                          default:
                            return [ this.response ];
                        }
                    },
                    presign: function presign(expires, callback) {
                        if (!callback && typeof expires === "function") {
                            callback = expires;
                            expires = null;
                        }
                        return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
                    },
                    isPresigned: function isPresigned() {
                        return Object.prototype.hasOwnProperty.call(this.httpRequest.headers, "presigned-expires");
                    },
                    toUnauthenticated: function toUnauthenticated() {
                        this._unAuthenticated = true;
                        this.removeListener("validate", AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
                        this.removeListener("sign", AWS.EventListeners.Core.SIGN);
                        return this;
                    },
                    toGet: function toGet() {
                        if (this.service.api.protocol === "query" || this.service.api.protocol === "ec2") {
                            this.removeListener("build", this.buildAsGet);
                            this.addListener("build", this.buildAsGet);
                        }
                        return this;
                    },
                    buildAsGet: function buildAsGet(request) {
                        request.httpRequest.method = "GET";
                        request.httpRequest.path = request.service.endpoint.path + "?" + request.httpRequest.body;
                        request.httpRequest.body = "";
                        delete request.httpRequest.headers["Content-Length"];
                        delete request.httpRequest.headers["Content-Type"];
                    },
                    haltHandlersOnError: function haltHandlersOnError() {
                        this._haltHandlersOnError = true;
                    }
                });
                AWS.Request.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
                    this.prototype.promise = function promise() {
                        var self = this;
                        this.httpRequest.appendToUserAgent("promise");
                        return new PromiseDependency(function(resolve, reject) {
                            self.on("complete", function(resp) {
                                if (resp.error) {
                                    reject(resp.error);
                                } else {
                                    resolve(Object.defineProperty(resp.data || {}, "$response", {
                                        value: resp
                                    }));
                                }
                            });
                            self.runTo();
                        });
                    };
                };
                AWS.Request.deletePromisesFromClass = function deletePromisesFromClass() {
                    delete this.prototype.promise;
                };
                AWS.util.addPromises(AWS.Request);
                AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "./core": 44,
        "./state_machine": 130,
        _process: 11,
        jmespath: 10
    } ],
    130: [ function(require, module, exports) {
        function AcceptorStateMachine(states, state) {
            this.currentState = state || null;
            this.states = states || {};
        }
        AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
            if (typeof finalState === "function") {
                inputError = bindObject;
                bindObject = done;
                done = finalState;
                finalState = null;
            }
            var self = this;
            var state = self.states[self.currentState];
            state.fn.call(bindObject || self, inputError, function(err) {
                if (err) {
                    if (state.fail) self.currentState = state.fail; else return done ? done.call(bindObject, err) : null;
                } else {
                    if (state.accept) self.currentState = state.accept; else return done ? done.call(bindObject) : null;
                }
                if (self.currentState === finalState) {
                    return done ? done.call(bindObject, err) : null;
                }
                self.runTo(finalState, done, bindObject, err);
            });
        };
        AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
            if (typeof acceptState === "function") {
                fn = acceptState;
                acceptState = null;
                failState = null;
            } else if (typeof failState === "function") {
                fn = failState;
                failState = null;
            }
            if (!this.currentState) this.currentState = name;
            this.states[name] = {
                accept: acceptState,
                fail: failState,
                fn: fn
            };
            return this;
        };
        module.exports = AcceptorStateMachine;
    }, {} ],
    77: [ function(require, module, exports) {
        var AWS = require("./core");
        AWS.ParamValidator = AWS.util.inherit({
            constructor: function ParamValidator(validation) {
                if (validation === true || validation === undefined) {
                    validation = {
                        min: true
                    };
                }
                this.validation = validation;
            },
            validate: function validate(shape, params, context) {
                this.errors = [];
                this.validateMember(shape, params || {}, context || "params");
                if (this.errors.length > 1) {
                    var msg = this.errors.join("\n* ");
                    msg = "There were " + this.errors.length + " validation errors:\n* " + msg;
                    throw AWS.util.error(new Error(msg), {
                        code: "MultipleValidationErrors",
                        errors: this.errors
                    });
                } else if (this.errors.length === 1) {
                    throw this.errors[0];
                } else {
                    return true;
                }
            },
            fail: function fail(code, message) {
                this.errors.push(AWS.util.error(new Error(message), {
                    code: code
                }));
            },
            validateStructure: function validateStructure(shape, params, context) {
                if (shape.isDocument) return true;
                this.validateType(params, context, [ "object" ], "structure");
                var paramName;
                for (var i = 0; shape.required && i < shape.required.length; i++) {
                    paramName = shape.required[i];
                    var value = params[paramName];
                    if (value === undefined || value === null) {
                        this.fail("MissingRequiredParameter", "Missing required key '" + paramName + "' in " + context);
                    }
                }
                for (paramName in params) {
                    if (!Object.prototype.hasOwnProperty.call(params, paramName)) continue;
                    var paramValue = params[paramName], memberShape = shape.members[paramName];
                    if (memberShape !== undefined) {
                        var memberContext = [ context, paramName ].join(".");
                        this.validateMember(memberShape, paramValue, memberContext);
                    } else if (paramValue !== undefined && paramValue !== null) {
                        this.fail("UnexpectedParameter", "Unexpected key '" + paramName + "' found in " + context);
                    }
                }
                return true;
            },
            validateMember: function validateMember(shape, param, context) {
                switch (shape.type) {
                  case "structure":
                    return this.validateStructure(shape, param, context);

                  case "list":
                    return this.validateList(shape, param, context);

                  case "map":
                    return this.validateMap(shape, param, context);

                  default:
                    return this.validateScalar(shape, param, context);
                }
            },
            validateList: function validateList(shape, params, context) {
                if (this.validateType(params, context, [ Array ])) {
                    this.validateRange(shape, params.length, context, "list member count");
                    for (var i = 0; i < params.length; i++) {
                        this.validateMember(shape.member, params[i], context + "[" + i + "]");
                    }
                }
            },
            validateMap: function validateMap(shape, params, context) {
                if (this.validateType(params, context, [ "object" ], "map")) {
                    var mapCount = 0;
                    for (var param in params) {
                        if (!Object.prototype.hasOwnProperty.call(params, param)) continue;
                        this.validateMember(shape.key, param, context + "[key='" + param + "']");
                        this.validateMember(shape.value, params[param], context + "['" + param + "']");
                        mapCount++;
                    }
                    this.validateRange(shape, mapCount, context, "map member count");
                }
            },
            validateScalar: function validateScalar(shape, value, context) {
                switch (shape.type) {
                  case null:
                  case undefined:
                  case "string":
                    return this.validateString(shape, value, context);

                  case "base64":
                  case "binary":
                    return this.validatePayload(value, context);

                  case "integer":
                  case "float":
                    return this.validateNumber(shape, value, context);

                  case "boolean":
                    return this.validateType(value, context, [ "boolean" ]);

                  case "timestamp":
                    return this.validateType(value, context, [ Date, /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, "number" ], "Date object, ISO-8601 string, or a UNIX timestamp");

                  default:
                    return this.fail("UnkownType", "Unhandled type " + shape.type + " for " + context);
                }
            },
            validateString: function validateString(shape, value, context) {
                var validTypes = [ "string" ];
                if (shape.isJsonValue) {
                    validTypes = validTypes.concat([ "number", "object", "boolean" ]);
                }
                if (value !== null && this.validateType(value, context, validTypes)) {
                    this.validateEnum(shape, value, context);
                    this.validateRange(shape, value.length, context, "string length");
                    this.validatePattern(shape, value, context);
                    this.validateUri(shape, value, context);
                }
            },
            validateUri: function validateUri(shape, value, context) {
                if (shape["location"] === "uri") {
                    if (value.length === 0) {
                        this.fail("UriParameterError", "Expected uri parameter to have length >= 1," + ' but found "' + value + '" for ' + context);
                    }
                }
            },
            validatePattern: function validatePattern(shape, value, context) {
                if (this.validation["pattern"] && shape["pattern"] !== undefined) {
                    if (!new RegExp(shape["pattern"]).test(value)) {
                        this.fail("PatternMatchError", 'Provided value "' + value + '" ' + "does not match regex pattern /" + shape["pattern"] + "/ for " + context);
                    }
                }
            },
            validateRange: function validateRange(shape, value, context, descriptor) {
                if (this.validation["min"]) {
                    if (shape["min"] !== undefined && value < shape["min"]) {
                        this.fail("MinRangeError", "Expected " + descriptor + " >= " + shape["min"] + ", but found " + value + " for " + context);
                    }
                }
                if (this.validation["max"]) {
                    if (shape["max"] !== undefined && value > shape["max"]) {
                        this.fail("MaxRangeError", "Expected " + descriptor + " <= " + shape["max"] + ", but found " + value + " for " + context);
                    }
                }
            },
            validateEnum: function validateRange(shape, value, context) {
                if (this.validation["enum"] && shape["enum"] !== undefined) {
                    if (shape["enum"].indexOf(value) === -1) {
                        this.fail("EnumError", "Found string value of " + value + ", but " + "expected " + shape["enum"].join("|") + " for " + context);
                    }
                }
            },
            validateType: function validateType(value, context, acceptedTypes, type) {
                if (value === null || value === undefined) return false;
                var foundInvalidType = false;
                for (var i = 0; i < acceptedTypes.length; i++) {
                    if (typeof acceptedTypes[i] === "string") {
                        if (typeof value === acceptedTypes[i]) return true;
                    } else if (acceptedTypes[i] instanceof RegExp) {
                        if ((value || "").toString().match(acceptedTypes[i])) return true;
                    } else {
                        if (value instanceof acceptedTypes[i]) return true;
                        if (AWS.util.isType(value, acceptedTypes[i])) return true;
                        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
                        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
                    }
                    foundInvalidType = true;
                }
                var acceptedType = type;
                if (!acceptedType) {
                    acceptedType = acceptedTypes.join(", ").replace(/,([^,]+)$/, ", or$1");
                }
                var vowel = acceptedType.match(/^[aeiou]/i) ? "n" : "";
                this.fail("InvalidParameterType", "Expected " + context + " to be a" + vowel + " " + acceptedType);
                return false;
            },
            validateNumber: function validateNumber(shape, value, context) {
                if (value === null || value === undefined) return;
                if (typeof value === "string") {
                    var castedValue = parseFloat(value);
                    if (castedValue.toString() === value) value = castedValue;
                }
                if (this.validateType(value, context, [ "number" ])) {
                    this.validateRange(shape, value, context, "numeric value");
                }
            },
            validatePayload: function validatePayload(value, context) {
                if (value === null || value === undefined) return;
                if (typeof value === "string") return;
                if (value && typeof value.byteLength === "number") return;
                if (AWS.util.isNode()) {
                    var Stream = AWS.util.stream.Stream;
                    if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
                } else {
                    if (typeof Blob !== void 0 && value instanceof Blob) return;
                }
                var types = [ "Buffer", "Stream", "File", "Blob", "ArrayBuffer", "DataView" ];
                if (value) {
                    for (var i = 0; i < types.length; i++) {
                        if (AWS.util.isType(value, types[i])) return;
                        if (AWS.util.typeName(value.constructor) === types[i]) return;
                    }
                }
                this.fail("InvalidParameterType", "Expected " + context + " to be a " + "string, Buffer, Stream, Blob, or typed array object");
            }
        });
    }, {
        "./core": 44
    } ],
    71: [ function(require, module, exports) {
        var Collection = require("./collection");
        var Operation = require("./operation");
        var Shape = require("./shape");
        var Paginator = require("./paginator");
        var ResourceWaiter = require("./resource_waiter");
        var metadata = require("../../apis/metadata.json");
        var util = require("../util");
        var property = util.property;
        var memoizedProperty = util.memoizedProperty;
        function Api(api, options) {
            var self = this;
            api = api || {};
            options = options || {};
            options.api = this;
            api.metadata = api.metadata || {};
            var serviceIdentifier = options.serviceIdentifier;
            delete options.serviceIdentifier;
            property(this, "isApi", true, false);
            property(this, "apiVersion", api.metadata.apiVersion);
            property(this, "endpointPrefix", api.metadata.endpointPrefix);
            property(this, "signingName", api.metadata.signingName);
            property(this, "globalEndpoint", api.metadata.globalEndpoint);
            property(this, "signatureVersion", api.metadata.signatureVersion);
            property(this, "jsonVersion", api.metadata.jsonVersion);
            property(this, "targetPrefix", api.metadata.targetPrefix);
            property(this, "protocol", api.metadata.protocol);
            property(this, "timestampFormat", api.metadata.timestampFormat);
            property(this, "xmlNamespaceUri", api.metadata.xmlNamespace);
            property(this, "abbreviation", api.metadata.serviceAbbreviation);
            property(this, "fullName", api.metadata.serviceFullName);
            property(this, "serviceId", api.metadata.serviceId);
            if (serviceIdentifier && metadata[serviceIdentifier]) {
                property(this, "xmlNoDefaultLists", metadata[serviceIdentifier].xmlNoDefaultLists, false);
            }
            memoizedProperty(this, "className", function() {
                var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
                if (!name) return null;
                name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, "");
                if (name === "ElasticLoadBalancing") name = "ELB";
                return name;
            });
            function addEndpointOperation(name, operation) {
                if (operation.endpointoperation === true) {
                    property(self, "endpointOperation", util.string.lowerFirst(name));
                }
                if (operation.endpointdiscovery && !self.hasRequiredEndpointDiscovery) {
                    property(self, "hasRequiredEndpointDiscovery", operation.endpointdiscovery.required === true);
                }
            }
            property(this, "operations", new Collection(api.operations, options, function(name, operation) {
                return new Operation(name, operation, options);
            }, util.string.lowerFirst, addEndpointOperation));
            property(this, "shapes", new Collection(api.shapes, options, function(name, shape) {
                return Shape.create(shape, options);
            }));
            property(this, "paginators", new Collection(api.paginators, options, function(name, paginator) {
                return new Paginator(name, paginator, options);
            }));
            property(this, "waiters", new Collection(api.waiters, options, function(name, waiter) {
                return new ResourceWaiter(name, waiter, options);
            }, util.string.lowerFirst));
            if (options.documentation) {
                property(this, "documentation", api.documentation);
                property(this, "documentationUrl", api.documentationUrl);
            }
            property(this, "awsQueryCompatible", api.metadata.awsQueryCompatible);
        }
        module.exports = Api;
    }, {
        "../../apis/metadata.json": 31,
        "../util": 131,
        "./collection": 72,
        "./operation": 73,
        "./paginator": 74,
        "./resource_waiter": 75,
        "./shape": 76
    } ],
    75: [ function(require, module, exports) {
        var util = require("../util");
        var property = util.property;
        function ResourceWaiter(name, waiter, options) {
            options = options || {};
            property(this, "name", name);
            property(this, "api", options.api, false);
            if (waiter.operation) {
                property(this, "operation", util.string.lowerFirst(waiter.operation));
            }
            var self = this;
            var keys = [ "type", "description", "delay", "maxAttempts", "acceptors" ];
            keys.forEach(function(key) {
                var value = waiter[key];
                if (value) {
                    property(self, key, value);
                }
            });
        }
        module.exports = ResourceWaiter;
    }, {
        "../util": 131
    } ],
    74: [ function(require, module, exports) {
        var property = require("../util").property;
        function Paginator(name, paginator) {
            property(this, "inputToken", paginator.input_token);
            property(this, "limitKey", paginator.limit_key);
            property(this, "moreResults", paginator.more_results);
            property(this, "outputToken", paginator.output_token);
            property(this, "resultKey", paginator.result_key);
        }
        module.exports = Paginator;
    }, {
        "../util": 131
    } ],
    73: [ function(require, module, exports) {
        var Shape = require("./shape");
        var util = require("../util");
        var property = util.property;
        var memoizedProperty = util.memoizedProperty;
        function Operation(name, operation, options) {
            var self = this;
            options = options || {};
            property(this, "name", operation.name || name);
            property(this, "api", options.api, false);
            operation.http = operation.http || {};
            property(this, "endpoint", operation.endpoint);
            property(this, "httpMethod", operation.http.method || "POST");
            property(this, "httpPath", operation.http.requestUri || "/");
            property(this, "authtype", operation.authtype || "");
            property(this, "endpointDiscoveryRequired", operation.endpointdiscovery ? operation.endpointdiscovery.required ? "REQUIRED" : "OPTIONAL" : "NULL");
            var httpChecksumRequired = operation.httpChecksumRequired || operation.httpChecksum && operation.httpChecksum.requestChecksumRequired;
            property(this, "httpChecksumRequired", httpChecksumRequired, false);
            memoizedProperty(this, "input", function() {
                if (!operation.input) {
                    return new Shape.create({
                        type: "structure"
                    }, options);
                }
                return Shape.create(operation.input, options);
            });
            memoizedProperty(this, "output", function() {
                if (!operation.output) {
                    return new Shape.create({
                        type: "structure"
                    }, options);
                }
                return Shape.create(operation.output, options);
            });
            memoizedProperty(this, "errors", function() {
                var list = [];
                if (!operation.errors) return null;
                for (var i = 0; i < operation.errors.length; i++) {
                    list.push(Shape.create(operation.errors[i], options));
                }
                return list;
            });
            memoizedProperty(this, "paginator", function() {
                return options.api.paginators[name];
            });
            if (options.documentation) {
                property(this, "documentation", operation.documentation);
                property(this, "documentationUrl", operation.documentationUrl);
            }
            memoizedProperty(this, "idempotentMembers", function() {
                var idempotentMembers = [];
                var input = self.input;
                var members = input.members;
                if (!input.members) {
                    return idempotentMembers;
                }
                for (var name in members) {
                    if (!members.hasOwnProperty(name)) {
                        continue;
                    }
                    if (members[name].isIdempotent === true) {
                        idempotentMembers.push(name);
                    }
                }
                return idempotentMembers;
            });
            memoizedProperty(this, "hasEventOutput", function() {
                var output = self.output;
                return hasEventStream(output);
            });
        }
        function hasEventStream(topLevelShape) {
            var members = topLevelShape.members;
            var payload = topLevelShape.payload;
            if (!topLevelShape.members) {
                return false;
            }
            if (payload) {
                var payloadMember = members[payload];
                return payloadMember.isEventStream;
            }
            for (var name in members) {
                if (!members.hasOwnProperty(name)) {
                    if (members[name].isEventStream === true) {
                        return true;
                    }
                }
            }
            return false;
        }
        module.exports = Operation;
    }, {
        "../util": 131,
        "./shape": 76
    } ],
    70: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var warning = [ "We are formalizing our plans to enter AWS SDK for JavaScript (v2) into maintenance mode in 2023.\n", "Please migrate your code to use AWS SDK for JavaScript (v3).", "For more information, check the migration guide at https://a.co/7PzMCcy" ].join("\n");
                module.exports = {
                    suppress: false
                };
                function emitWarning() {
                    if (typeof process === "undefined") return;
                    if (typeof process.env === "object" && typeof process.env.AWS_EXECUTION_ENV !== "undefined" && process.env.AWS_EXECUTION_ENV.indexOf("AWS_Lambda_") === 0) {
                        return;
                    }
                    if (typeof process.env === "object" && typeof process.env.AWS_SDK_JS_SUPPRESS_MAINTENANCE_MODE_MESSAGE !== "undefined") {
                        return;
                    }
                    if (typeof process.emitWarning === "function") {
                        process.emitWarning(warning, {
                            type: "NOTE"
                        });
                    }
                }
                setTimeout(function() {
                    if (!module.exports.suppress) {
                        emitWarning();
                    }
                }, 0);
            }).call(this);
        }).call(this, require("_process"));
    }, {
        _process: 11
    } ],
    66: [ function(require, module, exports) {
        var AWS = require("./core");
        var inherit = AWS.util.inherit;
        AWS.Endpoint = inherit({
            constructor: function Endpoint(endpoint, config) {
                AWS.util.hideProperties(this, [ "slashes", "auth", "hash", "search", "query" ]);
                if (typeof endpoint === "undefined" || endpoint === null) {
                    throw new Error("Invalid endpoint: " + endpoint);
                } else if (typeof endpoint !== "string") {
                    return AWS.util.copy(endpoint);
                }
                if (!endpoint.match(/^http/)) {
                    var useSSL = config && config.sslEnabled !== undefined ? config.sslEnabled : AWS.config.sslEnabled;
                    endpoint = (useSSL ? "https" : "http") + "://" + endpoint;
                }
                AWS.util.update(this, AWS.util.urlParse(endpoint));
                if (this.port) {
                    this.port = parseInt(this.port, 10);
                } else {
                    this.port = this.protocol === "https:" ? 443 : 80;
                }
            }
        });
        AWS.HttpRequest = inherit({
            constructor: function HttpRequest(endpoint, region) {
                endpoint = new AWS.Endpoint(endpoint);
                this.method = "POST";
                this.path = endpoint.path || "/";
                this.headers = {};
                this.body = "";
                this.endpoint = endpoint;
                this.region = region;
                this._userAgent = "";
                this.setUserAgent();
            },
            setUserAgent: function setUserAgent() {
                this._userAgent = this.headers[this.getUserAgentHeaderName()] = AWS.util.userAgent();
            },
            getUserAgentHeaderName: function getUserAgentHeaderName() {
                var prefix = AWS.util.isBrowser() ? "X-Amz-" : "";
                return prefix + "User-Agent";
            },
            appendToUserAgent: function appendToUserAgent(agentPartial) {
                if (typeof agentPartial === "string" && agentPartial) {
                    this._userAgent += " " + agentPartial;
                }
                this.headers[this.getUserAgentHeaderName()] = this._userAgent;
            },
            getUserAgent: function getUserAgent() {
                return this._userAgent;
            },
            pathname: function pathname() {
                return this.path.split("?", 1)[0];
            },
            search: function search() {
                var query = this.path.split("?", 2)[1];
                if (query) {
                    query = AWS.util.queryStringParse(query);
                    return AWS.util.queryParamsToString(query);
                }
                return "";
            },
            updateEndpoint: function updateEndpoint(endpointStr) {
                var newEndpoint = new AWS.Endpoint(endpointStr);
                this.endpoint = newEndpoint;
                this.path = newEndpoint.path || "/";
                if (this.headers["Host"]) {
                    this.headers["Host"] = newEndpoint.host;
                }
            }
        });
        AWS.HttpResponse = inherit({
            constructor: function HttpResponse() {
                this.statusCode = undefined;
                this.headers = {};
                this.body = undefined;
                this.streaming = false;
                this.stream = null;
            },
            createUnbufferedStream: function createUnbufferedStream() {
                this.streaming = true;
                return this.stream;
            }
        });
        AWS.HttpClient = inherit({});
        AWS.HttpClient.getInstance = function getInstance() {
            if (this.singleton === undefined) {
                this.singleton = new this();
            }
            return this.singleton;
        };
    }, {
        "./core": 44
    } ],
    65: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var AWS = require("./core");
                var SequentialExecutor = require("./sequential_executor");
                var DISCOVER_ENDPOINT = require("./discover_endpoint").discoverEndpoint;
                AWS.EventListeners = {
                    Core: {}
                };
                function getOperationAuthtype(req) {
                    if (!req.service.api.operations) {
                        return "";
                    }
                    var operation = req.service.api.operations[req.operation];
                    return operation ? operation.authtype : "";
                }
                function getIdentityType(req) {
                    var service = req.service;
                    if (service.config.signatureVersion) {
                        return service.config.signatureVersion;
                    }
                    if (service.api.signatureVersion) {
                        return service.api.signatureVersion;
                    }
                    return getOperationAuthtype(req);
                }
                AWS.EventListeners = {
                    Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
                        addAsync("VALIDATE_CREDENTIALS", "validate", function VALIDATE_CREDENTIALS(req, done) {
                            if (!req.service.api.signatureVersion && !req.service.config.signatureVersion) return done();
                            var identityType = getIdentityType(req);
                            if (identityType === "bearer") {
                                req.service.config.getToken(function(err) {
                                    if (err) {
                                        req.response.error = AWS.util.error(err, {
                                            code: "TokenError"
                                        });
                                    }
                                    done();
                                });
                                return;
                            }
                            req.service.config.getCredentials(function(err) {
                                if (err) {
                                    req.response.error = AWS.util.error(err, {
                                        code: "CredentialsError",
                                        message: "Missing credentials in config, if using AWS_CONFIG_FILE, set AWS_SDK_LOAD_CONFIG=1"
                                    });
                                }
                                done();
                            });
                        });
                        add("VALIDATE_REGION", "validate", function VALIDATE_REGION(req) {
                            if (!req.service.isGlobalEndpoint) {
                                var dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
                                if (!req.service.config.region) {
                                    req.response.error = AWS.util.error(new Error(), {
                                        code: "ConfigError",
                                        message: "Missing region in config"
                                    });
                                } else if (!dnsHostRegex.test(req.service.config.region)) {
                                    req.response.error = AWS.util.error(new Error(), {
                                        code: "ConfigError",
                                        message: "Invalid region in config"
                                    });
                                }
                            }
                        });
                        add("BUILD_IDEMPOTENCY_TOKENS", "validate", function BUILD_IDEMPOTENCY_TOKENS(req) {
                            if (!req.service.api.operations) {
                                return;
                            }
                            var operation = req.service.api.operations[req.operation];
                            if (!operation) {
                                return;
                            }
                            var idempotentMembers = operation.idempotentMembers;
                            if (!idempotentMembers.length) {
                                return;
                            }
                            var params = AWS.util.copy(req.params);
                            for (var i = 0, iLen = idempotentMembers.length; i < iLen; i++) {
                                if (!params[idempotentMembers[i]]) {
                                    params[idempotentMembers[i]] = AWS.util.uuid.v4();
                                }
                            }
                            req.params = params;
                        });
                        add("VALIDATE_PARAMETERS", "validate", function VALIDATE_PARAMETERS(req) {
                            if (!req.service.api.operations) {
                                return;
                            }
                            var rules = req.service.api.operations[req.operation].input;
                            var validation = req.service.config.paramValidation;
                            new AWS.ParamValidator(validation).validate(rules, req.params);
                        });
                        add("COMPUTE_CHECKSUM", "afterBuild", function COMPUTE_CHECKSUM(req) {
                            if (!req.service.api.operations) {
                                return;
                            }
                            var operation = req.service.api.operations[req.operation];
                            if (!operation) {
                                return;
                            }
                            var body = req.httpRequest.body;
                            var isNonStreamingPayload = body && (AWS.util.Buffer.isBuffer(body) || typeof body === "string");
                            var headers = req.httpRequest.headers;
                            if (operation.httpChecksumRequired && req.service.config.computeChecksums && isNonStreamingPayload && !headers["Content-MD5"]) {
                                var md5 = AWS.util.crypto.md5(body, "base64");
                                headers["Content-MD5"] = md5;
                            }
                        });
                        addAsync("COMPUTE_SHA256", "afterBuild", function COMPUTE_SHA256(req, done) {
                            req.haltHandlersOnError();
                            if (!req.service.api.operations) {
                                return;
                            }
                            var operation = req.service.api.operations[req.operation];
                            var authtype = operation ? operation.authtype : "";
                            if (!req.service.api.signatureVersion && !authtype && !req.service.config.signatureVersion) return done();
                            if (req.service.getSignerClass(req) === AWS.Signers.V4) {
                                var body = req.httpRequest.body || "";
                                if (authtype.indexOf("unsigned-body") >= 0) {
                                    req.httpRequest.headers["X-Amz-Content-Sha256"] = "UNSIGNED-PAYLOAD";
                                    return done();
                                }
                                AWS.util.computeSha256(body, function(err, sha) {
                                    if (err) {
                                        done(err);
                                    } else {
                                        req.httpRequest.headers["X-Amz-Content-Sha256"] = sha;
                                        done();
                                    }
                                });
                            } else {
                                done();
                            }
                        });
                        add("SET_CONTENT_LENGTH", "afterBuild", function SET_CONTENT_LENGTH(req) {
                            var authtype = getOperationAuthtype(req);
                            var payloadMember = AWS.util.getRequestPayloadShape(req);
                            if (req.httpRequest.headers["Content-Length"] === undefined) {
                                try {
                                    var length = AWS.util.string.byteLength(req.httpRequest.body);
                                    req.httpRequest.headers["Content-Length"] = length;
                                } catch (err) {
                                    if (payloadMember && payloadMember.isStreaming) {
                                        if (payloadMember.requiresLength) {
                                            throw err;
                                        } else if (authtype.indexOf("unsigned-body") >= 0) {
                                            req.httpRequest.headers["Transfer-Encoding"] = "chunked";
                                            return;
                                        } else {
                                            throw err;
                                        }
                                    }
                                    throw err;
                                }
                            }
                        });
                        add("SET_HTTP_HOST", "afterBuild", function SET_HTTP_HOST(req) {
                            req.httpRequest.headers["Host"] = req.httpRequest.endpoint.host;
                        });
                        add("SET_TRACE_ID", "afterBuild", function SET_TRACE_ID(req) {
                            var traceIdHeaderName = "X-Amzn-Trace-Id";
                            if (AWS.util.isNode() && !Object.hasOwnProperty.call(req.httpRequest.headers, traceIdHeaderName)) {
                                var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
                                var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
                                var functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
                                var traceId = process.env[ENV_TRACE_ID];
                                if (typeof functionName === "string" && functionName.length > 0 && typeof traceId === "string" && traceId.length > 0) {
                                    req.httpRequest.headers[traceIdHeaderName] = traceId;
                                }
                            }
                        });
                        add("RESTART", "restart", function RESTART() {
                            var err = this.response.error;
                            if (!err || !err.retryable) return;
                            this.httpRequest = new AWS.HttpRequest(this.service.endpoint, this.service.region);
                            if (this.response.retryCount < this.service.config.maxRetries) {
                                this.response.retryCount++;
                            } else {
                                this.response.error = null;
                            }
                        });
                        var addToHead = true;
                        addAsync("DISCOVER_ENDPOINT", "sign", DISCOVER_ENDPOINT, addToHead);
                        addAsync("SIGN", "sign", function SIGN(req, done) {
                            var service = req.service;
                            var identityType = getIdentityType(req);
                            if (!identityType || identityType.length === 0) return done();
                            if (identityType === "bearer") {
                                service.config.getToken(function(err, token) {
                                    if (err) {
                                        req.response.error = err;
                                        return done();
                                    }
                                    try {
                                        var SignerClass = service.getSignerClass(req);
                                        var signer = new SignerClass(req.httpRequest);
                                        signer.addAuthorization(token);
                                    } catch (e) {
                                        req.response.error = e;
                                    }
                                    done();
                                });
                            } else {
                                service.config.getCredentials(function(err, credentials) {
                                    if (err) {
                                        req.response.error = err;
                                        return done();
                                    }
                                    try {
                                        var date = service.getSkewCorrectedDate();
                                        var SignerClass = service.getSignerClass(req);
                                        var operations = req.service.api.operations || {};
                                        var operation = operations[req.operation];
                                        var signer = new SignerClass(req.httpRequest, service.getSigningName(req), {
                                            signatureCache: service.config.signatureCache,
                                            operation: operation,
                                            signatureVersion: service.api.signatureVersion
                                        });
                                        signer.setServiceClientId(service._clientId);
                                        delete req.httpRequest.headers["Authorization"];
                                        delete req.httpRequest.headers["Date"];
                                        delete req.httpRequest.headers["X-Amz-Date"];
                                        signer.addAuthorization(credentials, date);
                                        req.signedAt = date;
                                    } catch (e) {
                                        req.response.error = e;
                                    }
                                    done();
                                });
                            }
                        });
                        add("VALIDATE_RESPONSE", "validateResponse", function VALIDATE_RESPONSE(resp) {
                            if (this.service.successfulResponse(resp, this)) {
                                resp.data = {};
                                resp.error = null;
                            } else {
                                resp.data = null;
                                resp.error = AWS.util.error(new Error(), {
                                    code: "UnknownError",
                                    message: "An unknown error occurred."
                                });
                            }
                        });
                        add("ERROR", "error", function ERROR(err, resp) {
                            var awsQueryCompatible = resp.request.service.api.awsQueryCompatible;
                            if (awsQueryCompatible) {
                                var headers = resp.httpResponse.headers;
                                var queryErrorCode = headers ? headers["x-amzn-query-error"] : undefined;
                                if (queryErrorCode && queryErrorCode.includes(";")) {
                                    resp.error.code = queryErrorCode.split(";")[0];
                                }
                            }
                        }, true);
                        addAsync("SEND", "send", function SEND(resp, done) {
                            resp.httpResponse._abortCallback = done;
                            resp.error = null;
                            resp.data = null;
                            function callback(httpResp) {
                                resp.httpResponse.stream = httpResp;
                                var stream = resp.request.httpRequest.stream;
                                var service = resp.request.service;
                                var api = service.api;
                                var operationName = resp.request.operation;
                                var operation = api.operations[operationName] || {};
                                httpResp.on("headers", function onHeaders(statusCode, headers, statusMessage) {
                                    resp.request.emit("httpHeaders", [ statusCode, headers, resp, statusMessage ]);
                                    if (!resp.httpResponse.streaming) {
                                        if (AWS.HttpClient.streamsApiVersion === 2) {
                                            if (operation.hasEventOutput && service.successfulResponse(resp)) {
                                                resp.request.emit("httpDone");
                                                done();
                                                return;
                                            }
                                            httpResp.on("readable", function onReadable() {
                                                var data = httpResp.read();
                                                if (data !== null) {
                                                    resp.request.emit("httpData", [ data, resp ]);
                                                }
                                            });
                                        } else {
                                            httpResp.on("data", function onData(data) {
                                                resp.request.emit("httpData", [ data, resp ]);
                                            });
                                        }
                                    }
                                });
                                httpResp.on("end", function onEnd() {
                                    if (!stream || !stream.didCallback) {
                                        if (AWS.HttpClient.streamsApiVersion === 2 && (operation.hasEventOutput && service.successfulResponse(resp))) {
                                            return;
                                        }
                                        resp.request.emit("httpDone");
                                        done();
                                    }
                                });
                            }
                            function progress(httpResp) {
                                httpResp.on("sendProgress", function onSendProgress(value) {
                                    resp.request.emit("httpUploadProgress", [ value, resp ]);
                                });
                                httpResp.on("receiveProgress", function onReceiveProgress(value) {
                                    resp.request.emit("httpDownloadProgress", [ value, resp ]);
                                });
                            }
                            function error(err) {
                                if (err.code !== "RequestAbortedError") {
                                    var errCode = err.code === "TimeoutError" ? err.code : "NetworkingError";
                                    err = AWS.util.error(err, {
                                        code: errCode,
                                        region: resp.request.httpRequest.region,
                                        hostname: resp.request.httpRequest.endpoint.hostname,
                                        retryable: true
                                    });
                                }
                                resp.error = err;
                                resp.request.emit("httpError", [ resp.error, resp ], function() {
                                    done();
                                });
                            }
                            function executeSend() {
                                var http = AWS.HttpClient.getInstance();
                                var httpOptions = resp.request.service.config.httpOptions || {};
                                try {
                                    var stream = http.handleRequest(resp.request.httpRequest, httpOptions, callback, error);
                                    progress(stream);
                                } catch (err) {
                                    error(err);
                                }
                            }
                            var timeDiff = (resp.request.service.getSkewCorrectedDate() - this.signedAt) / 1e3;
                            if (timeDiff >= 60 * 10) {
                                this.emit("sign", [ this ], function(err) {
                                    if (err) done(err); else executeSend();
                                });
                            } else {
                                executeSend();
                            }
                        });
                        add("HTTP_HEADERS", "httpHeaders", function HTTP_HEADERS(statusCode, headers, resp, statusMessage) {
                            resp.httpResponse.statusCode = statusCode;
                            resp.httpResponse.statusMessage = statusMessage;
                            resp.httpResponse.headers = headers;
                            resp.httpResponse.body = AWS.util.buffer.toBuffer("");
                            resp.httpResponse.buffers = [];
                            resp.httpResponse.numBytes = 0;
                            var dateHeader = headers.date || headers.Date;
                            var service = resp.request.service;
                            if (dateHeader) {
                                var serverTime = Date.parse(dateHeader);
                                if (service.config.correctClockSkew && service.isClockSkewed(serverTime)) {
                                    service.applyClockOffset(serverTime);
                                }
                            }
                        });
                        add("HTTP_DATA", "httpData", function HTTP_DATA(chunk, resp) {
                            if (chunk) {
                                if (AWS.util.isNode()) {
                                    resp.httpResponse.numBytes += chunk.length;
                                    var total = resp.httpResponse.headers["content-length"];
                                    var progress = {
                                        loaded: resp.httpResponse.numBytes,
                                        total: total
                                    };
                                    resp.request.emit("httpDownloadProgress", [ progress, resp ]);
                                }
                                resp.httpResponse.buffers.push(AWS.util.buffer.toBuffer(chunk));
                            }
                        });
                        add("HTTP_DONE", "httpDone", function HTTP_DONE(resp) {
                            if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
                                var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
                                resp.httpResponse.body = body;
                            }
                            delete resp.httpResponse.numBytes;
                            delete resp.httpResponse.buffers;
                        });
                        add("FINALIZE_ERROR", "retry", function FINALIZE_ERROR(resp) {
                            if (resp.httpResponse.statusCode) {
                                resp.error.statusCode = resp.httpResponse.statusCode;
                                if (resp.error.retryable === undefined) {
                                    resp.error.retryable = this.service.retryableError(resp.error, this);
                                }
                            }
                        });
                        add("INVALIDATE_CREDENTIALS", "retry", function INVALIDATE_CREDENTIALS(resp) {
                            if (!resp.error) return;
                            switch (resp.error.code) {
                              case "RequestExpired":
                              case "ExpiredTokenException":
                              case "ExpiredToken":
                                resp.error.retryable = true;
                                resp.request.service.config.credentials.expired = true;
                            }
                        });
                        add("EXPIRED_SIGNATURE", "retry", function EXPIRED_SIGNATURE(resp) {
                            var err = resp.error;
                            if (!err) return;
                            if (typeof err.code === "string" && typeof err.message === "string") {
                                if (err.code.match(/Signature/) && err.message.match(/expired/)) {
                                    resp.error.retryable = true;
                                }
                            }
                        });
                        add("CLOCK_SKEWED", "retry", function CLOCK_SKEWED(resp) {
                            if (!resp.error) return;
                            if (this.service.clockSkewError(resp.error) && this.service.config.correctClockSkew) {
                                resp.error.retryable = true;
                            }
                        });
                        add("REDIRECT", "retry", function REDIRECT(resp) {
                            if (resp.error && resp.error.statusCode >= 300 && resp.error.statusCode < 400 && resp.httpResponse.headers["location"]) {
                                this.httpRequest.endpoint = new AWS.Endpoint(resp.httpResponse.headers["location"]);
                                this.httpRequest.headers["Host"] = this.httpRequest.endpoint.host;
                                resp.error.redirect = true;
                                resp.error.retryable = true;
                            }
                        });
                        add("RETRY_CHECK", "retry", function RETRY_CHECK(resp) {
                            if (resp.error) {
                                if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
                                    resp.error.retryDelay = 0;
                                } else if (resp.retryCount < resp.maxRetries) {
                                    resp.error.retryDelay = this.service.retryDelays(resp.retryCount, resp.error) || 0;
                                }
                            }
                        });
                        addAsync("RESET_RETRY_STATE", "afterRetry", function RESET_RETRY_STATE(resp, done) {
                            var delay, willRetry = false;
                            if (resp.error) {
                                delay = resp.error.retryDelay || 0;
                                if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
                                    resp.retryCount++;
                                    willRetry = true;
                                } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
                                    resp.redirectCount++;
                                    willRetry = true;
                                }
                            }
                            if (willRetry && delay >= 0) {
                                resp.error = null;
                                setTimeout(done, delay);
                            } else {
                                done();
                            }
                        });
                    }),
                    CorePost: new SequentialExecutor().addNamedListeners(function(add) {
                        add("EXTRACT_REQUEST_ID", "extractData", AWS.util.extractRequestId);
                        add("EXTRACT_REQUEST_ID", "extractError", AWS.util.extractRequestId);
                        add("ENOTFOUND_ERROR", "httpError", function ENOTFOUND_ERROR(err) {
                            function isDNSError(err) {
                                return err.errno === "ENOTFOUND" || typeof err.errno === "number" && typeof AWS.util.getSystemErrorName === "function" && [ "EAI_NONAME", "EAI_NODATA" ].indexOf(AWS.util.getSystemErrorName(err.errno) >= 0);
                            }
                            if (err.code === "NetworkingError" && isDNSError(err)) {
                                var message = "Inaccessible host: `" + err.hostname + "' at port `" + err.port + "'. This service may not be available in the `" + err.region + "' region.";
                                this.response.error = AWS.util.error(new Error(message), {
                                    code: "UnknownEndpoint",
                                    region: err.region,
                                    hostname: err.hostname,
                                    retryable: true,
                                    originalError: err
                                });
                            }
                        });
                    }),
                    Logger: new SequentialExecutor().addNamedListeners(function(add) {
                        add("LOG_REQUEST", "complete", function LOG_REQUEST(resp) {
                            var req = resp.request;
                            var logger = req.service.config.logger;
                            if (!logger) return;
                            function filterSensitiveLog(inputShape, shape) {
                                if (!shape) {
                                    return shape;
                                }
                                if (inputShape.isSensitive) {
                                    return "***SensitiveInformation***";
                                }
                                switch (inputShape.type) {
                                  case "structure":
                                    var struct = {};
                                    AWS.util.each(shape, function(subShapeName, subShape) {
                                        if (Object.prototype.hasOwnProperty.call(inputShape.members, subShapeName)) {
                                            struct[subShapeName] = filterSensitiveLog(inputShape.members[subShapeName], subShape);
                                        } else {
                                            struct[subShapeName] = subShape;
                                        }
                                    });
                                    return struct;

                                  case "list":
                                    var list = [];
                                    AWS.util.arrayEach(shape, function(subShape, index) {
                                        list.push(filterSensitiveLog(inputShape.member, subShape));
                                    });
                                    return list;

                                  case "map":
                                    var map = {};
                                    AWS.util.each(shape, function(key, value) {
                                        map[key] = filterSensitiveLog(inputShape.value, value);
                                    });
                                    return map;

                                  default:
                                    return shape;
                                }
                            }
                            function buildMessage() {
                                var time = resp.request.service.getSkewCorrectedDate().getTime();
                                var delta = (time - req.startTime.getTime()) / 1e3;
                                var ansi = logger.isTTY ? true : false;
                                var status = resp.httpResponse.statusCode;
                                var censoredParams = req.params;
                                if (req.service.api.operations && req.service.api.operations[req.operation] && req.service.api.operations[req.operation].input) {
                                    var inputShape = req.service.api.operations[req.operation].input;
                                    censoredParams = filterSensitiveLog(inputShape, req.params);
                                }
                                var params = require("util").inspect(censoredParams, true, null);
                                var message = "";
                                if (ansi) message += "[33m";
                                message += "[AWS " + req.service.serviceIdentifier + " " + status;
                                message += " " + delta.toString() + "s " + resp.retryCount + " retries]";
                                if (ansi) message += "[0;1m";
                                message += " " + AWS.util.string.lowerFirst(req.operation);
                                message += "(" + params + ")";
                                if (ansi) message += "[0m";
                                return message;
                            }
                            var line = buildMessage();
                            if (typeof logger.log === "function") {
                                logger.log(line);
                            } else if (typeof logger.write === "function") {
                                logger.write(line + "\n");
                            }
                        });
                    }),
                    Json: new SequentialExecutor().addNamedListeners(function(add) {
                        var svc = require("./protocol/json");
                        add("BUILD", "build", svc.buildRequest);
                        add("EXTRACT_DATA", "extractData", svc.extractData);
                        add("EXTRACT_ERROR", "extractError", svc.extractError);
                    }),
                    Rest: new SequentialExecutor().addNamedListeners(function(add) {
                        var svc = require("./protocol/rest");
                        add("BUILD", "build", svc.buildRequest);
                        add("EXTRACT_DATA", "extractData", svc.extractData);
                        add("EXTRACT_ERROR", "extractError", svc.extractError);
                    }),
                    RestJson: new SequentialExecutor().addNamedListeners(function(add) {
                        var svc = require("./protocol/rest_json");
                        add("BUILD", "build", svc.buildRequest);
                        add("EXTRACT_DATA", "extractData", svc.extractData);
                        add("EXTRACT_ERROR", "extractError", svc.extractError);
                        add("UNSET_CONTENT_LENGTH", "afterBuild", svc.unsetContentLength);
                    }),
                    RestXml: new SequentialExecutor().addNamedListeners(function(add) {
                        var svc = require("./protocol/rest_xml");
                        add("BUILD", "build", svc.buildRequest);
                        add("EXTRACT_DATA", "extractData", svc.extractData);
                        add("EXTRACT_ERROR", "extractError", svc.extractError);
                    }),
                    Query: new SequentialExecutor().addNamedListeners(function(add) {
                        var svc = require("./protocol/query");
                        add("BUILD", "build", svc.buildRequest);
                        add("EXTRACT_DATA", "extractData", svc.extractData);
                        add("EXTRACT_ERROR", "extractError", svc.extractError);
                    })
                };
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "./core": 44,
        "./discover_endpoint": 52,
        "./protocol/json": 80,
        "./protocol/query": 81,
        "./protocol/rest": 82,
        "./protocol/rest_json": 83,
        "./protocol/rest_xml": 84,
        "./sequential_executor": 95,
        _process: 11,
        util: 5
    } ],
    95: [ function(require, module, exports) {
        var AWS = require("./core");
        AWS.SequentialExecutor = AWS.util.inherit({
            constructor: function SequentialExecutor() {
                this._events = {};
            },
            listeners: function listeners(eventName) {
                return this._events[eventName] ? this._events[eventName].slice(0) : [];
            },
            on: function on(eventName, listener, toHead) {
                if (this._events[eventName]) {
                    toHead ? this._events[eventName].unshift(listener) : this._events[eventName].push(listener);
                } else {
                    this._events[eventName] = [ listener ];
                }
                return this;
            },
            onAsync: function onAsync(eventName, listener, toHead) {
                listener._isAsync = true;
                return this.on(eventName, listener, toHead);
            },
            removeListener: function removeListener(eventName, listener) {
                var listeners = this._events[eventName];
                if (listeners) {
                    var length = listeners.length;
                    var position = -1;
                    for (var i = 0; i < length; ++i) {
                        if (listeners[i] === listener) {
                            position = i;
                        }
                    }
                    if (position > -1) {
                        listeners.splice(position, 1);
                    }
                }
                return this;
            },
            removeAllListeners: function removeAllListeners(eventName) {
                if (eventName) {
                    delete this._events[eventName];
                } else {
                    this._events = {};
                }
                return this;
            },
            emit: function emit(eventName, eventArgs, doneCallback) {
                if (!doneCallback) doneCallback = function() {};
                var listeners = this.listeners(eventName);
                var count = listeners.length;
                this.callListeners(listeners, eventArgs, doneCallback);
                return count > 0;
            },
            callListeners: function callListeners(listeners, args, doneCallback, prevError) {
                var self = this;
                var error = prevError || null;
                function callNextListener(err) {
                    if (err) {
                        error = AWS.util.error(error || new Error(), err);
                        if (self._haltHandlersOnError) {
                            return doneCallback.call(self, error);
                        }
                    }
                    self.callListeners(listeners, args, doneCallback, error);
                }
                while (listeners.length > 0) {
                    var listener = listeners.shift();
                    if (listener._isAsync) {
                        listener.apply(self, args.concat([ callNextListener ]));
                        return;
                    } else {
                        try {
                            listener.apply(self, args);
                        } catch (err) {
                            error = AWS.util.error(error || new Error(), err);
                        }
                        if (error && self._haltHandlersOnError) {
                            doneCallback.call(self, error);
                            return;
                        }
                    }
                }
                doneCallback.call(self, error);
            },
            addListeners: function addListeners(listeners) {
                var self = this;
                if (listeners._events) listeners = listeners._events;
                AWS.util.each(listeners, function(event, callbacks) {
                    if (typeof callbacks === "function") callbacks = [ callbacks ];
                    AWS.util.arrayEach(callbacks, function(callback) {
                        self.on(event, callback);
                    });
                });
                return self;
            },
            addNamedListener: function addNamedListener(name, eventName, callback, toHead) {
                this[name] = callback;
                this.addListener(eventName, callback, toHead);
                return this;
            },
            addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback, toHead) {
                callback._isAsync = true;
                return this.addNamedListener(name, eventName, callback, toHead);
            },
            addNamedListeners: function addNamedListeners(callback) {
                var self = this;
                callback(function() {
                    self.addNamedListener.apply(self, arguments);
                }, function() {
                    self.addNamedAsyncListener.apply(self, arguments);
                });
                return this;
            }
        });
        AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;
        module.exports = AWS.SequentialExecutor;
    }, {
        "./core": 44
    } ],
    84: [ function(require, module, exports) {
        var AWS = require("../core");
        var util = require("../util");
        var Rest = require("./rest");
        function populateBody(req) {
            var input = req.service.api.operations[req.operation].input;
            var builder = new AWS.XML.Builder();
            var params = req.params;
            var payload = input.payload;
            if (payload) {
                var payloadMember = input.members[payload];
                params = params[payload];
                if (params === undefined) return;
                if (payloadMember.type === "structure") {
                    var rootElement = payloadMember.name;
                    req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
                } else {
                    req.httpRequest.body = params;
                }
            } else {
                req.httpRequest.body = builder.toXML(params, input, input.name || input.shape || util.string.upperFirst(req.operation) + "Request");
            }
        }
        function buildRequest(req) {
            Rest.buildRequest(req);
            if ([ "GET", "HEAD" ].indexOf(req.httpRequest.method) < 0) {
                populateBody(req);
            }
        }
        function extractError(resp) {
            Rest.extractError(resp);
            var data;
            try {
                data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
            } catch (e) {
                data = {
                    Code: resp.httpResponse.statusCode,
                    Message: resp.httpResponse.statusMessage
                };
            }
            if (data.Errors) data = data.Errors;
            if (data.Error) data = data.Error;
            if (data.Code) {
                resp.error = util.error(new Error(), {
                    code: data.Code,
                    message: data.Message
                });
            } else {
                resp.error = util.error(new Error(), {
                    code: resp.httpResponse.statusCode,
                    message: null
                });
            }
        }
        function extractData(resp) {
            Rest.extractData(resp);
            var parser;
            var req = resp.request;
            var body = resp.httpResponse.body;
            var operation = req.service.api.operations[req.operation];
            var output = operation.output;
            var hasEventOutput = operation.hasEventOutput;
            var payload = output.payload;
            if (payload) {
                var payloadMember = output.members[payload];
                if (payloadMember.isEventStream) {
                    parser = new AWS.XML.Parser();
                    resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body, parser, payloadMember);
                } else if (payloadMember.type === "structure") {
                    parser = new AWS.XML.Parser();
                    resp.data[payload] = parser.parse(body.toString(), payloadMember);
                } else if (payloadMember.type === "binary" || payloadMember.isStreaming) {
                    resp.data[payload] = body;
                } else {
                    resp.data[payload] = payloadMember.toType(body);
                }
            } else if (body.length > 0) {
                parser = new AWS.XML.Parser();
                var data = parser.parse(body.toString(), output);
                util.update(resp.data, data);
            }
        }
        module.exports = {
            buildRequest: buildRequest,
            extractError: extractError,
            extractData: extractData
        };
    }, {
        "../core": 44,
        "../util": 131,
        "./rest": 82
    } ],
    83: [ function(require, module, exports) {
        var util = require("../util");
        var Rest = require("./rest");
        var Json = require("./json");
        var JsonBuilder = require("../json/builder");
        var JsonParser = require("../json/parser");
        var METHODS_WITHOUT_BODY = [ "GET", "HEAD", "DELETE" ];
        function unsetContentLength(req) {
            var payloadMember = util.getRequestPayloadShape(req);
            if (payloadMember === undefined && METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) >= 0) {
                delete req.httpRequest.headers["Content-Length"];
            }
        }
        function populateBody(req) {
            var builder = new JsonBuilder();
            var input = req.service.api.operations[req.operation].input;
            if (input.payload) {
                var params = {};
                var payloadShape = input.members[input.payload];
                params = req.params[input.payload];
                if (payloadShape.type === "structure") {
                    req.httpRequest.body = builder.build(params || {}, payloadShape);
                    applyContentTypeHeader(req);
                } else if (params !== undefined) {
                    req.httpRequest.body = params;
                    if (payloadShape.type === "binary" || payloadShape.isStreaming) {
                        applyContentTypeHeader(req, true);
                    }
                }
            } else {
                req.httpRequest.body = builder.build(req.params, input);
                applyContentTypeHeader(req);
            }
        }
        function applyContentTypeHeader(req, isBinary) {
            if (!req.httpRequest.headers["Content-Type"]) {
                var type = isBinary ? "binary/octet-stream" : "application/json";
                req.httpRequest.headers["Content-Type"] = type;
            }
        }
        function buildRequest(req) {
            Rest.buildRequest(req);
            if (METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) < 0) {
                populateBody(req);
            }
        }
        function extractError(resp) {
            Json.extractError(resp);
        }
        function extractData(resp) {
            Rest.extractData(resp);
            var req = resp.request;
            var operation = req.service.api.operations[req.operation];
            var rules = req.service.api.operations[req.operation].output || {};
            var parser;
            var hasEventOutput = operation.hasEventOutput;
            if (rules.payload) {
                var payloadMember = rules.members[rules.payload];
                var body = resp.httpResponse.body;
                if (payloadMember.isEventStream) {
                    parser = new JsonParser();
                    resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body, parser, payloadMember);
                } else if (payloadMember.type === "structure" || payloadMember.type === "list") {
                    var parser = new JsonParser();
                    resp.data[rules.payload] = parser.parse(body, payloadMember);
                } else if (payloadMember.type === "binary" || payloadMember.isStreaming) {
                    resp.data[rules.payload] = body;
                } else {
                    resp.data[rules.payload] = payloadMember.toType(body);
                }
            } else {
                var data = resp.data;
                Json.extractData(resp);
                resp.data = util.merge(data, resp.data);
            }
        }
        module.exports = {
            buildRequest: buildRequest,
            extractError: extractError,
            extractData: extractData,
            unsetContentLength: unsetContentLength
        };
    }, {
        "../json/builder": 68,
        "../json/parser": 69,
        "../util": 131,
        "./json": 80,
        "./rest": 82
    } ],
    82: [ function(require, module, exports) {
        var util = require("../util");
        var populateHostPrefix = require("./helpers").populateHostPrefix;
        function populateMethod(req) {
            req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
        }
        function generateURI(endpointPath, operationPath, input, params) {
            var uri = [ endpointPath, operationPath ].join("/");
            uri = uri.replace(/\/+/g, "/");
            var queryString = {}, queryStringSet = false;
            util.each(input.members, function(name, member) {
                var paramValue = params[name];
                if (paramValue === null || paramValue === undefined) return;
                if (member.location === "uri") {
                    var regex = new RegExp("\\{" + member.name + "(\\+)?\\}");
                    uri = uri.replace(regex, function(_, plus) {
                        var fn = plus ? util.uriEscapePath : util.uriEscape;
                        return fn(String(paramValue));
                    });
                } else if (member.location === "querystring") {
                    queryStringSet = true;
                    if (member.type === "list") {
                        queryString[member.name] = paramValue.map(function(val) {
                            return util.uriEscape(member.member.toWireFormat(val).toString());
                        });
                    } else if (member.type === "map") {
                        util.each(paramValue, function(key, value) {
                            if (Array.isArray(value)) {
                                queryString[key] = value.map(function(val) {
                                    return util.uriEscape(String(val));
                                });
                            } else {
                                queryString[key] = util.uriEscape(String(value));
                            }
                        });
                    } else {
                        queryString[member.name] = util.uriEscape(member.toWireFormat(paramValue).toString());
                    }
                }
            });
            if (queryStringSet) {
                uri += uri.indexOf("?") >= 0 ? "&" : "?";
                var parts = [];
                util.arrayEach(Object.keys(queryString).sort(), function(key) {
                    if (!Array.isArray(queryString[key])) {
                        queryString[key] = [ queryString[key] ];
                    }
                    for (var i = 0; i < queryString[key].length; i++) {
                        parts.push(util.uriEscape(String(key)) + "=" + queryString[key][i]);
                    }
                });
                uri += parts.join("&");
            }
            return uri;
        }
        function populateURI(req) {
            var operation = req.service.api.operations[req.operation];
            var input = operation.input;
            var uri = generateURI(req.httpRequest.endpoint.path, operation.httpPath, input, req.params);
            req.httpRequest.path = uri;
        }
        function populateHeaders(req) {
            var operation = req.service.api.operations[req.operation];
            util.each(operation.input.members, function(name, member) {
                var value = req.params[name];
                if (value === null || value === undefined) return;
                if (member.location === "headers" && member.type === "map") {
                    util.each(value, function(key, memberValue) {
                        req.httpRequest.headers[member.name + key] = memberValue;
                    });
                } else if (member.location === "header") {
                    value = member.toWireFormat(value).toString();
                    if (member.isJsonValue) {
                        value = util.base64.encode(value);
                    }
                    req.httpRequest.headers[member.name] = value;
                }
            });
        }
        function buildRequest(req) {
            populateMethod(req);
            populateURI(req);
            populateHeaders(req);
            populateHostPrefix(req);
        }
        function extractError() {}
        function extractData(resp) {
            var req = resp.request;
            var data = {};
            var r = resp.httpResponse;
            var operation = req.service.api.operations[req.operation];
            var output = operation.output;
            var headers = {};
            util.each(r.headers, function(k, v) {
                headers[k.toLowerCase()] = v;
            });
            util.each(output.members, function(name, member) {
                var header = (member.name || name).toLowerCase();
                if (member.location === "headers" && member.type === "map") {
                    data[name] = {};
                    var location = member.isLocationName ? member.name : "";
                    var pattern = new RegExp("^" + location + "(.+)", "i");
                    util.each(r.headers, function(k, v) {
                        var result = k.match(pattern);
                        if (result !== null) {
                            data[name][result[1]] = v;
                        }
                    });
                } else if (member.location === "header") {
                    if (headers[header] !== undefined) {
                        var value = member.isJsonValue ? util.base64.decode(headers[header]) : headers[header];
                        data[name] = member.toType(value);
                    }
                } else if (member.location === "statusCode") {
                    data[name] = parseInt(r.statusCode, 10);
                }
            });
            resp.data = data;
        }
        module.exports = {
            buildRequest: buildRequest,
            extractError: extractError,
            extractData: extractData,
            generateURI: generateURI
        };
    }, {
        "../util": 131,
        "./helpers": 79
    } ],
    81: [ function(require, module, exports) {
        var AWS = require("../core");
        var util = require("../util");
        var QueryParamSerializer = require("../query/query_param_serializer");
        var Shape = require("../model/shape");
        var populateHostPrefix = require("./helpers").populateHostPrefix;
        function buildRequest(req) {
            var operation = req.service.api.operations[req.operation];
            var httpRequest = req.httpRequest;
            httpRequest.headers["Content-Type"] = "application/x-www-form-urlencoded; charset=utf-8";
            httpRequest.params = {
                Version: req.service.api.apiVersion,
                Action: operation.name
            };
            var builder = new QueryParamSerializer();
            builder.serialize(req.params, operation.input, function(name, value) {
                httpRequest.params[name] = value;
            });
            httpRequest.body = util.queryParamsToString(httpRequest.params);
            populateHostPrefix(req);
        }
        function extractError(resp) {
            var data, body = resp.httpResponse.body.toString();
            if (body.match("<UnknownOperationException")) {
                data = {
                    Code: "UnknownOperation",
                    Message: "Unknown operation " + resp.request.operation
                };
            } else {
                try {
                    data = new AWS.XML.Parser().parse(body);
                } catch (e) {
                    data = {
                        Code: resp.httpResponse.statusCode,
                        Message: resp.httpResponse.statusMessage
                    };
                }
            }
            if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
            if (data.Errors) data = data.Errors;
            if (data.Error) data = data.Error;
            if (data.Code) {
                resp.error = util.error(new Error(), {
                    code: data.Code,
                    message: data.Message
                });
            } else {
                resp.error = util.error(new Error(), {
                    code: resp.httpResponse.statusCode,
                    message: null
                });
            }
        }
        function extractData(resp) {
            var req = resp.request;
            var operation = req.service.api.operations[req.operation];
            var shape = operation.output || {};
            var origRules = shape;
            if (origRules.resultWrapper) {
                var tmp = Shape.create({
                    type: "structure"
                });
                tmp.members[origRules.resultWrapper] = shape;
                tmp.memberNames = [ origRules.resultWrapper ];
                util.property(shape, "name", shape.resultWrapper);
                shape = tmp;
            }
            var parser = new AWS.XML.Parser();
            if (shape && shape.members && !shape.members._XAMZRequestId) {
                var requestIdShape = Shape.create({
                    type: "string"
                }, {
                    api: {
                        protocol: "query"
                    }
                }, "requestId");
                shape.members._XAMZRequestId = requestIdShape;
            }
            var data = parser.parse(resp.httpResponse.body.toString(), shape);
            resp.requestId = data._XAMZRequestId || data.requestId;
            if (data._XAMZRequestId) delete data._XAMZRequestId;
            if (origRules.resultWrapper) {
                if (data[origRules.resultWrapper]) {
                    util.update(data, data[origRules.resultWrapper]);
                    delete data[origRules.resultWrapper];
                }
            }
            resp.data = data;
        }
        module.exports = {
            buildRequest: buildRequest,
            extractError: extractError,
            extractData: extractData
        };
    }, {
        "../core": 44,
        "../model/shape": 76,
        "../query/query_param_serializer": 85,
        "../util": 131,
        "./helpers": 79
    } ],
    85: [ function(require, module, exports) {
        var util = require("../util");
        function QueryParamSerializer() {}
        QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
            serializeStructure("", params, shape, fn);
        };
        function ucfirst(shape) {
            if (shape.isQueryName || shape.api.protocol !== "ec2") {
                return shape.name;
            } else {
                return shape.name[0].toUpperCase() + shape.name.substr(1);
            }
        }
        function serializeStructure(prefix, struct, rules, fn) {
            util.each(rules.members, function(name, member) {
                var value = struct[name];
                if (value === null || value === undefined) return;
                var memberName = ucfirst(member);
                memberName = prefix ? prefix + "." + memberName : memberName;
                serializeMember(memberName, value, member, fn);
            });
        }
        function serializeMap(name, map, rules, fn) {
            var i = 1;
            util.each(map, function(key, value) {
                var prefix = rules.flattened ? "." : ".entry.";
                var position = prefix + i++ + ".";
                var keyName = position + (rules.key.name || "key");
                var valueName = position + (rules.value.name || "value");
                serializeMember(name + keyName, key, rules.key, fn);
                serializeMember(name + valueName, value, rules.value, fn);
            });
        }
        function serializeList(name, list, rules, fn) {
            var memberRules = rules.member || {};
            if (list.length === 0) {
                fn.call(this, name, null);
                return;
            }
            util.arrayEach(list, function(v, n) {
                var suffix = "." + (n + 1);
                if (rules.api.protocol === "ec2") {
                    suffix = suffix + "";
                } else if (rules.flattened) {
                    if (memberRules.name) {
                        var parts = name.split(".");
                        parts.pop();
                        parts.push(ucfirst(memberRules));
                        name = parts.join(".");
                    }
                } else {
                    suffix = "." + (memberRules.name ? memberRules.name : "member") + suffix;
                }
                serializeMember(name + suffix, v, memberRules, fn);
            });
        }
        function serializeMember(name, value, rules, fn) {
            if (value === null || value === undefined) return;
            if (rules.type === "structure") {
                serializeStructure(name, value, rules, fn);
            } else if (rules.type === "list") {
                serializeList(name, value, rules, fn);
            } else if (rules.type === "map") {
                serializeMap(name, value, rules, fn);
            } else {
                fn(name, rules.toWireFormat(value).toString());
            }
        }
        module.exports = QueryParamSerializer;
    }, {
        "../util": 131
    } ],
    76: [ function(require, module, exports) {
        var Collection = require("./collection");
        var util = require("../util");
        function property(obj, name, value) {
            if (value !== null && value !== undefined) {
                util.property.apply(this, arguments);
            }
        }
        function memoizedProperty(obj, name) {
            if (!obj.constructor.prototype[name]) {
                util.memoizedProperty.apply(this, arguments);
            }
        }
        function Shape(shape, options, memberName) {
            options = options || {};
            property(this, "shape", shape.shape);
            property(this, "api", options.api, false);
            property(this, "type", shape.type);
            property(this, "enum", shape.enum);
            property(this, "min", shape.min);
            property(this, "max", shape.max);
            property(this, "pattern", shape.pattern);
            property(this, "location", shape.location || this.location || "body");
            property(this, "name", this.name || shape.xmlName || shape.queryName || shape.locationName || memberName);
            property(this, "isStreaming", shape.streaming || this.isStreaming || false);
            property(this, "requiresLength", shape.requiresLength, false);
            property(this, "isComposite", shape.isComposite || false);
            property(this, "isShape", true, false);
            property(this, "isQueryName", Boolean(shape.queryName), false);
            property(this, "isLocationName", Boolean(shape.locationName), false);
            property(this, "isIdempotent", shape.idempotencyToken === true);
            property(this, "isJsonValue", shape.jsonvalue === true);
            property(this, "isSensitive", shape.sensitive === true || shape.prototype && shape.prototype.sensitive === true);
            property(this, "isEventStream", Boolean(shape.eventstream), false);
            property(this, "isEvent", Boolean(shape.event), false);
            property(this, "isEventPayload", Boolean(shape.eventpayload), false);
            property(this, "isEventHeader", Boolean(shape.eventheader), false);
            property(this, "isTimestampFormatSet", Boolean(shape.timestampFormat) || shape.prototype && shape.prototype.isTimestampFormatSet === true, false);
            property(this, "endpointDiscoveryId", Boolean(shape.endpointdiscoveryid), false);
            property(this, "hostLabel", Boolean(shape.hostLabel), false);
            if (options.documentation) {
                property(this, "documentation", shape.documentation);
                property(this, "documentationUrl", shape.documentationUrl);
            }
            if (shape.xmlAttribute) {
                property(this, "isXmlAttribute", shape.xmlAttribute || false);
            }
            property(this, "defaultValue", null);
            this.toWireFormat = function(value) {
                if (value === null || value === undefined) return "";
                return value;
            };
            this.toType = function(value) {
                return value;
            };
        }
        Shape.normalizedTypes = {
            character: "string",
            double: "float",
            long: "integer",
            short: "integer",
            biginteger: "integer",
            bigdecimal: "float",
            blob: "binary"
        };
        Shape.types = {
            structure: StructureShape,
            list: ListShape,
            map: MapShape,
            boolean: BooleanShape,
            timestamp: TimestampShape,
            float: FloatShape,
            integer: IntegerShape,
            string: StringShape,
            base64: Base64Shape,
            binary: BinaryShape
        };
        Shape.resolve = function resolve(shape, options) {
            if (shape.shape) {
                var refShape = options.api.shapes[shape.shape];
                if (!refShape) {
                    throw new Error("Cannot find shape reference: " + shape.shape);
                }
                return refShape;
            } else {
                return null;
            }
        };
        Shape.create = function create(shape, options, memberName) {
            if (shape.isShape) return shape;
            var refShape = Shape.resolve(shape, options);
            if (refShape) {
                var filteredKeys = Object.keys(shape);
                if (!options.documentation) {
                    filteredKeys = filteredKeys.filter(function(name) {
                        return !name.match(/documentation/);
                    });
                }
                var InlineShape = function() {
                    refShape.constructor.call(this, shape, options, memberName);
                };
                InlineShape.prototype = refShape;
                return new InlineShape();
            } else {
                if (!shape.type) {
                    if (shape.members) shape.type = "structure"; else if (shape.member) shape.type = "list"; else if (shape.key) shape.type = "map"; else shape.type = "string";
                }
                var origType = shape.type;
                if (Shape.normalizedTypes[shape.type]) {
                    shape.type = Shape.normalizedTypes[shape.type];
                }
                if (Shape.types[shape.type]) {
                    return new Shape.types[shape.type](shape, options, memberName);
                } else {
                    throw new Error("Unrecognized shape type: " + origType);
                }
            }
        };
        function CompositeShape(shape) {
            Shape.apply(this, arguments);
            property(this, "isComposite", true);
            if (shape.flattened) {
                property(this, "flattened", shape.flattened || false);
            }
        }
        function StructureShape(shape, options) {
            var self = this;
            var requiredMap = null, firstInit = !this.isShape;
            CompositeShape.apply(this, arguments);
            if (firstInit) {
                property(this, "defaultValue", function() {
                    return {};
                });
                property(this, "members", {});
                property(this, "memberNames", []);
                property(this, "required", []);
                property(this, "isRequired", function() {
                    return false;
                });
                property(this, "isDocument", Boolean(shape.document));
            }
            if (shape.members) {
                property(this, "members", new Collection(shape.members, options, function(name, member) {
                    return Shape.create(member, options, name);
                }));
                memoizedProperty(this, "memberNames", function() {
                    return shape.xmlOrder || Object.keys(shape.members);
                });
                if (shape.event) {
                    memoizedProperty(this, "eventPayloadMemberName", function() {
                        var members = self.members;
                        var memberNames = self.memberNames;
                        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
                            if (members[memberNames[i]].isEventPayload) {
                                return memberNames[i];
                            }
                        }
                    });
                    memoizedProperty(this, "eventHeaderMemberNames", function() {
                        var members = self.members;
                        var memberNames = self.memberNames;
                        var eventHeaderMemberNames = [];
                        for (var i = 0, iLen = memberNames.length; i < iLen; i++) {
                            if (members[memberNames[i]].isEventHeader) {
                                eventHeaderMemberNames.push(memberNames[i]);
                            }
                        }
                        return eventHeaderMemberNames;
                    });
                }
            }
            if (shape.required) {
                property(this, "required", shape.required);
                property(this, "isRequired", function(name) {
                    if (!requiredMap) {
                        requiredMap = {};
                        for (var i = 0; i < shape.required.length; i++) {
                            requiredMap[shape.required[i]] = true;
                        }
                    }
                    return requiredMap[name];
                }, false, true);
            }
            property(this, "resultWrapper", shape.resultWrapper || null);
            if (shape.payload) {
                property(this, "payload", shape.payload);
            }
            if (typeof shape.xmlNamespace === "string") {
                property(this, "xmlNamespaceUri", shape.xmlNamespace);
            } else if (typeof shape.xmlNamespace === "object") {
                property(this, "xmlNamespacePrefix", shape.xmlNamespace.prefix);
                property(this, "xmlNamespaceUri", shape.xmlNamespace.uri);
            }
        }
        function ListShape(shape, options) {
            var self = this, firstInit = !this.isShape;
            CompositeShape.apply(this, arguments);
            if (firstInit) {
                property(this, "defaultValue", function() {
                    return [];
                });
            }
            if (shape.member) {
                memoizedProperty(this, "member", function() {
                    return Shape.create(shape.member, options);
                });
            }
            if (this.flattened) {
                var oldName = this.name;
                memoizedProperty(this, "name", function() {
                    return self.member.name || oldName;
                });
            }
        }
        function MapShape(shape, options) {
            var firstInit = !this.isShape;
            CompositeShape.apply(this, arguments);
            if (firstInit) {
                property(this, "defaultValue", function() {
                    return {};
                });
                property(this, "key", Shape.create({
                    type: "string"
                }, options));
                property(this, "value", Shape.create({
                    type: "string"
                }, options));
            }
            if (shape.key) {
                memoizedProperty(this, "key", function() {
                    return Shape.create(shape.key, options);
                });
            }
            if (shape.value) {
                memoizedProperty(this, "value", function() {
                    return Shape.create(shape.value, options);
                });
            }
        }
        function TimestampShape(shape) {
            var self = this;
            Shape.apply(this, arguments);
            if (shape.timestampFormat) {
                property(this, "timestampFormat", shape.timestampFormat);
            } else if (self.isTimestampFormatSet && this.timestampFormat) {
                property(this, "timestampFormat", this.timestampFormat);
            } else if (this.location === "header") {
                property(this, "timestampFormat", "rfc822");
            } else if (this.location === "querystring") {
                property(this, "timestampFormat", "iso8601");
            } else if (this.api) {
                switch (this.api.protocol) {
                  case "json":
                  case "rest-json":
                    property(this, "timestampFormat", "unixTimestamp");
                    break;

                  case "rest-xml":
                  case "query":
                  case "ec2":
                    property(this, "timestampFormat", "iso8601");
                    break;
                }
            }
            this.toType = function(value) {
                if (value === null || value === undefined) return null;
                if (typeof value.toUTCString === "function") return value;
                return typeof value === "string" || typeof value === "number" ? util.date.parseTimestamp(value) : null;
            };
            this.toWireFormat = function(value) {
                return util.date.format(value, self.timestampFormat);
            };
        }
        function StringShape() {
            Shape.apply(this, arguments);
            var nullLessProtocols = [ "rest-xml", "query", "ec2" ];
            this.toType = function(value) {
                value = this.api && nullLessProtocols.indexOf(this.api.protocol) > -1 ? value || "" : value;
                if (this.isJsonValue) {
                    return JSON.parse(value);
                }
                return value && typeof value.toString === "function" ? value.toString() : value;
            };
            this.toWireFormat = function(value) {
                return this.isJsonValue ? JSON.stringify(value) : value;
            };
        }
        function FloatShape() {
            Shape.apply(this, arguments);
            this.toType = function(value) {
                if (value === null || value === undefined) return null;
                return parseFloat(value);
            };
            this.toWireFormat = this.toType;
        }
        function IntegerShape() {
            Shape.apply(this, arguments);
            this.toType = function(value) {
                if (value === null || value === undefined) return null;
                return parseInt(value, 10);
            };
            this.toWireFormat = this.toType;
        }
        function BinaryShape() {
            Shape.apply(this, arguments);
            this.toType = function(value) {
                var buf = util.base64.decode(value);
                if (this.isSensitive && util.isNode() && typeof util.Buffer.alloc === "function") {
                    var secureBuf = util.Buffer.alloc(buf.length, buf);
                    buf.fill(0);
                    buf = secureBuf;
                }
                return buf;
            };
            this.toWireFormat = util.base64.encode;
        }
        function Base64Shape() {
            BinaryShape.apply(this, arguments);
        }
        function BooleanShape() {
            Shape.apply(this, arguments);
            this.toType = function(value) {
                if (typeof value === "boolean") return value;
                if (value === null || value === undefined) return null;
                return value === "true";
            };
        }
        Shape.shapes = {
            StructureShape: StructureShape,
            ListShape: ListShape,
            MapShape: MapShape,
            StringShape: StringShape,
            BooleanShape: BooleanShape,
            Base64Shape: Base64Shape
        };
        module.exports = Shape;
    }, {
        "../util": 131,
        "./collection": 72
    } ],
    72: [ function(require, module, exports) {
        var memoizedProperty = require("../util").memoizedProperty;
        function memoize(name, value, factory, nameTr) {
            memoizedProperty(this, nameTr(name), function() {
                return factory(name, value);
            });
        }
        function Collection(iterable, options, factory, nameTr, callback) {
            nameTr = nameTr || String;
            var self = this;
            for (var id in iterable) {
                if (Object.prototype.hasOwnProperty.call(iterable, id)) {
                    memoize.call(self, id, iterable[id], factory, nameTr);
                    if (callback) callback(id, iterable[id]);
                }
            }
        }
        module.exports = Collection;
    }, {
        "../util": 131
    } ],
    80: [ function(require, module, exports) {
        var util = require("../util");
        var JsonBuilder = require("../json/builder");
        var JsonParser = require("../json/parser");
        var populateHostPrefix = require("./helpers").populateHostPrefix;
        function buildRequest(req) {
            var httpRequest = req.httpRequest;
            var api = req.service.api;
            var target = api.targetPrefix + "." + api.operations[req.operation].name;
            var version = api.jsonVersion || "1.0";
            var input = api.operations[req.operation].input;
            var builder = new JsonBuilder();
            if (version === 1) version = "1.0";
            if (api.awsQueryCompatible) {
                if (!httpRequest.params) {
                    httpRequest.params = {};
                }
                Object.assign(httpRequest.params, req.params);
            }
            httpRequest.body = builder.build(req.params || {}, input);
            httpRequest.headers["Content-Type"] = "application/x-amz-json-" + version;
            httpRequest.headers["X-Amz-Target"] = target;
            populateHostPrefix(req);
        }
        function extractError(resp) {
            var error = {};
            var httpResponse = resp.httpResponse;
            error.code = httpResponse.headers["x-amzn-errortype"] || "UnknownError";
            if (typeof error.code === "string") {
                error.code = error.code.split(":")[0];
            }
            if (httpResponse.body.length > 0) {
                try {
                    var e = JSON.parse(httpResponse.body.toString());
                    var code = e.__type || e.code || e.Code;
                    if (code) {
                        error.code = code.split("#").pop();
                    }
                    if (error.code === "RequestEntityTooLarge") {
                        error.message = "Request body must be less than 1 MB";
                    } else {
                        error.message = e.message || e.Message || null;
                    }
                    for (var key in e || {}) {
                        if (key === "code" || key === "message") {
                            continue;
                        }
                        error["[" + key + "]"] = "See error." + key + " for details.";
                        Object.defineProperty(error, key, {
                            value: e[key],
                            enumerable: false,
                            writable: true
                        });
                    }
                } catch (e) {
                    error.statusCode = httpResponse.statusCode;
                    error.message = httpResponse.statusMessage;
                }
            } else {
                error.statusCode = httpResponse.statusCode;
                error.message = httpResponse.statusCode.toString();
            }
            resp.error = util.error(new Error(), error);
        }
        function extractData(resp) {
            var body = resp.httpResponse.body.toString() || "{}";
            if (resp.request.service.config.convertResponseTypes === false) {
                resp.data = JSON.parse(body);
            } else {
                var operation = resp.request.service.api.operations[resp.request.operation];
                var shape = operation.output || {};
                var parser = new JsonParser();
                resp.data = parser.parse(body, shape);
            }
        }
        module.exports = {
            buildRequest: buildRequest,
            extractError: extractError,
            extractData: extractData
        };
    }, {
        "../json/builder": 68,
        "../json/parser": 69,
        "../util": 131,
        "./helpers": 79
    } ],
    79: [ function(require, module, exports) {
        var util = require("../util");
        var AWS = require("../core");
        function populateHostPrefix(request) {
            var enabled = request.service.config.hostPrefixEnabled;
            if (!enabled) return request;
            var operationModel = request.service.api.operations[request.operation];
            if (hasEndpointDiscover(request)) return request;
            if (operationModel.endpoint && operationModel.endpoint.hostPrefix) {
                var hostPrefixNotation = operationModel.endpoint.hostPrefix;
                var hostPrefix = expandHostPrefix(hostPrefixNotation, request.params, operationModel.input);
                prependEndpointPrefix(request.httpRequest.endpoint, hostPrefix);
                validateHostname(request.httpRequest.endpoint.hostname);
            }
            return request;
        }
        function hasEndpointDiscover(request) {
            var api = request.service.api;
            var operationModel = api.operations[request.operation];
            var isEndpointOperation = api.endpointOperation && api.endpointOperation === util.string.lowerFirst(operationModel.name);
            return operationModel.endpointDiscoveryRequired !== "NULL" || isEndpointOperation === true;
        }
        function expandHostPrefix(hostPrefixNotation, params, shape) {
            util.each(shape.members, function(name, member) {
                if (member.hostLabel === true) {
                    if (typeof params[name] !== "string" || params[name] === "") {
                        throw util.error(new Error(), {
                            message: "Parameter " + name + " should be a non-empty string.",
                            code: "InvalidParameter"
                        });
                    }
                    var regex = new RegExp("\\{" + name + "\\}", "g");
                    hostPrefixNotation = hostPrefixNotation.replace(regex, params[name]);
                }
            });
            return hostPrefixNotation;
        }
        function prependEndpointPrefix(endpoint, prefix) {
            if (endpoint.host) {
                endpoint.host = prefix + endpoint.host;
            }
            if (endpoint.hostname) {
                endpoint.hostname = prefix + endpoint.hostname;
            }
        }
        function validateHostname(hostname) {
            var labels = hostname.split(".");
            var hostPattern = /^[a-zA-Z0-9]{1}$|^[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9]$/;
            util.arrayEach(labels, function(label) {
                if (!label.length || label.length < 1 || label.length > 63) {
                    throw util.error(new Error(), {
                        code: "ValidationError",
                        message: "Hostname label length should be between 1 to 63 characters, inclusive."
                    });
                }
                if (!hostPattern.test(label)) {
                    throw AWS.util.error(new Error(), {
                        code: "ValidationError",
                        message: label + " is not hostname compatible."
                    });
                }
            });
        }
        module.exports = {
            populateHostPrefix: populateHostPrefix
        };
    }, {
        "../core": 44,
        "../util": 131
    } ],
    69: [ function(require, module, exports) {
        var util = require("../util");
        function JsonParser() {}
        JsonParser.prototype.parse = function(value, shape) {
            return translate(JSON.parse(value), shape);
        };
        function translate(value, shape) {
            if (!shape || value === undefined) return undefined;
            switch (shape.type) {
              case "structure":
                return translateStructure(value, shape);

              case "map":
                return translateMap(value, shape);

              case "list":
                return translateList(value, shape);

              default:
                return translateScalar(value, shape);
            }
        }
        function translateStructure(structure, shape) {
            if (structure == null) return undefined;
            if (shape.isDocument) return structure;
            var struct = {};
            var shapeMembers = shape.members;
            var isAwsQueryCompatible = shape.api && shape.api.awsQueryCompatible;
            util.each(shapeMembers, function(name, memberShape) {
                var locationName = memberShape.isLocationName ? memberShape.name : name;
                if (Object.prototype.hasOwnProperty.call(structure, locationName)) {
                    var value = structure[locationName];
                    var result = translate(value, memberShape);
                    if (result !== undefined) struct[name] = result;
                } else if (isAwsQueryCompatible && memberShape.defaultValue) {
                    if (memberShape.type === "list") {
                        struct[name] = typeof memberShape.defaultValue === "function" ? memberShape.defaultValue() : memberShape.defaultValue;
                    }
                }
            });
            return struct;
        }
        function translateList(list, shape) {
            if (list == null) return undefined;
            var out = [];
            util.arrayEach(list, function(value) {
                var result = translate(value, shape.member);
                if (result === undefined) out.push(null); else out.push(result);
            });
            return out;
        }
        function translateMap(map, shape) {
            if (map == null) return undefined;
            var out = {};
            util.each(map, function(key, value) {
                var result = translate(value, shape.value);
                if (result === undefined) out[key] = null; else out[key] = result;
            });
            return out;
        }
        function translateScalar(value, shape) {
            return shape.toType(value);
        }
        module.exports = JsonParser;
    }, {
        "../util": 131
    } ],
    68: [ function(require, module, exports) {
        var util = require("../util");
        function JsonBuilder() {}
        JsonBuilder.prototype.build = function(value, shape) {
            return JSON.stringify(translate(value, shape));
        };
        function translate(value, shape) {
            if (!shape || value === undefined || value === null) return undefined;
            switch (shape.type) {
              case "structure":
                return translateStructure(value, shape);

              case "map":
                return translateMap(value, shape);

              case "list":
                return translateList(value, shape);

              default:
                return translateScalar(value, shape);
            }
        }
        function translateStructure(structure, shape) {
            if (shape.isDocument) {
                return structure;
            }
            var struct = {};
            util.each(structure, function(name, value) {
                var memberShape = shape.members[name];
                if (memberShape) {
                    if (memberShape.location !== "body") return;
                    var locationName = memberShape.isLocationName ? memberShape.name : name;
                    var result = translate(value, memberShape);
                    if (result !== undefined) struct[locationName] = result;
                }
            });
            return struct;
        }
        function translateList(list, shape) {
            var out = [];
            util.arrayEach(list, function(value) {
                var result = translate(value, shape.member);
                if (result !== undefined) out.push(result);
            });
            return out;
        }
        function translateMap(map, shape) {
            var out = {};
            util.each(map, function(key, value) {
                var result = translate(value, shape.value);
                if (result !== undefined) out[key] = result;
            });
            return out;
        }
        function translateScalar(value, shape) {
            return shape.toWireFormat(value);
        }
        module.exports = JsonBuilder;
    }, {
        "../util": 131
    } ],
    52: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var AWS = require("./core");
                var util = require("./util");
                var endpointDiscoveryEnabledEnvs = [ "AWS_ENABLE_ENDPOINT_DISCOVERY", "AWS_ENDPOINT_DISCOVERY_ENABLED" ];
                function getCacheKey(request) {
                    var service = request.service;
                    var api = service.api || {};
                    var operations = api.operations;
                    var identifiers = {};
                    if (service.config.region) {
                        identifiers.region = service.config.region;
                    }
                    if (api.serviceId) {
                        identifiers.serviceId = api.serviceId;
                    }
                    if (service.config.credentials.accessKeyId) {
                        identifiers.accessKeyId = service.config.credentials.accessKeyId;
                    }
                    return identifiers;
                }
                function marshallCustomIdentifiersHelper(result, params, shape) {
                    if (!shape || params === undefined || params === null) return;
                    if (shape.type === "structure" && shape.required && shape.required.length > 0) {
                        util.arrayEach(shape.required, function(name) {
                            var memberShape = shape.members[name];
                            if (memberShape.endpointDiscoveryId === true) {
                                var locationName = memberShape.isLocationName ? memberShape.name : name;
                                result[locationName] = String(params[name]);
                            } else {
                                marshallCustomIdentifiersHelper(result, params[name], memberShape);
                            }
                        });
                    }
                }
                function marshallCustomIdentifiers(request, shape) {
                    var identifiers = {};
                    marshallCustomIdentifiersHelper(identifiers, request.params, shape);
                    return identifiers;
                }
                function optionalDiscoverEndpoint(request) {
                    var service = request.service;
                    var api = service.api;
                    var operationModel = api.operations ? api.operations[request.operation] : undefined;
                    var inputShape = operationModel ? operationModel.input : undefined;
                    var identifiers = marshallCustomIdentifiers(request, inputShape);
                    var cacheKey = getCacheKey(request);
                    if (Object.keys(identifiers).length > 0) {
                        cacheKey = util.update(cacheKey, identifiers);
                        if (operationModel) cacheKey.operation = operationModel.name;
                    }
                    var endpoints = AWS.endpointCache.get(cacheKey);
                    if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
                        return;
                    } else if (endpoints && endpoints.length > 0) {
                        request.httpRequest.updateEndpoint(endpoints[0].Address);
                    } else {
                        var endpointRequest = service.makeRequest(api.endpointOperation, {
                            Operation: operationModel.name,
                            Identifiers: identifiers
                        });
                        addApiVersionHeader(endpointRequest);
                        endpointRequest.removeListener("validate", AWS.EventListeners.Core.VALIDATE_PARAMETERS);
                        endpointRequest.removeListener("retry", AWS.EventListeners.Core.RETRY_CHECK);
                        AWS.endpointCache.put(cacheKey, [ {
                            Address: "",
                            CachePeriodInMinutes: 1
                        } ]);
                        endpointRequest.send(function(err, data) {
                            if (data && data.Endpoints) {
                                AWS.endpointCache.put(cacheKey, data.Endpoints);
                            } else if (err) {
                                AWS.endpointCache.put(cacheKey, [ {
                                    Address: "",
                                    CachePeriodInMinutes: 1
                                } ]);
                            }
                        });
                    }
                }
                var requestQueue = {};
                function requiredDiscoverEndpoint(request, done) {
                    var service = request.service;
                    var api = service.api;
                    var operationModel = api.operations ? api.operations[request.operation] : undefined;
                    var inputShape = operationModel ? operationModel.input : undefined;
                    var identifiers = marshallCustomIdentifiers(request, inputShape);
                    var cacheKey = getCacheKey(request);
                    if (Object.keys(identifiers).length > 0) {
                        cacheKey = util.update(cacheKey, identifiers);
                        if (operationModel) cacheKey.operation = operationModel.name;
                    }
                    var cacheKeyStr = AWS.EndpointCache.getKeyString(cacheKey);
                    var endpoints = AWS.endpointCache.get(cacheKeyStr);
                    if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
                        if (!requestQueue[cacheKeyStr]) requestQueue[cacheKeyStr] = [];
                        requestQueue[cacheKeyStr].push({
                            request: request,
                            callback: done
                        });
                        return;
                    } else if (endpoints && endpoints.length > 0) {
                        request.httpRequest.updateEndpoint(endpoints[0].Address);
                        done();
                    } else {
                        var endpointRequest = service.makeRequest(api.endpointOperation, {
                            Operation: operationModel.name,
                            Identifiers: identifiers
                        });
                        endpointRequest.removeListener("validate", AWS.EventListeners.Core.VALIDATE_PARAMETERS);
                        addApiVersionHeader(endpointRequest);
                        AWS.endpointCache.put(cacheKeyStr, [ {
                            Address: "",
                            CachePeriodInMinutes: 60
                        } ]);
                        endpointRequest.send(function(err, data) {
                            if (err) {
                                request.response.error = util.error(err, {
                                    retryable: false
                                });
                                AWS.endpointCache.remove(cacheKey);
                                if (requestQueue[cacheKeyStr]) {
                                    var pendingRequests = requestQueue[cacheKeyStr];
                                    util.arrayEach(pendingRequests, function(requestContext) {
                                        requestContext.request.response.error = util.error(err, {
                                            retryable: false
                                        });
                                        requestContext.callback();
                                    });
                                    delete requestQueue[cacheKeyStr];
                                }
                            } else if (data) {
                                AWS.endpointCache.put(cacheKeyStr, data.Endpoints);
                                request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
                                if (requestQueue[cacheKeyStr]) {
                                    var pendingRequests = requestQueue[cacheKeyStr];
                                    util.arrayEach(pendingRequests, function(requestContext) {
                                        requestContext.request.httpRequest.updateEndpoint(data.Endpoints[0].Address);
                                        requestContext.callback();
                                    });
                                    delete requestQueue[cacheKeyStr];
                                }
                            }
                            done();
                        });
                    }
                }
                function addApiVersionHeader(endpointRequest) {
                    var api = endpointRequest.service.api;
                    var apiVersion = api.apiVersion;
                    if (apiVersion && !endpointRequest.httpRequest.headers["x-amz-api-version"]) {
                        endpointRequest.httpRequest.headers["x-amz-api-version"] = apiVersion;
                    }
                }
                function invalidateCachedEndpoints(response) {
                    var error = response.error;
                    var httpResponse = response.httpResponse;
                    if (error && (error.code === "InvalidEndpointException" || httpResponse.statusCode === 421)) {
                        var request = response.request;
                        var operations = request.service.api.operations || {};
                        var inputShape = operations[request.operation] ? operations[request.operation].input : undefined;
                        var identifiers = marshallCustomIdentifiers(request, inputShape);
                        var cacheKey = getCacheKey(request);
                        if (Object.keys(identifiers).length > 0) {
                            cacheKey = util.update(cacheKey, identifiers);
                            if (operations[request.operation]) cacheKey.operation = operations[request.operation].name;
                        }
                        AWS.endpointCache.remove(cacheKey);
                    }
                }
                function hasCustomEndpoint(client) {
                    if (client._originalConfig && client._originalConfig.endpoint && client._originalConfig.endpointDiscoveryEnabled === true) {
                        throw util.error(new Error(), {
                            code: "ConfigurationException",
                            message: "Custom endpoint is supplied; endpointDiscoveryEnabled must not be true."
                        });
                    }
                    var svcConfig = AWS.config[client.serviceIdentifier] || {};
                    return Boolean(AWS.config.endpoint || svcConfig.endpoint || client._originalConfig && client._originalConfig.endpoint);
                }
                function isFalsy(value) {
                    return [ "false", "0" ].indexOf(value) >= 0;
                }
                function resolveEndpointDiscoveryConfig(request) {
                    var service = request.service || {};
                    if (service.config.endpointDiscoveryEnabled !== undefined) {
                        return service.config.endpointDiscoveryEnabled;
                    }
                    if (util.isBrowser()) return undefined;
                    for (var i = 0; i < endpointDiscoveryEnabledEnvs.length; i++) {
                        var env = endpointDiscoveryEnabledEnvs[i];
                        if (Object.prototype.hasOwnProperty.call(process.env, env)) {
                            if (process.env[env] === "" || process.env[env] === undefined) {
                                throw util.error(new Error(), {
                                    code: "ConfigurationException",
                                    message: "environmental variable " + env + " cannot be set to nothing"
                                });
                            }
                            return !isFalsy(process.env[env]);
                        }
                    }
                    var configFile = {};
                    try {
                        configFile = AWS.util.iniLoader ? AWS.util.iniLoader.loadFrom({
                            isConfig: true,
                            filename: process.env[AWS.util.sharedConfigFileEnv]
                        }) : {};
                    } catch (e) {}
                    var sharedFileConfig = configFile[process.env.AWS_PROFILE || AWS.util.defaultProfile] || {};
                    if (Object.prototype.hasOwnProperty.call(sharedFileConfig, "endpoint_discovery_enabled")) {
                        if (sharedFileConfig.endpoint_discovery_enabled === undefined) {
                            throw util.error(new Error(), {
                                code: "ConfigurationException",
                                message: "config file entry 'endpoint_discovery_enabled' cannot be set to nothing"
                            });
                        }
                        return !isFalsy(sharedFileConfig.endpoint_discovery_enabled);
                    }
                    return undefined;
                }
                function discoverEndpoint(request, done) {
                    var service = request.service || {};
                    if (hasCustomEndpoint(service) || request.isPresigned()) return done();
                    var operations = service.api.operations || {};
                    var operationModel = operations[request.operation];
                    var isEndpointDiscoveryRequired = operationModel ? operationModel.endpointDiscoveryRequired : "NULL";
                    var isEnabled = resolveEndpointDiscoveryConfig(request);
                    var hasRequiredEndpointDiscovery = service.api.hasRequiredEndpointDiscovery;
                    if (isEnabled || hasRequiredEndpointDiscovery) {
                        request.httpRequest.appendToUserAgent("endpoint-discovery");
                    }
                    switch (isEndpointDiscoveryRequired) {
                      case "OPTIONAL":
                        if (isEnabled || hasRequiredEndpointDiscovery) {
                            optionalDiscoverEndpoint(request);
                            request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS", "extractError", invalidateCachedEndpoints);
                        }
                        done();
                        break;

                      case "REQUIRED":
                        if (isEnabled === false) {
                            request.response.error = util.error(new Error(), {
                                code: "ConfigurationException",
                                message: "Endpoint Discovery is disabled but " + service.api.className + "." + request.operation + "() requires it. Please check your configurations."
                            });
                            done();
                            break;
                        }
                        request.addNamedListener("INVALIDATE_CACHED_ENDPOINTS", "extractError", invalidateCachedEndpoints);
                        requiredDiscoverEndpoint(request, done);
                        break;

                      case "NULL":
                      default:
                        done();
                        break;
                    }
                }
                module.exports = {
                    discoverEndpoint: discoverEndpoint,
                    requiredDiscoverEndpoint: requiredDiscoverEndpoint,
                    optionalDiscoverEndpoint: optionalDiscoverEndpoint,
                    marshallCustomIdentifiers: marshallCustomIdentifiers,
                    getCacheKey: getCacheKey,
                    invalidateCachedEndpoint: invalidateCachedEndpoints
                };
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "./core": 44,
        "./util": 131,
        _process: 11
    } ],
    131: [ function(require, module, exports) {
        (function(process, setImmediate) {
            (function() {
                var AWS;
                var util = {
                    environment: "nodejs",
                    engine: function engine() {
                        if (util.isBrowser() && typeof navigator !== "undefined") {
                            return navigator.userAgent;
                        } else {
                            var engine = process.platform + "/" + process.version;
                            if (process.env.AWS_EXECUTION_ENV) {
                                engine += " exec-env/" + process.env.AWS_EXECUTION_ENV;
                            }
                            return engine;
                        }
                    },
                    userAgent: function userAgent() {
                        var name = util.environment;
                        var agent = "aws-sdk-" + name + "/" + require("./core").VERSION;
                        if (name === "nodejs") agent += " " + util.engine();
                        return agent;
                    },
                    uriEscape: function uriEscape(string) {
                        var output = encodeURIComponent(string);
                        output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);
                        output = output.replace(/[*]/g, function(ch) {
                            return "%" + ch.charCodeAt(0).toString(16).toUpperCase();
                        });
                        return output;
                    },
                    uriEscapePath: function uriEscapePath(string) {
                        var parts = [];
                        util.arrayEach(string.split("/"), function(part) {
                            parts.push(util.uriEscape(part));
                        });
                        return parts.join("/");
                    },
                    urlParse: function urlParse(url) {
                        return util.url.parse(url);
                    },
                    urlFormat: function urlFormat(url) {
                        return util.url.format(url);
                    },
                    queryStringParse: function queryStringParse(qs) {
                        return util.querystring.parse(qs);
                    },
                    queryParamsToString: function queryParamsToString(params) {
                        var items = [];
                        var escape = util.uriEscape;
                        var sortedKeys = Object.keys(params).sort();
                        util.arrayEach(sortedKeys, function(name) {
                            var value = params[name];
                            var ename = escape(name);
                            var result = ename + "=";
                            if (Array.isArray(value)) {
                                var vals = [];
                                util.arrayEach(value, function(item) {
                                    vals.push(escape(item));
                                });
                                result = ename + "=" + vals.sort().join("&" + ename + "=");
                            } else if (value !== undefined && value !== null) {
                                result = ename + "=" + escape(value);
                            }
                            items.push(result);
                        });
                        return items.join("&");
                    },
                    readFileSync: function readFileSync(path) {
                        if (util.isBrowser()) return null;
                        return require("fs").readFileSync(path, "utf-8");
                    },
                    base64: {
                        encode: function encode64(string) {
                            if (typeof string === "number") {
                                throw util.error(new Error("Cannot base64 encode number " + string));
                            }
                            if (string === null || typeof string === "undefined") {
                                return string;
                            }
                            var buf = util.buffer.toBuffer(string);
                            return buf.toString("base64");
                        },
                        decode: function decode64(string) {
                            if (typeof string === "number") {
                                throw util.error(new Error("Cannot base64 decode number " + string));
                            }
                            if (string === null || typeof string === "undefined") {
                                return string;
                            }
                            return util.buffer.toBuffer(string, "base64");
                        }
                    },
                    buffer: {
                        toBuffer: function(data, encoding) {
                            return typeof util.Buffer.from === "function" && util.Buffer.from !== Uint8Array.from ? util.Buffer.from(data, encoding) : new util.Buffer(data, encoding);
                        },
                        alloc: function(size, fill, encoding) {
                            if (typeof size !== "number") {
                                throw new Error("size passed to alloc must be a number.");
                            }
                            if (typeof util.Buffer.alloc === "function") {
                                return util.Buffer.alloc(size, fill, encoding);
                            } else {
                                var buf = new util.Buffer(size);
                                if (fill !== undefined && typeof buf.fill === "function") {
                                    buf.fill(fill, undefined, undefined, encoding);
                                }
                                return buf;
                            }
                        },
                        toStream: function toStream(buffer) {
                            if (!util.Buffer.isBuffer(buffer)) buffer = util.buffer.toBuffer(buffer);
                            var readable = new util.stream.Readable();
                            var pos = 0;
                            readable._read = function(size) {
                                if (pos >= buffer.length) return readable.push(null);
                                var end = pos + size;
                                if (end > buffer.length) end = buffer.length;
                                readable.push(buffer.slice(pos, end));
                                pos = end;
                            };
                            return readable;
                        },
                        concat: function(buffers) {
                            var length = 0, offset = 0, buffer = null, i;
                            for (i = 0; i < buffers.length; i++) {
                                length += buffers[i].length;
                            }
                            buffer = util.buffer.alloc(length);
                            for (i = 0; i < buffers.length; i++) {
                                buffers[i].copy(buffer, offset);
                                offset += buffers[i].length;
                            }
                            return buffer;
                        }
                    },
                    string: {
                        byteLength: function byteLength(string) {
                            if (string === null || string === undefined) return 0;
                            if (typeof string === "string") string = util.buffer.toBuffer(string);
                            if (typeof string.byteLength === "number") {
                                return string.byteLength;
                            } else if (typeof string.length === "number") {
                                return string.length;
                            } else if (typeof string.size === "number") {
                                return string.size;
                            } else if (typeof string.path === "string") {
                                return require("fs").lstatSync(string.path).size;
                            } else {
                                throw util.error(new Error("Cannot determine length of " + string), {
                                    object: string
                                });
                            }
                        },
                        upperFirst: function upperFirst(string) {
                            return string[0].toUpperCase() + string.substr(1);
                        },
                        lowerFirst: function lowerFirst(string) {
                            return string[0].toLowerCase() + string.substr(1);
                        }
                    },
                    ini: {
                        parse: function string(ini) {
                            var currentSection, map = {};
                            util.arrayEach(ini.split(/\r?\n/), function(line) {
                                line = line.split(/(^|\s)[;#]/)[0].trim();
                                var isSection = line[0] === "[" && line[line.length - 1] === "]";
                                if (isSection) {
                                    currentSection = line.substring(1, line.length - 1);
                                    if (currentSection === "__proto__" || currentSection.split(/\s/)[1] === "__proto__") {
                                        throw util.error(new Error("Cannot load profile name '" + currentSection + "' from shared ini file."));
                                    }
                                } else if (currentSection) {
                                    var indexOfEqualsSign = line.indexOf("=");
                                    var start = 0;
                                    var end = line.length - 1;
                                    var isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
                                    if (isAssignment) {
                                        var name = line.substring(0, indexOfEqualsSign).trim();
                                        var value = line.substring(indexOfEqualsSign + 1).trim();
                                        map[currentSection] = map[currentSection] || {};
                                        map[currentSection][name] = value;
                                    }
                                }
                            });
                            return map;
                        }
                    },
                    fn: {
                        noop: function() {},
                        callback: function(err) {
                            if (err) throw err;
                        },
                        makeAsync: function makeAsync(fn, expectedArgs) {
                            if (expectedArgs && expectedArgs <= fn.length) {
                                return fn;
                            }
                            return function() {
                                var args = Array.prototype.slice.call(arguments, 0);
                                var callback = args.pop();
                                var result = fn.apply(null, args);
                                callback(result);
                            };
                        }
                    },
                    date: {
                        getDate: function getDate() {
                            if (!AWS) AWS = require("./core");
                            if (AWS.config.systemClockOffset) {
                                return new Date(new Date().getTime() + AWS.config.systemClockOffset);
                            } else {
                                return new Date();
                            }
                        },
                        iso8601: function iso8601(date) {
                            if (date === undefined) {
                                date = util.date.getDate();
                            }
                            return date.toISOString().replace(/\.\d{3}Z$/, "Z");
                        },
                        rfc822: function rfc822(date) {
                            if (date === undefined) {
                                date = util.date.getDate();
                            }
                            return date.toUTCString();
                        },
                        unixTimestamp: function unixTimestamp(date) {
                            if (date === undefined) {
                                date = util.date.getDate();
                            }
                            return date.getTime() / 1e3;
                        },
                        from: function format(date) {
                            if (typeof date === "number") {
                                return new Date(date * 1e3);
                            } else {
                                return new Date(date);
                            }
                        },
                        format: function format(date, formatter) {
                            if (!formatter) formatter = "iso8601";
                            return util.date[formatter](util.date.from(date));
                        },
                        parseTimestamp: function parseTimestamp(value) {
                            if (typeof value === "number") {
                                return new Date(value * 1e3);
                            } else if (value.match(/^\d+$/)) {
                                return new Date(value * 1e3);
                            } else if (value.match(/^\d{4}/)) {
                                return new Date(value);
                            } else if (value.match(/^\w{3},/)) {
                                return new Date(value);
                            } else {
                                throw util.error(new Error("unhandled timestamp format: " + value), {
                                    code: "TimestampParserError"
                                });
                            }
                        }
                    },
                    crypto: {
                        crc32Table: [ 0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117 ],
                        crc32: function crc32(data) {
                            var tbl = util.crypto.crc32Table;
                            var crc = 0 ^ -1;
                            if (typeof data === "string") {
                                data = util.buffer.toBuffer(data);
                            }
                            for (var i = 0; i < data.length; i++) {
                                var code = data.readUInt8(i);
                                crc = crc >>> 8 ^ tbl[(crc ^ code) & 255];
                            }
                            return (crc ^ -1) >>> 0;
                        },
                        hmac: function hmac(key, string, digest, fn) {
                            if (!digest) digest = "binary";
                            if (digest === "buffer") {
                                digest = undefined;
                            }
                            if (!fn) fn = "sha256";
                            if (typeof string === "string") string = util.buffer.toBuffer(string);
                            return util.crypto.lib.createHmac(fn, key).update(string).digest(digest);
                        },
                        md5: function md5(data, digest, callback) {
                            return util.crypto.hash("md5", data, digest, callback);
                        },
                        sha256: function sha256(data, digest, callback) {
                            return util.crypto.hash("sha256", data, digest, callback);
                        },
                        hash: function(algorithm, data, digest, callback) {
                            var hash = util.crypto.createHash(algorithm);
                            if (!digest) {
                                digest = "binary";
                            }
                            if (digest === "buffer") {
                                digest = undefined;
                            }
                            if (typeof data === "string") data = util.buffer.toBuffer(data);
                            var sliceFn = util.arraySliceFn(data);
                            var isBuffer = util.Buffer.isBuffer(data);
                            if (util.isBrowser() && typeof ArrayBuffer !== "undefined" && data && data.buffer instanceof ArrayBuffer) isBuffer = true;
                            if (callback && typeof data === "object" && typeof data.on === "function" && !isBuffer) {
                                data.on("data", function(chunk) {
                                    hash.update(chunk);
                                });
                                data.on("error", function(err) {
                                    callback(err);
                                });
                                data.on("end", function() {
                                    callback(null, hash.digest(digest));
                                });
                            } else if (callback && sliceFn && !isBuffer && typeof FileReader !== "undefined") {
                                var index = 0, size = 1024 * 512;
                                var reader = new FileReader();
                                reader.onerror = function() {
                                    callback(new Error("Failed to read data."));
                                };
                                reader.onload = function() {
                                    var buf = new util.Buffer(new Uint8Array(reader.result));
                                    hash.update(buf);
                                    index += buf.length;
                                    reader._continueReading();
                                };
                                reader._continueReading = function() {
                                    if (index >= data.size) {
                                        callback(null, hash.digest(digest));
                                        return;
                                    }
                                    var back = index + size;
                                    if (back > data.size) back = data.size;
                                    reader.readAsArrayBuffer(sliceFn.call(data, index, back));
                                };
                                reader._continueReading();
                            } else {
                                if (util.isBrowser() && typeof data === "object" && !isBuffer) {
                                    data = new util.Buffer(new Uint8Array(data));
                                }
                                var out = hash.update(data).digest(digest);
                                if (callback) callback(null, out);
                                return out;
                            }
                        },
                        toHex: function toHex(data) {
                            var out = [];
                            for (var i = 0; i < data.length; i++) {
                                out.push(("0" + data.charCodeAt(i).toString(16)).substr(-2, 2));
                            }
                            return out.join("");
                        },
                        createHash: function createHash(algorithm) {
                            return util.crypto.lib.createHash(algorithm);
                        }
                    },
                    abort: {},
                    each: function each(object, iterFunction) {
                        for (var key in object) {
                            if (Object.prototype.hasOwnProperty.call(object, key)) {
                                var ret = iterFunction.call(this, key, object[key]);
                                if (ret === util.abort) break;
                            }
                        }
                    },
                    arrayEach: function arrayEach(array, iterFunction) {
                        for (var idx in array) {
                            if (Object.prototype.hasOwnProperty.call(array, idx)) {
                                var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
                                if (ret === util.abort) break;
                            }
                        }
                    },
                    update: function update(obj1, obj2) {
                        util.each(obj2, function iterator(key, item) {
                            obj1[key] = item;
                        });
                        return obj1;
                    },
                    merge: function merge(obj1, obj2) {
                        return util.update(util.copy(obj1), obj2);
                    },
                    copy: function copy(object) {
                        if (object === null || object === undefined) return object;
                        var dupe = {};
                        for (var key in object) {
                            dupe[key] = object[key];
                        }
                        return dupe;
                    },
                    isEmpty: function isEmpty(obj) {
                        for (var prop in obj) {
                            if (Object.prototype.hasOwnProperty.call(obj, prop)) {
                                return false;
                            }
                        }
                        return true;
                    },
                    arraySliceFn: function arraySliceFn(obj) {
                        var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
                        return typeof fn === "function" ? fn : null;
                    },
                    isType: function isType(obj, type) {
                        if (typeof type === "function") type = util.typeName(type);
                        return Object.prototype.toString.call(obj) === "[object " + type + "]";
                    },
                    typeName: function typeName(type) {
                        if (Object.prototype.hasOwnProperty.call(type, "name")) return type.name;
                        var str = type.toString();
                        var match = str.match(/^\s*function (.+)\(/);
                        return match ? match[1] : str;
                    },
                    error: function error(err, options) {
                        var originalError = null;
                        if (typeof err.message === "string" && err.message !== "") {
                            if (typeof options === "string" || options && options.message) {
                                originalError = util.copy(err);
                                originalError.message = err.message;
                            }
                        }
                        err.message = err.message || null;
                        if (typeof options === "string") {
                            err.message = options;
                        } else if (typeof options === "object" && options !== null) {
                            util.update(err, options);
                            if (options.message) err.message = options.message;
                            if (options.code || options.name) err.code = options.code || options.name;
                            if (options.stack) err.stack = options.stack;
                        }
                        if (typeof Object.defineProperty === "function") {
                            Object.defineProperty(err, "name", {
                                writable: true,
                                enumerable: false
                            });
                            Object.defineProperty(err, "message", {
                                enumerable: true
                            });
                        }
                        err.name = String(options && options.name || err.name || err.code || "Error");
                        err.time = new Date();
                        if (originalError) {
                            err.originalError = originalError;
                        }
                        for (var key in options || {}) {
                            if (key[0] === "[" && key[key.length - 1] === "]") {
                                key = key.slice(1, -1);
                                if (key === "code" || key === "message") {
                                    continue;
                                }
                                err["[" + key + "]"] = "See error." + key + " for details.";
                                Object.defineProperty(err, key, {
                                    value: err[key] || options && options[key] || originalError && originalError[key],
                                    enumerable: false,
                                    writable: true
                                });
                            }
                        }
                        return err;
                    },
                    inherit: function inherit(klass, features) {
                        var newObject = null;
                        if (features === undefined) {
                            features = klass;
                            klass = Object;
                            newObject = {};
                        } else {
                            var ctor = function ConstructorWrapper() {};
                            ctor.prototype = klass.prototype;
                            newObject = new ctor();
                        }
                        if (features.constructor === Object) {
                            features.constructor = function() {
                                if (klass !== Object) {
                                    return klass.apply(this, arguments);
                                }
                            };
                        }
                        features.constructor.prototype = newObject;
                        util.update(features.constructor.prototype, features);
                        features.constructor.__super__ = klass;
                        return features.constructor;
                    },
                    mixin: function mixin() {
                        var klass = arguments[0];
                        for (var i = 1; i < arguments.length; i++) {
                            for (var prop in arguments[i].prototype) {
                                var fn = arguments[i].prototype[prop];
                                if (prop !== "constructor") {
                                    klass.prototype[prop] = fn;
                                }
                            }
                        }
                        return klass;
                    },
                    hideProperties: function hideProperties(obj, props) {
                        if (typeof Object.defineProperty !== "function") return;
                        util.arrayEach(props, function(key) {
                            Object.defineProperty(obj, key, {
                                enumerable: false,
                                writable: true,
                                configurable: true
                            });
                        });
                    },
                    property: function property(obj, name, value, enumerable, isValue) {
                        var opts = {
                            configurable: true,
                            enumerable: enumerable !== undefined ? enumerable : true
                        };
                        if (typeof value === "function" && !isValue) {
                            opts.get = value;
                        } else {
                            opts.value = value;
                            opts.writable = true;
                        }
                        Object.defineProperty(obj, name, opts);
                    },
                    memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
                        var cachedValue = null;
                        util.property(obj, name, function() {
                            if (cachedValue === null) {
                                cachedValue = get();
                            }
                            return cachedValue;
                        }, enumerable);
                    },
                    hoistPayloadMember: function hoistPayloadMember(resp) {
                        var req = resp.request;
                        var operationName = req.operation;
                        var operation = req.service.api.operations[operationName];
                        var output = operation.output;
                        if (output.payload && !operation.hasEventOutput) {
                            var payloadMember = output.members[output.payload];
                            var responsePayload = resp.data[output.payload];
                            if (payloadMember.type === "structure") {
                                util.each(responsePayload, function(key, value) {
                                    util.property(resp.data, key, value, false);
                                });
                            }
                        }
                    },
                    computeSha256: function computeSha256(body, done) {
                        if (util.isNode()) {
                            var Stream = util.stream.Stream;
                            var fs = require("fs");
                            if (typeof Stream === "function" && body instanceof Stream) {
                                if (typeof body.path === "string") {
                                    var settings = {};
                                    if (typeof body.start === "number") {
                                        settings.start = body.start;
                                    }
                                    if (typeof body.end === "number") {
                                        settings.end = body.end;
                                    }
                                    body = fs.createReadStream(body.path, settings);
                                } else {
                                    return done(new Error("Non-file stream objects are " + "not supported with SigV4"));
                                }
                            }
                        }
                        util.crypto.sha256(body, "hex", function(err, sha) {
                            if (err) done(err); else done(null, sha);
                        });
                    },
                    isClockSkewed: function isClockSkewed(serverTime) {
                        if (serverTime) {
                            util.property(AWS.config, "isClockSkewed", Math.abs(new Date().getTime() - serverTime) >= 3e5, false);
                            return AWS.config.isClockSkewed;
                        }
                    },
                    applyClockOffset: function applyClockOffset(serverTime) {
                        if (serverTime) AWS.config.systemClockOffset = serverTime - new Date().getTime();
                    },
                    extractRequestId: function extractRequestId(resp) {
                        var requestId = resp.httpResponse.headers["x-amz-request-id"] || resp.httpResponse.headers["x-amzn-requestid"];
                        if (!requestId && resp.data && resp.data.ResponseMetadata) {
                            requestId = resp.data.ResponseMetadata.RequestId;
                        }
                        if (requestId) {
                            resp.requestId = requestId;
                        }
                        if (resp.error) {
                            resp.error.requestId = requestId;
                        }
                    },
                    addPromises: function addPromises(constructors, PromiseDependency) {
                        var deletePromises = false;
                        if (PromiseDependency === undefined && AWS && AWS.config) {
                            PromiseDependency = AWS.config.getPromisesDependency();
                        }
                        if (PromiseDependency === undefined && typeof Promise !== "undefined") {
                            PromiseDependency = Promise;
                        }
                        if (typeof PromiseDependency !== "function") deletePromises = true;
                        if (!Array.isArray(constructors)) constructors = [ constructors ];
                        for (var ind = 0; ind < constructors.length; ind++) {
                            var constructor = constructors[ind];
                            if (deletePromises) {
                                if (constructor.deletePromisesFromClass) {
                                    constructor.deletePromisesFromClass();
                                }
                            } else if (constructor.addPromisesToClass) {
                                constructor.addPromisesToClass(PromiseDependency);
                            }
                        }
                    },
                    promisifyMethod: function promisifyMethod(methodName, PromiseDependency) {
                        return function promise() {
                            var self = this;
                            var args = Array.prototype.slice.call(arguments);
                            return new PromiseDependency(function(resolve, reject) {
                                args.push(function(err, data) {
                                    if (err) {
                                        reject(err);
                                    } else {
                                        resolve(data);
                                    }
                                });
                                self[methodName].apply(self, args);
                            });
                        };
                    },
                    isDualstackAvailable: function isDualstackAvailable(service) {
                        if (!service) return false;
                        var metadata = require("../apis/metadata.json");
                        if (typeof service !== "string") service = service.serviceIdentifier;
                        if (typeof service !== "string" || !metadata.hasOwnProperty(service)) return false;
                        return !!metadata[service].dualstackAvailable;
                    },
                    calculateRetryDelay: function calculateRetryDelay(retryCount, retryDelayOptions, err) {
                        if (!retryDelayOptions) retryDelayOptions = {};
                        var customBackoff = retryDelayOptions.customBackoff || null;
                        if (typeof customBackoff === "function") {
                            return customBackoff(retryCount, err);
                        }
                        var base = typeof retryDelayOptions.base === "number" ? retryDelayOptions.base : 100;
                        var delay = Math.random() * (Math.pow(2, retryCount) * base);
                        return delay;
                    },
                    handleRequestWithRetries: function handleRequestWithRetries(httpRequest, options, cb) {
                        if (!options) options = {};
                        var http = AWS.HttpClient.getInstance();
                        var httpOptions = options.httpOptions || {};
                        var retryCount = 0;
                        var errCallback = function(err) {
                            var maxRetries = options.maxRetries || 0;
                            if (err && err.code === "TimeoutError") err.retryable = true;
                            if (err && err.retryable && retryCount < maxRetries) {
                                var delay = util.calculateRetryDelay(retryCount, options.retryDelayOptions, err);
                                if (delay >= 0) {
                                    retryCount++;
                                    setTimeout(sendRequest, delay + (err.retryAfter || 0));
                                    return;
                                }
                            }
                            cb(err);
                        };
                        var sendRequest = function() {
                            var data = "";
                            http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
                                httpResponse.on("data", function(chunk) {
                                    data += chunk.toString();
                                });
                                httpResponse.on("end", function() {
                                    var statusCode = httpResponse.statusCode;
                                    if (statusCode < 300) {
                                        cb(null, data);
                                    } else {
                                        var retryAfter = parseInt(httpResponse.headers["retry-after"], 10) * 1e3 || 0;
                                        var err = util.error(new Error(), {
                                            statusCode: statusCode,
                                            retryable: statusCode >= 500 || statusCode === 429
                                        });
                                        if (retryAfter && err.retryable) err.retryAfter = retryAfter;
                                        errCallback(err);
                                    }
                                });
                            }, errCallback);
                        };
                        AWS.util.defer(sendRequest);
                    },
                    uuid: {
                        v4: function uuidV4() {
                            return require("uuid").v4();
                        }
                    },
                    convertPayloadToString: function convertPayloadToString(resp) {
                        var req = resp.request;
                        var operation = req.operation;
                        var rules = req.service.api.operations[operation].output || {};
                        if (rules.payload && resp.data[rules.payload]) {
                            resp.data[rules.payload] = resp.data[rules.payload].toString();
                        }
                    },
                    defer: function defer(callback) {
                        if (typeof process === "object" && typeof process.nextTick === "function") {
                            process.nextTick(callback);
                        } else if (typeof setImmediate === "function") {
                            setImmediate(callback);
                        } else {
                            setTimeout(callback, 0);
                        }
                    },
                    getRequestPayloadShape: function getRequestPayloadShape(req) {
                        var operations = req.service.api.operations;
                        if (!operations) return undefined;
                        var operation = (operations || {})[req.operation];
                        if (!operation || !operation.input || !operation.input.payload) return undefined;
                        return operation.input.members[operation.input.payload];
                    },
                    getProfilesFromSharedConfig: function getProfilesFromSharedConfig(iniLoader, filename) {
                        var profiles = {};
                        var profilesFromConfig = {};
                        if (process.env[util.configOptInEnv]) {
                            var profilesFromConfig = iniLoader.loadFrom({
                                isConfig: true,
                                filename: process.env[util.sharedConfigFileEnv]
                            });
                        }
                        var profilesFromCreds = {};
                        try {
                            var profilesFromCreds = iniLoader.loadFrom({
                                filename: filename || process.env[util.configOptInEnv] && process.env[util.sharedCredentialsFileEnv]
                            });
                        } catch (error) {
                            if (!process.env[util.configOptInEnv]) throw error;
                        }
                        for (var i = 0, profileNames = Object.keys(profilesFromConfig); i < profileNames.length; i++) {
                            profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromConfig[profileNames[i]]);
                        }
                        for (var i = 0, profileNames = Object.keys(profilesFromCreds); i < profileNames.length; i++) {
                            profiles[profileNames[i]] = objectAssign(profiles[profileNames[i]] || {}, profilesFromCreds[profileNames[i]]);
                        }
                        return profiles;
                        function objectAssign(target, source) {
                            for (var i = 0, keys = Object.keys(source); i < keys.length; i++) {
                                target[keys[i]] = source[keys[i]];
                            }
                            return target;
                        }
                    },
                    ARN: {
                        validate: function validateARN(str) {
                            return str && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
                        },
                        parse: function parseARN(arn) {
                            var matched = arn.split(":");
                            return {
                                partition: matched[1],
                                service: matched[2],
                                region: matched[3],
                                accountId: matched[4],
                                resource: matched.slice(5).join(":")
                            };
                        },
                        build: function buildARN(arnObject) {
                            if (arnObject.service === undefined || arnObject.region === undefined || arnObject.accountId === undefined || arnObject.resource === undefined) throw util.error(new Error("Input ARN object is invalid"));
                            return "arn:" + (arnObject.partition || "aws") + ":" + arnObject.service + ":" + arnObject.region + ":" + arnObject.accountId + ":" + arnObject.resource;
                        }
                    },
                    defaultProfile: "default",
                    configOptInEnv: "AWS_SDK_LOAD_CONFIG",
                    sharedCredentialsFileEnv: "AWS_SHARED_CREDENTIALS_FILE",
                    sharedConfigFileEnv: "AWS_CONFIG_FILE",
                    imdsDisabledEnv: "AWS_EC2_METADATA_DISABLED"
                };
                module.exports = util;
            }).call(this);
        }).call(this, require("_process"), require("timers").setImmediate);
    }, {
        "../apis/metadata.json": 31,
        "./core": 44,
        _process: 11,
        fs: 2,
        timers: 19,
        uuid: 22
    } ],
    42: [ function(require, module, exports) {
        var AWS = require("./core");
        require("./credentials");
        require("./credentials/credential_provider_chain");
        var PromisesDependency;
        AWS.Config = AWS.util.inherit({
            constructor: function Config(options) {
                if (options === undefined) options = {};
                options = this.extractCredentials(options);
                AWS.util.each.call(this, this.keys, function(key, value) {
                    this.set(key, options[key], value);
                });
            },
            getCredentials: function getCredentials(callback) {
                var self = this;
                function finish(err) {
                    callback(err, err ? null : self.credentials);
                }
                function credError(msg, err) {
                    return new AWS.util.error(err || new Error(), {
                        code: "CredentialsError",
                        message: msg,
                        name: "CredentialsError"
                    });
                }
                function getAsyncCredentials() {
                    self.credentials.get(function(err) {
                        if (err) {
                            var msg = "Could not load credentials from " + self.credentials.constructor.name;
                            err = credError(msg, err);
                        }
                        finish(err);
                    });
                }
                function getStaticCredentials() {
                    var err = null;
                    if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
                        err = credError("Missing credentials");
                    }
                    finish(err);
                }
                if (self.credentials) {
                    if (typeof self.credentials.get === "function") {
                        getAsyncCredentials();
                    } else {
                        getStaticCredentials();
                    }
                } else if (self.credentialProvider) {
                    self.credentialProvider.resolve(function(err, creds) {
                        if (err) {
                            err = credError("Could not load credentials from any providers", err);
                        }
                        self.credentials = creds;
                        finish(err);
                    });
                } else {
                    finish(credError("No credentials to load"));
                }
            },
            getToken: function getToken(callback) {
                var self = this;
                function finish(err) {
                    callback(err, err ? null : self.token);
                }
                function tokenError(msg, err) {
                    return new AWS.util.error(err || new Error(), {
                        code: "TokenError",
                        message: msg,
                        name: "TokenError"
                    });
                }
                function getAsyncToken() {
                    self.token.get(function(err) {
                        if (err) {
                            var msg = "Could not load token from " + self.token.constructor.name;
                            err = tokenError(msg, err);
                        }
                        finish(err);
                    });
                }
                function getStaticToken() {
                    var err = null;
                    if (!self.token.token) {
                        err = tokenError("Missing token");
                    }
                    finish(err);
                }
                if (self.token) {
                    if (typeof self.token.get === "function") {
                        getAsyncToken();
                    } else {
                        getStaticToken();
                    }
                } else if (self.tokenProvider) {
                    self.tokenProvider.resolve(function(err, token) {
                        if (err) {
                            err = tokenError("Could not load token from any providers", err);
                        }
                        self.token = token;
                        finish(err);
                    });
                } else {
                    finish(tokenError("No token to load"));
                }
            },
            update: function update(options, allowUnknownKeys) {
                allowUnknownKeys = allowUnknownKeys || false;
                options = this.extractCredentials(options);
                AWS.util.each.call(this, options, function(key, value) {
                    if (allowUnknownKeys || Object.prototype.hasOwnProperty.call(this.keys, key) || AWS.Service.hasService(key)) {
                        this.set(key, value);
                    }
                });
            },
            loadFromPath: function loadFromPath(path) {
                this.clear();
                var options = JSON.parse(AWS.util.readFileSync(path));
                var fileSystemCreds = new AWS.FileSystemCredentials(path);
                var chain = new AWS.CredentialProviderChain();
                chain.providers.unshift(fileSystemCreds);
                chain.resolve(function(err, creds) {
                    if (err) throw err; else options.credentials = creds;
                });
                this.constructor(options);
                return this;
            },
            clear: function clear() {
                AWS.util.each.call(this, this.keys, function(key) {
                    delete this[key];
                });
                this.set("credentials", undefined);
                this.set("credentialProvider", undefined);
            },
            set: function set(property, value, defaultValue) {
                if (value === undefined) {
                    if (defaultValue === undefined) {
                        defaultValue = this.keys[property];
                    }
                    if (typeof defaultValue === "function") {
                        this[property] = defaultValue.call(this);
                    } else {
                        this[property] = defaultValue;
                    }
                } else if (property === "httpOptions" && this[property]) {
                    this[property] = AWS.util.merge(this[property], value);
                } else {
                    this[property] = value;
                }
            },
            keys: {
                credentials: null,
                credentialProvider: null,
                region: null,
                logger: null,
                apiVersions: {},
                apiVersion: null,
                endpoint: undefined,
                httpOptions: {
                    timeout: 12e4
                },
                maxRetries: undefined,
                maxRedirects: 10,
                paramValidation: true,
                sslEnabled: true,
                s3ForcePathStyle: false,
                s3BucketEndpoint: false,
                s3DisableBodySigning: true,
                s3UsEast1RegionalEndpoint: "legacy",
                s3UseArnRegion: undefined,
                computeChecksums: true,
                convertResponseTypes: true,
                correctClockSkew: false,
                customUserAgent: null,
                dynamoDbCrc32: true,
                systemClockOffset: 0,
                signatureVersion: null,
                signatureCache: true,
                retryDelayOptions: {},
                useAccelerateEndpoint: false,
                clientSideMonitoring: false,
                endpointDiscoveryEnabled: undefined,
                endpointCacheSize: 1e3,
                hostPrefixEnabled: true,
                stsRegionalEndpoints: "legacy",
                useFipsEndpoint: false,
                useDualstackEndpoint: false,
                token: null
            },
            extractCredentials: function extractCredentials(options) {
                if (options.accessKeyId && options.secretAccessKey) {
                    options = AWS.util.copy(options);
                    options.credentials = new AWS.Credentials(options);
                }
                return options;
            },
            setPromisesDependency: function setPromisesDependency(dep) {
                PromisesDependency = dep;
                if (dep === null && typeof Promise === "function") {
                    PromisesDependency = Promise;
                }
                var constructors = [ AWS.Request, AWS.Credentials, AWS.CredentialProviderChain ];
                if (AWS.S3) {
                    constructors.push(AWS.S3);
                    if (AWS.S3.ManagedUpload) {
                        constructors.push(AWS.S3.ManagedUpload);
                    }
                }
                AWS.util.addPromises(constructors, PromisesDependency);
            },
            getPromisesDependency: function getPromisesDependency() {
                return PromisesDependency;
            }
        });
        AWS.config = new AWS.Config();
    }, {
        "./core": 44,
        "./credentials": 45,
        "./credentials/credential_provider_chain": 48
    } ],
    48: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {
            constructor: function CredentialProviderChain(providers) {
                if (providers) {
                    this.providers = providers;
                } else {
                    this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
                }
                this.resolveCallbacks = [];
            },
            resolve: function resolve(callback) {
                var self = this;
                if (self.providers.length === 0) {
                    callback(new Error("No providers"));
                    return self;
                }
                if (self.resolveCallbacks.push(callback) === 1) {
                    var index = 0;
                    var providers = self.providers.slice(0);
                    function resolveNext(err, creds) {
                        if (!err && creds || index === providers.length) {
                            AWS.util.arrayEach(self.resolveCallbacks, function(callback) {
                                callback(err, creds);
                            });
                            self.resolveCallbacks.length = 0;
                            return;
                        }
                        var provider = providers[index++];
                        if (typeof provider === "function") {
                            creds = provider.call();
                        } else {
                            creds = provider;
                        }
                        if (creds.get) {
                            creds.get(function(getErr) {
                                resolveNext(getErr, getErr ? null : creds);
                            });
                        } else {
                            resolveNext(null, creds);
                        }
                    }
                    resolveNext();
                }
                return self;
            }
        });
        AWS.CredentialProviderChain.defaultProviders = [];
        AWS.CredentialProviderChain.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
            this.prototype.resolvePromise = AWS.util.promisifyMethod("resolve", PromiseDependency);
        };
        AWS.CredentialProviderChain.deletePromisesFromClass = function deletePromisesFromClass() {
            delete this.prototype.resolvePromise;
        };
        AWS.util.addPromises(AWS.CredentialProviderChain);
    }, {
        "../core": 44
    } ],
    45: [ function(require, module, exports) {
        var AWS = require("./core");
        AWS.Credentials = AWS.util.inherit({
            constructor: function Credentials() {
                AWS.util.hideProperties(this, [ "secretAccessKey" ]);
                this.expired = false;
                this.expireTime = null;
                this.refreshCallbacks = [];
                if (arguments.length === 1 && typeof arguments[0] === "object") {
                    var creds = arguments[0].credentials || arguments[0];
                    this.accessKeyId = creds.accessKeyId;
                    this.secretAccessKey = creds.secretAccessKey;
                    this.sessionToken = creds.sessionToken;
                } else {
                    this.accessKeyId = arguments[0];
                    this.secretAccessKey = arguments[1];
                    this.sessionToken = arguments[2];
                }
            },
            expiryWindow: 15,
            needsRefresh: function needsRefresh() {
                var currentTime = AWS.util.date.getDate().getTime();
                var adjustedTime = new Date(currentTime + this.expiryWindow * 1e3);
                if (this.expireTime && adjustedTime > this.expireTime) {
                    return true;
                } else {
                    return this.expired || !this.accessKeyId || !this.secretAccessKey;
                }
            },
            get: function get(callback) {
                var self = this;
                if (this.needsRefresh()) {
                    this.refresh(function(err) {
                        if (!err) self.expired = false;
                        if (callback) callback(err);
                    });
                } else if (callback) {
                    callback();
                }
            },
            refresh: function refresh(callback) {
                this.expired = false;
                callback();
            },
            coalesceRefresh: function coalesceRefresh(callback, sync) {
                var self = this;
                if (self.refreshCallbacks.push(callback) === 1) {
                    self.load(function onLoad(err) {
                        AWS.util.arrayEach(self.refreshCallbacks, function(callback) {
                            if (sync) {
                                callback(err);
                            } else {
                                AWS.util.defer(function() {
                                    callback(err);
                                });
                            }
                        });
                        self.refreshCallbacks.length = 0;
                    });
                }
            },
            load: function load(callback) {
                callback();
            }
        });
        AWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {
            this.prototype.getPromise = AWS.util.promisifyMethod("get", PromiseDependency);
            this.prototype.refreshPromise = AWS.util.promisifyMethod("refresh", PromiseDependency);
        };
        AWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {
            delete this.prototype.getPromise;
            delete this.prototype.refreshPromise;
        };
        AWS.util.addPromises(AWS.Credentials);
    }, {
        "./core": 44
    } ],
    32: [ function(require, module, exports) {
        function apiLoader(svc, version) {
            if (!apiLoader.services.hasOwnProperty(svc)) {
                throw new Error("InvalidService: Failed to load api for " + svc);
            }
            return apiLoader.services[svc][version];
        }
        apiLoader.services = {};
        module.exports = apiLoader;
    }, {} ],
    31: [ function(require, module, exports) {
        module.exports = {
            acm: {
                name: "ACM",
                cors: true
            },
            apigateway: {
                name: "APIGateway",
                cors: true
            },
            applicationautoscaling: {
                prefix: "application-autoscaling",
                name: "ApplicationAutoScaling",
                cors: true
            },
            appstream: {
                name: "AppStream"
            },
            autoscaling: {
                name: "AutoScaling",
                cors: true
            },
            batch: {
                name: "Batch"
            },
            budgets: {
                name: "Budgets"
            },
            clouddirectory: {
                name: "CloudDirectory",
                versions: [ "2016-05-10*" ]
            },
            cloudformation: {
                name: "CloudFormation",
                cors: true
            },
            cloudfront: {
                name: "CloudFront",
                versions: [ "2013-05-12*", "2013-11-11*", "2014-05-31*", "2014-10-21*", "2014-11-06*", "2015-04-17*", "2015-07-27*", "2015-09-17*", "2016-01-13*", "2016-01-28*", "2016-08-01*", "2016-08-20*", "2016-09-07*", "2016-09-29*", "2016-11-25*", "2017-03-25*", "2017-10-30*", "2018-06-18*", "2018-11-05*", "2019-03-26*" ],
                cors: true
            },
            cloudhsm: {
                name: "CloudHSM",
                cors: true
            },
            cloudsearch: {
                name: "CloudSearch"
            },
            cloudsearchdomain: {
                name: "CloudSearchDomain"
            },
            cloudtrail: {
                name: "CloudTrail",
                cors: true
            },
            cloudwatch: {
                prefix: "monitoring",
                name: "CloudWatch",
                cors: true
            },
            cloudwatchevents: {
                prefix: "events",
                name: "CloudWatchEvents",
                versions: [ "2014-02-03*" ],
                cors: true
            },
            cloudwatchlogs: {
                prefix: "logs",
                name: "CloudWatchLogs",
                cors: true
            },
            codebuild: {
                name: "CodeBuild",
                cors: true
            },
            codecommit: {
                name: "CodeCommit",
                cors: true
            },
            codedeploy: {
                name: "CodeDeploy",
                cors: true
            },
            codepipeline: {
                name: "CodePipeline",
                cors: true
            },
            cognitoidentity: {
                prefix: "cognito-identity",
                name: "CognitoIdentity",
                cors: true
            },
            cognitoidentityserviceprovider: {
                prefix: "cognito-idp",
                name: "CognitoIdentityServiceProvider",
                cors: true
            },
            cognitosync: {
                prefix: "cognito-sync",
                name: "CognitoSync",
                cors: true
            },
            configservice: {
                prefix: "config",
                name: "ConfigService",
                cors: true
            },
            cur: {
                name: "CUR",
                cors: true
            },
            datapipeline: {
                name: "DataPipeline"
            },
            devicefarm: {
                name: "DeviceFarm",
                cors: true
            },
            directconnect: {
                name: "DirectConnect",
                cors: true
            },
            directoryservice: {
                prefix: "ds",
                name: "DirectoryService"
            },
            discovery: {
                name: "Discovery"
            },
            dms: {
                name: "DMS"
            },
            dynamodb: {
                name: "DynamoDB",
                cors: true
            },
            dynamodbstreams: {
                prefix: "streams.dynamodb",
                name: "DynamoDBStreams",
                cors: true
            },
            ec2: {
                name: "EC2",
                versions: [ "2013-06-15*", "2013-10-15*", "2014-02-01*", "2014-05-01*", "2014-06-15*", "2014-09-01*", "2014-10-01*", "2015-03-01*", "2015-04-15*", "2015-10-01*", "2016-04-01*", "2016-09-15*" ],
                cors: true
            },
            ecr: {
                name: "ECR",
                cors: true
            },
            ecs: {
                name: "ECS",
                cors: true
            },
            efs: {
                prefix: "elasticfilesystem",
                name: "EFS",
                cors: true
            },
            elasticache: {
                name: "ElastiCache",
                versions: [ "2012-11-15*", "2014-03-24*", "2014-07-15*", "2014-09-30*" ],
                cors: true
            },
            elasticbeanstalk: {
                name: "ElasticBeanstalk",
                cors: true
            },
            elb: {
                prefix: "elasticloadbalancing",
                name: "ELB",
                cors: true
            },
            elbv2: {
                prefix: "elasticloadbalancingv2",
                name: "ELBv2",
                cors: true
            },
            emr: {
                prefix: "elasticmapreduce",
                name: "EMR",
                cors: true
            },
            es: {
                name: "ES"
            },
            elastictranscoder: {
                name: "ElasticTranscoder",
                cors: true
            },
            firehose: {
                name: "Firehose",
                cors: true
            },
            gamelift: {
                name: "GameLift",
                cors: true
            },
            glacier: {
                name: "Glacier"
            },
            health: {
                name: "Health"
            },
            iam: {
                name: "IAM",
                cors: true
            },
            importexport: {
                name: "ImportExport"
            },
            inspector: {
                name: "Inspector",
                versions: [ "2015-08-18*" ],
                cors: true
            },
            iot: {
                name: "Iot",
                cors: true
            },
            iotdata: {
                prefix: "iot-data",
                name: "IotData",
                cors: true
            },
            kinesis: {
                name: "Kinesis",
                cors: true
            },
            kinesisanalytics: {
                name: "KinesisAnalytics"
            },
            kms: {
                name: "KMS",
                cors: true
            },
            lambda: {
                name: "Lambda",
                cors: true
            },
            lexruntime: {
                prefix: "runtime.lex",
                name: "LexRuntime",
                cors: true
            },
            lightsail: {
                name: "Lightsail"
            },
            machinelearning: {
                name: "MachineLearning",
                cors: true
            },
            marketplacecommerceanalytics: {
                name: "MarketplaceCommerceAnalytics",
                cors: true
            },
            marketplacemetering: {
                prefix: "meteringmarketplace",
                name: "MarketplaceMetering"
            },
            mturk: {
                prefix: "mturk-requester",
                name: "MTurk",
                cors: true
            },
            mobileanalytics: {
                name: "MobileAnalytics",
                cors: true
            },
            opsworks: {
                name: "OpsWorks",
                cors: true
            },
            opsworkscm: {
                name: "OpsWorksCM"
            },
            organizations: {
                name: "Organizations"
            },
            pinpoint: {
                name: "Pinpoint"
            },
            polly: {
                name: "Polly",
                cors: true
            },
            rds: {
                name: "RDS",
                versions: [ "2014-09-01*" ],
                cors: true
            },
            redshift: {
                name: "Redshift",
                cors: true
            },
            rekognition: {
                name: "Rekognition",
                cors: true
            },
            resourcegroupstaggingapi: {
                name: "ResourceGroupsTaggingAPI"
            },
            route53: {
                name: "Route53",
                cors: true
            },
            route53domains: {
                name: "Route53Domains",
                cors: true
            },
            s3: {
                name: "S3",
                dualstackAvailable: true,
                cors: true
            },
            s3control: {
                name: "S3Control",
                dualstackAvailable: true,
                xmlNoDefaultLists: true
            },
            servicecatalog: {
                name: "ServiceCatalog",
                cors: true
            },
            ses: {
                prefix: "email",
                name: "SES",
                cors: true
            },
            shield: {
                name: "Shield"
            },
            simpledb: {
                prefix: "sdb",
                name: "SimpleDB"
            },
            sms: {
                name: "SMS"
            },
            snowball: {
                name: "Snowball"
            },
            sns: {
                name: "SNS",
                cors: true
            },
            sqs: {
                name: "SQS",
                cors: true
            },
            ssm: {
                name: "SSM",
                cors: true
            },
            storagegateway: {
                name: "StorageGateway",
                cors: true
            },
            stepfunctions: {
                prefix: "states",
                name: "StepFunctions"
            },
            sts: {
                name: "STS",
                cors: true
            },
            support: {
                name: "Support"
            },
            swf: {
                name: "SWF"
            },
            xray: {
                name: "XRay",
                cors: true
            },
            waf: {
                name: "WAF",
                cors: true
            },
            wafregional: {
                prefix: "waf-regional",
                name: "WAFRegional"
            },
            workdocs: {
                name: "WorkDocs",
                cors: true
            },
            workspaces: {
                name: "WorkSpaces"
            },
            codestar: {
                name: "CodeStar"
            },
            lexmodelbuildingservice: {
                prefix: "lex-models",
                name: "LexModelBuildingService",
                cors: true
            },
            marketplaceentitlementservice: {
                prefix: "entitlement.marketplace",
                name: "MarketplaceEntitlementService"
            },
            athena: {
                name: "Athena",
                cors: true
            },
            greengrass: {
                name: "Greengrass"
            },
            dax: {
                name: "DAX"
            },
            migrationhub: {
                prefix: "AWSMigrationHub",
                name: "MigrationHub"
            },
            cloudhsmv2: {
                name: "CloudHSMV2",
                cors: true
            },
            glue: {
                name: "Glue"
            },
            mobile: {
                name: "Mobile"
            },
            pricing: {
                name: "Pricing",
                cors: true
            },
            costexplorer: {
                prefix: "ce",
                name: "CostExplorer",
                cors: true
            },
            mediaconvert: {
                name: "MediaConvert"
            },
            medialive: {
                name: "MediaLive"
            },
            mediapackage: {
                name: "MediaPackage"
            },
            mediastore: {
                name: "MediaStore"
            },
            mediastoredata: {
                prefix: "mediastore-data",
                name: "MediaStoreData",
                cors: true
            },
            appsync: {
                name: "AppSync"
            },
            guardduty: {
                name: "GuardDuty"
            },
            mq: {
                name: "MQ"
            },
            comprehend: {
                name: "Comprehend",
                cors: true
            },
            iotjobsdataplane: {
                prefix: "iot-jobs-data",
                name: "IoTJobsDataPlane"
            },
            kinesisvideoarchivedmedia: {
                prefix: "kinesis-video-archived-media",
                name: "KinesisVideoArchivedMedia",
                cors: true
            },
            kinesisvideomedia: {
                prefix: "kinesis-video-media",
                name: "KinesisVideoMedia",
                cors: true
            },
            kinesisvideo: {
                name: "KinesisVideo",
                cors: true
            },
            sagemakerruntime: {
                prefix: "runtime.sagemaker",
                name: "SageMakerRuntime"
            },
            sagemaker: {
                name: "SageMaker"
            },
            translate: {
                name: "Translate",
                cors: true
            },
            resourcegroups: {
                prefix: "resource-groups",
                name: "ResourceGroups",
                cors: true
            },
            alexaforbusiness: {
                name: "AlexaForBusiness"
            },
            cloud9: {
                name: "Cloud9"
            },
            serverlessapplicationrepository: {
                prefix: "serverlessrepo",
                name: "ServerlessApplicationRepository"
            },
            servicediscovery: {
                name: "ServiceDiscovery"
            },
            workmail: {
                name: "WorkMail"
            },
            autoscalingplans: {
                prefix: "autoscaling-plans",
                name: "AutoScalingPlans"
            },
            transcribeservice: {
                prefix: "transcribe",
                name: "TranscribeService"
            },
            connect: {
                name: "Connect",
                cors: true
            },
            acmpca: {
                prefix: "acm-pca",
                name: "ACMPCA"
            },
            fms: {
                name: "FMS"
            },
            secretsmanager: {
                name: "SecretsManager",
                cors: true
            },
            iotanalytics: {
                name: "IoTAnalytics",
                cors: true
            },
            iot1clickdevicesservice: {
                prefix: "iot1click-devices",
                name: "IoT1ClickDevicesService"
            },
            iot1clickprojects: {
                prefix: "iot1click-projects",
                name: "IoT1ClickProjects"
            },
            pi: {
                name: "PI"
            },
            neptune: {
                name: "Neptune"
            },
            mediatailor: {
                name: "MediaTailor"
            },
            eks: {
                name: "EKS"
            },
            dlm: {
                name: "DLM"
            },
            signer: {
                name: "Signer"
            },
            chime: {
                name: "Chime"
            },
            pinpointemail: {
                prefix: "pinpoint-email",
                name: "PinpointEmail"
            },
            ram: {
                name: "RAM"
            },
            route53resolver: {
                name: "Route53Resolver"
            },
            pinpointsmsvoice: {
                prefix: "sms-voice",
                name: "PinpointSMSVoice"
            },
            quicksight: {
                name: "QuickSight"
            },
            rdsdataservice: {
                prefix: "rds-data",
                name: "RDSDataService"
            },
            amplify: {
                name: "Amplify"
            },
            datasync: {
                name: "DataSync"
            },
            robomaker: {
                name: "RoboMaker"
            },
            transfer: {
                name: "Transfer"
            },
            globalaccelerator: {
                name: "GlobalAccelerator"
            },
            comprehendmedical: {
                name: "ComprehendMedical",
                cors: true
            },
            kinesisanalyticsv2: {
                name: "KinesisAnalyticsV2"
            },
            mediaconnect: {
                name: "MediaConnect"
            },
            fsx: {
                name: "FSx"
            },
            securityhub: {
                name: "SecurityHub"
            },
            appmesh: {
                name: "AppMesh",
                versions: [ "2018-10-01*" ]
            },
            licensemanager: {
                prefix: "license-manager",
                name: "LicenseManager"
            },
            kafka: {
                name: "Kafka"
            },
            apigatewaymanagementapi: {
                name: "ApiGatewayManagementApi"
            },
            apigatewayv2: {
                name: "ApiGatewayV2"
            },
            docdb: {
                name: "DocDB"
            },
            backup: {
                name: "Backup"
            },
            worklink: {
                name: "WorkLink"
            },
            textract: {
                name: "Textract"
            },
            managedblockchain: {
                name: "ManagedBlockchain"
            },
            mediapackagevod: {
                prefix: "mediapackage-vod",
                name: "MediaPackageVod"
            },
            groundstation: {
                name: "GroundStation"
            },
            iotthingsgraph: {
                name: "IoTThingsGraph"
            },
            iotevents: {
                name: "IoTEvents"
            },
            ioteventsdata: {
                prefix: "iotevents-data",
                name: "IoTEventsData"
            },
            personalize: {
                name: "Personalize",
                cors: true
            },
            personalizeevents: {
                prefix: "personalize-events",
                name: "PersonalizeEvents",
                cors: true
            },
            personalizeruntime: {
                prefix: "personalize-runtime",
                name: "PersonalizeRuntime",
                cors: true
            },
            applicationinsights: {
                prefix: "application-insights",
                name: "ApplicationInsights"
            },
            servicequotas: {
                prefix: "service-quotas",
                name: "ServiceQuotas"
            },
            ec2instanceconnect: {
                prefix: "ec2-instance-connect",
                name: "EC2InstanceConnect"
            },
            eventbridge: {
                name: "EventBridge"
            },
            lakeformation: {
                name: "LakeFormation"
            },
            forecastservice: {
                prefix: "forecast",
                name: "ForecastService",
                cors: true
            },
            forecastqueryservice: {
                prefix: "forecastquery",
                name: "ForecastQueryService",
                cors: true
            },
            qldb: {
                name: "QLDB"
            },
            qldbsession: {
                prefix: "qldb-session",
                name: "QLDBSession"
            },
            workmailmessageflow: {
                name: "WorkMailMessageFlow"
            },
            codestarnotifications: {
                prefix: "codestar-notifications",
                name: "CodeStarNotifications"
            },
            savingsplans: {
                name: "SavingsPlans"
            },
            sso: {
                name: "SSO"
            },
            ssooidc: {
                prefix: "sso-oidc",
                name: "SSOOIDC"
            },
            marketplacecatalog: {
                prefix: "marketplace-catalog",
                name: "MarketplaceCatalog",
                cors: true
            },
            dataexchange: {
                name: "DataExchange"
            },
            sesv2: {
                name: "SESV2"
            },
            migrationhubconfig: {
                prefix: "migrationhub-config",
                name: "MigrationHubConfig"
            },
            connectparticipant: {
                name: "ConnectParticipant"
            },
            appconfig: {
                name: "AppConfig"
            },
            iotsecuretunneling: {
                name: "IoTSecureTunneling"
            },
            wafv2: {
                name: "WAFV2"
            },
            elasticinference: {
                prefix: "elastic-inference",
                name: "ElasticInference"
            },
            imagebuilder: {
                name: "Imagebuilder"
            },
            schemas: {
                name: "Schemas"
            },
            accessanalyzer: {
                name: "AccessAnalyzer"
            },
            codegurureviewer: {
                prefix: "codeguru-reviewer",
                name: "CodeGuruReviewer"
            },
            codeguruprofiler: {
                name: "CodeGuruProfiler"
            },
            computeoptimizer: {
                prefix: "compute-optimizer",
                name: "ComputeOptimizer"
            },
            frauddetector: {
                name: "FraudDetector"
            },
            kendra: {
                name: "Kendra"
            },
            networkmanager: {
                name: "NetworkManager"
            },
            outposts: {
                name: "Outposts"
            },
            augmentedairuntime: {
                prefix: "sagemaker-a2i-runtime",
                name: "AugmentedAIRuntime"
            },
            ebs: {
                name: "EBS"
            },
            kinesisvideosignalingchannels: {
                prefix: "kinesis-video-signaling",
                name: "KinesisVideoSignalingChannels",
                cors: true
            },
            detective: {
                name: "Detective"
            },
            codestarconnections: {
                prefix: "codestar-connections",
                name: "CodeStarconnections"
            },
            synthetics: {
                name: "Synthetics"
            },
            iotsitewise: {
                name: "IoTSiteWise"
            },
            macie2: {
                name: "Macie2"
            },
            codeartifact: {
                name: "CodeArtifact"
            },
            honeycode: {
                name: "Honeycode"
            },
            ivs: {
                name: "IVS"
            },
            braket: {
                name: "Braket"
            },
            identitystore: {
                name: "IdentityStore"
            },
            appflow: {
                name: "Appflow"
            },
            redshiftdata: {
                prefix: "redshift-data",
                name: "RedshiftData"
            },
            ssoadmin: {
                prefix: "sso-admin",
                name: "SSOAdmin"
            },
            timestreamquery: {
                prefix: "timestream-query",
                name: "TimestreamQuery"
            },
            timestreamwrite: {
                prefix: "timestream-write",
                name: "TimestreamWrite"
            },
            s3outposts: {
                name: "S3Outposts"
            },
            databrew: {
                name: "DataBrew"
            },
            servicecatalogappregistry: {
                prefix: "servicecatalog-appregistry",
                name: "ServiceCatalogAppRegistry"
            },
            networkfirewall: {
                prefix: "network-firewall",
                name: "NetworkFirewall"
            },
            mwaa: {
                name: "MWAA"
            },
            amplifybackend: {
                name: "AmplifyBackend"
            },
            appintegrations: {
                name: "AppIntegrations"
            },
            connectcontactlens: {
                prefix: "connect-contact-lens",
                name: "ConnectContactLens"
            },
            devopsguru: {
                prefix: "devops-guru",
                name: "DevOpsGuru"
            },
            ecrpublic: {
                prefix: "ecr-public",
                name: "ECRPUBLIC"
            },
            lookoutvision: {
                name: "LookoutVision"
            },
            sagemakerfeaturestoreruntime: {
                prefix: "sagemaker-featurestore-runtime",
                name: "SageMakerFeatureStoreRuntime"
            },
            customerprofiles: {
                prefix: "customer-profiles",
                name: "CustomerProfiles"
            },
            auditmanager: {
                name: "AuditManager"
            },
            emrcontainers: {
                prefix: "emr-containers",
                name: "EMRcontainers"
            },
            healthlake: {
                name: "HealthLake"
            },
            sagemakeredge: {
                prefix: "sagemaker-edge",
                name: "SagemakerEdge"
            },
            amp: {
                name: "Amp",
                cors: true
            },
            greengrassv2: {
                name: "GreengrassV2"
            },
            iotdeviceadvisor: {
                name: "IotDeviceAdvisor"
            },
            iotfleethub: {
                name: "IoTFleetHub"
            },
            iotwireless: {
                name: "IoTWireless"
            },
            location: {
                name: "Location",
                cors: true
            },
            wellarchitected: {
                name: "WellArchitected"
            },
            lexmodelsv2: {
                prefix: "models.lex.v2",
                name: "LexModelsV2"
            },
            lexruntimev2: {
                prefix: "runtime.lex.v2",
                name: "LexRuntimeV2",
                cors: true
            },
            fis: {
                name: "Fis"
            },
            lookoutmetrics: {
                name: "LookoutMetrics"
            },
            mgn: {
                name: "Mgn"
            },
            lookoutequipment: {
                name: "LookoutEquipment"
            },
            nimble: {
                name: "Nimble"
            },
            finspace: {
                name: "Finspace"
            },
            finspacedata: {
                prefix: "finspace-data",
                name: "Finspacedata"
            },
            ssmcontacts: {
                prefix: "ssm-contacts",
                name: "SSMContacts"
            },
            ssmincidents: {
                prefix: "ssm-incidents",
                name: "SSMIncidents"
            },
            applicationcostprofiler: {
                name: "ApplicationCostProfiler"
            },
            apprunner: {
                name: "AppRunner"
            },
            proton: {
                name: "Proton"
            },
            route53recoverycluster: {
                prefix: "route53-recovery-cluster",
                name: "Route53RecoveryCluster"
            },
            route53recoverycontrolconfig: {
                prefix: "route53-recovery-control-config",
                name: "Route53RecoveryControlConfig"
            },
            route53recoveryreadiness: {
                prefix: "route53-recovery-readiness",
                name: "Route53RecoveryReadiness"
            },
            chimesdkidentity: {
                prefix: "chime-sdk-identity",
                name: "ChimeSDKIdentity"
            },
            chimesdkmessaging: {
                prefix: "chime-sdk-messaging",
                name: "ChimeSDKMessaging"
            },
            snowdevicemanagement: {
                prefix: "snow-device-management",
                name: "SnowDeviceManagement"
            },
            memorydb: {
                name: "MemoryDB"
            },
            opensearch: {
                name: "OpenSearch"
            },
            kafkaconnect: {
                name: "KafkaConnect"
            },
            voiceid: {
                prefix: "voice-id",
                name: "VoiceID"
            },
            wisdom: {
                name: "Wisdom"
            },
            account: {
                name: "Account"
            },
            cloudcontrol: {
                name: "CloudControl"
            },
            grafana: {
                name: "Grafana"
            },
            panorama: {
                name: "Panorama"
            },
            chimesdkmeetings: {
                prefix: "chime-sdk-meetings",
                name: "ChimeSDKMeetings"
            },
            resiliencehub: {
                name: "Resiliencehub"
            },
            migrationhubstrategy: {
                name: "MigrationHubStrategy"
            },
            appconfigdata: {
                name: "AppConfigData"
            },
            drs: {
                name: "Drs"
            },
            migrationhubrefactorspaces: {
                prefix: "migration-hub-refactor-spaces",
                name: "MigrationHubRefactorSpaces"
            },
            evidently: {
                name: "Evidently"
            },
            inspector2: {
                name: "Inspector2"
            },
            rbin: {
                name: "Rbin"
            },
            rum: {
                name: "RUM"
            },
            backupgateway: {
                prefix: "backup-gateway",
                name: "BackupGateway"
            },
            iottwinmaker: {
                name: "IoTTwinMaker"
            },
            workspacesweb: {
                prefix: "workspaces-web",
                name: "WorkSpacesWeb"
            },
            amplifyuibuilder: {
                name: "AmplifyUIBuilder"
            },
            keyspaces: {
                name: "Keyspaces"
            },
            billingconductor: {
                name: "Billingconductor"
            },
            pinpointsmsvoicev2: {
                prefix: "pinpoint-sms-voice-v2",
                name: "PinpointSMSVoiceV2"
            },
            ivschat: {
                name: "Ivschat"
            },
            chimesdkmediapipelines: {
                prefix: "chime-sdk-media-pipelines",
                name: "ChimeSDKMediaPipelines"
            },
            emrserverless: {
                prefix: "emr-serverless",
                name: "EMRServerless"
            },
            m2: {
                name: "M2"
            },
            connectcampaigns: {
                name: "ConnectCampaigns"
            },
            redshiftserverless: {
                prefix: "redshift-serverless",
                name: "RedshiftServerless"
            },
            rolesanywhere: {
                name: "RolesAnywhere"
            },
            licensemanagerusersubscriptions: {
                prefix: "license-manager-user-subscriptions",
                name: "LicenseManagerUserSubscriptions"
            },
            backupstorage: {
                name: "BackupStorage"
            },
            privatenetworks: {
                name: "PrivateNetworks"
            },
            supportapp: {
                prefix: "support-app",
                name: "SupportApp"
            },
            controltower: {
                name: "ControlTower"
            },
            iotfleetwise: {
                name: "IoTFleetWise"
            },
            migrationhuborchestrator: {
                name: "MigrationHubOrchestrator"
            },
            connectcases: {
                name: "ConnectCases"
            },
            resourceexplorer2: {
                prefix: "resource-explorer-2",
                name: "ResourceExplorer2"
            },
            scheduler: {
                name: "Scheduler"
            },
            chimesdkvoice: {
                prefix: "chime-sdk-voice",
                name: "ChimeSDKVoice"
            },
            iotroborunner: {
                prefix: "iot-roborunner",
                name: "IoTRoboRunner"
            },
            ssmsap: {
                prefix: "ssm-sap",
                name: "SsmSap"
            },
            oam: {
                name: "OAM"
            },
            arczonalshift: {
                prefix: "arc-zonal-shift",
                name: "ARCZonalShift"
            },
            omics: {
                name: "Omics"
            },
            opensearchserverless: {
                name: "OpenSearchServerless"
            },
            securitylake: {
                name: "SecurityLake"
            },
            simspaceweaver: {
                name: "SimSpaceWeaver"
            },
            docdbelastic: {
                prefix: "docdb-elastic",
                name: "DocDBElastic"
            },
            sagemakergeospatial: {
                prefix: "sagemaker-geospatial",
                name: "SageMakerGeospatial"
            },
            codecatalyst: {
                name: "CodeCatalyst"
            },
            pipes: {
                name: "Pipes"
            },
            sagemakermetrics: {
                prefix: "sagemaker-metrics",
                name: "SageMakerMetrics"
            },
            kinesisvideowebrtcstorage: {
                prefix: "kinesis-video-webrtc-storage",
                name: "KinesisVideoWebRTCStorage"
            },
            licensemanagerlinuxsubscriptions: {
                prefix: "license-manager-linux-subscriptions",
                name: "LicenseManagerLinuxSubscriptions"
            },
            kendraranking: {
                prefix: "kendra-ranking",
                name: "KendraRanking"
            },
            cleanrooms: {
                name: "CleanRooms"
            },
            cloudtraildata: {
                prefix: "cloudtrail-data",
                name: "CloudTrailData"
            },
            tnb: {
                name: "Tnb"
            },
            internetmonitor: {
                name: "InternetMonitor"
            },
            ivsrealtime: {
                prefix: "ivs-realtime",
                name: "IVSRealTime"
            },
            vpclattice: {
                prefix: "vpc-lattice",
                name: "VPCLattice"
            },
            osis: {
                name: "OSIS"
            },
            mediapackagev2: {
                name: "MediaPackageV2"
            },
            paymentcryptography: {
                prefix: "payment-cryptography",
                name: "PaymentCryptography"
            },
            paymentcryptographydata: {
                prefix: "payment-cryptography-data",
                name: "PaymentCryptographyData"
            },
            codegurusecurity: {
                prefix: "codeguru-security",
                name: "CodeGuruSecurity"
            },
            verifiedpermissions: {
                name: "VerifiedPermissions"
            },
            appfabric: {
                name: "AppFabric"
            },
            medicalimaging: {
                prefix: "medical-imaging",
                name: "MedicalImaging"
            },
            entityresolution: {
                name: "EntityResolution"
            },
            managedblockchainquery: {
                prefix: "managedblockchain-query",
                name: "ManagedBlockchainQuery"
            },
            neptunedata: {
                name: "Neptunedata"
            },
            pcaconnectorad: {
                prefix: "pca-connector-ad",
                name: "PcaConnectorAd"
            },
            bedrock: {
                name: "Bedrock"
            },
            bedrockruntime: {
                prefix: "bedrock-runtime",
                name: "BedrockRuntime"
            },
            datazone: {
                name: "DataZone"
            },
            launchwizard: {
                prefix: "launch-wizard",
                name: "LaunchWizard"
            },
            trustedadvisor: {
                name: "TrustedAdvisor"
            },
            cloudfrontkeyvaluestore: {
                prefix: "cloudfront-keyvaluestore",
                name: "CloudFrontKeyValueStore"
            },
            inspectorscan: {
                prefix: "inspector-scan",
                name: "InspectorScan"
            },
            bcmdataexports: {
                prefix: "bcm-data-exports",
                name: "BCMDataExports"
            },
            costoptimizationhub: {
                prefix: "cost-optimization-hub",
                name: "CostOptimizationHub"
            },
            eksauth: {
                prefix: "eks-auth",
                name: "EKSAuth"
            },
            freetier: {
                name: "FreeTier"
            },
            repostspace: {
                name: "Repostspace"
            },
            workspacesthinclient: {
                prefix: "workspaces-thin-client",
                name: "WorkSpacesThinClient"
            },
            b2bi: {
                name: "B2bi"
            },
            bedrockagent: {
                prefix: "bedrock-agent",
                name: "BedrockAgent"
            },
            bedrockagentruntime: {
                prefix: "bedrock-agent-runtime",
                name: "BedrockAgentRuntime"
            },
            qbusiness: {
                name: "QBusiness"
            },
            qconnect: {
                name: "QConnect"
            },
            cleanroomsml: {
                name: "CleanRoomsML"
            },
            marketplaceagreement: {
                prefix: "marketplace-agreement",
                name: "MarketplaceAgreement"
            },
            marketplacedeployment: {
                prefix: "marketplace-deployment",
                name: "MarketplaceDeployment"
            },
            neptunegraph: {
                prefix: "neptune-graph",
                name: "NeptuneGraph"
            }
        };
    }, {} ],
    22: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        Object.defineProperty(exports, "v1", {
            enumerable: true,
            get: function() {
                return _v.default;
            }
        });
        Object.defineProperty(exports, "v3", {
            enumerable: true,
            get: function() {
                return _v2.default;
            }
        });
        Object.defineProperty(exports, "v4", {
            enumerable: true,
            get: function() {
                return _v3.default;
            }
        });
        Object.defineProperty(exports, "v5", {
            enumerable: true,
            get: function() {
                return _v4.default;
            }
        });
        var _v = _interopRequireDefault(require("./v1.js"));
        var _v2 = _interopRequireDefault(require("./v3.js"));
        var _v3 = _interopRequireDefault(require("./v4.js"));
        var _v4 = _interopRequireDefault(require("./v5.js"));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
    }, {
        "./v1.js": 26,
        "./v3.js": 27,
        "./v4.js": 29,
        "./v5.js": 30
    } ],
    30: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        var _v = _interopRequireDefault(require("./v35.js"));
        var _sha = _interopRequireDefault(require("./sha1.js"));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const v5 = (0, _v.default)("v5", 80, _sha.default);
        var _default = v5;
        exports.default = _default;
    }, {
        "./sha1.js": 25,
        "./v35.js": 28
    } ],
    25: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        function f(s, x, y, z) {
            switch (s) {
              case 0:
                return x & y ^ ~x & z;

              case 1:
                return x ^ y ^ z;

              case 2:
                return x & y ^ x & z ^ y & z;

              case 3:
                return x ^ y ^ z;
            }
        }
        function ROTL(x, n) {
            return x << n | x >>> 32 - n;
        }
        function sha1(bytes) {
            var K = [ 1518500249, 1859775393, 2400959708, 3395469782 ];
            var H = [ 1732584193, 4023233417, 2562383102, 271733878, 3285377520 ];
            if (typeof bytes == "string") {
                var msg = unescape(encodeURIComponent(bytes));
                bytes = new Array(msg.length);
                for (var i = 0; i < msg.length; i++) bytes[i] = msg.charCodeAt(i);
            }
            bytes.push(128);
            var l = bytes.length / 4 + 2;
            var N = Math.ceil(l / 16);
            var M = new Array(N);
            for (var i = 0; i < N; i++) {
                M[i] = new Array(16);
                for (var j = 0; j < 16; j++) {
                    M[i][j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
                }
            }
            M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
            M[N - 1][14] = Math.floor(M[N - 1][14]);
            M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
            for (var i = 0; i < N; i++) {
                var W = new Array(80);
                for (var t = 0; t < 16; t++) W[t] = M[i][t];
                for (var t = 16; t < 80; t++) {
                    W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
                }
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                for (var t = 0; t < 80; t++) {
                    var s = Math.floor(t / 20);
                    var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
                    e = d;
                    d = c;
                    c = ROTL(b, 30) >>> 0;
                    b = a;
                    a = T;
                }
                H[0] = H[0] + a >>> 0;
                H[1] = H[1] + b >>> 0;
                H[2] = H[2] + c >>> 0;
                H[3] = H[3] + d >>> 0;
                H[4] = H[4] + e >>> 0;
            }
            return [ H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255 ];
        }
        var _default = sha1;
        exports.default = _default;
    }, {} ],
    29: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        var _rng = _interopRequireDefault(require("./rng.js"));
        var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid.js"));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function v4(options, buf, offset) {
            var i = buf && offset || 0;
            if (typeof options == "string") {
                buf = options === "binary" ? new Array(16) : null;
                options = null;
            }
            options = options || {};
            var rnds = options.random || (options.rng || _rng.default)();
            rnds[6] = rnds[6] & 15 | 64;
            rnds[8] = rnds[8] & 63 | 128;
            if (buf) {
                for (var ii = 0; ii < 16; ++ii) {
                    buf[i + ii] = rnds[ii];
                }
            }
            return buf || (0, _bytesToUuid.default)(rnds);
        }
        var _default = v4;
        exports.default = _default;
    }, {
        "./bytesToUuid.js": 21,
        "./rng.js": 24
    } ],
    27: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        var _v = _interopRequireDefault(require("./v35.js"));
        var _md = _interopRequireDefault(require("./md5.js"));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        const v3 = (0, _v.default)("v3", 48, _md.default);
        var _default = v3;
        exports.default = _default;
    }, {
        "./md5.js": 23,
        "./v35.js": 28
    } ],
    28: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = _default;
        exports.URL = exports.DNS = void 0;
        var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid.js"));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        function uuidToBytes(uuid) {
            var bytes = [];
            uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) {
                bytes.push(parseInt(hex, 16));
            });
            return bytes;
        }
        function stringToBytes(str) {
            str = unescape(encodeURIComponent(str));
            var bytes = new Array(str.length);
            for (var i = 0; i < str.length; i++) {
                bytes[i] = str.charCodeAt(i);
            }
            return bytes;
        }
        const DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
        exports.DNS = DNS;
        const URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
        exports.URL = URL;
        function _default(name, version, hashfunc) {
            var generateUUID = function(value, namespace, buf, offset) {
                var off = buf && offset || 0;
                if (typeof value == "string") value = stringToBytes(value);
                if (typeof namespace == "string") namespace = uuidToBytes(namespace);
                if (!Array.isArray(value)) throw TypeError("value must be an array of bytes");
                if (!Array.isArray(namespace) || namespace.length !== 16) throw TypeError("namespace must be uuid string or an Array of 16 byte values");
                var bytes = hashfunc(namespace.concat(value));
                bytes[6] = bytes[6] & 15 | version;
                bytes[8] = bytes[8] & 63 | 128;
                if (buf) {
                    for (var idx = 0; idx < 16; ++idx) {
                        buf[off + idx] = bytes[idx];
                    }
                }
                return buf || (0, _bytesToUuid.default)(bytes);
            };
            try {
                generateUUID.name = name;
            } catch (err) {}
            generateUUID.DNS = DNS;
            generateUUID.URL = URL;
            return generateUUID;
        }
    }, {
        "./bytesToUuid.js": 21
    } ],
    23: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        function md5(bytes) {
            if (typeof bytes == "string") {
                var msg = unescape(encodeURIComponent(bytes));
                bytes = new Array(msg.length);
                for (var i = 0; i < msg.length; i++) bytes[i] = msg.charCodeAt(i);
            }
            return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
        }
        function md5ToHexEncodedArray(input) {
            var i;
            var x;
            var output = [];
            var length32 = input.length * 32;
            var hexTab = "0123456789abcdef";
            var hex;
            for (i = 0; i < length32; i += 8) {
                x = input[i >> 5] >>> i % 32 & 255;
                hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
                output.push(hex);
            }
            return output;
        }
        function wordsToMd5(x, len) {
            x[len >> 5] |= 128 << len % 32;
            x[(len + 64 >>> 9 << 4) + 14] = len;
            var i;
            var olda;
            var oldb;
            var oldc;
            var oldd;
            var a = 1732584193;
            var b = -271733879;
            var c = -1732584194;
            var d = 271733878;
            for (i = 0; i < x.length; i += 16) {
                olda = a;
                oldb = b;
                oldc = c;
                oldd = d;
                a = md5ff(a, b, c, d, x[i], 7, -680876936);
                d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
                c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
                b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
                a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
                d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
                c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
                b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
                a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
                d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
                c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
                b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
                a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
                d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
                c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
                b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
                a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
                d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
                c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
                b = md5gg(b, c, d, a, x[i], 20, -373897302);
                a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
                d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
                c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
                b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
                a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
                d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
                c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
                b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
                a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
                d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
                c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
                b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
                a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
                d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
                c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
                b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
                a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
                d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
                c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
                b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
                a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
                d = md5hh(d, a, b, c, x[i], 11, -358537222);
                c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
                b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
                a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
                d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
                c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
                b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
                a = md5ii(a, b, c, d, x[i], 6, -198630844);
                d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
                c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
                b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
                a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
                d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
                c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
                b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
                a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
                d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
                c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
                b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
                a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
                d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
                c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
                b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
                a = safeAdd(a, olda);
                b = safeAdd(b, oldb);
                c = safeAdd(c, oldc);
                d = safeAdd(d, oldd);
            }
            return [ a, b, c, d ];
        }
        function bytesToWords(input) {
            var i;
            var output = [];
            output[(input.length >> 2) - 1] = undefined;
            for (i = 0; i < output.length; i += 1) {
                output[i] = 0;
            }
            var length8 = input.length * 8;
            for (i = 0; i < length8; i += 8) {
                output[i >> 5] |= (input[i / 8] & 255) << i % 32;
            }
            return output;
        }
        function safeAdd(x, y) {
            var lsw = (x & 65535) + (y & 65535);
            var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
            return msw << 16 | lsw & 65535;
        }
        function bitRotateLeft(num, cnt) {
            return num << cnt | num >>> 32 - cnt;
        }
        function md5cmn(q, a, b, x, s, t) {
            return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
        }
        function md5ff(a, b, c, d, x, s, t) {
            return md5cmn(b & c | ~b & d, a, b, x, s, t);
        }
        function md5gg(a, b, c, d, x, s, t) {
            return md5cmn(b & d | c & ~d, a, b, x, s, t);
        }
        function md5hh(a, b, c, d, x, s, t) {
            return md5cmn(b ^ c ^ d, a, b, x, s, t);
        }
        function md5ii(a, b, c, d, x, s, t) {
            return md5cmn(c ^ (b | ~d), a, b, x, s, t);
        }
        var _default = md5;
        exports.default = _default;
    }, {} ],
    26: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        var _rng = _interopRequireDefault(require("./rng.js"));
        var _bytesToUuid = _interopRequireDefault(require("./bytesToUuid.js"));
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {
                default: obj
            };
        }
        var _nodeId;
        var _clockseq;
        var _lastMSecs = 0;
        var _lastNSecs = 0;
        function v1(options, buf, offset) {
            var i = buf && offset || 0;
            var b = buf || [];
            options = options || {};
            var node = options.node || _nodeId;
            var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
            if (node == null || clockseq == null) {
                var seedBytes = options.random || (options.rng || _rng.default)();
                if (node == null) {
                    node = _nodeId = [ seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5] ];
                }
                if (clockseq == null) {
                    clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
                }
            }
            var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
            var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
            var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
            if (dt < 0 && options.clockseq === undefined) {
                clockseq = clockseq + 1 & 16383;
            }
            if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
                nsecs = 0;
            }
            if (nsecs >= 1e4) {
                throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
            }
            _lastMSecs = msecs;
            _lastNSecs = nsecs;
            _clockseq = clockseq;
            msecs += 122192928e5;
            var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
            b[i++] = tl >>> 24 & 255;
            b[i++] = tl >>> 16 & 255;
            b[i++] = tl >>> 8 & 255;
            b[i++] = tl & 255;
            var tmh = msecs / 4294967296 * 1e4 & 268435455;
            b[i++] = tmh >>> 8 & 255;
            b[i++] = tmh & 255;
            b[i++] = tmh >>> 24 & 15 | 16;
            b[i++] = tmh >>> 16 & 255;
            b[i++] = clockseq >>> 8 | 128;
            b[i++] = clockseq & 255;
            for (var n = 0; n < 6; ++n) {
                b[i + n] = node[n];
            }
            return buf ? buf : (0, _bytesToUuid.default)(b);
        }
        var _default = v1;
        exports.default = _default;
    }, {
        "./bytesToUuid.js": 21,
        "./rng.js": 24
    } ],
    24: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = rng;
        var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
        var rnds8 = new Uint8Array(16);
        function rng() {
            if (!getRandomValues) {
                throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
            }
            return getRandomValues(rnds8);
        }
    }, {} ],
    21: [ function(require, module, exports) {
        "use strict";
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        exports.default = void 0;
        var byteToHex = [];
        for (var i = 0; i < 256; ++i) {
            byteToHex[i] = (i + 256).toString(16).substr(1);
        }
        function bytesToUuid(buf, offset) {
            var i = offset || 0;
            var bth = byteToHex;
            return [ bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]] ].join("");
        }
        var _default = bytesToUuid;
        exports.default = _default;
    }, {} ],
    19: [ function(require, module, exports) {
        (function(setImmediate, clearImmediate) {
            (function() {
                var nextTick = require("process/browser.js").nextTick;
                var apply = Function.prototype.apply;
                var slice = Array.prototype.slice;
                var immediateIds = {};
                var nextImmediateId = 0;
                exports.setTimeout = function() {
                    return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
                };
                exports.setInterval = function() {
                    return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
                };
                exports.clearTimeout = exports.clearInterval = function(timeout) {
                    timeout.close();
                };
                function Timeout(id, clearFn) {
                    this._id = id;
                    this._clearFn = clearFn;
                }
                Timeout.prototype.unref = Timeout.prototype.ref = function() {};
                Timeout.prototype.close = function() {
                    this._clearFn.call(window, this._id);
                };
                exports.enroll = function(item, msecs) {
                    clearTimeout(item._idleTimeoutId);
                    item._idleTimeout = msecs;
                };
                exports.unenroll = function(item) {
                    clearTimeout(item._idleTimeoutId);
                    item._idleTimeout = -1;
                };
                exports._unrefActive = exports.active = function(item) {
                    clearTimeout(item._idleTimeoutId);
                    var msecs = item._idleTimeout;
                    if (msecs >= 0) {
                        item._idleTimeoutId = setTimeout(function onTimeout() {
                            if (item._onTimeout) item._onTimeout();
                        }, msecs);
                    }
                };
                exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
                    var id = nextImmediateId++;
                    var args = arguments.length < 2 ? false : slice.call(arguments, 1);
                    immediateIds[id] = true;
                    nextTick(function onNextTick() {
                        if (immediateIds[id]) {
                            if (args) {
                                fn.apply(null, args);
                            } else {
                                fn.call(null);
                            }
                            exports.clearImmediate(id);
                        }
                    });
                    return id;
                };
                exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
                    delete immediateIds[id];
                };
            }).call(this);
        }).call(this, require("timers").setImmediate, require("timers").clearImmediate);
    }, {
        "process/browser.js": 11,
        timers: 19
    } ],
    10: [ function(require, module, exports) {
        (function(exports) {
            "use strict";
            function isArray(obj) {
                if (obj !== null) {
                    return Object.prototype.toString.call(obj) === "[object Array]";
                } else {
                    return false;
                }
            }
            function isObject(obj) {
                if (obj !== null) {
                    return Object.prototype.toString.call(obj) === "[object Object]";
                } else {
                    return false;
                }
            }
            function strictDeepEqual(first, second) {
                if (first === second) {
                    return true;
                }
                var firstType = Object.prototype.toString.call(first);
                if (firstType !== Object.prototype.toString.call(second)) {
                    return false;
                }
                if (isArray(first) === true) {
                    if (first.length !== second.length) {
                        return false;
                    }
                    for (var i = 0; i < first.length; i++) {
                        if (strictDeepEqual(first[i], second[i]) === false) {
                            return false;
                        }
                    }
                    return true;
                }
                if (isObject(first) === true) {
                    var keysSeen = {};
                    for (var key in first) {
                        if (hasOwnProperty.call(first, key)) {
                            if (strictDeepEqual(first[key], second[key]) === false) {
                                return false;
                            }
                            keysSeen[key] = true;
                        }
                    }
                    for (var key2 in second) {
                        if (hasOwnProperty.call(second, key2)) {
                            if (keysSeen[key2] !== true) {
                                return false;
                            }
                        }
                    }
                    return true;
                }
                return false;
            }
            function isFalse(obj) {
                if (obj === "" || obj === false || obj === null) {
                    return true;
                } else if (isArray(obj) && obj.length === 0) {
                    return true;
                } else if (isObject(obj)) {
                    for (var key in obj) {
                        if (obj.hasOwnProperty(key)) {
                            return false;
                        }
                    }
                    return true;
                } else {
                    return false;
                }
            }
            function objValues(obj) {
                var keys = Object.keys(obj);
                var values = [];
                for (var i = 0; i < keys.length; i++) {
                    values.push(obj[keys[i]]);
                }
                return values;
            }
            function merge(a, b) {
                var merged = {};
                for (var key in a) {
                    merged[key] = a[key];
                }
                for (var key2 in b) {
                    merged[key2] = b[key2];
                }
                return merged;
            }
            var trimLeft;
            if (typeof String.prototype.trimLeft === "function") {
                trimLeft = function(str) {
                    return str.trimLeft();
                };
            } else {
                trimLeft = function(str) {
                    return str.match(/^\s*(.*)/)[1];
                };
            }
            var TYPE_NUMBER = 0;
            var TYPE_ANY = 1;
            var TYPE_STRING = 2;
            var TYPE_ARRAY = 3;
            var TYPE_OBJECT = 4;
            var TYPE_BOOLEAN = 5;
            var TYPE_EXPREF = 6;
            var TYPE_NULL = 7;
            var TYPE_ARRAY_NUMBER = 8;
            var TYPE_ARRAY_STRING = 9;
            var TYPE_NAME_TABLE = {
                0: "number",
                1: "any",
                2: "string",
                3: "array",
                4: "object",
                5: "boolean",
                6: "expression",
                7: "null",
                8: "Array<number>",
                9: "Array<string>"
            };
            var TOK_EOF = "EOF";
            var TOK_UNQUOTEDIDENTIFIER = "UnquotedIdentifier";
            var TOK_QUOTEDIDENTIFIER = "QuotedIdentifier";
            var TOK_RBRACKET = "Rbracket";
            var TOK_RPAREN = "Rparen";
            var TOK_COMMA = "Comma";
            var TOK_COLON = "Colon";
            var TOK_RBRACE = "Rbrace";
            var TOK_NUMBER = "Number";
            var TOK_CURRENT = "Current";
            var TOK_EXPREF = "Expref";
            var TOK_PIPE = "Pipe";
            var TOK_OR = "Or";
            var TOK_AND = "And";
            var TOK_EQ = "EQ";
            var TOK_GT = "GT";
            var TOK_LT = "LT";
            var TOK_GTE = "GTE";
            var TOK_LTE = "LTE";
            var TOK_NE = "NE";
            var TOK_FLATTEN = "Flatten";
            var TOK_STAR = "Star";
            var TOK_FILTER = "Filter";
            var TOK_DOT = "Dot";
            var TOK_NOT = "Not";
            var TOK_LBRACE = "Lbrace";
            var TOK_LBRACKET = "Lbracket";
            var TOK_LPAREN = "Lparen";
            var TOK_LITERAL = "Literal";
            var basicTokens = {
                ".": TOK_DOT,
                "*": TOK_STAR,
                ",": TOK_COMMA,
                ":": TOK_COLON,
                "{": TOK_LBRACE,
                "}": TOK_RBRACE,
                "]": TOK_RBRACKET,
                "(": TOK_LPAREN,
                ")": TOK_RPAREN,
                "@": TOK_CURRENT
            };
            var operatorStartToken = {
                "<": true,
                ">": true,
                "=": true,
                "!": true
            };
            var skipChars = {
                " ": true,
                "\t": true,
                "\n": true
            };
            function isAlpha(ch) {
                return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch === "_";
            }
            function isNum(ch) {
                return ch >= "0" && ch <= "9" || ch === "-";
            }
            function isAlphaNum(ch) {
                return ch >= "a" && ch <= "z" || ch >= "A" && ch <= "Z" || ch >= "0" && ch <= "9" || ch === "_";
            }
            function Lexer() {}
            Lexer.prototype = {
                tokenize: function(stream) {
                    var tokens = [];
                    this._current = 0;
                    var start;
                    var identifier;
                    var token;
                    while (this._current < stream.length) {
                        if (isAlpha(stream[this._current])) {
                            start = this._current;
                            identifier = this._consumeUnquotedIdentifier(stream);
                            tokens.push({
                                type: TOK_UNQUOTEDIDENTIFIER,
                                value: identifier,
                                start: start
                            });
                        } else if (basicTokens[stream[this._current]] !== undefined) {
                            tokens.push({
                                type: basicTokens[stream[this._current]],
                                value: stream[this._current],
                                start: this._current
                            });
                            this._current++;
                        } else if (isNum(stream[this._current])) {
                            token = this._consumeNumber(stream);
                            tokens.push(token);
                        } else if (stream[this._current] === "[") {
                            token = this._consumeLBracket(stream);
                            tokens.push(token);
                        } else if (stream[this._current] === '"') {
                            start = this._current;
                            identifier = this._consumeQuotedIdentifier(stream);
                            tokens.push({
                                type: TOK_QUOTEDIDENTIFIER,
                                value: identifier,
                                start: start
                            });
                        } else if (stream[this._current] === "'") {
                            start = this._current;
                            identifier = this._consumeRawStringLiteral(stream);
                            tokens.push({
                                type: TOK_LITERAL,
                                value: identifier,
                                start: start
                            });
                        } else if (stream[this._current] === "`") {
                            start = this._current;
                            var literal = this._consumeLiteral(stream);
                            tokens.push({
                                type: TOK_LITERAL,
                                value: literal,
                                start: start
                            });
                        } else if (operatorStartToken[stream[this._current]] !== undefined) {
                            tokens.push(this._consumeOperator(stream));
                        } else if (skipChars[stream[this._current]] !== undefined) {
                            this._current++;
                        } else if (stream[this._current] === "&") {
                            start = this._current;
                            this._current++;
                            if (stream[this._current] === "&") {
                                this._current++;
                                tokens.push({
                                    type: TOK_AND,
                                    value: "&&",
                                    start: start
                                });
                            } else {
                                tokens.push({
                                    type: TOK_EXPREF,
                                    value: "&",
                                    start: start
                                });
                            }
                        } else if (stream[this._current] === "|") {
                            start = this._current;
                            this._current++;
                            if (stream[this._current] === "|") {
                                this._current++;
                                tokens.push({
                                    type: TOK_OR,
                                    value: "||",
                                    start: start
                                });
                            } else {
                                tokens.push({
                                    type: TOK_PIPE,
                                    value: "|",
                                    start: start
                                });
                            }
                        } else {
                            var error = new Error("Unknown character:" + stream[this._current]);
                            error.name = "LexerError";
                            throw error;
                        }
                    }
                    return tokens;
                },
                _consumeUnquotedIdentifier: function(stream) {
                    var start = this._current;
                    this._current++;
                    while (this._current < stream.length && isAlphaNum(stream[this._current])) {
                        this._current++;
                    }
                    return stream.slice(start, this._current);
                },
                _consumeQuotedIdentifier: function(stream) {
                    var start = this._current;
                    this._current++;
                    var maxLength = stream.length;
                    while (stream[this._current] !== '"' && this._current < maxLength) {
                        var current = this._current;
                        if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === '"')) {
                            current += 2;
                        } else {
                            current++;
                        }
                        this._current = current;
                    }
                    this._current++;
                    return JSON.parse(stream.slice(start, this._current));
                },
                _consumeRawStringLiteral: function(stream) {
                    var start = this._current;
                    this._current++;
                    var maxLength = stream.length;
                    while (stream[this._current] !== "'" && this._current < maxLength) {
                        var current = this._current;
                        if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === "'")) {
                            current += 2;
                        } else {
                            current++;
                        }
                        this._current = current;
                    }
                    this._current++;
                    var literal = stream.slice(start + 1, this._current - 1);
                    return literal.replace("\\'", "'");
                },
                _consumeNumber: function(stream) {
                    var start = this._current;
                    this._current++;
                    var maxLength = stream.length;
                    while (isNum(stream[this._current]) && this._current < maxLength) {
                        this._current++;
                    }
                    var value = parseInt(stream.slice(start, this._current));
                    return {
                        type: TOK_NUMBER,
                        value: value,
                        start: start
                    };
                },
                _consumeLBracket: function(stream) {
                    var start = this._current;
                    this._current++;
                    if (stream[this._current] === "?") {
                        this._current++;
                        return {
                            type: TOK_FILTER,
                            value: "[?",
                            start: start
                        };
                    } else if (stream[this._current] === "]") {
                        this._current++;
                        return {
                            type: TOK_FLATTEN,
                            value: "[]",
                            start: start
                        };
                    } else {
                        return {
                            type: TOK_LBRACKET,
                            value: "[",
                            start: start
                        };
                    }
                },
                _consumeOperator: function(stream) {
                    var start = this._current;
                    var startingChar = stream[start];
                    this._current++;
                    if (startingChar === "!") {
                        if (stream[this._current] === "=") {
                            this._current++;
                            return {
                                type: TOK_NE,
                                value: "!=",
                                start: start
                            };
                        } else {
                            return {
                                type: TOK_NOT,
                                value: "!",
                                start: start
                            };
                        }
                    } else if (startingChar === "<") {
                        if (stream[this._current] === "=") {
                            this._current++;
                            return {
                                type: TOK_LTE,
                                value: "<=",
                                start: start
                            };
                        } else {
                            return {
                                type: TOK_LT,
                                value: "<",
                                start: start
                            };
                        }
                    } else if (startingChar === ">") {
                        if (stream[this._current] === "=") {
                            this._current++;
                            return {
                                type: TOK_GTE,
                                value: ">=",
                                start: start
                            };
                        } else {
                            return {
                                type: TOK_GT,
                                value: ">",
                                start: start
                            };
                        }
                    } else if (startingChar === "=") {
                        if (stream[this._current] === "=") {
                            this._current++;
                            return {
                                type: TOK_EQ,
                                value: "==",
                                start: start
                            };
                        }
                    }
                },
                _consumeLiteral: function(stream) {
                    this._current++;
                    var start = this._current;
                    var maxLength = stream.length;
                    var literal;
                    while (stream[this._current] !== "`" && this._current < maxLength) {
                        var current = this._current;
                        if (stream[current] === "\\" && (stream[current + 1] === "\\" || stream[current + 1] === "`")) {
                            current += 2;
                        } else {
                            current++;
                        }
                        this._current = current;
                    }
                    var literalString = trimLeft(stream.slice(start, this._current));
                    literalString = literalString.replace("\\`", "`");
                    if (this._looksLikeJSON(literalString)) {
                        literal = JSON.parse(literalString);
                    } else {
                        literal = JSON.parse('"' + literalString + '"');
                    }
                    this._current++;
                    return literal;
                },
                _looksLikeJSON: function(literalString) {
                    var startingChars = '[{"';
                    var jsonLiterals = [ "true", "false", "null" ];
                    var numberLooking = "-0123456789";
                    if (literalString === "") {
                        return false;
                    } else if (startingChars.indexOf(literalString[0]) >= 0) {
                        return true;
                    } else if (jsonLiterals.indexOf(literalString) >= 0) {
                        return true;
                    } else if (numberLooking.indexOf(literalString[0]) >= 0) {
                        try {
                            JSON.parse(literalString);
                            return true;
                        } catch (ex) {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
            };
            var bindingPower = {};
            bindingPower[TOK_EOF] = 0;
            bindingPower[TOK_UNQUOTEDIDENTIFIER] = 0;
            bindingPower[TOK_QUOTEDIDENTIFIER] = 0;
            bindingPower[TOK_RBRACKET] = 0;
            bindingPower[TOK_RPAREN] = 0;
            bindingPower[TOK_COMMA] = 0;
            bindingPower[TOK_RBRACE] = 0;
            bindingPower[TOK_NUMBER] = 0;
            bindingPower[TOK_CURRENT] = 0;
            bindingPower[TOK_EXPREF] = 0;
            bindingPower[TOK_PIPE] = 1;
            bindingPower[TOK_OR] = 2;
            bindingPower[TOK_AND] = 3;
            bindingPower[TOK_EQ] = 5;
            bindingPower[TOK_GT] = 5;
            bindingPower[TOK_LT] = 5;
            bindingPower[TOK_GTE] = 5;
            bindingPower[TOK_LTE] = 5;
            bindingPower[TOK_NE] = 5;
            bindingPower[TOK_FLATTEN] = 9;
            bindingPower[TOK_STAR] = 20;
            bindingPower[TOK_FILTER] = 21;
            bindingPower[TOK_DOT] = 40;
            bindingPower[TOK_NOT] = 45;
            bindingPower[TOK_LBRACE] = 50;
            bindingPower[TOK_LBRACKET] = 55;
            bindingPower[TOK_LPAREN] = 60;
            function Parser() {}
            Parser.prototype = {
                parse: function(expression) {
                    this._loadTokens(expression);
                    this.index = 0;
                    var ast = this.expression(0);
                    if (this._lookahead(0) !== TOK_EOF) {
                        var t = this._lookaheadToken(0);
                        var error = new Error("Unexpected token type: " + t.type + ", value: " + t.value);
                        error.name = "ParserError";
                        throw error;
                    }
                    return ast;
                },
                _loadTokens: function(expression) {
                    var lexer = new Lexer();
                    var tokens = lexer.tokenize(expression);
                    tokens.push({
                        type: TOK_EOF,
                        value: "",
                        start: expression.length
                    });
                    this.tokens = tokens;
                },
                expression: function(rbp) {
                    var leftToken = this._lookaheadToken(0);
                    this._advance();
                    var left = this.nud(leftToken);
                    var currentToken = this._lookahead(0);
                    while (rbp < bindingPower[currentToken]) {
                        this._advance();
                        left = this.led(currentToken, left);
                        currentToken = this._lookahead(0);
                    }
                    return left;
                },
                _lookahead: function(number) {
                    return this.tokens[this.index + number].type;
                },
                _lookaheadToken: function(number) {
                    return this.tokens[this.index + number];
                },
                _advance: function() {
                    this.index++;
                },
                nud: function(token) {
                    var left;
                    var right;
                    var expression;
                    switch (token.type) {
                      case TOK_LITERAL:
                        return {
                            type: "Literal",
                            value: token.value
                        };

                      case TOK_UNQUOTEDIDENTIFIER:
                        return {
                            type: "Field",
                            name: token.value
                        };

                      case TOK_QUOTEDIDENTIFIER:
                        var node = {
                            type: "Field",
                            name: token.value
                        };
                        if (this._lookahead(0) === TOK_LPAREN) {
                            throw new Error("Quoted identifier not allowed for function names.");
                        }
                        return node;

                      case TOK_NOT:
                        right = this.expression(bindingPower.Not);
                        return {
                            type: "NotExpression",
                            children: [ right ]
                        };

                      case TOK_STAR:
                        left = {
                            type: "Identity"
                        };
                        right = null;
                        if (this._lookahead(0) === TOK_RBRACKET) {
                            right = {
                                type: "Identity"
                            };
                        } else {
                            right = this._parseProjectionRHS(bindingPower.Star);
                        }
                        return {
                            type: "ValueProjection",
                            children: [ left, right ]
                        };

                      case TOK_FILTER:
                        return this.led(token.type, {
                            type: "Identity"
                        });

                      case TOK_LBRACE:
                        return this._parseMultiselectHash();

                      case TOK_FLATTEN:
                        left = {
                            type: TOK_FLATTEN,
                            children: [ {
                                type: "Identity"
                            } ]
                        };
                        right = this._parseProjectionRHS(bindingPower.Flatten);
                        return {
                            type: "Projection",
                            children: [ left, right ]
                        };

                      case TOK_LBRACKET:
                        if (this._lookahead(0) === TOK_NUMBER || this._lookahead(0) === TOK_COLON) {
                            right = this._parseIndexExpression();
                            return this._projectIfSlice({
                                type: "Identity"
                            }, right);
                        } else if (this._lookahead(0) === TOK_STAR && this._lookahead(1) === TOK_RBRACKET) {
                            this._advance();
                            this._advance();
                            right = this._parseProjectionRHS(bindingPower.Star);
                            return {
                                type: "Projection",
                                children: [ {
                                    type: "Identity"
                                }, right ]
                            };
                        }
                        return this._parseMultiselectList();

                      case TOK_CURRENT:
                        return {
                            type: TOK_CURRENT
                        };

                      case TOK_EXPREF:
                        expression = this.expression(bindingPower.Expref);
                        return {
                            type: "ExpressionReference",
                            children: [ expression ]
                        };

                      case TOK_LPAREN:
                        var args = [];
                        while (this._lookahead(0) !== TOK_RPAREN) {
                            if (this._lookahead(0) === TOK_CURRENT) {
                                expression = {
                                    type: TOK_CURRENT
                                };
                                this._advance();
                            } else {
                                expression = this.expression(0);
                            }
                            args.push(expression);
                        }
                        this._match(TOK_RPAREN);
                        return args[0];

                      default:
                        this._errorToken(token);
                    }
                },
                led: function(tokenName, left) {
                    var right;
                    switch (tokenName) {
                      case TOK_DOT:
                        var rbp = bindingPower.Dot;
                        if (this._lookahead(0) !== TOK_STAR) {
                            right = this._parseDotRHS(rbp);
                            return {
                                type: "Subexpression",
                                children: [ left, right ]
                            };
                        }
                        this._advance();
                        right = this._parseProjectionRHS(rbp);
                        return {
                            type: "ValueProjection",
                            children: [ left, right ]
                        };

                      case TOK_PIPE:
                        right = this.expression(bindingPower.Pipe);
                        return {
                            type: TOK_PIPE,
                            children: [ left, right ]
                        };

                      case TOK_OR:
                        right = this.expression(bindingPower.Or);
                        return {
                            type: "OrExpression",
                            children: [ left, right ]
                        };

                      case TOK_AND:
                        right = this.expression(bindingPower.And);
                        return {
                            type: "AndExpression",
                            children: [ left, right ]
                        };

                      case TOK_LPAREN:
                        var name = left.name;
                        var args = [];
                        var expression, node;
                        while (this._lookahead(0) !== TOK_RPAREN) {
                            if (this._lookahead(0) === TOK_CURRENT) {
                                expression = {
                                    type: TOK_CURRENT
                                };
                                this._advance();
                            } else {
                                expression = this.expression(0);
                            }
                            if (this._lookahead(0) === TOK_COMMA) {
                                this._match(TOK_COMMA);
                            }
                            args.push(expression);
                        }
                        this._match(TOK_RPAREN);
                        node = {
                            type: "Function",
                            name: name,
                            children: args
                        };
                        return node;

                      case TOK_FILTER:
                        var condition = this.expression(0);
                        this._match(TOK_RBRACKET);
                        if (this._lookahead(0) === TOK_FLATTEN) {
                            right = {
                                type: "Identity"
                            };
                        } else {
                            right = this._parseProjectionRHS(bindingPower.Filter);
                        }
                        return {
                            type: "FilterProjection",
                            children: [ left, right, condition ]
                        };

                      case TOK_FLATTEN:
                        var leftNode = {
                            type: TOK_FLATTEN,
                            children: [ left ]
                        };
                        var rightNode = this._parseProjectionRHS(bindingPower.Flatten);
                        return {
                            type: "Projection",
                            children: [ leftNode, rightNode ]
                        };

                      case TOK_EQ:
                      case TOK_NE:
                      case TOK_GT:
                      case TOK_GTE:
                      case TOK_LT:
                      case TOK_LTE:
                        return this._parseComparator(left, tokenName);

                      case TOK_LBRACKET:
                        var token = this._lookaheadToken(0);
                        if (token.type === TOK_NUMBER || token.type === TOK_COLON) {
                            right = this._parseIndexExpression();
                            return this._projectIfSlice(left, right);
                        }
                        this._match(TOK_STAR);
                        this._match(TOK_RBRACKET);
                        right = this._parseProjectionRHS(bindingPower.Star);
                        return {
                            type: "Projection",
                            children: [ left, right ]
                        };

                      default:
                        this._errorToken(this._lookaheadToken(0));
                    }
                },
                _match: function(tokenType) {
                    if (this._lookahead(0) === tokenType) {
                        this._advance();
                    } else {
                        var t = this._lookaheadToken(0);
                        var error = new Error("Expected " + tokenType + ", got: " + t.type);
                        error.name = "ParserError";
                        throw error;
                    }
                },
                _errorToken: function(token) {
                    var error = new Error("Invalid token (" + token.type + '): "' + token.value + '"');
                    error.name = "ParserError";
                    throw error;
                },
                _parseIndexExpression: function() {
                    if (this._lookahead(0) === TOK_COLON || this._lookahead(1) === TOK_COLON) {
                        return this._parseSliceExpression();
                    } else {
                        var node = {
                            type: "Index",
                            value: this._lookaheadToken(0).value
                        };
                        this._advance();
                        this._match(TOK_RBRACKET);
                        return node;
                    }
                },
                _projectIfSlice: function(left, right) {
                    var indexExpr = {
                        type: "IndexExpression",
                        children: [ left, right ]
                    };
                    if (right.type === "Slice") {
                        return {
                            type: "Projection",
                            children: [ indexExpr, this._parseProjectionRHS(bindingPower.Star) ]
                        };
                    } else {
                        return indexExpr;
                    }
                },
                _parseSliceExpression: function() {
                    var parts = [ null, null, null ];
                    var index = 0;
                    var currentToken = this._lookahead(0);
                    while (currentToken !== TOK_RBRACKET && index < 3) {
                        if (currentToken === TOK_COLON) {
                            index++;
                            this._advance();
                        } else if (currentToken === TOK_NUMBER) {
                            parts[index] = this._lookaheadToken(0).value;
                            this._advance();
                        } else {
                            var t = this._lookahead(0);
                            var error = new Error("Syntax error, unexpected token: " + t.value + "(" + t.type + ")");
                            error.name = "Parsererror";
                            throw error;
                        }
                        currentToken = this._lookahead(0);
                    }
                    this._match(TOK_RBRACKET);
                    return {
                        type: "Slice",
                        children: parts
                    };
                },
                _parseComparator: function(left, comparator) {
                    var right = this.expression(bindingPower[comparator]);
                    return {
                        type: "Comparator",
                        name: comparator,
                        children: [ left, right ]
                    };
                },
                _parseDotRHS: function(rbp) {
                    var lookahead = this._lookahead(0);
                    var exprTokens = [ TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER, TOK_STAR ];
                    if (exprTokens.indexOf(lookahead) >= 0) {
                        return this.expression(rbp);
                    } else if (lookahead === TOK_LBRACKET) {
                        this._match(TOK_LBRACKET);
                        return this._parseMultiselectList();
                    } else if (lookahead === TOK_LBRACE) {
                        this._match(TOK_LBRACE);
                        return this._parseMultiselectHash();
                    }
                },
                _parseProjectionRHS: function(rbp) {
                    var right;
                    if (bindingPower[this._lookahead(0)] < 10) {
                        right = {
                            type: "Identity"
                        };
                    } else if (this._lookahead(0) === TOK_LBRACKET) {
                        right = this.expression(rbp);
                    } else if (this._lookahead(0) === TOK_FILTER) {
                        right = this.expression(rbp);
                    } else if (this._lookahead(0) === TOK_DOT) {
                        this._match(TOK_DOT);
                        right = this._parseDotRHS(rbp);
                    } else {
                        var t = this._lookaheadToken(0);
                        var error = new Error("Sytanx error, unexpected token: " + t.value + "(" + t.type + ")");
                        error.name = "ParserError";
                        throw error;
                    }
                    return right;
                },
                _parseMultiselectList: function() {
                    var expressions = [];
                    while (this._lookahead(0) !== TOK_RBRACKET) {
                        var expression = this.expression(0);
                        expressions.push(expression);
                        if (this._lookahead(0) === TOK_COMMA) {
                            this._match(TOK_COMMA);
                            if (this._lookahead(0) === TOK_RBRACKET) {
                                throw new Error("Unexpected token Rbracket");
                            }
                        }
                    }
                    this._match(TOK_RBRACKET);
                    return {
                        type: "MultiSelectList",
                        children: expressions
                    };
                },
                _parseMultiselectHash: function() {
                    var pairs = [];
                    var identifierTypes = [ TOK_UNQUOTEDIDENTIFIER, TOK_QUOTEDIDENTIFIER ];
                    var keyToken, keyName, value, node;
                    for (;;) {
                        keyToken = this._lookaheadToken(0);
                        if (identifierTypes.indexOf(keyToken.type) < 0) {
                            throw new Error("Expecting an identifier token, got: " + keyToken.type);
                        }
                        keyName = keyToken.value;
                        this._advance();
                        this._match(TOK_COLON);
                        value = this.expression(0);
                        node = {
                            type: "KeyValuePair",
                            name: keyName,
                            value: value
                        };
                        pairs.push(node);
                        if (this._lookahead(0) === TOK_COMMA) {
                            this._match(TOK_COMMA);
                        } else if (this._lookahead(0) === TOK_RBRACE) {
                            this._match(TOK_RBRACE);
                            break;
                        }
                    }
                    return {
                        type: "MultiSelectHash",
                        children: pairs
                    };
                }
            };
            function TreeInterpreter(runtime) {
                this.runtime = runtime;
            }
            TreeInterpreter.prototype = {
                search: function(node, value) {
                    return this.visit(node, value);
                },
                visit: function(node, value) {
                    var matched, current, result, first, second, field, left, right, collected, i;
                    switch (node.type) {
                      case "Field":
                        if (value !== null && isObject(value)) {
                            field = value[node.name];
                            if (field === undefined) {
                                return null;
                            } else {
                                return field;
                            }
                        }
                        return null;

                      case "Subexpression":
                        result = this.visit(node.children[0], value);
                        for (i = 1; i < node.children.length; i++) {
                            result = this.visit(node.children[1], result);
                            if (result === null) {
                                return null;
                            }
                        }
                        return result;

                      case "IndexExpression":
                        left = this.visit(node.children[0], value);
                        right = this.visit(node.children[1], left);
                        return right;

                      case "Index":
                        if (!isArray(value)) {
                            return null;
                        }
                        var index = node.value;
                        if (index < 0) {
                            index = value.length + index;
                        }
                        result = value[index];
                        if (result === undefined) {
                            result = null;
                        }
                        return result;

                      case "Slice":
                        if (!isArray(value)) {
                            return null;
                        }
                        var sliceParams = node.children.slice(0);
                        var computed = this.computeSliceParams(value.length, sliceParams);
                        var start = computed[0];
                        var stop = computed[1];
                        var step = computed[2];
                        result = [];
                        if (step > 0) {
                            for (i = start; i < stop; i += step) {
                                result.push(value[i]);
                            }
                        } else {
                            for (i = start; i > stop; i += step) {
                                result.push(value[i]);
                            }
                        }
                        return result;

                      case "Projection":
                        var base = this.visit(node.children[0], value);
                        if (!isArray(base)) {
                            return null;
                        }
                        collected = [];
                        for (i = 0; i < base.length; i++) {
                            current = this.visit(node.children[1], base[i]);
                            if (current !== null) {
                                collected.push(current);
                            }
                        }
                        return collected;

                      case "ValueProjection":
                        base = this.visit(node.children[0], value);
                        if (!isObject(base)) {
                            return null;
                        }
                        collected = [];
                        var values = objValues(base);
                        for (i = 0; i < values.length; i++) {
                            current = this.visit(node.children[1], values[i]);
                            if (current !== null) {
                                collected.push(current);
                            }
                        }
                        return collected;

                      case "FilterProjection":
                        base = this.visit(node.children[0], value);
                        if (!isArray(base)) {
                            return null;
                        }
                        var filtered = [];
                        var finalResults = [];
                        for (i = 0; i < base.length; i++) {
                            matched = this.visit(node.children[2], base[i]);
                            if (!isFalse(matched)) {
                                filtered.push(base[i]);
                            }
                        }
                        for (var j = 0; j < filtered.length; j++) {
                            current = this.visit(node.children[1], filtered[j]);
                            if (current !== null) {
                                finalResults.push(current);
                            }
                        }
                        return finalResults;

                      case "Comparator":
                        first = this.visit(node.children[0], value);
                        second = this.visit(node.children[1], value);
                        switch (node.name) {
                          case TOK_EQ:
                            result = strictDeepEqual(first, second);
                            break;

                          case TOK_NE:
                            result = !strictDeepEqual(first, second);
                            break;

                          case TOK_GT:
                            result = first > second;
                            break;

                          case TOK_GTE:
                            result = first >= second;
                            break;

                          case TOK_LT:
                            result = first < second;
                            break;

                          case TOK_LTE:
                            result = first <= second;
                            break;

                          default:
                            throw new Error("Unknown comparator: " + node.name);
                        }
                        return result;

                      case TOK_FLATTEN:
                        var original = this.visit(node.children[0], value);
                        if (!isArray(original)) {
                            return null;
                        }
                        var merged = [];
                        for (i = 0; i < original.length; i++) {
                            current = original[i];
                            if (isArray(current)) {
                                merged.push.apply(merged, current);
                            } else {
                                merged.push(current);
                            }
                        }
                        return merged;

                      case "Identity":
                        return value;

                      case "MultiSelectList":
                        if (value === null) {
                            return null;
                        }
                        collected = [];
                        for (i = 0; i < node.children.length; i++) {
                            collected.push(this.visit(node.children[i], value));
                        }
                        return collected;

                      case "MultiSelectHash":
                        if (value === null) {
                            return null;
                        }
                        collected = {};
                        var child;
                        for (i = 0; i < node.children.length; i++) {
                            child = node.children[i];
                            collected[child.name] = this.visit(child.value, value);
                        }
                        return collected;

                      case "OrExpression":
                        matched = this.visit(node.children[0], value);
                        if (isFalse(matched)) {
                            matched = this.visit(node.children[1], value);
                        }
                        return matched;

                      case "AndExpression":
                        first = this.visit(node.children[0], value);
                        if (isFalse(first) === true) {
                            return first;
                        }
                        return this.visit(node.children[1], value);

                      case "NotExpression":
                        first = this.visit(node.children[0], value);
                        return isFalse(first);

                      case "Literal":
                        return node.value;

                      case TOK_PIPE:
                        left = this.visit(node.children[0], value);
                        return this.visit(node.children[1], left);

                      case TOK_CURRENT:
                        return value;

                      case "Function":
                        var resolvedArgs = [];
                        for (i = 0; i < node.children.length; i++) {
                            resolvedArgs.push(this.visit(node.children[i], value));
                        }
                        return this.runtime.callFunction(node.name, resolvedArgs);

                      case "ExpressionReference":
                        var refNode = node.children[0];
                        refNode.jmespathType = TOK_EXPREF;
                        return refNode;

                      default:
                        throw new Error("Unknown node type: " + node.type);
                    }
                },
                computeSliceParams: function(arrayLength, sliceParams) {
                    var start = sliceParams[0];
                    var stop = sliceParams[1];
                    var step = sliceParams[2];
                    var computed = [ null, null, null ];
                    if (step === null) {
                        step = 1;
                    } else if (step === 0) {
                        var error = new Error("Invalid slice, step cannot be 0");
                        error.name = "RuntimeError";
                        throw error;
                    }
                    var stepValueNegative = step < 0 ? true : false;
                    if (start === null) {
                        start = stepValueNegative ? arrayLength - 1 : 0;
                    } else {
                        start = this.capSliceRange(arrayLength, start, step);
                    }
                    if (stop === null) {
                        stop = stepValueNegative ? -1 : arrayLength;
                    } else {
                        stop = this.capSliceRange(arrayLength, stop, step);
                    }
                    computed[0] = start;
                    computed[1] = stop;
                    computed[2] = step;
                    return computed;
                },
                capSliceRange: function(arrayLength, actualValue, step) {
                    if (actualValue < 0) {
                        actualValue += arrayLength;
                        if (actualValue < 0) {
                            actualValue = step < 0 ? -1 : 0;
                        }
                    } else if (actualValue >= arrayLength) {
                        actualValue = step < 0 ? arrayLength - 1 : arrayLength;
                    }
                    return actualValue;
                }
            };
            function Runtime(interpreter) {
                this._interpreter = interpreter;
                this.functionTable = {
                    abs: {
                        _func: this._functionAbs,
                        _signature: [ {
                            types: [ TYPE_NUMBER ]
                        } ]
                    },
                    avg: {
                        _func: this._functionAvg,
                        _signature: [ {
                            types: [ TYPE_ARRAY_NUMBER ]
                        } ]
                    },
                    ceil: {
                        _func: this._functionCeil,
                        _signature: [ {
                            types: [ TYPE_NUMBER ]
                        } ]
                    },
                    contains: {
                        _func: this._functionContains,
                        _signature: [ {
                            types: [ TYPE_STRING, TYPE_ARRAY ]
                        }, {
                            types: [ TYPE_ANY ]
                        } ]
                    },
                    ends_with: {
                        _func: this._functionEndsWith,
                        _signature: [ {
                            types: [ TYPE_STRING ]
                        }, {
                            types: [ TYPE_STRING ]
                        } ]
                    },
                    floor: {
                        _func: this._functionFloor,
                        _signature: [ {
                            types: [ TYPE_NUMBER ]
                        } ]
                    },
                    length: {
                        _func: this._functionLength,
                        _signature: [ {
                            types: [ TYPE_STRING, TYPE_ARRAY, TYPE_OBJECT ]
                        } ]
                    },
                    map: {
                        _func: this._functionMap,
                        _signature: [ {
                            types: [ TYPE_EXPREF ]
                        }, {
                            types: [ TYPE_ARRAY ]
                        } ]
                    },
                    max: {
                        _func: this._functionMax,
                        _signature: [ {
                            types: [ TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING ]
                        } ]
                    },
                    merge: {
                        _func: this._functionMerge,
                        _signature: [ {
                            types: [ TYPE_OBJECT ],
                            variadic: true
                        } ]
                    },
                    max_by: {
                        _func: this._functionMaxBy,
                        _signature: [ {
                            types: [ TYPE_ARRAY ]
                        }, {
                            types: [ TYPE_EXPREF ]
                        } ]
                    },
                    sum: {
                        _func: this._functionSum,
                        _signature: [ {
                            types: [ TYPE_ARRAY_NUMBER ]
                        } ]
                    },
                    starts_with: {
                        _func: this._functionStartsWith,
                        _signature: [ {
                            types: [ TYPE_STRING ]
                        }, {
                            types: [ TYPE_STRING ]
                        } ]
                    },
                    min: {
                        _func: this._functionMin,
                        _signature: [ {
                            types: [ TYPE_ARRAY_NUMBER, TYPE_ARRAY_STRING ]
                        } ]
                    },
                    min_by: {
                        _func: this._functionMinBy,
                        _signature: [ {
                            types: [ TYPE_ARRAY ]
                        }, {
                            types: [ TYPE_EXPREF ]
                        } ]
                    },
                    type: {
                        _func: this._functionType,
                        _signature: [ {
                            types: [ TYPE_ANY ]
                        } ]
                    },
                    keys: {
                        _func: this._functionKeys,
                        _signature: [ {
                            types: [ TYPE_OBJECT ]
                        } ]
                    },
                    values: {
                        _func: this._functionValues,
                        _signature: [ {
                            types: [ TYPE_OBJECT ]
                        } ]
                    },
                    sort: {
                        _func: this._functionSort,
                        _signature: [ {
                            types: [ TYPE_ARRAY_STRING, TYPE_ARRAY_NUMBER ]
                        } ]
                    },
                    sort_by: {
                        _func: this._functionSortBy,
                        _signature: [ {
                            types: [ TYPE_ARRAY ]
                        }, {
                            types: [ TYPE_EXPREF ]
                        } ]
                    },
                    join: {
                        _func: this._functionJoin,
                        _signature: [ {
                            types: [ TYPE_STRING ]
                        }, {
                            types: [ TYPE_ARRAY_STRING ]
                        } ]
                    },
                    reverse: {
                        _func: this._functionReverse,
                        _signature: [ {
                            types: [ TYPE_STRING, TYPE_ARRAY ]
                        } ]
                    },
                    to_array: {
                        _func: this._functionToArray,
                        _signature: [ {
                            types: [ TYPE_ANY ]
                        } ]
                    },
                    to_string: {
                        _func: this._functionToString,
                        _signature: [ {
                            types: [ TYPE_ANY ]
                        } ]
                    },
                    to_number: {
                        _func: this._functionToNumber,
                        _signature: [ {
                            types: [ TYPE_ANY ]
                        } ]
                    },
                    not_null: {
                        _func: this._functionNotNull,
                        _signature: [ {
                            types: [ TYPE_ANY ],
                            variadic: true
                        } ]
                    }
                };
            }
            Runtime.prototype = {
                callFunction: function(name, resolvedArgs) {
                    var functionEntry = this.functionTable[name];
                    if (functionEntry === undefined) {
                        throw new Error("Unknown function: " + name + "()");
                    }
                    this._validateArgs(name, resolvedArgs, functionEntry._signature);
                    return functionEntry._func.call(this, resolvedArgs);
                },
                _validateArgs: function(name, args, signature) {
                    var pluralized;
                    if (signature[signature.length - 1].variadic) {
                        if (args.length < signature.length) {
                            pluralized = signature.length === 1 ? " argument" : " arguments";
                            throw new Error("ArgumentError: " + name + "() " + "takes at least" + signature.length + pluralized + " but received " + args.length);
                        }
                    } else if (args.length !== signature.length) {
                        pluralized = signature.length === 1 ? " argument" : " arguments";
                        throw new Error("ArgumentError: " + name + "() " + "takes " + signature.length + pluralized + " but received " + args.length);
                    }
                    var currentSpec;
                    var actualType;
                    var typeMatched;
                    for (var i = 0; i < signature.length; i++) {
                        typeMatched = false;
                        currentSpec = signature[i].types;
                        actualType = this._getTypeName(args[i]);
                        for (var j = 0; j < currentSpec.length; j++) {
                            if (this._typeMatches(actualType, currentSpec[j], args[i])) {
                                typeMatched = true;
                                break;
                            }
                        }
                        if (!typeMatched) {
                            var expected = currentSpec.map(function(typeIdentifier) {
                                return TYPE_NAME_TABLE[typeIdentifier];
                            }).join(",");
                            throw new Error("TypeError: " + name + "() " + "expected argument " + (i + 1) + " to be type " + expected + " but received type " + TYPE_NAME_TABLE[actualType] + " instead.");
                        }
                    }
                },
                _typeMatches: function(actual, expected, argValue) {
                    if (expected === TYPE_ANY) {
                        return true;
                    }
                    if (expected === TYPE_ARRAY_STRING || expected === TYPE_ARRAY_NUMBER || expected === TYPE_ARRAY) {
                        if (expected === TYPE_ARRAY) {
                            return actual === TYPE_ARRAY;
                        } else if (actual === TYPE_ARRAY) {
                            var subtype;
                            if (expected === TYPE_ARRAY_NUMBER) {
                                subtype = TYPE_NUMBER;
                            } else if (expected === TYPE_ARRAY_STRING) {
                                subtype = TYPE_STRING;
                            }
                            for (var i = 0; i < argValue.length; i++) {
                                if (!this._typeMatches(this._getTypeName(argValue[i]), subtype, argValue[i])) {
                                    return false;
                                }
                            }
                            return true;
                        }
                    } else {
                        return actual === expected;
                    }
                },
                _getTypeName: function(obj) {
                    switch (Object.prototype.toString.call(obj)) {
                      case "[object String]":
                        return TYPE_STRING;

                      case "[object Number]":
                        return TYPE_NUMBER;

                      case "[object Array]":
                        return TYPE_ARRAY;

                      case "[object Boolean]":
                        return TYPE_BOOLEAN;

                      case "[object Null]":
                        return TYPE_NULL;

                      case "[object Object]":
                        if (obj.jmespathType === TOK_EXPREF) {
                            return TYPE_EXPREF;
                        } else {
                            return TYPE_OBJECT;
                        }
                    }
                },
                _functionStartsWith: function(resolvedArgs) {
                    return resolvedArgs[0].lastIndexOf(resolvedArgs[1]) === 0;
                },
                _functionEndsWith: function(resolvedArgs) {
                    var searchStr = resolvedArgs[0];
                    var suffix = resolvedArgs[1];
                    return searchStr.indexOf(suffix, searchStr.length - suffix.length) !== -1;
                },
                _functionReverse: function(resolvedArgs) {
                    var typeName = this._getTypeName(resolvedArgs[0]);
                    if (typeName === TYPE_STRING) {
                        var originalStr = resolvedArgs[0];
                        var reversedStr = "";
                        for (var i = originalStr.length - 1; i >= 0; i--) {
                            reversedStr += originalStr[i];
                        }
                        return reversedStr;
                    } else {
                        var reversedArray = resolvedArgs[0].slice(0);
                        reversedArray.reverse();
                        return reversedArray;
                    }
                },
                _functionAbs: function(resolvedArgs) {
                    return Math.abs(resolvedArgs[0]);
                },
                _functionCeil: function(resolvedArgs) {
                    return Math.ceil(resolvedArgs[0]);
                },
                _functionAvg: function(resolvedArgs) {
                    var sum = 0;
                    var inputArray = resolvedArgs[0];
                    for (var i = 0; i < inputArray.length; i++) {
                        sum += inputArray[i];
                    }
                    return sum / inputArray.length;
                },
                _functionContains: function(resolvedArgs) {
                    return resolvedArgs[0].indexOf(resolvedArgs[1]) >= 0;
                },
                _functionFloor: function(resolvedArgs) {
                    return Math.floor(resolvedArgs[0]);
                },
                _functionLength: function(resolvedArgs) {
                    if (!isObject(resolvedArgs[0])) {
                        return resolvedArgs[0].length;
                    } else {
                        return Object.keys(resolvedArgs[0]).length;
                    }
                },
                _functionMap: function(resolvedArgs) {
                    var mapped = [];
                    var interpreter = this._interpreter;
                    var exprefNode = resolvedArgs[0];
                    var elements = resolvedArgs[1];
                    for (var i = 0; i < elements.length; i++) {
                        mapped.push(interpreter.visit(exprefNode, elements[i]));
                    }
                    return mapped;
                },
                _functionMerge: function(resolvedArgs) {
                    var merged = {};
                    for (var i = 0; i < resolvedArgs.length; i++) {
                        var current = resolvedArgs[i];
                        for (var key in current) {
                            merged[key] = current[key];
                        }
                    }
                    return merged;
                },
                _functionMax: function(resolvedArgs) {
                    if (resolvedArgs[0].length > 0) {
                        var typeName = this._getTypeName(resolvedArgs[0][0]);
                        if (typeName === TYPE_NUMBER) {
                            return Math.max.apply(Math, resolvedArgs[0]);
                        } else {
                            var elements = resolvedArgs[0];
                            var maxElement = elements[0];
                            for (var i = 1; i < elements.length; i++) {
                                if (maxElement.localeCompare(elements[i]) < 0) {
                                    maxElement = elements[i];
                                }
                            }
                            return maxElement;
                        }
                    } else {
                        return null;
                    }
                },
                _functionMin: function(resolvedArgs) {
                    if (resolvedArgs[0].length > 0) {
                        var typeName = this._getTypeName(resolvedArgs[0][0]);
                        if (typeName === TYPE_NUMBER) {
                            return Math.min.apply(Math, resolvedArgs[0]);
                        } else {
                            var elements = resolvedArgs[0];
                            var minElement = elements[0];
                            for (var i = 1; i < elements.length; i++) {
                                if (elements[i].localeCompare(minElement) < 0) {
                                    minElement = elements[i];
                                }
                            }
                            return minElement;
                        }
                    } else {
                        return null;
                    }
                },
                _functionSum: function(resolvedArgs) {
                    var sum = 0;
                    var listToSum = resolvedArgs[0];
                    for (var i = 0; i < listToSum.length; i++) {
                        sum += listToSum[i];
                    }
                    return sum;
                },
                _functionType: function(resolvedArgs) {
                    switch (this._getTypeName(resolvedArgs[0])) {
                      case TYPE_NUMBER:
                        return "number";

                      case TYPE_STRING:
                        return "string";

                      case TYPE_ARRAY:
                        return "array";

                      case TYPE_OBJECT:
                        return "object";

                      case TYPE_BOOLEAN:
                        return "boolean";

                      case TYPE_EXPREF:
                        return "expref";

                      case TYPE_NULL:
                        return "null";
                    }
                },
                _functionKeys: function(resolvedArgs) {
                    return Object.keys(resolvedArgs[0]);
                },
                _functionValues: function(resolvedArgs) {
                    var obj = resolvedArgs[0];
                    var keys = Object.keys(obj);
                    var values = [];
                    for (var i = 0; i < keys.length; i++) {
                        values.push(obj[keys[i]]);
                    }
                    return values;
                },
                _functionJoin: function(resolvedArgs) {
                    var joinChar = resolvedArgs[0];
                    var listJoin = resolvedArgs[1];
                    return listJoin.join(joinChar);
                },
                _functionToArray: function(resolvedArgs) {
                    if (this._getTypeName(resolvedArgs[0]) === TYPE_ARRAY) {
                        return resolvedArgs[0];
                    } else {
                        return [ resolvedArgs[0] ];
                    }
                },
                _functionToString: function(resolvedArgs) {
                    if (this._getTypeName(resolvedArgs[0]) === TYPE_STRING) {
                        return resolvedArgs[0];
                    } else {
                        return JSON.stringify(resolvedArgs[0]);
                    }
                },
                _functionToNumber: function(resolvedArgs) {
                    var typeName = this._getTypeName(resolvedArgs[0]);
                    var convertedValue;
                    if (typeName === TYPE_NUMBER) {
                        return resolvedArgs[0];
                    } else if (typeName === TYPE_STRING) {
                        convertedValue = +resolvedArgs[0];
                        if (!isNaN(convertedValue)) {
                            return convertedValue;
                        }
                    }
                    return null;
                },
                _functionNotNull: function(resolvedArgs) {
                    for (var i = 0; i < resolvedArgs.length; i++) {
                        if (this._getTypeName(resolvedArgs[i]) !== TYPE_NULL) {
                            return resolvedArgs[i];
                        }
                    }
                    return null;
                },
                _functionSort: function(resolvedArgs) {
                    var sortedArray = resolvedArgs[0].slice(0);
                    sortedArray.sort();
                    return sortedArray;
                },
                _functionSortBy: function(resolvedArgs) {
                    var sortedArray = resolvedArgs[0].slice(0);
                    if (sortedArray.length === 0) {
                        return sortedArray;
                    }
                    var interpreter = this._interpreter;
                    var exprefNode = resolvedArgs[1];
                    var requiredType = this._getTypeName(interpreter.visit(exprefNode, sortedArray[0]));
                    if ([ TYPE_NUMBER, TYPE_STRING ].indexOf(requiredType) < 0) {
                        throw new Error("TypeError");
                    }
                    var that = this;
                    var decorated = [];
                    for (var i = 0; i < sortedArray.length; i++) {
                        decorated.push([ i, sortedArray[i] ]);
                    }
                    decorated.sort(function(a, b) {
                        var exprA = interpreter.visit(exprefNode, a[1]);
                        var exprB = interpreter.visit(exprefNode, b[1]);
                        if (that._getTypeName(exprA) !== requiredType) {
                            throw new Error("TypeError: expected " + requiredType + ", received " + that._getTypeName(exprA));
                        } else if (that._getTypeName(exprB) !== requiredType) {
                            throw new Error("TypeError: expected " + requiredType + ", received " + that._getTypeName(exprB));
                        }
                        if (exprA > exprB) {
                            return 1;
                        } else if (exprA < exprB) {
                            return -1;
                        } else {
                            return a[0] - b[0];
                        }
                    });
                    for (var j = 0; j < decorated.length; j++) {
                        sortedArray[j] = decorated[j][1];
                    }
                    return sortedArray;
                },
                _functionMaxBy: function(resolvedArgs) {
                    var exprefNode = resolvedArgs[1];
                    var resolvedArray = resolvedArgs[0];
                    var keyFunction = this.createKeyFunction(exprefNode, [ TYPE_NUMBER, TYPE_STRING ]);
                    var maxNumber = -Infinity;
                    var maxRecord;
                    var current;
                    for (var i = 0; i < resolvedArray.length; i++) {
                        current = keyFunction(resolvedArray[i]);
                        if (current > maxNumber) {
                            maxNumber = current;
                            maxRecord = resolvedArray[i];
                        }
                    }
                    return maxRecord;
                },
                _functionMinBy: function(resolvedArgs) {
                    var exprefNode = resolvedArgs[1];
                    var resolvedArray = resolvedArgs[0];
                    var keyFunction = this.createKeyFunction(exprefNode, [ TYPE_NUMBER, TYPE_STRING ]);
                    var minNumber = Infinity;
                    var minRecord;
                    var current;
                    for (var i = 0; i < resolvedArray.length; i++) {
                        current = keyFunction(resolvedArray[i]);
                        if (current < minNumber) {
                            minNumber = current;
                            minRecord = resolvedArray[i];
                        }
                    }
                    return minRecord;
                },
                createKeyFunction: function(exprefNode, allowedTypes) {
                    var that = this;
                    var interpreter = this._interpreter;
                    var keyFunc = function(x) {
                        var current = interpreter.visit(exprefNode, x);
                        if (allowedTypes.indexOf(that._getTypeName(current)) < 0) {
                            var msg = "TypeError: expected one of " + allowedTypes + ", received " + that._getTypeName(current);
                            throw new Error(msg);
                        }
                        return current;
                    };
                    return keyFunc;
                }
            };
            function compile(stream) {
                var parser = new Parser();
                var ast = parser.parse(stream);
                return ast;
            }
            function tokenize(stream) {
                var lexer = new Lexer();
                return lexer.tokenize(stream);
            }
            function search(data, expression) {
                var parser = new Parser();
                var runtime = new Runtime();
                var interpreter = new TreeInterpreter(runtime);
                runtime._interpreter = interpreter;
                var node = parser.parse(expression);
                return interpreter.search(node, data);
            }
            exports.tokenize = tokenize;
            exports.compile = compile;
            exports.search = search;
            exports.strictDeepEqual = strictDeepEqual;
        })(typeof exports === "undefined" ? this.jmespath = {} : exports);
    }, {} ],
    5: [ function(require, module, exports) {
        (function(process, global) {
            (function() {
                var formatRegExp = /%[sdj%]/g;
                exports.format = function(f) {
                    if (!isString(f)) {
                        var objects = [];
                        for (var i = 0; i < arguments.length; i++) {
                            objects.push(inspect(arguments[i]));
                        }
                        return objects.join(" ");
                    }
                    var i = 1;
                    var args = arguments;
                    var len = args.length;
                    var str = String(f).replace(formatRegExp, function(x) {
                        if (x === "%%") return "%";
                        if (i >= len) return x;
                        switch (x) {
                          case "%s":
                            return String(args[i++]);

                          case "%d":
                            return Number(args[i++]);

                          case "%j":
                            try {
                                return JSON.stringify(args[i++]);
                            } catch (_) {
                                return "[Circular]";
                            }

                          default:
                            return x;
                        }
                    });
                    for (var x = args[i]; i < len; x = args[++i]) {
                        if (isNull(x) || !isObject(x)) {
                            str += " " + x;
                        } else {
                            str += " " + inspect(x);
                        }
                    }
                    return str;
                };
                exports.deprecate = function(fn, msg) {
                    if (isUndefined(global.process)) {
                        return function() {
                            return exports.deprecate(fn, msg).apply(this, arguments);
                        };
                    }
                    if (process.noDeprecation === true) {
                        return fn;
                    }
                    var warned = false;
                    function deprecated() {
                        if (!warned) {
                            if (process.throwDeprecation) {
                                throw new Error(msg);
                            } else if (process.traceDeprecation) {
                                console.trace(msg);
                            } else {
                                console.error(msg);
                            }
                            warned = true;
                        }
                        return fn.apply(this, arguments);
                    }
                    return deprecated;
                };
                var debugs = {};
                var debugEnviron;
                exports.debuglog = function(set) {
                    if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || "";
                    set = set.toUpperCase();
                    if (!debugs[set]) {
                        if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
                            var pid = process.pid;
                            debugs[set] = function() {
                                var msg = exports.format.apply(exports, arguments);
                                console.error("%s %d: %s", set, pid, msg);
                            };
                        } else {
                            debugs[set] = function() {};
                        }
                    }
                    return debugs[set];
                };
                function inspect(obj, opts) {
                    var ctx = {
                        seen: [],
                        stylize: stylizeNoColor
                    };
                    if (arguments.length >= 3) ctx.depth = arguments[2];
                    if (arguments.length >= 4) ctx.colors = arguments[3];
                    if (isBoolean(opts)) {
                        ctx.showHidden = opts;
                    } else if (opts) {
                        exports._extend(ctx, opts);
                    }
                    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
                    if (isUndefined(ctx.depth)) ctx.depth = 2;
                    if (isUndefined(ctx.colors)) ctx.colors = false;
                    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
                    if (ctx.colors) ctx.stylize = stylizeWithColor;
                    return formatValue(ctx, obj, ctx.depth);
                }
                exports.inspect = inspect;
                inspect.colors = {
                    bold: [ 1, 22 ],
                    italic: [ 3, 23 ],
                    underline: [ 4, 24 ],
                    inverse: [ 7, 27 ],
                    white: [ 37, 39 ],
                    grey: [ 90, 39 ],
                    black: [ 30, 39 ],
                    blue: [ 34, 39 ],
                    cyan: [ 36, 39 ],
                    green: [ 32, 39 ],
                    magenta: [ 35, 39 ],
                    red: [ 31, 39 ],
                    yellow: [ 33, 39 ]
                };
                inspect.styles = {
                    special: "cyan",
                    number: "yellow",
                    boolean: "yellow",
                    undefined: "grey",
                    null: "bold",
                    string: "green",
                    date: "magenta",
                    regexp: "red"
                };
                function stylizeWithColor(str, styleType) {
                    var style = inspect.styles[styleType];
                    if (style) {
                        return "[" + inspect.colors[style][0] + "m" + str + "[" + inspect.colors[style][1] + "m";
                    } else {
                        return str;
                    }
                }
                function stylizeNoColor(str, styleType) {
                    return str;
                }
                function arrayToHash(array) {
                    var hash = {};
                    array.forEach(function(val, idx) {
                        hash[val] = true;
                    });
                    return hash;
                }
                function formatValue(ctx, value, recurseTimes) {
                    if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
                        var ret = value.inspect(recurseTimes, ctx);
                        if (!isString(ret)) {
                            ret = formatValue(ctx, ret, recurseTimes);
                        }
                        return ret;
                    }
                    var primitive = formatPrimitive(ctx, value);
                    if (primitive) {
                        return primitive;
                    }
                    var keys = Object.keys(value);
                    var visibleKeys = arrayToHash(keys);
                    if (ctx.showHidden) {
                        keys = Object.getOwnPropertyNames(value);
                    }
                    if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
                        return formatError(value);
                    }
                    if (keys.length === 0) {
                        if (isFunction(value)) {
                            var name = value.name ? ": " + value.name : "";
                            return ctx.stylize("[Function" + name + "]", "special");
                        }
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                        }
                        if (isDate(value)) {
                            return ctx.stylize(Date.prototype.toString.call(value), "date");
                        }
                        if (isError(value)) {
                            return formatError(value);
                        }
                    }
                    var base = "", array = false, braces = [ "{", "}" ];
                    if (isArray(value)) {
                        array = true;
                        braces = [ "[", "]" ];
                    }
                    if (isFunction(value)) {
                        var n = value.name ? ": " + value.name : "";
                        base = " [Function" + n + "]";
                    }
                    if (isRegExp(value)) {
                        base = " " + RegExp.prototype.toString.call(value);
                    }
                    if (isDate(value)) {
                        base = " " + Date.prototype.toUTCString.call(value);
                    }
                    if (isError(value)) {
                        base = " " + formatError(value);
                    }
                    if (keys.length === 0 && (!array || value.length == 0)) {
                        return braces[0] + base + braces[1];
                    }
                    if (recurseTimes < 0) {
                        if (isRegExp(value)) {
                            return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
                        } else {
                            return ctx.stylize("[Object]", "special");
                        }
                    }
                    ctx.seen.push(value);
                    var output;
                    if (array) {
                        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
                    } else {
                        output = keys.map(function(key) {
                            return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                        });
                    }
                    ctx.seen.pop();
                    return reduceToSingleString(output, base, braces);
                }
                function formatPrimitive(ctx, value) {
                    if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
                    if (isString(value)) {
                        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
                        return ctx.stylize(simple, "string");
                    }
                    if (isNumber(value)) return ctx.stylize("" + value, "number");
                    if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
                    if (isNull(value)) return ctx.stylize("null", "null");
                }
                function formatError(value) {
                    return "[" + Error.prototype.toString.call(value) + "]";
                }
                function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
                    var output = [];
                    for (var i = 0, l = value.length; i < l; ++i) {
                        if (hasOwnProperty(value, String(i))) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                        } else {
                            output.push("");
                        }
                    }
                    keys.forEach(function(key) {
                        if (!key.match(/^\d+$/)) {
                            output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                        }
                    });
                    return output;
                }
                function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
                    var name, str, desc;
                    desc = Object.getOwnPropertyDescriptor(value, key) || {
                        value: value[key]
                    };
                    if (desc.get) {
                        if (desc.set) {
                            str = ctx.stylize("[Getter/Setter]", "special");
                        } else {
                            str = ctx.stylize("[Getter]", "special");
                        }
                    } else {
                        if (desc.set) {
                            str = ctx.stylize("[Setter]", "special");
                        }
                    }
                    if (!hasOwnProperty(visibleKeys, key)) {
                        name = "[" + key + "]";
                    }
                    if (!str) {
                        if (ctx.seen.indexOf(desc.value) < 0) {
                            if (isNull(recurseTimes)) {
                                str = formatValue(ctx, desc.value, null);
                            } else {
                                str = formatValue(ctx, desc.value, recurseTimes - 1);
                            }
                            if (str.indexOf("\n") > -1) {
                                if (array) {
                                    str = str.split("\n").map(function(line) {
                                        return "  " + line;
                                    }).join("\n").substr(2);
                                } else {
                                    str = "\n" + str.split("\n").map(function(line) {
                                        return "   " + line;
                                    }).join("\n");
                                }
                            }
                        } else {
                            str = ctx.stylize("[Circular]", "special");
                        }
                    }
                    if (isUndefined(name)) {
                        if (array && key.match(/^\d+$/)) {
                            return str;
                        }
                        name = JSON.stringify("" + key);
                        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                            name = name.substr(1, name.length - 2);
                            name = ctx.stylize(name, "name");
                        } else {
                            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                            name = ctx.stylize(name, "string");
                        }
                    }
                    return name + ": " + str;
                }
                function reduceToSingleString(output, base, braces) {
                    var numLinesEst = 0;
                    var length = output.reduce(function(prev, cur) {
                        numLinesEst++;
                        if (cur.indexOf("\n") >= 0) numLinesEst++;
                        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
                    }, 0);
                    if (length > 60) {
                        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
                    }
                    return braces[0] + base + " " + output.join(", ") + " " + braces[1];
                }
                function isArray(ar) {
                    return Array.isArray(ar);
                }
                exports.isArray = isArray;
                function isBoolean(arg) {
                    return typeof arg === "boolean";
                }
                exports.isBoolean = isBoolean;
                function isNull(arg) {
                    return arg === null;
                }
                exports.isNull = isNull;
                function isNullOrUndefined(arg) {
                    return arg == null;
                }
                exports.isNullOrUndefined = isNullOrUndefined;
                function isNumber(arg) {
                    return typeof arg === "number";
                }
                exports.isNumber = isNumber;
                function isString(arg) {
                    return typeof arg === "string";
                }
                exports.isString = isString;
                function isSymbol(arg) {
                    return typeof arg === "symbol";
                }
                exports.isSymbol = isSymbol;
                function isUndefined(arg) {
                    return arg === void 0;
                }
                exports.isUndefined = isUndefined;
                function isRegExp(re) {
                    return isObject(re) && objectToString(re) === "[object RegExp]";
                }
                exports.isRegExp = isRegExp;
                function isObject(arg) {
                    return typeof arg === "object" && arg !== null;
                }
                exports.isObject = isObject;
                function isDate(d) {
                    return isObject(d) && objectToString(d) === "[object Date]";
                }
                exports.isDate = isDate;
                function isError(e) {
                    return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
                }
                exports.isError = isError;
                function isFunction(arg) {
                    return typeof arg === "function";
                }
                exports.isFunction = isFunction;
                function isPrimitive(arg) {
                    return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
                }
                exports.isPrimitive = isPrimitive;
                exports.isBuffer = require("./support/isBuffer");
                function objectToString(o) {
                    return Object.prototype.toString.call(o);
                }
                function pad(n) {
                    return n < 10 ? "0" + n.toString(10) : n.toString(10);
                }
                var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
                function timestamp() {
                    var d = new Date();
                    var time = [ pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds()) ].join(":");
                    return [ d.getDate(), months[d.getMonth()], time ].join(" ");
                }
                exports.log = function() {
                    console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
                };
                exports.inherits = require("inherits");
                exports._extend = function(origin, add) {
                    if (!add || !isObject(add)) return origin;
                    var keys = Object.keys(add);
                    var i = keys.length;
                    while (i--) {
                        origin[keys[i]] = add[keys[i]];
                    }
                    return origin;
                };
                function hasOwnProperty(obj, prop) {
                    return Object.prototype.hasOwnProperty.call(obj, prop);
                }
            }).call(this);
        }).call(this, require("_process"), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
        "./support/isBuffer": 4,
        _process: 11,
        inherits: 3
    } ],
    11: [ function(require, module, exports) {
        var process = module.exports = {};
        var cachedSetTimeout;
        var cachedClearTimeout;
        function defaultSetTimout() {
            throw new Error("setTimeout has not been defined");
        }
        function defaultClearTimeout() {
            throw new Error("clearTimeout has not been defined");
        }
        (function() {
            try {
                if (typeof setTimeout === "function") {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === "function") {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        })();
        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                return setTimeout(fun, 0);
            }
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }
        }
        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                return clearTimeout(marker);
            }
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    return cachedClearTimeout.call(this, marker);
                }
            }
        }
        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;
        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }
        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }
        process.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }
        Item.prototype.run = function() {
            this.fun.apply(null, this.array);
        };
        process.title = "browser";
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = "";
        process.versions = {};
        function noop() {}
        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;
        process.listeners = function(name) {
            return [];
        };
        process.binding = function(name) {
            throw new Error("process.binding is not supported");
        };
        process.cwd = function() {
            return "/";
        };
        process.chdir = function(dir) {
            throw new Error("process.chdir is not supported");
        };
        process.umask = function() {
            return 0;
        };
    }, {} ],
    4: [ function(require, module, exports) {
        module.exports = function isBuffer(arg) {
            return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
        };
    }, {} ],
    3: [ function(require, module, exports) {
        if (typeof Object.create === "function") {
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                ctor.prototype = Object.create(superCtor.prototype, {
                    constructor: {
                        value: ctor,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
            };
        } else {
            module.exports = function inherits(ctor, superCtor) {
                ctor.super_ = superCtor;
                var TempCtor = function() {};
                TempCtor.prototype = superCtor.prototype;
                ctor.prototype = new TempCtor();
                ctor.prototype.constructor = ctor;
            };
        }
    }, {} ],
    2: [ function(require, module, exports) {}, {} ]
}, {}, [ 113, 117 ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    33: [ function(require, module, exports) {
        require("./browser_loader");
        var AWS = require("./core");
        if (typeof window !== "undefined") window.AWS = AWS;
        if (typeof module !== "undefined") {
            module.exports = AWS;
        }
        if (typeof self !== "undefined") self.AWS = AWS;
    }, {
        "./browser_loader": 40,
        "./core": 44
    } ],
    40: [ function(require, module, exports) {
        (function(process) {
            (function() {
                var util = require("./util");
                util.crypto.lib = require("./browserCryptoLib");
                util.Buffer = require("buffer/").Buffer;
                util.url = require("url/");
                util.querystring = require("querystring/");
                util.realClock = require("./realclock/browserClock");
                util.environment = "js";
                util.createEventStream = require("./event-stream/buffered-create-event-stream").createEventStream;
                util.isBrowser = function() {
                    return true;
                };
                util.isNode = function() {
                    return false;
                };
                var AWS = require("./core");
                module.exports = AWS;
                require("./credentials");
                require("./credentials/credential_provider_chain");
                require("./credentials/temporary_credentials");
                require("./credentials/chainable_temporary_credentials");
                require("./credentials/web_identity_credentials");
                require("./credentials/cognito_identity_credentials");
                require("./credentials/saml_credentials");
                AWS.XML.Parser = require("./xml/browser_parser");
                require("./http/xhr");
                if (typeof process === "undefined") {
                    var process = {
                        browser: true
                    };
                }
            }).call(this);
        }).call(this, require("_process"));
    }, {
        "./browserCryptoLib": 34,
        "./core": 44,
        "./credentials": 45,
        "./credentials/chainable_temporary_credentials": 46,
        "./credentials/cognito_identity_credentials": 47,
        "./credentials/credential_provider_chain": 48,
        "./credentials/saml_credentials": 49,
        "./credentials/temporary_credentials": 50,
        "./credentials/web_identity_credentials": 51,
        "./event-stream/buffered-create-event-stream": 59,
        "./http/xhr": 67,
        "./realclock/browserClock": 87,
        "./util": 131,
        "./xml/browser_parser": 132,
        _process: 11,
        "buffer/": 6,
        "querystring/": 18,
        "url/": 20
    } ],
    132: [ function(require, module, exports) {
        var util = require("../util");
        var Shape = require("../model/shape");
        function DomXmlParser() {}
        DomXmlParser.prototype.parse = function(xml, shape) {
            if (xml.replace(/^\s+/, "") === "") return {};
            var result, error;
            try {
                if (window.DOMParser) {
                    try {
                        var parser = new DOMParser();
                        result = parser.parseFromString(xml, "text/xml");
                    } catch (syntaxError) {
                        throw util.error(new Error("Parse error in document"), {
                            originalError: syntaxError,
                            code: "XMLParserError",
                            retryable: true
                        });
                    }
                    if (result.documentElement === null) {
                        throw util.error(new Error("Cannot parse empty document."), {
                            code: "XMLParserError",
                            retryable: true
                        });
                    }
                    var isError = result.getElementsByTagName("parsererror")[0];
                    if (isError && (isError.parentNode === result || isError.parentNode.nodeName === "body" || isError.parentNode.parentNode === result || isError.parentNode.parentNode.nodeName === "body")) {
                        var errorElement = isError.getElementsByTagName("div")[0] || isError;
                        throw util.error(new Error(errorElement.textContent || "Parser error in document"), {
                            code: "XMLParserError",
                            retryable: true
                        });
                    }
                } else if (window.ActiveXObject) {
                    result = new window.ActiveXObject("Microsoft.XMLDOM");
                    result.async = false;
                    if (!result.loadXML(xml)) {
                        throw util.error(new Error("Parse error in document"), {
                            code: "XMLParserError",
                            retryable: true
                        });
                    }
                } else {
                    throw new Error("Cannot load XML parser");
                }
            } catch (e) {
                error = e;
            }
            if (result && result.documentElement && !error) {
                var data = parseXml(result.documentElement, shape);
                var metadata = getElementByTagName(result.documentElement, "ResponseMetadata");
                if (metadata) {
                    data.ResponseMetadata = parseXml(metadata, {});
                }
                return data;
            } else if (error) {
                throw util.error(error || new Error(), {
                    code: "XMLParserError",
                    retryable: true
                });
            } else {
                return {};
            }
        };
        function getElementByTagName(xml, tag) {
            var elements = xml.getElementsByTagName(tag);
            for (var i = 0, iLen = elements.length; i < iLen; i++) {
                if (elements[i].parentNode === xml) {
                    return elements[i];
                }
            }
        }
        function parseXml(xml, shape) {
            if (!shape) shape = {};
            switch (shape.type) {
              case "structure":
                return parseStructure(xml, shape);

              case "map":
                return parseMap(xml, shape);

              case "list":
                return parseList(xml, shape);

              case undefined:
              case null:
                return parseUnknown(xml);

              default:
                return parseScalar(xml, shape);
            }
        }
        function parseStructure(xml, shape) {
            var data = {};
            if (xml === null) return data;
            util.each(shape.members, function(memberName, memberShape) {
                if (memberShape.isXmlAttribute) {
                    if (Object.prototype.hasOwnProperty.call(xml.attributes, memberShape.name)) {
                        var value = xml.attributes[memberShape.name].value;
                        data[memberName] = parseXml({
                            textContent: value
                        }, memberShape);
                    }
                } else {
                    var xmlChild = memberShape.flattened ? xml : getElementByTagName(xml, memberShape.name);
                    if (xmlChild) {
                        data[memberName] = parseXml(xmlChild, memberShape);
                    } else if (!memberShape.flattened && memberShape.type === "list" && !shape.api.xmlNoDefaultLists) {
                        data[memberName] = memberShape.defaultValue;
                    }
                }
            });
            return data;
        }
        function parseMap(xml, shape) {
            var data = {};
            var xmlKey = shape.key.name || "key";
            var xmlValue = shape.value.name || "value";
            var tagName = shape.flattened ? shape.name : "entry";
            var child = xml.firstElementChild;
            while (child) {
                if (child.nodeName === tagName) {
                    var key = getElementByTagName(child, xmlKey).textContent;
                    var value = getElementByTagName(child, xmlValue);
                    data[key] = parseXml(value, shape.value);
                }
                child = child.nextElementSibling;
            }
            return data;
        }
        function parseList(xml, shape) {
            var data = [];
            var tagName = shape.flattened ? shape.name : shape.member.name || "member";
            var child = xml.firstElementChild;
            while (child) {
                if (child.nodeName === tagName) {
                    data.push(parseXml(child, shape.member));
                }
                child = child.nextElementSibling;
            }
            return data;
        }
        function parseScalar(xml, shape) {
            if (xml.getAttribute) {
                var encoding = xml.getAttribute("encoding");
                if (encoding === "base64") {
                    shape = new Shape.create({
                        type: encoding
                    });
                }
            }
            var text = xml.textContent;
            if (text === "") text = null;
            if (typeof shape.toType === "function") {
                return shape.toType(text);
            } else {
                return text;
            }
        }
        function parseUnknown(xml) {
            if (xml === undefined || xml === null) return "";
            if (!xml.firstElementChild) {
                if (xml.parentNode.parentNode === null) return {};
                if (xml.childNodes.length === 0) return ""; else return xml.textContent;
            }
            var shape = {
                type: "structure",
                members: {}
            };
            var child = xml.firstElementChild;
            while (child) {
                var tag = child.nodeName;
                if (Object.prototype.hasOwnProperty.call(shape.members, tag)) {
                    shape.members[tag].type = "list";
                } else {
                    shape.members[tag] = {
                        name: tag
                    };
                }
                child = child.nextElementSibling;
            }
            return parseStructure(xml, shape);
        }
        module.exports = DomXmlParser;
    }, {
        "../model/shape": 76,
        "../util": 131
    } ],
    87: [ function(require, module, exports) {
        module.exports = {
            now: function now() {
                if (typeof performance !== "undefined" && typeof performance.now === "function") {
                    return performance.now();
                }
                return Date.now();
            }
        };
    }, {} ],
    67: [ function(require, module, exports) {
        var AWS = require("../core");
        var EventEmitter = require("events").EventEmitter;
        require("../http");
        AWS.XHRClient = AWS.util.inherit({
            handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
                var self = this;
                var endpoint = httpRequest.endpoint;
                var emitter = new EventEmitter();
                var href = endpoint.protocol + "//" + endpoint.hostname;
                if (endpoint.port !== 80 && endpoint.port !== 443) {
                    href += ":" + endpoint.port;
                }
                href += httpRequest.path;
                var xhr = new XMLHttpRequest(), headersEmitted = false;
                httpRequest.stream = xhr;
                xhr.addEventListener("readystatechange", function() {
                    try {
                        if (xhr.status === 0) return;
                    } catch (e) {
                        return;
                    }
                    if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {
                        emitter.statusCode = xhr.status;
                        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());
                        emitter.emit("headers", emitter.statusCode, emitter.headers, xhr.statusText);
                        headersEmitted = true;
                    }
                    if (this.readyState === this.DONE) {
                        self.finishRequest(xhr, emitter);
                    }
                }, false);
                xhr.upload.addEventListener("progress", function(evt) {
                    emitter.emit("sendProgress", evt);
                });
                xhr.addEventListener("progress", function(evt) {
                    emitter.emit("receiveProgress", evt);
                }, false);
                xhr.addEventListener("timeout", function() {
                    errCallback(AWS.util.error(new Error("Timeout"), {
                        code: "TimeoutError"
                    }));
                }, false);
                xhr.addEventListener("error", function() {
                    errCallback(AWS.util.error(new Error("Network Failure"), {
                        code: "NetworkingError"
                    }));
                }, false);
                xhr.addEventListener("abort", function() {
                    errCallback(AWS.util.error(new Error("Request aborted"), {
                        code: "RequestAbortedError"
                    }));
                }, false);
                callback(emitter);
                xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);
                AWS.util.each(httpRequest.headers, function(key, value) {
                    if (key !== "Content-Length" && key !== "User-Agent" && key !== "Host") {
                        xhr.setRequestHeader(key, value);
                    }
                });
                if (httpOptions.timeout && httpOptions.xhrAsync !== false) {
                    xhr.timeout = httpOptions.timeout;
                }
                if (httpOptions.xhrWithCredentials) {
                    xhr.withCredentials = true;
                }
                try {
                    xhr.responseType = "arraybuffer";
                } catch (e) {}
                try {
                    if (httpRequest.body) {
                        xhr.send(httpRequest.body);
                    } else {
                        xhr.send();
                    }
                } catch (err) {
                    if (httpRequest.body && typeof httpRequest.body.buffer === "object") {
                        xhr.send(httpRequest.body.buffer);
                    } else {
                        throw err;
                    }
                }
                return emitter;
            },
            parseHeaders: function parseHeaders(rawHeaders) {
                var headers = {};
                AWS.util.arrayEach(rawHeaders.split(/\r?\n/), function(line) {
                    var key = line.split(":", 1)[0];
                    var value = line.substring(key.length + 2);
                    if (key.length > 0) headers[key.toLowerCase()] = value;
                });
                return headers;
            },
            finishRequest: function finishRequest(xhr, emitter) {
                var buffer;
                if (xhr.responseType === "arraybuffer" && xhr.response) {
                    var ab = xhr.response;
                    buffer = new AWS.util.Buffer(ab.byteLength);
                    var view = new Uint8Array(ab);
                    for (var i = 0; i < buffer.length; ++i) {
                        buffer[i] = view[i];
                    }
                }
                try {
                    if (!buffer && typeof xhr.responseText === "string") {
                        buffer = new AWS.util.Buffer(xhr.responseText);
                    }
                } catch (e) {}
                if (buffer) emitter.emit("data", buffer);
                emitter.emit("end");
            }
        });
        AWS.HttpClient.prototype = AWS.XHRClient.prototype;
        AWS.HttpClient.streamsApiVersion = 1;
    }, {
        "../core": 44,
        "../http": 66,
        events: 7
    } ],
    59: [ function(require, module, exports) {
        var eventMessageChunker = require("../event-stream/event-message-chunker").eventMessageChunker;
        var parseEvent = require("./parse-event").parseEvent;
        function createEventStream(body, parser, model) {
            var eventMessages = eventMessageChunker(body);
            var events = [];
            for (var i = 0; i < eventMessages.length; i++) {
                events.push(parseEvent(parser, eventMessages[i], model));
            }
            return events;
        }
        module.exports = {
            createEventStream: createEventStream
        };
    }, {
        "../event-stream/event-message-chunker": 60,
        "./parse-event": 62
    } ],
    62: [ function(require, module, exports) {
        var parseMessage = require("./parse-message").parseMessage;
        function parseEvent(parser, message, shape) {
            var parsedMessage = parseMessage(message);
            var messageType = parsedMessage.headers[":message-type"];
            if (messageType) {
                if (messageType.value === "error") {
                    throw parseError(parsedMessage);
                } else if (messageType.value !== "event") {
                    return;
                }
            }
            var eventType = parsedMessage.headers[":event-type"];
            var eventModel = shape.members[eventType.value];
            if (!eventModel) {
                return;
            }
            var result = {};
            var eventPayloadMemberName = eventModel.eventPayloadMemberName;
            if (eventPayloadMemberName) {
                var payloadShape = eventModel.members[eventPayloadMemberName];
                if (payloadShape.type === "binary") {
                    result[eventPayloadMemberName] = parsedMessage.body;
                } else {
                    result[eventPayloadMemberName] = parser.parse(parsedMessage.body.toString(), payloadShape);
                }
            }
            var eventHeaderNames = eventModel.eventHeaderMemberNames;
            for (var i = 0; i < eventHeaderNames.length; i++) {
                var name = eventHeaderNames[i];
                if (parsedMessage.headers[name]) {
                    result[name] = eventModel.members[name].toType(parsedMessage.headers[name].value);
                }
            }
            var output = {};
            output[eventType.value] = result;
            return output;
        }
        function parseError(message) {
            var errorCode = message.headers[":error-code"];
            var errorMessage = message.headers[":error-message"];
            var error = new Error(errorMessage.value || errorMessage);
            error.code = error.name = errorCode.value || errorCode;
            return error;
        }
        module.exports = {
            parseEvent: parseEvent
        };
    }, {
        "./parse-message": 63
    } ],
    63: [ function(require, module, exports) {
        var Int64 = require("./int64").Int64;
        var splitMessage = require("./split-message").splitMessage;
        var BOOLEAN_TAG = "boolean";
        var BYTE_TAG = "byte";
        var SHORT_TAG = "short";
        var INT_TAG = "integer";
        var LONG_TAG = "long";
        var BINARY_TAG = "binary";
        var STRING_TAG = "string";
        var TIMESTAMP_TAG = "timestamp";
        var UUID_TAG = "uuid";
        function parseHeaders(headers) {
            var out = {};
            var position = 0;
            while (position < headers.length) {
                var nameLength = headers.readUInt8(position++);
                var name = headers.slice(position, position + nameLength).toString();
                position += nameLength;
                switch (headers.readUInt8(position++)) {
                  case 0:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: true
                    };
                    break;

                  case 1:
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: false
                    };
                    break;

                  case 2:
                    out[name] = {
                        type: BYTE_TAG,
                        value: headers.readInt8(position++)
                    };
                    break;

                  case 3:
                    out[name] = {
                        type: SHORT_TAG,
                        value: headers.readInt16BE(position)
                    };
                    position += 2;
                    break;

                  case 4:
                    out[name] = {
                        type: INT_TAG,
                        value: headers.readInt32BE(position)
                    };
                    position += 4;
                    break;

                  case 5:
                    out[name] = {
                        type: LONG_TAG,
                        value: new Int64(headers.slice(position, position + 8))
                    };
                    position += 8;
                    break;

                  case 6:
                    var binaryLength = headers.readUInt16BE(position);
                    position += 2;
                    out[name] = {
                        type: BINARY_TAG,
                        value: headers.slice(position, position + binaryLength)
                    };
                    position += binaryLength;
                    break;

                  case 7:
                    var stringLength = headers.readUInt16BE(position);
                    position += 2;
                    out[name] = {
                        type: STRING_TAG,
                        value: headers.slice(position, position + stringLength).toString()
                    };
                    position += stringLength;
                    break;

                  case 8:
                    out[name] = {
                        type: TIMESTAMP_TAG,
                        value: new Date(new Int64(headers.slice(position, position + 8)).valueOf())
                    };
                    position += 8;
                    break;

                  case 9:
                    var uuidChars = headers.slice(position, position + 16).toString("hex");
                    position += 16;
                    out[name] = {
                        type: UUID_TAG,
                        value: uuidChars.substr(0, 8) + "-" + uuidChars.substr(8, 4) + "-" + uuidChars.substr(12, 4) + "-" + uuidChars.substr(16, 4) + "-" + uuidChars.substr(20)
                    };
                    break;

                  default:
                    throw new Error("Unrecognized header type tag");
                }
            }
            return out;
        }
        function parseMessage(message) {
            var parsed = splitMessage(message);
            return {
                headers: parseHeaders(parsed.headers),
                body: parsed.body
            };
        }
        module.exports = {
            parseMessage: parseMessage
        };
    }, {
        "./int64": 61,
        "./split-message": 64
    } ],
    64: [ function(require, module, exports) {
        var util = require("../core").util;
        var toBuffer = util.buffer.toBuffer;
        var PRELUDE_MEMBER_LENGTH = 4;
        var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
        var CHECKSUM_LENGTH = 4;
        var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
        function splitMessage(message) {
            if (!util.Buffer.isBuffer(message)) message = toBuffer(message);
            if (message.length < MINIMUM_MESSAGE_LENGTH) {
                throw new Error("Provided message too short to accommodate event stream message overhead");
            }
            if (message.length !== message.readUInt32BE(0)) {
                throw new Error("Reported message length does not match received message length");
            }
            var expectedPreludeChecksum = message.readUInt32BE(PRELUDE_LENGTH);
            if (expectedPreludeChecksum !== util.crypto.crc32(message.slice(0, PRELUDE_LENGTH))) {
                throw new Error("The prelude checksum specified in the message (" + expectedPreludeChecksum + ") does not match the calculated CRC32 checksum.");
            }
            var expectedMessageChecksum = message.readUInt32BE(message.length - CHECKSUM_LENGTH);
            if (expectedMessageChecksum !== util.crypto.crc32(message.slice(0, message.length - CHECKSUM_LENGTH))) {
                throw new Error("The message checksum did not match the expected value of " + expectedMessageChecksum);
            }
            var headersStart = PRELUDE_LENGTH + CHECKSUM_LENGTH;
            var headersEnd = headersStart + message.readUInt32BE(PRELUDE_MEMBER_LENGTH);
            return {
                headers: message.slice(headersStart, headersEnd),
                body: message.slice(headersEnd, message.length - CHECKSUM_LENGTH)
            };
        }
        module.exports = {
            splitMessage: splitMessage
        };
    }, {
        "../core": 44
    } ],
    61: [ function(require, module, exports) {
        var util = require("../core").util;
        var toBuffer = util.buffer.toBuffer;
        function Int64(bytes) {
            if (bytes.length !== 8) {
                throw new Error("Int64 buffers must be exactly 8 bytes");
            }
            if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);
            this.bytes = bytes;
        }
        Int64.fromNumber = function(number) {
            if (number > 0x8000000000000000 || number < -0x8000000000000000) {
                throw new Error(number + " is too large (or, if negative, too small) to represent as an Int64");
            }
            var bytes = new Uint8Array(8);
            for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, 
            remaining /= 256) {
                bytes[i] = remaining;
            }
            if (number < 0) {
                negate(bytes);
            }
            return new Int64(bytes);
        };
        Int64.prototype.valueOf = function() {
            var bytes = this.bytes.slice(0);
            var negative = bytes[0] & 128;
            if (negative) {
                negate(bytes);
            }
            return parseInt(bytes.toString("hex"), 16) * (negative ? -1 : 1);
        };
        Int64.prototype.toString = function() {
            return String(this.valueOf());
        };
        function negate(bytes) {
            for (var i = 0; i < 8; i++) {
                bytes[i] ^= 255;
            }
            for (var i = 7; i > -1; i--) {
                bytes[i]++;
                if (bytes[i] !== 0) {
                    break;
                }
            }
        }
        module.exports = {
            Int64: Int64
        };
    }, {
        "../core": 44
    } ],
    60: [ function(require, module, exports) {
        function eventMessageChunker(buffer) {
            var messages = [];
            var offset = 0;
            while (offset < buffer.length) {
                var totalLength = buffer.readInt32BE(offset);
                var message = buffer.slice(offset, totalLength + offset);
                offset += totalLength;
                messages.push(message);
            }
            return messages;
        }
        module.exports = {
            eventMessageChunker: eventMessageChunker
        };
    }, {} ],
    51: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
            constructor: function WebIdentityCredentials(params, clientConfig) {
                AWS.Credentials.call(this);
                this.expired = true;
                this.params = params;
                this.params.RoleSessionName = this.params.RoleSessionName || "web-identity";
                this.data = null;
                this._clientConfig = AWS.util.copy(clientConfig || {});
            },
            refresh: function refresh(callback) {
                this.coalesceRefresh(callback || AWS.util.fn.callback);
            },
            load: function load(callback) {
                var self = this;
                self.createClients();
                self.service.assumeRoleWithWebIdentity(function(err, data) {
                    self.data = null;
                    if (!err) {
                        self.data = data;
                        self.service.credentialsFrom(data, self);
                    }
                    callback(err);
                });
            },
            createClients: function() {
                if (!this.service) {
                    var stsConfig = AWS.util.merge({}, this._clientConfig);
                    stsConfig.params = this.params;
                    this.service = new AWS.STS(stsConfig);
                }
            }
        });
    }, {
        "../core": 44
    } ],
    50: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
            constructor: function TemporaryCredentials(params, masterCredentials) {
                AWS.Credentials.call(this);
                this.loadMasterCredentials(masterCredentials);
                this.expired = true;
                this.params = params || {};
                if (this.params.RoleArn) {
                    this.params.RoleSessionName = this.params.RoleSessionName || "temporary-credentials";
                }
            },
            refresh: function refresh(callback) {
                this.coalesceRefresh(callback || AWS.util.fn.callback);
            },
            load: function load(callback) {
                var self = this;
                self.createClients();
                self.masterCredentials.get(function() {
                    self.service.config.credentials = self.masterCredentials;
                    var operation = self.params.RoleArn ? self.service.assumeRole : self.service.getSessionToken;
                    operation.call(self.service, function(err, data) {
                        if (!err) {
                            self.service.credentialsFrom(data, self);
                        }
                        callback(err);
                    });
                });
            },
            loadMasterCredentials: function loadMasterCredentials(masterCredentials) {
                this.masterCredentials = masterCredentials || AWS.config.credentials;
                while (this.masterCredentials.masterCredentials) {
                    this.masterCredentials = this.masterCredentials.masterCredentials;
                }
                if (typeof this.masterCredentials.get !== "function") {
                    this.masterCredentials = new AWS.Credentials(this.masterCredentials);
                }
            },
            createClients: function() {
                this.service = this.service || new AWS.STS({
                    params: this.params
                });
            }
        });
    }, {
        "../core": 44
    } ],
    49: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
            constructor: function SAMLCredentials(params) {
                AWS.Credentials.call(this);
                this.expired = true;
                this.params = params;
            },
            refresh: function refresh(callback) {
                this.coalesceRefresh(callback || AWS.util.fn.callback);
            },
            load: function load(callback) {
                var self = this;
                self.createClients();
                self.service.assumeRoleWithSAML(function(err, data) {
                    if (!err) {
                        self.service.credentialsFrom(data, self);
                    }
                    callback(err);
                });
            },
            createClients: function() {
                this.service = this.service || new AWS.STS({
                    params: this.params
                });
            }
        });
    }, {
        "../core": 44
    } ],
    47: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
            localStorageKey: {
                id: "aws.cognito.identity-id.",
                providers: "aws.cognito.identity-providers."
            },
            constructor: function CognitoIdentityCredentials(params, clientConfig) {
                AWS.Credentials.call(this);
                this.expired = true;
                this.params = params;
                this.data = null;
                this._identityId = null;
                this._clientConfig = AWS.util.copy(clientConfig || {});
                this.loadCachedId();
                var self = this;
                Object.defineProperty(this, "identityId", {
                    get: function() {
                        self.loadCachedId();
                        return self._identityId || self.params.IdentityId;
                    },
                    set: function(identityId) {
                        self._identityId = identityId;
                    }
                });
            },
            refresh: function refresh(callback) {
                this.coalesceRefresh(callback || AWS.util.fn.callback);
            },
            load: function load(callback) {
                var self = this;
                self.createClients();
                self.data = null;
                self._identityId = null;
                self.getId(function(err) {
                    if (!err) {
                        if (!self.params.RoleArn) {
                            self.getCredentialsForIdentity(callback);
                        } else {
                            self.getCredentialsFromSTS(callback);
                        }
                    } else {
                        self.clearIdOnNotAuthorized(err);
                        callback(err);
                    }
                });
            },
            clearCachedId: function clearCache() {
                this._identityId = null;
                delete this.params.IdentityId;
                var poolId = this.params.IdentityPoolId;
                var loginId = this.params.LoginId || "";
                delete this.storage[this.localStorageKey.id + poolId + loginId];
                delete this.storage[this.localStorageKey.providers + poolId + loginId];
            },
            clearIdOnNotAuthorized: function clearIdOnNotAuthorized(err) {
                var self = this;
                if (err.code == "NotAuthorizedException") {
                    self.clearCachedId();
                }
            },
            getId: function getId(callback) {
                var self = this;
                if (typeof self.params.IdentityId === "string") {
                    return callback(null, self.params.IdentityId);
                }
                self.cognito.getId(function(err, data) {
                    if (!err && data.IdentityId) {
                        self.params.IdentityId = data.IdentityId;
                        callback(null, data.IdentityId);
                    } else {
                        callback(err);
                    }
                });
            },
            loadCredentials: function loadCredentials(data, credentials) {
                if (!data || !credentials) return;
                credentials.expired = false;
                credentials.accessKeyId = data.Credentials.AccessKeyId;
                credentials.secretAccessKey = data.Credentials.SecretKey;
                credentials.sessionToken = data.Credentials.SessionToken;
                credentials.expireTime = data.Credentials.Expiration;
            },
            getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
                var self = this;
                self.cognito.getCredentialsForIdentity(function(err, data) {
                    if (!err) {
                        self.cacheId(data);
                        self.data = data;
                        self.loadCredentials(self.data, self);
                    } else {
                        self.clearIdOnNotAuthorized(err);
                    }
                    callback(err);
                });
            },
            getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
                var self = this;
                self.cognito.getOpenIdToken(function(err, data) {
                    if (!err) {
                        self.cacheId(data);
                        self.params.WebIdentityToken = data.Token;
                        self.webIdentityCredentials.refresh(function(webErr) {
                            if (!webErr) {
                                self.data = self.webIdentityCredentials.data;
                                self.sts.credentialsFrom(self.data, self);
                            }
                            callback(webErr);
                        });
                    } else {
                        self.clearIdOnNotAuthorized(err);
                        callback(err);
                    }
                });
            },
            loadCachedId: function loadCachedId() {
                var self = this;
                if (AWS.util.isBrowser() && !self.params.IdentityId) {
                    var id = self.getStorage("id");
                    if (id && self.params.Logins) {
                        var actualProviders = Object.keys(self.params.Logins);
                        var cachedProviders = (self.getStorage("providers") || "").split(",");
                        var intersect = cachedProviders.filter(function(n) {
                            return actualProviders.indexOf(n) !== -1;
                        });
                        if (intersect.length !== 0) {
                            self.params.IdentityId = id;
                        }
                    } else if (id) {
                        self.params.IdentityId = id;
                    }
                }
            },
            createClients: function() {
                var clientConfig = this._clientConfig;
                this.webIdentityCredentials = this.webIdentityCredentials || new AWS.WebIdentityCredentials(this.params, clientConfig);
                if (!this.cognito) {
                    var cognitoConfig = AWS.util.merge({}, clientConfig);
                    cognitoConfig.params = this.params;
                    this.cognito = new AWS.CognitoIdentity(cognitoConfig);
                }
                this.sts = this.sts || new AWS.STS(clientConfig);
            },
            cacheId: function cacheId(data) {
                this._identityId = data.IdentityId;
                this.params.IdentityId = this._identityId;
                if (AWS.util.isBrowser()) {
                    this.setStorage("id", data.IdentityId);
                    if (this.params.Logins) {
                        this.setStorage("providers", Object.keys(this.params.Logins).join(","));
                    }
                }
            },
            getStorage: function getStorage(key) {
                return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || "")];
            },
            setStorage: function setStorage(key, val) {
                try {
                    this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || "")] = val;
                } catch (_) {}
            },
            storage: function() {
                try {
                    var storage = AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === "object" ? window.localStorage : {};
                    storage["aws.test-storage"] = "foobar";
                    delete storage["aws.test-storage"];
                    return storage;
                } catch (_) {
                    return {};
                }
            }()
        });
    }, {
        "../core": 44
    } ],
    46: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
            constructor: function ChainableTemporaryCredentials(options) {
                AWS.Credentials.call(this);
                options = options || {};
                this.errorCode = "ChainableTemporaryCredentialsProviderFailure";
                this.expired = true;
                this.tokenCodeFn = null;
                var params = AWS.util.copy(options.params) || {};
                if (params.RoleArn) {
                    params.RoleSessionName = params.RoleSessionName || "temporary-credentials";
                }
                if (params.SerialNumber) {
                    if (!options.tokenCodeFn || typeof options.tokenCodeFn !== "function") {
                        throw new AWS.util.error(new Error("tokenCodeFn must be a function when params.SerialNumber is given"), {
                            code: this.errorCode
                        });
                    } else {
                        this.tokenCodeFn = options.tokenCodeFn;
                    }
                }
                var config = AWS.util.merge({
                    params: params,
                    credentials: options.masterCredentials || AWS.config.credentials
                }, options.stsConfig || {});
                this.service = new AWS.STS(config);
            },
            refresh: function refresh(callback) {
                this.coalesceRefresh(callback || AWS.util.fn.callback);
            },
            load: function load(callback) {
                var self = this;
                var operation = self.service.config.params.RoleArn ? "assumeRole" : "getSessionToken";
                this.getTokenCode(function(err, tokenCode) {
                    var params = {};
                    if (err) {
                        callback(err);
                        return;
                    }
                    if (tokenCode) {
                        params.TokenCode = tokenCode;
                    }
                    self.service[operation](params, function(err, data) {
                        if (!err) {
                            self.service.credentialsFrom(data, self);
                        }
                        callback(err);
                    });
                });
            },
            getTokenCode: function getTokenCode(callback) {
                var self = this;
                if (this.tokenCodeFn) {
                    this.tokenCodeFn(this.service.config.params.SerialNumber, function(err, token) {
                        if (err) {
                            var message = err;
                            if (err instanceof Error) {
                                message = err.message;
                            }
                            callback(AWS.util.error(new Error("Error fetching MFA token: " + message), {
                                code: self.errorCode
                            }));
                            return;
                        }
                        callback(null, token);
                    });
                } else {
                    callback(null);
                }
            }
        });
    }, {
        "../core": 44
    } ],
    34: [ function(require, module, exports) {
        var Hmac = require("./browserHmac");
        var Md5 = require("./browserMd5");
        var Sha1 = require("./browserSha1");
        var Sha256 = require("./browserSha256");
        module.exports = exports = {
            createHash: function createHash(alg) {
                alg = alg.toLowerCase();
                if (alg === "md5") {
                    return new Md5();
                } else if (alg === "sha256") {
                    return new Sha256();
                } else if (alg === "sha1") {
                    return new Sha1();
                }
                throw new Error("Hash algorithm " + alg + " is not supported in the browser SDK");
            },
            createHmac: function createHmac(alg, key) {
                alg = alg.toLowerCase();
                if (alg === "md5") {
                    return new Hmac(Md5, key);
                } else if (alg === "sha256") {
                    return new Hmac(Sha256, key);
                } else if (alg === "sha1") {
                    return new Hmac(Sha1, key);
                }
                throw new Error("HMAC algorithm " + alg + " is not supported in the browser SDK");
            },
            createSign: function() {
                throw new Error("createSign is not implemented in the browser");
            }
        };
    }, {
        "./browserHmac": 36,
        "./browserMd5": 37,
        "./browserSha1": 38,
        "./browserSha256": 39
    } ],
    39: [ function(require, module, exports) {
        var Buffer = require("buffer/").Buffer;
        var hashUtils = require("./browserHashUtils");
        var BLOCK_SIZE = 64;
        var DIGEST_LENGTH = 32;
        var KEY = new Uint32Array([ 1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298 ]);
        var INIT = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ];
        var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
        function Sha256() {
            this.state = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ];
            this.temp = new Int32Array(64);
            this.buffer = new Uint8Array(64);
            this.bufferLength = 0;
            this.bytesHashed = 0;
            this.finished = false;
        }
        module.exports = exports = Sha256;
        Sha256.BLOCK_SIZE = BLOCK_SIZE;
        Sha256.prototype.update = function(data) {
            if (this.finished) {
                throw new Error("Attempted to update an already finished hash.");
            }
            if (hashUtils.isEmptyData(data)) {
                return this;
            }
            data = hashUtils.convertToBuffer(data);
            var position = 0;
            var byteLength = data.byteLength;
            this.bytesHashed += byteLength;
            if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
                throw new Error("Cannot hash more than 2^53 - 1 bits");
            }
            while (byteLength > 0) {
                this.buffer[this.bufferLength++] = data[position++];
                byteLength--;
                if (this.bufferLength === BLOCK_SIZE) {
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
            }
            return this;
        };
        Sha256.prototype.digest = function(encoding) {
            if (!this.finished) {
                var bitsHashed = this.bytesHashed * 8;
                var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
                var undecoratedLength = this.bufferLength;
                bufferView.setUint8(this.bufferLength++, 128);
                if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
                    for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
                        bufferView.setUint8(i, 0);
                    }
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
                for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
                    bufferView.setUint8(i, 0);
                }
                bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
                bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
                this.hashBuffer();
                this.finished = true;
            }
            var out = new Buffer(DIGEST_LENGTH);
            for (var i = 0; i < 8; i++) {
                out[i * 4] = this.state[i] >>> 24 & 255;
                out[i * 4 + 1] = this.state[i] >>> 16 & 255;
                out[i * 4 + 2] = this.state[i] >>> 8 & 255;
                out[i * 4 + 3] = this.state[i] >>> 0 & 255;
            }
            return encoding ? out.toString(encoding) : out;
        };
        Sha256.prototype.hashBuffer = function() {
            var _a = this, buffer = _a.buffer, state = _a.state;
            var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
            for (var i = 0; i < BLOCK_SIZE; i++) {
                if (i < 16) {
                    this.temp[i] = (buffer[i * 4] & 255) << 24 | (buffer[i * 4 + 1] & 255) << 16 | (buffer[i * 4 + 2] & 255) << 8 | buffer[i * 4 + 3] & 255;
                } else {
                    var u = this.temp[i - 2];
                    var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                    u = this.temp[i - 15];
                    var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                    this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
                }
                var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (KEY[i] + this.temp[i] | 0) | 0) | 0;
                var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
                state7 = state6;
                state6 = state5;
                state5 = state4;
                state4 = state3 + t1 | 0;
                state3 = state2;
                state2 = state1;
                state1 = state0;
                state0 = t1 + t2 | 0;
            }
            state[0] += state0;
            state[1] += state1;
            state[2] += state2;
            state[3] += state3;
            state[4] += state4;
            state[5] += state5;
            state[6] += state6;
            state[7] += state7;
        };
    }, {
        "./browserHashUtils": 35,
        "buffer/": 6
    } ],
    38: [ function(require, module, exports) {
        var Buffer = require("buffer/").Buffer;
        var hashUtils = require("./browserHashUtils");
        var BLOCK_SIZE = 64;
        var DIGEST_LENGTH = 20;
        var KEY = new Uint32Array([ 1518500249, 1859775393, 2400959708 | 0, 3395469782 | 0 ]);
        var INIT = [ 1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225 ];
        var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
        function Sha1() {
            this.h0 = 1732584193;
            this.h1 = 4023233417;
            this.h2 = 2562383102;
            this.h3 = 271733878;
            this.h4 = 3285377520;
            this.block = new Uint32Array(80);
            this.offset = 0;
            this.shift = 24;
            this.totalLength = 0;
        }
        module.exports = exports = Sha1;
        Sha1.BLOCK_SIZE = BLOCK_SIZE;
        Sha1.prototype.update = function(data) {
            if (this.finished) {
                throw new Error("Attempted to update an already finished hash.");
            }
            if (hashUtils.isEmptyData(data)) {
                return this;
            }
            data = hashUtils.convertToBuffer(data);
            var length = data.length;
            this.totalLength += length * 8;
            for (var i = 0; i < length; i++) {
                this.write(data[i]);
            }
            return this;
        };
        Sha1.prototype.write = function write(byte) {
            this.block[this.offset] |= (byte & 255) << this.shift;
            if (this.shift) {
                this.shift -= 8;
            } else {
                this.offset++;
                this.shift = 24;
            }
            if (this.offset === 16) this.processBlock();
        };
        Sha1.prototype.digest = function(encoding) {
            this.write(128);
            if (this.offset > 14 || this.offset === 14 && this.shift < 24) {
                this.processBlock();
            }
            this.offset = 14;
            this.shift = 24;
            this.write(0);
            this.write(0);
            this.write(this.totalLength > 0xffffffffff ? this.totalLength / 1099511627776 : 0);
            this.write(this.totalLength > 4294967295 ? this.totalLength / 4294967296 : 0);
            for (var s = 24; s >= 0; s -= 8) {
                this.write(this.totalLength >> s);
            }
            var out = new Buffer(DIGEST_LENGTH);
            var outView = new DataView(out.buffer);
            outView.setUint32(0, this.h0, false);
            outView.setUint32(4, this.h1, false);
            outView.setUint32(8, this.h2, false);
            outView.setUint32(12, this.h3, false);
            outView.setUint32(16, this.h4, false);
            return encoding ? out.toString(encoding) : out;
        };
        Sha1.prototype.processBlock = function processBlock() {
            for (var i = 16; i < 80; i++) {
                var w = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];
                this.block[i] = w << 1 | w >>> 31;
            }
            var a = this.h0;
            var b = this.h1;
            var c = this.h2;
            var d = this.h3;
            var e = this.h4;
            var f, k;
            for (i = 0; i < 80; i++) {
                if (i < 20) {
                    f = d ^ b & (c ^ d);
                    k = 1518500249;
                } else if (i < 40) {
                    f = b ^ c ^ d;
                    k = 1859775393;
                } else if (i < 60) {
                    f = b & c | d & (b | c);
                    k = 2400959708;
                } else {
                    f = b ^ c ^ d;
                    k = 3395469782;
                }
                var temp = (a << 5 | a >>> 27) + f + e + k + (this.block[i] | 0);
                e = d;
                d = c;
                c = b << 30 | b >>> 2;
                b = a;
                a = temp;
            }
            this.h0 = this.h0 + a | 0;
            this.h1 = this.h1 + b | 0;
            this.h2 = this.h2 + c | 0;
            this.h3 = this.h3 + d | 0;
            this.h4 = this.h4 + e | 0;
            this.offset = 0;
            for (i = 0; i < 16; i++) {
                this.block[i] = 0;
            }
        };
    }, {
        "./browserHashUtils": 35,
        "buffer/": 6
    } ],
    37: [ function(require, module, exports) {
        var hashUtils = require("./browserHashUtils");
        var Buffer = require("buffer/").Buffer;
        var BLOCK_SIZE = 64;
        var DIGEST_LENGTH = 16;
        var INIT = [ 1732584193, 4023233417, 2562383102, 271733878 ];
        function Md5() {
            this.state = [ 1732584193, 4023233417, 2562383102, 271733878 ];
            this.buffer = new DataView(new ArrayBuffer(BLOCK_SIZE));
            this.bufferLength = 0;
            this.bytesHashed = 0;
            this.finished = false;
        }
        module.exports = exports = Md5;
        Md5.BLOCK_SIZE = BLOCK_SIZE;
        Md5.prototype.update = function(sourceData) {
            if (hashUtils.isEmptyData(sourceData)) {
                return this;
            } else if (this.finished) {
                throw new Error("Attempted to update an already finished hash.");
            }
            var data = hashUtils.convertToBuffer(sourceData);
            var position = 0;
            var byteLength = data.byteLength;
            this.bytesHashed += byteLength;
            while (byteLength > 0) {
                this.buffer.setUint8(this.bufferLength++, data[position++]);
                byteLength--;
                if (this.bufferLength === BLOCK_SIZE) {
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
            }
            return this;
        };
        Md5.prototype.digest = function(encoding) {
            if (!this.finished) {
                var _a = this, buffer = _a.buffer, undecoratedLength = _a.bufferLength, bytesHashed = _a.bytesHashed;
                var bitsHashed = bytesHashed * 8;
                buffer.setUint8(this.bufferLength++, 128);
                if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
                    for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
                        buffer.setUint8(i, 0);
                    }
                    this.hashBuffer();
                    this.bufferLength = 0;
                }
                for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
                    buffer.setUint8(i, 0);
                }
                buffer.setUint32(BLOCK_SIZE - 8, bitsHashed >>> 0, true);
                buffer.setUint32(BLOCK_SIZE - 4, Math.floor(bitsHashed / 4294967296), true);
                this.hashBuffer();
                this.finished = true;
            }
            var out = new DataView(new ArrayBuffer(DIGEST_LENGTH));
            for (var i = 0; i < 4; i++) {
                out.setUint32(i * 4, this.state[i], true);
            }
            var buff = new Buffer(out.buffer, out.byteOffset, out.byteLength);
            return encoding ? buff.toString(encoding) : buff;
        };
        Md5.prototype.hashBuffer = function() {
            var _a = this, buffer = _a.buffer, state = _a.state;
            var a = state[0], b = state[1], c = state[2], d = state[3];
            a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 3614090360);
            d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 3905402710);
            c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 606105819);
            b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 3250441966);
            a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 4118548399);
            d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 1200080426);
            c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 2821735955);
            b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 4249261313);
            a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 1770035416);
            d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 2336552879);
            c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 4294925233);
            b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 2304563134);
            a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 1804603682);
            d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 4254626195);
            c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 2792965006);
            b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 1236535329);
            a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 4129170786);
            d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 3225465664);
            c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 643717713);
            b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 3921069994);
            a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 3593408605);
            d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 38016083);
            c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 3634488961);
            b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 3889429448);
            a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 568446438);
            d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 3275163606);
            c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 4107603335);
            b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 1163531501);
            a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 2850285829);
            d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 4243563512);
            c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 1735328473);
            b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 2368359562);
            a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 4294588738);
            d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 2272392833);
            c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 1839030562);
            b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 4259657740);
            a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 2763975236);
            d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 1272893353);
            c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 4139469664);
            b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 3200236656);
            a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 681279174);
            d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 3936430074);
            c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 3572445317);
            b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 76029189);
            a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 3654602809);
            d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 3873151461);
            c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 530742520);
            b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 3299628645);
            a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 4096336452);
            d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 1126891415);
            c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 2878612391);
            b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 4237533241);
            a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 1700485571);
            d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 2399980690);
            c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 4293915773);
            b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 2240044497);
            a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 1873313359);
            d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 4264355552);
            c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 2734768916);
            b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 1309151649);
            a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 4149444226);
            d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 3174756917);
            c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 718787259);
            b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 3951481745);
            state[0] = a + state[0] & 4294967295;
            state[1] = b + state[1] & 4294967295;
            state[2] = c + state[2] & 4294967295;
            state[3] = d + state[3] & 4294967295;
        };
        function cmn(q, a, b, x, s, t) {
            a = (a + q & 4294967295) + (x + t & 4294967295) & 4294967295;
            return (a << s | a >>> 32 - s) + b & 4294967295;
        }
        function ff(a, b, c, d, x, s, t) {
            return cmn(b & c | ~b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t) {
            return cmn(b & d | c & ~d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t) {
            return cmn(b ^ c ^ d, a, b, x, s, t);
        }
        function ii(a, b, c, d, x, s, t) {
            return cmn(c ^ (b | ~d), a, b, x, s, t);
        }
    }, {
        "./browserHashUtils": 35,
        "buffer/": 6
    } ],
    36: [ function(require, module, exports) {
        var hashUtils = require("./browserHashUtils");
        function Hmac(hashCtor, secret) {
            this.hash = new hashCtor();
            this.outer = new hashCtor();
            var inner = bufferFromSecret(hashCtor, secret);
            var outer = new Uint8Array(hashCtor.BLOCK_SIZE);
            outer.set(inner);
            for (var i = 0; i < hashCtor.BLOCK_SIZE; i++) {
                inner[i] ^= 54;
                outer[i] ^= 92;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            for (var i = 0; i < inner.byteLength; i++) {
                inner[i] = 0;
            }
        }
        module.exports = exports = Hmac;
        Hmac.prototype.update = function(toHash) {
            if (hashUtils.isEmptyData(toHash) || this.error) {
                return this;
            }
            try {
                this.hash.update(hashUtils.convertToBuffer(toHash));
            } catch (e) {
                this.error = e;
            }
            return this;
        };
        Hmac.prototype.digest = function(encoding) {
            if (!this.outer.finished) {
                this.outer.update(this.hash.digest());
            }
            return this.outer.digest(encoding);
        };
        function bufferFromSecret(hashCtor, secret) {
            var input = hashUtils.convertToBuffer(secret);
            if (input.byteLength > hashCtor.BLOCK_SIZE) {
                var bufferHash = new hashCtor();
                bufferHash.update(input);
                input = bufferHash.digest();
            }
            var buffer = new Uint8Array(hashCtor.BLOCK_SIZE);
            buffer.set(input);
            return buffer;
        }
    }, {
        "./browserHashUtils": 35
    } ],
    35: [ function(require, module, exports) {
        var Buffer = require("buffer/").Buffer;
        if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "undefined") {
            ArrayBuffer.isView = function(arg) {
                return viewStrings.indexOf(Object.prototype.toString.call(arg)) > -1;
            };
        }
        var viewStrings = [ "[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]", "[object DataView]" ];
        function isEmptyData(data) {
            if (typeof data === "string") {
                return data.length === 0;
            }
            return data.byteLength === 0;
        }
        function convertToBuffer(data) {
            if (typeof data === "string") {
                data = new Buffer(data, "utf8");
            }
            if (ArrayBuffer.isView(data)) {
                return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
            }
            return new Uint8Array(data);
        }
        module.exports = exports = {
            isEmptyData: isEmptyData,
            convertToBuffer: convertToBuffer
        };
    }, {
        "buffer/": 6
    } ],
    20: [ function(require, module, exports) {
        var punycode = require("punycode");
        exports.parse = urlParse;
        exports.resolve = urlResolve;
        exports.resolveObject = urlResolveObject;
        exports.format = urlFormat;
        exports.Url = Url;
        function Url() {
            this.protocol = null;
            this.slashes = null;
            this.auth = null;
            this.host = null;
            this.port = null;
            this.hostname = null;
            this.hash = null;
            this.search = null;
            this.query = null;
            this.pathname = null;
            this.path = null;
            this.href = null;
        }
        var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, delims = [ "<", ">", '"', "`", " ", "\r", "\n", "\t" ], unwise = [ "{", "}", "|", "\\", "^", "`" ].concat(delims), autoEscape = [ "'" ].concat(unwise), nonHostChars = [ "%", "/", "?", ";", "#" ].concat(autoEscape), hostEndingChars = [ "/", "?", "#" ], hostnameMaxLen = 255, hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/, unsafeProtocol = {
            javascript: true,
            "javascript:": true
        }, hostlessProtocol = {
            javascript: true,
            "javascript:": true
        }, slashedProtocol = {
            http: true,
            https: true,
            ftp: true,
            gopher: true,
            file: true,
            "http:": true,
            "https:": true,
            "ftp:": true,
            "gopher:": true,
            "file:": true
        }, querystring = require("querystring");
        function urlParse(url, parseQueryString, slashesDenoteHost) {
            if (url && isObject(url) && url instanceof Url) return url;
            var u = new Url();
            u.parse(url, parseQueryString, slashesDenoteHost);
            return u;
        }
        Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
            if (!isString(url)) {
                throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
            }
            var rest = url;
            rest = rest.trim();
            var proto = protocolPattern.exec(rest);
            if (proto) {
                proto = proto[0];
                var lowerProto = proto.toLowerCase();
                this.protocol = lowerProto;
                rest = rest.substr(proto.length);
            }
            if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                var slashes = rest.substr(0, 2) === "//";
                if (slashes && !(proto && hostlessProtocol[proto])) {
                    rest = rest.substr(2);
                    this.slashes = true;
                }
            }
            if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
                var hostEnd = -1;
                for (var i = 0; i < hostEndingChars.length; i++) {
                    var hec = rest.indexOf(hostEndingChars[i]);
                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
                }
                var auth, atSign;
                if (hostEnd === -1) {
                    atSign = rest.lastIndexOf("@");
                } else {
                    atSign = rest.lastIndexOf("@", hostEnd);
                }
                if (atSign !== -1) {
                    auth = rest.slice(0, atSign);
                    rest = rest.slice(atSign + 1);
                    this.auth = decodeURIComponent(auth);
                }
                hostEnd = -1;
                for (var i = 0; i < nonHostChars.length; i++) {
                    var hec = rest.indexOf(nonHostChars[i]);
                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
                }
                if (hostEnd === -1) hostEnd = rest.length;
                this.host = rest.slice(0, hostEnd);
                rest = rest.slice(hostEnd);
                this.parseHost();
                this.hostname = this.hostname || "";
                var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
                if (!ipv6Hostname) {
                    var hostparts = this.hostname.split(/\./);
                    for (var i = 0, l = hostparts.length; i < l; i++) {
                        var part = hostparts[i];
                        if (!part) continue;
                        if (!part.match(hostnamePartPattern)) {
                            var newpart = "";
                            for (var j = 0, k = part.length; j < k; j++) {
                                if (part.charCodeAt(j) > 127) {
                                    newpart += "x";
                                } else {
                                    newpart += part[j];
                                }
                            }
                            if (!newpart.match(hostnamePartPattern)) {
                                var validParts = hostparts.slice(0, i);
                                var notHost = hostparts.slice(i + 1);
                                var bit = part.match(hostnamePartStart);
                                if (bit) {
                                    validParts.push(bit[1]);
                                    notHost.unshift(bit[2]);
                                }
                                if (notHost.length) {
                                    rest = "/" + notHost.join(".") + rest;
                                }
                                this.hostname = validParts.join(".");
                                break;
                            }
                        }
                    }
                }
                if (this.hostname.length > hostnameMaxLen) {
                    this.hostname = "";
                } else {
                    this.hostname = this.hostname.toLowerCase();
                }
                if (!ipv6Hostname) {
                    var domainArray = this.hostname.split(".");
                    var newOut = [];
                    for (var i = 0; i < domainArray.length; ++i) {
                        var s = domainArray[i];
                        newOut.push(s.match(/[^A-Za-z0-9_-]/) ? "xn--" + punycode.encode(s) : s);
                    }
                    this.hostname = newOut.join(".");
                }
                var p = this.port ? ":" + this.port : "";
                var h = this.hostname || "";
                this.host = h + p;
                this.href += this.host;
                if (ipv6Hostname) {
                    this.hostname = this.hostname.substr(1, this.hostname.length - 2);
                    if (rest[0] !== "/") {
                        rest = "/" + rest;
                    }
                }
            }
            if (!unsafeProtocol[lowerProto]) {
                for (var i = 0, l = autoEscape.length; i < l; i++) {
                    var ae = autoEscape[i];
                    var esc = encodeURIComponent(ae);
                    if (esc === ae) {
                        esc = escape(ae);
                    }
                    rest = rest.split(ae).join(esc);
                }
            }
            var hash = rest.indexOf("#");
            if (hash !== -1) {
                this.hash = rest.substr(hash);
                rest = rest.slice(0, hash);
            }
            var qm = rest.indexOf("?");
            if (qm !== -1) {
                this.search = rest.substr(qm);
                this.query = rest.substr(qm + 1);
                if (parseQueryString) {
                    this.query = querystring.parse(this.query);
                }
                rest = rest.slice(0, qm);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            if (rest) this.pathname = rest;
            if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
                this.pathname = "/";
            }
            if (this.pathname || this.search) {
                var p = this.pathname || "";
                var s = this.search || "";
                this.path = p + s;
            }
            this.href = this.format();
            return this;
        };
        function urlFormat(obj) {
            if (isString(obj)) obj = urlParse(obj);
            if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
            return obj.format();
        }
        Url.prototype.format = function() {
            var auth = this.auth || "";
            if (auth) {
                auth = encodeURIComponent(auth);
                auth = auth.replace(/%3A/i, ":");
                auth += "@";
            }
            var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
            if (this.host) {
                host = auth + this.host;
            } else if (this.hostname) {
                host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
                if (this.port) {
                    host += ":" + this.port;
                }
            }
            if (this.query && isObject(this.query) && Object.keys(this.query).length) {
                query = querystring.stringify(this.query);
            }
            var search = this.search || query && "?" + query || "";
            if (protocol && protocol.substr(-1) !== ":") protocol += ":";
            if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
                host = "//" + (host || "");
                if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
            } else if (!host) {
                host = "";
            }
            if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
            if (search && search.charAt(0) !== "?") search = "?" + search;
            pathname = pathname.replace(/[?#]/g, function(match) {
                return encodeURIComponent(match);
            });
            search = search.replace("#", "%23");
            return protocol + host + pathname + search + hash;
        };
        function urlResolve(source, relative) {
            return urlParse(source, false, true).resolve(relative);
        }
        Url.prototype.resolve = function(relative) {
            return this.resolveObject(urlParse(relative, false, true)).format();
        };
        function urlResolveObject(source, relative) {
            if (!source) return relative;
            return urlParse(source, false, true).resolveObject(relative);
        }
        Url.prototype.resolveObject = function(relative) {
            if (isString(relative)) {
                var rel = new Url();
                rel.parse(relative, false, true);
                relative = rel;
            }
            var result = new Url();
            Object.keys(this).forEach(function(k) {
                result[k] = this[k];
            }, this);
            result.hash = relative.hash;
            if (relative.href === "") {
                result.href = result.format();
                return result;
            }
            if (relative.slashes && !relative.protocol) {
                Object.keys(relative).forEach(function(k) {
                    if (k !== "protocol") result[k] = relative[k];
                });
                if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
                    result.path = result.pathname = "/";
                }
                result.href = result.format();
                return result;
            }
            if (relative.protocol && relative.protocol !== result.protocol) {
                if (!slashedProtocol[relative.protocol]) {
                    Object.keys(relative).forEach(function(k) {
                        result[k] = relative[k];
                    });
                    result.href = result.format();
                    return result;
                }
                result.protocol = relative.protocol;
                if (!relative.host && !hostlessProtocol[relative.protocol]) {
                    var relPath = (relative.pathname || "").split("/");
                    while (relPath.length && !(relative.host = relPath.shift())) ;
                    if (!relative.host) relative.host = "";
                    if (!relative.hostname) relative.hostname = "";
                    if (relPath[0] !== "") relPath.unshift("");
                    if (relPath.length < 2) relPath.unshift("");
                    result.pathname = relPath.join("/");
                } else {
                    result.pathname = relative.pathname;
                }
                result.search = relative.search;
                result.query = relative.query;
                result.host = relative.host || "";
                result.auth = relative.auth;
                result.hostname = relative.hostname || relative.host;
                result.port = relative.port;
                if (result.pathname || result.search) {
                    var p = result.pathname || "";
                    var s = result.search || "";
                    result.path = p + s;
                }
                result.slashes = result.slashes || relative.slashes;
                result.href = result.format();
                return result;
            }
            var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
            if (psychotic) {
                result.hostname = "";
                result.port = null;
                if (result.host) {
                    if (srcPath[0] === "") srcPath[0] = result.host; else srcPath.unshift(result.host);
                }
                result.host = "";
                if (relative.protocol) {
                    relative.hostname = null;
                    relative.port = null;
                    if (relative.host) {
                        if (relPath[0] === "") relPath[0] = relative.host; else relPath.unshift(relative.host);
                    }
                    relative.host = null;
                }
                mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
            }
            if (isRelAbs) {
                result.host = relative.host || relative.host === "" ? relative.host : result.host;
                result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
                result.search = relative.search;
                result.query = relative.query;
                srcPath = relPath;
            } else if (relPath.length) {
                if (!srcPath) srcPath = [];
                srcPath.pop();
                srcPath = srcPath.concat(relPath);
                result.search = relative.search;
                result.query = relative.query;
            } else if (!isNullOrUndefined(relative.search)) {
                if (psychotic) {
                    result.hostname = result.host = srcPath.shift();
                    var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
                    if (authInHost) {
                        result.auth = authInHost.shift();
                        result.host = result.hostname = authInHost.shift();
                    }
                }
                result.search = relative.search;
                result.query = relative.query;
                if (!isNull(result.pathname) || !isNull(result.search)) {
                    result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
                }
                result.href = result.format();
                return result;
            }
            if (!srcPath.length) {
                result.pathname = null;
                if (result.search) {
                    result.path = "/" + result.search;
                } else {
                    result.path = null;
                }
                result.href = result.format();
                return result;
            }
            var last = srcPath.slice(-1)[0];
            var hasTrailingSlash = (result.host || relative.host) && (last === "." || last === "..") || last === "";
            var up = 0;
            for (var i = srcPath.length; i >= 0; i--) {
                last = srcPath[i];
                if (last == ".") {
                    srcPath.splice(i, 1);
                } else if (last === "..") {
                    srcPath.splice(i, 1);
                    up++;
                } else if (up) {
                    srcPath.splice(i, 1);
                    up--;
                }
            }
            if (!mustEndAbs && !removeAllDots) {
                for (;up--; up) {
                    srcPath.unshift("..");
                }
            }
            if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
                srcPath.unshift("");
            }
            if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
                srcPath.push("");
            }
            var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
            if (psychotic) {
                result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
                var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
                if (authInHost) {
                    result.auth = authInHost.shift();
                    result.host = result.hostname = authInHost.shift();
                }
            }
            mustEndAbs = mustEndAbs || result.host && srcPath.length;
            if (mustEndAbs && !isAbsolute) {
                srcPath.unshift("");
            }
            if (!srcPath.length) {
                result.pathname = null;
                result.path = null;
            } else {
                result.pathname = srcPath.join("/");
            }
            if (!isNull(result.pathname) || !isNull(result.search)) {
                result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
            }
            result.auth = relative.auth || result.auth;
            result.slashes = result.slashes || relative.slashes;
            result.href = result.format();
            return result;
        };
        Url.prototype.parseHost = function() {
            var host = this.host;
            var port = portPattern.exec(host);
            if (port) {
                port = port[0];
                if (port !== ":") {
                    this.port = port.substr(1);
                }
                host = host.substr(0, host.length - port.length);
            }
            if (host) this.hostname = host;
        };
        function isString(arg) {
            return typeof arg === "string";
        }
        function isObject(arg) {
            return typeof arg === "object" && arg !== null;
        }
        function isNull(arg) {
            return arg === null;
        }
        function isNullOrUndefined(arg) {
            return arg == null;
        }
    }, {
        punycode: 12,
        querystring: 15
    } ],
    18: [ function(require, module, exports) {
        arguments[4][15][0].apply(exports, arguments);
    }, {
        "./decode": 16,
        "./encode": 17,
        dup: 15
    } ],
    17: [ function(require, module, exports) {
        "use strict";
        var stringifyPrimitive = function(v) {
            switch (typeof v) {
              case "string":
                return v;

              case "boolean":
                return v ? "true" : "false";

              case "number":
                return isFinite(v) ? v : "";

              default:
                return "";
            }
        };
        module.exports = function(obj, sep, eq, name) {
            sep = sep || "&";
            eq = eq || "=";
            if (obj === null) {
                obj = undefined;
            }
            if (typeof obj === "object") {
                return Object.keys(obj).map(function(k) {
                    var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                    if (Array.isArray(obj[k])) {
                        return obj[k].map(function(v) {
                            return ks + encodeURIComponent(stringifyPrimitive(v));
                        }).join(sep);
                    } else {
                        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                    }
                }).join(sep);
            }
            if (!name) return "";
            return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
        };
    }, {} ],
    16: [ function(require, module, exports) {
        "use strict";
        function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
        }
        module.exports = function(qs, sep, eq, options) {
            sep = sep || "&";
            eq = eq || "=";
            var obj = {};
            if (typeof qs !== "string" || qs.length === 0) {
                return obj;
            }
            var regexp = /\+/g;
            qs = qs.split(sep);
            var maxKeys = 1e3;
            if (options && typeof options.maxKeys === "number") {
                maxKeys = options.maxKeys;
            }
            var len = qs.length;
            if (maxKeys > 0 && len > maxKeys) {
                len = maxKeys;
            }
            for (var i = 0; i < len; ++i) {
                var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
                if (idx >= 0) {
                    kstr = x.substr(0, idx);
                    vstr = x.substr(idx + 1);
                } else {
                    kstr = x;
                    vstr = "";
                }
                k = decodeURIComponent(kstr);
                v = decodeURIComponent(vstr);
                if (!hasOwnProperty(obj, k)) {
                    obj[k] = v;
                } else if (Array.isArray(obj[k])) {
                    obj[k].push(v);
                } else {
                    obj[k] = [ obj[k], v ];
                }
            }
            return obj;
        };
    }, {} ],
    15: [ function(require, module, exports) {
        "use strict";
        exports.decode = exports.parse = require("./decode");
        exports.encode = exports.stringify = require("./encode");
    }, {
        "./decode": 13,
        "./encode": 14
    } ],
    14: [ function(require, module, exports) {
        "use strict";
        var stringifyPrimitive = function(v) {
            switch (typeof v) {
              case "string":
                return v;

              case "boolean":
                return v ? "true" : "false";

              case "number":
                return isFinite(v) ? v : "";

              default:
                return "";
            }
        };
        module.exports = function(obj, sep, eq, name) {
            sep = sep || "&";
            eq = eq || "=";
            if (obj === null) {
                obj = undefined;
            }
            if (typeof obj === "object") {
                return map(objectKeys(obj), function(k) {
                    var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                    if (isArray(obj[k])) {
                        return map(obj[k], function(v) {
                            return ks + encodeURIComponent(stringifyPrimitive(v));
                        }).join(sep);
                    } else {
                        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                    }
                }).join(sep);
            }
            if (!name) return "";
            return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
        };
        var isArray = Array.isArray || function(xs) {
            return Object.prototype.toString.call(xs) === "[object Array]";
        };
        function map(xs, f) {
            if (xs.map) return xs.map(f);
            var res = [];
            for (var i = 0; i < xs.length; i++) {
                res.push(f(xs[i], i));
            }
            return res;
        }
        var objectKeys = Object.keys || function(obj) {
            var res = [];
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
            }
            return res;
        };
    }, {} ],
    13: [ function(require, module, exports) {
        "use strict";
        function hasOwnProperty(obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
        }
        module.exports = function(qs, sep, eq, options) {
            sep = sep || "&";
            eq = eq || "=";
            var obj = {};
            if (typeof qs !== "string" || qs.length === 0) {
                return obj;
            }
            var regexp = /\+/g;
            qs = qs.split(sep);
            var maxKeys = 1e3;
            if (options && typeof options.maxKeys === "number") {
                maxKeys = options.maxKeys;
            }
            var len = qs.length;
            if (maxKeys > 0 && len > maxKeys) {
                len = maxKeys;
            }
            for (var i = 0; i < len; ++i) {
                var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
                if (idx >= 0) {
                    kstr = x.substr(0, idx);
                    vstr = x.substr(idx + 1);
                } else {
                    kstr = x;
                    vstr = "";
                }
                k = decodeURIComponent(kstr);
                v = decodeURIComponent(vstr);
                if (!hasOwnProperty(obj, k)) {
                    obj[k] = v;
                } else if (isArray(obj[k])) {
                    obj[k].push(v);
                } else {
                    obj[k] = [ obj[k], v ];
                }
            }
            return obj;
        };
        var isArray = Array.isArray || function(xs) {
            return Object.prototype.toString.call(xs) === "[object Array]";
        };
    }, {} ],
    12: [ function(require, module, exports) {
        (function(global) {
            (function() {
                (function(root) {
                    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
                    var freeModule = typeof module == "object" && module && !module.nodeType && module;
                    var freeGlobal = typeof global == "object" && global;
                    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
                        root = freeGlobal;
                    }
                    var punycode, maxInt = 2147483647, base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, errors = {
                        overflow: "Overflow: input needs wider integers to process",
                        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
                        "invalid-input": "Invalid input"
                    }, baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, key;
                    function error(type) {
                        throw RangeError(errors[type]);
                    }
                    function map(array, fn) {
                        var length = array.length;
                        var result = [];
                        while (length--) {
                            result[length] = fn(array[length]);
                        }
                        return result;
                    }
                    function mapDomain(string, fn) {
                        var parts = string.split("@");
                        var result = "";
                        if (parts.length > 1) {
                            result = parts[0] + "@";
                            string = parts[1];
                        }
                        string = string.replace(regexSeparators, ".");
                        var labels = string.split(".");
                        var encoded = map(labels, fn).join(".");
                        return result + encoded;
                    }
                    function ucs2decode(string) {
                        var output = [], counter = 0, length = string.length, value, extra;
                        while (counter < length) {
                            value = string.charCodeAt(counter++);
                            if (value >= 55296 && value <= 56319 && counter < length) {
                                extra = string.charCodeAt(counter++);
                                if ((extra & 64512) == 56320) {
                                    output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
                                } else {
                                    output.push(value);
                                    counter--;
                                }
                            } else {
                                output.push(value);
                            }
                        }
                        return output;
                    }
                    function ucs2encode(array) {
                        return map(array, function(value) {
                            var output = "";
                            if (value > 65535) {
                                value -= 65536;
                                output += stringFromCharCode(value >>> 10 & 1023 | 55296);
                                value = 56320 | value & 1023;
                            }
                            output += stringFromCharCode(value);
                            return output;
                        }).join("");
                    }
                    function basicToDigit(codePoint) {
                        if (codePoint - 48 < 10) {
                            return codePoint - 22;
                        }
                        if (codePoint - 65 < 26) {
                            return codePoint - 65;
                        }
                        if (codePoint - 97 < 26) {
                            return codePoint - 97;
                        }
                        return base;
                    }
                    function digitToBasic(digit, flag) {
                        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
                    }
                    function adapt(delta, numPoints, firstTime) {
                        var k = 0;
                        delta = firstTime ? floor(delta / damp) : delta >> 1;
                        delta += floor(delta / numPoints);
                        for (;delta > baseMinusTMin * tMax >> 1; k += base) {
                            delta = floor(delta / baseMinusTMin);
                        }
                        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                    }
                    function decode(input) {
                        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, baseMinusT;
                        basic = input.lastIndexOf(delimiter);
                        if (basic < 0) {
                            basic = 0;
                        }
                        for (j = 0; j < basic; ++j) {
                            if (input.charCodeAt(j) >= 128) {
                                error("not-basic");
                            }
                            output.push(input.charCodeAt(j));
                        }
                        for (index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
                            for (oldi = i, w = 1, k = base; ;k += base) {
                                if (index >= inputLength) {
                                    error("invalid-input");
                                }
                                digit = basicToDigit(input.charCodeAt(index++));
                                if (digit >= base || digit > floor((maxInt - i) / w)) {
                                    error("overflow");
                                }
                                i += digit * w;
                                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                                if (digit < t) {
                                    break;
                                }
                                baseMinusT = base - t;
                                if (w > floor(maxInt / baseMinusT)) {
                                    error("overflow");
                                }
                                w *= baseMinusT;
                            }
                            out = output.length + 1;
                            bias = adapt(i - oldi, out, oldi == 0);
                            if (floor(i / out) > maxInt - n) {
                                error("overflow");
                            }
                            n += floor(i / out);
                            i %= out;
                            output.splice(i++, 0, n);
                        }
                        return ucs2encode(output);
                    }
                    function encode(input) {
                        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], inputLength, handledCPCountPlusOne, baseMinusT, qMinusT;
                        input = ucs2decode(input);
                        inputLength = input.length;
                        n = initialN;
                        delta = 0;
                        bias = initialBias;
                        for (j = 0; j < inputLength; ++j) {
                            currentValue = input[j];
                            if (currentValue < 128) {
                                output.push(stringFromCharCode(currentValue));
                            }
                        }
                        handledCPCount = basicLength = output.length;
                        if (basicLength) {
                            output.push(delimiter);
                        }
                        while (handledCPCount < inputLength) {
                            for (m = maxInt, j = 0; j < inputLength; ++j) {
                                currentValue = input[j];
                                if (currentValue >= n && currentValue < m) {
                                    m = currentValue;
                                }
                            }
                            handledCPCountPlusOne = handledCPCount + 1;
                            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                                error("overflow");
                            }
                            delta += (m - n) * handledCPCountPlusOne;
                            n = m;
                            for (j = 0; j < inputLength; ++j) {
                                currentValue = input[j];
                                if (currentValue < n && ++delta > maxInt) {
                                    error("overflow");
                                }
                                if (currentValue == n) {
                                    for (q = delta, k = base; ;k += base) {
                                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                                        if (q < t) {
                                            break;
                                        }
                                        qMinusT = q - t;
                                        baseMinusT = base - t;
                                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                                        q = floor(qMinusT / baseMinusT);
                                    }
                                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                    delta = 0;
                                    ++handledCPCount;
                                }
                            }
                            ++delta;
                            ++n;
                        }
                        return output.join("");
                    }
                    function toUnicode(input) {
                        return mapDomain(input, function(string) {
                            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
                        });
                    }
                    function toASCII(input) {
                        return mapDomain(input, function(string) {
                            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
                        });
                    }
                    punycode = {
                        version: "1.3.2",
                        ucs2: {
                            decode: ucs2decode,
                            encode: ucs2encode
                        },
                        decode: decode,
                        encode: encode,
                        toASCII: toASCII,
                        toUnicode: toUnicode
                    };
                    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
                        define("punycode", function() {
                            return punycode;
                        });
                    } else if (freeExports && freeModule) {
                        if (module.exports == freeExports) {
                            freeModule.exports = punycode;
                        } else {
                            for (key in punycode) {
                                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                            }
                        }
                    } else {
                        root.punycode = punycode;
                    }
                })(this);
            }).call(this);
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {} ],
    7: [ function(require, module, exports) {
        function EventEmitter() {
            this._events = this._events || {};
            this._maxListeners = this._maxListeners || undefined;
        }
        module.exports = EventEmitter;
        EventEmitter.EventEmitter = EventEmitter;
        EventEmitter.prototype._events = undefined;
        EventEmitter.prototype._maxListeners = undefined;
        EventEmitter.defaultMaxListeners = 10;
        EventEmitter.prototype.setMaxListeners = function(n) {
            if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
            this._maxListeners = n;
            return this;
        };
        EventEmitter.prototype.emit = function(type) {
            var er, handler, len, args, i, listeners;
            if (!this._events) this._events = {};
            if (type === "error") {
                if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
                    er = arguments[1];
                    if (er instanceof Error) {
                        throw er;
                    } else {
                        var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                        err.context = er;
                        throw err;
                    }
                }
            }
            handler = this._events[type];
            if (isUndefined(handler)) return false;
            if (isFunction(handler)) {
                switch (arguments.length) {
                  case 1:
                    handler.call(this);
                    break;

                  case 2:
                    handler.call(this, arguments[1]);
                    break;

                  case 3:
                    handler.call(this, arguments[1], arguments[2]);
                    break;

                  default:
                    args = Array.prototype.slice.call(arguments, 1);
                    handler.apply(this, args);
                }
            } else if (isObject(handler)) {
                args = Array.prototype.slice.call(arguments, 1);
                listeners = handler.slice();
                len = listeners.length;
                for (i = 0; i < len; i++) listeners[i].apply(this, args);
            }
            return true;
        };
        EventEmitter.prototype.addListener = function(type, listener) {
            var m;
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            if (!this._events) this._events = {};
            if (this._events.newListener) this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener);
            if (!this._events[type]) this._events[type] = listener; else if (isObject(this._events[type])) this._events[type].push(listener); else this._events[type] = [ this._events[type], listener ];
            if (isObject(this._events[type]) && !this._events[type].warned) {
                if (!isUndefined(this._maxListeners)) {
                    m = this._maxListeners;
                } else {
                    m = EventEmitter.defaultMaxListeners;
                }
                if (m && m > 0 && this._events[type].length > m) {
                    this._events[type].warned = true;
                    console.error("(node) warning: possible EventEmitter memory " + "leak detected. %d listeners added. " + "Use emitter.setMaxListeners() to increase limit.", this._events[type].length);
                    if (typeof console.trace === "function") {
                        console.trace();
                    }
                }
            }
            return this;
        };
        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
        EventEmitter.prototype.once = function(type, listener) {
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            var fired = false;
            function g() {
                this.removeListener(type, g);
                if (!fired) {
                    fired = true;
                    listener.apply(this, arguments);
                }
            }
            g.listener = listener;
            this.on(type, g);
            return this;
        };
        EventEmitter.prototype.removeListener = function(type, listener) {
            var list, position, length, i;
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            if (!this._events || !this._events[type]) return this;
            list = this._events[type];
            length = list.length;
            position = -1;
            if (list === listener || isFunction(list.listener) && list.listener === listener) {
                delete this._events[type];
                if (this._events.removeListener) this.emit("removeListener", type, listener);
            } else if (isObject(list)) {
                for (i = length; i-- > 0; ) {
                    if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                        position = i;
                        break;
                    }
                }
                if (position < 0) return this;
                if (list.length === 1) {
                    list.length = 0;
                    delete this._events[type];
                } else {
                    list.splice(position, 1);
                }
                if (this._events.removeListener) this.emit("removeListener", type, listener);
            }
            return this;
        };
        EventEmitter.prototype.removeAllListeners = function(type) {
            var key, listeners;
            if (!this._events) return this;
            if (!this._events.removeListener) {
                if (arguments.length === 0) this._events = {}; else if (this._events[type]) delete this._events[type];
                return this;
            }
            if (arguments.length === 0) {
                for (key in this._events) {
                    if (key === "removeListener") continue;
                    this.removeAllListeners(key);
                }
                this.removeAllListeners("removeListener");
                this._events = {};
                return this;
            }
            listeners = this._events[type];
            if (isFunction(listeners)) {
                this.removeListener(type, listeners);
            } else if (listeners) {
                while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
            }
            delete this._events[type];
            return this;
        };
        EventEmitter.prototype.listeners = function(type) {
            var ret;
            if (!this._events || !this._events[type]) ret = []; else if (isFunction(this._events[type])) ret = [ this._events[type] ]; else ret = this._events[type].slice();
            return ret;
        };
        EventEmitter.prototype.listenerCount = function(type) {
            if (this._events) {
                var evlistener = this._events[type];
                if (isFunction(evlistener)) return 1; else if (evlistener) return evlistener.length;
            }
            return 0;
        };
        EventEmitter.listenerCount = function(emitter, type) {
            return emitter.listenerCount(type);
        };
        function isFunction(arg) {
            return typeof arg === "function";
        }
        function isNumber(arg) {
            return typeof arg === "number";
        }
        function isObject(arg) {
            return typeof arg === "object" && arg !== null;
        }
        function isUndefined(arg) {
            return arg === void 0;
        }
    }, {} ],
    6: [ function(require, module, exports) {
        (function(global, Buffer) {
            (function() {
                "use strict";
                var base64 = require("base64-js");
                var ieee754 = require("ieee754");
                var isArray = require("isarray");
                exports.Buffer = Buffer;
                exports.SlowBuffer = SlowBuffer;
                exports.INSPECT_MAX_BYTES = 50;
                Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
                exports.kMaxLength = kMaxLength();
                function typedArraySupport() {
                    try {
                        var arr = new Uint8Array(1);
                        arr.__proto__ = {
                            __proto__: Uint8Array.prototype,
                            foo: function() {
                                return 42;
                            }
                        };
                        return arr.foo() === 42 && typeof arr.subarray === "function" && arr.subarray(1, 1).byteLength === 0;
                    } catch (e) {
                        return false;
                    }
                }
                function kMaxLength() {
                    return Buffer.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                }
                function createBuffer(that, length) {
                    if (kMaxLength() < length) {
                        throw new RangeError("Invalid typed array length");
                    }
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        that = new Uint8Array(length);
                        that.__proto__ = Buffer.prototype;
                    } else {
                        if (that === null) {
                            that = new Buffer(length);
                        }
                        that.length = length;
                    }
                    return that;
                }
                function Buffer(arg, encodingOrOffset, length) {
                    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
                        return new Buffer(arg, encodingOrOffset, length);
                    }
                    if (typeof arg === "number") {
                        if (typeof encodingOrOffset === "string") {
                            throw new Error("If encoding is specified then the first argument must be a string");
                        }
                        return allocUnsafe(this, arg);
                    }
                    return from(this, arg, encodingOrOffset, length);
                }
                Buffer.poolSize = 8192;
                Buffer._augment = function(arr) {
                    arr.__proto__ = Buffer.prototype;
                    return arr;
                };
                function from(that, value, encodingOrOffset, length) {
                    if (typeof value === "number") {
                        throw new TypeError('"value" argument must not be a number');
                    }
                    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
                        return fromArrayBuffer(that, value, encodingOrOffset, length);
                    }
                    if (typeof value === "string") {
                        return fromString(that, value, encodingOrOffset);
                    }
                    return fromObject(that, value);
                }
                Buffer.from = function(value, encodingOrOffset, length) {
                    return from(null, value, encodingOrOffset, length);
                };
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                    Buffer.prototype.__proto__ = Uint8Array.prototype;
                    Buffer.__proto__ = Uint8Array;
                    if (typeof Symbol !== "undefined" && Symbol.species && Buffer[Symbol.species] === Buffer) {
                        Object.defineProperty(Buffer, Symbol.species, {
                            value: null,
                            configurable: true
                        });
                    }
                }
                function assertSize(size) {
                    if (typeof size !== "number") {
                        throw new TypeError('"size" argument must be a number');
                    } else if (size < 0) {
                        throw new RangeError('"size" argument must not be negative');
                    }
                }
                function alloc(that, size, fill, encoding) {
                    assertSize(size);
                    if (size <= 0) {
                        return createBuffer(that, size);
                    }
                    if (fill !== undefined) {
                        return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
                    }
                    return createBuffer(that, size);
                }
                Buffer.alloc = function(size, fill, encoding) {
                    return alloc(null, size, fill, encoding);
                };
                function allocUnsafe(that, size) {
                    assertSize(size);
                    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
                    if (!Buffer.TYPED_ARRAY_SUPPORT) {
                        for (var i = 0; i < size; ++i) {
                            that[i] = 0;
                        }
                    }
                    return that;
                }
                Buffer.allocUnsafe = function(size) {
                    return allocUnsafe(null, size);
                };
                Buffer.allocUnsafeSlow = function(size) {
                    return allocUnsafe(null, size);
                };
                function fromString(that, string, encoding) {
                    if (typeof encoding !== "string" || encoding === "") {
                        encoding = "utf8";
                    }
                    if (!Buffer.isEncoding(encoding)) {
                        throw new TypeError('"encoding" must be a valid string encoding');
                    }
                    var length = byteLength(string, encoding) | 0;
                    that = createBuffer(that, length);
                    var actual = that.write(string, encoding);
                    if (actual !== length) {
                        that = that.slice(0, actual);
                    }
                    return that;
                }
                function fromArrayLike(that, array) {
                    var length = array.length < 0 ? 0 : checked(array.length) | 0;
                    that = createBuffer(that, length);
                    for (var i = 0; i < length; i += 1) {
                        that[i] = array[i] & 255;
                    }
                    return that;
                }
                function fromArrayBuffer(that, array, byteOffset, length) {
                    array.byteLength;
                    if (byteOffset < 0 || array.byteLength < byteOffset) {
                        throw new RangeError("'offset' is out of bounds");
                    }
                    if (array.byteLength < byteOffset + (length || 0)) {
                        throw new RangeError("'length' is out of bounds");
                    }
                    if (byteOffset === undefined && length === undefined) {
                        array = new Uint8Array(array);
                    } else if (length === undefined) {
                        array = new Uint8Array(array, byteOffset);
                    } else {
                        array = new Uint8Array(array, byteOffset, length);
                    }
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        that = array;
                        that.__proto__ = Buffer.prototype;
                    } else {
                        that = fromArrayLike(that, array);
                    }
                    return that;
                }
                function fromObject(that, obj) {
                    if (Buffer.isBuffer(obj)) {
                        var len = checked(obj.length) | 0;
                        that = createBuffer(that, len);
                        if (that.length === 0) {
                            return that;
                        }
                        obj.copy(that, 0, 0, len);
                        return that;
                    }
                    if (obj) {
                        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
                            if (typeof obj.length !== "number" || isnan(obj.length)) {
                                return createBuffer(that, 0);
                            }
                            return fromArrayLike(that, obj);
                        }
                        if (obj.type === "Buffer" && isArray(obj.data)) {
                            return fromArrayLike(that, obj.data);
                        }
                    }
                    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
                }
                function checked(length) {
                    if (length >= kMaxLength()) {
                        throw new RangeError("Attempt to allocate Buffer larger than maximum " + "size: 0x" + kMaxLength().toString(16) + " bytes");
                    }
                    return length | 0;
                }
                function SlowBuffer(length) {
                    if (+length != length) {
                        length = 0;
                    }
                    return Buffer.alloc(+length);
                }
                Buffer.isBuffer = function isBuffer(b) {
                    return !!(b != null && b._isBuffer);
                };
                Buffer.compare = function compare(a, b) {
                    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                        throw new TypeError("Arguments must be Buffers");
                    }
                    if (a === b) return 0;
                    var x = a.length;
                    var y = b.length;
                    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                        if (a[i] !== b[i]) {
                            x = a[i];
                            y = b[i];
                            break;
                        }
                    }
                    if (x < y) return -1;
                    if (y < x) return 1;
                    return 0;
                };
                Buffer.isEncoding = function isEncoding(encoding) {
                    switch (String(encoding).toLowerCase()) {
                      case "hex":
                      case "utf8":
                      case "utf-8":
                      case "ascii":
                      case "latin1":
                      case "binary":
                      case "base64":
                      case "ucs2":
                      case "ucs-2":
                      case "utf16le":
                      case "utf-16le":
                        return true;

                      default:
                        return false;
                    }
                };
                Buffer.concat = function concat(list, length) {
                    if (!isArray(list)) {
                        throw new TypeError('"list" argument must be an Array of Buffers');
                    }
                    if (list.length === 0) {
                        return Buffer.alloc(0);
                    }
                    var i;
                    if (length === undefined) {
                        length = 0;
                        for (i = 0; i < list.length; ++i) {
                            length += list[i].length;
                        }
                    }
                    var buffer = Buffer.allocUnsafe(length);
                    var pos = 0;
                    for (i = 0; i < list.length; ++i) {
                        var buf = list[i];
                        if (!Buffer.isBuffer(buf)) {
                            throw new TypeError('"list" argument must be an Array of Buffers');
                        }
                        buf.copy(buffer, pos);
                        pos += buf.length;
                    }
                    return buffer;
                };
                function byteLength(string, encoding) {
                    if (Buffer.isBuffer(string)) {
                        return string.length;
                    }
                    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
                        return string.byteLength;
                    }
                    if (typeof string !== "string") {
                        string = "" + string;
                    }
                    var len = string.length;
                    if (len === 0) return 0;
                    var loweredCase = false;
                    for (;;) {
                        switch (encoding) {
                          case "ascii":
                          case "latin1":
                          case "binary":
                            return len;

                          case "utf8":
                          case "utf-8":
                          case undefined:
                            return utf8ToBytes(string).length;

                          case "ucs2":
                          case "ucs-2":
                          case "utf16le":
                          case "utf-16le":
                            return len * 2;

                          case "hex":
                            return len >>> 1;

                          case "base64":
                            return base64ToBytes(string).length;

                          default:
                            if (loweredCase) return utf8ToBytes(string).length;
                            encoding = ("" + encoding).toLowerCase();
                            loweredCase = true;
                        }
                    }
                }
                Buffer.byteLength = byteLength;
                function slowToString(encoding, start, end) {
                    var loweredCase = false;
                    if (start === undefined || start < 0) {
                        start = 0;
                    }
                    if (start > this.length) {
                        return "";
                    }
                    if (end === undefined || end > this.length) {
                        end = this.length;
                    }
                    if (end <= 0) {
                        return "";
                    }
                    end >>>= 0;
                    start >>>= 0;
                    if (end <= start) {
                        return "";
                    }
                    if (!encoding) encoding = "utf8";
                    while (true) {
                        switch (encoding) {
                          case "hex":
                            return hexSlice(this, start, end);

                          case "utf8":
                          case "utf-8":
                            return utf8Slice(this, start, end);

                          case "ascii":
                            return asciiSlice(this, start, end);

                          case "latin1":
                          case "binary":
                            return latin1Slice(this, start, end);

                          case "base64":
                            return base64Slice(this, start, end);

                          case "ucs2":
                          case "ucs-2":
                          case "utf16le":
                          case "utf-16le":
                            return utf16leSlice(this, start, end);

                          default:
                            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                            encoding = (encoding + "").toLowerCase();
                            loweredCase = true;
                        }
                    }
                }
                Buffer.prototype._isBuffer = true;
                function swap(b, n, m) {
                    var i = b[n];
                    b[n] = b[m];
                    b[m] = i;
                }
                Buffer.prototype.swap16 = function swap16() {
                    var len = this.length;
                    if (len % 2 !== 0) {
                        throw new RangeError("Buffer size must be a multiple of 16-bits");
                    }
                    for (var i = 0; i < len; i += 2) {
                        swap(this, i, i + 1);
                    }
                    return this;
                };
                Buffer.prototype.swap32 = function swap32() {
                    var len = this.length;
                    if (len % 4 !== 0) {
                        throw new RangeError("Buffer size must be a multiple of 32-bits");
                    }
                    for (var i = 0; i < len; i += 4) {
                        swap(this, i, i + 3);
                        swap(this, i + 1, i + 2);
                    }
                    return this;
                };
                Buffer.prototype.swap64 = function swap64() {
                    var len = this.length;
                    if (len % 8 !== 0) {
                        throw new RangeError("Buffer size must be a multiple of 64-bits");
                    }
                    for (var i = 0; i < len; i += 8) {
                        swap(this, i, i + 7);
                        swap(this, i + 1, i + 6);
                        swap(this, i + 2, i + 5);
                        swap(this, i + 3, i + 4);
                    }
                    return this;
                };
                Buffer.prototype.toString = function toString() {
                    var length = this.length | 0;
                    if (length === 0) return "";
                    if (arguments.length === 0) return utf8Slice(this, 0, length);
                    return slowToString.apply(this, arguments);
                };
                Buffer.prototype.equals = function equals(b) {
                    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
                    if (this === b) return true;
                    return Buffer.compare(this, b) === 0;
                };
                Buffer.prototype.inspect = function inspect() {
                    var str = "";
                    var max = exports.INSPECT_MAX_BYTES;
                    if (this.length > 0) {
                        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
                        if (this.length > max) str += " ... ";
                    }
                    return "<Buffer " + str + ">";
                };
                Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                    if (!Buffer.isBuffer(target)) {
                        throw new TypeError("Argument must be a Buffer");
                    }
                    if (start === undefined) {
                        start = 0;
                    }
                    if (end === undefined) {
                        end = target ? target.length : 0;
                    }
                    if (thisStart === undefined) {
                        thisStart = 0;
                    }
                    if (thisEnd === undefined) {
                        thisEnd = this.length;
                    }
                    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                        throw new RangeError("out of range index");
                    }
                    if (thisStart >= thisEnd && start >= end) {
                        return 0;
                    }
                    if (thisStart >= thisEnd) {
                        return -1;
                    }
                    if (start >= end) {
                        return 1;
                    }
                    start >>>= 0;
                    end >>>= 0;
                    thisStart >>>= 0;
                    thisEnd >>>= 0;
                    if (this === target) return 0;
                    var x = thisEnd - thisStart;
                    var y = end - start;
                    var len = Math.min(x, y);
                    var thisCopy = this.slice(thisStart, thisEnd);
                    var targetCopy = target.slice(start, end);
                    for (var i = 0; i < len; ++i) {
                        if (thisCopy[i] !== targetCopy[i]) {
                            x = thisCopy[i];
                            y = targetCopy[i];
                            break;
                        }
                    }
                    if (x < y) return -1;
                    if (y < x) return 1;
                    return 0;
                };
                function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
                    if (buffer.length === 0) return -1;
                    if (typeof byteOffset === "string") {
                        encoding = byteOffset;
                        byteOffset = 0;
                    } else if (byteOffset > 2147483647) {
                        byteOffset = 2147483647;
                    } else if (byteOffset < -2147483648) {
                        byteOffset = -2147483648;
                    }
                    byteOffset = +byteOffset;
                    if (isNaN(byteOffset)) {
                        byteOffset = dir ? 0 : buffer.length - 1;
                    }
                    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                    if (byteOffset >= buffer.length) {
                        if (dir) return -1; else byteOffset = buffer.length - 1;
                    } else if (byteOffset < 0) {
                        if (dir) byteOffset = 0; else return -1;
                    }
                    if (typeof val === "string") {
                        val = Buffer.from(val, encoding);
                    }
                    if (Buffer.isBuffer(val)) {
                        if (val.length === 0) {
                            return -1;
                        }
                        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                    } else if (typeof val === "number") {
                        val = val & 255;
                        if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
                            if (dir) {
                                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                            } else {
                                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                            }
                        }
                        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir);
                    }
                    throw new TypeError("val must be string, number or Buffer");
                }
                function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                    var indexSize = 1;
                    var arrLength = arr.length;
                    var valLength = val.length;
                    if (encoding !== undefined) {
                        encoding = String(encoding).toLowerCase();
                        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
                            if (arr.length < 2 || val.length < 2) {
                                return -1;
                            }
                            indexSize = 2;
                            arrLength /= 2;
                            valLength /= 2;
                            byteOffset /= 2;
                        }
                    }
                    function read(buf, i) {
                        if (indexSize === 1) {
                            return buf[i];
                        } else {
                            return buf.readUInt16BE(i * indexSize);
                        }
                    }
                    var i;
                    if (dir) {
                        var foundIndex = -1;
                        for (i = byteOffset; i < arrLength; i++) {
                            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                                if (foundIndex === -1) foundIndex = i;
                                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                            } else {
                                if (foundIndex !== -1) i -= i - foundIndex;
                                foundIndex = -1;
                            }
                        }
                    } else {
                        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                        for (i = byteOffset; i >= 0; i--) {
                            var found = true;
                            for (var j = 0; j < valLength; j++) {
                                if (read(arr, i + j) !== read(val, j)) {
                                    found = false;
                                    break;
                                }
                            }
                            if (found) return i;
                        }
                    }
                    return -1;
                }
                Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                    return this.indexOf(val, byteOffset, encoding) !== -1;
                };
                Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                };
                Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                };
                function hexWrite(buf, string, offset, length) {
                    offset = Number(offset) || 0;
                    var remaining = buf.length - offset;
                    if (!length) {
                        length = remaining;
                    } else {
                        length = Number(length);
                        if (length > remaining) {
                            length = remaining;
                        }
                    }
                    var strLen = string.length;
                    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
                    if (length > strLen / 2) {
                        length = strLen / 2;
                    }
                    for (var i = 0; i < length; ++i) {
                        var parsed = parseInt(string.substr(i * 2, 2), 16);
                        if (isNaN(parsed)) return i;
                        buf[offset + i] = parsed;
                    }
                    return i;
                }
                function utf8Write(buf, string, offset, length) {
                    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                }
                function asciiWrite(buf, string, offset, length) {
                    return blitBuffer(asciiToBytes(string), buf, offset, length);
                }
                function latin1Write(buf, string, offset, length) {
                    return asciiWrite(buf, string, offset, length);
                }
                function base64Write(buf, string, offset, length) {
                    return blitBuffer(base64ToBytes(string), buf, offset, length);
                }
                function ucs2Write(buf, string, offset, length) {
                    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                }
                Buffer.prototype.write = function write(string, offset, length, encoding) {
                    if (offset === undefined) {
                        encoding = "utf8";
                        length = this.length;
                        offset = 0;
                    } else if (length === undefined && typeof offset === "string") {
                        encoding = offset;
                        length = this.length;
                        offset = 0;
                    } else if (isFinite(offset)) {
                        offset = offset | 0;
                        if (isFinite(length)) {
                            length = length | 0;
                            if (encoding === undefined) encoding = "utf8";
                        } else {
                            encoding = length;
                            length = undefined;
                        }
                    } else {
                        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                    }
                    var remaining = this.length - offset;
                    if (length === undefined || length > remaining) length = remaining;
                    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                        throw new RangeError("Attempt to write outside buffer bounds");
                    }
                    if (!encoding) encoding = "utf8";
                    var loweredCase = false;
                    for (;;) {
                        switch (encoding) {
                          case "hex":
                            return hexWrite(this, string, offset, length);

                          case "utf8":
                          case "utf-8":
                            return utf8Write(this, string, offset, length);

                          case "ascii":
                            return asciiWrite(this, string, offset, length);

                          case "latin1":
                          case "binary":
                            return latin1Write(this, string, offset, length);

                          case "base64":
                            return base64Write(this, string, offset, length);

                          case "ucs2":
                          case "ucs-2":
                          case "utf16le":
                          case "utf-16le":
                            return ucs2Write(this, string, offset, length);

                          default:
                            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
                            encoding = ("" + encoding).toLowerCase();
                            loweredCase = true;
                        }
                    }
                };
                Buffer.prototype.toJSON = function toJSON() {
                    return {
                        type: "Buffer",
                        data: Array.prototype.slice.call(this._arr || this, 0)
                    };
                };
                function base64Slice(buf, start, end) {
                    if (start === 0 && end === buf.length) {
                        return base64.fromByteArray(buf);
                    } else {
                        return base64.fromByteArray(buf.slice(start, end));
                    }
                }
                function utf8Slice(buf, start, end) {
                    end = Math.min(buf.length, end);
                    var res = [];
                    var i = start;
                    while (i < end) {
                        var firstByte = buf[i];
                        var codePoint = null;
                        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
                        if (i + bytesPerSequence <= end) {
                            var secondByte, thirdByte, fourthByte, tempCodePoint;
                            switch (bytesPerSequence) {
                              case 1:
                                if (firstByte < 128) {
                                    codePoint = firstByte;
                                }
                                break;

                              case 2:
                                secondByte = buf[i + 1];
                                if ((secondByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                                    if (tempCodePoint > 127) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                                break;

                              case 3:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                                    if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                                break;

                              case 4:
                                secondByte = buf[i + 1];
                                thirdByte = buf[i + 2];
                                fourthByte = buf[i + 3];
                                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                                    tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                                    if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                                        codePoint = tempCodePoint;
                                    }
                                }
                            }
                        }
                        if (codePoint === null) {
                            codePoint = 65533;
                            bytesPerSequence = 1;
                        } else if (codePoint > 65535) {
                            codePoint -= 65536;
                            res.push(codePoint >>> 10 & 1023 | 55296);
                            codePoint = 56320 | codePoint & 1023;
                        }
                        res.push(codePoint);
                        i += bytesPerSequence;
                    }
                    return decodeCodePointsArray(res);
                }
                var MAX_ARGUMENTS_LENGTH = 4096;
                function decodeCodePointsArray(codePoints) {
                    var len = codePoints.length;
                    if (len <= MAX_ARGUMENTS_LENGTH) {
                        return String.fromCharCode.apply(String, codePoints);
                    }
                    var res = "";
                    var i = 0;
                    while (i < len) {
                        res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                    }
                    return res;
                }
                function asciiSlice(buf, start, end) {
                    var ret = "";
                    end = Math.min(buf.length, end);
                    for (var i = start; i < end; ++i) {
                        ret += String.fromCharCode(buf[i] & 127);
                    }
                    return ret;
                }
                function latin1Slice(buf, start, end) {
                    var ret = "";
                    end = Math.min(buf.length, end);
                    for (var i = start; i < end; ++i) {
                        ret += String.fromCharCode(buf[i]);
                    }
                    return ret;
                }
                function hexSlice(buf, start, end) {
                    var len = buf.length;
                    if (!start || start < 0) start = 0;
                    if (!end || end < 0 || end > len) end = len;
                    var out = "";
                    for (var i = start; i < end; ++i) {
                        out += toHex(buf[i]);
                    }
                    return out;
                }
                function utf16leSlice(buf, start, end) {
                    var bytes = buf.slice(start, end);
                    var res = "";
                    for (var i = 0; i < bytes.length; i += 2) {
                        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                    }
                    return res;
                }
                Buffer.prototype.slice = function slice(start, end) {
                    var len = this.length;
                    start = ~~start;
                    end = end === undefined ? len : ~~end;
                    if (start < 0) {
                        start += len;
                        if (start < 0) start = 0;
                    } else if (start > len) {
                        start = len;
                    }
                    if (end < 0) {
                        end += len;
                        if (end < 0) end = 0;
                    } else if (end > len) {
                        end = len;
                    }
                    if (end < start) end = start;
                    var newBuf;
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        newBuf = this.subarray(start, end);
                        newBuf.__proto__ = Buffer.prototype;
                    } else {
                        var sliceLen = end - start;
                        newBuf = new Buffer(sliceLen, undefined);
                        for (var i = 0; i < sliceLen; ++i) {
                            newBuf[i] = this[i + start];
                        }
                    }
                    return newBuf;
                };
                function checkOffset(offset, ext, length) {
                    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
                    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
                }
                Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                    offset = offset | 0;
                    byteLength = byteLength | 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var val = this[offset];
                    var mul = 1;
                    var i = 0;
                    while (++i < byteLength && (mul *= 256)) {
                        val += this[offset + i] * mul;
                    }
                    return val;
                };
                Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                    offset = offset | 0;
                    byteLength = byteLength | 0;
                    if (!noAssert) {
                        checkOffset(offset, byteLength, this.length);
                    }
                    var val = this[offset + --byteLength];
                    var mul = 1;
                    while (byteLength > 0 && (mul *= 256)) {
                        val += this[offset + --byteLength] * mul;
                    }
                    return val;
                };
                Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 1, this.length);
                    return this[offset];
                };
                Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    return this[offset] | this[offset + 1] << 8;
                };
                Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    return this[offset] << 8 | this[offset + 1];
                };
                Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
                };
                Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                };
                Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                    offset = offset | 0;
                    byteLength = byteLength | 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var val = this[offset];
                    var mul = 1;
                    var i = 0;
                    while (++i < byteLength && (mul *= 256)) {
                        val += this[offset + i] * mul;
                    }
                    mul *= 128;
                    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                    return val;
                };
                Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                    offset = offset | 0;
                    byteLength = byteLength | 0;
                    if (!noAssert) checkOffset(offset, byteLength, this.length);
                    var i = byteLength;
                    var mul = 1;
                    var val = this[offset + --i];
                    while (i > 0 && (mul *= 256)) {
                        val += this[offset + --i] * mul;
                    }
                    mul *= 128;
                    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                    return val;
                };
                Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 1, this.length);
                    if (!(this[offset] & 128)) return this[offset];
                    return (255 - this[offset] + 1) * -1;
                };
                Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    var val = this[offset] | this[offset + 1] << 8;
                    return val & 32768 ? val | 4294901760 : val;
                };
                Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 2, this.length);
                    var val = this[offset + 1] | this[offset] << 8;
                    return val & 32768 ? val | 4294901760 : val;
                };
                Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                };
                Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                };
                Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return ieee754.read(this, offset, true, 23, 4);
                };
                Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 4, this.length);
                    return ieee754.read(this, offset, false, 23, 4);
                };
                Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 8, this.length);
                    return ieee754.read(this, offset, true, 52, 8);
                };
                Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                    if (!noAssert) checkOffset(offset, 8, this.length);
                    return ieee754.read(this, offset, false, 52, 8);
                };
                function checkInt(buf, value, offset, ext, max, min) {
                    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
                    if (offset + ext > buf.length) throw new RangeError("Index out of range");
                }
                Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    byteLength = byteLength | 0;
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                        checkInt(this, value, offset, byteLength, maxBytes, 0);
                    }
                    var mul = 1;
                    var i = 0;
                    this[offset] = value & 255;
                    while (++i < byteLength && (mul *= 256)) {
                        this[offset + i] = value / mul & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    byteLength = byteLength | 0;
                    if (!noAssert) {
                        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                        checkInt(this, value, offset, byteLength, maxBytes, 0);
                    }
                    var i = byteLength - 1;
                    var mul = 1;
                    this[offset + i] = value & 255;
                    while (--i >= 0 && (mul *= 256)) {
                        this[offset + i] = value / mul & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
                    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
                    this[offset] = value & 255;
                    return offset + 1;
                };
                function objectWriteUInt16(buf, value, offset, littleEndian) {
                    if (value < 0) value = 65535 + value + 1;
                    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
                        buf[offset + i] = (value & 255 << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
                    }
                }
                Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value & 255;
                        this[offset + 1] = value >>> 8;
                    } else {
                        objectWriteUInt16(this, value, offset, true);
                    }
                    return offset + 2;
                };
                Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 8;
                        this[offset + 1] = value & 255;
                    } else {
                        objectWriteUInt16(this, value, offset, false);
                    }
                    return offset + 2;
                };
                function objectWriteUInt32(buf, value, offset, littleEndian) {
                    if (value < 0) value = 4294967295 + value + 1;
                    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
                        buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 255;
                    }
                }
                Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset + 3] = value >>> 24;
                        this[offset + 2] = value >>> 16;
                        this[offset + 1] = value >>> 8;
                        this[offset] = value & 255;
                    } else {
                        objectWriteUInt32(this, value, offset, true);
                    }
                    return offset + 4;
                };
                Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 24;
                        this[offset + 1] = value >>> 16;
                        this[offset + 2] = value >>> 8;
                        this[offset + 3] = value & 255;
                    } else {
                        objectWriteUInt32(this, value, offset, false);
                    }
                    return offset + 4;
                };
                Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = 0;
                    var mul = 1;
                    var sub = 0;
                    this[offset] = value & 255;
                    while (++i < byteLength && (mul *= 256)) {
                        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                            sub = 1;
                        }
                        this[offset + i] = (value / mul >> 0) - sub & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) {
                        var limit = Math.pow(2, 8 * byteLength - 1);
                        checkInt(this, value, offset, byteLength, limit - 1, -limit);
                    }
                    var i = byteLength - 1;
                    var mul = 1;
                    var sub = 0;
                    this[offset + i] = value & 255;
                    while (--i >= 0 && (mul *= 256)) {
                        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                            sub = 1;
                        }
                        this[offset + i] = (value / mul >> 0) - sub & 255;
                    }
                    return offset + byteLength;
                };
                Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
                    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
                    if (value < 0) value = 255 + value + 1;
                    this[offset] = value & 255;
                    return offset + 1;
                };
                Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value & 255;
                        this[offset + 1] = value >>> 8;
                    } else {
                        objectWriteUInt16(this, value, offset, true);
                    }
                    return offset + 2;
                };
                Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 8;
                        this[offset + 1] = value & 255;
                    } else {
                        objectWriteUInt16(this, value, offset, false);
                    }
                    return offset + 2;
                };
                Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value & 255;
                        this[offset + 1] = value >>> 8;
                        this[offset + 2] = value >>> 16;
                        this[offset + 3] = value >>> 24;
                    } else {
                        objectWriteUInt32(this, value, offset, true);
                    }
                    return offset + 4;
                };
                Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                    value = +value;
                    offset = offset | 0;
                    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
                    if (value < 0) value = 4294967295 + value + 1;
                    if (Buffer.TYPED_ARRAY_SUPPORT) {
                        this[offset] = value >>> 24;
                        this[offset + 1] = value >>> 16;
                        this[offset + 2] = value >>> 8;
                        this[offset + 3] = value & 255;
                    } else {
                        objectWriteUInt32(this, value, offset, false);
                    }
                    return offset + 4;
                };
                function checkIEEE754(buf, value, offset, ext, max, min) {
                    if (offset + ext > buf.length) throw new RangeError("Index out of range");
                    if (offset < 0) throw new RangeError("Index out of range");
                }
                function writeFloat(buf, value, offset, littleEndian, noAssert) {
                    if (!noAssert) {
                        checkIEEE754(buf, value, offset, 4, 3.4028234663852886e38, -3.4028234663852886e38);
                    }
                    ieee754.write(buf, value, offset, littleEndian, 23, 4);
                    return offset + 4;
                }
                Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                    return writeFloat(this, value, offset, true, noAssert);
                };
                Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                    return writeFloat(this, value, offset, false, noAssert);
                };
                function writeDouble(buf, value, offset, littleEndian, noAssert) {
                    if (!noAssert) {
                        checkIEEE754(buf, value, offset, 8, 1.7976931348623157e308, -1.7976931348623157e308);
                    }
                    ieee754.write(buf, value, offset, littleEndian, 52, 8);
                    return offset + 8;
                }
                Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                    return writeDouble(this, value, offset, true, noAssert);
                };
                Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                    return writeDouble(this, value, offset, false, noAssert);
                };
                Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                    if (!start) start = 0;
                    if (!end && end !== 0) end = this.length;
                    if (targetStart >= target.length) targetStart = target.length;
                    if (!targetStart) targetStart = 0;
                    if (end > 0 && end < start) end = start;
                    if (end === start) return 0;
                    if (target.length === 0 || this.length === 0) return 0;
                    if (targetStart < 0) {
                        throw new RangeError("targetStart out of bounds");
                    }
                    if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
                    if (end < 0) throw new RangeError("sourceEnd out of bounds");
                    if (end > this.length) end = this.length;
                    if (target.length - targetStart < end - start) {
                        end = target.length - targetStart + start;
                    }
                    var len = end - start;
                    var i;
                    if (this === target && start < targetStart && targetStart < end) {
                        for (i = len - 1; i >= 0; --i) {
                            target[i + targetStart] = this[i + start];
                        }
                    } else if (len < 1e3 || !Buffer.TYPED_ARRAY_SUPPORT) {
                        for (i = 0; i < len; ++i) {
                            target[i + targetStart] = this[i + start];
                        }
                    } else {
                        Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
                    }
                    return len;
                };
                Buffer.prototype.fill = function fill(val, start, end, encoding) {
                    if (typeof val === "string") {
                        if (typeof start === "string") {
                            encoding = start;
                            start = 0;
                            end = this.length;
                        } else if (typeof end === "string") {
                            encoding = end;
                            end = this.length;
                        }
                        if (val.length === 1) {
                            var code = val.charCodeAt(0);
                            if (code < 256) {
                                val = code;
                            }
                        }
                        if (encoding !== undefined && typeof encoding !== "string") {
                            throw new TypeError("encoding must be a string");
                        }
                        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) {
                            throw new TypeError("Unknown encoding: " + encoding);
                        }
                    } else if (typeof val === "number") {
                        val = val & 255;
                    }
                    if (start < 0 || this.length < start || this.length < end) {
                        throw new RangeError("Out of range index");
                    }
                    if (end <= start) {
                        return this;
                    }
                    start = start >>> 0;
                    end = end === undefined ? this.length : end >>> 0;
                    if (!val) val = 0;
                    var i;
                    if (typeof val === "number") {
                        for (i = start; i < end; ++i) {
                            this[i] = val;
                        }
                    } else {
                        var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
                        var len = bytes.length;
                        for (i = 0; i < end - start; ++i) {
                            this[i + start] = bytes[i % len];
                        }
                    }
                    return this;
                };
                var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
                function base64clean(str) {
                    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
                    if (str.length < 2) return "";
                    while (str.length % 4 !== 0) {
                        str = str + "=";
                    }
                    return str;
                }
                function stringtrim(str) {
                    if (str.trim) return str.trim();
                    return str.replace(/^\s+|\s+$/g, "");
                }
                function toHex(n) {
                    if (n < 16) return "0" + n.toString(16);
                    return n.toString(16);
                }
                function utf8ToBytes(string, units) {
                    units = units || Infinity;
                    var codePoint;
                    var length = string.length;
                    var leadSurrogate = null;
                    var bytes = [];
                    for (var i = 0; i < length; ++i) {
                        codePoint = string.charCodeAt(i);
                        if (codePoint > 55295 && codePoint < 57344) {
                            if (!leadSurrogate) {
                                if (codePoint > 56319) {
                                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                    continue;
                                } else if (i + 1 === length) {
                                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                    continue;
                                }
                                leadSurrogate = codePoint;
                                continue;
                            }
                            if (codePoint < 56320) {
                                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                                leadSurrogate = codePoint;
                                continue;
                            }
                            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
                        } else if (leadSurrogate) {
                            if ((units -= 3) > -1) bytes.push(239, 191, 189);
                        }
                        leadSurrogate = null;
                        if (codePoint < 128) {
                            if ((units -= 1) < 0) break;
                            bytes.push(codePoint);
                        } else if (codePoint < 2048) {
                            if ((units -= 2) < 0) break;
                            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
                        } else if (codePoint < 65536) {
                            if ((units -= 3) < 0) break;
                            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                        } else if (codePoint < 1114112) {
                            if ((units -= 4) < 0) break;
                            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
                        } else {
                            throw new Error("Invalid code point");
                        }
                    }
                    return bytes;
                }
                function asciiToBytes(str) {
                    var byteArray = [];
                    for (var i = 0; i < str.length; ++i) {
                        byteArray.push(str.charCodeAt(i) & 255);
                    }
                    return byteArray;
                }
                function utf16leToBytes(str, units) {
                    var c, hi, lo;
                    var byteArray = [];
                    for (var i = 0; i < str.length; ++i) {
                        if ((units -= 2) < 0) break;
                        c = str.charCodeAt(i);
                        hi = c >> 8;
                        lo = c % 256;
                        byteArray.push(lo);
                        byteArray.push(hi);
                    }
                    return byteArray;
                }
                function base64ToBytes(str) {
                    return base64.toByteArray(base64clean(str));
                }
                function blitBuffer(src, dst, offset, length) {
                    for (var i = 0; i < length; ++i) {
                        if (i + offset >= dst.length || i >= src.length) break;
                        dst[i + offset] = src[i];
                    }
                    return i;
                }
                function isnan(val) {
                    return val !== val;
                }
            }).call(this);
        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer);
    }, {
        "base64-js": 1,
        buffer: 6,
        ieee754: 8,
        isarray: 9
    } ],
    9: [ function(require, module, exports) {
        var toString = {}.toString;
        module.exports = Array.isArray || function(arr) {
            return toString.call(arr) == "[object Array]";
        };
    }, {} ],
    8: [ function(require, module, exports) {
        exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e, m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? nBytes - 1 : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & (1 << -nBits) - 1;
            s >>= -nBits;
            nBits += eLen;
            for (;nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            m = e & (1 << -nBits) - 1;
            e >>= -nBits;
            nBits += mLen;
            for (;nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            if (e === 0) {
                e = 1 - eBias;
            } else if (e === eMax) {
                return m ? NaN : (s ? -1 : 1) * Infinity;
            } else {
                m = m + Math.pow(2, mLen);
                e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        };
        exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
            var i = isLE ? 0 : nBytes - 1;
            var d = isLE ? 1 : -1;
            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
                m = isNaN(value) ? 1 : 0;
                e = eMax;
            } else {
                e = Math.floor(Math.log(value) / Math.LN2);
                if (value * (c = Math.pow(2, -e)) < 1) {
                    e--;
                    c *= 2;
                }
                if (e + eBias >= 1) {
                    value += rt / c;
                } else {
                    value += rt * Math.pow(2, 1 - eBias);
                }
                if (value * c >= 2) {
                    e++;
                    c /= 2;
                }
                if (e + eBias >= eMax) {
                    m = 0;
                    e = eMax;
                } else if (e + eBias >= 1) {
                    m = (value * c - 1) * Math.pow(2, mLen);
                    e = e + eBias;
                } else {
                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                    e = 0;
                }
            }
            for (;mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
            e = e << mLen | m;
            eLen += mLen;
            for (;eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
            buffer[offset + i - d] |= s * 128;
        };
    }, {} ],
    1: [ function(require, module, exports) {
        "use strict";
        exports.byteLength = byteLength;
        exports.toByteArray = toByteArray;
        exports.fromByteArray = fromByteArray;
        var lookup = [];
        var revLookup = [];
        var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
        var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
        for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i];
            revLookup[code.charCodeAt(i)] = i;
        }
        revLookup["-".charCodeAt(0)] = 62;
        revLookup["_".charCodeAt(0)] = 63;
        function getLens(b64) {
            var len = b64.length;
            if (len % 4 > 0) {
                throw new Error("Invalid string. Length must be a multiple of 4");
            }
            var validLen = b64.indexOf("=");
            if (validLen === -1) validLen = len;
            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
            return [ validLen, placeHoldersLen ];
        }
        function byteLength(b64) {
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function _byteLength(b64, validLen, placeHoldersLen) {
            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
        }
        function toByteArray(b64) {
            var tmp;
            var lens = getLens(b64);
            var validLen = lens[0];
            var placeHoldersLen = lens[1];
            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
            var curByte = 0;
            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
            var i;
            for (i = 0; i < len; i += 4) {
                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                arr[curByte++] = tmp >> 16 & 255;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
            }
            if (placeHoldersLen === 2) {
                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                arr[curByte++] = tmp & 255;
            }
            if (placeHoldersLen === 1) {
                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                arr[curByte++] = tmp >> 8 & 255;
                arr[curByte++] = tmp & 255;
            }
            return arr;
        }
        function tripletToBase64(num) {
            return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
        }
        function encodeChunk(uint8, start, end) {
            var tmp;
            var output = [];
            for (var i = start; i < end; i += 3) {
                tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
                output.push(tripletToBase64(tmp));
            }
            return output.join("");
        }
        function fromByteArray(uint8) {
            var tmp;
            var len = uint8.length;
            var extraBytes = len % 3;
            var parts = [];
            var maxChunkLength = 16383;
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
            }
            if (extraBytes === 1) {
                tmp = uint8[len - 1];
                parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
            } else if (extraBytes === 2) {
                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
            }
            return parts.join("");
        }
    }, {} ]
}, {}, [ 33 ]);

AWS.apiLoader.services["sts"] = {};

AWS.STS = AWS.Service.defineService("sts", [ "2011-06-15" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    119: [ function(require, module, exports) {
        var AWS = require("../core");
        var resolveRegionalEndpointsFlag = require("../config_regional_endpoint");
        var ENV_REGIONAL_ENDPOINT_ENABLED = "AWS_STS_REGIONAL_ENDPOINTS";
        var CONFIG_REGIONAL_ENDPOINT_ENABLED = "sts_regional_endpoints";
        AWS.util.update(AWS.STS.prototype, {
            credentialsFrom: function credentialsFrom(data, credentials) {
                if (!data) return null;
                if (!credentials) credentials = new AWS.TemporaryCredentials();
                credentials.expired = false;
                credentials.accessKeyId = data.Credentials.AccessKeyId;
                credentials.secretAccessKey = data.Credentials.SecretAccessKey;
                credentials.sessionToken = data.Credentials.SessionToken;
                credentials.expireTime = data.Credentials.Expiration;
                return credentials;
            },
            assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
                return this.makeUnauthenticatedRequest("assumeRoleWithWebIdentity", params, callback);
            },
            assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
                return this.makeUnauthenticatedRequest("assumeRoleWithSAML", params, callback);
            },
            setupRequestListeners: function setupRequestListeners(request) {
                request.addListener("validate", this.optInRegionalEndpoint, true);
            },
            optInRegionalEndpoint: function optInRegionalEndpoint(req) {
                var service = req.service;
                var config = service.config;
                config.stsRegionalEndpoints = resolveRegionalEndpointsFlag(service._originalConfig, {
                    env: ENV_REGIONAL_ENDPOINT_ENABLED,
                    sharedConfig: CONFIG_REGIONAL_ENDPOINT_ENABLED,
                    clientConfig: "stsRegionalEndpoints"
                });
                if (config.stsRegionalEndpoints === "regional" && service.isGlobalEndpoint) {
                    if (!config.region) {
                        throw AWS.util.error(new Error(), {
                            code: "ConfigError",
                            message: "Missing region in config"
                        });
                    }
                    var insertPoint = config.endpoint.indexOf(".amazonaws.com");
                    var regionalEndpoint = config.endpoint.substring(0, insertPoint) + "." + config.region + config.endpoint.substring(insertPoint);
                    req.httpRequest.updateEndpoint(regionalEndpoint);
                    req.httpRequest.region = config.region;
                }
            }
        });
    }, {
        "../config_regional_endpoint": 43,
        "../core": 44
    } ]
}, {}, [ 119 ]);

AWS.apiLoader.services["sts"]["2011-06-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2011-06-15",
        endpointPrefix: "sts",
        globalEndpoint: "sts.amazonaws.com",
        protocol: "query",
        serviceAbbreviation: "AWS STS",
        serviceFullName: "AWS Security Token Service",
        serviceId: "STS",
        signatureVersion: "v4",
        uid: "sts-2011-06-15",
        xmlNamespace: "https://sts.amazonaws.com/doc/2011-06-15/"
    },
    operations: {
        AssumeRole: {
            input: {
                type: "structure",
                required: [ "RoleArn", "RoleSessionName" ],
                members: {
                    RoleArn: {},
                    RoleSessionName: {},
                    PolicyArns: {
                        shape: "S4"
                    },
                    Policy: {},
                    DurationSeconds: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S8"
                    },
                    TransitiveTagKeys: {
                        type: "list",
                        member: {}
                    },
                    ExternalId: {},
                    SerialNumber: {},
                    TokenCode: {},
                    SourceIdentity: {},
                    ProvidedContexts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProviderArn: {},
                                ContextAssertion: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "AssumeRoleResult",
                type: "structure",
                members: {
                    Credentials: {
                        shape: "Sl"
                    },
                    AssumedRoleUser: {
                        shape: "Sq"
                    },
                    PackedPolicySize: {
                        type: "integer"
                    },
                    SourceIdentity: {}
                }
            }
        },
        AssumeRoleWithSAML: {
            input: {
                type: "structure",
                required: [ "RoleArn", "PrincipalArn", "SAMLAssertion" ],
                members: {
                    RoleArn: {},
                    PrincipalArn: {},
                    SAMLAssertion: {
                        type: "string",
                        sensitive: true
                    },
                    PolicyArns: {
                        shape: "S4"
                    },
                    Policy: {},
                    DurationSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "AssumeRoleWithSAMLResult",
                type: "structure",
                members: {
                    Credentials: {
                        shape: "Sl"
                    },
                    AssumedRoleUser: {
                        shape: "Sq"
                    },
                    PackedPolicySize: {
                        type: "integer"
                    },
                    Subject: {},
                    SubjectType: {},
                    Issuer: {},
                    Audience: {},
                    NameQualifier: {},
                    SourceIdentity: {}
                }
            }
        },
        AssumeRoleWithWebIdentity: {
            input: {
                type: "structure",
                required: [ "RoleArn", "RoleSessionName", "WebIdentityToken" ],
                members: {
                    RoleArn: {},
                    RoleSessionName: {},
                    WebIdentityToken: {
                        type: "string",
                        sensitive: true
                    },
                    ProviderId: {},
                    PolicyArns: {
                        shape: "S4"
                    },
                    Policy: {},
                    DurationSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "AssumeRoleWithWebIdentityResult",
                type: "structure",
                members: {
                    Credentials: {
                        shape: "Sl"
                    },
                    SubjectFromWebIdentityToken: {},
                    AssumedRoleUser: {
                        shape: "Sq"
                    },
                    PackedPolicySize: {
                        type: "integer"
                    },
                    Provider: {},
                    Audience: {},
                    SourceIdentity: {}
                }
            }
        },
        DecodeAuthorizationMessage: {
            input: {
                type: "structure",
                required: [ "EncodedMessage" ],
                members: {
                    EncodedMessage: {}
                }
            },
            output: {
                resultWrapper: "DecodeAuthorizationMessageResult",
                type: "structure",
                members: {
                    DecodedMessage: {}
                }
            }
        },
        GetAccessKeyInfo: {
            input: {
                type: "structure",
                required: [ "AccessKeyId" ],
                members: {
                    AccessKeyId: {}
                }
            },
            output: {
                resultWrapper: "GetAccessKeyInfoResult",
                type: "structure",
                members: {
                    Account: {}
                }
            }
        },
        GetCallerIdentity: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "GetCallerIdentityResult",
                type: "structure",
                members: {
                    UserId: {},
                    Account: {},
                    Arn: {}
                }
            }
        },
        GetFederationToken: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Policy: {},
                    PolicyArns: {
                        shape: "S4"
                    },
                    DurationSeconds: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S8"
                    }
                }
            },
            output: {
                resultWrapper: "GetFederationTokenResult",
                type: "structure",
                members: {
                    Credentials: {
                        shape: "Sl"
                    },
                    FederatedUser: {
                        type: "structure",
                        required: [ "FederatedUserId", "Arn" ],
                        members: {
                            FederatedUserId: {},
                            Arn: {}
                        }
                    },
                    PackedPolicySize: {
                        type: "integer"
                    }
                }
            }
        },
        GetSessionToken: {
            input: {
                type: "structure",
                members: {
                    DurationSeconds: {
                        type: "integer"
                    },
                    SerialNumber: {},
                    TokenCode: {}
                }
            },
            output: {
                resultWrapper: "GetSessionTokenResult",
                type: "structure",
                members: {
                    Credentials: {
                        shape: "Sl"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    arn: {}
                }
            }
        },
        S8: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "AccessKeyId", "SecretAccessKey", "SessionToken", "Expiration" ],
            members: {
                AccessKeyId: {},
                SecretAccessKey: {
                    type: "string",
                    sensitive: true
                },
                SessionToken: {},
                Expiration: {
                    type: "timestamp"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "AssumedRoleId", "Arn" ],
            members: {
                AssumedRoleId: {},
                Arn: {}
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["cognitoidentity"] = {};

AWS.CognitoIdentity = AWS.Service.defineService("cognitoidentity", [ "2014-06-30" ]);

AWS.apiLoader.services["cognitoidentity"]["2014-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-06-30",
        endpointPrefix: "cognito-identity",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Cognito Identity",
        serviceId: "Cognito Identity",
        signatureVersion: "v4",
        targetPrefix: "AWSCognitoIdentityService",
        uid: "cognito-identity-2014-06-30"
    },
    operations: {
        CreateIdentityPool: {
            input: {
                type: "structure",
                required: [ "IdentityPoolName", "AllowUnauthenticatedIdentities" ],
                members: {
                    IdentityPoolName: {},
                    AllowUnauthenticatedIdentities: {
                        type: "boolean"
                    },
                    AllowClassicFlow: {
                        type: "boolean"
                    },
                    SupportedLoginProviders: {
                        shape: "S5"
                    },
                    DeveloperProviderName: {},
                    OpenIdConnectProviderARNs: {
                        shape: "S9"
                    },
                    CognitoIdentityProviders: {
                        shape: "Sb"
                    },
                    SamlProviderARNs: {
                        shape: "Sg"
                    },
                    IdentityPoolTags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                shape: "Sk"
            }
        },
        DeleteIdentities: {
            input: {
                type: "structure",
                required: [ "IdentityIdsToDelete" ],
                members: {
                    IdentityIdsToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedIdentityIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityId: {},
                                ErrorCode: {}
                            }
                        }
                    }
                }
            }
        },
        DeleteIdentityPool: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {}
                }
            }
        },
        DescribeIdentity: {
            input: {
                type: "structure",
                required: [ "IdentityId" ],
                members: {
                    IdentityId: {}
                }
            },
            output: {
                shape: "Sv"
            }
        },
        DescribeIdentityPool: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {}
                }
            },
            output: {
                shape: "Sk"
            }
        },
        GetCredentialsForIdentity: {
            input: {
                type: "structure",
                required: [ "IdentityId" ],
                members: {
                    IdentityId: {},
                    Logins: {
                        shape: "S10"
                    },
                    CustomRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityId: {},
                    Credentials: {
                        type: "structure",
                        members: {
                            AccessKeyId: {},
                            SecretKey: {},
                            SessionToken: {},
                            Expiration: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            authtype: "none"
        },
        GetId: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    AccountId: {},
                    IdentityPoolId: {},
                    Logins: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityId: {}
                }
            },
            authtype: "none"
        },
        GetIdentityPoolRoles: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    Roles: {
                        shape: "S1c"
                    },
                    RoleMappings: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetOpenIdToken: {
            input: {
                type: "structure",
                required: [ "IdentityId" ],
                members: {
                    IdentityId: {},
                    Logins: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityId: {},
                    Token: {}
                }
            },
            authtype: "none"
        },
        GetOpenIdTokenForDeveloperIdentity: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "Logins" ],
                members: {
                    IdentityPoolId: {},
                    IdentityId: {},
                    Logins: {
                        shape: "S10"
                    },
                    PrincipalTags: {
                        shape: "S1s"
                    },
                    TokenDuration: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityId: {},
                    Token: {}
                }
            }
        },
        GetPrincipalTagAttributeMap: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityProviderName" ],
                members: {
                    IdentityPoolId: {},
                    IdentityProviderName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    IdentityProviderName: {},
                    UseDefaults: {
                        type: "boolean"
                    },
                    PrincipalTags: {
                        shape: "S1s"
                    }
                }
            }
        },
        ListIdentities: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "MaxResults" ],
                members: {
                    IdentityPoolId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    HideDisabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    Identities: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIdentityPools: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPools: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IdentityPoolId: {},
                                IdentityPoolName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sh"
                    }
                }
            }
        },
        LookupDeveloperIdentity: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {},
                    IdentityId: {},
                    DeveloperUserIdentifier: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityId: {},
                    DeveloperUserIdentifierList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        MergeDeveloperIdentities: {
            input: {
                type: "structure",
                required: [ "SourceUserIdentifier", "DestinationUserIdentifier", "DeveloperProviderName", "IdentityPoolId" ],
                members: {
                    SourceUserIdentifier: {},
                    DestinationUserIdentifier: {},
                    DeveloperProviderName: {},
                    IdentityPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityId: {}
                }
            }
        },
        SetIdentityPoolRoles: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "Roles" ],
                members: {
                    IdentityPoolId: {},
                    Roles: {
                        shape: "S1c"
                    },
                    RoleMappings: {
                        shape: "S1e"
                    }
                }
            }
        },
        SetPrincipalTagAttributeMap: {
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityProviderName" ],
                members: {
                    IdentityPoolId: {},
                    IdentityProviderName: {},
                    UseDefaults: {
                        type: "boolean"
                    },
                    PrincipalTags: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    IdentityProviderName: {},
                    UseDefaults: {
                        type: "boolean"
                    },
                    PrincipalTags: {
                        shape: "S1s"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UnlinkDeveloperIdentity: {
            input: {
                type: "structure",
                required: [ "IdentityId", "IdentityPoolId", "DeveloperProviderName", "DeveloperUserIdentifier" ],
                members: {
                    IdentityId: {},
                    IdentityPoolId: {},
                    DeveloperProviderName: {},
                    DeveloperUserIdentifier: {}
                }
            }
        },
        UnlinkIdentity: {
            input: {
                type: "structure",
                required: [ "IdentityId", "Logins", "LoginsToRemove" ],
                members: {
                    IdentityId: {},
                    Logins: {
                        shape: "S10"
                    },
                    LoginsToRemove: {
                        shape: "Sw"
                    }
                }
            },
            authtype: "none"
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIdentityPool: {
            input: {
                shape: "Sk"
            },
            output: {
                shape: "Sk"
            }
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S9: {
            type: "list",
            member: {}
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ProviderName: {},
                    ClientId: {},
                    ServerSideTokenCheck: {
                        type: "boolean"
                    }
                }
            }
        },
        Sg: {
            type: "list",
            member: {}
        },
        Sh: {
            type: "map",
            key: {},
            value: {}
        },
        Sk: {
            type: "structure",
            required: [ "IdentityPoolId", "IdentityPoolName", "AllowUnauthenticatedIdentities" ],
            members: {
                IdentityPoolId: {},
                IdentityPoolName: {},
                AllowUnauthenticatedIdentities: {
                    type: "boolean"
                },
                AllowClassicFlow: {
                    type: "boolean"
                },
                SupportedLoginProviders: {
                    shape: "S5"
                },
                DeveloperProviderName: {},
                OpenIdConnectProviderARNs: {
                    shape: "S9"
                },
                CognitoIdentityProviders: {
                    shape: "Sb"
                },
                SamlProviderARNs: {
                    shape: "Sg"
                },
                IdentityPoolTags: {
                    shape: "Sh"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                IdentityId: {},
                Logins: {
                    shape: "Sw"
                },
                CreationDate: {
                    type: "timestamp"
                },
                LastModifiedDate: {
                    type: "timestamp"
                }
            }
        },
        Sw: {
            type: "list",
            member: {}
        },
        S10: {
            type: "map",
            key: {},
            value: {}
        },
        S1c: {
            type: "map",
            key: {},
            value: {}
        },
        S1e: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {},
                    AmbiguousRoleResolution: {},
                    RulesConfiguration: {
                        type: "structure",
                        required: [ "Rules" ],
                        members: {
                            Rules: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Claim", "MatchType", "Value", "RoleARN" ],
                                    members: {
                                        Claim: {},
                                        MatchType: {},
                                        Value: {},
                                        RoleARN: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1s: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListIdentityPools: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IdentityPools"
        }
    }
};

AWS.apiLoader.services["acm"] = {};

AWS.ACM = AWS.Service.defineService("acm", [ "2015-12-08" ]);

AWS.apiLoader.services["acm"]["2015-12-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-12-08",
        endpointPrefix: "acm",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "ACM",
        serviceFullName: "AWS Certificate Manager",
        serviceId: "ACM",
        signatureVersion: "v4",
        targetPrefix: "CertificateManager",
        uid: "acm-2015-12-08"
    },
    operations: {
        AddTagsToCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "Tags" ],
                members: {
                    CertificateArn: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        DeleteCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {}
                }
            }
        },
        DescribeCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {
                        type: "structure",
                        members: {
                            CertificateArn: {},
                            DomainName: {},
                            SubjectAlternativeNames: {
                                shape: "Sc"
                            },
                            DomainValidationOptions: {
                                shape: "Sd"
                            },
                            Serial: {},
                            Subject: {},
                            Issuer: {},
                            CreatedAt: {
                                type: "timestamp"
                            },
                            IssuedAt: {
                                type: "timestamp"
                            },
                            ImportedAt: {
                                type: "timestamp"
                            },
                            Status: {},
                            RevokedAt: {
                                type: "timestamp"
                            },
                            RevocationReason: {},
                            NotBefore: {
                                type: "timestamp"
                            },
                            NotAfter: {
                                type: "timestamp"
                            },
                            KeyAlgorithm: {},
                            SignatureAlgorithm: {},
                            InUseBy: {
                                type: "list",
                                member: {}
                            },
                            FailureReason: {},
                            Type: {},
                            RenewalSummary: {
                                type: "structure",
                                required: [ "RenewalStatus", "DomainValidationOptions", "UpdatedAt" ],
                                members: {
                                    RenewalStatus: {},
                                    DomainValidationOptions: {
                                        shape: "Sd"
                                    },
                                    RenewalStatusReason: {},
                                    UpdatedAt: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            KeyUsages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {}
                                    }
                                }
                            },
                            ExtendedKeyUsages: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {},
                                        OID: {}
                                    }
                                }
                            },
                            CertificateAuthorityArn: {},
                            RenewalEligibility: {},
                            Options: {
                                shape: "S11"
                            }
                        }
                    }
                }
            }
        },
        ExportCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "Passphrase" ],
                members: {
                    CertificateArn: {},
                    Passphrase: {
                        type: "blob",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CertificateChain: {},
                    PrivateKey: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetAccountConfiguration: {
            output: {
                type: "structure",
                members: {
                    ExpiryEvents: {
                        shape: "S1a"
                    }
                }
            }
        },
        GetCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {},
                    CertificateChain: {}
                }
            }
        },
        ImportCertificate: {
            input: {
                type: "structure",
                required: [ "Certificate", "PrivateKey" ],
                members: {
                    CertificateArn: {},
                    Certificate: {
                        type: "blob"
                    },
                    PrivateKey: {
                        type: "blob",
                        sensitive: true
                    },
                    CertificateChain: {
                        type: "blob"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateArn: {}
                }
            }
        },
        ListCertificates: {
            input: {
                type: "structure",
                members: {
                    CertificateStatuses: {
                        type: "list",
                        member: {}
                    },
                    Includes: {
                        type: "structure",
                        members: {
                            extendedKeyUsage: {
                                type: "list",
                                member: {}
                            },
                            keyUsage: {
                                type: "list",
                                member: {}
                            },
                            keyTypes: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxItems: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CertificateSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CertificateArn: {},
                                DomainName: {},
                                SubjectAlternativeNameSummaries: {
                                    shape: "Sc"
                                },
                                HasAdditionalSubjectAlternativeNames: {
                                    type: "boolean"
                                },
                                Status: {},
                                Type: {},
                                KeyAlgorithm: {},
                                KeyUsages: {
                                    type: "list",
                                    member: {}
                                },
                                ExtendedKeyUsages: {
                                    type: "list",
                                    member: {}
                                },
                                InUse: {
                                    type: "boolean"
                                },
                                Exported: {
                                    type: "boolean"
                                },
                                RenewalEligibility: {},
                                NotBefore: {
                                    type: "timestamp"
                                },
                                NotAfter: {
                                    type: "timestamp"
                                },
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                IssuedAt: {
                                    type: "timestamp"
                                },
                                ImportedAt: {
                                    type: "timestamp"
                                },
                                RevokedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        PutAccountConfiguration: {
            input: {
                type: "structure",
                required: [ "IdempotencyToken" ],
                members: {
                    ExpiryEvents: {
                        shape: "S1a"
                    },
                    IdempotencyToken: {}
                }
            }
        },
        RemoveTagsFromCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "Tags" ],
                members: {
                    CertificateArn: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        RenewCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {}
                }
            }
        },
        RequestCertificate: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    ValidationMethod: {},
                    SubjectAlternativeNames: {
                        shape: "Sc"
                    },
                    IdempotencyToken: {},
                    DomainValidationOptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DomainName", "ValidationDomain" ],
                            members: {
                                DomainName: {},
                                ValidationDomain: {}
                            }
                        }
                    },
                    Options: {
                        shape: "S11"
                    },
                    CertificateAuthorityArn: {},
                    Tags: {
                        shape: "S3"
                    },
                    KeyAlgorithm: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateArn: {}
                }
            }
        },
        ResendValidationEmail: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "Domain", "ValidationDomain" ],
                members: {
                    CertificateArn: {},
                    Domain: {},
                    ValidationDomain: {}
                }
            }
        },
        UpdateCertificateOptions: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "Options" ],
                members: {
                    CertificateArn: {},
                    Options: {
                        shape: "S11"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sc: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    ValidationEmails: {
                        type: "list",
                        member: {}
                    },
                    ValidationDomain: {},
                    ValidationStatus: {},
                    ResourceRecord: {
                        type: "structure",
                        required: [ "Name", "Type", "Value" ],
                        members: {
                            Name: {},
                            Type: {},
                            Value: {}
                        }
                    },
                    ValidationMethod: {}
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                CertificateTransparencyLoggingPreference: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                DaysBeforeExpiry: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListCertificates: {
            input_token: "NextToken",
            limit_key: "MaxItems",
            output_token: "NextToken",
            result_key: "CertificateSummaryList"
        }
    },
    waiters: {
        CertificateValidated: {
            delay: 60,
            maxAttempts: 40,
            operation: "DescribeCertificate",
            acceptors: [ {
                matcher: "pathAll",
                expected: "SUCCESS",
                argument: "Certificate.DomainValidationOptions[].ValidationStatus",
                state: "success"
            }, {
                matcher: "pathAny",
                expected: "PENDING_VALIDATION",
                argument: "Certificate.DomainValidationOptions[].ValidationStatus",
                state: "retry"
            }, {
                matcher: "path",
                expected: "FAILED",
                argument: "Certificate.Status",
                state: "failure"
            }, {
                matcher: "error",
                expected: "ResourceNotFoundException",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["apigateway"] = {};

AWS.APIGateway = AWS.Service.defineService("apigateway", [ "2015-07-09" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    97: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.APIGateway.prototype, {
            setAcceptHeader: function setAcceptHeader(req) {
                var httpRequest = req.httpRequest;
                if (!httpRequest.headers.Accept) {
                    httpRequest.headers["Accept"] = "application/json";
                }
            },
            setupRequestListeners: function setupRequestListeners(request) {
                request.addListener("build", this.setAcceptHeader);
                if (request.operation === "getExport") {
                    var params = request.params || {};
                    if (params.exportType === "swagger") {
                        request.addListener("extractData", AWS.util.convertPayloadToString);
                    }
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 97 ]);

AWS.apiLoader.services["apigateway"]["2015-07-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-07-09",
        endpointPrefix: "apigateway",
        protocol: "rest-json",
        serviceFullName: "Amazon API Gateway",
        serviceId: "API Gateway",
        signatureVersion: "v4",
        uid: "apigateway-2015-07-09"
    },
    operations: {
        CreateApiKey: {
            http: {
                requestUri: "/apikeys",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enabled: {
                        type: "boolean"
                    },
                    generateDistinctId: {
                        type: "boolean"
                    },
                    value: {},
                    stageKeys: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                restApiId: {},
                                stageName: {}
                            }
                        }
                    },
                    customerId: {},
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        CreateAuthorizer: {
            http: {
                requestUri: "/restapis/{restapi_id}/authorizers",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "name", "type" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    name: {},
                    type: {},
                    providerARNs: {
                        shape: "Sc"
                    },
                    authType: {},
                    authorizerUri: {},
                    authorizerCredentials: {},
                    identitySource: {},
                    identityValidationExpression: {},
                    authorizerResultTtlInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "Sf"
            }
        },
        CreateBasePathMapping: {
            http: {
                requestUri: "/domainnames/{domain_name}/basepathmappings",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainName", "restApiId" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    },
                    basePath: {},
                    restApiId: {},
                    stage: {}
                }
            },
            output: {
                shape: "Sh"
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/restapis/{restapi_id}/deployments",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {},
                    stageDescription: {},
                    description: {},
                    cacheClusterEnabled: {
                        type: "boolean"
                    },
                    cacheClusterSize: {},
                    variables: {
                        shape: "S6"
                    },
                    canarySettings: {
                        type: "structure",
                        members: {
                            percentTraffic: {
                                type: "double"
                            },
                            stageVariableOverrides: {
                                shape: "S6"
                            },
                            useStageCache: {
                                type: "boolean"
                            }
                        }
                    },
                    tracingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "Sn"
            }
        },
        CreateDocumentationPart: {
            http: {
                requestUri: "/restapis/{restapi_id}/documentation/parts",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "location", "properties" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    location: {
                        shape: "Ss"
                    },
                    properties: {}
                }
            },
            output: {
                shape: "Sv"
            }
        },
        CreateDocumentationVersion: {
            http: {
                requestUri: "/restapis/{restapi_id}/documentation/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationVersion" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationVersion: {},
                    stageName: {},
                    description: {}
                }
            },
            output: {
                shape: "Sx"
            }
        },
        CreateDomainName: {
            http: {
                requestUri: "/domainnames",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {},
                    certificateName: {},
                    certificateBody: {},
                    certificatePrivateKey: {},
                    certificateChain: {},
                    certificateArn: {},
                    regionalCertificateName: {},
                    regionalCertificateArn: {},
                    endpointConfiguration: {
                        shape: "Sz"
                    },
                    tags: {
                        shape: "S6"
                    },
                    securityPolicy: {},
                    mutualTlsAuthentication: {
                        type: "structure",
                        members: {
                            truststoreUri: {},
                            truststoreVersion: {}
                        }
                    },
                    ownershipVerificationCertificateArn: {}
                }
            },
            output: {
                shape: "S14"
            }
        },
        CreateModel: {
            http: {
                requestUri: "/restapis/{restapi_id}/models",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "name", "contentType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    name: {},
                    description: {},
                    schema: {},
                    contentType: {}
                }
            },
            output: {
                shape: "S18"
            }
        },
        CreateRequestValidator: {
            http: {
                requestUri: "/restapis/{restapi_id}/requestvalidators",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    name: {},
                    validateRequestBody: {
                        type: "boolean"
                    },
                    validateRequestParameters: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1a"
            }
        },
        CreateResource: {
            http: {
                requestUri: "/restapis/{restapi_id}/resources/{parent_id}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "parentId", "pathPart" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    parentId: {
                        location: "uri",
                        locationName: "parent_id"
                    },
                    pathPart: {}
                }
            },
            output: {
                shape: "S1c"
            }
        },
        CreateRestApi: {
            http: {
                requestUri: "/restapis",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    version: {},
                    cloneFrom: {},
                    binaryMediaTypes: {
                        shape: "S9"
                    },
                    minimumCompressionSize: {
                        type: "integer"
                    },
                    apiKeySource: {},
                    endpointConfiguration: {
                        shape: "Sz"
                    },
                    policy: {},
                    tags: {
                        shape: "S6"
                    },
                    disableExecuteApiEndpoint: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1t"
            }
        },
        CreateStage: {
            http: {
                requestUri: "/restapis/{restapi_id}/stages",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName", "deploymentId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {},
                    deploymentId: {},
                    description: {},
                    cacheClusterEnabled: {
                        type: "boolean"
                    },
                    cacheClusterSize: {},
                    variables: {
                        shape: "S6"
                    },
                    documentationVersion: {},
                    canarySettings: {
                        shape: "S1v"
                    },
                    tracingEnabled: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S1w"
            }
        },
        CreateUsagePlan: {
            http: {
                requestUri: "/usageplans",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    apiStages: {
                        shape: "S23"
                    },
                    throttle: {
                        shape: "S26"
                    },
                    quota: {
                        shape: "S27"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S29"
            }
        },
        CreateUsagePlanKey: {
            http: {
                requestUri: "/usageplans/{usageplanId}/keys",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "usagePlanId", "keyId", "keyType" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    keyId: {},
                    keyType: {}
                }
            },
            output: {
                shape: "S2b"
            }
        },
        CreateVpcLink: {
            http: {
                requestUri: "/vpclinks",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "name", "targetArns" ],
                members: {
                    name: {},
                    description: {},
                    targetArns: {
                        shape: "S9"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S2d"
            }
        },
        DeleteApiKey: {
            http: {
                method: "DELETE",
                requestUri: "/apikeys/{api_Key}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "apiKey" ],
                members: {
                    apiKey: {
                        location: "uri",
                        locationName: "api_Key"
                    }
                }
            }
        },
        DeleteAuthorizer: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/authorizers/{authorizer_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "authorizerId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    authorizerId: {
                        location: "uri",
                        locationName: "authorizer_id"
                    }
                }
            }
        },
        DeleteBasePathMapping: {
            http: {
                method: "DELETE",
                requestUri: "/domainnames/{domain_name}/basepathmappings/{base_path}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "domainName", "basePath" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    },
                    basePath: {
                        location: "uri",
                        locationName: "base_path"
                    }
                }
            }
        },
        DeleteClientCertificate: {
            http: {
                method: "DELETE",
                requestUri: "/clientcertificates/{clientcertificate_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "clientCertificateId" ],
                members: {
                    clientCertificateId: {
                        location: "uri",
                        locationName: "clientcertificate_id"
                    }
                }
            }
        },
        DeleteDeployment: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/deployments/{deployment_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "deploymentId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    deploymentId: {
                        location: "uri",
                        locationName: "deployment_id"
                    }
                }
            }
        },
        DeleteDocumentationPart: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/documentation/parts/{part_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationPartId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationPartId: {
                        location: "uri",
                        locationName: "part_id"
                    }
                }
            }
        },
        DeleteDocumentationVersion: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/documentation/versions/{doc_version}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationVersion" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationVersion: {
                        location: "uri",
                        locationName: "doc_version"
                    }
                }
            }
        },
        DeleteDomainName: {
            http: {
                method: "DELETE",
                requestUri: "/domainnames/{domain_name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    }
                }
            }
        },
        DeleteGatewayResponse: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/gatewayresponses/{response_type}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "responseType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    responseType: {
                        location: "uri",
                        locationName: "response_type"
                    }
                }
            }
        },
        DeleteIntegration: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    }
                }
            }
        },
        DeleteIntegrationResponse: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    }
                }
            }
        },
        DeleteMethod: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    }
                }
            }
        },
        DeleteMethodResponse: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    }
                }
            }
        },
        DeleteModel: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/models/{model_name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "modelName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    modelName: {
                        location: "uri",
                        locationName: "model_name"
                    }
                }
            }
        },
        DeleteRequestValidator: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "requestValidatorId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    requestValidatorId: {
                        location: "uri",
                        locationName: "requestvalidator_id"
                    }
                }
            }
        },
        DeleteResource: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    }
                }
            }
        },
        DeleteRestApi: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    }
                }
            }
        },
        DeleteStage: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    }
                }
            }
        },
        DeleteUsagePlan: {
            http: {
                method: "DELETE",
                requestUri: "/usageplans/{usageplanId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "usagePlanId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    }
                }
            }
        },
        DeleteUsagePlanKey: {
            http: {
                method: "DELETE",
                requestUri: "/usageplans/{usageplanId}/keys/{keyId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "usagePlanId", "keyId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    keyId: {
                        location: "uri",
                        locationName: "keyId"
                    }
                }
            }
        },
        DeleteVpcLink: {
            http: {
                method: "DELETE",
                requestUri: "/vpclinks/{vpclink_id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "vpcLinkId" ],
                members: {
                    vpcLinkId: {
                        location: "uri",
                        locationName: "vpclink_id"
                    }
                }
            }
        },
        FlushStageAuthorizersCache: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    }
                }
            }
        },
        FlushStageCache: {
            http: {
                method: "DELETE",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}/cache/data",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    }
                }
            }
        },
        GenerateClientCertificate: {
            http: {
                requestUri: "/clientcertificates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    description: {},
                    tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S34"
            }
        },
        GetAccount: {
            http: {
                method: "GET",
                requestUri: "/account"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                shape: "S36"
            }
        },
        GetApiKey: {
            http: {
                method: "GET",
                requestUri: "/apikeys/{api_Key}"
            },
            input: {
                type: "structure",
                required: [ "apiKey" ],
                members: {
                    apiKey: {
                        location: "uri",
                        locationName: "api_Key"
                    },
                    includeValue: {
                        location: "querystring",
                        locationName: "includeValue",
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        GetApiKeys: {
            http: {
                method: "GET",
                requestUri: "/apikeys"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    nameQuery: {
                        location: "querystring",
                        locationName: "name"
                    },
                    customerId: {
                        location: "querystring",
                        locationName: "customerId"
                    },
                    includeValues: {
                        location: "querystring",
                        locationName: "includeValues",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    warnings: {
                        shape: "S9"
                    },
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            }
        },
        GetAuthorizer: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/authorizers/{authorizer_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "authorizerId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    authorizerId: {
                        location: "uri",
                        locationName: "authorizer_id"
                    }
                }
            },
            output: {
                shape: "Sf"
            }
        },
        GetAuthorizers: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/authorizers"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    }
                }
            }
        },
        GetBasePathMapping: {
            http: {
                method: "GET",
                requestUri: "/domainnames/{domain_name}/basepathmappings/{base_path}"
            },
            input: {
                type: "structure",
                required: [ "domainName", "basePath" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    },
                    basePath: {
                        location: "uri",
                        locationName: "base_path"
                    }
                }
            },
            output: {
                shape: "Sh"
            }
        },
        GetBasePathMappings: {
            http: {
                method: "GET",
                requestUri: "/domainnames/{domain_name}/basepathmappings"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "Sh"
                        }
                    }
                }
            }
        },
        GetClientCertificate: {
            http: {
                method: "GET",
                requestUri: "/clientcertificates/{clientcertificate_id}"
            },
            input: {
                type: "structure",
                required: [ "clientCertificateId" ],
                members: {
                    clientCertificateId: {
                        location: "uri",
                        locationName: "clientcertificate_id"
                    }
                }
            },
            output: {
                shape: "S34"
            }
        },
        GetClientCertificates: {
            http: {
                method: "GET",
                requestUri: "/clientcertificates"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S34"
                        }
                    }
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/deployments/{deployment_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "deploymentId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    deploymentId: {
                        location: "uri",
                        locationName: "deployment_id"
                    },
                    embed: {
                        shape: "S9",
                        location: "querystring",
                        locationName: "embed"
                    }
                }
            },
            output: {
                shape: "Sn"
            }
        },
        GetDeployments: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/deployments"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    }
                }
            }
        },
        GetDocumentationPart: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/documentation/parts/{part_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationPartId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationPartId: {
                        location: "uri",
                        locationName: "part_id"
                    }
                }
            },
            output: {
                shape: "Sv"
            }
        },
        GetDocumentationParts: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/documentation/parts"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    nameQuery: {
                        location: "querystring",
                        locationName: "name"
                    },
                    path: {
                        location: "querystring",
                        locationName: "path"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    locationStatus: {
                        location: "querystring",
                        locationName: "locationStatus"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    }
                }
            }
        },
        GetDocumentationVersion: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/documentation/versions/{doc_version}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationVersion" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationVersion: {
                        location: "uri",
                        locationName: "doc_version"
                    }
                }
            },
            output: {
                shape: "Sx"
            }
        },
        GetDocumentationVersions: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/documentation/versions"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "Sx"
                        }
                    }
                }
            }
        },
        GetDomainName: {
            http: {
                method: "GET",
                requestUri: "/domainnames/{domain_name}"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    }
                }
            },
            output: {
                shape: "S14"
            }
        },
        GetDomainNames: {
            http: {
                method: "GET",
                requestUri: "/domainnames"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S14"
                        }
                    }
                }
            }
        },
        GetExport: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName", "exportType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    },
                    exportType: {
                        location: "uri",
                        locationName: "export_type"
                    },
                    parameters: {
                        shape: "S6",
                        location: "querystring"
                    },
                    accepts: {
                        location: "header",
                        locationName: "Accept"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    contentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            }
        },
        GetGatewayResponse: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/gatewayresponses/{response_type}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "responseType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    responseType: {
                        location: "uri",
                        locationName: "response_type"
                    }
                }
            },
            output: {
                shape: "S48"
            }
        },
        GetGatewayResponses: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/gatewayresponses"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S48"
                        }
                    }
                }
            }
        },
        GetIntegration: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    }
                }
            },
            output: {
                shape: "S1j"
            }
        },
        GetIntegrationResponse: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    }
                }
            },
            output: {
                shape: "S1p"
            }
        },
        GetMethod: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    }
                }
            },
            output: {
                shape: "S1e"
            }
        },
        GetMethodResponse: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    }
                }
            },
            output: {
                shape: "S1h"
            }
        },
        GetModel: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/models/{model_name}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "modelName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    modelName: {
                        location: "uri",
                        locationName: "model_name"
                    },
                    flatten: {
                        location: "querystring",
                        locationName: "flatten",
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S18"
            }
        },
        GetModelTemplate: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/models/{model_name}/default_template"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "modelName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    modelName: {
                        location: "uri",
                        locationName: "model_name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    value: {}
                }
            }
        },
        GetModels: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/models"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    }
                }
            }
        },
        GetRequestValidator: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "requestValidatorId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    requestValidatorId: {
                        location: "uri",
                        locationName: "requestvalidator_id"
                    }
                }
            },
            output: {
                shape: "S1a"
            }
        },
        GetRequestValidators: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/requestvalidators"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S1a"
                        }
                    }
                }
            }
        },
        GetResource: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    embed: {
                        shape: "S9",
                        location: "querystring",
                        locationName: "embed"
                    }
                }
            },
            output: {
                shape: "S1c"
            }
        },
        GetResources: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/resources"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    embed: {
                        shape: "S9",
                        location: "querystring",
                        locationName: "embed"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S1c"
                        }
                    }
                }
            }
        },
        GetRestApi: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    }
                }
            },
            output: {
                shape: "S1t"
            }
        },
        GetRestApis: {
            http: {
                method: "GET",
                requestUri: "/restapis"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        GetSdk: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName", "sdkType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    },
                    sdkType: {
                        location: "uri",
                        locationName: "sdk_type"
                    },
                    parameters: {
                        shape: "S6",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    contentDisposition: {
                        location: "header",
                        locationName: "Content-Disposition"
                    },
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            }
        },
        GetSdkType: {
            http: {
                method: "GET",
                requestUri: "/sdktypes/{sdktype_id}"
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "sdktype_id"
                    }
                }
            },
            output: {
                shape: "S51"
            }
        },
        GetSdkTypes: {
            http: {
                method: "GET",
                requestUri: "/sdktypes"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S51"
                        }
                    }
                }
            }
        },
        GetStage: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    }
                }
            },
            output: {
                shape: "S1w"
            }
        },
        GetStages: {
            http: {
                method: "GET",
                requestUri: "/restapis/{restapi_id}/stages"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    deploymentId: {
                        location: "querystring",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    item: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    }
                }
            }
        },
        GetTags: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource_arn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resource_arn"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        GetUsage: {
            http: {
                method: "GET",
                requestUri: "/usageplans/{usageplanId}/usage"
            },
            input: {
                type: "structure",
                required: [ "usagePlanId", "startDate", "endDate" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    keyId: {
                        location: "querystring",
                        locationName: "keyId"
                    },
                    startDate: {
                        location: "querystring",
                        locationName: "startDate"
                    },
                    endDate: {
                        location: "querystring",
                        locationName: "endDate"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "S5e"
            }
        },
        GetUsagePlan: {
            http: {
                method: "GET",
                requestUri: "/usageplans/{usageplanId}"
            },
            input: {
                type: "structure",
                required: [ "usagePlanId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    }
                }
            },
            output: {
                shape: "S29"
            }
        },
        GetUsagePlanKey: {
            http: {
                method: "GET",
                requestUri: "/usageplans/{usageplanId}/keys/{keyId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "usagePlanId", "keyId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    keyId: {
                        location: "uri",
                        locationName: "keyId"
                    }
                }
            },
            output: {
                shape: "S2b"
            }
        },
        GetUsagePlanKeys: {
            http: {
                method: "GET",
                requestUri: "/usageplans/{usageplanId}/keys"
            },
            input: {
                type: "structure",
                required: [ "usagePlanId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    nameQuery: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    }
                }
            }
        },
        GetUsagePlans: {
            http: {
                method: "GET",
                requestUri: "/usageplans"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    keyId: {
                        location: "querystring",
                        locationName: "keyId"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S29"
                        }
                    }
                }
            }
        },
        GetVpcLink: {
            http: {
                method: "GET",
                requestUri: "/vpclinks/{vpclink_id}"
            },
            input: {
                type: "structure",
                required: [ "vpcLinkId" ],
                members: {
                    vpcLinkId: {
                        location: "uri",
                        locationName: "vpclink_id"
                    }
                }
            },
            output: {
                shape: "S2d"
            }
        },
        GetVpcLinks: {
            http: {
                method: "GET",
                requestUri: "/vpclinks"
            },
            input: {
                type: "structure",
                members: {
                    position: {
                        location: "querystring",
                        locationName: "position"
                    },
                    limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    position: {},
                    items: {
                        locationName: "item",
                        type: "list",
                        member: {
                            shape: "S2d"
                        }
                    }
                }
            }
        },
        ImportApiKeys: {
            http: {
                requestUri: "/apikeys?mode=import",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "body", "format" ],
                members: {
                    body: {
                        type: "blob"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    failOnWarnings: {
                        location: "querystring",
                        locationName: "failonwarnings",
                        type: "boolean"
                    }
                },
                payload: "body"
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S9"
                    },
                    warnings: {
                        shape: "S9"
                    }
                }
            }
        },
        ImportDocumentationParts: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}/documentation/parts"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "body" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    mode: {
                        location: "querystring",
                        locationName: "mode"
                    },
                    failOnWarnings: {
                        location: "querystring",
                        locationName: "failonwarnings",
                        type: "boolean"
                    },
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S9"
                    },
                    warnings: {
                        shape: "S9"
                    }
                }
            }
        },
        ImportRestApi: {
            http: {
                requestUri: "/restapis?mode=import",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "body" ],
                members: {
                    failOnWarnings: {
                        location: "querystring",
                        locationName: "failonwarnings",
                        type: "boolean"
                    },
                    parameters: {
                        shape: "S6",
                        location: "querystring"
                    },
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            },
            output: {
                shape: "S1t"
            }
        },
        PutGatewayResponse: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}/gatewayresponses/{response_type}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "responseType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    responseType: {
                        location: "uri",
                        locationName: "response_type"
                    },
                    statusCode: {},
                    responseParameters: {
                        shape: "S6"
                    },
                    responseTemplates: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S48"
            }
        },
        PutIntegration: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "type" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    type: {},
                    integrationHttpMethod: {
                        locationName: "httpMethod"
                    },
                    uri: {},
                    connectionType: {},
                    connectionId: {},
                    credentials: {},
                    requestParameters: {
                        shape: "S6"
                    },
                    requestTemplates: {
                        shape: "S6"
                    },
                    passthroughBehavior: {},
                    cacheNamespace: {},
                    cacheKeyParameters: {
                        shape: "S9"
                    },
                    contentHandling: {},
                    timeoutInMillis: {
                        type: "integer"
                    },
                    tlsConfig: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                shape: "S1j"
            }
        },
        PutIntegrationResponse: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    },
                    selectionPattern: {},
                    responseParameters: {
                        shape: "S6"
                    },
                    responseTemplates: {
                        shape: "S6"
                    },
                    contentHandling: {}
                }
            },
            output: {
                shape: "S1p"
            }
        },
        PutMethod: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "authorizationType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    authorizationType: {},
                    authorizerId: {},
                    apiKeyRequired: {
                        type: "boolean"
                    },
                    operationName: {},
                    requestParameters: {
                        shape: "S1f"
                    },
                    requestModels: {
                        shape: "S6"
                    },
                    requestValidatorId: {},
                    authorizationScopes: {
                        shape: "S9"
                    }
                }
            },
            output: {
                shape: "S1e"
            }
        },
        PutMethodResponse: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    },
                    responseParameters: {
                        shape: "S1f"
                    },
                    responseModels: {
                        shape: "S6"
                    }
                }
            },
            output: {
                shape: "S1h"
            }
        },
        PutRestApi: {
            http: {
                method: "PUT",
                requestUri: "/restapis/{restapi_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "body" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    mode: {
                        location: "querystring",
                        locationName: "mode"
                    },
                    failOnWarnings: {
                        location: "querystring",
                        locationName: "failonwarnings",
                        type: "boolean"
                    },
                    parameters: {
                        shape: "S6",
                        location: "querystring"
                    },
                    body: {
                        type: "blob"
                    }
                },
                payload: "body"
            },
            output: {
                shape: "S1t"
            }
        },
        TagResource: {
            http: {
                method: "PUT",
                requestUri: "/tags/{resource_arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resource_arn"
                    },
                    tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TestInvokeAuthorizer: {
            http: {
                requestUri: "/restapis/{restapi_id}/authorizers/{authorizer_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "authorizerId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    authorizerId: {
                        location: "uri",
                        locationName: "authorizer_id"
                    },
                    headers: {
                        shape: "S6"
                    },
                    multiValueHeaders: {
                        shape: "S6a"
                    },
                    pathWithQueryString: {},
                    body: {},
                    stageVariables: {
                        shape: "S6"
                    },
                    additionalContext: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clientStatus: {
                        type: "integer"
                    },
                    log: {},
                    latency: {
                        type: "long"
                    },
                    principalId: {},
                    policy: {},
                    authorization: {
                        shape: "S6a"
                    },
                    claims: {
                        shape: "S6"
                    }
                }
            }
        },
        TestInvokeMethod: {
            http: {
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    pathWithQueryString: {},
                    body: {},
                    headers: {
                        shape: "S6"
                    },
                    multiValueHeaders: {
                        shape: "S6a"
                    },
                    clientCertificateId: {},
                    stageVariables: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {
                        type: "integer"
                    },
                    body: {},
                    headers: {
                        shape: "S6"
                    },
                    multiValueHeaders: {
                        shape: "S6a"
                    },
                    log: {},
                    latency: {
                        type: "long"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource_arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resource_arn"
                    },
                    tagKeys: {
                        shape: "S9",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                }
            }
        },
        UpdateAccount: {
            http: {
                method: "PATCH",
                requestUri: "/account"
            },
            input: {
                type: "structure",
                members: {
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S36"
            }
        },
        UpdateApiKey: {
            http: {
                method: "PATCH",
                requestUri: "/apikeys/{api_Key}"
            },
            input: {
                type: "structure",
                required: [ "apiKey" ],
                members: {
                    apiKey: {
                        location: "uri",
                        locationName: "api_Key"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S7"
            }
        },
        UpdateAuthorizer: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/authorizers/{authorizer_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "authorizerId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    authorizerId: {
                        location: "uri",
                        locationName: "authorizer_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "Sf"
            }
        },
        UpdateBasePathMapping: {
            http: {
                method: "PATCH",
                requestUri: "/domainnames/{domain_name}/basepathmappings/{base_path}"
            },
            input: {
                type: "structure",
                required: [ "domainName", "basePath" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    },
                    basePath: {
                        location: "uri",
                        locationName: "base_path"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "Sh"
            }
        },
        UpdateClientCertificate: {
            http: {
                method: "PATCH",
                requestUri: "/clientcertificates/{clientcertificate_id}"
            },
            input: {
                type: "structure",
                required: [ "clientCertificateId" ],
                members: {
                    clientCertificateId: {
                        location: "uri",
                        locationName: "clientcertificate_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S34"
            }
        },
        UpdateDeployment: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/deployments/{deployment_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "deploymentId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    deploymentId: {
                        location: "uri",
                        locationName: "deployment_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "Sn"
            }
        },
        UpdateDocumentationPart: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/documentation/parts/{part_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationPartId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationPartId: {
                        location: "uri",
                        locationName: "part_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "Sv"
            }
        },
        UpdateDocumentationVersion: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/documentation/versions/{doc_version}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "documentationVersion" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    documentationVersion: {
                        location: "uri",
                        locationName: "doc_version"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "Sx"
            }
        },
        UpdateDomainName: {
            http: {
                method: "PATCH",
                requestUri: "/domainnames/{domain_name}"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domain_name"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S14"
            }
        },
        UpdateGatewayResponse: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/gatewayresponses/{response_type}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "responseType" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    responseType: {
                        location: "uri",
                        locationName: "response_type"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S48"
            }
        },
        UpdateIntegration: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1j"
            }
        },
        UpdateIntegrationResponse: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1p"
            }
        },
        UpdateMethod: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1e"
            }
        },
        UpdateMethodResponse: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId", "httpMethod", "statusCode" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    httpMethod: {
                        location: "uri",
                        locationName: "http_method"
                    },
                    statusCode: {
                        location: "uri",
                        locationName: "status_code"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1h"
            }
        },
        UpdateModel: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/models/{model_name}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "modelName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    modelName: {
                        location: "uri",
                        locationName: "model_name"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S18"
            }
        },
        UpdateRequestValidator: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "requestValidatorId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    requestValidatorId: {
                        location: "uri",
                        locationName: "requestvalidator_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1a"
            }
        },
        UpdateResource: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/resources/{resource_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "resourceId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    resourceId: {
                        location: "uri",
                        locationName: "resource_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1c"
            }
        },
        UpdateRestApi: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}"
            },
            input: {
                type: "structure",
                required: [ "restApiId" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1t"
            }
        },
        UpdateStage: {
            http: {
                method: "PATCH",
                requestUri: "/restapis/{restapi_id}/stages/{stage_name}"
            },
            input: {
                type: "structure",
                required: [ "restApiId", "stageName" ],
                members: {
                    restApiId: {
                        location: "uri",
                        locationName: "restapi_id"
                    },
                    stageName: {
                        location: "uri",
                        locationName: "stage_name"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S1w"
            }
        },
        UpdateUsage: {
            http: {
                method: "PATCH",
                requestUri: "/usageplans/{usageplanId}/keys/{keyId}/usage"
            },
            input: {
                type: "structure",
                required: [ "usagePlanId", "keyId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    keyId: {
                        location: "uri",
                        locationName: "keyId"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S5e"
            }
        },
        UpdateUsagePlan: {
            http: {
                method: "PATCH",
                requestUri: "/usageplans/{usageplanId}"
            },
            input: {
                type: "structure",
                required: [ "usagePlanId" ],
                members: {
                    usagePlanId: {
                        location: "uri",
                        locationName: "usageplanId"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S29"
            }
        },
        UpdateVpcLink: {
            http: {
                method: "PATCH",
                requestUri: "/vpclinks/{vpclink_id}"
            },
            input: {
                type: "structure",
                required: [ "vpcLinkId" ],
                members: {
                    vpcLinkId: {
                        location: "uri",
                        locationName: "vpclink_id"
                    },
                    patchOperations: {
                        shape: "S6g"
                    }
                }
            },
            output: {
                shape: "S2d"
            }
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {}
        },
        S7: {
            type: "structure",
            members: {
                id: {},
                value: {},
                name: {},
                customerId: {},
                description: {},
                enabled: {
                    type: "boolean"
                },
                createdDate: {
                    type: "timestamp"
                },
                lastUpdatedDate: {
                    type: "timestamp"
                },
                stageKeys: {
                    shape: "S9"
                },
                tags: {
                    shape: "S6"
                }
            }
        },
        S9: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            members: {
                id: {},
                name: {},
                type: {},
                providerARNs: {
                    shape: "Sc"
                },
                authType: {},
                authorizerUri: {},
                authorizerCredentials: {},
                identitySource: {},
                identityValidationExpression: {},
                authorizerResultTtlInSeconds: {
                    type: "integer"
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                basePath: {},
                restApiId: {},
                stage: {}
            }
        },
        Sn: {
            type: "structure",
            members: {
                id: {},
                description: {},
                createdDate: {
                    type: "timestamp"
                },
                apiSummary: {
                    type: "map",
                    key: {},
                    value: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                authorizationType: {},
                                apiKeyRequired: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                path: {},
                method: {},
                statusCode: {},
                name: {}
            }
        },
        Sv: {
            type: "structure",
            members: {
                id: {},
                location: {
                    shape: "Ss"
                },
                properties: {}
            }
        },
        Sx: {
            type: "structure",
            members: {
                version: {},
                createdDate: {
                    type: "timestamp"
                },
                description: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                types: {
                    type: "list",
                    member: {}
                },
                vpcEndpointIds: {
                    shape: "S9"
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                domainName: {},
                certificateName: {},
                certificateArn: {},
                certificateUploadDate: {
                    type: "timestamp"
                },
                regionalDomainName: {},
                regionalHostedZoneId: {},
                regionalCertificateName: {},
                regionalCertificateArn: {},
                distributionDomainName: {},
                distributionHostedZoneId: {},
                endpointConfiguration: {
                    shape: "Sz"
                },
                domainNameStatus: {},
                domainNameStatusMessage: {},
                securityPolicy: {},
                tags: {
                    shape: "S6"
                },
                mutualTlsAuthentication: {
                    type: "structure",
                    members: {
                        truststoreUri: {},
                        truststoreVersion: {},
                        truststoreWarnings: {
                            shape: "S9"
                        }
                    }
                },
                ownershipVerificationCertificateArn: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                id: {},
                name: {},
                description: {},
                schema: {},
                contentType: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                id: {},
                name: {},
                validateRequestBody: {
                    type: "boolean"
                },
                validateRequestParameters: {
                    type: "boolean"
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                id: {},
                parentId: {},
                pathPart: {},
                path: {},
                resourceMethods: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S1e"
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                httpMethod: {},
                authorizationType: {},
                authorizerId: {},
                apiKeyRequired: {
                    type: "boolean"
                },
                requestValidatorId: {},
                operationName: {},
                requestParameters: {
                    shape: "S1f"
                },
                requestModels: {
                    shape: "S6"
                },
                methodResponses: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S1h"
                    }
                },
                methodIntegration: {
                    shape: "S1j"
                },
                authorizationScopes: {
                    shape: "S9"
                }
            }
        },
        S1f: {
            type: "map",
            key: {},
            value: {
                type: "boolean"
            }
        },
        S1h: {
            type: "structure",
            members: {
                statusCode: {},
                responseParameters: {
                    shape: "S1f"
                },
                responseModels: {
                    shape: "S6"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                type: {},
                httpMethod: {},
                uri: {},
                connectionType: {},
                connectionId: {},
                credentials: {},
                requestParameters: {
                    shape: "S6"
                },
                requestTemplates: {
                    shape: "S6"
                },
                passthroughBehavior: {},
                contentHandling: {},
                timeoutInMillis: {
                    type: "integer"
                },
                cacheNamespace: {},
                cacheKeyParameters: {
                    shape: "S9"
                },
                integrationResponses: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S1p"
                    }
                },
                tlsConfig: {
                    shape: "S1q"
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                statusCode: {},
                selectionPattern: {},
                responseParameters: {
                    shape: "S6"
                },
                responseTemplates: {
                    shape: "S6"
                },
                contentHandling: {}
            }
        },
        S1q: {
            type: "structure",
            members: {
                insecureSkipVerification: {
                    type: "boolean"
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                id: {},
                name: {},
                description: {},
                createdDate: {
                    type: "timestamp"
                },
                version: {},
                warnings: {
                    shape: "S9"
                },
                binaryMediaTypes: {
                    shape: "S9"
                },
                minimumCompressionSize: {
                    type: "integer"
                },
                apiKeySource: {},
                endpointConfiguration: {
                    shape: "Sz"
                },
                policy: {},
                tags: {
                    shape: "S6"
                },
                disableExecuteApiEndpoint: {
                    type: "boolean"
                },
                rootResourceId: {}
            }
        },
        S1v: {
            type: "structure",
            members: {
                percentTraffic: {
                    type: "double"
                },
                deploymentId: {},
                stageVariableOverrides: {
                    shape: "S6"
                },
                useStageCache: {
                    type: "boolean"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                deploymentId: {},
                clientCertificateId: {},
                stageName: {},
                description: {},
                cacheClusterEnabled: {
                    type: "boolean"
                },
                cacheClusterSize: {},
                cacheClusterStatus: {},
                methodSettings: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            metricsEnabled: {
                                type: "boolean"
                            },
                            loggingLevel: {},
                            dataTraceEnabled: {
                                type: "boolean"
                            },
                            throttlingBurstLimit: {
                                type: "integer"
                            },
                            throttlingRateLimit: {
                                type: "double"
                            },
                            cachingEnabled: {
                                type: "boolean"
                            },
                            cacheTtlInSeconds: {
                                type: "integer"
                            },
                            cacheDataEncrypted: {
                                type: "boolean"
                            },
                            requireAuthorizationForCacheControl: {
                                type: "boolean"
                            },
                            unauthorizedCacheControlHeaderStrategy: {}
                        }
                    }
                },
                variables: {
                    shape: "S6"
                },
                documentationVersion: {},
                accessLogSettings: {
                    type: "structure",
                    members: {
                        format: {},
                        destinationArn: {}
                    }
                },
                canarySettings: {
                    shape: "S1v"
                },
                tracingEnabled: {
                    type: "boolean"
                },
                webAclArn: {},
                tags: {
                    shape: "S6"
                },
                createdDate: {
                    type: "timestamp"
                },
                lastUpdatedDate: {
                    type: "timestamp"
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    apiId: {},
                    stage: {},
                    throttle: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S26"
                        }
                    }
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                burstLimit: {
                    type: "integer"
                },
                rateLimit: {
                    type: "double"
                }
            }
        },
        S27: {
            type: "structure",
            members: {
                limit: {
                    type: "integer"
                },
                offset: {
                    type: "integer"
                },
                period: {}
            }
        },
        S29: {
            type: "structure",
            members: {
                id: {},
                name: {},
                description: {},
                apiStages: {
                    shape: "S23"
                },
                throttle: {
                    shape: "S26"
                },
                quota: {
                    shape: "S27"
                },
                productCode: {},
                tags: {
                    shape: "S6"
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                id: {},
                type: {},
                value: {},
                name: {}
            }
        },
        S2d: {
            type: "structure",
            members: {
                id: {},
                name: {},
                description: {},
                targetArns: {
                    shape: "S9"
                },
                status: {},
                statusMessage: {},
                tags: {
                    shape: "S6"
                }
            }
        },
        S34: {
            type: "structure",
            members: {
                clientCertificateId: {},
                description: {},
                pemEncodedCertificate: {},
                createdDate: {
                    type: "timestamp"
                },
                expirationDate: {
                    type: "timestamp"
                },
                tags: {
                    shape: "S6"
                }
            }
        },
        S36: {
            type: "structure",
            members: {
                cloudwatchRoleArn: {},
                throttleSettings: {
                    shape: "S26"
                },
                features: {
                    shape: "S9"
                },
                apiKeyVersion: {}
            }
        },
        S48: {
            type: "structure",
            members: {
                responseType: {},
                statusCode: {},
                responseParameters: {
                    shape: "S6"
                },
                responseTemplates: {
                    shape: "S6"
                },
                defaultResponse: {
                    type: "boolean"
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                id: {},
                friendlyName: {},
                description: {},
                configurationProperties: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            friendlyName: {},
                            description: {},
                            required: {
                                type: "boolean"
                            },
                            defaultValue: {}
                        }
                    }
                }
            }
        },
        S5e: {
            type: "structure",
            members: {
                usagePlanId: {},
                startDate: {},
                endDate: {},
                position: {},
                items: {
                    locationName: "values",
                    type: "map",
                    key: {},
                    value: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S6a: {
            type: "map",
            key: {},
            value: {
                shape: "S9"
            }
        },
        S6g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    op: {},
                    path: {},
                    value: {},
                    from: {}
                }
            }
        }
    },
    paginators: {
        GetApiKeys: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetBasePathMappings: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetClientCertificates: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetDeployments: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetDomainNames: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetModels: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetResources: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetRestApis: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetUsage: {
            input_token: "position",
            limit_key: "limit",
            non_aggregate_keys: [ "usagePlanId", "startDate", "endDate" ],
            output_token: "position",
            result_key: "items"
        },
        GetUsagePlanKeys: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetUsagePlans: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        },
        GetVpcLinks: {
            input_token: "position",
            limit_key: "limit",
            output_token: "position",
            result_key: "items"
        }
    }
};

AWS.apiLoader.services["applicationautoscaling"] = {};

AWS.ApplicationAutoScaling = AWS.Service.defineService("applicationautoscaling", [ "2016-02-06" ]);

AWS.apiLoader.services["applicationautoscaling"]["2016-02-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-02-06",
        endpointPrefix: "application-autoscaling",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Application Auto Scaling",
        serviceId: "Application Auto Scaling",
        signatureVersion: "v4",
        signingName: "application-autoscaling",
        targetPrefix: "AnyScaleFrontendService",
        uid: "application-autoscaling-2016-02-06"
    },
    operations: {
        DeleteScalingPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyName", "ServiceNamespace", "ResourceId", "ScalableDimension" ],
                members: {
                    PolicyName: {},
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteScheduledAction: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace", "ScheduledActionName", "ResourceId", "ScalableDimension" ],
                members: {
                    ServiceNamespace: {},
                    ScheduledActionName: {},
                    ResourceId: {},
                    ScalableDimension: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterScalableTarget: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace", "ResourceId", "ScalableDimension" ],
                members: {
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeScalableTargets: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace" ],
                members: {
                    ServiceNamespace: {},
                    ResourceIds: {
                        shape: "Sb"
                    },
                    ScalableDimension: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalableTargets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ServiceNamespace", "ResourceId", "ScalableDimension", "MinCapacity", "MaxCapacity", "RoleARN", "CreationTime" ],
                            members: {
                                ServiceNamespace: {},
                                ResourceId: {},
                                ScalableDimension: {},
                                MinCapacity: {
                                    type: "integer"
                                },
                                MaxCapacity: {
                                    type: "integer"
                                },
                                RoleARN: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                SuspendedState: {
                                    shape: "Sj"
                                },
                                ScalableTargetARN: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScalingActivities: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace" ],
                members: {
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IncludeNotScaledActivities: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingActivities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ActivityId", "ServiceNamespace", "ResourceId", "ScalableDimension", "Description", "Cause", "StartTime", "StatusCode" ],
                            members: {
                                ActivityId: {},
                                ServiceNamespace: {},
                                ResourceId: {},
                                ScalableDimension: {},
                                Description: {},
                                Cause: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                StatusCode: {},
                                StatusMessage: {},
                                Details: {},
                                NotScaledReasons: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Code" ],
                                        members: {
                                            Code: {},
                                            MaxCapacity: {
                                                type: "integer"
                                            },
                                            MinCapacity: {
                                                type: "integer"
                                            },
                                            CurrentCapacity: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScalingPolicies: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace" ],
                members: {
                    PolicyNames: {
                        shape: "Sb"
                    },
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalingPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PolicyARN", "PolicyName", "ServiceNamespace", "ResourceId", "ScalableDimension", "PolicyType", "CreationTime" ],
                            members: {
                                PolicyARN: {},
                                PolicyName: {},
                                ServiceNamespace: {},
                                ResourceId: {},
                                ScalableDimension: {},
                                PolicyType: {},
                                StepScalingPolicyConfiguration: {
                                    shape: "S10"
                                },
                                TargetTrackingScalingPolicyConfiguration: {
                                    shape: "S19"
                                },
                                Alarms: {
                                    shape: "S21"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScheduledActions: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace" ],
                members: {
                    ScheduledActionNames: {
                        shape: "Sb"
                    },
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduledActions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ScheduledActionName", "ScheduledActionARN", "ServiceNamespace", "Schedule", "ResourceId", "CreationTime" ],
                            members: {
                                ScheduledActionName: {},
                                ScheduledActionARN: {},
                                ServiceNamespace: {},
                                Schedule: {},
                                Timezone: {},
                                ResourceId: {},
                                ScalableDimension: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                ScalableTargetAction: {
                                    shape: "S28"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2c"
                    }
                }
            }
        },
        PutScalingPolicy: {
            input: {
                type: "structure",
                required: [ "PolicyName", "ServiceNamespace", "ResourceId", "ScalableDimension" ],
                members: {
                    PolicyName: {},
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    PolicyType: {},
                    StepScalingPolicyConfiguration: {
                        shape: "S10"
                    },
                    TargetTrackingScalingPolicyConfiguration: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "PolicyARN" ],
                members: {
                    PolicyARN: {},
                    Alarms: {
                        shape: "S21"
                    }
                }
            }
        },
        PutScheduledAction: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace", "ScheduledActionName", "ResourceId", "ScalableDimension" ],
                members: {
                    ServiceNamespace: {},
                    Schedule: {},
                    Timezone: {},
                    ScheduledActionName: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    ScalableTargetAction: {
                        shape: "S28"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RegisterScalableTarget: {
            input: {
                type: "structure",
                required: [ "ServiceNamespace", "ResourceId", "ScalableDimension" ],
                members: {
                    ServiceNamespace: {},
                    ResourceId: {},
                    ScalableDimension: {},
                    MinCapacity: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "integer"
                    },
                    RoleARN: {},
                    SuspendedState: {
                        shape: "Sj"
                    },
                    Tags: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScalableTargetARN: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sb: {
            type: "list",
            member: {}
        },
        Sj: {
            type: "structure",
            members: {
                DynamicScalingInSuspended: {
                    type: "boolean"
                },
                DynamicScalingOutSuspended: {
                    type: "boolean"
                },
                ScheduledScalingSuspended: {
                    type: "boolean"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                AdjustmentType: {},
                StepAdjustments: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ScalingAdjustment" ],
                        members: {
                            MetricIntervalLowerBound: {
                                type: "double"
                            },
                            MetricIntervalUpperBound: {
                                type: "double"
                            },
                            ScalingAdjustment: {
                                type: "integer"
                            }
                        }
                    }
                },
                MinAdjustmentMagnitude: {
                    type: "integer"
                },
                Cooldown: {
                    type: "integer"
                },
                MetricAggregationType: {}
            }
        },
        S19: {
            type: "structure",
            required: [ "TargetValue" ],
            members: {
                TargetValue: {
                    type: "double"
                },
                PredefinedMetricSpecification: {
                    type: "structure",
                    required: [ "PredefinedMetricType" ],
                    members: {
                        PredefinedMetricType: {},
                        ResourceLabel: {}
                    }
                },
                CustomizedMetricSpecification: {
                    type: "structure",
                    members: {
                        MetricName: {},
                        Namespace: {},
                        Dimensions: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Name", "Value" ],
                                members: {
                                    Name: {},
                                    Value: {}
                                }
                            }
                        },
                        Statistic: {},
                        Unit: {},
                        Metrics: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Id" ],
                                members: {
                                    Expression: {},
                                    Id: {},
                                    Label: {},
                                    MetricStat: {
                                        type: "structure",
                                        required: [ "Metric", "Stat" ],
                                        members: {
                                            Metric: {
                                                type: "structure",
                                                members: {
                                                    Dimensions: {
                                                        type: "list",
                                                        member: {
                                                            type: "structure",
                                                            required: [ "Name", "Value" ],
                                                            members: {
                                                                Name: {},
                                                                Value: {}
                                                            }
                                                        }
                                                    },
                                                    MetricName: {},
                                                    Namespace: {}
                                                }
                                            },
                                            Stat: {},
                                            Unit: {}
                                        }
                                    },
                                    ReturnData: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                ScaleOutCooldown: {
                    type: "integer"
                },
                ScaleInCooldown: {
                    type: "integer"
                },
                DisableScaleIn: {
                    type: "boolean"
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AlarmName", "AlarmARN" ],
                members: {
                    AlarmName: {},
                    AlarmARN: {}
                }
            }
        },
        S28: {
            type: "structure",
            members: {
                MinCapacity: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "integer"
                }
            }
        },
        S2c: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeScalableTargets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScalableTargets"
        },
        DescribeScalingActivities: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScalingActivities"
        },
        DescribeScalingPolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScalingPolicies"
        },
        DescribeScheduledActions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScheduledActions"
        }
    }
};

AWS.apiLoader.services["appstream"] = {};

AWS.AppStream = AWS.Service.defineService("appstream", [ "2016-12-01" ]);

AWS.apiLoader.services["appstream"]["2016-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-12-01",
        endpointPrefix: "appstream2",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon AppStream",
        serviceId: "AppStream",
        signatureVersion: "v4",
        signingName: "appstream",
        targetPrefix: "PhotonAdminProxyService",
        uid: "appstream-2016-12-01"
    },
    operations: {
        AssociateAppBlockBuilderAppBlock: {
            input: {
                type: "structure",
                required: [ "AppBlockArn", "AppBlockBuilderName" ],
                members: {
                    AppBlockArn: {},
                    AppBlockBuilderName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilderAppBlockAssociation: {
                        shape: "S5"
                    }
                }
            }
        },
        AssociateApplicationFleet: {
            input: {
                type: "structure",
                required: [ "FleetName", "ApplicationArn" ],
                members: {
                    FleetName: {},
                    ApplicationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationFleetAssociation: {
                        shape: "S8"
                    }
                }
            }
        },
        AssociateApplicationToEntitlement: {
            input: {
                type: "structure",
                required: [ "StackName", "EntitlementName", "ApplicationIdentifier" ],
                members: {
                    StackName: {},
                    EntitlementName: {},
                    ApplicationIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateFleet: {
            input: {
                type: "structure",
                required: [ "FleetName", "StackName" ],
                members: {
                    FleetName: {},
                    StackName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchAssociateUserStack: {
            input: {
                type: "structure",
                required: [ "UserStackAssociations" ],
                members: {
                    UserStackAssociations: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        shape: "Sl"
                    }
                }
            }
        },
        BatchDisassociateUserStack: {
            input: {
                type: "structure",
                required: [ "UserStackAssociations" ],
                members: {
                    UserStackAssociations: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        shape: "Sl"
                    }
                }
            }
        },
        CopyImage: {
            input: {
                type: "structure",
                required: [ "SourceImageName", "DestinationImageName", "DestinationRegion" ],
                members: {
                    SourceImageName: {},
                    DestinationImageName: {},
                    DestinationRegion: {},
                    DestinationImageDescription: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DestinationImageName: {}
                }
            }
        },
        CreateAppBlock: {
            input: {
                type: "structure",
                required: [ "Name", "SourceS3Location" ],
                members: {
                    Name: {},
                    Description: {},
                    DisplayName: {},
                    SourceS3Location: {
                        shape: "Sw"
                    },
                    SetupScriptDetails: {
                        shape: "Sz"
                    },
                    Tags: {
                        shape: "S11"
                    },
                    PostSetupScriptDetails: {
                        shape: "Sz"
                    },
                    PackagingType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlock: {
                        shape: "S16"
                    }
                }
            }
        },
        CreateAppBlockBuilder: {
            input: {
                type: "structure",
                required: [ "Name", "Platform", "InstanceType", "VpcConfig" ],
                members: {
                    Name: {},
                    Description: {},
                    DisplayName: {},
                    Tags: {
                        shape: "S11"
                    },
                    Platform: {},
                    InstanceType: {},
                    VpcConfig: {
                        shape: "S1d"
                    },
                    EnableDefaultInternetAccess: {
                        type: "boolean"
                    },
                    IamRoleArn: {},
                    AccessEndpoints: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilder: {
                        shape: "S1l"
                    }
                }
            }
        },
        CreateAppBlockBuilderStreamingURL: {
            input: {
                type: "structure",
                required: [ "AppBlockBuilderName" ],
                members: {
                    AppBlockBuilderName: {},
                    Validity: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingURL: {},
                    Expires: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "Name", "IconS3Location", "LaunchPath", "Platforms", "InstanceFamilies", "AppBlockArn" ],
                members: {
                    Name: {},
                    DisplayName: {},
                    Description: {},
                    IconS3Location: {
                        shape: "Sw"
                    },
                    LaunchPath: {},
                    WorkingDirectory: {},
                    LaunchParameters: {},
                    Platforms: {
                        shape: "S1w"
                    },
                    InstanceFamilies: {
                        shape: "S1y"
                    },
                    AppBlockArn: {},
                    Tags: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Application: {
                        shape: "S20"
                    }
                }
            }
        },
        CreateDirectoryConfig: {
            input: {
                type: "structure",
                required: [ "DirectoryName", "OrganizationalUnitDistinguishedNames" ],
                members: {
                    DirectoryName: {},
                    OrganizationalUnitDistinguishedNames: {
                        shape: "S24"
                    },
                    ServiceAccountCredentials: {
                        shape: "S26"
                    },
                    CertificateBasedAuthProperties: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryConfig: {
                        shape: "S2c"
                    }
                }
            }
        },
        CreateEntitlement: {
            input: {
                type: "structure",
                required: [ "Name", "StackName", "AppVisibility", "Attributes" ],
                members: {
                    Name: {},
                    StackName: {},
                    Description: {},
                    AppVisibility: {},
                    Attributes: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlement: {
                        shape: "S2i"
                    }
                }
            }
        },
        CreateFleet: {
            input: {
                type: "structure",
                required: [ "Name", "InstanceType" ],
                members: {
                    Name: {},
                    ImageName: {},
                    ImageArn: {},
                    InstanceType: {},
                    FleetType: {},
                    ComputeCapacity: {
                        shape: "S2l"
                    },
                    VpcConfig: {
                        shape: "S1d"
                    },
                    MaxUserDurationInSeconds: {
                        type: "integer"
                    },
                    DisconnectTimeoutInSeconds: {
                        type: "integer"
                    },
                    Description: {},
                    DisplayName: {},
                    EnableDefaultInternetAccess: {
                        type: "boolean"
                    },
                    DomainJoinInfo: {
                        shape: "S2m"
                    },
                    Tags: {
                        shape: "S11"
                    },
                    IdleDisconnectTimeoutInSeconds: {
                        type: "integer"
                    },
                    IamRoleArn: {},
                    StreamView: {},
                    Platform: {},
                    MaxConcurrentSessions: {
                        type: "integer"
                    },
                    UsbDeviceFilterStrings: {
                        shape: "S2o"
                    },
                    SessionScriptS3Location: {
                        shape: "Sw"
                    },
                    MaxSessionsPerInstance: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fleet: {
                        shape: "S2r"
                    }
                }
            }
        },
        CreateImageBuilder: {
            input: {
                type: "structure",
                required: [ "Name", "InstanceType" ],
                members: {
                    Name: {},
                    ImageName: {},
                    ImageArn: {},
                    InstanceType: {},
                    Description: {},
                    DisplayName: {},
                    VpcConfig: {
                        shape: "S1d"
                    },
                    IamRoleArn: {},
                    EnableDefaultInternetAccess: {
                        type: "boolean"
                    },
                    DomainJoinInfo: {
                        shape: "S2m"
                    },
                    AppstreamAgentVersion: {},
                    Tags: {
                        shape: "S11"
                    },
                    AccessEndpoints: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBuilder: {
                        shape: "S2z"
                    }
                }
            }
        },
        CreateImageBuilderStreamingURL: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Validity: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingURL: {},
                    Expires: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateStack: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    DisplayName: {},
                    StorageConnectors: {
                        shape: "S37"
                    },
                    RedirectURL: {},
                    FeedbackURL: {},
                    UserSettings: {
                        shape: "S3f"
                    },
                    ApplicationSettings: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S11"
                    },
                    AccessEndpoints: {
                        shape: "S1h"
                    },
                    EmbedHostDomains: {
                        shape: "S3l"
                    },
                    StreamingExperienceSettings: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stack: {
                        shape: "S3q"
                    }
                }
            }
        },
        CreateStreamingURL: {
            input: {
                type: "structure",
                required: [ "StackName", "FleetName", "UserId" ],
                members: {
                    StackName: {},
                    FleetName: {},
                    UserId: {},
                    ApplicationId: {},
                    Validity: {
                        type: "long"
                    },
                    SessionContext: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingURL: {},
                    Expires: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateUpdatedImage: {
            input: {
                type: "structure",
                required: [ "existingImageName", "newImageName" ],
                members: {
                    existingImageName: {},
                    newImageName: {},
                    newImageDescription: {},
                    newImageDisplayName: {},
                    newImageTags: {
                        shape: "S11"
                    },
                    dryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    image: {
                        shape: "S40"
                    },
                    canUpdateImage: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateUsageReportSubscription: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    S3BucketName: {},
                    Schedule: {}
                }
            }
        },
        CreateUser: {
            input: {
                type: "structure",
                required: [ "UserName", "AuthenticationType" ],
                members: {
                    UserName: {
                        shape: "Sh"
                    },
                    MessageAction: {},
                    FirstName: {
                        shape: "S4c"
                    },
                    LastName: {
                        shape: "S4c"
                    },
                    AuthenticationType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppBlock: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppBlockBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDirectoryConfig: {
            input: {
                type: "structure",
                required: [ "DirectoryName" ],
                members: {
                    DirectoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEntitlement: {
            input: {
                type: "structure",
                required: [ "Name", "StackName" ],
                members: {
                    Name: {},
                    StackName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFleet: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteImage: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Image: {
                        shape: "S40"
                    }
                }
            }
        },
        DeleteImageBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBuilder: {
                        shape: "S2z"
                    }
                }
            }
        },
        DeleteImagePermissions: {
            input: {
                type: "structure",
                required: [ "Name", "SharedAccountId" ],
                members: {
                    Name: {},
                    SharedAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStack: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteUsageReportSubscription: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "UserName", "AuthenticationType" ],
                members: {
                    UserName: {
                        shape: "Sh"
                    },
                    AuthenticationType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAppBlockBuilderAppBlockAssociations: {
            input: {
                type: "structure",
                members: {
                    AppBlockArn: {},
                    AppBlockBuilderName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilderAppBlockAssociations: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAppBlockBuilders: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilders: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAppBlocks: {
            input: {
                type: "structure",
                members: {
                    Arns: {
                        shape: "S5a"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlocks: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeApplicationFleetAssociations: {
            input: {
                type: "structure",
                members: {
                    FleetName: {},
                    ApplicationArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationFleetAssociations: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeApplications: {
            input: {
                type: "structure",
                members: {
                    Arns: {
                        shape: "S5a"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        shape: "S45"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDirectoryConfigs: {
            input: {
                type: "structure",
                members: {
                    DirectoryNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryConfigs: {
                        type: "list",
                        member: {
                            shape: "S2c"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEntitlements: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    Name: {},
                    StackName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        type: "list",
                        member: {
                            shape: "S2i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleets: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Fleets: {
                        type: "list",
                        member: {
                            shape: "S2r"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeImageBuilders: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBuilders: {
                        type: "list",
                        member: {
                            shape: "S2z"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeImagePermissions: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SharedAwsAccountIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    SharedImagePermissionsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sharedAccountId", "imagePermissions" ],
                            members: {
                                sharedAccountId: {},
                                imagePermissions: {
                                    shape: "S46"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeImages: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    Arns: {
                        shape: "S5a"
                    },
                    Type: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        type: "list",
                        member: {
                            shape: "S40"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSessions: {
            input: {
                type: "structure",
                required: [ "StackName", "FleetName" ],
                members: {
                    StackName: {},
                    FleetName: {},
                    UserId: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    },
                    AuthenticationType: {},
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Sessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "UserId", "StackName", "FleetName", "State" ],
                            members: {
                                Id: {},
                                UserId: {},
                                StackName: {},
                                FleetName: {},
                                State: {},
                                ConnectionState: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                MaxExpirationTime: {
                                    type: "timestamp"
                                },
                                AuthenticationType: {},
                                NetworkAccessConfiguration: {
                                    shape: "S33"
                                },
                                InstanceId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStacks: {
            input: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Stacks: {
                        type: "list",
                        member: {
                            shape: "S3q"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeUsageReportSubscriptions: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UsageReportSubscriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                S3BucketName: {},
                                Schedule: {},
                                LastGeneratedReportDate: {
                                    type: "timestamp"
                                },
                                SubscriptionErrors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeUserStackAssociations: {
            input: {
                type: "structure",
                members: {
                    StackName: {},
                    UserName: {
                        shape: "Sh"
                    },
                    AuthenticationType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserStackAssociations: {
                        shape: "Sf"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeUsers: {
            input: {
                type: "structure",
                required: [ "AuthenticationType" ],
                members: {
                    AuthenticationType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AuthenticationType" ],
                            members: {
                                Arn: {},
                                UserName: {
                                    shape: "Sh"
                                },
                                Enabled: {
                                    type: "boolean"
                                },
                                Status: {},
                                FirstName: {
                                    shape: "S4c"
                                },
                                LastName: {
                                    shape: "S4c"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                AuthenticationType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisableUser: {
            input: {
                type: "structure",
                required: [ "UserName", "AuthenticationType" ],
                members: {
                    UserName: {
                        shape: "Sh"
                    },
                    AuthenticationType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateAppBlockBuilderAppBlock: {
            input: {
                type: "structure",
                required: [ "AppBlockArn", "AppBlockBuilderName" ],
                members: {
                    AppBlockArn: {},
                    AppBlockBuilderName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateApplicationFleet: {
            input: {
                type: "structure",
                required: [ "FleetName", "ApplicationArn" ],
                members: {
                    FleetName: {},
                    ApplicationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateApplicationFromEntitlement: {
            input: {
                type: "structure",
                required: [ "StackName", "EntitlementName", "ApplicationIdentifier" ],
                members: {
                    StackName: {},
                    EntitlementName: {},
                    ApplicationIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFleet: {
            input: {
                type: "structure",
                required: [ "FleetName", "StackName" ],
                members: {
                    FleetName: {},
                    StackName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableUser: {
            input: {
                type: "structure",
                required: [ "UserName", "AuthenticationType" ],
                members: {
                    UserName: {
                        shape: "Sh"
                    },
                    AuthenticationType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExpireSession: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListAssociatedFleets: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    NextToken: {}
                }
            }
        },
        ListAssociatedStacks: {
            input: {
                type: "structure",
                required: [ "FleetName" ],
                members: {
                    FleetName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Names: {
                        shape: "S1y"
                    },
                    NextToken: {}
                }
            }
        },
        ListEntitledApplications: {
            input: {
                type: "structure",
                required: [ "StackName", "EntitlementName" ],
                members: {
                    StackName: {},
                    EntitlementName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitledApplications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ApplicationIdentifier" ],
                            members: {
                                ApplicationIdentifier: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S11"
                    }
                }
            }
        },
        StartAppBlockBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilder: {
                        shape: "S1l"
                    }
                }
            }
        },
        StartFleet: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartImageBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    AppstreamAgentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBuilder: {
                        shape: "S2z"
                    }
                }
            }
        },
        StopAppBlockBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilder: {
                        shape: "S1l"
                    }
                }
            }
        },
        StopFleet: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopImageBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBuilder: {
                        shape: "S2z"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAppBlockBuilder: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    DisplayName: {},
                    Platform: {},
                    InstanceType: {},
                    VpcConfig: {
                        shape: "S1d"
                    },
                    EnableDefaultInternetAccess: {
                        type: "boolean"
                    },
                    IamRoleArn: {},
                    AccessEndpoints: {
                        shape: "S1h"
                    },
                    AttributesToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppBlockBuilder: {
                        shape: "S1l"
                    }
                }
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    DisplayName: {},
                    Description: {},
                    IconS3Location: {
                        shape: "Sw"
                    },
                    LaunchPath: {},
                    WorkingDirectory: {},
                    LaunchParameters: {},
                    AppBlockArn: {},
                    AttributesToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Application: {
                        shape: "S20"
                    }
                }
            }
        },
        UpdateDirectoryConfig: {
            input: {
                type: "structure",
                required: [ "DirectoryName" ],
                members: {
                    DirectoryName: {},
                    OrganizationalUnitDistinguishedNames: {
                        shape: "S24"
                    },
                    ServiceAccountCredentials: {
                        shape: "S26"
                    },
                    CertificateBasedAuthProperties: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryConfig: {
                        shape: "S2c"
                    }
                }
            }
        },
        UpdateEntitlement: {
            input: {
                type: "structure",
                required: [ "Name", "StackName" ],
                members: {
                    Name: {},
                    StackName: {},
                    Description: {},
                    AppVisibility: {},
                    Attributes: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlement: {
                        shape: "S2i"
                    }
                }
            }
        },
        UpdateFleet: {
            input: {
                type: "structure",
                members: {
                    ImageName: {},
                    ImageArn: {},
                    Name: {},
                    InstanceType: {},
                    ComputeCapacity: {
                        shape: "S2l"
                    },
                    VpcConfig: {
                        shape: "S1d"
                    },
                    MaxUserDurationInSeconds: {
                        type: "integer"
                    },
                    DisconnectTimeoutInSeconds: {
                        type: "integer"
                    },
                    DeleteVpcConfig: {
                        deprecated: true,
                        type: "boolean"
                    },
                    Description: {},
                    DisplayName: {},
                    EnableDefaultInternetAccess: {
                        type: "boolean"
                    },
                    DomainJoinInfo: {
                        shape: "S2m"
                    },
                    IdleDisconnectTimeoutInSeconds: {
                        type: "integer"
                    },
                    AttributesToDelete: {
                        type: "list",
                        member: {}
                    },
                    IamRoleArn: {},
                    StreamView: {},
                    Platform: {},
                    MaxConcurrentSessions: {
                        type: "integer"
                    },
                    UsbDeviceFilterStrings: {
                        shape: "S2o"
                    },
                    SessionScriptS3Location: {
                        shape: "Sw"
                    },
                    MaxSessionsPerInstance: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fleet: {
                        shape: "S2r"
                    }
                }
            }
        },
        UpdateImagePermissions: {
            input: {
                type: "structure",
                required: [ "Name", "SharedAccountId", "ImagePermissions" ],
                members: {
                    Name: {},
                    SharedAccountId: {},
                    ImagePermissions: {
                        shape: "S46"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStack: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    DisplayName: {},
                    Description: {},
                    Name: {},
                    StorageConnectors: {
                        shape: "S37"
                    },
                    DeleteStorageConnectors: {
                        deprecated: true,
                        type: "boolean"
                    },
                    RedirectURL: {},
                    FeedbackURL: {},
                    AttributesToDelete: {
                        type: "list",
                        member: {}
                    },
                    UserSettings: {
                        shape: "S3f"
                    },
                    ApplicationSettings: {
                        shape: "S3j"
                    },
                    AccessEndpoints: {
                        shape: "S1h"
                    },
                    EmbedHostDomains: {
                        shape: "S3l"
                    },
                    StreamingExperienceSettings: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stack: {
                        shape: "S3q"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "AppBlockArn", "AppBlockBuilderName" ],
            members: {
                AppBlockArn: {},
                AppBlockBuilderName: {}
            }
        },
        S8: {
            type: "structure",
            required: [ "FleetName", "ApplicationArn" ],
            members: {
                FleetName: {},
                ApplicationArn: {}
            }
        },
        Sf: {
            type: "list",
            member: {
                shape: "Sg"
            }
        },
        Sg: {
            type: "structure",
            required: [ "StackName", "UserName", "AuthenticationType" ],
            members: {
                StackName: {},
                UserName: {
                    shape: "Sh"
                },
                AuthenticationType: {},
                SendEmailNotification: {
                    type: "boolean"
                }
            }
        },
        Sh: {
            type: "string",
            sensitive: true
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    UserStackAssociation: {
                        shape: "Sg"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sw: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        Sz: {
            type: "structure",
            required: [ "ScriptS3Location", "ExecutablePath", "TimeoutInSeconds" ],
            members: {
                ScriptS3Location: {
                    shape: "Sw"
                },
                ExecutablePath: {},
                ExecutableParameters: {},
                TimeoutInSeconds: {
                    type: "integer"
                }
            }
        },
        S11: {
            type: "map",
            key: {},
            value: {}
        },
        S16: {
            type: "structure",
            required: [ "Name", "Arn" ],
            members: {
                Name: {},
                Arn: {},
                Description: {},
                DisplayName: {},
                SourceS3Location: {
                    shape: "Sw"
                },
                SetupScriptDetails: {
                    shape: "Sz"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                PostSetupScriptDetails: {
                    shape: "Sz"
                },
                PackagingType: {},
                State: {},
                AppBlockErrors: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ErrorCode: {},
                            ErrorMessage: {}
                        }
                    }
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                SubnetIds: {
                    type: "list",
                    member: {}
                },
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "EndpointType" ],
                members: {
                    EndpointType: {},
                    VpceId: {}
                }
            }
        },
        S1l: {
            type: "structure",
            required: [ "Arn", "Name", "Platform", "InstanceType", "VpcConfig", "State" ],
            members: {
                Arn: {},
                Name: {},
                DisplayName: {},
                Description: {},
                Platform: {},
                InstanceType: {},
                EnableDefaultInternetAccess: {
                    type: "boolean"
                },
                IamRoleArn: {},
                VpcConfig: {
                    shape: "S1d"
                },
                State: {},
                CreatedTime: {
                    type: "timestamp"
                },
                AppBlockBuilderErrors: {
                    shape: "S1n"
                },
                StateChangeReason: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                },
                AccessEndpoints: {
                    shape: "S1h"
                }
            }
        },
        S1n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ErrorCode: {},
                    ErrorMessage: {},
                    ErrorTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        S1w: {
            type: "list",
            member: {}
        },
        S1y: {
            type: "list",
            member: {}
        },
        S20: {
            type: "structure",
            members: {
                Name: {},
                DisplayName: {},
                IconURL: {},
                LaunchPath: {},
                LaunchParameters: {},
                Enabled: {
                    type: "boolean"
                },
                Metadata: {
                    type: "map",
                    key: {},
                    value: {}
                },
                WorkingDirectory: {},
                Description: {},
                Arn: {},
                AppBlockArn: {},
                IconS3Location: {
                    shape: "Sw"
                },
                Platforms: {
                    shape: "S1w"
                },
                InstanceFamilies: {
                    shape: "S1y"
                },
                CreatedTime: {
                    type: "timestamp"
                }
            }
        },
        S24: {
            type: "list",
            member: {}
        },
        S26: {
            type: "structure",
            required: [ "AccountName", "AccountPassword" ],
            members: {
                AccountName: {
                    type: "string",
                    sensitive: true
                },
                AccountPassword: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S29: {
            type: "structure",
            members: {
                Status: {},
                CertificateAuthorityArn: {}
            }
        },
        S2c: {
            type: "structure",
            required: [ "DirectoryName" ],
            members: {
                DirectoryName: {},
                OrganizationalUnitDistinguishedNames: {
                    shape: "S24"
                },
                ServiceAccountCredentials: {
                    shape: "S26"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                CertificateBasedAuthProperties: {
                    shape: "S29"
                }
            }
        },
        S2f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S2i: {
            type: "structure",
            required: [ "Name", "StackName", "AppVisibility", "Attributes" ],
            members: {
                Name: {},
                StackName: {},
                Description: {},
                AppVisibility: {},
                Attributes: {
                    shape: "S2f"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                DesiredInstances: {
                    type: "integer"
                },
                DesiredSessions: {
                    type: "integer"
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                DirectoryName: {},
                OrganizationalUnitDistinguishedName: {}
            }
        },
        S2o: {
            type: "list",
            member: {}
        },
        S2r: {
            type: "structure",
            required: [ "Arn", "Name", "InstanceType", "ComputeCapacityStatus", "State" ],
            members: {
                Arn: {},
                Name: {},
                DisplayName: {},
                Description: {},
                ImageName: {},
                ImageArn: {},
                InstanceType: {},
                FleetType: {},
                ComputeCapacityStatus: {
                    type: "structure",
                    required: [ "Desired" ],
                    members: {
                        Desired: {
                            type: "integer"
                        },
                        Running: {
                            type: "integer"
                        },
                        InUse: {
                            type: "integer"
                        },
                        Available: {
                            type: "integer"
                        },
                        DesiredUserSessions: {
                            type: "integer"
                        },
                        AvailableUserSessions: {
                            type: "integer"
                        },
                        ActiveUserSessions: {
                            type: "integer"
                        },
                        ActualUserSessions: {
                            type: "integer"
                        }
                    }
                },
                MaxUserDurationInSeconds: {
                    type: "integer"
                },
                DisconnectTimeoutInSeconds: {
                    type: "integer"
                },
                State: {},
                VpcConfig: {
                    shape: "S1d"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                FleetErrors: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ErrorCode: {},
                            ErrorMessage: {}
                        }
                    }
                },
                EnableDefaultInternetAccess: {
                    type: "boolean"
                },
                DomainJoinInfo: {
                    shape: "S2m"
                },
                IdleDisconnectTimeoutInSeconds: {
                    type: "integer"
                },
                IamRoleArn: {},
                StreamView: {},
                Platform: {},
                MaxConcurrentSessions: {
                    type: "integer"
                },
                UsbDeviceFilterStrings: {
                    shape: "S2o"
                },
                SessionScriptS3Location: {
                    shape: "Sw"
                },
                MaxSessionsPerInstance: {
                    type: "integer"
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Arn: {},
                ImageArn: {},
                Description: {},
                DisplayName: {},
                VpcConfig: {
                    shape: "S1d"
                },
                InstanceType: {},
                Platform: {},
                IamRoleArn: {},
                State: {},
                StateChangeReason: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                },
                CreatedTime: {
                    type: "timestamp"
                },
                EnableDefaultInternetAccess: {
                    type: "boolean"
                },
                DomainJoinInfo: {
                    shape: "S2m"
                },
                NetworkAccessConfiguration: {
                    shape: "S33"
                },
                ImageBuilderErrors: {
                    shape: "S1n"
                },
                AppstreamAgentVersion: {},
                AccessEndpoints: {
                    shape: "S1h"
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                EniPrivateIpAddress: {},
                EniId: {}
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ConnectorType" ],
                members: {
                    ConnectorType: {},
                    ResourceIdentifier: {},
                    Domains: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Action", "Permission" ],
                members: {
                    Action: {},
                    Permission: {}
                }
            }
        },
        S3j: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                SettingsGroup: {}
            }
        },
        S3l: {
            type: "list",
            member: {}
        },
        S3n: {
            type: "structure",
            members: {
                PreferredProtocol: {}
            }
        },
        S3q: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Arn: {},
                Name: {},
                Description: {},
                DisplayName: {},
                CreatedTime: {
                    type: "timestamp"
                },
                StorageConnectors: {
                    shape: "S37"
                },
                RedirectURL: {},
                FeedbackURL: {},
                StackErrors: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ErrorCode: {},
                            ErrorMessage: {}
                        }
                    }
                },
                UserSettings: {
                    shape: "S3f"
                },
                ApplicationSettings: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        SettingsGroup: {},
                        S3BucketName: {}
                    }
                },
                AccessEndpoints: {
                    shape: "S1h"
                },
                EmbedHostDomains: {
                    shape: "S3l"
                },
                StreamingExperienceSettings: {
                    shape: "S3n"
                }
            }
        },
        S40: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Arn: {},
                BaseImageArn: {},
                DisplayName: {},
                State: {},
                Visibility: {},
                ImageBuilderSupported: {
                    type: "boolean"
                },
                ImageBuilderName: {},
                Platform: {},
                Description: {},
                StateChangeReason: {
                    type: "structure",
                    members: {
                        Code: {},
                        Message: {}
                    }
                },
                Applications: {
                    shape: "S45"
                },
                CreatedTime: {
                    type: "timestamp"
                },
                PublicBaseImageReleasedDate: {
                    type: "timestamp"
                },
                AppstreamAgentVersion: {},
                ImagePermissions: {
                    shape: "S46"
                },
                ImageErrors: {
                    shape: "S1n"
                }
            }
        },
        S45: {
            type: "list",
            member: {
                shape: "S20"
            }
        },
        S46: {
            type: "structure",
            members: {
                allowFleet: {
                    type: "boolean"
                },
                allowImageBuilder: {
                    type: "boolean"
                }
            }
        },
        S4c: {
            type: "string",
            sensitive: true
        },
        S5a: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeAppBlockBuilderAppBlockAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeAppBlockBuilders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeImagePermissions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeImages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    },
    waiters: {
        FleetStarted: {
            delay: 30,
            maxAttempts: 40,
            operation: "DescribeFleets",
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Fleets[].State",
                expected: "RUNNING"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "Fleets[].State",
                expected: "STOPPING"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "Fleets[].State",
                expected: "STOPPED"
            } ]
        },
        FleetStopped: {
            delay: 30,
            maxAttempts: 40,
            operation: "DescribeFleets",
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Fleets[].State",
                expected: "STOPPED"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "Fleets[].State",
                expected: "STARTING"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "Fleets[].State",
                expected: "RUNNING"
            } ]
        }
    }
};

AWS.apiLoader.services["autoscaling"] = {};

AWS.AutoScaling = AWS.Service.defineService("autoscaling", [ "2011-01-01" ]);

AWS.apiLoader.services["autoscaling"]["2011-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2011-01-01",
        endpointPrefix: "autoscaling",
        protocol: "query",
        serviceFullName: "Auto Scaling",
        serviceId: "Auto Scaling",
        signatureVersion: "v4",
        uid: "autoscaling-2011-01-01",
        xmlNamespace: "http://autoscaling.amazonaws.com/doc/2011-01-01/"
    },
    operations: {
        AttachInstances: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    InstanceIds: {
                        shape: "S2"
                    },
                    AutoScalingGroupName: {}
                }
            }
        },
        AttachLoadBalancerTargetGroups: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "TargetGroupARNs" ],
                members: {
                    AutoScalingGroupName: {},
                    TargetGroupARNs: {
                        shape: "S6"
                    }
                }
            },
            output: {
                resultWrapper: "AttachLoadBalancerTargetGroupsResult",
                type: "structure",
                members: {}
            }
        },
        AttachLoadBalancers: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "LoadBalancerNames" ],
                members: {
                    AutoScalingGroupName: {},
                    LoadBalancerNames: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "AttachLoadBalancersResult",
                type: "structure",
                members: {}
            }
        },
        AttachTrafficSources: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "TrafficSources" ],
                members: {
                    AutoScalingGroupName: {},
                    TrafficSources: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                resultWrapper: "AttachTrafficSourcesResult",
                type: "structure",
                members: {}
            }
        },
        BatchDeleteScheduledAction: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "ScheduledActionNames" ],
                members: {
                    AutoScalingGroupName: {},
                    ScheduledActionNames: {
                        shape: "Sh"
                    }
                }
            },
            output: {
                resultWrapper: "BatchDeleteScheduledActionResult",
                type: "structure",
                members: {
                    FailedScheduledActions: {
                        shape: "Sj"
                    }
                }
            }
        },
        BatchPutScheduledUpdateGroupAction: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "ScheduledUpdateGroupActions" ],
                members: {
                    AutoScalingGroupName: {},
                    ScheduledUpdateGroupActions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ScheduledActionName" ],
                            members: {
                                ScheduledActionName: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Recurrence: {},
                                MinSize: {
                                    type: "integer"
                                },
                                MaxSize: {
                                    type: "integer"
                                },
                                DesiredCapacity: {
                                    type: "integer"
                                },
                                TimeZone: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "BatchPutScheduledUpdateGroupActionResult",
                type: "structure",
                members: {
                    FailedScheduledUpdateGroupActions: {
                        shape: "Sj"
                    }
                }
            }
        },
        CancelInstanceRefresh: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {}
                }
            },
            output: {
                resultWrapper: "CancelInstanceRefreshResult",
                type: "structure",
                members: {
                    InstanceRefreshId: {}
                }
            }
        },
        CompleteLifecycleAction: {
            input: {
                type: "structure",
                required: [ "LifecycleHookName", "AutoScalingGroupName", "LifecycleActionResult" ],
                members: {
                    LifecycleHookName: {},
                    AutoScalingGroupName: {},
                    LifecycleActionToken: {},
                    LifecycleActionResult: {},
                    InstanceId: {}
                }
            },
            output: {
                resultWrapper: "CompleteLifecycleActionResult",
                type: "structure",
                members: {}
            }
        },
        CreateAutoScalingGroup: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "MinSize", "MaxSize" ],
                members: {
                    AutoScalingGroupName: {},
                    LaunchConfigurationName: {},
                    LaunchTemplate: {
                        shape: "S14"
                    },
                    MixedInstancesPolicy: {
                        shape: "S16"
                    },
                    InstanceId: {},
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    DesiredCapacity: {
                        type: "integer"
                    },
                    DefaultCooldown: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S2d"
                    },
                    LoadBalancerNames: {
                        shape: "Sa"
                    },
                    TargetGroupARNs: {
                        shape: "S6"
                    },
                    HealthCheckType: {},
                    HealthCheckGracePeriod: {
                        type: "integer"
                    },
                    PlacementGroup: {},
                    VPCZoneIdentifier: {},
                    TerminationPolicies: {
                        shape: "S2g"
                    },
                    NewInstancesProtectedFromScaleIn: {
                        type: "boolean"
                    },
                    CapacityRebalance: {
                        type: "boolean"
                    },
                    LifecycleHookSpecificationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LifecycleHookName", "LifecycleTransition" ],
                            members: {
                                LifecycleHookName: {},
                                LifecycleTransition: {},
                                NotificationMetadata: {},
                                HeartbeatTimeout: {
                                    type: "integer"
                                },
                                DefaultResult: {},
                                NotificationTargetARN: {},
                                RoleARN: {}
                            }
                        }
                    },
                    Tags: {
                        shape: "S2q"
                    },
                    ServiceLinkedRoleARN: {},
                    MaxInstanceLifetime: {
                        type: "integer"
                    },
                    Context: {},
                    DesiredCapacityType: {},
                    DefaultInstanceWarmup: {
                        type: "integer"
                    },
                    TrafficSources: {
                        shape: "Sd"
                    },
                    InstanceMaintenancePolicy: {
                        shape: "S2y"
                    }
                }
            }
        },
        CreateLaunchConfiguration: {
            input: {
                type: "structure",
                required: [ "LaunchConfigurationName" ],
                members: {
                    LaunchConfigurationName: {},
                    ImageId: {},
                    KeyName: {},
                    SecurityGroups: {
                        shape: "S32"
                    },
                    ClassicLinkVPCId: {},
                    ClassicLinkVPCSecurityGroups: {
                        shape: "S33"
                    },
                    UserData: {},
                    InstanceId: {},
                    InstanceType: {},
                    KernelId: {},
                    RamdiskId: {},
                    BlockDeviceMappings: {
                        shape: "S35"
                    },
                    InstanceMonitoring: {
                        shape: "S3f"
                    },
                    SpotPrice: {},
                    IamInstanceProfile: {},
                    EbsOptimized: {
                        type: "boolean"
                    },
                    AssociatePublicIpAddress: {
                        type: "boolean"
                    },
                    PlacementTenancy: {},
                    MetadataOptions: {
                        shape: "S3k"
                    }
                }
            }
        },
        CreateOrUpdateTags: {
            input: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "S2q"
                    }
                }
            }
        },
        DeleteAutoScalingGroup: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    ForceDelete: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteLaunchConfiguration: {
            input: {
                type: "structure",
                required: [ "LaunchConfigurationName" ],
                members: {
                    LaunchConfigurationName: {}
                }
            }
        },
        DeleteLifecycleHook: {
            input: {
                type: "structure",
                required: [ "LifecycleHookName", "AutoScalingGroupName" ],
                members: {
                    LifecycleHookName: {},
                    AutoScalingGroupName: {}
                }
            },
            output: {
                resultWrapper: "DeleteLifecycleHookResult",
                type: "structure",
                members: {}
            }
        },
        DeleteNotificationConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "TopicARN" ],
                members: {
                    AutoScalingGroupName: {},
                    TopicARN: {}
                }
            }
        },
        DeletePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyName" ],
                members: {
                    AutoScalingGroupName: {},
                    PolicyName: {}
                }
            }
        },
        DeleteScheduledAction: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "ScheduledActionName" ],
                members: {
                    AutoScalingGroupName: {},
                    ScheduledActionName: {}
                }
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "S2q"
                    }
                }
            }
        },
        DeleteWarmPool: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    ForceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteWarmPoolResult",
                type: "structure",
                members: {}
            }
        },
        DescribeAccountLimits: {
            output: {
                resultWrapper: "DescribeAccountLimitsResult",
                type: "structure",
                members: {
                    MaxNumberOfAutoScalingGroups: {
                        type: "integer"
                    },
                    MaxNumberOfLaunchConfigurations: {
                        type: "integer"
                    },
                    NumberOfAutoScalingGroups: {
                        type: "integer"
                    },
                    NumberOfLaunchConfigurations: {
                        type: "integer"
                    }
                }
            }
        },
        DescribeAdjustmentTypes: {
            output: {
                resultWrapper: "DescribeAdjustmentTypesResult",
                type: "structure",
                members: {
                    AdjustmentTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdjustmentType: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeAutoScalingGroups: {
            input: {
                type: "structure",
                members: {
                    AutoScalingGroupNames: {
                        shape: "S49"
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S4b"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAutoScalingGroupsResult",
                type: "structure",
                required: [ "AutoScalingGroups" ],
                members: {
                    AutoScalingGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AutoScalingGroupName", "MinSize", "MaxSize", "DesiredCapacity", "DefaultCooldown", "AvailabilityZones", "HealthCheckType", "CreatedTime" ],
                            members: {
                                AutoScalingGroupName: {},
                                AutoScalingGroupARN: {},
                                LaunchConfigurationName: {},
                                LaunchTemplate: {
                                    shape: "S14"
                                },
                                MixedInstancesPolicy: {
                                    shape: "S16"
                                },
                                MinSize: {
                                    type: "integer"
                                },
                                MaxSize: {
                                    type: "integer"
                                },
                                DesiredCapacity: {
                                    type: "integer"
                                },
                                PredictedCapacity: {
                                    type: "integer"
                                },
                                DefaultCooldown: {
                                    type: "integer"
                                },
                                AvailabilityZones: {
                                    shape: "S2d"
                                },
                                LoadBalancerNames: {
                                    shape: "Sa"
                                },
                                TargetGroupARNs: {
                                    shape: "S6"
                                },
                                HealthCheckType: {},
                                HealthCheckGracePeriod: {
                                    type: "integer"
                                },
                                Instances: {
                                    shape: "S4i"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                SuspendedProcesses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ProcessName: {},
                                            SuspensionReason: {}
                                        }
                                    }
                                },
                                PlacementGroup: {},
                                VPCZoneIdentifier: {},
                                EnabledMetrics: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Metric: {},
                                            Granularity: {}
                                        }
                                    }
                                },
                                Status: {},
                                Tags: {
                                    shape: "S4p"
                                },
                                TerminationPolicies: {
                                    shape: "S2g"
                                },
                                NewInstancesProtectedFromScaleIn: {
                                    type: "boolean"
                                },
                                ServiceLinkedRoleARN: {},
                                MaxInstanceLifetime: {
                                    type: "integer"
                                },
                                CapacityRebalance: {
                                    type: "boolean"
                                },
                                WarmPoolConfiguration: {
                                    shape: "S4r"
                                },
                                WarmPoolSize: {
                                    type: "integer"
                                },
                                Context: {},
                                DesiredCapacityType: {},
                                DefaultInstanceWarmup: {
                                    type: "integer"
                                },
                                TrafficSources: {
                                    shape: "Sd"
                                },
                                InstanceMaintenancePolicy: {
                                    shape: "S2y"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAutoScalingInstances: {
            input: {
                type: "structure",
                members: {
                    InstanceIds: {
                        shape: "S2"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeAutoScalingInstancesResult",
                type: "structure",
                members: {
                    AutoScalingInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InstanceId", "AutoScalingGroupName", "AvailabilityZone", "LifecycleState", "HealthStatus", "ProtectedFromScaleIn" ],
                            members: {
                                InstanceId: {},
                                InstanceType: {},
                                AutoScalingGroupName: {},
                                AvailabilityZone: {},
                                LifecycleState: {},
                                HealthStatus: {},
                                LaunchConfigurationName: {},
                                LaunchTemplate: {
                                    shape: "S14"
                                },
                                ProtectedFromScaleIn: {
                                    type: "boolean"
                                },
                                WeightedCapacity: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAutoScalingNotificationTypes: {
            output: {
                resultWrapper: "DescribeAutoScalingNotificationTypesResult",
                type: "structure",
                members: {
                    AutoScalingNotificationTypes: {
                        shape: "S54"
                    }
                }
            }
        },
        DescribeInstanceRefreshes: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    InstanceRefreshIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeInstanceRefreshesResult",
                type: "structure",
                members: {
                    InstanceRefreshes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceRefreshId: {},
                                AutoScalingGroupName: {},
                                Status: {},
                                StatusReason: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                PercentageComplete: {
                                    type: "integer"
                                },
                                InstancesToUpdate: {
                                    type: "integer"
                                },
                                ProgressDetails: {
                                    shape: "S5e"
                                },
                                Preferences: {
                                    shape: "S5h"
                                },
                                DesiredConfiguration: {
                                    shape: "S5t"
                                },
                                RollbackDetails: {
                                    type: "structure",
                                    members: {
                                        RollbackReason: {},
                                        RollbackStartTime: {
                                            type: "timestamp"
                                        },
                                        PercentageCompleteOnRollback: {
                                            type: "integer"
                                        },
                                        InstancesToUpdateOnRollback: {
                                            type: "integer"
                                        },
                                        ProgressDetailsOnRollback: {
                                            shape: "S5e"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeLaunchConfigurations: {
            input: {
                type: "structure",
                members: {
                    LaunchConfigurationNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLaunchConfigurationsResult",
                type: "structure",
                required: [ "LaunchConfigurations" ],
                members: {
                    LaunchConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LaunchConfigurationName", "ImageId", "InstanceType", "CreatedTime" ],
                            members: {
                                LaunchConfigurationName: {},
                                LaunchConfigurationARN: {},
                                ImageId: {},
                                KeyName: {},
                                SecurityGroups: {
                                    shape: "S32"
                                },
                                ClassicLinkVPCId: {},
                                ClassicLinkVPCSecurityGroups: {
                                    shape: "S33"
                                },
                                UserData: {},
                                InstanceType: {},
                                KernelId: {},
                                RamdiskId: {},
                                BlockDeviceMappings: {
                                    shape: "S35"
                                },
                                InstanceMonitoring: {
                                    shape: "S3f"
                                },
                                SpotPrice: {},
                                IamInstanceProfile: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EbsOptimized: {
                                    type: "boolean"
                                },
                                AssociatePublicIpAddress: {
                                    type: "boolean"
                                },
                                PlacementTenancy: {},
                                MetadataOptions: {
                                    shape: "S3k"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeLifecycleHookTypes: {
            output: {
                resultWrapper: "DescribeLifecycleHookTypesResult",
                type: "structure",
                members: {
                    LifecycleHookTypes: {
                        shape: "S54"
                    }
                }
            }
        },
        DescribeLifecycleHooks: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    LifecycleHookNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLifecycleHooksResult",
                type: "structure",
                members: {
                    LifecycleHooks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LifecycleHookName: {},
                                AutoScalingGroupName: {},
                                LifecycleTransition: {},
                                NotificationTargetARN: {},
                                RoleARN: {},
                                NotificationMetadata: {},
                                HeartbeatTimeout: {
                                    type: "integer"
                                },
                                GlobalTimeout: {
                                    type: "integer"
                                },
                                DefaultResult: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeLoadBalancerTargetGroups: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancerTargetGroupsResult",
                type: "structure",
                members: {
                    LoadBalancerTargetGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LoadBalancerTargetGroupARN: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeLoadBalancers: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeLoadBalancersResult",
                type: "structure",
                members: {
                    LoadBalancers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LoadBalancerName: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMetricCollectionTypes: {
            output: {
                resultWrapper: "DescribeMetricCollectionTypesResult",
                type: "structure",
                members: {
                    Metrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Metric: {}
                            }
                        }
                    },
                    Granularities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Granularity: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeNotificationConfigurations: {
            input: {
                type: "structure",
                members: {
                    AutoScalingGroupNames: {
                        shape: "S49"
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeNotificationConfigurationsResult",
                type: "structure",
                required: [ "NotificationConfigurations" ],
                members: {
                    NotificationConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoScalingGroupName: {},
                                TopicARN: {},
                                NotificationType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePolicies: {
            input: {
                type: "structure",
                members: {
                    AutoScalingGroupName: {},
                    PolicyNames: {
                        type: "list",
                        member: {}
                    },
                    PolicyTypes: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribePoliciesResult",
                type: "structure",
                members: {
                    ScalingPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoScalingGroupName: {},
                                PolicyName: {},
                                PolicyARN: {},
                                PolicyType: {},
                                AdjustmentType: {},
                                MinAdjustmentStep: {
                                    shape: "S6u"
                                },
                                MinAdjustmentMagnitude: {
                                    type: "integer"
                                },
                                ScalingAdjustment: {
                                    type: "integer"
                                },
                                Cooldown: {
                                    type: "integer"
                                },
                                StepAdjustments: {
                                    shape: "S6x"
                                },
                                MetricAggregationType: {},
                                EstimatedInstanceWarmup: {
                                    type: "integer"
                                },
                                Alarms: {
                                    shape: "S71"
                                },
                                TargetTrackingConfiguration: {
                                    shape: "S73"
                                },
                                Enabled: {
                                    type: "boolean"
                                },
                                PredictiveScalingConfiguration: {
                                    shape: "S7o"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScalingActivities: {
            input: {
                type: "structure",
                members: {
                    ActivityIds: {
                        type: "list",
                        member: {}
                    },
                    AutoScalingGroupName: {},
                    IncludeDeletedGroups: {
                        type: "boolean"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeScalingActivitiesResult",
                type: "structure",
                required: [ "Activities" ],
                members: {
                    Activities: {
                        shape: "S8b"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeScalingProcessTypes: {
            output: {
                resultWrapper: "DescribeScalingProcessTypesResult",
                type: "structure",
                members: {
                    Processes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProcessName" ],
                            members: {
                                ProcessName: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeScheduledActions: {
            input: {
                type: "structure",
                members: {
                    AutoScalingGroupName: {},
                    ScheduledActionNames: {
                        shape: "Sh"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeScheduledActionsResult",
                type: "structure",
                members: {
                    ScheduledUpdateGroupActions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutoScalingGroupName: {},
                                ScheduledActionName: {},
                                ScheduledActionARN: {},
                                Time: {
                                    type: "timestamp"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Recurrence: {},
                                MinSize: {
                                    type: "integer"
                                },
                                MaxSize: {
                                    type: "integer"
                                },
                                DesiredCapacity: {
                                    type: "integer"
                                },
                                TimeZone: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4b"
                    },
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTagsResult",
                type: "structure",
                members: {
                    Tags: {
                        shape: "S4p"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTerminationPolicyTypes: {
            output: {
                resultWrapper: "DescribeTerminationPolicyTypesResult",
                type: "structure",
                members: {
                    TerminationPolicyTypes: {
                        shape: "S2g"
                    }
                }
            }
        },
        DescribeTrafficSources: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    TrafficSourceType: {},
                    NextToken: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeTrafficSourcesResult",
                type: "structure",
                members: {
                    TrafficSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrafficSource: {
                                    deprecated: true,
                                    deprecatedMessage: "TrafficSource has been replaced by Identifier"
                                },
                                State: {},
                                Identifier: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWarmPool: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeWarmPoolResult",
                type: "structure",
                members: {
                    WarmPoolConfiguration: {
                        shape: "S4r"
                    },
                    Instances: {
                        shape: "S4i"
                    },
                    NextToken: {}
                }
            }
        },
        DetachInstances: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "ShouldDecrementDesiredCapacity" ],
                members: {
                    InstanceIds: {
                        shape: "S2"
                    },
                    AutoScalingGroupName: {},
                    ShouldDecrementDesiredCapacity: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DetachInstancesResult",
                type: "structure",
                members: {
                    Activities: {
                        shape: "S8b"
                    }
                }
            }
        },
        DetachLoadBalancerTargetGroups: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "TargetGroupARNs" ],
                members: {
                    AutoScalingGroupName: {},
                    TargetGroupARNs: {
                        shape: "S6"
                    }
                }
            },
            output: {
                resultWrapper: "DetachLoadBalancerTargetGroupsResult",
                type: "structure",
                members: {}
            }
        },
        DetachLoadBalancers: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "LoadBalancerNames" ],
                members: {
                    AutoScalingGroupName: {},
                    LoadBalancerNames: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                resultWrapper: "DetachLoadBalancersResult",
                type: "structure",
                members: {}
            }
        },
        DetachTrafficSources: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "TrafficSources" ],
                members: {
                    AutoScalingGroupName: {},
                    TrafficSources: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                resultWrapper: "DetachTrafficSourcesResult",
                type: "structure",
                members: {}
            }
        },
        DisableMetricsCollection: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    Metrics: {
                        shape: "S96"
                    }
                }
            }
        },
        EnableMetricsCollection: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "Granularity" ],
                members: {
                    AutoScalingGroupName: {},
                    Metrics: {
                        shape: "S96"
                    },
                    Granularity: {}
                }
            }
        },
        EnterStandby: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "ShouldDecrementDesiredCapacity" ],
                members: {
                    InstanceIds: {
                        shape: "S2"
                    },
                    AutoScalingGroupName: {},
                    ShouldDecrementDesiredCapacity: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "EnterStandbyResult",
                type: "structure",
                members: {
                    Activities: {
                        shape: "S8b"
                    }
                }
            }
        },
        ExecutePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyName" ],
                members: {
                    AutoScalingGroupName: {},
                    PolicyName: {},
                    HonorCooldown: {
                        type: "boolean"
                    },
                    MetricValue: {
                        type: "double"
                    },
                    BreachThreshold: {
                        type: "double"
                    }
                }
            }
        },
        ExitStandby: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    InstanceIds: {
                        shape: "S2"
                    },
                    AutoScalingGroupName: {}
                }
            },
            output: {
                resultWrapper: "ExitStandbyResult",
                type: "structure",
                members: {
                    Activities: {
                        shape: "S8b"
                    }
                }
            }
        },
        GetPredictiveScalingForecast: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "PolicyName", "StartTime", "EndTime" ],
                members: {
                    AutoScalingGroupName: {},
                    PolicyName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                resultWrapper: "GetPredictiveScalingForecastResult",
                type: "structure",
                required: [ "LoadForecast", "CapacityForecast", "UpdateTime" ],
                members: {
                    LoadForecast: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Timestamps", "Values", "MetricSpecification" ],
                            members: {
                                Timestamps: {
                                    shape: "S9i"
                                },
                                Values: {
                                    shape: "S9j"
                                },
                                MetricSpecification: {
                                    shape: "S7q"
                                }
                            }
                        }
                    },
                    CapacityForecast: {
                        type: "structure",
                        required: [ "Timestamps", "Values" ],
                        members: {
                            Timestamps: {
                                shape: "S9i"
                            },
                            Values: {
                                shape: "S9j"
                            }
                        }
                    },
                    UpdateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        PutLifecycleHook: {
            input: {
                type: "structure",
                required: [ "LifecycleHookName", "AutoScalingGroupName" ],
                members: {
                    LifecycleHookName: {},
                    AutoScalingGroupName: {},
                    LifecycleTransition: {},
                    RoleARN: {},
                    NotificationTargetARN: {},
                    NotificationMetadata: {},
                    HeartbeatTimeout: {
                        type: "integer"
                    },
                    DefaultResult: {}
                }
            },
            output: {
                resultWrapper: "PutLifecycleHookResult",
                type: "structure",
                members: {}
            }
        },
        PutNotificationConfiguration: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "TopicARN", "NotificationTypes" ],
                members: {
                    AutoScalingGroupName: {},
                    TopicARN: {},
                    NotificationTypes: {
                        shape: "S54"
                    }
                }
            }
        },
        PutScalingPolicy: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "PolicyName" ],
                members: {
                    AutoScalingGroupName: {},
                    PolicyName: {},
                    PolicyType: {},
                    AdjustmentType: {},
                    MinAdjustmentStep: {
                        shape: "S6u"
                    },
                    MinAdjustmentMagnitude: {
                        type: "integer"
                    },
                    ScalingAdjustment: {
                        type: "integer"
                    },
                    Cooldown: {
                        type: "integer"
                    },
                    MetricAggregationType: {},
                    StepAdjustments: {
                        shape: "S6x"
                    },
                    EstimatedInstanceWarmup: {
                        type: "integer"
                    },
                    TargetTrackingConfiguration: {
                        shape: "S73"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    PredictiveScalingConfiguration: {
                        shape: "S7o"
                    }
                }
            },
            output: {
                resultWrapper: "PutScalingPolicyResult",
                type: "structure",
                members: {
                    PolicyARN: {},
                    Alarms: {
                        shape: "S71"
                    }
                }
            }
        },
        PutScheduledUpdateGroupAction: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "ScheduledActionName" ],
                members: {
                    AutoScalingGroupName: {},
                    ScheduledActionName: {},
                    Time: {
                        type: "timestamp"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Recurrence: {},
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    DesiredCapacity: {
                        type: "integer"
                    },
                    TimeZone: {}
                }
            }
        },
        PutWarmPool: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    MaxGroupPreparedCapacity: {
                        type: "integer"
                    },
                    MinSize: {
                        type: "integer"
                    },
                    PoolState: {},
                    InstanceReusePolicy: {
                        shape: "S4w"
                    }
                }
            },
            output: {
                resultWrapper: "PutWarmPoolResult",
                type: "structure",
                members: {}
            }
        },
        RecordLifecycleActionHeartbeat: {
            input: {
                type: "structure",
                required: [ "LifecycleHookName", "AutoScalingGroupName" ],
                members: {
                    LifecycleHookName: {},
                    AutoScalingGroupName: {},
                    LifecycleActionToken: {},
                    InstanceId: {}
                }
            },
            output: {
                resultWrapper: "RecordLifecycleActionHeartbeatResult",
                type: "structure",
                members: {}
            }
        },
        ResumeProcesses: {
            input: {
                shape: "S9v"
            }
        },
        RollbackInstanceRefresh: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {}
                }
            },
            output: {
                resultWrapper: "RollbackInstanceRefreshResult",
                type: "structure",
                members: {
                    InstanceRefreshId: {}
                }
            }
        },
        SetDesiredCapacity: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName", "DesiredCapacity" ],
                members: {
                    AutoScalingGroupName: {},
                    DesiredCapacity: {
                        type: "integer"
                    },
                    HonorCooldown: {
                        type: "boolean"
                    }
                }
            }
        },
        SetInstanceHealth: {
            input: {
                type: "structure",
                required: [ "InstanceId", "HealthStatus" ],
                members: {
                    InstanceId: {},
                    HealthStatus: {},
                    ShouldRespectGracePeriod: {
                        type: "boolean"
                    }
                }
            }
        },
        SetInstanceProtection: {
            input: {
                type: "structure",
                required: [ "InstanceIds", "AutoScalingGroupName", "ProtectedFromScaleIn" ],
                members: {
                    InstanceIds: {
                        shape: "S2"
                    },
                    AutoScalingGroupName: {},
                    ProtectedFromScaleIn: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "SetInstanceProtectionResult",
                type: "structure",
                members: {}
            }
        },
        StartInstanceRefresh: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    Strategy: {},
                    DesiredConfiguration: {
                        shape: "S5t"
                    },
                    Preferences: {
                        shape: "S5h"
                    }
                }
            },
            output: {
                resultWrapper: "StartInstanceRefreshResult",
                type: "structure",
                members: {
                    InstanceRefreshId: {}
                }
            }
        },
        SuspendProcesses: {
            input: {
                shape: "S9v"
            }
        },
        TerminateInstanceInAutoScalingGroup: {
            input: {
                type: "structure",
                required: [ "InstanceId", "ShouldDecrementDesiredCapacity" ],
                members: {
                    InstanceId: {},
                    ShouldDecrementDesiredCapacity: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "TerminateInstanceInAutoScalingGroupResult",
                type: "structure",
                members: {
                    Activity: {
                        shape: "S8c"
                    }
                }
            }
        },
        UpdateAutoScalingGroup: {
            input: {
                type: "structure",
                required: [ "AutoScalingGroupName" ],
                members: {
                    AutoScalingGroupName: {},
                    LaunchConfigurationName: {},
                    LaunchTemplate: {
                        shape: "S14"
                    },
                    MixedInstancesPolicy: {
                        shape: "S16"
                    },
                    MinSize: {
                        type: "integer"
                    },
                    MaxSize: {
                        type: "integer"
                    },
                    DesiredCapacity: {
                        type: "integer"
                    },
                    DefaultCooldown: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S2d"
                    },
                    HealthCheckType: {},
                    HealthCheckGracePeriod: {
                        type: "integer"
                    },
                    PlacementGroup: {},
                    VPCZoneIdentifier: {},
                    TerminationPolicies: {
                        shape: "S2g"
                    },
                    NewInstancesProtectedFromScaleIn: {
                        type: "boolean"
                    },
                    ServiceLinkedRoleARN: {},
                    MaxInstanceLifetime: {
                        type: "integer"
                    },
                    CapacityRebalance: {
                        type: "boolean"
                    },
                    Context: {},
                    DesiredCapacityType: {},
                    DefaultInstanceWarmup: {
                        type: "integer"
                    },
                    InstanceMaintenancePolicy: {
                        shape: "S2y"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {},
                    Type: {}
                }
            }
        },
        Sh: {
            type: "list",
            member: {}
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ScheduledActionName" ],
                members: {
                    ScheduledActionName: {},
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                LaunchTemplateId: {},
                LaunchTemplateName: {},
                Version: {}
            }
        },
        S16: {
            type: "structure",
            members: {
                LaunchTemplate: {
                    type: "structure",
                    members: {
                        LaunchTemplateSpecification: {
                            shape: "S14"
                        },
                        Overrides: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    InstanceType: {},
                                    WeightedCapacity: {},
                                    LaunchTemplateSpecification: {
                                        shape: "S14"
                                    },
                                    InstanceRequirements: {
                                        type: "structure",
                                        required: [ "VCpuCount", "MemoryMiB" ],
                                        members: {
                                            VCpuCount: {
                                                type: "structure",
                                                required: [ "Min" ],
                                                members: {
                                                    Min: {
                                                        type: "integer"
                                                    },
                                                    Max: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            MemoryMiB: {
                                                type: "structure",
                                                required: [ "Min" ],
                                                members: {
                                                    Min: {
                                                        type: "integer"
                                                    },
                                                    Max: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            CpuManufacturers: {
                                                type: "list",
                                                member: {}
                                            },
                                            MemoryGiBPerVCpu: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "double"
                                                    },
                                                    Max: {
                                                        type: "double"
                                                    }
                                                }
                                            },
                                            ExcludedInstanceTypes: {
                                                type: "list",
                                                member: {}
                                            },
                                            InstanceGenerations: {
                                                type: "list",
                                                member: {}
                                            },
                                            SpotMaxPricePercentageOverLowestPrice: {
                                                type: "integer"
                                            },
                                            OnDemandMaxPricePercentageOverLowestPrice: {
                                                type: "integer"
                                            },
                                            BareMetal: {},
                                            BurstablePerformance: {},
                                            RequireHibernateSupport: {
                                                type: "boolean"
                                            },
                                            NetworkInterfaceCount: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "integer"
                                                    },
                                                    Max: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            LocalStorage: {},
                                            LocalStorageTypes: {
                                                type: "list",
                                                member: {}
                                            },
                                            TotalLocalStorageGB: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "double"
                                                    },
                                                    Max: {
                                                        type: "double"
                                                    }
                                                }
                                            },
                                            BaselineEbsBandwidthMbps: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "integer"
                                                    },
                                                    Max: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            AcceleratorTypes: {
                                                type: "list",
                                                member: {}
                                            },
                                            AcceleratorCount: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "integer"
                                                    },
                                                    Max: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            AcceleratorManufacturers: {
                                                type: "list",
                                                member: {}
                                            },
                                            AcceleratorNames: {
                                                type: "list",
                                                member: {}
                                            },
                                            AcceleratorTotalMemoryMiB: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "integer"
                                                    },
                                                    Max: {
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            NetworkBandwidthGbps: {
                                                type: "structure",
                                                members: {
                                                    Min: {
                                                        type: "double"
                                                    },
                                                    Max: {
                                                        type: "double"
                                                    }
                                                }
                                            },
                                            AllowedInstanceTypes: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                InstancesDistribution: {
                    type: "structure",
                    members: {
                        OnDemandAllocationStrategy: {},
                        OnDemandBaseCapacity: {
                            type: "integer"
                        },
                        OnDemandPercentageAboveBaseCapacity: {
                            type: "integer"
                        },
                        SpotAllocationStrategy: {},
                        SpotInstancePools: {
                            type: "integer"
                        },
                        SpotMaxPrice: {}
                    }
                }
            }
        },
        S2d: {
            type: "list",
            member: {}
        },
        S2g: {
            type: "list",
            member: {}
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    ResourceId: {},
                    ResourceType: {},
                    Key: {},
                    Value: {},
                    PropagateAtLaunch: {
                        type: "boolean"
                    }
                }
            }
        },
        S2y: {
            type: "structure",
            members: {
                MinHealthyPercentage: {
                    type: "integer"
                },
                MaxHealthyPercentage: {
                    type: "integer"
                }
            }
        },
        S32: {
            type: "list",
            member: {}
        },
        S33: {
            type: "list",
            member: {}
        },
        S35: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DeviceName" ],
                members: {
                    VirtualName: {},
                    DeviceName: {},
                    Ebs: {
                        type: "structure",
                        members: {
                            SnapshotId: {},
                            VolumeSize: {
                                type: "integer"
                            },
                            VolumeType: {},
                            DeleteOnTermination: {
                                type: "boolean"
                            },
                            Iops: {
                                type: "integer"
                            },
                            Encrypted: {
                                type: "boolean"
                            },
                            Throughput: {
                                type: "integer"
                            }
                        }
                    },
                    NoDevice: {
                        type: "boolean"
                    }
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                HttpTokens: {},
                HttpPutResponseHopLimit: {
                    type: "integer"
                },
                HttpEndpoint: {}
            }
        },
        S49: {
            type: "list",
            member: {}
        },
        S4b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S4i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InstanceId", "AvailabilityZone", "LifecycleState", "HealthStatus", "ProtectedFromScaleIn" ],
                members: {
                    InstanceId: {},
                    InstanceType: {},
                    AvailabilityZone: {},
                    LifecycleState: {},
                    HealthStatus: {},
                    LaunchConfigurationName: {},
                    LaunchTemplate: {
                        shape: "S14"
                    },
                    ProtectedFromScaleIn: {
                        type: "boolean"
                    },
                    WeightedCapacity: {}
                }
            }
        },
        S4p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceId: {},
                    ResourceType: {},
                    Key: {},
                    Value: {},
                    PropagateAtLaunch: {
                        type: "boolean"
                    }
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                MaxGroupPreparedCapacity: {
                    type: "integer"
                },
                MinSize: {
                    type: "integer"
                },
                PoolState: {},
                Status: {},
                InstanceReusePolicy: {
                    shape: "S4w"
                }
            }
        },
        S4w: {
            type: "structure",
            members: {
                ReuseOnScaleIn: {
                    type: "boolean"
                }
            }
        },
        S54: {
            type: "list",
            member: {}
        },
        S5e: {
            type: "structure",
            members: {
                LivePoolProgress: {
                    type: "structure",
                    members: {
                        PercentageComplete: {
                            type: "integer"
                        },
                        InstancesToUpdate: {
                            type: "integer"
                        }
                    }
                },
                WarmPoolProgress: {
                    type: "structure",
                    members: {
                        PercentageComplete: {
                            type: "integer"
                        },
                        InstancesToUpdate: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S5h: {
            type: "structure",
            members: {
                MinHealthyPercentage: {
                    type: "integer"
                },
                InstanceWarmup: {
                    type: "integer"
                },
                CheckpointPercentages: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                CheckpointDelay: {
                    type: "integer"
                },
                SkipMatching: {
                    type: "boolean"
                },
                AutoRollback: {
                    type: "boolean"
                },
                ScaleInProtectedInstances: {},
                StandbyInstances: {},
                AlarmSpecification: {
                    type: "structure",
                    members: {
                        Alarms: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                MaxHealthyPercentage: {
                    type: "integer"
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                LaunchTemplate: {
                    shape: "S14"
                },
                MixedInstancesPolicy: {
                    shape: "S16"
                }
            }
        },
        S6u: {
            type: "integer",
            deprecated: true
        },
        S6x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ScalingAdjustment" ],
                members: {
                    MetricIntervalLowerBound: {
                        type: "double"
                    },
                    MetricIntervalUpperBound: {
                        type: "double"
                    },
                    ScalingAdjustment: {
                        type: "integer"
                    }
                }
            }
        },
        S71: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AlarmName: {},
                    AlarmARN: {}
                }
            }
        },
        S73: {
            type: "structure",
            required: [ "TargetValue" ],
            members: {
                PredefinedMetricSpecification: {
                    type: "structure",
                    required: [ "PredefinedMetricType" ],
                    members: {
                        PredefinedMetricType: {},
                        ResourceLabel: {}
                    }
                },
                CustomizedMetricSpecification: {
                    type: "structure",
                    members: {
                        MetricName: {},
                        Namespace: {},
                        Dimensions: {
                            shape: "S79"
                        },
                        Statistic: {},
                        Unit: {},
                        Metrics: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "Id" ],
                                members: {
                                    Id: {},
                                    Expression: {},
                                    MetricStat: {
                                        type: "structure",
                                        required: [ "Metric", "Stat" ],
                                        members: {
                                            Metric: {
                                                shape: "S7i"
                                            },
                                            Stat: {},
                                            Unit: {}
                                        }
                                    },
                                    Label: {},
                                    ReturnData: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                TargetValue: {
                    type: "double"
                },
                DisableScaleIn: {
                    type: "boolean"
                }
            }
        },
        S79: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S7i: {
            type: "structure",
            required: [ "Namespace", "MetricName" ],
            members: {
                Namespace: {},
                MetricName: {},
                Dimensions: {
                    shape: "S79"
                }
            }
        },
        S7o: {
            type: "structure",
            required: [ "MetricSpecifications" ],
            members: {
                MetricSpecifications: {
                    type: "list",
                    member: {
                        shape: "S7q"
                    }
                },
                Mode: {},
                SchedulingBufferTime: {
                    type: "integer"
                },
                MaxCapacityBreachBehavior: {},
                MaxCapacityBuffer: {
                    type: "integer"
                }
            }
        },
        S7q: {
            type: "structure",
            required: [ "TargetValue" ],
            members: {
                TargetValue: {
                    type: "double"
                },
                PredefinedMetricPairSpecification: {
                    type: "structure",
                    required: [ "PredefinedMetricType" ],
                    members: {
                        PredefinedMetricType: {},
                        ResourceLabel: {}
                    }
                },
                PredefinedScalingMetricSpecification: {
                    type: "structure",
                    required: [ "PredefinedMetricType" ],
                    members: {
                        PredefinedMetricType: {},
                        ResourceLabel: {}
                    }
                },
                PredefinedLoadMetricSpecification: {
                    type: "structure",
                    required: [ "PredefinedMetricType" ],
                    members: {
                        PredefinedMetricType: {},
                        ResourceLabel: {}
                    }
                },
                CustomizedScalingMetricSpecification: {
                    type: "structure",
                    required: [ "MetricDataQueries" ],
                    members: {
                        MetricDataQueries: {
                            shape: "S7y"
                        }
                    }
                },
                CustomizedLoadMetricSpecification: {
                    type: "structure",
                    required: [ "MetricDataQueries" ],
                    members: {
                        MetricDataQueries: {
                            shape: "S7y"
                        }
                    }
                },
                CustomizedCapacityMetricSpecification: {
                    type: "structure",
                    required: [ "MetricDataQueries" ],
                    members: {
                        MetricDataQueries: {
                            shape: "S7y"
                        }
                    }
                }
            }
        },
        S7y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Expression: {},
                    MetricStat: {
                        type: "structure",
                        required: [ "Metric", "Stat" ],
                        members: {
                            Metric: {
                                shape: "S7i"
                            },
                            Stat: {},
                            Unit: {}
                        }
                    },
                    Label: {},
                    ReturnData: {
                        type: "boolean"
                    }
                }
            }
        },
        S8b: {
            type: "list",
            member: {
                shape: "S8c"
            }
        },
        S8c: {
            type: "structure",
            required: [ "ActivityId", "AutoScalingGroupName", "Cause", "StartTime", "StatusCode" ],
            members: {
                ActivityId: {},
                AutoScalingGroupName: {},
                Description: {},
                Cause: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                StatusCode: {},
                StatusMessage: {},
                Progress: {
                    type: "integer"
                },
                Details: {},
                AutoScalingGroupState: {},
                AutoScalingGroupARN: {}
            }
        },
        S96: {
            type: "list",
            member: {}
        },
        S9i: {
            type: "list",
            member: {
                type: "timestamp"
            }
        },
        S9j: {
            type: "list",
            member: {
                type: "double"
            }
        },
        S9v: {
            type: "structure",
            required: [ "AutoScalingGroupName" ],
            members: {
                AutoScalingGroupName: {},
                ScalingProcesses: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        DescribeAutoScalingGroups: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "AutoScalingGroups"
        },
        DescribeAutoScalingInstances: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "AutoScalingInstances"
        },
        DescribeInstanceRefreshes: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken"
        },
        DescribeLaunchConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "LaunchConfigurations"
        },
        DescribeLoadBalancerTargetGroups: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken"
        },
        DescribeLoadBalancers: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken"
        },
        DescribeNotificationConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "NotificationConfigurations"
        },
        DescribePolicies: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "ScalingPolicies"
        },
        DescribeScalingActivities: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "Activities"
        },
        DescribeScheduledActions: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "ScheduledUpdateGroupActions"
        },
        DescribeTags: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "Tags"
        },
        DescribeTrafficSources: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken"
        },
        DescribeWarmPool: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "Instances"
        }
    }
};

AWS.apiLoader.services["batch"] = {};

AWS.Batch = AWS.Service.defineService("batch", [ "2016-08-10" ]);

AWS.apiLoader.services["batch"]["2016-08-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-08-10",
        endpointPrefix: "batch",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWS Batch",
        serviceFullName: "AWS Batch",
        serviceId: "Batch",
        signatureVersion: "v4",
        uid: "batch-2016-08-10"
    },
    operations: {
        CancelJob: {
            http: {
                requestUri: "/v1/canceljob"
            },
            input: {
                type: "structure",
                required: [ "jobId", "reason" ],
                members: {
                    jobId: {},
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateComputeEnvironment: {
            http: {
                requestUri: "/v1/createcomputeenvironment"
            },
            input: {
                type: "structure",
                required: [ "computeEnvironmentName", "type" ],
                members: {
                    computeEnvironmentName: {},
                    type: {},
                    state: {},
                    unmanagedvCpus: {
                        type: "integer"
                    },
                    computeResources: {
                        shape: "S8"
                    },
                    serviceRole: {},
                    tags: {
                        shape: "Sj"
                    },
                    eksConfiguration: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    computeEnvironmentName: {},
                    computeEnvironmentArn: {}
                }
            }
        },
        CreateJobQueue: {
            http: {
                requestUri: "/v1/createjobqueue"
            },
            input: {
                type: "structure",
                required: [ "jobQueueName", "priority", "computeEnvironmentOrder" ],
                members: {
                    jobQueueName: {},
                    state: {},
                    schedulingPolicyArn: {},
                    priority: {
                        type: "integer"
                    },
                    computeEnvironmentOrder: {
                        shape: "Sq"
                    },
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobQueueName", "jobQueueArn" ],
                members: {
                    jobQueueName: {},
                    jobQueueArn: {}
                }
            }
        },
        CreateSchedulingPolicy: {
            http: {
                requestUri: "/v1/createschedulingpolicy"
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    fairsharePolicy: {
                        shape: "Su"
                    },
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            }
        },
        DeleteComputeEnvironment: {
            http: {
                requestUri: "/v1/deletecomputeenvironment"
            },
            input: {
                type: "structure",
                required: [ "computeEnvironment" ],
                members: {
                    computeEnvironment: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteJobQueue: {
            http: {
                requestUri: "/v1/deletejobqueue"
            },
            input: {
                type: "structure",
                required: [ "jobQueue" ],
                members: {
                    jobQueue: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSchedulingPolicy: {
            http: {
                requestUri: "/v1/deleteschedulingpolicy"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterJobDefinition: {
            http: {
                requestUri: "/v1/deregisterjobdefinition"
            },
            input: {
                type: "structure",
                required: [ "jobDefinition" ],
                members: {
                    jobDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeComputeEnvironments: {
            http: {
                requestUri: "/v1/describecomputeenvironments"
            },
            input: {
                type: "structure",
                members: {
                    computeEnvironments: {
                        shape: "Sb"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    computeEnvironments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "computeEnvironmentName", "computeEnvironmentArn" ],
                            members: {
                                computeEnvironmentName: {},
                                computeEnvironmentArn: {},
                                unmanagedvCpus: {
                                    type: "integer"
                                },
                                ecsClusterArn: {},
                                tags: {
                                    shape: "Sj"
                                },
                                type: {},
                                state: {},
                                status: {},
                                statusReason: {},
                                computeResources: {
                                    shape: "S8"
                                },
                                serviceRole: {},
                                updatePolicy: {
                                    shape: "S1c"
                                },
                                eksConfiguration: {
                                    shape: "Sm"
                                },
                                containerOrchestrationType: {},
                                uuid: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobDefinitions: {
            http: {
                requestUri: "/v1/describejobdefinitions"
            },
            input: {
                type: "structure",
                members: {
                    jobDefinitions: {
                        shape: "Sb"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    jobDefinitionName: {},
                    status: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobDefinitionName", "jobDefinitionArn", "revision", "type" ],
                            members: {
                                jobDefinitionName: {},
                                jobDefinitionArn: {},
                                revision: {
                                    type: "integer"
                                },
                                status: {},
                                type: {},
                                schedulingPriority: {
                                    type: "integer"
                                },
                                parameters: {
                                    shape: "S1k"
                                },
                                retryStrategy: {
                                    shape: "S1l"
                                },
                                containerProperties: {
                                    shape: "S1p"
                                },
                                timeout: {
                                    shape: "S2n"
                                },
                                nodeProperties: {
                                    shape: "S2o"
                                },
                                tags: {
                                    shape: "Sj"
                                },
                                propagateTags: {
                                    type: "boolean"
                                },
                                platformCapabilities: {
                                    shape: "S2r"
                                },
                                eksProperties: {
                                    shape: "S2t"
                                },
                                containerOrchestrationType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobQueues: {
            http: {
                requestUri: "/v1/describejobqueues"
            },
            input: {
                type: "structure",
                members: {
                    jobQueues: {
                        shape: "Sb"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobQueues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobQueueName", "jobQueueArn", "state", "priority", "computeEnvironmentOrder" ],
                            members: {
                                jobQueueName: {},
                                jobQueueArn: {},
                                state: {},
                                schedulingPolicyArn: {},
                                status: {},
                                statusReason: {},
                                priority: {
                                    type: "integer"
                                },
                                computeEnvironmentOrder: {
                                    shape: "Sq"
                                },
                                tags: {
                                    shape: "Sj"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobs: {
            http: {
                requestUri: "/v1/describejobs"
            },
            input: {
                type: "structure",
                required: [ "jobs" ],
                members: {
                    jobs: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobName", "jobId", "jobQueue", "status", "startedAt", "jobDefinition" ],
                            members: {
                                jobArn: {},
                                jobName: {},
                                jobId: {},
                                jobQueue: {},
                                status: {},
                                shareIdentifier: {},
                                schedulingPriority: {
                                    type: "integer"
                                },
                                attempts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            container: {
                                                type: "structure",
                                                members: {
                                                    containerInstanceArn: {},
                                                    taskArn: {},
                                                    exitCode: {
                                                        type: "integer"
                                                    },
                                                    reason: {},
                                                    logStreamName: {},
                                                    networkInterfaces: {
                                                        shape: "S3r"
                                                    }
                                                }
                                            },
                                            startedAt: {
                                                type: "long"
                                            },
                                            stoppedAt: {
                                                type: "long"
                                            },
                                            statusReason: {}
                                        }
                                    }
                                },
                                statusReason: {},
                                createdAt: {
                                    type: "long"
                                },
                                retryStrategy: {
                                    shape: "S1l"
                                },
                                startedAt: {
                                    type: "long"
                                },
                                stoppedAt: {
                                    type: "long"
                                },
                                dependsOn: {
                                    shape: "S3t"
                                },
                                jobDefinition: {},
                                parameters: {
                                    shape: "S1k"
                                },
                                container: {
                                    type: "structure",
                                    members: {
                                        image: {},
                                        vcpus: {
                                            type: "integer"
                                        },
                                        memory: {
                                            type: "integer"
                                        },
                                        command: {
                                            shape: "Sb"
                                        },
                                        jobRoleArn: {},
                                        executionRoleArn: {},
                                        volumes: {
                                            shape: "S1q"
                                        },
                                        environment: {
                                            shape: "S1x"
                                        },
                                        mountPoints: {
                                            shape: "S1z"
                                        },
                                        readonlyRootFilesystem: {
                                            type: "boolean"
                                        },
                                        ulimits: {
                                            shape: "S21"
                                        },
                                        privileged: {
                                            type: "boolean"
                                        },
                                        user: {},
                                        exitCode: {
                                            type: "integer"
                                        },
                                        reason: {},
                                        containerInstanceArn: {},
                                        taskArn: {},
                                        logStreamName: {},
                                        instanceType: {},
                                        networkInterfaces: {
                                            shape: "S3r"
                                        },
                                        resourceRequirements: {
                                            shape: "S23"
                                        },
                                        linuxParameters: {
                                            shape: "S26"
                                        },
                                        logConfiguration: {
                                            shape: "S2d"
                                        },
                                        secrets: {
                                            shape: "S2g"
                                        },
                                        networkConfiguration: {
                                            shape: "S2i"
                                        },
                                        fargatePlatformConfiguration: {
                                            shape: "S2k"
                                        },
                                        ephemeralStorage: {
                                            shape: "S2l"
                                        },
                                        runtimePlatform: {
                                            shape: "S2m"
                                        }
                                    }
                                },
                                nodeDetails: {
                                    type: "structure",
                                    members: {
                                        nodeIndex: {
                                            type: "integer"
                                        },
                                        isMainNode: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                nodeProperties: {
                                    shape: "S2o"
                                },
                                arrayProperties: {
                                    type: "structure",
                                    members: {
                                        statusSummary: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "integer"
                                            }
                                        },
                                        size: {
                                            type: "integer"
                                        },
                                        index: {
                                            type: "integer"
                                        }
                                    }
                                },
                                timeout: {
                                    shape: "S2n"
                                },
                                tags: {
                                    shape: "Sj"
                                },
                                propagateTags: {
                                    type: "boolean"
                                },
                                platformCapabilities: {
                                    shape: "S2r"
                                },
                                eksProperties: {
                                    type: "structure",
                                    members: {
                                        podProperties: {
                                            type: "structure",
                                            members: {
                                                serviceAccountName: {},
                                                hostNetwork: {
                                                    type: "boolean"
                                                },
                                                dnsPolicy: {},
                                                containers: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            name: {},
                                                            image: {},
                                                            imagePullPolicy: {},
                                                            command: {
                                                                shape: "Sb"
                                                            },
                                                            args: {
                                                                shape: "Sb"
                                                            },
                                                            env: {
                                                                shape: "S2x"
                                                            },
                                                            resources: {
                                                                shape: "S2z"
                                                            },
                                                            exitCode: {
                                                                type: "integer"
                                                            },
                                                            reason: {},
                                                            volumeMounts: {
                                                                shape: "S33"
                                                            },
                                                            securityContext: {
                                                                shape: "S35"
                                                            }
                                                        }
                                                    }
                                                },
                                                volumes: {
                                                    shape: "S37"
                                                },
                                                podName: {},
                                                nodeName: {},
                                                metadata: {
                                                    shape: "S3c"
                                                }
                                            }
                                        }
                                    }
                                },
                                eksAttempts: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            containers: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        exitCode: {
                                                            type: "integer"
                                                        },
                                                        reason: {}
                                                    }
                                                }
                                            },
                                            podName: {},
                                            nodeName: {},
                                            startedAt: {
                                                type: "long"
                                            },
                                            stoppedAt: {
                                                type: "long"
                                            },
                                            statusReason: {}
                                        }
                                    }
                                },
                                isCancelled: {
                                    type: "boolean"
                                },
                                isTerminated: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSchedulingPolicies: {
            http: {
                requestUri: "/v1/describeschedulingpolicies"
            },
            input: {
                type: "structure",
                required: [ "arns" ],
                members: {
                    arns: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    schedulingPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "arn" ],
                            members: {
                                name: {},
                                arn: {},
                                fairsharePolicy: {
                                    shape: "Su"
                                },
                                tags: {
                                    shape: "Sj"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListJobs: {
            http: {
                requestUri: "/v1/listjobs"
            },
            input: {
                type: "structure",
                members: {
                    jobQueue: {},
                    arrayJobId: {},
                    multiNodeJobId: {},
                    jobStatus: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobSummaryList" ],
                members: {
                    jobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "jobId", "jobName" ],
                            members: {
                                jobArn: {},
                                jobId: {},
                                jobName: {},
                                createdAt: {
                                    type: "long"
                                },
                                status: {},
                                statusReason: {},
                                startedAt: {
                                    type: "long"
                                },
                                stoppedAt: {
                                    type: "long"
                                },
                                container: {
                                    type: "structure",
                                    members: {
                                        exitCode: {
                                            type: "integer"
                                        },
                                        reason: {}
                                    }
                                },
                                arrayProperties: {
                                    type: "structure",
                                    members: {
                                        size: {
                                            type: "integer"
                                        },
                                        index: {
                                            type: "integer"
                                        }
                                    }
                                },
                                nodeProperties: {
                                    type: "structure",
                                    members: {
                                        isMainNode: {
                                            type: "boolean"
                                        },
                                        numNodes: {
                                            type: "integer"
                                        },
                                        nodeIndex: {
                                            type: "integer"
                                        }
                                    }
                                },
                                jobDefinition: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSchedulingPolicies: {
            http: {
                requestUri: "/v1/listschedulingpolicies"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    schedulingPolicies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn" ],
                            members: {
                                arn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sj"
                    }
                }
            }
        },
        RegisterJobDefinition: {
            http: {
                requestUri: "/v1/registerjobdefinition"
            },
            input: {
                type: "structure",
                required: [ "jobDefinitionName", "type" ],
                members: {
                    jobDefinitionName: {},
                    type: {},
                    parameters: {
                        shape: "S1k"
                    },
                    schedulingPriority: {
                        type: "integer"
                    },
                    containerProperties: {
                        shape: "S1p"
                    },
                    nodeProperties: {
                        shape: "S2o"
                    },
                    retryStrategy: {
                        shape: "S1l"
                    },
                    propagateTags: {
                        type: "boolean"
                    },
                    timeout: {
                        shape: "S2n"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    platformCapabilities: {
                        shape: "S2r"
                    },
                    eksProperties: {
                        shape: "S2t"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobDefinitionName", "jobDefinitionArn", "revision" ],
                members: {
                    jobDefinitionName: {},
                    jobDefinitionArn: {},
                    revision: {
                        type: "integer"
                    }
                }
            }
        },
        SubmitJob: {
            http: {
                requestUri: "/v1/submitjob"
            },
            input: {
                type: "structure",
                required: [ "jobName", "jobQueue", "jobDefinition" ],
                members: {
                    jobName: {},
                    jobQueue: {},
                    shareIdentifier: {},
                    schedulingPriorityOverride: {
                        type: "integer"
                    },
                    arrayProperties: {
                        type: "structure",
                        members: {
                            size: {
                                type: "integer"
                            }
                        }
                    },
                    dependsOn: {
                        shape: "S3t"
                    },
                    jobDefinition: {},
                    parameters: {
                        shape: "S1k"
                    },
                    containerOverrides: {
                        shape: "S4w"
                    },
                    nodeOverrides: {
                        type: "structure",
                        members: {
                            numNodes: {
                                type: "integer"
                            },
                            nodePropertyOverrides: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "targetNodes" ],
                                    members: {
                                        targetNodes: {},
                                        containerOverrides: {
                                            shape: "S4w"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    retryStrategy: {
                        shape: "S1l"
                    },
                    propagateTags: {
                        type: "boolean"
                    },
                    timeout: {
                        shape: "S2n"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    eksPropertiesOverride: {
                        type: "structure",
                        members: {
                            podProperties: {
                                type: "structure",
                                members: {
                                    containers: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                image: {},
                                                command: {
                                                    shape: "Sb"
                                                },
                                                args: {
                                                    shape: "Sb"
                                                },
                                                env: {
                                                    shape: "S2x"
                                                },
                                                resources: {
                                                    shape: "S2z"
                                                }
                                            }
                                        }
                                    },
                                    metadata: {
                                        shape: "S3c"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobName", "jobId" ],
                members: {
                    jobArn: {},
                    jobName: {},
                    jobId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TerminateJob: {
            http: {
                requestUri: "/v1/terminatejob"
            },
            input: {
                type: "structure",
                required: [ "jobId", "reason" ],
                members: {
                    jobId: {},
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateComputeEnvironment: {
            http: {
                requestUri: "/v1/updatecomputeenvironment"
            },
            input: {
                type: "structure",
                required: [ "computeEnvironment" ],
                members: {
                    computeEnvironment: {},
                    state: {},
                    unmanagedvCpus: {
                        type: "integer"
                    },
                    computeResources: {
                        type: "structure",
                        members: {
                            minvCpus: {
                                type: "integer"
                            },
                            maxvCpus: {
                                type: "integer"
                            },
                            desiredvCpus: {
                                type: "integer"
                            },
                            subnets: {
                                shape: "Sb"
                            },
                            securityGroupIds: {
                                shape: "Sb"
                            },
                            allocationStrategy: {},
                            instanceTypes: {
                                shape: "Sb"
                            },
                            ec2KeyPair: {},
                            instanceRole: {},
                            tags: {
                                shape: "Sc"
                            },
                            placementGroup: {},
                            bidPercentage: {
                                type: "integer"
                            },
                            launchTemplate: {
                                shape: "Sd"
                            },
                            ec2Configuration: {
                                shape: "Se"
                            },
                            updateToLatestImageVersion: {
                                type: "boolean"
                            },
                            type: {},
                            imageId: {}
                        }
                    },
                    serviceRole: {},
                    updatePolicy: {
                        shape: "S1c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    computeEnvironmentName: {},
                    computeEnvironmentArn: {}
                }
            }
        },
        UpdateJobQueue: {
            http: {
                requestUri: "/v1/updatejobqueue"
            },
            input: {
                type: "structure",
                required: [ "jobQueue" ],
                members: {
                    jobQueue: {},
                    state: {},
                    schedulingPolicyArn: {},
                    priority: {
                        type: "integer"
                    },
                    computeEnvironmentOrder: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobQueueName: {},
                    jobQueueArn: {}
                }
            }
        },
        UpdateSchedulingPolicy: {
            http: {
                requestUri: "/v1/updateschedulingpolicy"
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    fairsharePolicy: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            required: [ "type", "maxvCpus", "subnets" ],
            members: {
                type: {},
                allocationStrategy: {},
                minvCpus: {
                    type: "integer"
                },
                maxvCpus: {
                    type: "integer"
                },
                desiredvCpus: {
                    type: "integer"
                },
                instanceTypes: {
                    shape: "Sb"
                },
                imageId: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated, use ec2Configuration[].imageIdOverride instead."
                },
                subnets: {
                    shape: "Sb"
                },
                securityGroupIds: {
                    shape: "Sb"
                },
                ec2KeyPair: {},
                instanceRole: {},
                tags: {
                    shape: "Sc"
                },
                placementGroup: {},
                bidPercentage: {
                    type: "integer"
                },
                spotIamFleetRole: {},
                launchTemplate: {
                    shape: "Sd"
                },
                ec2Configuration: {
                    shape: "Se"
                }
            }
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Sd: {
            type: "structure",
            members: {
                launchTemplateId: {},
                launchTemplateName: {},
                version: {}
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "imageType" ],
                members: {
                    imageType: {},
                    imageIdOverride: {},
                    imageKubernetesVersion: {}
                }
            }
        },
        Sj: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "structure",
            required: [ "eksClusterArn", "kubernetesNamespace" ],
            members: {
                eksClusterArn: {},
                kubernetesNamespace: {}
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "order", "computeEnvironment" ],
                members: {
                    order: {
                        type: "integer"
                    },
                    computeEnvironment: {}
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                shareDecaySeconds: {
                    type: "integer"
                },
                computeReservation: {
                    type: "integer"
                },
                shareDistribution: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "shareIdentifier" ],
                        members: {
                            shareIdentifier: {},
                            weightFactor: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        S1c: {
            type: "structure",
            members: {
                terminateJobsOnUpdate: {
                    type: "boolean"
                },
                jobExecutionTimeoutMinutes: {
                    type: "long"
                }
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        },
        S1l: {
            type: "structure",
            members: {
                attempts: {
                    type: "integer"
                },
                evaluateOnExit: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "action" ],
                        members: {
                            onStatusReason: {},
                            onReason: {},
                            onExitCode: {},
                            action: {}
                        }
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                image: {},
                vcpus: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated, use resourceRequirements instead.",
                    type: "integer"
                },
                memory: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated, use resourceRequirements instead.",
                    type: "integer"
                },
                command: {
                    shape: "Sb"
                },
                jobRoleArn: {},
                executionRoleArn: {},
                volumes: {
                    shape: "S1q"
                },
                environment: {
                    shape: "S1x"
                },
                mountPoints: {
                    shape: "S1z"
                },
                readonlyRootFilesystem: {
                    type: "boolean"
                },
                privileged: {
                    type: "boolean"
                },
                ulimits: {
                    shape: "S21"
                },
                user: {},
                instanceType: {},
                resourceRequirements: {
                    shape: "S23"
                },
                linuxParameters: {
                    shape: "S26"
                },
                logConfiguration: {
                    shape: "S2d"
                },
                secrets: {
                    shape: "S2g"
                },
                networkConfiguration: {
                    shape: "S2i"
                },
                fargatePlatformConfiguration: {
                    shape: "S2k"
                },
                ephemeralStorage: {
                    shape: "S2l"
                },
                runtimePlatform: {
                    shape: "S2m"
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    host: {
                        type: "structure",
                        members: {
                            sourcePath: {}
                        }
                    },
                    name: {},
                    efsVolumeConfiguration: {
                        type: "structure",
                        required: [ "fileSystemId" ],
                        members: {
                            fileSystemId: {},
                            rootDirectory: {},
                            transitEncryption: {},
                            transitEncryptionPort: {
                                type: "integer"
                            },
                            authorizationConfig: {
                                type: "structure",
                                members: {
                                    accessPointId: {},
                                    iam: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S1x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    containerPath: {},
                    readOnly: {
                        type: "boolean"
                    },
                    sourceVolume: {}
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                required: [ "hardLimit", "name", "softLimit" ],
                members: {
                    hardLimit: {
                        type: "integer"
                    },
                    name: {},
                    softLimit: {
                        type: "integer"
                    }
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value", "type" ],
                members: {
                    value: {},
                    type: {}
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                devices: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "hostPath" ],
                        members: {
                            hostPath: {},
                            containerPath: {},
                            permissions: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                initProcessEnabled: {
                    type: "boolean"
                },
                sharedMemorySize: {
                    type: "integer"
                },
                tmpfs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "containerPath", "size" ],
                        members: {
                            containerPath: {},
                            size: {
                                type: "integer"
                            },
                            mountOptions: {
                                shape: "Sb"
                            }
                        }
                    }
                },
                maxSwap: {
                    type: "integer"
                },
                swappiness: {
                    type: "integer"
                }
            }
        },
        S2d: {
            type: "structure",
            required: [ "logDriver" ],
            members: {
                logDriver: {},
                options: {
                    type: "map",
                    key: {},
                    value: {}
                },
                secretOptions: {
                    shape: "S2g"
                }
            }
        },
        S2g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "valueFrom" ],
                members: {
                    name: {},
                    valueFrom: {}
                }
            }
        },
        S2i: {
            type: "structure",
            members: {
                assignPublicIp: {}
            }
        },
        S2k: {
            type: "structure",
            members: {
                platformVersion: {}
            }
        },
        S2l: {
            type: "structure",
            required: [ "sizeInGiB" ],
            members: {
                sizeInGiB: {
                    type: "integer"
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                operatingSystemFamily: {},
                cpuArchitecture: {}
            }
        },
        S2n: {
            type: "structure",
            members: {
                attemptDurationSeconds: {
                    type: "integer"
                }
            }
        },
        S2o: {
            type: "structure",
            required: [ "numNodes", "mainNode", "nodeRangeProperties" ],
            members: {
                numNodes: {
                    type: "integer"
                },
                mainNode: {
                    type: "integer"
                },
                nodeRangeProperties: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "targetNodes" ],
                        members: {
                            targetNodes: {},
                            container: {
                                shape: "S1p"
                            }
                        }
                    }
                }
            }
        },
        S2r: {
            type: "list",
            member: {}
        },
        S2t: {
            type: "structure",
            members: {
                podProperties: {
                    type: "structure",
                    members: {
                        serviceAccountName: {},
                        hostNetwork: {
                            type: "boolean"
                        },
                        dnsPolicy: {},
                        containers: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "image" ],
                                members: {
                                    name: {},
                                    image: {},
                                    imagePullPolicy: {},
                                    command: {
                                        shape: "Sb"
                                    },
                                    args: {
                                        shape: "Sb"
                                    },
                                    env: {
                                        shape: "S2x"
                                    },
                                    resources: {
                                        shape: "S2z"
                                    },
                                    volumeMounts: {
                                        shape: "S33"
                                    },
                                    securityContext: {
                                        shape: "S35"
                                    }
                                }
                            }
                        },
                        volumes: {
                            shape: "S37"
                        },
                        metadata: {
                            shape: "S3c"
                        }
                    }
                }
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        S2z: {
            type: "structure",
            members: {
                limits: {
                    type: "map",
                    key: {},
                    value: {}
                },
                requests: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S33: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    mountPath: {},
                    readOnly: {
                        type: "boolean"
                    }
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                runAsUser: {
                    type: "long"
                },
                runAsGroup: {
                    type: "long"
                },
                privileged: {
                    type: "boolean"
                },
                readOnlyRootFilesystem: {
                    type: "boolean"
                },
                runAsNonRoot: {
                    type: "boolean"
                }
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    hostPath: {
                        type: "structure",
                        members: {
                            path: {}
                        }
                    },
                    emptyDir: {
                        type: "structure",
                        members: {
                            medium: {},
                            sizeLimit: {}
                        }
                    },
                    secret: {
                        type: "structure",
                        required: [ "secretName" ],
                        members: {
                            secretName: {},
                            optional: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S3c: {
            type: "structure",
            members: {
                labels: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S3r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    attachmentId: {},
                    ipv6Address: {},
                    privateIpv4Address: {}
                }
            }
        },
        S3t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    jobId: {},
                    type: {}
                }
            }
        },
        S4w: {
            type: "structure",
            members: {
                vcpus: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated, use resourceRequirements instead.",
                    type: "integer"
                },
                memory: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated, use resourceRequirements instead.",
                    type: "integer"
                },
                command: {
                    shape: "Sb"
                },
                instanceType: {},
                environment: {
                    shape: "S1x"
                },
                resourceRequirements: {
                    shape: "S23"
                }
            }
        }
    },
    paginators: {
        DescribeComputeEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "computeEnvironments"
        },
        DescribeJobDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobDefinitions"
        },
        DescribeJobQueues: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobQueues"
        },
        ListJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobSummaryList"
        },
        ListSchedulingPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "schedulingPolicies"
        }
    }
};

AWS.apiLoader.services["budgets"] = {};

AWS.Budgets = AWS.Service.defineService("budgets", [ "2016-10-20" ]);

AWS.apiLoader.services["budgets"]["2016-10-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-10-20",
        endpointPrefix: "budgets",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWSBudgets",
        serviceFullName: "AWS Budgets",
        serviceId: "Budgets",
        signatureVersion: "v4",
        targetPrefix: "AWSBudgetServiceGateway",
        uid: "budgets-2016-10-20"
    },
    operations: {
        CreateBudget: {
            input: {
                type: "structure",
                required: [ "AccountId", "Budget" ],
                members: {
                    AccountId: {},
                    Budget: {
                        shape: "S3"
                    },
                    NotificationsWithSubscribers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Notification", "Subscribers" ],
                            members: {
                                Notification: {
                                    shape: "Sq"
                                },
                                Subscribers: {
                                    shape: "Sw"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateBudgetAction: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "NotificationType", "ActionType", "ActionThreshold", "Definition", "ExecutionRoleArn", "ApprovalModel", "Subscribers" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    NotificationType: {},
                    ActionType: {},
                    ActionThreshold: {
                        shape: "S13"
                    },
                    Definition: {
                        shape: "S14"
                    },
                    ExecutionRoleArn: {},
                    ApprovalModel: {},
                    Subscribers: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {}
                }
            }
        },
        CreateNotification: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Notification", "Subscribers" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Notification: {
                        shape: "Sq"
                    },
                    Subscribers: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateSubscriber: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Notification", "Subscriber" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Notification: {
                        shape: "Sq"
                    },
                    Subscriber: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBudget: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName" ],
                members: {
                    AccountId: {},
                    BudgetName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBudgetAction: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Action" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Action: {
                        shape: "S1y"
                    }
                }
            }
        },
        DeleteNotification: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Notification" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Notification: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSubscriber: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Notification", "Subscriber" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Notification: {
                        shape: "Sq"
                    },
                    Subscriber: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBudget: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName" ],
                members: {
                    AccountId: {},
                    BudgetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Budget: {
                        shape: "S3"
                    }
                }
            }
        },
        DescribeBudgetAction: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Action" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Action: {
                        shape: "S1y"
                    }
                }
            }
        },
        DescribeBudgetActionHistories: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {},
                    TimePeriod: {
                        shape: "Sg"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ActionHistories" ],
                members: {
                    ActionHistories: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Timestamp", "Status", "EventType", "ActionHistoryDetails" ],
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Status: {},
                                EventType: {},
                                ActionHistoryDetails: {
                                    type: "structure",
                                    required: [ "Message", "Action" ],
                                    members: {
                                        Message: {},
                                        Action: {
                                            shape: "S1y"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBudgetActionsForAccount: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Actions" ],
                members: {
                    Actions: {
                        shape: "S2h"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBudgetActionsForBudget: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Actions" ],
                members: {
                    Actions: {
                        shape: "S2h"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBudgetNotificationsForAccount: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BudgetNotificationsForAccount: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Notifications: {
                                    shape: "S2p"
                                },
                                BudgetName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBudgetPerformanceHistory: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    TimePeriod: {
                        shape: "Sg"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BudgetPerformanceHistory: {
                        type: "structure",
                        members: {
                            BudgetName: {},
                            BudgetType: {},
                            CostFilters: {
                                shape: "Sa"
                            },
                            CostTypes: {
                                shape: "Sd"
                            },
                            TimeUnit: {},
                            BudgetedAndActualAmountsList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        BudgetedAmount: {
                                            shape: "S5"
                                        },
                                        ActualAmount: {
                                            shape: "S5"
                                        },
                                        TimePeriod: {
                                            shape: "Sg"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBudgets: {
            input: {
                type: "structure",
                required: [ "AccountId" ],
                members: {
                    AccountId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Budgets: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeNotificationsForBudget: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Notifications: {
                        shape: "S2p"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSubscribersForNotification: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Notification" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Notification: {
                        shape: "Sq"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Subscribers: {
                        shape: "Sw"
                    },
                    NextToken: {}
                }
            }
        },
        ExecuteBudgetAction: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId", "ExecutionType" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {},
                    ExecutionType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId", "ExecutionType" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {},
                    ExecutionType: {}
                }
            }
        },
        UpdateBudget: {
            input: {
                type: "structure",
                required: [ "AccountId", "NewBudget" ],
                members: {
                    AccountId: {},
                    NewBudget: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBudgetAction: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "ActionId" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    ActionId: {},
                    NotificationType: {},
                    ActionThreshold: {
                        shape: "S13"
                    },
                    Definition: {
                        shape: "S14"
                    },
                    ExecutionRoleArn: {},
                    ApprovalModel: {},
                    Subscribers: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "OldAction", "NewAction" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    OldAction: {
                        shape: "S1y"
                    },
                    NewAction: {
                        shape: "S1y"
                    }
                }
            }
        },
        UpdateNotification: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "OldNotification", "NewNotification" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    OldNotification: {
                        shape: "Sq"
                    },
                    NewNotification: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSubscriber: {
            input: {
                type: "structure",
                required: [ "AccountId", "BudgetName", "Notification", "OldSubscriber", "NewSubscriber" ],
                members: {
                    AccountId: {},
                    BudgetName: {},
                    Notification: {
                        shape: "Sq"
                    },
                    OldSubscriber: {
                        shape: "Sx"
                    },
                    NewSubscriber: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "BudgetName", "TimeUnit", "BudgetType" ],
            members: {
                BudgetName: {},
                BudgetLimit: {
                    shape: "S5"
                },
                PlannedBudgetLimits: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S5"
                    }
                },
                CostFilters: {
                    shape: "Sa"
                },
                CostTypes: {
                    shape: "Sd"
                },
                TimeUnit: {},
                TimePeriod: {
                    shape: "Sg"
                },
                CalculatedSpend: {
                    type: "structure",
                    required: [ "ActualSpend" ],
                    members: {
                        ActualSpend: {
                            shape: "S5"
                        },
                        ForecastedSpend: {
                            shape: "S5"
                        }
                    }
                },
                BudgetType: {},
                LastUpdatedTime: {
                    type: "timestamp"
                },
                AutoAdjustData: {
                    type: "structure",
                    required: [ "AutoAdjustType" ],
                    members: {
                        AutoAdjustType: {},
                        HistoricalOptions: {
                            type: "structure",
                            required: [ "BudgetAdjustmentPeriod" ],
                            members: {
                                BudgetAdjustmentPeriod: {
                                    type: "integer"
                                },
                                LookBackAvailablePeriods: {
                                    type: "integer"
                                }
                            }
                        },
                        LastAutoAdjustTime: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "Amount", "Unit" ],
            members: {
                Amount: {},
                Unit: {}
            }
        },
        Sa: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        Sd: {
            type: "structure",
            members: {
                IncludeTax: {
                    type: "boolean"
                },
                IncludeSubscription: {
                    type: "boolean"
                },
                UseBlended: {
                    type: "boolean"
                },
                IncludeRefund: {
                    type: "boolean"
                },
                IncludeCredit: {
                    type: "boolean"
                },
                IncludeUpfront: {
                    type: "boolean"
                },
                IncludeRecurring: {
                    type: "boolean"
                },
                IncludeOtherSubscription: {
                    type: "boolean"
                },
                IncludeSupport: {
                    type: "boolean"
                },
                IncludeDiscount: {
                    type: "boolean"
                },
                UseAmortized: {
                    type: "boolean"
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                Start: {
                    type: "timestamp"
                },
                End: {
                    type: "timestamp"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "NotificationType", "ComparisonOperator", "Threshold" ],
            members: {
                NotificationType: {},
                ComparisonOperator: {},
                Threshold: {
                    type: "double"
                },
                ThresholdType: {},
                NotificationState: {}
            }
        },
        Sw: {
            type: "list",
            member: {
                shape: "Sx"
            }
        },
        Sx: {
            type: "structure",
            required: [ "SubscriptionType", "Address" ],
            members: {
                SubscriptionType: {},
                Address: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S13: {
            type: "structure",
            required: [ "ActionThresholdValue", "ActionThresholdType" ],
            members: {
                ActionThresholdValue: {
                    type: "double"
                },
                ActionThresholdType: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                IamActionDefinition: {
                    type: "structure",
                    required: [ "PolicyArn" ],
                    members: {
                        PolicyArn: {},
                        Roles: {
                            type: "list",
                            member: {}
                        },
                        Groups: {
                            type: "list",
                            member: {}
                        },
                        Users: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                ScpActionDefinition: {
                    type: "structure",
                    required: [ "PolicyId", "TargetIds" ],
                    members: {
                        PolicyId: {},
                        TargetIds: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                SsmActionDefinition: {
                    type: "structure",
                    required: [ "ActionSubType", "Region", "InstanceIds" ],
                    members: {
                        ActionSubType: {},
                        Region: {},
                        InstanceIds: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S1y: {
            type: "structure",
            required: [ "ActionId", "BudgetName", "NotificationType", "ActionType", "ActionThreshold", "Definition", "ExecutionRoleArn", "ApprovalModel", "Status", "Subscribers" ],
            members: {
                ActionId: {},
                BudgetName: {},
                NotificationType: {},
                ActionType: {},
                ActionThreshold: {
                    shape: "S13"
                },
                Definition: {
                    shape: "S14"
                },
                ExecutionRoleArn: {},
                ApprovalModel: {},
                Status: {},
                Subscribers: {
                    shape: "Sw"
                }
            }
        },
        S2h: {
            type: "list",
            member: {
                shape: "S1y"
            }
        },
        S2p: {
            type: "list",
            member: {
                shape: "Sq"
            }
        }
    },
    paginators: {
        DescribeBudgetActionHistories: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ActionHistories"
        },
        DescribeBudgetActionsForAccount: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Actions"
        },
        DescribeBudgetActionsForBudget: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Actions"
        },
        DescribeBudgetNotificationsForAccount: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BudgetNotificationsForAccount"
        },
        DescribeBudgetPerformanceHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BudgetPerformanceHistory"
        },
        DescribeBudgets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Budgets"
        },
        DescribeNotificationsForBudget: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Notifications"
        },
        DescribeSubscribersForNotification: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Subscribers"
        }
    }
};

AWS.apiLoader.services["clouddirectory"] = {};

AWS.CloudDirectory = AWS.Service.defineService("clouddirectory", [ "2016-05-10", "2017-01-11" ]);

AWS.apiLoader.services["clouddirectory"]["2017-01-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-01-11",
        endpointPrefix: "clouddirectory",
        protocol: "rest-json",
        serviceFullName: "Amazon CloudDirectory",
        serviceId: "CloudDirectory",
        signatureVersion: "v4",
        signingName: "clouddirectory",
        uid: "clouddirectory-2017-01-11"
    },
    operations: {
        AddFacetToObject: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object/facets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "SchemaFacet", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    SchemaFacet: {
                        shape: "S3"
                    },
                    ObjectAttributeList: {
                        shape: "S5"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ApplySchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/apply",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PublishedSchemaArn", "DirectoryArn" ],
                members: {
                    PublishedSchemaArn: {},
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppliedSchemaArn: {},
                    DirectoryArn: {}
                }
            }
        },
        AttachObject: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object/attach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ParentReference", "ChildReference", "LinkName" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ParentReference: {
                        shape: "Sf"
                    },
                    ChildReference: {
                        shape: "Sf"
                    },
                    LinkName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachedObjectIdentifier: {}
                }
            }
        },
        AttachPolicy: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/policy/attach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "PolicyReference", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    PolicyReference: {
                        shape: "Sf"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AttachToIndex: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/index/attach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "IndexReference", "TargetReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    IndexReference: {
                        shape: "Sf"
                    },
                    TargetReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachedObjectIdentifier: {}
                }
            }
        },
        AttachTypedLink: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/attach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "SourceObjectReference", "TargetObjectReference", "TypedLinkFacet", "Attributes" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    SourceObjectReference: {
                        shape: "Sf"
                    },
                    TargetObjectReference: {
                        shape: "Sf"
                    },
                    TypedLinkFacet: {
                        shape: "St"
                    },
                    Attributes: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TypedLinkSpecifier: {
                        shape: "Sy"
                    }
                }
            }
        },
        BatchRead: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/batchread",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "Operations" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Operations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ListObjectAttributes: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        },
                                        FacetFilter: {
                                            shape: "S3"
                                        }
                                    }
                                },
                                ListObjectChildren: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ListAttachedIndices: {
                                    type: "structure",
                                    required: [ "TargetReference" ],
                                    members: {
                                        TargetReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ListObjectParentPaths: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                GetObjectInformation: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                GetObjectAttributes: {
                                    type: "structure",
                                    required: [ "ObjectReference", "SchemaFacet", "AttributeNames" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        SchemaFacet: {
                                            shape: "S3"
                                        },
                                        AttributeNames: {
                                            shape: "S1a"
                                        }
                                    }
                                },
                                ListObjectParents: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ListObjectPolicies: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ListPolicyAttachments: {
                                    type: "structure",
                                    required: [ "PolicyReference" ],
                                    members: {
                                        PolicyReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                LookupPolicy: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ListIndex: {
                                    type: "structure",
                                    required: [ "IndexReference" ],
                                    members: {
                                        RangesOnIndexedValues: {
                                            shape: "S1g"
                                        },
                                        IndexReference: {
                                            shape: "Sf"
                                        },
                                        MaxResults: {
                                            type: "integer"
                                        },
                                        NextToken: {}
                                    }
                                },
                                ListOutgoingTypedLinks: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        FilterAttributeRanges: {
                                            shape: "S1l"
                                        },
                                        FilterTypedLink: {
                                            shape: "St"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                ListIncomingTypedLinks: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        FilterAttributeRanges: {
                                            shape: "S1l"
                                        },
                                        FilterTypedLink: {
                                            shape: "St"
                                        },
                                        NextToken: {},
                                        MaxResults: {
                                            type: "integer"
                                        }
                                    }
                                },
                                GetLinkAttributes: {
                                    type: "structure",
                                    required: [ "TypedLinkSpecifier", "AttributeNames" ],
                                    members: {
                                        TypedLinkSpecifier: {
                                            shape: "Sy"
                                        },
                                        AttributeNames: {
                                            shape: "S1a"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Responses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SuccessfulResponse: {
                                    type: "structure",
                                    members: {
                                        ListObjectAttributes: {
                                            type: "structure",
                                            members: {
                                                Attributes: {
                                                    shape: "S5"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListObjectChildren: {
                                            type: "structure",
                                            members: {
                                                Children: {
                                                    shape: "S1w"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        GetObjectInformation: {
                                            type: "structure",
                                            members: {
                                                SchemaFacets: {
                                                    shape: "S1y"
                                                },
                                                ObjectIdentifier: {}
                                            }
                                        },
                                        GetObjectAttributes: {
                                            type: "structure",
                                            members: {
                                                Attributes: {
                                                    shape: "S5"
                                                }
                                            }
                                        },
                                        ListAttachedIndices: {
                                            type: "structure",
                                            members: {
                                                IndexAttachments: {
                                                    shape: "S21"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListObjectParentPaths: {
                                            type: "structure",
                                            members: {
                                                PathToObjectIdentifiersList: {
                                                    shape: "S24"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListObjectPolicies: {
                                            type: "structure",
                                            members: {
                                                AttachedPolicyIds: {
                                                    shape: "S27"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListPolicyAttachments: {
                                            type: "structure",
                                            members: {
                                                ObjectIdentifiers: {
                                                    shape: "S27"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        LookupPolicy: {
                                            type: "structure",
                                            members: {
                                                PolicyToPathList: {
                                                    shape: "S2b"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListIndex: {
                                            type: "structure",
                                            members: {
                                                IndexAttachments: {
                                                    shape: "S21"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListOutgoingTypedLinks: {
                                            type: "structure",
                                            members: {
                                                TypedLinkSpecifiers: {
                                                    shape: "S2i"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        ListIncomingTypedLinks: {
                                            type: "structure",
                                            members: {
                                                LinkSpecifiers: {
                                                    shape: "S2i"
                                                },
                                                NextToken: {}
                                            }
                                        },
                                        GetLinkAttributes: {
                                            type: "structure",
                                            members: {
                                                Attributes: {
                                                    shape: "S5"
                                                }
                                            }
                                        },
                                        ListObjectParents: {
                                            type: "structure",
                                            members: {
                                                ParentLinks: {
                                                    shape: "S2m"
                                                },
                                                NextToken: {}
                                            }
                                        }
                                    }
                                },
                                ExceptionResponse: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Message: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchWrite: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/batchwrite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "Operations" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Operations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreateObject: {
                                    type: "structure",
                                    required: [ "SchemaFacet", "ObjectAttributeList" ],
                                    members: {
                                        SchemaFacet: {
                                            shape: "S1y"
                                        },
                                        ObjectAttributeList: {
                                            shape: "S5"
                                        },
                                        ParentReference: {
                                            shape: "Sf"
                                        },
                                        LinkName: {},
                                        BatchReferenceName: {}
                                    }
                                },
                                AttachObject: {
                                    type: "structure",
                                    required: [ "ParentReference", "ChildReference", "LinkName" ],
                                    members: {
                                        ParentReference: {
                                            shape: "Sf"
                                        },
                                        ChildReference: {
                                            shape: "Sf"
                                        },
                                        LinkName: {}
                                    }
                                },
                                DetachObject: {
                                    type: "structure",
                                    required: [ "ParentReference", "LinkName" ],
                                    members: {
                                        ParentReference: {
                                            shape: "Sf"
                                        },
                                        LinkName: {},
                                        BatchReferenceName: {}
                                    }
                                },
                                UpdateObjectAttributes: {
                                    type: "structure",
                                    required: [ "ObjectReference", "AttributeUpdates" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        },
                                        AttributeUpdates: {
                                            shape: "S2z"
                                        }
                                    }
                                },
                                DeleteObject: {
                                    type: "structure",
                                    required: [ "ObjectReference" ],
                                    members: {
                                        ObjectReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                AddFacetToObject: {
                                    type: "structure",
                                    required: [ "SchemaFacet", "ObjectAttributeList", "ObjectReference" ],
                                    members: {
                                        SchemaFacet: {
                                            shape: "S3"
                                        },
                                        ObjectAttributeList: {
                                            shape: "S5"
                                        },
                                        ObjectReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                RemoveFacetFromObject: {
                                    type: "structure",
                                    required: [ "SchemaFacet", "ObjectReference" ],
                                    members: {
                                        SchemaFacet: {
                                            shape: "S3"
                                        },
                                        ObjectReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                AttachPolicy: {
                                    type: "structure",
                                    required: [ "PolicyReference", "ObjectReference" ],
                                    members: {
                                        PolicyReference: {
                                            shape: "Sf"
                                        },
                                        ObjectReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                DetachPolicy: {
                                    type: "structure",
                                    required: [ "PolicyReference", "ObjectReference" ],
                                    members: {
                                        PolicyReference: {
                                            shape: "Sf"
                                        },
                                        ObjectReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                CreateIndex: {
                                    type: "structure",
                                    required: [ "OrderedIndexedAttributeList", "IsUnique" ],
                                    members: {
                                        OrderedIndexedAttributeList: {
                                            shape: "S39"
                                        },
                                        IsUnique: {
                                            type: "boolean"
                                        },
                                        ParentReference: {
                                            shape: "Sf"
                                        },
                                        LinkName: {},
                                        BatchReferenceName: {}
                                    }
                                },
                                AttachToIndex: {
                                    type: "structure",
                                    required: [ "IndexReference", "TargetReference" ],
                                    members: {
                                        IndexReference: {
                                            shape: "Sf"
                                        },
                                        TargetReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                DetachFromIndex: {
                                    type: "structure",
                                    required: [ "IndexReference", "TargetReference" ],
                                    members: {
                                        IndexReference: {
                                            shape: "Sf"
                                        },
                                        TargetReference: {
                                            shape: "Sf"
                                        }
                                    }
                                },
                                AttachTypedLink: {
                                    type: "structure",
                                    required: [ "SourceObjectReference", "TargetObjectReference", "TypedLinkFacet", "Attributes" ],
                                    members: {
                                        SourceObjectReference: {
                                            shape: "Sf"
                                        },
                                        TargetObjectReference: {
                                            shape: "Sf"
                                        },
                                        TypedLinkFacet: {
                                            shape: "St"
                                        },
                                        Attributes: {
                                            shape: "Sv"
                                        }
                                    }
                                },
                                DetachTypedLink: {
                                    type: "structure",
                                    required: [ "TypedLinkSpecifier" ],
                                    members: {
                                        TypedLinkSpecifier: {
                                            shape: "Sy"
                                        }
                                    }
                                },
                                UpdateLinkAttributes: {
                                    type: "structure",
                                    required: [ "TypedLinkSpecifier", "AttributeUpdates" ],
                                    members: {
                                        TypedLinkSpecifier: {
                                            shape: "Sy"
                                        },
                                        AttributeUpdates: {
                                            shape: "S3g"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Responses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreateObject: {
                                    type: "structure",
                                    members: {
                                        ObjectIdentifier: {}
                                    }
                                },
                                AttachObject: {
                                    type: "structure",
                                    members: {
                                        attachedObjectIdentifier: {}
                                    }
                                },
                                DetachObject: {
                                    type: "structure",
                                    members: {
                                        detachedObjectIdentifier: {}
                                    }
                                },
                                UpdateObjectAttributes: {
                                    type: "structure",
                                    members: {
                                        ObjectIdentifier: {}
                                    }
                                },
                                DeleteObject: {
                                    type: "structure",
                                    members: {}
                                },
                                AddFacetToObject: {
                                    type: "structure",
                                    members: {}
                                },
                                RemoveFacetFromObject: {
                                    type: "structure",
                                    members: {}
                                },
                                AttachPolicy: {
                                    type: "structure",
                                    members: {}
                                },
                                DetachPolicy: {
                                    type: "structure",
                                    members: {}
                                },
                                CreateIndex: {
                                    type: "structure",
                                    members: {
                                        ObjectIdentifier: {}
                                    }
                                },
                                AttachToIndex: {
                                    type: "structure",
                                    members: {
                                        AttachedObjectIdentifier: {}
                                    }
                                },
                                DetachFromIndex: {
                                    type: "structure",
                                    members: {
                                        DetachedObjectIdentifier: {}
                                    }
                                },
                                AttachTypedLink: {
                                    type: "structure",
                                    members: {
                                        TypedLinkSpecifier: {
                                            shape: "Sy"
                                        }
                                    }
                                },
                                DetachTypedLink: {
                                    type: "structure",
                                    members: {}
                                },
                                UpdateLinkAttributes: {
                                    type: "structure",
                                    members: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateDirectory: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/directory/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "SchemaArn" ],
                members: {
                    Name: {},
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DirectoryArn", "Name", "ObjectIdentifier", "AppliedSchemaArn" ],
                members: {
                    DirectoryArn: {},
                    Name: {},
                    ObjectIdentifier: {},
                    AppliedSchemaArn: {}
                }
            }
        },
        CreateFacet: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/facet/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {},
                    Attributes: {
                        shape: "S46"
                    },
                    ObjectType: {},
                    FacetStyle: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateIndex: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/index",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "OrderedIndexedAttributeList", "IsUnique" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    OrderedIndexedAttributeList: {
                        shape: "S39"
                    },
                    IsUnique: {
                        type: "boolean"
                    },
                    ParentReference: {
                        shape: "Sf"
                    },
                    LinkName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectIdentifier: {}
                }
            }
        },
        CreateObject: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "SchemaFacets" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    SchemaFacets: {
                        shape: "S1y"
                    },
                    ObjectAttributeList: {
                        shape: "S5"
                    },
                    ParentReference: {
                        shape: "Sf"
                    },
                    LinkName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectIdentifier: {}
                }
            }
        },
        CreateSchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {}
                }
            }
        },
        CreateTypedLinkFacet: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/facet/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Facet" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Facet: {
                        type: "structure",
                        required: [ "Name", "Attributes", "IdentityAttributeOrder" ],
                        members: {
                            Name: {},
                            Attributes: {
                                shape: "S4v"
                            },
                            IdentityAttributeOrder: {
                                shape: "S1a"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDirectory: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/directory",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {}
                }
            }
        },
        DeleteFacet: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/facet/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteObject: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {}
                }
            }
        },
        DeleteTypedLinkFacet: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/facet/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DetachFromIndex: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/index/detach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "IndexReference", "TargetReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    IndexReference: {
                        shape: "Sf"
                    },
                    TargetReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DetachedObjectIdentifier: {}
                }
            }
        },
        DetachObject: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object/detach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ParentReference", "LinkName" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ParentReference: {
                        shape: "Sf"
                    },
                    LinkName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DetachedObjectIdentifier: {}
                }
            }
        },
        DetachPolicy: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/policy/detach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "PolicyReference", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    PolicyReference: {
                        shape: "Sf"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DetachTypedLink: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/detach",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "TypedLinkSpecifier" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    TypedLinkSpecifier: {
                        shape: "Sy"
                    }
                }
            }
        },
        DisableDirectory: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/directory/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {}
                }
            }
        },
        EnableDirectory: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/directory/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {}
                }
            }
        },
        GetAppliedSchemaVersion: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/schema/getappliedschema",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn" ],
                members: {
                    SchemaArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppliedSchemaArn: {}
                }
            }
        },
        GetDirectory: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/directory/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Directory" ],
                members: {
                    Directory: {
                        shape: "S5n"
                    }
                }
            }
        },
        GetFacet: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/facet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Facet: {
                        type: "structure",
                        members: {
                            Name: {},
                            ObjectType: {},
                            FacetStyle: {}
                        }
                    }
                }
            }
        },
        GetLinkAttributes: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/attributes/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "TypedLinkSpecifier", "AttributeNames" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    TypedLinkSpecifier: {
                        shape: "Sy"
                    },
                    AttributeNames: {
                        shape: "S1a"
                    },
                    ConsistencyLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5"
                    }
                }
            }
        },
        GetObjectAttributes: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/attributes/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference", "SchemaFacet", "AttributeNames" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    },
                    SchemaFacet: {
                        shape: "S3"
                    },
                    AttributeNames: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5"
                    }
                }
            }
        },
        GetObjectInformation: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/information",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaFacets: {
                        shape: "S1y"
                    },
                    ObjectIdentifier: {}
                }
            }
        },
        GetSchemaAsJson: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/schema/json",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Document: {}
                }
            }
        },
        GetTypedLinkFacetInformation: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/facet/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityAttributeOrder: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListAppliedSchemaArns: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/schema/applied",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn" ],
                members: {
                    DirectoryArn: {},
                    SchemaArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArns: {
                        shape: "S66"
                    },
                    NextToken: {}
                }
            }
        },
        ListAttachedIndices: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/indices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "TargetReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    TargetReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexAttachments: {
                        shape: "S21"
                    },
                    NextToken: {}
                }
            }
        },
        ListDevelopmentSchemaArns: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/schema/development",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArns: {
                        shape: "S66"
                    },
                    NextToken: {}
                }
            }
        },
        ListDirectories: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/directory/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    state: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Directories" ],
                members: {
                    Directories: {
                        type: "list",
                        member: {
                            shape: "S5n"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFacetAttributes: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/facet/attributes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S46"
                    },
                    NextToken: {}
                }
            }
        },
        ListFacetNames: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/facet/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FacetNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListIncomingTypedLinks: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/incoming",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    FilterAttributeRanges: {
                        shape: "S1l"
                    },
                    FilterTypedLink: {
                        shape: "St"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkSpecifiers: {
                        shape: "S2i"
                    },
                    NextToken: {}
                }
            }
        },
        ListIndex: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/index/targets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "IndexReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    RangesOnIndexedValues: {
                        shape: "S1g"
                    },
                    IndexReference: {
                        shape: "Sf"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IndexAttachments: {
                        shape: "S21"
                    },
                    NextToken: {}
                }
            }
        },
        ListManagedSchemaArns: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/schema/managed",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArns: {
                        shape: "S66"
                    },
                    NextToken: {}
                }
            }
        },
        ListObjectAttributes: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/attributes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    },
                    FacetFilter: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S5"
                    },
                    NextToken: {}
                }
            }
        },
        ListObjectChildren: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/children",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Children: {
                        shape: "S1w"
                    },
                    NextToken: {}
                }
            }
        },
        ListObjectParentPaths: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/parentpaths",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PathToObjectIdentifiersList: {
                        shape: "S24"
                    },
                    NextToken: {}
                }
            }
        },
        ListObjectParents: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/parent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    },
                    IncludeAllLinksToEachParent: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Parents: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    NextToken: {},
                    ParentLinks: {
                        shape: "S2m"
                    }
                }
            }
        },
        ListObjectPolicies: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/object/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachedPolicyIds: {
                        shape: "S27"
                    },
                    NextToken: {}
                }
            }
        },
        ListOutgoingTypedLinks: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/outgoing",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    FilterAttributeRanges: {
                        shape: "S1l"
                    },
                    FilterTypedLink: {
                        shape: "St"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TypedLinkSpecifiers: {
                        shape: "S2i"
                    },
                    NextToken: {}
                }
            }
        },
        ListPolicyAttachments: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/policy/attachment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "PolicyReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    PolicyReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ConsistencyLevel: {
                        location: "header",
                        locationName: "x-amz-consistency-level"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectIdentifiers: {
                        shape: "S27"
                    },
                    NextToken: {}
                }
            }
        },
        ListPublishedSchemaArns: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/schema/published",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArns: {
                        shape: "S66"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S79"
                    },
                    NextToken: {}
                }
            }
        },
        ListTypedLinkFacetAttributes: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S4v"
                    },
                    NextToken: {}
                }
            }
        },
        ListTypedLinkFacetNames: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/facet/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FacetNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        LookupPolicy: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/policy/lookup",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyToPathList: {
                        shape: "S2b"
                    },
                    NextToken: {}
                }
            }
        },
        PublishSchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/publish",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DevelopmentSchemaArn", "Version" ],
                members: {
                    DevelopmentSchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Version: {},
                    MinorVersion: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PublishedSchemaArn: {}
                }
            }
        },
        PutSchemaFromJson: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/json",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Document" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Document: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        RemoveFacetFromObject: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object/facets/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "SchemaFacet", "ObjectReference" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    SchemaFacet: {
                        shape: "S3"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/tags/add",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S79"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/tags/remove",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFacet: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/facet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {},
                    AttributeUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Attribute: {
                                    shape: "S47"
                                },
                                Action: {}
                            }
                        }
                    },
                    ObjectType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLinkAttributes: {
            http: {
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/attributes/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "TypedLinkSpecifier", "AttributeUpdates" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    TypedLinkSpecifier: {
                        shape: "Sy"
                    },
                    AttributeUpdates: {
                        shape: "S3g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateObjectAttributes: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/object/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DirectoryArn", "ObjectReference", "AttributeUpdates" ],
                members: {
                    DirectoryArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    ObjectReference: {
                        shape: "Sf"
                    },
                    AttributeUpdates: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectIdentifier: {}
                }
            }
        },
        UpdateSchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {}
                }
            }
        },
        UpdateTypedLinkFacet: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/typedlink/facet",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SchemaArn", "Name", "AttributeUpdates", "IdentityAttributeOrder" ],
                members: {
                    SchemaArn: {
                        location: "header",
                        locationName: "x-amz-data-partition"
                    },
                    Name: {},
                    AttributeUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Attribute", "Action" ],
                            members: {
                                Attribute: {
                                    shape: "S4w"
                                },
                                Action: {}
                            }
                        }
                    },
                    IdentityAttributeOrder: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpgradeAppliedSchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/upgradeapplied",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PublishedSchemaArn", "DirectoryArn" ],
                members: {
                    PublishedSchemaArn: {},
                    DirectoryArn: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradedSchemaArn: {},
                    DirectoryArn: {}
                }
            }
        },
        UpgradePublishedSchema: {
            http: {
                method: "PUT",
                requestUri: "/amazonclouddirectory/2017-01-11/schema/upgradepublished",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DevelopmentSchemaArn", "PublishedSchemaArn", "MinorVersion" ],
                members: {
                    DevelopmentSchemaArn: {},
                    PublishedSchemaArn: {},
                    MinorVersion: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpgradedSchemaArn: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                SchemaArn: {},
                FacetName: {}
            }
        },
        S5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S7"
                    },
                    Value: {
                        shape: "S9"
                    }
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "SchemaArn", "FacetName", "Name" ],
            members: {
                SchemaArn: {},
                FacetName: {},
                Name: {}
            }
        },
        S9: {
            type: "structure",
            members: {
                StringValue: {},
                BinaryValue: {
                    type: "blob"
                },
                BooleanValue: {
                    type: "boolean"
                },
                NumberValue: {},
                DatetimeValue: {
                    type: "timestamp"
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                Selector: {}
            }
        },
        St: {
            type: "structure",
            required: [ "SchemaArn", "TypedLinkName" ],
            members: {
                SchemaArn: {},
                TypedLinkName: {}
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributeName", "Value" ],
                members: {
                    AttributeName: {},
                    Value: {
                        shape: "S9"
                    }
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "TypedLinkFacet", "SourceObjectReference", "TargetObjectReference", "IdentityAttributeValues" ],
            members: {
                TypedLinkFacet: {
                    shape: "St"
                },
                SourceObjectReference: {
                    shape: "Sf"
                },
                TargetObjectReference: {
                    shape: "Sf"
                },
                IdentityAttributeValues: {
                    shape: "Sv"
                }
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AttributeKey: {
                        shape: "S7"
                    },
                    Range: {
                        shape: "S1i"
                    }
                }
            }
        },
        S1i: {
            type: "structure",
            required: [ "StartMode", "EndMode" ],
            members: {
                StartMode: {},
                StartValue: {
                    shape: "S9"
                },
                EndMode: {},
                EndValue: {
                    shape: "S9"
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Range" ],
                members: {
                    AttributeName: {},
                    Range: {
                        shape: "S1i"
                    }
                }
            }
        },
        S1w: {
            type: "map",
            key: {},
            value: {}
        },
        S1y: {
            type: "list",
            member: {
                shape: "S3"
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    IndexedAttributes: {
                        shape: "S5"
                    },
                    ObjectIdentifier: {}
                }
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Path: {},
                    ObjectIdentifiers: {
                        shape: "S27"
                    }
                }
            }
        },
        S27: {
            type: "list",
            member: {}
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Path: {},
                    Policies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyId: {},
                                ObjectIdentifier: {},
                                PolicyType: {}
                            }
                        }
                    }
                }
            }
        },
        S2i: {
            type: "list",
            member: {
                shape: "Sy"
            }
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ObjectIdentifier: {},
                    LinkName: {}
                }
            }
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ObjectAttributeKey: {
                        shape: "S7"
                    },
                    ObjectAttributeAction: {
                        type: "structure",
                        members: {
                            ObjectAttributeActionType: {},
                            ObjectAttributeUpdateValue: {
                                shape: "S9"
                            }
                        }
                    }
                }
            }
        },
        S39: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        S3g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AttributeKey: {
                        shape: "S7"
                    },
                    AttributeAction: {
                        type: "structure",
                        members: {
                            AttributeActionType: {},
                            AttributeUpdateValue: {
                                shape: "S9"
                            }
                        }
                    }
                }
            }
        },
        S46: {
            type: "list",
            member: {
                shape: "S47"
            }
        },
        S47: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                AttributeDefinition: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        DefaultValue: {
                            shape: "S9"
                        },
                        IsImmutable: {
                            type: "boolean"
                        },
                        Rules: {
                            shape: "S4a"
                        }
                    }
                },
                AttributeReference: {
                    type: "structure",
                    required: [ "TargetFacetName", "TargetAttributeName" ],
                    members: {
                        TargetFacetName: {},
                        TargetAttributeName: {}
                    }
                },
                RequiredBehavior: {}
            }
        },
        S4a: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Type: {},
                    Parameters: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S4v: {
            type: "list",
            member: {
                shape: "S4w"
            }
        },
        S4w: {
            type: "structure",
            required: [ "Name", "Type", "RequiredBehavior" ],
            members: {
                Name: {},
                Type: {},
                DefaultValue: {
                    shape: "S9"
                },
                IsImmutable: {
                    type: "boolean"
                },
                Rules: {
                    shape: "S4a"
                },
                RequiredBehavior: {}
            }
        },
        S5n: {
            type: "structure",
            members: {
                Name: {},
                DirectoryArn: {},
                State: {},
                CreationDateTime: {
                    type: "timestamp"
                }
            }
        },
        S66: {
            type: "list",
            member: {}
        },
        S79: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        ListAppliedSchemaArns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListAttachedIndices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevelopmentSchemaArns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDirectories: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFacetAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListFacetNames: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListIndex: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListManagedSchemaArns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjectAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjectChildren: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjectParentPaths: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjectParents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjectPolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPolicyAttachments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPublishedSchemaArns: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTypedLinkFacetAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTypedLinkFacetNames: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        LookupPolicy: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["cloudformation"] = {};

AWS.CloudFormation = AWS.Service.defineService("cloudformation", [ "2010-05-15" ]);

AWS.apiLoader.services["cloudformation"]["2010-05-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2010-05-15",
        endpointPrefix: "cloudformation",
        protocol: "query",
        serviceFullName: "AWS CloudFormation",
        serviceId: "CloudFormation",
        signatureVersion: "v4",
        uid: "cloudformation-2010-05-15",
        xmlNamespace: "http://cloudformation.amazonaws.com/doc/2010-05-15/"
    },
    operations: {
        ActivateOrganizationsAccess: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "ActivateOrganizationsAccessResult",
                type: "structure",
                members: {}
            }
        },
        ActivateType: {
            input: {
                type: "structure",
                members: {
                    Type: {},
                    PublicTypeArn: {},
                    PublisherId: {},
                    TypeName: {},
                    TypeNameAlias: {},
                    AutoUpdate: {
                        type: "boolean"
                    },
                    LoggingConfig: {
                        shape: "S9"
                    },
                    ExecutionRoleArn: {},
                    VersionBump: {},
                    MajorVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                resultWrapper: "ActivateTypeResult",
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        BatchDescribeTypeConfigurations: {
            input: {
                type: "structure",
                required: [ "TypeConfigurationIdentifiers" ],
                members: {
                    TypeConfigurationIdentifiers: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    }
                }
            },
            output: {
                resultWrapper: "BatchDescribeTypeConfigurationsResult",
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ErrorCode: {},
                                ErrorMessage: {},
                                TypeConfigurationIdentifier: {
                                    shape: "Si"
                                }
                            }
                        }
                    },
                    UnprocessedTypeConfigurations: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    TypeConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Alias: {},
                                Configuration: {},
                                LastUpdated: {
                                    type: "timestamp"
                                },
                                TypeArn: {},
                                TypeName: {},
                                IsDefaultConfiguration: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        CancelUpdateStack: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    ClientRequestToken: {}
                }
            }
        },
        ContinueUpdateRollback: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    RoleARN: {},
                    ResourcesToSkip: {
                        type: "list",
                        member: {}
                    },
                    ClientRequestToken: {}
                }
            },
            output: {
                resultWrapper: "ContinueUpdateRollbackResult",
                type: "structure",
                members: {}
            }
        },
        CreateChangeSet: {
            input: {
                type: "structure",
                required: [ "StackName", "ChangeSetName" ],
                members: {
                    StackName: {},
                    TemplateBody: {},
                    TemplateURL: {},
                    UsePreviousTemplate: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S1a"
                    },
                    Capabilities: {
                        shape: "S1f"
                    },
                    ResourceTypes: {
                        shape: "S1h"
                    },
                    RoleARN: {},
                    RollbackConfiguration: {
                        shape: "S1j"
                    },
                    NotificationARNs: {
                        shape: "S1p"
                    },
                    Tags: {
                        shape: "S1r"
                    },
                    ChangeSetName: {},
                    ClientToken: {},
                    Description: {},
                    ChangeSetType: {},
                    ResourcesToImport: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResourceType", "LogicalResourceId", "ResourceIdentifier" ],
                            members: {
                                ResourceType: {},
                                LogicalResourceId: {},
                                ResourceIdentifier: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    },
                    IncludeNestedStacks: {
                        type: "boolean"
                    },
                    OnStackFailure: {},
                    ImportExistingResources: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateChangeSetResult",
                type: "structure",
                members: {
                    Id: {},
                    StackId: {}
                }
            }
        },
        CreateStack: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    TemplateBody: {},
                    TemplateURL: {},
                    Parameters: {
                        shape: "S1a"
                    },
                    DisableRollback: {
                        type: "boolean"
                    },
                    RollbackConfiguration: {
                        shape: "S1j"
                    },
                    TimeoutInMinutes: {
                        type: "integer"
                    },
                    NotificationARNs: {
                        shape: "S1p"
                    },
                    Capabilities: {
                        shape: "S1f"
                    },
                    ResourceTypes: {
                        shape: "S1h"
                    },
                    RoleARN: {},
                    OnFailure: {},
                    StackPolicyBody: {},
                    StackPolicyURL: {},
                    Tags: {
                        shape: "S1r"
                    },
                    ClientRequestToken: {},
                    EnableTerminationProtection: {
                        type: "boolean"
                    },
                    RetainExceptOnCreate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "CreateStackResult",
                type: "structure",
                members: {
                    StackId: {}
                }
            }
        },
        CreateStackInstances: {
            input: {
                type: "structure",
                required: [ "StackSetName", "Regions" ],
                members: {
                    StackSetName: {},
                    Accounts: {
                        shape: "S2m"
                    },
                    DeploymentTargets: {
                        shape: "S2o"
                    },
                    Regions: {
                        shape: "S2t"
                    },
                    ParameterOverrides: {
                        shape: "S1a"
                    },
                    OperationPreferences: {
                        shape: "S2v"
                    },
                    OperationId: {
                        idempotencyToken: true
                    },
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "CreateStackInstancesResult",
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        CreateStackSet: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    Description: {},
                    TemplateBody: {},
                    TemplateURL: {},
                    StackId: {},
                    Parameters: {
                        shape: "S1a"
                    },
                    Capabilities: {
                        shape: "S1f"
                    },
                    Tags: {
                        shape: "S1r"
                    },
                    AdministrationRoleARN: {},
                    ExecutionRoleName: {},
                    PermissionModel: {},
                    AutoDeployment: {
                        shape: "S37"
                    },
                    CallAs: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    ManagedExecution: {
                        shape: "S3a"
                    }
                }
            },
            output: {
                resultWrapper: "CreateStackSetResult",
                type: "structure",
                members: {
                    StackSetId: {}
                }
            }
        },
        DeactivateOrganizationsAccess: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "DeactivateOrganizationsAccessResult",
                type: "structure",
                members: {}
            }
        },
        DeactivateType: {
            input: {
                type: "structure",
                members: {
                    TypeName: {},
                    Type: {},
                    Arn: {}
                }
            },
            output: {
                resultWrapper: "DeactivateTypeResult",
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteChangeSet: {
            input: {
                type: "structure",
                required: [ "ChangeSetName" ],
                members: {
                    ChangeSetName: {},
                    StackName: {}
                }
            },
            output: {
                resultWrapper: "DeleteChangeSetResult",
                type: "structure",
                members: {}
            }
        },
        DeleteStack: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    RetainResources: {
                        type: "list",
                        member: {}
                    },
                    RoleARN: {},
                    ClientRequestToken: {}
                }
            }
        },
        DeleteStackInstances: {
            input: {
                type: "structure",
                required: [ "StackSetName", "Regions", "RetainStacks" ],
                members: {
                    StackSetName: {},
                    Accounts: {
                        shape: "S2m"
                    },
                    DeploymentTargets: {
                        shape: "S2o"
                    },
                    Regions: {
                        shape: "S2t"
                    },
                    OperationPreferences: {
                        shape: "S2v"
                    },
                    RetainStacks: {
                        type: "boolean"
                    },
                    OperationId: {
                        idempotencyToken: true
                    },
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DeleteStackInstancesResult",
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        DeleteStackSet: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DeleteStackSetResult",
                type: "structure",
                members: {}
            }
        },
        DeregisterType: {
            input: {
                type: "structure",
                members: {
                    Arn: {},
                    Type: {},
                    TypeName: {},
                    VersionId: {}
                }
            },
            output: {
                resultWrapper: "DeregisterTypeResult",
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeAccountLimits: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeAccountLimitsResult",
                type: "structure",
                members: {
                    AccountLimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Value: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeChangeSet: {
            input: {
                type: "structure",
                required: [ "ChangeSetName" ],
                members: {
                    ChangeSetName: {},
                    StackName: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeChangeSetResult",
                type: "structure",
                members: {
                    ChangeSetName: {},
                    ChangeSetId: {},
                    StackId: {},
                    StackName: {},
                    Description: {},
                    Parameters: {
                        shape: "S1a"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    ExecutionStatus: {},
                    Status: {},
                    StatusReason: {},
                    NotificationARNs: {
                        shape: "S1p"
                    },
                    RollbackConfiguration: {
                        shape: "S1j"
                    },
                    Capabilities: {
                        shape: "S1f"
                    },
                    Tags: {
                        shape: "S1r"
                    },
                    Changes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                HookInvocationCount: {
                                    type: "integer"
                                },
                                ResourceChange: {
                                    type: "structure",
                                    members: {
                                        Action: {},
                                        LogicalResourceId: {},
                                        PhysicalResourceId: {},
                                        ResourceType: {},
                                        Replacement: {},
                                        Scope: {
                                            type: "list",
                                            member: {}
                                        },
                                        Details: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Target: {
                                                        type: "structure",
                                                        members: {
                                                            Attribute: {},
                                                            Name: {},
                                                            RequiresRecreation: {}
                                                        }
                                                    },
                                                    Evaluation: {},
                                                    ChangeSource: {},
                                                    CausingEntity: {}
                                                }
                                            }
                                        },
                                        ChangeSetId: {},
                                        ModuleInfo: {
                                            shape: "S4r"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {},
                    IncludeNestedStacks: {
                        type: "boolean"
                    },
                    ParentChangeSetId: {},
                    RootChangeSetId: {},
                    OnStackFailure: {},
                    ImportExistingResources: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeChangeSetHooks: {
            input: {
                type: "structure",
                required: [ "ChangeSetName" ],
                members: {
                    ChangeSetName: {},
                    StackName: {},
                    NextToken: {},
                    LogicalResourceId: {}
                }
            },
            output: {
                resultWrapper: "DescribeChangeSetHooksResult",
                type: "structure",
                members: {
                    ChangeSetId: {},
                    ChangeSetName: {},
                    Hooks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InvocationPoint: {},
                                FailureMode: {},
                                TypeName: {},
                                TypeVersionId: {},
                                TypeConfigurationVersionId: {},
                                TargetDetails: {
                                    type: "structure",
                                    members: {
                                        TargetType: {},
                                        ResourceTargetDetails: {
                                            type: "structure",
                                            members: {
                                                LogicalResourceId: {},
                                                ResourceType: {},
                                                ResourceAction: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Status: {},
                    NextToken: {},
                    StackId: {},
                    StackName: {}
                }
            }
        },
        DescribeOrganizationsAccess: {
            input: {
                type: "structure",
                members: {
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DescribeOrganizationsAccessResult",
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        DescribePublisher: {
            input: {
                type: "structure",
                members: {
                    PublisherId: {}
                }
            },
            output: {
                resultWrapper: "DescribePublisherResult",
                type: "structure",
                members: {
                    PublisherId: {},
                    PublisherStatus: {},
                    IdentityProvider: {},
                    PublisherProfile: {}
                }
            },
            idempotent: true
        },
        DescribeStackDriftDetectionStatus: {
            input: {
                type: "structure",
                required: [ "StackDriftDetectionId" ],
                members: {
                    StackDriftDetectionId: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackDriftDetectionStatusResult",
                type: "structure",
                required: [ "StackId", "StackDriftDetectionId", "DetectionStatus", "Timestamp" ],
                members: {
                    StackId: {},
                    StackDriftDetectionId: {},
                    StackDriftStatus: {},
                    DetectionStatus: {},
                    DetectionStatusReason: {},
                    DriftedStackResourceCount: {
                        type: "integer"
                    },
                    Timestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeStackEvents: {
            input: {
                type: "structure",
                members: {
                    StackName: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackEventsResult",
                type: "structure",
                members: {
                    StackEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StackId", "EventId", "StackName", "Timestamp" ],
                            members: {
                                StackId: {},
                                EventId: {},
                                StackName: {},
                                LogicalResourceId: {},
                                PhysicalResourceId: {},
                                ResourceType: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                ResourceStatus: {},
                                ResourceStatusReason: {},
                                ResourceProperties: {},
                                ClientRequestToken: {},
                                HookType: {},
                                HookStatus: {},
                                HookStatusReason: {},
                                HookInvocationPoint: {},
                                HookFailureMode: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStackInstance: {
            input: {
                type: "structure",
                required: [ "StackSetName", "StackInstanceAccount", "StackInstanceRegion" ],
                members: {
                    StackSetName: {},
                    StackInstanceAccount: {},
                    StackInstanceRegion: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackInstanceResult",
                type: "structure",
                members: {
                    StackInstance: {
                        type: "structure",
                        members: {
                            StackSetId: {},
                            Region: {},
                            Account: {},
                            StackId: {},
                            ParameterOverrides: {
                                shape: "S1a"
                            },
                            Status: {},
                            StackInstanceStatus: {
                                shape: "S62"
                            },
                            StatusReason: {},
                            OrganizationalUnitId: {},
                            DriftStatus: {},
                            LastDriftCheckTimestamp: {
                                type: "timestamp"
                            },
                            LastOperationId: {}
                        }
                    }
                }
            }
        },
        DescribeStackResource: {
            input: {
                type: "structure",
                required: [ "StackName", "LogicalResourceId" ],
                members: {
                    StackName: {},
                    LogicalResourceId: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackResourceResult",
                type: "structure",
                members: {
                    StackResourceDetail: {
                        type: "structure",
                        required: [ "LogicalResourceId", "ResourceType", "LastUpdatedTimestamp", "ResourceStatus" ],
                        members: {
                            StackName: {},
                            StackId: {},
                            LogicalResourceId: {},
                            PhysicalResourceId: {},
                            ResourceType: {},
                            LastUpdatedTimestamp: {
                                type: "timestamp"
                            },
                            ResourceStatus: {},
                            ResourceStatusReason: {},
                            Description: {},
                            Metadata: {},
                            DriftInformation: {
                                shape: "S69"
                            },
                            ModuleInfo: {
                                shape: "S4r"
                            }
                        }
                    }
                }
            }
        },
        DescribeStackResourceDrifts: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    StackResourceDriftStatusFilters: {
                        shape: "S6c"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeStackResourceDriftsResult",
                type: "structure",
                required: [ "StackResourceDrifts" ],
                members: {
                    StackResourceDrifts: {
                        type: "list",
                        member: {
                            shape: "S6g"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeStackResources: {
            input: {
                type: "structure",
                members: {
                    StackName: {},
                    LogicalResourceId: {},
                    PhysicalResourceId: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackResourcesResult",
                type: "structure",
                members: {
                    StackResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LogicalResourceId", "ResourceType", "Timestamp", "ResourceStatus" ],
                            members: {
                                StackName: {},
                                StackId: {},
                                LogicalResourceId: {},
                                PhysicalResourceId: {},
                                ResourceType: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                ResourceStatus: {},
                                ResourceStatusReason: {},
                                Description: {},
                                DriftInformation: {
                                    shape: "S69"
                                },
                                ModuleInfo: {
                                    shape: "S4r"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeStackSet: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackSetResult",
                type: "structure",
                members: {
                    StackSet: {
                        type: "structure",
                        members: {
                            StackSetName: {},
                            StackSetId: {},
                            Description: {},
                            Status: {},
                            TemplateBody: {},
                            Parameters: {
                                shape: "S1a"
                            },
                            Capabilities: {
                                shape: "S1f"
                            },
                            Tags: {
                                shape: "S1r"
                            },
                            StackSetARN: {},
                            AdministrationRoleARN: {},
                            ExecutionRoleName: {},
                            StackSetDriftDetectionDetails: {
                                shape: "S70"
                            },
                            AutoDeployment: {
                                shape: "S37"
                            },
                            PermissionModel: {},
                            OrganizationalUnitIds: {
                                shape: "S2q"
                            },
                            ManagedExecution: {
                                shape: "S3a"
                            },
                            Regions: {
                                shape: "S2t"
                            }
                        }
                    }
                }
            }
        },
        DescribeStackSetOperation: {
            input: {
                type: "structure",
                required: [ "StackSetName", "OperationId" ],
                members: {
                    StackSetName: {},
                    OperationId: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DescribeStackSetOperationResult",
                type: "structure",
                members: {
                    StackSetOperation: {
                        type: "structure",
                        members: {
                            OperationId: {},
                            StackSetId: {},
                            Action: {},
                            Status: {},
                            OperationPreferences: {
                                shape: "S2v"
                            },
                            RetainStacks: {
                                type: "boolean"
                            },
                            AdministrationRoleARN: {},
                            ExecutionRoleName: {},
                            CreationTimestamp: {
                                type: "timestamp"
                            },
                            EndTimestamp: {
                                type: "timestamp"
                            },
                            DeploymentTargets: {
                                shape: "S2o"
                            },
                            StackSetDriftDetectionDetails: {
                                shape: "S70"
                            },
                            StatusReason: {},
                            StatusDetails: {
                                shape: "S7f"
                            }
                        }
                    }
                }
            }
        },
        DescribeStacks: {
            input: {
                type: "structure",
                members: {
                    StackName: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeStacksResult",
                type: "structure",
                members: {
                    Stacks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StackName", "CreationTime", "StackStatus" ],
                            members: {
                                StackId: {},
                                StackName: {},
                                ChangeSetId: {},
                                Description: {},
                                Parameters: {
                                    shape: "S1a"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                DeletionTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                RollbackConfiguration: {
                                    shape: "S1j"
                                },
                                StackStatus: {},
                                StackStatusReason: {},
                                DisableRollback: {
                                    type: "boolean"
                                },
                                NotificationARNs: {
                                    shape: "S1p"
                                },
                                TimeoutInMinutes: {
                                    type: "integer"
                                },
                                Capabilities: {
                                    shape: "S1f"
                                },
                                Outputs: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            OutputKey: {},
                                            OutputValue: {},
                                            Description: {},
                                            ExportName: {}
                                        }
                                    }
                                },
                                RoleARN: {},
                                Tags: {
                                    shape: "S1r"
                                },
                                EnableTerminationProtection: {
                                    type: "boolean"
                                },
                                ParentId: {},
                                RootId: {},
                                DriftInformation: {
                                    type: "structure",
                                    required: [ "StackDriftStatus" ],
                                    members: {
                                        StackDriftStatus: {},
                                        LastCheckTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                RetainExceptOnCreate: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeType: {
            input: {
                type: "structure",
                members: {
                    Type: {},
                    TypeName: {},
                    Arn: {},
                    VersionId: {},
                    PublisherId: {},
                    PublicVersionNumber: {}
                }
            },
            output: {
                resultWrapper: "DescribeTypeResult",
                type: "structure",
                members: {
                    Arn: {},
                    Type: {},
                    TypeName: {},
                    DefaultVersionId: {},
                    IsDefaultVersion: {
                        type: "boolean"
                    },
                    TypeTestsStatus: {},
                    TypeTestsStatusDescription: {},
                    Description: {},
                    Schema: {},
                    ProvisioningType: {},
                    DeprecatedStatus: {},
                    LoggingConfig: {
                        shape: "S9"
                    },
                    RequiredActivatedTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TypeNameAlias: {},
                                OriginalTypeName: {},
                                PublisherId: {},
                                SupportedMajorVersions: {
                                    type: "list",
                                    member: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    ExecutionRoleArn: {},
                    Visibility: {},
                    SourceUrl: {},
                    DocumentationUrl: {},
                    LastUpdated: {
                        type: "timestamp"
                    },
                    TimeCreated: {
                        type: "timestamp"
                    },
                    ConfigurationSchema: {},
                    PublisherId: {},
                    OriginalTypeName: {},
                    OriginalTypeArn: {},
                    PublicVersionNumber: {},
                    LatestPublicVersion: {},
                    IsActivated: {
                        type: "boolean"
                    },
                    AutoUpdate: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DescribeTypeRegistration: {
            input: {
                type: "structure",
                required: [ "RegistrationToken" ],
                members: {
                    RegistrationToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeTypeRegistrationResult",
                type: "structure",
                members: {
                    ProgressStatus: {},
                    Description: {},
                    TypeArn: {},
                    TypeVersionArn: {}
                }
            },
            idempotent: true
        },
        DetectStackDrift: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    LogicalResourceIds: {
                        shape: "S8g"
                    }
                }
            },
            output: {
                resultWrapper: "DetectStackDriftResult",
                type: "structure",
                required: [ "StackDriftDetectionId" ],
                members: {
                    StackDriftDetectionId: {}
                }
            }
        },
        DetectStackResourceDrift: {
            input: {
                type: "structure",
                required: [ "StackName", "LogicalResourceId" ],
                members: {
                    StackName: {},
                    LogicalResourceId: {}
                }
            },
            output: {
                resultWrapper: "DetectStackResourceDriftResult",
                type: "structure",
                required: [ "StackResourceDrift" ],
                members: {
                    StackResourceDrift: {
                        shape: "S6g"
                    }
                }
            }
        },
        DetectStackSetDrift: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    OperationPreferences: {
                        shape: "S2v"
                    },
                    OperationId: {
                        idempotencyToken: true
                    },
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "DetectStackSetDriftResult",
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        EstimateTemplateCost: {
            input: {
                type: "structure",
                members: {
                    TemplateBody: {},
                    TemplateURL: {},
                    Parameters: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                resultWrapper: "EstimateTemplateCostResult",
                type: "structure",
                members: {
                    Url: {}
                }
            }
        },
        ExecuteChangeSet: {
            input: {
                type: "structure",
                required: [ "ChangeSetName" ],
                members: {
                    ChangeSetName: {},
                    StackName: {},
                    ClientRequestToken: {},
                    DisableRollback: {
                        type: "boolean"
                    },
                    RetainExceptOnCreate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "ExecuteChangeSetResult",
                type: "structure",
                members: {}
            }
        },
        GetStackPolicy: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {}
                }
            },
            output: {
                resultWrapper: "GetStackPolicyResult",
                type: "structure",
                members: {
                    StackPolicyBody: {}
                }
            }
        },
        GetTemplate: {
            input: {
                type: "structure",
                members: {
                    StackName: {},
                    ChangeSetName: {},
                    TemplateStage: {}
                }
            },
            output: {
                resultWrapper: "GetTemplateResult",
                type: "structure",
                members: {
                    TemplateBody: {},
                    StagesAvailable: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        GetTemplateSummary: {
            input: {
                type: "structure",
                members: {
                    TemplateBody: {},
                    TemplateURL: {},
                    StackName: {},
                    StackSetName: {},
                    CallAs: {},
                    TemplateSummaryConfig: {
                        type: "structure",
                        members: {
                            TreatUnrecognizedResourceTypesAsWarnings: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "GetTemplateSummaryResult",
                type: "structure",
                members: {
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterKey: {},
                                DefaultValue: {},
                                ParameterType: {},
                                NoEcho: {
                                    type: "boolean"
                                },
                                Description: {},
                                ParameterConstraints: {
                                    type: "structure",
                                    members: {
                                        AllowedValues: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Description: {},
                    Capabilities: {
                        shape: "S1f"
                    },
                    CapabilitiesReason: {},
                    ResourceTypes: {
                        shape: "S1h"
                    },
                    Version: {},
                    Metadata: {},
                    DeclaredTransforms: {
                        shape: "S9b"
                    },
                    ResourceIdentifierSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {},
                                LogicalResourceIds: {
                                    shape: "S8g"
                                },
                                ResourceIdentifiers: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    Warnings: {
                        type: "structure",
                        members: {
                            UnrecognizedResourceTypes: {
                                shape: "S1h"
                            }
                        }
                    }
                }
            }
        },
        ImportStacksToStackSet: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    StackIds: {
                        type: "list",
                        member: {}
                    },
                    StackIdsUrl: {},
                    OrganizationalUnitIds: {
                        shape: "S2q"
                    },
                    OperationPreferences: {
                        shape: "S2v"
                    },
                    OperationId: {
                        idempotencyToken: true
                    },
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "ImportStacksToStackSetResult",
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        ListChangeSets: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListChangeSetsResult",
                type: "structure",
                members: {
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StackId: {},
                                StackName: {},
                                ChangeSetId: {},
                                ChangeSetName: {},
                                ExecutionStatus: {},
                                Status: {},
                                StatusReason: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                IncludeNestedStacks: {
                                    type: "boolean"
                                },
                                ParentChangeSetId: {},
                                RootChangeSetId: {},
                                ImportExistingResources: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExports: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListExportsResult",
                type: "structure",
                members: {
                    Exports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExportingStackId: {},
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImports: {
            input: {
                type: "structure",
                required: [ "ExportName" ],
                members: {
                    ExportName: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListImportsResult",
                type: "structure",
                members: {
                    Imports: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListStackInstanceResourceDrifts: {
            input: {
                type: "structure",
                required: [ "StackSetName", "StackInstanceAccount", "StackInstanceRegion", "OperationId" ],
                members: {
                    StackSetName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StackInstanceResourceDriftStatuses: {
                        shape: "S6c"
                    },
                    StackInstanceAccount: {},
                    StackInstanceRegion: {},
                    OperationId: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "ListStackInstanceResourceDriftsResult",
                type: "structure",
                members: {
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StackId", "LogicalResourceId", "ResourceType", "StackResourceDriftStatus", "Timestamp" ],
                            members: {
                                StackId: {},
                                LogicalResourceId: {},
                                PhysicalResourceId: {},
                                PhysicalResourceIdContext: {
                                    shape: "S6h"
                                },
                                ResourceType: {},
                                PropertyDifferences: {
                                    shape: "S6m"
                                },
                                StackResourceDriftStatus: {},
                                Timestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStackInstances: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {}
                            }
                        }
                    },
                    StackInstanceAccount: {},
                    StackInstanceRegion: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "ListStackInstancesResult",
                type: "structure",
                members: {
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StackSetId: {},
                                Region: {},
                                Account: {},
                                StackId: {},
                                Status: {},
                                StatusReason: {},
                                StackInstanceStatus: {
                                    shape: "S62"
                                },
                                OrganizationalUnitId: {},
                                DriftStatus: {},
                                LastDriftCheckTimestamp: {
                                    type: "timestamp"
                                },
                                LastOperationId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStackResources: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListStackResourcesResult",
                type: "structure",
                members: {
                    StackResourceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LogicalResourceId", "ResourceType", "LastUpdatedTimestamp", "ResourceStatus" ],
                            members: {
                                LogicalResourceId: {},
                                PhysicalResourceId: {},
                                ResourceType: {},
                                LastUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                ResourceStatus: {},
                                ResourceStatusReason: {},
                                DriftInformation: {
                                    type: "structure",
                                    required: [ "StackResourceDriftStatus" ],
                                    members: {
                                        StackResourceDriftStatus: {},
                                        LastCheckTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                },
                                ModuleInfo: {
                                    shape: "S4r"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStackSetOperationResults: {
            input: {
                type: "structure",
                required: [ "StackSetName", "OperationId" ],
                members: {
                    StackSetName: {},
                    OperationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CallAs: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "ListStackSetOperationResultsResult",
                type: "structure",
                members: {
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Account: {},
                                Region: {},
                                Status: {},
                                StatusReason: {},
                                AccountGateResult: {
                                    type: "structure",
                                    members: {
                                        Status: {},
                                        StatusReason: {}
                                    }
                                },
                                OrganizationalUnitId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStackSetOperations: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "ListStackSetOperationsResult",
                type: "structure",
                members: {
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OperationId: {},
                                Action: {},
                                Status: {},
                                CreationTimestamp: {
                                    type: "timestamp"
                                },
                                EndTimestamp: {
                                    type: "timestamp"
                                },
                                StatusReason: {},
                                StatusDetails: {
                                    shape: "S7f"
                                },
                                OperationPreferences: {
                                    shape: "S2v"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStackSets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Status: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "ListStackSetsResult",
                type: "structure",
                members: {
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StackSetName: {},
                                StackSetId: {},
                                Description: {},
                                Status: {},
                                AutoDeployment: {
                                    shape: "S37"
                                },
                                PermissionModel: {},
                                DriftStatus: {},
                                LastDriftCheckTimestamp: {
                                    type: "timestamp"
                                },
                                ManagedExecution: {
                                    shape: "S3a"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStacks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    StackStatusFilter: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "ListStacksResult",
                type: "structure",
                members: {
                    StackSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StackName", "CreationTime", "StackStatus" ],
                            members: {
                                StackId: {},
                                StackName: {},
                                TemplateDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                DeletionTime: {
                                    type: "timestamp"
                                },
                                StackStatus: {},
                                StackStatusReason: {},
                                ParentId: {},
                                RootId: {},
                                DriftInformation: {
                                    type: "structure",
                                    required: [ "StackDriftStatus" ],
                                    members: {
                                        StackDriftStatus: {},
                                        LastCheckTimestamp: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTypeRegistrations: {
            input: {
                type: "structure",
                members: {
                    Type: {},
                    TypeName: {},
                    TypeArn: {},
                    RegistrationStatusFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListTypeRegistrationsResult",
                type: "structure",
                members: {
                    RegistrationTokenList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTypeVersions: {
            input: {
                type: "structure",
                members: {
                    Type: {},
                    TypeName: {},
                    Arn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DeprecatedStatus: {},
                    PublisherId: {}
                }
            },
            output: {
                resultWrapper: "ListTypeVersionsResult",
                type: "structure",
                members: {
                    TypeVersionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                TypeName: {},
                                VersionId: {},
                                IsDefaultVersion: {
                                    type: "boolean"
                                },
                                Arn: {},
                                TimeCreated: {
                                    type: "timestamp"
                                },
                                Description: {},
                                PublicVersionNumber: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTypes: {
            input: {
                type: "structure",
                members: {
                    Visibility: {},
                    ProvisioningType: {},
                    DeprecatedStatus: {},
                    Type: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Category: {},
                            PublisherId: {},
                            TypeNamePrefix: {}
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListTypesResult",
                type: "structure",
                members: {
                    TypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                TypeName: {},
                                DefaultVersionId: {},
                                TypeArn: {},
                                LastUpdated: {
                                    type: "timestamp"
                                },
                                Description: {},
                                PublisherId: {},
                                OriginalTypeName: {},
                                PublicVersionNumber: {},
                                LatestPublicVersion: {},
                                PublisherIdentity: {},
                                PublisherName: {},
                                IsActivated: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        PublishType: {
            input: {
                type: "structure",
                members: {
                    Type: {},
                    Arn: {},
                    TypeName: {},
                    PublicVersionNumber: {}
                }
            },
            output: {
                resultWrapper: "PublishTypeResult",
                type: "structure",
                members: {
                    PublicTypeArn: {}
                }
            },
            idempotent: true
        },
        RecordHandlerProgress: {
            input: {
                type: "structure",
                required: [ "BearerToken", "OperationStatus" ],
                members: {
                    BearerToken: {},
                    OperationStatus: {},
                    CurrentOperationStatus: {},
                    StatusMessage: {},
                    ErrorCode: {},
                    ResourceModel: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                resultWrapper: "RecordHandlerProgressResult",
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterPublisher: {
            input: {
                type: "structure",
                members: {
                    AcceptTermsAndConditions: {
                        type: "boolean"
                    },
                    ConnectionArn: {}
                }
            },
            output: {
                resultWrapper: "RegisterPublisherResult",
                type: "structure",
                members: {
                    PublisherId: {}
                }
            },
            idempotent: true
        },
        RegisterType: {
            input: {
                type: "structure",
                required: [ "TypeName", "SchemaHandlerPackage" ],
                members: {
                    Type: {},
                    TypeName: {},
                    SchemaHandlerPackage: {},
                    LoggingConfig: {
                        shape: "S9"
                    },
                    ExecutionRoleArn: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                resultWrapper: "RegisterTypeResult",
                type: "structure",
                members: {
                    RegistrationToken: {}
                }
            },
            idempotent: true
        },
        RollbackStack: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    RoleARN: {},
                    ClientRequestToken: {},
                    RetainExceptOnCreate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "RollbackStackResult",
                type: "structure",
                members: {
                    StackId: {}
                }
            }
        },
        SetStackPolicy: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    StackPolicyBody: {},
                    StackPolicyURL: {}
                }
            }
        },
        SetTypeConfiguration: {
            input: {
                type: "structure",
                required: [ "Configuration" ],
                members: {
                    TypeArn: {},
                    Configuration: {},
                    ConfigurationAlias: {},
                    TypeName: {},
                    Type: {}
                }
            },
            output: {
                resultWrapper: "SetTypeConfigurationResult",
                type: "structure",
                members: {
                    ConfigurationArn: {}
                }
            }
        },
        SetTypeDefaultVersion: {
            input: {
                type: "structure",
                members: {
                    Arn: {},
                    Type: {},
                    TypeName: {},
                    VersionId: {}
                }
            },
            output: {
                resultWrapper: "SetTypeDefaultVersionResult",
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        SignalResource: {
            input: {
                type: "structure",
                required: [ "StackName", "LogicalResourceId", "UniqueId", "Status" ],
                members: {
                    StackName: {},
                    LogicalResourceId: {},
                    UniqueId: {},
                    Status: {}
                }
            }
        },
        StopStackSetOperation: {
            input: {
                type: "structure",
                required: [ "StackSetName", "OperationId" ],
                members: {
                    StackSetName: {},
                    OperationId: {},
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "StopStackSetOperationResult",
                type: "structure",
                members: {}
            }
        },
        TestType: {
            input: {
                type: "structure",
                members: {
                    Arn: {},
                    Type: {},
                    TypeName: {},
                    VersionId: {},
                    LogDeliveryBucket: {}
                }
            },
            output: {
                resultWrapper: "TestTypeResult",
                type: "structure",
                members: {
                    TypeVersionArn: {}
                }
            },
            idempotent: true
        },
        UpdateStack: {
            input: {
                type: "structure",
                required: [ "StackName" ],
                members: {
                    StackName: {},
                    TemplateBody: {},
                    TemplateURL: {},
                    UsePreviousTemplate: {
                        type: "boolean"
                    },
                    StackPolicyDuringUpdateBody: {},
                    StackPolicyDuringUpdateURL: {},
                    Parameters: {
                        shape: "S1a"
                    },
                    Capabilities: {
                        shape: "S1f"
                    },
                    ResourceTypes: {
                        shape: "S1h"
                    },
                    RoleARN: {},
                    RollbackConfiguration: {
                        shape: "S1j"
                    },
                    StackPolicyBody: {},
                    StackPolicyURL: {},
                    NotificationARNs: {
                        shape: "S1p"
                    },
                    Tags: {
                        shape: "S1r"
                    },
                    DisableRollback: {
                        type: "boolean"
                    },
                    ClientRequestToken: {},
                    RetainExceptOnCreate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateStackResult",
                type: "structure",
                members: {
                    StackId: {}
                }
            }
        },
        UpdateStackInstances: {
            input: {
                type: "structure",
                required: [ "StackSetName", "Regions" ],
                members: {
                    StackSetName: {},
                    Accounts: {
                        shape: "S2m"
                    },
                    DeploymentTargets: {
                        shape: "S2o"
                    },
                    Regions: {
                        shape: "S2t"
                    },
                    ParameterOverrides: {
                        shape: "S1a"
                    },
                    OperationPreferences: {
                        shape: "S2v"
                    },
                    OperationId: {
                        idempotencyToken: true
                    },
                    CallAs: {}
                }
            },
            output: {
                resultWrapper: "UpdateStackInstancesResult",
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateStackSet: {
            input: {
                type: "structure",
                required: [ "StackSetName" ],
                members: {
                    StackSetName: {},
                    Description: {},
                    TemplateBody: {},
                    TemplateURL: {},
                    UsePreviousTemplate: {
                        type: "boolean"
                    },
                    Parameters: {
                        shape: "S1a"
                    },
                    Capabilities: {
                        shape: "S1f"
                    },
                    Tags: {
                        shape: "S1r"
                    },
                    OperationPreferences: {
                        shape: "S2v"
                    },
                    AdministrationRoleARN: {},
                    ExecutionRoleName: {},
                    DeploymentTargets: {
                        shape: "S2o"
                    },
                    PermissionModel: {},
                    AutoDeployment: {
                        shape: "S37"
                    },
                    OperationId: {
                        idempotencyToken: true
                    },
                    Accounts: {
                        shape: "S2m"
                    },
                    Regions: {
                        shape: "S2t"
                    },
                    CallAs: {},
                    ManagedExecution: {
                        shape: "S3a"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateStackSetResult",
                type: "structure",
                members: {
                    OperationId: {}
                }
            }
        },
        UpdateTerminationProtection: {
            input: {
                type: "structure",
                required: [ "EnableTerminationProtection", "StackName" ],
                members: {
                    EnableTerminationProtection: {
                        type: "boolean"
                    },
                    StackName: {}
                }
            },
            output: {
                resultWrapper: "UpdateTerminationProtectionResult",
                type: "structure",
                members: {
                    StackId: {}
                }
            }
        },
        ValidateTemplate: {
            input: {
                type: "structure",
                members: {
                    TemplateBody: {},
                    TemplateURL: {}
                }
            },
            output: {
                resultWrapper: "ValidateTemplateResult",
                type: "structure",
                members: {
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterKey: {},
                                DefaultValue: {},
                                NoEcho: {
                                    type: "boolean"
                                },
                                Description: {}
                            }
                        }
                    },
                    Description: {},
                    Capabilities: {
                        shape: "S1f"
                    },
                    CapabilitiesReason: {},
                    DeclaredTransforms: {
                        shape: "S9b"
                    }
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            required: [ "LogRoleArn", "LogGroupName" ],
            members: {
                LogRoleArn: {},
                LogGroupName: {}
            }
        },
        Si: {
            type: "structure",
            members: {
                TypeArn: {},
                TypeConfigurationAlias: {},
                TypeConfigurationArn: {},
                Type: {},
                TypeName: {}
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ParameterKey: {},
                    ParameterValue: {},
                    UsePreviousValue: {
                        type: "boolean"
                    },
                    ResolvedValue: {}
                }
            }
        },
        S1f: {
            type: "list",
            member: {}
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "structure",
            members: {
                RollbackTriggers: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Arn", "Type" ],
                        members: {
                            Arn: {},
                            Type: {}
                        }
                    }
                },
                MonitoringTimeInMinutes: {
                    type: "integer"
                }
            }
        },
        S1p: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S2m: {
            type: "list",
            member: {}
        },
        S2o: {
            type: "structure",
            members: {
                Accounts: {
                    shape: "S2m"
                },
                AccountsUrl: {},
                OrganizationalUnitIds: {
                    shape: "S2q"
                },
                AccountFilterType: {}
            }
        },
        S2q: {
            type: "list",
            member: {}
        },
        S2t: {
            type: "list",
            member: {}
        },
        S2v: {
            type: "structure",
            members: {
                RegionConcurrencyType: {},
                RegionOrder: {
                    shape: "S2t"
                },
                FailureToleranceCount: {
                    type: "integer"
                },
                FailureTolerancePercentage: {
                    type: "integer"
                },
                MaxConcurrentCount: {
                    type: "integer"
                },
                MaxConcurrentPercentage: {
                    type: "integer"
                },
                ConcurrencyMode: {}
            }
        },
        S37: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                RetainStacksOnAccountRemoval: {
                    type: "boolean"
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                Active: {
                    type: "boolean"
                }
            }
        },
        S4r: {
            type: "structure",
            members: {
                TypeHierarchy: {},
                LogicalIdHierarchy: {}
            }
        },
        S62: {
            type: "structure",
            members: {
                DetailedStatus: {}
            }
        },
        S69: {
            type: "structure",
            required: [ "StackResourceDriftStatus" ],
            members: {
                StackResourceDriftStatus: {},
                LastCheckTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S6c: {
            type: "list",
            member: {}
        },
        S6g: {
            type: "structure",
            required: [ "StackId", "LogicalResourceId", "ResourceType", "StackResourceDriftStatus", "Timestamp" ],
            members: {
                StackId: {},
                LogicalResourceId: {},
                PhysicalResourceId: {},
                PhysicalResourceIdContext: {
                    shape: "S6h"
                },
                ResourceType: {},
                ExpectedProperties: {},
                ActualProperties: {},
                PropertyDifferences: {
                    shape: "S6m"
                },
                StackResourceDriftStatus: {},
                Timestamp: {
                    type: "timestamp"
                },
                ModuleInfo: {
                    shape: "S4r"
                }
            }
        },
        S6h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S6m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "PropertyPath", "ExpectedValue", "ActualValue", "DifferenceType" ],
                members: {
                    PropertyPath: {},
                    ExpectedValue: {},
                    ActualValue: {},
                    DifferenceType: {}
                }
            }
        },
        S70: {
            type: "structure",
            members: {
                DriftStatus: {},
                DriftDetectionStatus: {},
                LastDriftCheckTimestamp: {
                    type: "timestamp"
                },
                TotalStackInstancesCount: {
                    type: "integer"
                },
                DriftedStackInstancesCount: {
                    type: "integer"
                },
                InSyncStackInstancesCount: {
                    type: "integer"
                },
                InProgressStackInstancesCount: {
                    type: "integer"
                },
                FailedStackInstancesCount: {
                    type: "integer"
                }
            }
        },
        S7f: {
            type: "structure",
            members: {
                FailedStackInstancesCount: {
                    type: "integer"
                }
            }
        },
        S8g: {
            type: "list",
            member: {}
        },
        S9b: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeAccountLimits: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "AccountLimits"
        },
        DescribeStackEvents: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "StackEvents"
        },
        DescribeStackResourceDrifts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeStackResources: {
            result_key: "StackResources"
        },
        DescribeStacks: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Stacks"
        },
        ListChangeSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListExports: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Exports"
        },
        ListImports: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Imports"
        },
        ListStackInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListStackResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "StackResourceSummaries"
        },
        ListStackSetOperationResults: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListStackSetOperations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListStackSets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListStacks: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "StackSummaries"
        },
        ListTypeRegistrations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTypeVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTypes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TypeSummaries"
        }
    },
    waiters: {
        StackExists: {
            delay: 5,
            operation: "DescribeStacks",
            maxAttempts: 20,
            acceptors: [ {
                matcher: "status",
                expected: 200,
                state: "success"
            }, {
                matcher: "error",
                expected: "ValidationError",
                state: "retry"
            } ]
        },
        StackCreateComplete: {
            delay: 30,
            operation: "DescribeStacks",
            maxAttempts: 120,
            description: "Wait until stack status is CREATE_COMPLETE.",
            acceptors: [ {
                argument: "Stacks[].StackStatus",
                expected: "CREATE_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_IN_PROGRESS",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_FAILED",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_IN_PROGRESS",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_FAILED",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "CREATE_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "DELETE_COMPLETE",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "DELETE_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "ROLLBACK_COMPLETE",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "ValidationError",
                matcher: "error",
                state: "failure"
            } ]
        },
        StackDeleteComplete: {
            delay: 30,
            operation: "DescribeStacks",
            maxAttempts: 120,
            description: "Wait until stack status is DELETE_COMPLETE.",
            acceptors: [ {
                argument: "Stacks[].StackStatus",
                expected: "DELETE_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                expected: "ValidationError",
                matcher: "error",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "DELETE_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "CREATE_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_IN_PROGRESS",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_COMPLETE",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_COMPLETE",
                matcher: "pathAny",
                state: "failure"
            } ]
        },
        StackUpdateComplete: {
            delay: 30,
            maxAttempts: 120,
            operation: "DescribeStacks",
            description: "Wait until stack status is UPDATE_COMPLETE.",
            acceptors: [ {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                expected: "UPDATE_FAILED",
                matcher: "pathAny",
                state: "failure",
                argument: "Stacks[].StackStatus"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "UPDATE_ROLLBACK_COMPLETE",
                matcher: "pathAny",
                state: "failure",
                argument: "Stacks[].StackStatus"
            }, {
                expected: "ValidationError",
                matcher: "error",
                state: "failure"
            } ]
        },
        StackImportComplete: {
            delay: 30,
            maxAttempts: 120,
            operation: "DescribeStacks",
            description: "Wait until stack status is IMPORT_COMPLETE.",
            acceptors: [ {
                argument: "Stacks[].StackStatus",
                expected: "IMPORT_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                expected: "ROLLBACK_COMPLETE",
                matcher: "pathAny",
                state: "failure",
                argument: "Stacks[].StackStatus"
            }, {
                expected: "ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure",
                argument: "Stacks[].StackStatus"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "IMPORT_ROLLBACK_IN_PROGRESS",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "IMPORT_ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "IMPORT_ROLLBACK_COMPLETE",
                matcher: "pathAny",
                state: "failure",
                argument: "Stacks[].StackStatus"
            }, {
                expected: "ValidationError",
                matcher: "error",
                state: "failure"
            } ]
        },
        StackRollbackComplete: {
            delay: 30,
            operation: "DescribeStacks",
            maxAttempts: 120,
            description: "Wait until stack status is UPDATE_ROLLBACK_COMPLETE.",
            acceptors: [ {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_COMPLETE",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "UPDATE_ROLLBACK_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Stacks[].StackStatus",
                expected: "DELETE_FAILED",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "ValidationError",
                matcher: "error",
                state: "failure"
            } ]
        },
        ChangeSetCreateComplete: {
            delay: 30,
            operation: "DescribeChangeSet",
            maxAttempts: 120,
            description: "Wait until change set status is CREATE_COMPLETE.",
            acceptors: [ {
                argument: "Status",
                expected: "CREATE_COMPLETE",
                matcher: "path",
                state: "success"
            }, {
                argument: "Status",
                expected: "FAILED",
                matcher: "path",
                state: "failure"
            }, {
                expected: "ValidationError",
                matcher: "error",
                state: "failure"
            } ]
        },
        TypeRegistrationComplete: {
            delay: 30,
            operation: "DescribeTypeRegistration",
            maxAttempts: 120,
            description: "Wait until type registration is COMPLETE.",
            acceptors: [ {
                argument: "ProgressStatus",
                expected: "COMPLETE",
                matcher: "path",
                state: "success"
            }, {
                argument: "ProgressStatus",
                expected: "FAILED",
                matcher: "path",
                state: "failure"
            } ]
        }
    }
};

AWS.apiLoader.services["cloudfront"] = {};

AWS.CloudFront = AWS.Service.defineService("cloudfront", [ "2016-11-25", "2017-03-25", "2017-10-30", "2018-06-18", "2018-11-05", "2019-03-26", "2020-05-31" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    98: [ function(require, module, exports) {
        var AWS = require("../core");
        require("../cloudfront/signer");
        AWS.util.update(AWS.CloudFront.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                request.addListener("extractData", AWS.util.hoistPayloadMember);
            }
        });
    }, {
        "../cloudfront/signer": 41,
        "../core": 44
    } ],
    41: [ function(require, module, exports) {
        var AWS = require("../core"), url = AWS.util.url, crypto = AWS.util.crypto.lib, base64Encode = AWS.util.base64.encode, inherit = AWS.util.inherit;
        var queryEncode = function(string) {
            var replacements = {
                "+": "-",
                "=": "_",
                "/": "~"
            };
            return string.replace(/[\+=\/]/g, function(match) {
                return replacements[match];
            });
        };
        var signPolicy = function(policy, privateKey) {
            var sign = crypto.createSign("RSA-SHA1");
            sign.write(policy);
            return queryEncode(sign.sign(privateKey, "base64"));
        };
        var signWithCannedPolicy = function(url, expires, keyPairId, privateKey) {
            var policy = JSON.stringify({
                Statement: [ {
                    Resource: url,
                    Condition: {
                        DateLessThan: {
                            "AWS:EpochTime": expires
                        }
                    }
                } ]
            });
            return {
                Expires: expires,
                "Key-Pair-Id": keyPairId,
                Signature: signPolicy(policy.toString(), privateKey)
            };
        };
        var signWithCustomPolicy = function(policy, keyPairId, privateKey) {
            policy = policy.replace(/\s/gm, "");
            return {
                Policy: queryEncode(base64Encode(policy)),
                "Key-Pair-Id": keyPairId,
                Signature: signPolicy(policy, privateKey)
            };
        };
        var determineScheme = function(url) {
            var parts = url.split("://");
            if (parts.length < 2) {
                throw new Error("Invalid URL.");
            }
            return parts[0].replace("*", "");
        };
        var getRtmpUrl = function(rtmpUrl) {
            var parsed = url.parse(rtmpUrl);
            return parsed.path.replace(/^\//, "") + (parsed.hash || "");
        };
        var getResource = function(url) {
            switch (determineScheme(url)) {
              case "http":
              case "https":
                return url;

              case "rtmp":
                return getRtmpUrl(url);

              default:
                throw new Error("Invalid URI scheme. Scheme must be one of" + " http, https, or rtmp");
            }
        };
        var handleError = function(err, callback) {
            if (!callback || typeof callback !== "function") {
                throw err;
            }
            callback(err);
        };
        var handleSuccess = function(result, callback) {
            if (!callback || typeof callback !== "function") {
                return result;
            }
            callback(null, result);
        };
        AWS.CloudFront.Signer = inherit({
            constructor: function Signer(keyPairId, privateKey) {
                if (keyPairId === void 0 || privateKey === void 0) {
                    throw new Error("A key pair ID and private key are required");
                }
                this.keyPairId = keyPairId;
                this.privateKey = privateKey;
            },
            getSignedCookie: function(options, cb) {
                var signatureHash = "policy" in options ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey) : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);
                var cookieHash = {};
                for (var key in signatureHash) {
                    if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
                        cookieHash["CloudFront-" + key] = signatureHash[key];
                    }
                }
                return handleSuccess(cookieHash, cb);
            },
            getSignedUrl: function(options, cb) {
                try {
                    var resource = getResource(options.url);
                } catch (err) {
                    return handleError(err, cb);
                }
                var parsedUrl = url.parse(options.url, true), signatureHash = Object.prototype.hasOwnProperty.call(options, "policy") ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey) : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);
                parsedUrl.search = null;
                for (var key in signatureHash) {
                    if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {
                        parsedUrl.query[key] = signatureHash[key];
                    }
                }
                try {
                    var signedUrl = determineScheme(options.url) === "rtmp" ? getRtmpUrl(url.format(parsedUrl)) : url.format(parsedUrl);
                } catch (err) {
                    return handleError(err, cb);
                }
                return handleSuccess(signedUrl, cb);
            }
        });
        module.exports = AWS.CloudFront.Signer;
    }, {
        "../core": 44
    } ]
}, {}, [ 98 ]);

AWS.apiLoader.services["cloudfront"]["2020-05-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-05-31",
        endpointPrefix: "cloudfront",
        globalEndpoint: "cloudfront.amazonaws.com",
        protocol: "rest-xml",
        serviceAbbreviation: "CloudFront",
        serviceFullName: "Amazon CloudFront",
        serviceId: "CloudFront",
        signatureVersion: "v4",
        uid: "cloudfront-2020-05-31"
    },
    operations: {
        AssociateAlias: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/distribution/{TargetDistributionId}/associate-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TargetDistributionId", "Alias" ],
                members: {
                    TargetDistributionId: {
                        location: "uri",
                        locationName: "TargetDistributionId"
                    },
                    Alias: {
                        location: "querystring",
                        locationName: "Alias"
                    }
                }
            }
        },
        CopyDistribution: {
            http: {
                requestUri: "/2020-05-31/distribution/{PrimaryDistributionId}/copy",
                responseCode: 201
            },
            input: {
                locationName: "CopyDistributionRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "PrimaryDistributionId", "CallerReference" ],
                members: {
                    PrimaryDistributionId: {
                        location: "uri",
                        locationName: "PrimaryDistributionId"
                    },
                    Staging: {
                        location: "header",
                        locationName: "Staging",
                        type: "boolean"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    },
                    CallerReference: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Distribution: {
                        shape: "S6"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "Distribution"
            }
        },
        CreateCachePolicy: {
            http: {
                requestUri: "/2020-05-31/cache-policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "CachePolicyConfig" ],
                members: {
                    CachePolicyConfig: {
                        shape: "S2n",
                        locationName: "CachePolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "CachePolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    CachePolicy: {
                        shape: "S2y"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CachePolicy"
            }
        },
        CreateCloudFrontOriginAccessIdentity: {
            http: {
                requestUri: "/2020-05-31/origin-access-identity/cloudfront",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "CloudFrontOriginAccessIdentityConfig" ],
                members: {
                    CloudFrontOriginAccessIdentityConfig: {
                        shape: "S30",
                        locationName: "CloudFrontOriginAccessIdentityConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "CloudFrontOriginAccessIdentityConfig"
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontOriginAccessIdentity: {
                        shape: "S32"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CloudFrontOriginAccessIdentity"
            }
        },
        CreateContinuousDeploymentPolicy: {
            http: {
                requestUri: "/2020-05-31/continuous-deployment-policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ContinuousDeploymentPolicyConfig" ],
                members: {
                    ContinuousDeploymentPolicyConfig: {
                        shape: "S34",
                        locationName: "ContinuousDeploymentPolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "ContinuousDeploymentPolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    ContinuousDeploymentPolicy: {
                        shape: "S3e"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ContinuousDeploymentPolicy"
            }
        },
        CreateDistribution: {
            http: {
                requestUri: "/2020-05-31/distribution",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DistributionConfig" ],
                members: {
                    DistributionConfig: {
                        shape: "Sh",
                        locationName: "DistributionConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "DistributionConfig"
            },
            output: {
                type: "structure",
                members: {
                    Distribution: {
                        shape: "S6"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "Distribution"
            }
        },
        CreateDistributionWithTags: {
            http: {
                requestUri: "/2020-05-31/distribution?WithTags",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DistributionConfigWithTags" ],
                members: {
                    DistributionConfigWithTags: {
                        locationName: "DistributionConfigWithTags",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        },
                        type: "structure",
                        required: [ "DistributionConfig", "Tags" ],
                        members: {
                            DistributionConfig: {
                                shape: "Sh"
                            },
                            Tags: {
                                shape: "S3j"
                            }
                        }
                    }
                },
                payload: "DistributionConfigWithTags"
            },
            output: {
                type: "structure",
                members: {
                    Distribution: {
                        shape: "S6"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "Distribution"
            }
        },
        CreateFieldLevelEncryptionConfig: {
            http: {
                requestUri: "/2020-05-31/field-level-encryption",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FieldLevelEncryptionConfig" ],
                members: {
                    FieldLevelEncryptionConfig: {
                        shape: "S3q",
                        locationName: "FieldLevelEncryptionConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "FieldLevelEncryptionConfig"
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryption: {
                        shape: "S41"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryption"
            }
        },
        CreateFieldLevelEncryptionProfile: {
            http: {
                requestUri: "/2020-05-31/field-level-encryption-profile",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "FieldLevelEncryptionProfileConfig" ],
                members: {
                    FieldLevelEncryptionProfileConfig: {
                        shape: "S43",
                        locationName: "FieldLevelEncryptionProfileConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "FieldLevelEncryptionProfileConfig"
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionProfile: {
                        shape: "S4a"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryptionProfile"
            }
        },
        CreateFunction: {
            http: {
                requestUri: "/2020-05-31/function",
                responseCode: 201
            },
            input: {
                locationName: "CreateFunctionRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "Name", "FunctionConfig", "FunctionCode" ],
                members: {
                    Name: {},
                    FunctionConfig: {
                        shape: "S4d"
                    },
                    FunctionCode: {
                        shape: "S4j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionSummary: {
                        shape: "S4l"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FunctionSummary"
            }
        },
        CreateInvalidation: {
            http: {
                requestUri: "/2020-05-31/distribution/{DistributionId}/invalidation",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DistributionId", "InvalidationBatch" ],
                members: {
                    DistributionId: {
                        location: "uri",
                        locationName: "DistributionId"
                    },
                    InvalidationBatch: {
                        shape: "S4p",
                        locationName: "InvalidationBatch",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "InvalidationBatch"
            },
            output: {
                type: "structure",
                members: {
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    Invalidation: {
                        shape: "S4t"
                    }
                },
                payload: "Invalidation"
            }
        },
        CreateKeyGroup: {
            http: {
                requestUri: "/2020-05-31/key-group",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "KeyGroupConfig" ],
                members: {
                    KeyGroupConfig: {
                        shape: "S4v",
                        locationName: "KeyGroupConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "KeyGroupConfig"
            },
            output: {
                type: "structure",
                members: {
                    KeyGroup: {
                        shape: "S4y"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "KeyGroup"
            }
        },
        CreateKeyValueStore: {
            http: {
                requestUri: "/2020-05-31/key-value-store/",
                responseCode: 201
            },
            input: {
                locationName: "CreateKeyValueStoreRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Comment: {},
                    ImportSource: {
                        type: "structure",
                        required: [ "SourceType", "SourceARN" ],
                        members: {
                            SourceType: {},
                            SourceARN: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyValueStore: {
                        shape: "S55"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    }
                },
                payload: "KeyValueStore"
            }
        },
        CreateMonitoringSubscription: {
            http: {
                requestUri: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription/"
            },
            input: {
                type: "structure",
                required: [ "MonitoringSubscription", "DistributionId" ],
                members: {
                    DistributionId: {
                        location: "uri",
                        locationName: "DistributionId"
                    },
                    MonitoringSubscription: {
                        shape: "S57",
                        locationName: "MonitoringSubscription",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "MonitoringSubscription"
            },
            output: {
                type: "structure",
                members: {
                    MonitoringSubscription: {
                        shape: "S57"
                    }
                },
                payload: "MonitoringSubscription"
            }
        },
        CreateOriginAccessControl: {
            http: {
                requestUri: "/2020-05-31/origin-access-control",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "OriginAccessControlConfig" ],
                members: {
                    OriginAccessControlConfig: {
                        shape: "S5c",
                        locationName: "OriginAccessControlConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "OriginAccessControlConfig"
            },
            output: {
                type: "structure",
                members: {
                    OriginAccessControl: {
                        shape: "S5h"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginAccessControl"
            }
        },
        CreateOriginRequestPolicy: {
            http: {
                requestUri: "/2020-05-31/origin-request-policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "OriginRequestPolicyConfig" ],
                members: {
                    OriginRequestPolicyConfig: {
                        shape: "S5j",
                        locationName: "OriginRequestPolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "OriginRequestPolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    OriginRequestPolicy: {
                        shape: "S5r"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginRequestPolicy"
            }
        },
        CreatePublicKey: {
            http: {
                requestUri: "/2020-05-31/public-key",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "PublicKeyConfig" ],
                members: {
                    PublicKeyConfig: {
                        shape: "S5t",
                        locationName: "PublicKeyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "PublicKeyConfig"
            },
            output: {
                type: "structure",
                members: {
                    PublicKey: {
                        shape: "S5v"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "PublicKey"
            }
        },
        CreateRealtimeLogConfig: {
            http: {
                requestUri: "/2020-05-31/realtime-log-config",
                responseCode: 201
            },
            input: {
                locationName: "CreateRealtimeLogConfigRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "EndPoints", "Fields", "Name", "SamplingRate" ],
                members: {
                    EndPoints: {
                        shape: "S5x"
                    },
                    Fields: {
                        shape: "S60"
                    },
                    Name: {},
                    SamplingRate: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RealtimeLogConfig: {
                        shape: "S62"
                    }
                }
            }
        },
        CreateResponseHeadersPolicy: {
            http: {
                requestUri: "/2020-05-31/response-headers-policy",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ResponseHeadersPolicyConfig" ],
                members: {
                    ResponseHeadersPolicyConfig: {
                        shape: "S64",
                        locationName: "ResponseHeadersPolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "ResponseHeadersPolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    ResponseHeadersPolicy: {
                        shape: "S6x"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ResponseHeadersPolicy"
            }
        },
        CreateStreamingDistribution: {
            http: {
                requestUri: "/2020-05-31/streaming-distribution",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "StreamingDistributionConfig" ],
                members: {
                    StreamingDistributionConfig: {
                        shape: "S6z",
                        locationName: "StreamingDistributionConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "StreamingDistributionConfig"
            },
            output: {
                type: "structure",
                members: {
                    StreamingDistribution: {
                        shape: "S73"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "StreamingDistribution"
            }
        },
        CreateStreamingDistributionWithTags: {
            http: {
                requestUri: "/2020-05-31/streaming-distribution?WithTags",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "StreamingDistributionConfigWithTags" ],
                members: {
                    StreamingDistributionConfigWithTags: {
                        locationName: "StreamingDistributionConfigWithTags",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        },
                        type: "structure",
                        required: [ "StreamingDistributionConfig", "Tags" ],
                        members: {
                            StreamingDistributionConfig: {
                                shape: "S6z"
                            },
                            Tags: {
                                shape: "S3j"
                            }
                        }
                    }
                },
                payload: "StreamingDistributionConfigWithTags"
            },
            output: {
                type: "structure",
                members: {
                    StreamingDistribution: {
                        shape: "S73"
                    },
                    Location: {
                        location: "header",
                        locationName: "Location"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "StreamingDistribution"
            }
        },
        DeleteCachePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/cache-policy/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteCloudFrontOriginAccessIdentity: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/origin-access-identity/cloudfront/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteContinuousDeploymentPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/continuous-deployment-policy/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteDistribution: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/distribution/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteFieldLevelEncryptionConfig: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/field-level-encryption/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteFieldLevelEncryptionProfile: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/field-level-encryption-profile/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteFunction: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/function/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "IfMatch", "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteKeyGroup: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/key-group/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteKeyValueStore: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/key-value-store/{Name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "IfMatch", "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            },
            idempotent: true
        },
        DeleteMonitoringSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription/"
            },
            input: {
                type: "structure",
                required: [ "DistributionId" ],
                members: {
                    DistributionId: {
                        location: "uri",
                        locationName: "DistributionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOriginAccessControl: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/origin-access-control/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteOriginRequestPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/origin-request-policy/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeletePublicKey: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/public-key/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteRealtimeLogConfig: {
            http: {
                requestUri: "/2020-05-31/delete-realtime-log-config/",
                responseCode: 204
            },
            input: {
                locationName: "DeleteRealtimeLogConfigRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                members: {
                    Name: {},
                    ARN: {}
                }
            }
        },
        DeleteResponseHeadersPolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/response-headers-policy/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DeleteStreamingDistribution: {
            http: {
                method: "DELETE",
                requestUri: "/2020-05-31/streaming-distribution/{Id}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            }
        },
        DescribeFunction: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/function/{Name}/describe"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Stage: {
                        location: "querystring",
                        locationName: "Stage"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionSummary: {
                        shape: "S4l"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FunctionSummary"
            }
        },
        DescribeKeyValueStore: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/key-value-store/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyValueStore: {
                        shape: "S55"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "KeyValueStore"
            }
        },
        GetCachePolicy: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/cache-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CachePolicy: {
                        shape: "S2y"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CachePolicy"
            }
        },
        GetCachePolicyConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/cache-policy/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CachePolicyConfig: {
                        shape: "S2n"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CachePolicyConfig"
            }
        },
        GetCloudFrontOriginAccessIdentity: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-access-identity/cloudfront/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontOriginAccessIdentity: {
                        shape: "S32"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CloudFrontOriginAccessIdentity"
            }
        },
        GetCloudFrontOriginAccessIdentityConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-access-identity/cloudfront/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontOriginAccessIdentityConfig: {
                        shape: "S30"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CloudFrontOriginAccessIdentityConfig"
            }
        },
        GetContinuousDeploymentPolicy: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/continuous-deployment-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuousDeploymentPolicy: {
                        shape: "S3e"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ContinuousDeploymentPolicy"
            }
        },
        GetContinuousDeploymentPolicyConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/continuous-deployment-policy/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuousDeploymentPolicyConfig: {
                        shape: "S34"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ContinuousDeploymentPolicyConfig"
            }
        },
        GetDistribution: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distribution/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Distribution: {
                        shape: "S6"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "Distribution"
            }
        },
        GetDistributionConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distribution/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionConfig: {
                        shape: "Sh"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "DistributionConfig"
            }
        },
        GetFieldLevelEncryption: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/field-level-encryption/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryption: {
                        shape: "S41"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryption"
            }
        },
        GetFieldLevelEncryptionConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/field-level-encryption/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionConfig: {
                        shape: "S3q"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryptionConfig"
            }
        },
        GetFieldLevelEncryptionProfile: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/field-level-encryption-profile/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionProfile: {
                        shape: "S4a"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryptionProfile"
            }
        },
        GetFieldLevelEncryptionProfileConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/field-level-encryption-profile/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionProfileConfig: {
                        shape: "S43"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryptionProfileConfig"
            }
        },
        GetFunction: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/function/{Name}"
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Stage: {
                        location: "querystring",
                        locationName: "Stage"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionCode: {
                        shape: "S4j"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "FunctionCode"
            }
        },
        GetInvalidation: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distribution/{DistributionId}/invalidation/{Id}"
            },
            input: {
                type: "structure",
                required: [ "DistributionId", "Id" ],
                members: {
                    DistributionId: {
                        location: "uri",
                        locationName: "DistributionId"
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invalidation: {
                        shape: "S4t"
                    }
                },
                payload: "Invalidation"
            }
        },
        GetKeyGroup: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/key-group/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyGroup: {
                        shape: "S4y"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "KeyGroup"
            }
        },
        GetKeyGroupConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/key-group/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyGroupConfig: {
                        shape: "S4v"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "KeyGroupConfig"
            }
        },
        GetMonitoringSubscription: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distributions/{DistributionId}/monitoring-subscription/"
            },
            input: {
                type: "structure",
                required: [ "DistributionId" ],
                members: {
                    DistributionId: {
                        location: "uri",
                        locationName: "DistributionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonitoringSubscription: {
                        shape: "S57"
                    }
                },
                payload: "MonitoringSubscription"
            }
        },
        GetOriginAccessControl: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-access-control/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginAccessControl: {
                        shape: "S5h"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginAccessControl"
            }
        },
        GetOriginAccessControlConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-access-control/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginAccessControlConfig: {
                        shape: "S5c"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginAccessControlConfig"
            }
        },
        GetOriginRequestPolicy: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-request-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginRequestPolicy: {
                        shape: "S5r"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginRequestPolicy"
            }
        },
        GetOriginRequestPolicyConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-request-policy/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginRequestPolicyConfig: {
                        shape: "S5j"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginRequestPolicyConfig"
            }
        },
        GetPublicKey: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/public-key/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicKey: {
                        shape: "S5v"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "PublicKey"
            }
        },
        GetPublicKeyConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/public-key/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicKeyConfig: {
                        shape: "S5t"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "PublicKeyConfig"
            }
        },
        GetRealtimeLogConfig: {
            http: {
                requestUri: "/2020-05-31/get-realtime-log-config/"
            },
            input: {
                locationName: "GetRealtimeLogConfigRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                members: {
                    Name: {},
                    ARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RealtimeLogConfig: {
                        shape: "S62"
                    }
                }
            }
        },
        GetResponseHeadersPolicy: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/response-headers-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResponseHeadersPolicy: {
                        shape: "S6x"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ResponseHeadersPolicy"
            }
        },
        GetResponseHeadersPolicyConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/response-headers-policy/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResponseHeadersPolicyConfig: {
                        shape: "S64"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ResponseHeadersPolicyConfig"
            }
        },
        GetStreamingDistribution: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/streaming-distribution/{Id}"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingDistribution: {
                        shape: "S73"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "StreamingDistribution"
            }
        },
        GetStreamingDistributionConfig: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/streaming-distribution/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingDistributionConfig: {
                        shape: "S6z"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "StreamingDistributionConfig"
            }
        },
        ListCachePolicies: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/cache-policy"
            },
            input: {
                type: "structure",
                members: {
                    Type: {
                        location: "querystring",
                        locationName: "Type"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CachePolicyList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "CachePolicySummary",
                                    type: "structure",
                                    required: [ "Type", "CachePolicy" ],
                                    members: {
                                        Type: {},
                                        CachePolicy: {
                                            shape: "S2y"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "CachePolicyList"
            }
        },
        ListCloudFrontOriginAccessIdentities: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-access-identity/cloudfront"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontOriginAccessIdentityList: {
                        type: "structure",
                        required: [ "Marker", "MaxItems", "IsTruncated", "Quantity" ],
                        members: {
                            Marker: {},
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            IsTruncated: {
                                type: "boolean"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "CloudFrontOriginAccessIdentitySummary",
                                    type: "structure",
                                    required: [ "Id", "S3CanonicalUserId", "Comment" ],
                                    members: {
                                        Id: {},
                                        S3CanonicalUserId: {},
                                        Comment: {}
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "CloudFrontOriginAccessIdentityList"
            }
        },
        ListConflictingAliases: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/conflicting-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DistributionId", "Alias" ],
                members: {
                    DistributionId: {
                        location: "querystring",
                        locationName: "DistributionId"
                    },
                    Alias: {
                        location: "querystring",
                        locationName: "Alias"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConflictingAliasesList: {
                        type: "structure",
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "ConflictingAlias",
                                    type: "structure",
                                    members: {
                                        Alias: {},
                                        DistributionId: {},
                                        AccountId: {}
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "ConflictingAliasesList"
            }
        },
        ListContinuousDeploymentPolicies: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/continuous-deployment-policy"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuousDeploymentPolicyList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "ContinuousDeploymentPolicySummary",
                                    type: "structure",
                                    required: [ "ContinuousDeploymentPolicy" ],
                                    members: {
                                        ContinuousDeploymentPolicy: {
                                            shape: "S3e"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "ContinuousDeploymentPolicyList"
            }
        },
        ListDistributions: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distribution"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionList: {
                        shape: "Sa2"
                    }
                },
                payload: "DistributionList"
            }
        },
        ListDistributionsByCachePolicyId: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distributionsByCachePolicyId/{CachePolicyId}"
            },
            input: {
                type: "structure",
                required: [ "CachePolicyId" ],
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    CachePolicyId: {
                        location: "uri",
                        locationName: "CachePolicyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionIdList: {
                        shape: "Sa7"
                    }
                },
                payload: "DistributionIdList"
            }
        },
        ListDistributionsByKeyGroup: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distributionsByKeyGroupId/{KeyGroupId}"
            },
            input: {
                type: "structure",
                required: [ "KeyGroupId" ],
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    KeyGroupId: {
                        location: "uri",
                        locationName: "KeyGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionIdList: {
                        shape: "Sa7"
                    }
                },
                payload: "DistributionIdList"
            }
        },
        ListDistributionsByOriginRequestPolicyId: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distributionsByOriginRequestPolicyId/{OriginRequestPolicyId}"
            },
            input: {
                type: "structure",
                required: [ "OriginRequestPolicyId" ],
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    OriginRequestPolicyId: {
                        location: "uri",
                        locationName: "OriginRequestPolicyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionIdList: {
                        shape: "Sa7"
                    }
                },
                payload: "DistributionIdList"
            }
        },
        ListDistributionsByRealtimeLogConfig: {
            http: {
                requestUri: "/2020-05-31/distributionsByRealtimeLogConfig/"
            },
            input: {
                locationName: "ListDistributionsByRealtimeLogConfigRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                members: {
                    Marker: {},
                    MaxItems: {},
                    RealtimeLogConfigName: {},
                    RealtimeLogConfigArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionList: {
                        shape: "Sa2"
                    }
                },
                payload: "DistributionList"
            }
        },
        ListDistributionsByResponseHeadersPolicyId: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distributionsByResponseHeadersPolicyId/{ResponseHeadersPolicyId}"
            },
            input: {
                type: "structure",
                required: [ "ResponseHeadersPolicyId" ],
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    ResponseHeadersPolicyId: {
                        location: "uri",
                        locationName: "ResponseHeadersPolicyId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionIdList: {
                        shape: "Sa7"
                    }
                },
                payload: "DistributionIdList"
            }
        },
        ListDistributionsByWebACLId: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distributionsByWebACLId/{WebACLId}"
            },
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    WebACLId: {
                        location: "uri",
                        locationName: "WebACLId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DistributionList: {
                        shape: "Sa2"
                    }
                },
                payload: "DistributionList"
            }
        },
        ListFieldLevelEncryptionConfigs: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/field-level-encryption"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "FieldLevelEncryptionSummary",
                                    type: "structure",
                                    required: [ "Id", "LastModifiedTime" ],
                                    members: {
                                        Id: {},
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        Comment: {},
                                        QueryArgProfileConfig: {
                                            shape: "S3r"
                                        },
                                        ContentTypeProfileConfig: {
                                            shape: "S3v"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "FieldLevelEncryptionList"
            }
        },
        ListFieldLevelEncryptionProfiles: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/field-level-encryption-profile"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionProfileList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "FieldLevelEncryptionProfileSummary",
                                    type: "structure",
                                    required: [ "Id", "LastModifiedTime", "Name", "EncryptionEntities" ],
                                    members: {
                                        Id: {},
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        Name: {},
                                        EncryptionEntities: {
                                            shape: "S44"
                                        },
                                        Comment: {}
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "FieldLevelEncryptionProfileList"
            }
        },
        ListFunctions: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/function"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    Stage: {
                        location: "querystring",
                        locationName: "Stage"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    shape: "S4l",
                                    locationName: "FunctionSummary"
                                }
                            }
                        }
                    }
                },
                payload: "FunctionList"
            }
        },
        ListInvalidations: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/distribution/{DistributionId}/invalidation"
            },
            input: {
                type: "structure",
                required: [ "DistributionId" ],
                members: {
                    DistributionId: {
                        location: "uri",
                        locationName: "DistributionId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InvalidationList: {
                        type: "structure",
                        required: [ "Marker", "MaxItems", "IsTruncated", "Quantity" ],
                        members: {
                            Marker: {},
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            IsTruncated: {
                                type: "boolean"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "InvalidationSummary",
                                    type: "structure",
                                    required: [ "Id", "CreateTime", "Status" ],
                                    members: {
                                        Id: {},
                                        CreateTime: {
                                            type: "timestamp"
                                        },
                                        Status: {}
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "InvalidationList"
            }
        },
        ListKeyGroups: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/key-group"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyGroupList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "KeyGroupSummary",
                                    type: "structure",
                                    required: [ "KeyGroup" ],
                                    members: {
                                        KeyGroup: {
                                            shape: "S4y"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "KeyGroupList"
            }
        },
        ListKeyValueStores: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/key-value-store"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    Status: {
                        location: "querystring",
                        locationName: "Status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyValueStoreList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    shape: "S55",
                                    locationName: "KeyValueStore"
                                }
                            }
                        }
                    }
                },
                payload: "KeyValueStoreList"
            }
        },
        ListOriginAccessControls: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-access-control"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginAccessControlList: {
                        type: "structure",
                        required: [ "Marker", "MaxItems", "IsTruncated", "Quantity" ],
                        members: {
                            Marker: {},
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            IsTruncated: {
                                type: "boolean"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "OriginAccessControlSummary",
                                    type: "structure",
                                    required: [ "Id", "Description", "Name", "SigningProtocol", "SigningBehavior", "OriginAccessControlOriginType" ],
                                    members: {
                                        Id: {},
                                        Description: {},
                                        Name: {},
                                        SigningProtocol: {},
                                        SigningBehavior: {},
                                        OriginAccessControlOriginType: {}
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "OriginAccessControlList"
            }
        },
        ListOriginRequestPolicies: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/origin-request-policy"
            },
            input: {
                type: "structure",
                members: {
                    Type: {
                        location: "querystring",
                        locationName: "Type"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginRequestPolicyList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "OriginRequestPolicySummary",
                                    type: "structure",
                                    required: [ "Type", "OriginRequestPolicy" ],
                                    members: {
                                        Type: {},
                                        OriginRequestPolicy: {
                                            shape: "S5r"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "OriginRequestPolicyList"
            }
        },
        ListPublicKeys: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/public-key"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicKeyList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "PublicKeySummary",
                                    type: "structure",
                                    required: [ "Id", "Name", "CreatedTime", "EncodedKey" ],
                                    members: {
                                        Id: {},
                                        Name: {},
                                        CreatedTime: {
                                            type: "timestamp"
                                        },
                                        EncodedKey: {},
                                        Comment: {}
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "PublicKeyList"
            }
        },
        ListRealtimeLogConfigs: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/realtime-log-config"
            },
            input: {
                type: "structure",
                members: {
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RealtimeLogConfigs: {
                        type: "structure",
                        required: [ "MaxItems", "IsTruncated", "Marker" ],
                        members: {
                            MaxItems: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    shape: "S62"
                                }
                            },
                            IsTruncated: {
                                type: "boolean"
                            },
                            Marker: {},
                            NextMarker: {}
                        }
                    }
                },
                payload: "RealtimeLogConfigs"
            }
        },
        ListResponseHeadersPolicies: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/response-headers-policy"
            },
            input: {
                type: "structure",
                members: {
                    Type: {
                        location: "querystring",
                        locationName: "Type"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResponseHeadersPolicyList: {
                        type: "structure",
                        required: [ "MaxItems", "Quantity" ],
                        members: {
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "ResponseHeadersPolicySummary",
                                    type: "structure",
                                    required: [ "Type", "ResponseHeadersPolicy" ],
                                    members: {
                                        Type: {},
                                        ResponseHeadersPolicy: {
                                            shape: "S6x"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "ResponseHeadersPolicyList"
            }
        },
        ListStreamingDistributions: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/streaming-distribution"
            },
            input: {
                type: "structure",
                members: {
                    Marker: {
                        location: "querystring",
                        locationName: "Marker"
                    },
                    MaxItems: {
                        location: "querystring",
                        locationName: "MaxItems"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamingDistributionList: {
                        type: "structure",
                        required: [ "Marker", "MaxItems", "IsTruncated", "Quantity" ],
                        members: {
                            Marker: {},
                            NextMarker: {},
                            MaxItems: {
                                type: "integer"
                            },
                            IsTruncated: {
                                type: "boolean"
                            },
                            Quantity: {
                                type: "integer"
                            },
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "StreamingDistributionSummary",
                                    type: "structure",
                                    required: [ "Id", "ARN", "Status", "LastModifiedTime", "DomainName", "S3Origin", "Aliases", "TrustedSigners", "Comment", "PriceClass", "Enabled" ],
                                    members: {
                                        Id: {},
                                        ARN: {},
                                        Status: {},
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        DomainName: {},
                                        S3Origin: {
                                            shape: "S70"
                                        },
                                        Aliases: {
                                            shape: "Si"
                                        },
                                        TrustedSigners: {
                                            shape: "S19"
                                        },
                                        Comment: {},
                                        PriceClass: {},
                                        Enabled: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                payload: "StreamingDistributionList"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2020-05-31/tagging"
            },
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {
                        location: "querystring",
                        locationName: "Resource"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    Tags: {
                        shape: "S3j"
                    }
                },
                payload: "Tags"
            }
        },
        PublishFunction: {
            http: {
                requestUri: "/2020-05-31/function/{Name}/publish"
            },
            input: {
                type: "structure",
                required: [ "Name", "IfMatch" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionSummary: {
                        shape: "S4l"
                    }
                },
                payload: "FunctionSummary"
            }
        },
        TagResource: {
            http: {
                requestUri: "/2020-05-31/tagging?Operation=Tag",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Resource", "Tags" ],
                members: {
                    Resource: {
                        location: "querystring",
                        locationName: "Resource"
                    },
                    Tags: {
                        shape: "S3j",
                        locationName: "Tags",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    }
                },
                payload: "Tags"
            }
        },
        TestFunction: {
            http: {
                requestUri: "/2020-05-31/function/{Name}/test"
            },
            input: {
                locationName: "TestFunctionRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "Name", "IfMatch", "EventObject" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    },
                    Stage: {},
                    EventObject: {
                        type: "blob",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TestResult: {
                        type: "structure",
                        members: {
                            FunctionSummary: {
                                shape: "S4l"
                            },
                            ComputeUtilization: {},
                            FunctionExecutionLogs: {
                                type: "list",
                                member: {},
                                sensitive: true
                            },
                            FunctionErrorMessage: {
                                shape: "Sq"
                            },
                            FunctionOutput: {
                                shape: "Sq"
                            }
                        }
                    }
                },
                payload: "TestResult"
            }
        },
        UntagResource: {
            http: {
                requestUri: "/2020-05-31/tagging?Operation=Untag",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Resource", "TagKeys" ],
                members: {
                    Resource: {
                        location: "querystring",
                        locationName: "Resource"
                    },
                    TagKeys: {
                        locationName: "TagKeys",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        },
                        type: "structure",
                        members: {
                            Items: {
                                type: "list",
                                member: {
                                    locationName: "Key"
                                }
                            }
                        }
                    }
                },
                payload: "TagKeys"
            }
        },
        UpdateCachePolicy: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/cache-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "CachePolicyConfig", "Id" ],
                members: {
                    CachePolicyConfig: {
                        shape: "S2n",
                        locationName: "CachePolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "CachePolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    CachePolicy: {
                        shape: "S2y"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CachePolicy"
            }
        },
        UpdateCloudFrontOriginAccessIdentity: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/origin-access-identity/cloudfront/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "CloudFrontOriginAccessIdentityConfig", "Id" ],
                members: {
                    CloudFrontOriginAccessIdentityConfig: {
                        shape: "S30",
                        locationName: "CloudFrontOriginAccessIdentityConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "CloudFrontOriginAccessIdentityConfig"
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontOriginAccessIdentity: {
                        shape: "S32"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "CloudFrontOriginAccessIdentity"
            }
        },
        UpdateContinuousDeploymentPolicy: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/continuous-deployment-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "ContinuousDeploymentPolicyConfig", "Id" ],
                members: {
                    ContinuousDeploymentPolicyConfig: {
                        shape: "S34",
                        locationName: "ContinuousDeploymentPolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "ContinuousDeploymentPolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    ContinuousDeploymentPolicy: {
                        shape: "S3e"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ContinuousDeploymentPolicy"
            }
        },
        UpdateDistribution: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/distribution/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "DistributionConfig", "Id" ],
                members: {
                    DistributionConfig: {
                        shape: "Sh",
                        locationName: "DistributionConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "DistributionConfig"
            },
            output: {
                type: "structure",
                members: {
                    Distribution: {
                        shape: "S6"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "Distribution"
            }
        },
        UpdateDistributionWithStagingConfig: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/distribution/{Id}/promote-staging-config"
            },
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    StagingDistributionId: {
                        location: "querystring",
                        locationName: "StagingDistributionId"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Distribution: {
                        shape: "S6"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "Distribution"
            }
        },
        UpdateFieldLevelEncryptionConfig: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/field-level-encryption/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "FieldLevelEncryptionConfig", "Id" ],
                members: {
                    FieldLevelEncryptionConfig: {
                        shape: "S3q",
                        locationName: "FieldLevelEncryptionConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "FieldLevelEncryptionConfig"
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryption: {
                        shape: "S41"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryption"
            }
        },
        UpdateFieldLevelEncryptionProfile: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/field-level-encryption-profile/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "FieldLevelEncryptionProfileConfig", "Id" ],
                members: {
                    FieldLevelEncryptionProfileConfig: {
                        shape: "S43",
                        locationName: "FieldLevelEncryptionProfileConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "FieldLevelEncryptionProfileConfig"
            },
            output: {
                type: "structure",
                members: {
                    FieldLevelEncryptionProfile: {
                        shape: "S4a"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "FieldLevelEncryptionProfile"
            }
        },
        UpdateFunction: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/function/{Name}"
            },
            input: {
                locationName: "UpdateFunctionRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "IfMatch", "FunctionConfig", "FunctionCode", "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    },
                    FunctionConfig: {
                        shape: "S4d"
                    },
                    FunctionCode: {
                        shape: "S4j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FunctionSummary: {
                        shape: "S4l"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETtag"
                    }
                },
                payload: "FunctionSummary"
            }
        },
        UpdateKeyGroup: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/key-group/{Id}"
            },
            input: {
                type: "structure",
                required: [ "KeyGroupConfig", "Id" ],
                members: {
                    KeyGroupConfig: {
                        shape: "S4v",
                        locationName: "KeyGroupConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "KeyGroupConfig"
            },
            output: {
                type: "structure",
                members: {
                    KeyGroup: {
                        shape: "S4y"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "KeyGroup"
            }
        },
        UpdateKeyValueStore: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/key-value-store/{Name}"
            },
            input: {
                locationName: "UpdateKeyValueStoreRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                required: [ "Name", "Comment", "IfMatch" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Comment: {},
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyValueStore: {
                        shape: "S55"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "KeyValueStore"
            },
            idempotent: true
        },
        UpdateOriginAccessControl: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/origin-access-control/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "OriginAccessControlConfig", "Id" ],
                members: {
                    OriginAccessControlConfig: {
                        shape: "S5c",
                        locationName: "OriginAccessControlConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "OriginAccessControlConfig"
            },
            output: {
                type: "structure",
                members: {
                    OriginAccessControl: {
                        shape: "S5h"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginAccessControl"
            }
        },
        UpdateOriginRequestPolicy: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/origin-request-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "OriginRequestPolicyConfig", "Id" ],
                members: {
                    OriginRequestPolicyConfig: {
                        shape: "S5j",
                        locationName: "OriginRequestPolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "OriginRequestPolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    OriginRequestPolicy: {
                        shape: "S5r"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "OriginRequestPolicy"
            }
        },
        UpdatePublicKey: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/public-key/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "PublicKeyConfig", "Id" ],
                members: {
                    PublicKeyConfig: {
                        shape: "S5t",
                        locationName: "PublicKeyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "PublicKeyConfig"
            },
            output: {
                type: "structure",
                members: {
                    PublicKey: {
                        shape: "S5v"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "PublicKey"
            }
        },
        UpdateRealtimeLogConfig: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/realtime-log-config/"
            },
            input: {
                locationName: "UpdateRealtimeLogConfigRequest",
                xmlNamespace: {
                    uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                },
                type: "structure",
                members: {
                    EndPoints: {
                        shape: "S5x"
                    },
                    Fields: {
                        shape: "S60"
                    },
                    Name: {},
                    ARN: {},
                    SamplingRate: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RealtimeLogConfig: {
                        shape: "S62"
                    }
                }
            }
        },
        UpdateResponseHeadersPolicy: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/response-headers-policy/{Id}"
            },
            input: {
                type: "structure",
                required: [ "ResponseHeadersPolicyConfig", "Id" ],
                members: {
                    ResponseHeadersPolicyConfig: {
                        shape: "S64",
                        locationName: "ResponseHeadersPolicyConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "ResponseHeadersPolicyConfig"
            },
            output: {
                type: "structure",
                members: {
                    ResponseHeadersPolicy: {
                        shape: "S6x"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "ResponseHeadersPolicy"
            }
        },
        UpdateStreamingDistribution: {
            http: {
                method: "PUT",
                requestUri: "/2020-05-31/streaming-distribution/{Id}/config"
            },
            input: {
                type: "structure",
                required: [ "StreamingDistributionConfig", "Id" ],
                members: {
                    StreamingDistributionConfig: {
                        shape: "S6z",
                        locationName: "StreamingDistributionConfig",
                        xmlNamespace: {
                            uri: "http://cloudfront.amazonaws.com/doc/2020-05-31/"
                        }
                    },
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    IfMatch: {
                        location: "header",
                        locationName: "If-Match"
                    }
                },
                payload: "StreamingDistributionConfig"
            },
            output: {
                type: "structure",
                members: {
                    StreamingDistribution: {
                        shape: "S73"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    }
                },
                payload: "StreamingDistribution"
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            required: [ "Id", "ARN", "Status", "LastModifiedTime", "InProgressInvalidationBatches", "DomainName", "DistributionConfig" ],
            members: {
                Id: {},
                ARN: {},
                Status: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                InProgressInvalidationBatches: {
                    type: "integer"
                },
                DomainName: {},
                ActiveTrustedSigners: {
                    shape: "S9"
                },
                ActiveTrustedKeyGroups: {
                    type: "structure",
                    required: [ "Enabled", "Quantity" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "KeyGroup",
                                type: "structure",
                                members: {
                                    KeyGroupId: {},
                                    KeyPairIds: {
                                        shape: "Sc"
                                    }
                                }
                            }
                        }
                    }
                },
                DistributionConfig: {
                    shape: "Sh"
                },
                AliasICPRecordals: {
                    shape: "S2j"
                }
            }
        },
        S9: {
            type: "structure",
            required: [ "Enabled", "Quantity" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "Signer",
                        type: "structure",
                        members: {
                            AwsAccountNumber: {},
                            KeyPairIds: {
                                shape: "Sc"
                            }
                        }
                    }
                }
            }
        },
        Sc: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "KeyPairId"
                    }
                }
            }
        },
        Sh: {
            type: "structure",
            required: [ "CallerReference", "Origins", "DefaultCacheBehavior", "Comment", "Enabled" ],
            members: {
                CallerReference: {},
                Aliases: {
                    shape: "Si"
                },
                DefaultRootObject: {},
                Origins: {
                    shape: "Sk"
                },
                OriginGroups: {
                    shape: "Sz"
                },
                DefaultCacheBehavior: {
                    shape: "S18"
                },
                CacheBehaviors: {
                    shape: "S21"
                },
                CustomErrorResponses: {
                    shape: "S24"
                },
                Comment: {
                    type: "string",
                    sensitive: true
                },
                Logging: {
                    type: "structure",
                    required: [ "Enabled", "IncludeCookies", "Bucket", "Prefix" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        IncludeCookies: {
                            type: "boolean"
                        },
                        Bucket: {},
                        Prefix: {}
                    }
                },
                PriceClass: {},
                Enabled: {
                    type: "boolean"
                },
                ViewerCertificate: {
                    shape: "S2a"
                },
                Restrictions: {
                    shape: "S2e"
                },
                WebACLId: {},
                HttpVersion: {},
                IsIPV6Enabled: {
                    type: "boolean"
                },
                ContinuousDeploymentPolicyId: {},
                Staging: {
                    type: "boolean"
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "CNAME"
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            required: [ "Quantity", "Items" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "Origin",
                        type: "structure",
                        required: [ "Id", "DomainName" ],
                        members: {
                            Id: {},
                            DomainName: {},
                            OriginPath: {},
                            CustomHeaders: {
                                type: "structure",
                                required: [ "Quantity" ],
                                members: {
                                    Quantity: {
                                        type: "integer"
                                    },
                                    Items: {
                                        type: "list",
                                        member: {
                                            locationName: "OriginCustomHeader",
                                            type: "structure",
                                            required: [ "HeaderName", "HeaderValue" ],
                                            members: {
                                                HeaderName: {},
                                                HeaderValue: {
                                                    shape: "Sq"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            S3OriginConfig: {
                                type: "structure",
                                required: [ "OriginAccessIdentity" ],
                                members: {
                                    OriginAccessIdentity: {}
                                }
                            },
                            CustomOriginConfig: {
                                type: "structure",
                                required: [ "HTTPPort", "HTTPSPort", "OriginProtocolPolicy" ],
                                members: {
                                    HTTPPort: {
                                        type: "integer"
                                    },
                                    HTTPSPort: {
                                        type: "integer"
                                    },
                                    OriginProtocolPolicy: {},
                                    OriginSslProtocols: {
                                        type: "structure",
                                        required: [ "Quantity", "Items" ],
                                        members: {
                                            Quantity: {
                                                type: "integer"
                                            },
                                            Items: {
                                                type: "list",
                                                member: {
                                                    locationName: "SslProtocol"
                                                }
                                            }
                                        }
                                    },
                                    OriginReadTimeout: {
                                        type: "integer"
                                    },
                                    OriginKeepaliveTimeout: {
                                        type: "integer"
                                    }
                                }
                            },
                            ConnectionAttempts: {
                                type: "integer"
                            },
                            ConnectionTimeout: {
                                type: "integer"
                            },
                            OriginShield: {
                                type: "structure",
                                required: [ "Enabled" ],
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    },
                                    OriginShieldRegion: {}
                                }
                            },
                            OriginAccessControlId: {}
                        }
                    }
                }
            }
        },
        Sq: {
            type: "string",
            sensitive: true
        },
        Sz: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "OriginGroup",
                        type: "structure",
                        required: [ "Id", "FailoverCriteria", "Members" ],
                        members: {
                            Id: {},
                            FailoverCriteria: {
                                type: "structure",
                                required: [ "StatusCodes" ],
                                members: {
                                    StatusCodes: {
                                        type: "structure",
                                        required: [ "Quantity", "Items" ],
                                        members: {
                                            Quantity: {
                                                type: "integer"
                                            },
                                            Items: {
                                                type: "list",
                                                member: {
                                                    locationName: "StatusCode",
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            Members: {
                                type: "structure",
                                required: [ "Quantity", "Items" ],
                                members: {
                                    Quantity: {
                                        type: "integer"
                                    },
                                    Items: {
                                        type: "list",
                                        member: {
                                            locationName: "OriginGroupMember",
                                            type: "structure",
                                            required: [ "OriginId" ],
                                            members: {
                                                OriginId: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S18: {
            type: "structure",
            required: [ "TargetOriginId", "ViewerProtocolPolicy" ],
            members: {
                TargetOriginId: {},
                TrustedSigners: {
                    shape: "S19"
                },
                TrustedKeyGroups: {
                    shape: "S1b"
                },
                ViewerProtocolPolicy: {},
                AllowedMethods: {
                    shape: "S1e"
                },
                SmoothStreaming: {
                    type: "boolean"
                },
                Compress: {
                    type: "boolean"
                },
                LambdaFunctionAssociations: {
                    shape: "S1i"
                },
                FunctionAssociations: {
                    shape: "S1n"
                },
                FieldLevelEncryptionId: {},
                RealtimeLogConfigArn: {},
                CachePolicyId: {},
                OriginRequestPolicyId: {},
                ResponseHeadersPolicyId: {},
                ForwardedValues: {
                    shape: "S1r",
                    deprecated: true
                },
                MinTTL: {
                    deprecated: true,
                    type: "long"
                },
                DefaultTTL: {
                    deprecated: true,
                    type: "long"
                },
                MaxTTL: {
                    deprecated: true,
                    type: "long"
                }
            }
        },
        S19: {
            type: "structure",
            required: [ "Enabled", "Quantity" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "AwsAccountNumber"
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "Enabled", "Quantity" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "KeyGroup"
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "Quantity", "Items" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    shape: "S1f"
                },
                CachedMethods: {
                    type: "structure",
                    required: [ "Quantity", "Items" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            shape: "S1f"
                        }
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                locationName: "Method"
            }
        },
        S1i: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "LambdaFunctionAssociation",
                        type: "structure",
                        required: [ "LambdaFunctionARN", "EventType" ],
                        members: {
                            LambdaFunctionARN: {},
                            EventType: {},
                            IncludeBody: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "FunctionAssociation",
                        type: "structure",
                        required: [ "FunctionARN", "EventType" ],
                        members: {
                            FunctionARN: {},
                            EventType: {}
                        }
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "QueryString", "Cookies" ],
            members: {
                QueryString: {
                    type: "boolean"
                },
                Cookies: {
                    type: "structure",
                    required: [ "Forward" ],
                    members: {
                        Forward: {},
                        WhitelistedNames: {
                            shape: "S1u"
                        }
                    }
                },
                Headers: {
                    shape: "S1w"
                },
                QueryStringCacheKeys: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "Name"
                            }
                        }
                    }
                }
            }
        },
        S1u: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "Name"
                    }
                }
            }
        },
        S1w: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "Name"
                    }
                }
            }
        },
        S21: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "CacheBehavior",
                        type: "structure",
                        required: [ "PathPattern", "TargetOriginId", "ViewerProtocolPolicy" ],
                        members: {
                            PathPattern: {},
                            TargetOriginId: {},
                            TrustedSigners: {
                                shape: "S19"
                            },
                            TrustedKeyGroups: {
                                shape: "S1b"
                            },
                            ViewerProtocolPolicy: {},
                            AllowedMethods: {
                                shape: "S1e"
                            },
                            SmoothStreaming: {
                                type: "boolean"
                            },
                            Compress: {
                                type: "boolean"
                            },
                            LambdaFunctionAssociations: {
                                shape: "S1i"
                            },
                            FunctionAssociations: {
                                shape: "S1n"
                            },
                            FieldLevelEncryptionId: {},
                            RealtimeLogConfigArn: {},
                            CachePolicyId: {},
                            OriginRequestPolicyId: {},
                            ResponseHeadersPolicyId: {},
                            ForwardedValues: {
                                shape: "S1r",
                                deprecated: true
                            },
                            MinTTL: {
                                deprecated: true,
                                type: "long"
                            },
                            DefaultTTL: {
                                deprecated: true,
                                type: "long"
                            },
                            MaxTTL: {
                                deprecated: true,
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S24: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "CustomErrorResponse",
                        type: "structure",
                        required: [ "ErrorCode" ],
                        members: {
                            ErrorCode: {
                                type: "integer"
                            },
                            ResponsePagePath: {},
                            ResponseCode: {},
                            ErrorCachingMinTTL: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S2a: {
            type: "structure",
            members: {
                CloudFrontDefaultCertificate: {
                    type: "boolean"
                },
                IAMCertificateId: {},
                ACMCertificateArn: {},
                SSLSupportMethod: {},
                MinimumProtocolVersion: {},
                Certificate: {
                    deprecated: true
                },
                CertificateSource: {
                    deprecated: true
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "GeoRestriction" ],
            members: {
                GeoRestriction: {
                    type: "structure",
                    required: [ "RestrictionType", "Quantity" ],
                    members: {
                        RestrictionType: {},
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "Location"
                            }
                        }
                    }
                }
            }
        },
        S2j: {
            type: "list",
            member: {
                locationName: "AliasICPRecordal",
                type: "structure",
                members: {
                    CNAME: {},
                    ICPRecordalStatus: {}
                }
            }
        },
        S2n: {
            type: "structure",
            required: [ "Name", "MinTTL" ],
            members: {
                Comment: {},
                Name: {},
                DefaultTTL: {
                    type: "long"
                },
                MaxTTL: {
                    type: "long"
                },
                MinTTL: {
                    type: "long"
                },
                ParametersInCacheKeyAndForwardedToOrigin: {
                    type: "structure",
                    required: [ "EnableAcceptEncodingGzip", "HeadersConfig", "CookiesConfig", "QueryStringsConfig" ],
                    members: {
                        EnableAcceptEncodingGzip: {
                            type: "boolean"
                        },
                        EnableAcceptEncodingBrotli: {
                            type: "boolean"
                        },
                        HeadersConfig: {
                            type: "structure",
                            required: [ "HeaderBehavior" ],
                            members: {
                                HeaderBehavior: {},
                                Headers: {
                                    shape: "S1w"
                                }
                            }
                        },
                        CookiesConfig: {
                            type: "structure",
                            required: [ "CookieBehavior" ],
                            members: {
                                CookieBehavior: {},
                                Cookies: {
                                    shape: "S1u"
                                }
                            }
                        },
                        QueryStringsConfig: {
                            type: "structure",
                            required: [ "QueryStringBehavior" ],
                            members: {
                                QueryStringBehavior: {},
                                QueryStrings: {
                                    shape: "S2v"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2v: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "Name"
                    }
                }
            }
        },
        S2y: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "CachePolicyConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                CachePolicyConfig: {
                    shape: "S2n"
                }
            }
        },
        S30: {
            type: "structure",
            required: [ "CallerReference", "Comment" ],
            members: {
                CallerReference: {},
                Comment: {}
            }
        },
        S32: {
            type: "structure",
            required: [ "Id", "S3CanonicalUserId" ],
            members: {
                Id: {},
                S3CanonicalUserId: {},
                CloudFrontOriginAccessIdentityConfig: {
                    shape: "S30"
                }
            }
        },
        S34: {
            type: "structure",
            required: [ "StagingDistributionDnsNames", "Enabled" ],
            members: {
                StagingDistributionDnsNames: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "DnsName"
                            }
                        }
                    }
                },
                Enabled: {
                    type: "boolean"
                },
                TrafficConfig: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        SingleWeightConfig: {
                            type: "structure",
                            required: [ "Weight" ],
                            members: {
                                Weight: {
                                    type: "float"
                                },
                                SessionStickinessConfig: {
                                    type: "structure",
                                    required: [ "IdleTTL", "MaximumTTL" ],
                                    members: {
                                        IdleTTL: {
                                            type: "integer"
                                        },
                                        MaximumTTL: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        SingleHeaderConfig: {
                            type: "structure",
                            required: [ "Header", "Value" ],
                            members: {
                                Header: {},
                                Value: {}
                            }
                        },
                        Type: {}
                    }
                }
            }
        },
        S3e: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "ContinuousDeploymentPolicyConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                ContinuousDeploymentPolicyConfig: {
                    shape: "S34"
                }
            }
        },
        S3j: {
            type: "structure",
            members: {
                Items: {
                    type: "list",
                    member: {
                        locationName: "Tag",
                        type: "structure",
                        required: [ "Key" ],
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        S3q: {
            type: "structure",
            required: [ "CallerReference" ],
            members: {
                CallerReference: {},
                Comment: {},
                QueryArgProfileConfig: {
                    shape: "S3r"
                },
                ContentTypeProfileConfig: {
                    shape: "S3v"
                }
            }
        },
        S3r: {
            type: "structure",
            required: [ "ForwardWhenQueryArgProfileIsUnknown" ],
            members: {
                ForwardWhenQueryArgProfileIsUnknown: {
                    type: "boolean"
                },
                QueryArgProfiles: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "QueryArgProfile",
                                type: "structure",
                                required: [ "QueryArg", "ProfileId" ],
                                members: {
                                    QueryArg: {},
                                    ProfileId: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S3v: {
            type: "structure",
            required: [ "ForwardWhenContentTypeIsUnknown" ],
            members: {
                ForwardWhenContentTypeIsUnknown: {
                    type: "boolean"
                },
                ContentTypeProfiles: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "ContentTypeProfile",
                                type: "structure",
                                required: [ "Format", "ContentType" ],
                                members: {
                                    Format: {},
                                    ProfileId: {},
                                    ContentType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S41: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "FieldLevelEncryptionConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                FieldLevelEncryptionConfig: {
                    shape: "S3q"
                }
            }
        },
        S43: {
            type: "structure",
            required: [ "Name", "CallerReference", "EncryptionEntities" ],
            members: {
                Name: {},
                CallerReference: {},
                Comment: {},
                EncryptionEntities: {
                    shape: "S44"
                }
            }
        },
        S44: {
            type: "structure",
            required: [ "Quantity" ],
            members: {
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "EncryptionEntity",
                        type: "structure",
                        required: [ "PublicKeyId", "ProviderId", "FieldPatterns" ],
                        members: {
                            PublicKeyId: {},
                            ProviderId: {},
                            FieldPatterns: {
                                type: "structure",
                                required: [ "Quantity" ],
                                members: {
                                    Quantity: {
                                        type: "integer"
                                    },
                                    Items: {
                                        type: "list",
                                        member: {
                                            locationName: "FieldPattern"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S4a: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "FieldLevelEncryptionProfileConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                FieldLevelEncryptionProfileConfig: {
                    shape: "S43"
                }
            }
        },
        S4d: {
            type: "structure",
            required: [ "Comment", "Runtime" ],
            members: {
                Comment: {},
                Runtime: {},
                KeyValueStoreAssociations: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "KeyValueStoreAssociation",
                                type: "structure",
                                required: [ "KeyValueStoreARN" ],
                                members: {
                                    KeyValueStoreARN: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S4j: {
            type: "blob",
            sensitive: true
        },
        S4l: {
            type: "structure",
            required: [ "Name", "FunctionConfig", "FunctionMetadata" ],
            members: {
                Name: {},
                Status: {},
                FunctionConfig: {
                    shape: "S4d"
                },
                FunctionMetadata: {
                    type: "structure",
                    required: [ "FunctionARN", "LastModifiedTime" ],
                    members: {
                        FunctionARN: {},
                        Stage: {},
                        CreatedTime: {
                            type: "timestamp"
                        },
                        LastModifiedTime: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S4p: {
            type: "structure",
            required: [ "Paths", "CallerReference" ],
            members: {
                Paths: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "Path"
                            }
                        }
                    }
                },
                CallerReference: {}
            }
        },
        S4t: {
            type: "structure",
            required: [ "Id", "Status", "CreateTime", "InvalidationBatch" ],
            members: {
                Id: {},
                Status: {},
                CreateTime: {
                    type: "timestamp"
                },
                InvalidationBatch: {
                    shape: "S4p"
                }
            }
        },
        S4v: {
            type: "structure",
            required: [ "Name", "Items" ],
            members: {
                Name: {},
                Items: {
                    type: "list",
                    member: {
                        locationName: "PublicKey"
                    }
                },
                Comment: {}
            }
        },
        S4y: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "KeyGroupConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                KeyGroupConfig: {
                    shape: "S4v"
                }
            }
        },
        S55: {
            type: "structure",
            required: [ "Name", "Id", "Comment", "ARN", "LastModifiedTime" ],
            members: {
                Name: {},
                Id: {},
                Comment: {},
                ARN: {},
                Status: {},
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S57: {
            type: "structure",
            members: {
                RealtimeMetricsSubscriptionConfig: {
                    type: "structure",
                    required: [ "RealtimeMetricsSubscriptionStatus" ],
                    members: {
                        RealtimeMetricsSubscriptionStatus: {}
                    }
                }
            }
        },
        S5c: {
            type: "structure",
            required: [ "Name", "SigningProtocol", "SigningBehavior", "OriginAccessControlOriginType" ],
            members: {
                Name: {},
                Description: {},
                SigningProtocol: {},
                SigningBehavior: {},
                OriginAccessControlOriginType: {}
            }
        },
        S5h: {
            type: "structure",
            required: [ "Id" ],
            members: {
                Id: {},
                OriginAccessControlConfig: {
                    shape: "S5c"
                }
            }
        },
        S5j: {
            type: "structure",
            required: [ "Name", "HeadersConfig", "CookiesConfig", "QueryStringsConfig" ],
            members: {
                Comment: {},
                Name: {},
                HeadersConfig: {
                    type: "structure",
                    required: [ "HeaderBehavior" ],
                    members: {
                        HeaderBehavior: {},
                        Headers: {
                            shape: "S1w"
                        }
                    }
                },
                CookiesConfig: {
                    type: "structure",
                    required: [ "CookieBehavior" ],
                    members: {
                        CookieBehavior: {},
                        Cookies: {
                            shape: "S1u"
                        }
                    }
                },
                QueryStringsConfig: {
                    type: "structure",
                    required: [ "QueryStringBehavior" ],
                    members: {
                        QueryStringBehavior: {},
                        QueryStrings: {
                            shape: "S2v"
                        }
                    }
                }
            }
        },
        S5r: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "OriginRequestPolicyConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                OriginRequestPolicyConfig: {
                    shape: "S5j"
                }
            }
        },
        S5t: {
            type: "structure",
            required: [ "CallerReference", "Name", "EncodedKey" ],
            members: {
                CallerReference: {},
                Name: {},
                EncodedKey: {},
                Comment: {}
            }
        },
        S5v: {
            type: "structure",
            required: [ "Id", "CreatedTime", "PublicKeyConfig" ],
            members: {
                Id: {},
                CreatedTime: {
                    type: "timestamp"
                },
                PublicKeyConfig: {
                    shape: "S5t"
                }
            }
        },
        S5x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "StreamType" ],
                members: {
                    StreamType: {},
                    KinesisStreamConfig: {
                        type: "structure",
                        required: [ "RoleARN", "StreamARN" ],
                        members: {
                            RoleARN: {},
                            StreamARN: {}
                        }
                    }
                }
            }
        },
        S60: {
            type: "list",
            member: {
                locationName: "Field"
            }
        },
        S62: {
            type: "structure",
            required: [ "ARN", "Name", "SamplingRate", "EndPoints", "Fields" ],
            members: {
                ARN: {},
                Name: {},
                SamplingRate: {
                    type: "long"
                },
                EndPoints: {
                    shape: "S5x"
                },
                Fields: {
                    shape: "S60"
                }
            }
        },
        S64: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Comment: {},
                Name: {},
                CorsConfig: {
                    type: "structure",
                    required: [ "AccessControlAllowOrigins", "AccessControlAllowHeaders", "AccessControlAllowMethods", "AccessControlAllowCredentials", "OriginOverride" ],
                    members: {
                        AccessControlAllowOrigins: {
                            type: "structure",
                            required: [ "Quantity", "Items" ],
                            members: {
                                Quantity: {
                                    type: "integer"
                                },
                                Items: {
                                    type: "list",
                                    member: {
                                        locationName: "Origin"
                                    }
                                }
                            }
                        },
                        AccessControlAllowHeaders: {
                            type: "structure",
                            required: [ "Quantity", "Items" ],
                            members: {
                                Quantity: {
                                    type: "integer"
                                },
                                Items: {
                                    type: "list",
                                    member: {
                                        locationName: "Header"
                                    }
                                }
                            }
                        },
                        AccessControlAllowMethods: {
                            type: "structure",
                            required: [ "Quantity", "Items" ],
                            members: {
                                Quantity: {
                                    type: "integer"
                                },
                                Items: {
                                    type: "list",
                                    member: {
                                        locationName: "Method"
                                    }
                                }
                            }
                        },
                        AccessControlAllowCredentials: {
                            type: "boolean"
                        },
                        AccessControlExposeHeaders: {
                            type: "structure",
                            required: [ "Quantity" ],
                            members: {
                                Quantity: {
                                    type: "integer"
                                },
                                Items: {
                                    type: "list",
                                    member: {
                                        locationName: "Header"
                                    }
                                }
                            }
                        },
                        AccessControlMaxAgeSec: {
                            type: "integer"
                        },
                        OriginOverride: {
                            type: "boolean"
                        }
                    }
                },
                SecurityHeadersConfig: {
                    type: "structure",
                    members: {
                        XSSProtection: {
                            type: "structure",
                            required: [ "Override", "Protection" ],
                            members: {
                                Override: {
                                    type: "boolean"
                                },
                                Protection: {
                                    type: "boolean"
                                },
                                ModeBlock: {
                                    type: "boolean"
                                },
                                ReportUri: {}
                            }
                        },
                        FrameOptions: {
                            type: "structure",
                            required: [ "Override", "FrameOption" ],
                            members: {
                                Override: {
                                    type: "boolean"
                                },
                                FrameOption: {}
                            }
                        },
                        ReferrerPolicy: {
                            type: "structure",
                            required: [ "Override", "ReferrerPolicy" ],
                            members: {
                                Override: {
                                    type: "boolean"
                                },
                                ReferrerPolicy: {}
                            }
                        },
                        ContentSecurityPolicy: {
                            type: "structure",
                            required: [ "Override", "ContentSecurityPolicy" ],
                            members: {
                                Override: {
                                    type: "boolean"
                                },
                                ContentSecurityPolicy: {}
                            }
                        },
                        ContentTypeOptions: {
                            type: "structure",
                            required: [ "Override" ],
                            members: {
                                Override: {
                                    type: "boolean"
                                }
                            }
                        },
                        StrictTransportSecurity: {
                            type: "structure",
                            required: [ "Override", "AccessControlMaxAgeSec" ],
                            members: {
                                Override: {
                                    type: "boolean"
                                },
                                IncludeSubdomains: {
                                    type: "boolean"
                                },
                                Preload: {
                                    type: "boolean"
                                },
                                AccessControlMaxAgeSec: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                ServerTimingHeadersConfig: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        SamplingRate: {
                            type: "double"
                        }
                    }
                },
                CustomHeadersConfig: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "ResponseHeadersPolicyCustomHeader",
                                type: "structure",
                                required: [ "Header", "Value", "Override" ],
                                members: {
                                    Header: {},
                                    Value: {},
                                    Override: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                RemoveHeadersConfig: {
                    type: "structure",
                    required: [ "Quantity" ],
                    members: {
                        Quantity: {
                            type: "integer"
                        },
                        Items: {
                            type: "list",
                            member: {
                                locationName: "ResponseHeadersPolicyRemoveHeader",
                                type: "structure",
                                required: [ "Header" ],
                                members: {
                                    Header: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S6x: {
            type: "structure",
            required: [ "Id", "LastModifiedTime", "ResponseHeadersPolicyConfig" ],
            members: {
                Id: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                ResponseHeadersPolicyConfig: {
                    shape: "S64"
                }
            }
        },
        S6z: {
            type: "structure",
            required: [ "CallerReference", "S3Origin", "Comment", "TrustedSigners", "Enabled" ],
            members: {
                CallerReference: {},
                S3Origin: {
                    shape: "S70"
                },
                Aliases: {
                    shape: "Si"
                },
                Comment: {},
                Logging: {
                    type: "structure",
                    required: [ "Enabled", "Bucket", "Prefix" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        Bucket: {},
                        Prefix: {}
                    }
                },
                TrustedSigners: {
                    shape: "S19"
                },
                PriceClass: {},
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S70: {
            type: "structure",
            required: [ "DomainName", "OriginAccessIdentity" ],
            members: {
                DomainName: {},
                OriginAccessIdentity: {}
            }
        },
        S73: {
            type: "structure",
            required: [ "Id", "ARN", "Status", "DomainName", "ActiveTrustedSigners", "StreamingDistributionConfig" ],
            members: {
                Id: {},
                ARN: {},
                Status: {},
                LastModifiedTime: {
                    type: "timestamp"
                },
                DomainName: {},
                ActiveTrustedSigners: {
                    shape: "S9"
                },
                StreamingDistributionConfig: {
                    shape: "S6z"
                }
            }
        },
        Sa2: {
            type: "structure",
            required: [ "Marker", "MaxItems", "IsTruncated", "Quantity" ],
            members: {
                Marker: {},
                NextMarker: {},
                MaxItems: {
                    type: "integer"
                },
                IsTruncated: {
                    type: "boolean"
                },
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "DistributionSummary",
                        type: "structure",
                        required: [ "Id", "ARN", "Status", "LastModifiedTime", "DomainName", "Aliases", "Origins", "DefaultCacheBehavior", "CacheBehaviors", "CustomErrorResponses", "Comment", "PriceClass", "Enabled", "ViewerCertificate", "Restrictions", "WebACLId", "HttpVersion", "IsIPV6Enabled", "Staging" ],
                        members: {
                            Id: {},
                            ARN: {},
                            Status: {},
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            DomainName: {},
                            Aliases: {
                                shape: "Si"
                            },
                            Origins: {
                                shape: "Sk"
                            },
                            OriginGroups: {
                                shape: "Sz"
                            },
                            DefaultCacheBehavior: {
                                shape: "S18"
                            },
                            CacheBehaviors: {
                                shape: "S21"
                            },
                            CustomErrorResponses: {
                                shape: "S24"
                            },
                            Comment: {},
                            PriceClass: {},
                            Enabled: {
                                type: "boolean"
                            },
                            ViewerCertificate: {
                                shape: "S2a"
                            },
                            Restrictions: {
                                shape: "S2e"
                            },
                            WebACLId: {},
                            HttpVersion: {},
                            IsIPV6Enabled: {
                                type: "boolean"
                            },
                            AliasICPRecordals: {
                                shape: "S2j"
                            },
                            Staging: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        Sa7: {
            type: "structure",
            required: [ "Marker", "MaxItems", "IsTruncated", "Quantity" ],
            members: {
                Marker: {},
                NextMarker: {},
                MaxItems: {
                    type: "integer"
                },
                IsTruncated: {
                    type: "boolean"
                },
                Quantity: {
                    type: "integer"
                },
                Items: {
                    type: "list",
                    member: {
                        locationName: "DistributionId"
                    }
                }
            }
        }
    },
    paginators: {
        ListCloudFrontOriginAccessIdentities: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "CloudFrontOriginAccessIdentityList.IsTruncated",
            output_token: "CloudFrontOriginAccessIdentityList.NextMarker",
            result_key: "CloudFrontOriginAccessIdentityList.Items"
        },
        ListDistributions: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "DistributionList.IsTruncated",
            output_token: "DistributionList.NextMarker",
            result_key: "DistributionList.Items"
        },
        ListInvalidations: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "InvalidationList.IsTruncated",
            output_token: "InvalidationList.NextMarker",
            result_key: "InvalidationList.Items"
        },
        ListKeyValueStores: {
            input_token: "Marker",
            limit_key: "MaxItems",
            output_token: "KeyValueStoreList.NextMarker",
            result_key: "KeyValueStoreList.Items"
        },
        ListStreamingDistributions: {
            input_token: "Marker",
            limit_key: "MaxItems",
            more_results: "StreamingDistributionList.IsTruncated",
            output_token: "StreamingDistributionList.NextMarker",
            result_key: "StreamingDistributionList.Items"
        }
    },
    waiters: {
        DistributionDeployed: {
            delay: 60,
            operation: "GetDistribution",
            maxAttempts: 35,
            description: "Wait until a distribution is deployed.",
            acceptors: [ {
                expected: "Deployed",
                matcher: "path",
                state: "success",
                argument: "Distribution.Status"
            } ]
        },
        InvalidationCompleted: {
            delay: 20,
            operation: "GetInvalidation",
            maxAttempts: 30,
            description: "Wait until an invalidation has completed.",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "Invalidation.Status"
            } ]
        },
        StreamingDistributionDeployed: {
            delay: 60,
            operation: "GetStreamingDistribution",
            maxAttempts: 25,
            description: "Wait until a streaming distribution is deployed.",
            acceptors: [ {
                expected: "Deployed",
                matcher: "path",
                state: "success",
                argument: "StreamingDistribution.Status"
            } ]
        }
    }
};

AWS.apiLoader.services["cloudhsm"] = {};

AWS.CloudHSM = AWS.Service.defineService("cloudhsm", [ "2014-05-30" ]);

AWS.apiLoader.services["cloudhsm"]["2014-05-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-05-30",
        endpointPrefix: "cloudhsm",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CloudHSM",
        serviceFullName: "Amazon CloudHSM",
        serviceId: "CloudHSM",
        signatureVersion: "v4",
        targetPrefix: "CloudHsmFrontendService",
        uid: "cloudhsm-2014-05-30"
    },
    operations: {
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagList" ],
                members: {
                    ResourceArn: {},
                    TagList: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        CreateHapg: {
            input: {
                type: "structure",
                required: [ "Label" ],
                members: {
                    Label: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HapgArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        CreateHsm: {
            input: {
                type: "structure",
                required: [ "SubnetId", "SshKey", "IamRoleArn", "SubscriptionType" ],
                members: {
                    SubnetId: {},
                    SshKey: {},
                    EniIp: {},
                    IamRoleArn: {},
                    ExternalId: {},
                    SubscriptionType: {},
                    ClientToken: {},
                    SyslogIp: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HsmArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        CreateLunaClient: {
            input: {
                type: "structure",
                required: [ "Certificate" ],
                members: {
                    Label: {},
                    Certificate: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        DeleteHapg: {
            input: {
                type: "structure",
                required: [ "HapgArn" ],
                members: {
                    HapgArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        DeleteHsm: {
            input: {
                type: "structure",
                required: [ "HsmArn" ],
                members: {
                    HsmArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        DeleteLunaClient: {
            input: {
                type: "structure",
                required: [ "ClientArn" ],
                members: {
                    ClientArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        DescribeHapg: {
            input: {
                type: "structure",
                required: [ "HapgArn" ],
                members: {
                    HapgArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HapgArn: {},
                    HapgSerial: {},
                    HsmsLastActionFailed: {
                        shape: "Sz"
                    },
                    HsmsPendingDeletion: {
                        shape: "Sz"
                    },
                    HsmsPendingRegistration: {
                        shape: "Sz"
                    },
                    Label: {},
                    LastModifiedTimestamp: {},
                    PartitionSerialList: {
                        shape: "S11"
                    },
                    State: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        DescribeHsm: {
            input: {
                type: "structure",
                members: {
                    HsmArn: {},
                    HsmSerialNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HsmArn: {},
                    Status: {},
                    StatusDetails: {},
                    AvailabilityZone: {},
                    EniId: {},
                    EniIp: {},
                    SubscriptionType: {},
                    SubscriptionStartDate: {},
                    SubscriptionEndDate: {},
                    VpcId: {},
                    SubnetId: {},
                    IamRoleArn: {},
                    SerialNumber: {},
                    VendorName: {},
                    HsmType: {},
                    SoftwareVersion: {},
                    SshPublicKey: {},
                    SshKeyLastUpdated: {},
                    ServerCertUri: {},
                    ServerCertLastUpdated: {},
                    Partitions: {
                        type: "list",
                        member: {}
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        DescribeLunaClient: {
            input: {
                type: "structure",
                members: {
                    ClientArn: {},
                    CertificateFingerprint: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientArn: {},
                    Certificate: {},
                    CertificateFingerprint: {},
                    LastModifiedTimestamp: {},
                    Label: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        GetConfig: {
            input: {
                type: "structure",
                required: [ "ClientArn", "ClientVersion", "HapgList" ],
                members: {
                    ClientArn: {},
                    ClientVersion: {},
                    HapgList: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigType: {},
                    ConfigFile: {},
                    ConfigCred: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ListAvailableZones: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AZList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ListHapgs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HapgList" ],
                members: {
                    HapgList: {
                        shape: "S1i"
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ListHsms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HsmList: {
                        shape: "Sz"
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ListLunaClients: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ClientList" ],
                members: {
                    ClientList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TagList" ],
                members: {
                    TagList: {
                        shape: "S3"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ModifyHapg: {
            input: {
                type: "structure",
                required: [ "HapgArn" ],
                members: {
                    HapgArn: {},
                    Label: {},
                    PartitionSerialList: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HapgArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ModifyHsm: {
            input: {
                type: "structure",
                required: [ "HsmArn" ],
                members: {
                    HsmArn: {},
                    SubnetId: {},
                    EniIp: {},
                    IamRoleArn: {},
                    ExternalId: {},
                    SyslogIp: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HsmArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        ModifyLunaClient: {
            input: {
                type: "structure",
                required: [ "ClientArn", "Certificate" ],
                members: {
                    ClientArn: {},
                    Certificate: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientArn: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeyList" ],
                members: {
                    ResourceArn: {},
                    TagKeyList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This API is deprecated."
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sz: {
            type: "list",
            member: {}
        },
        S11: {
            type: "list",
            member: {}
        },
        S1i: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["cloudsearch"] = {};

AWS.CloudSearch = AWS.Service.defineService("cloudsearch", [ "2011-02-01", "2013-01-01" ]);

AWS.apiLoader.services["cloudsearch"]["2013-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-01-01",
        endpointPrefix: "cloudsearch",
        protocol: "query",
        serviceFullName: "Amazon CloudSearch",
        serviceId: "CloudSearch",
        signatureVersion: "v4",
        uid: "cloudsearch-2013-01-01",
        xmlNamespace: "http://cloudsearch.amazonaws.com/doc/2013-01-01/"
    },
    operations: {
        BuildSuggesters: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                resultWrapper: "BuildSuggestersResult",
                type: "structure",
                members: {
                    FieldNames: {
                        shape: "S4"
                    }
                }
            }
        },
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                resultWrapper: "CreateDomainResult",
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S8"
                    }
                }
            }
        },
        DefineAnalysisScheme: {
            input: {
                type: "structure",
                required: [ "DomainName", "AnalysisScheme" ],
                members: {
                    DomainName: {},
                    AnalysisScheme: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                resultWrapper: "DefineAnalysisSchemeResult",
                type: "structure",
                required: [ "AnalysisScheme" ],
                members: {
                    AnalysisScheme: {
                        shape: "Ss"
                    }
                }
            }
        },
        DefineExpression: {
            input: {
                type: "structure",
                required: [ "DomainName", "Expression" ],
                members: {
                    DomainName: {},
                    Expression: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                resultWrapper: "DefineExpressionResult",
                type: "structure",
                required: [ "Expression" ],
                members: {
                    Expression: {
                        shape: "S11"
                    }
                }
            }
        },
        DefineIndexField: {
            input: {
                type: "structure",
                required: [ "DomainName", "IndexField" ],
                members: {
                    DomainName: {},
                    IndexField: {
                        shape: "S13"
                    }
                }
            },
            output: {
                resultWrapper: "DefineIndexFieldResult",
                type: "structure",
                required: [ "IndexField" ],
                members: {
                    IndexField: {
                        shape: "S1n"
                    }
                }
            }
        },
        DefineSuggester: {
            input: {
                type: "structure",
                required: [ "DomainName", "Suggester" ],
                members: {
                    DomainName: {},
                    Suggester: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                resultWrapper: "DefineSuggesterResult",
                type: "structure",
                required: [ "Suggester" ],
                members: {
                    Suggester: {
                        shape: "S1t"
                    }
                }
            }
        },
        DeleteAnalysisScheme: {
            input: {
                type: "structure",
                required: [ "DomainName", "AnalysisSchemeName" ],
                members: {
                    DomainName: {},
                    AnalysisSchemeName: {}
                }
            },
            output: {
                resultWrapper: "DeleteAnalysisSchemeResult",
                type: "structure",
                required: [ "AnalysisScheme" ],
                members: {
                    AnalysisScheme: {
                        shape: "Ss"
                    }
                }
            }
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                resultWrapper: "DeleteDomainResult",
                type: "structure",
                members: {
                    DomainStatus: {
                        shape: "S8"
                    }
                }
            }
        },
        DeleteExpression: {
            input: {
                type: "structure",
                required: [ "DomainName", "ExpressionName" ],
                members: {
                    DomainName: {},
                    ExpressionName: {}
                }
            },
            output: {
                resultWrapper: "DeleteExpressionResult",
                type: "structure",
                required: [ "Expression" ],
                members: {
                    Expression: {
                        shape: "S11"
                    }
                }
            }
        },
        DeleteIndexField: {
            input: {
                type: "structure",
                required: [ "DomainName", "IndexFieldName" ],
                members: {
                    DomainName: {},
                    IndexFieldName: {}
                }
            },
            output: {
                resultWrapper: "DeleteIndexFieldResult",
                type: "structure",
                required: [ "IndexField" ],
                members: {
                    IndexField: {
                        shape: "S1n"
                    }
                }
            }
        },
        DeleteSuggester: {
            input: {
                type: "structure",
                required: [ "DomainName", "SuggesterName" ],
                members: {
                    DomainName: {},
                    SuggesterName: {}
                }
            },
            output: {
                resultWrapper: "DeleteSuggesterResult",
                type: "structure",
                required: [ "Suggester" ],
                members: {
                    Suggester: {
                        shape: "S1t"
                    }
                }
            }
        },
        DescribeAnalysisSchemes: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    AnalysisSchemeNames: {
                        shape: "S25"
                    },
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAnalysisSchemesResult",
                type: "structure",
                required: [ "AnalysisSchemes" ],
                members: {
                    AnalysisSchemes: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    }
                }
            }
        },
        DescribeAvailabilityOptions: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAvailabilityOptionsResult",
                type: "structure",
                members: {
                    AvailabilityOptions: {
                        shape: "S2a"
                    }
                }
            }
        },
        DescribeDomainEndpointOptions: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDomainEndpointOptionsResult",
                type: "structure",
                members: {
                    DomainEndpointOptions: {
                        shape: "S2e"
                    }
                }
            }
        },
        DescribeDomains: {
            input: {
                type: "structure",
                members: {
                    DomainNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeDomainsResult",
                type: "structure",
                required: [ "DomainStatusList" ],
                members: {
                    DomainStatusList: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    }
                }
            }
        },
        DescribeExpressions: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    ExpressionNames: {
                        shape: "S25"
                    },
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeExpressionsResult",
                type: "structure",
                required: [ "Expressions" ],
                members: {
                    Expressions: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    }
                }
            }
        },
        DescribeIndexFields: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    FieldNames: {
                        type: "list",
                        member: {}
                    },
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeIndexFieldsResult",
                type: "structure",
                required: [ "IndexFields" ],
                members: {
                    IndexFields: {
                        type: "list",
                        member: {
                            shape: "S1n"
                        }
                    }
                }
            }
        },
        DescribeScalingParameters: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                resultWrapper: "DescribeScalingParametersResult",
                type: "structure",
                required: [ "ScalingParameters" ],
                members: {
                    ScalingParameters: {
                        shape: "S2u"
                    }
                }
            }
        },
        DescribeServiceAccessPolicies: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeServiceAccessPoliciesResult",
                type: "structure",
                required: [ "AccessPolicies" ],
                members: {
                    AccessPolicies: {
                        shape: "S2z"
                    }
                }
            }
        },
        DescribeSuggesters: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {},
                    SuggesterNames: {
                        shape: "S25"
                    },
                    Deployed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeSuggestersResult",
                type: "structure",
                required: [ "Suggesters" ],
                members: {
                    Suggesters: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        IndexDocuments: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                resultWrapper: "IndexDocumentsResult",
                type: "structure",
                members: {
                    FieldNames: {
                        shape: "S4"
                    }
                }
            }
        },
        ListDomainNames: {
            output: {
                resultWrapper: "ListDomainNamesResult",
                type: "structure",
                members: {
                    DomainNames: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        UpdateAvailabilityOptions: {
            input: {
                type: "structure",
                required: [ "DomainName", "MultiAZ" ],
                members: {
                    DomainName: {},
                    MultiAZ: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateAvailabilityOptionsResult",
                type: "structure",
                members: {
                    AvailabilityOptions: {
                        shape: "S2a"
                    }
                }
            }
        },
        UpdateDomainEndpointOptions: {
            input: {
                type: "structure",
                required: [ "DomainName", "DomainEndpointOptions" ],
                members: {
                    DomainName: {},
                    DomainEndpointOptions: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateDomainEndpointOptionsResult",
                type: "structure",
                members: {
                    DomainEndpointOptions: {
                        shape: "S2e"
                    }
                }
            }
        },
        UpdateScalingParameters: {
            input: {
                type: "structure",
                required: [ "DomainName", "ScalingParameters" ],
                members: {
                    DomainName: {},
                    ScalingParameters: {
                        shape: "S2v"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateScalingParametersResult",
                type: "structure",
                required: [ "ScalingParameters" ],
                members: {
                    ScalingParameters: {
                        shape: "S2u"
                    }
                }
            }
        },
        UpdateServiceAccessPolicies: {
            input: {
                type: "structure",
                required: [ "DomainName", "AccessPolicies" ],
                members: {
                    DomainName: {},
                    AccessPolicies: {}
                }
            },
            output: {
                resultWrapper: "UpdateServiceAccessPoliciesResult",
                type: "structure",
                required: [ "AccessPolicies" ],
                members: {
                    AccessPolicies: {
                        shape: "S2z"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S8: {
            type: "structure",
            required: [ "DomainId", "DomainName", "RequiresIndexDocuments" ],
            members: {
                DomainId: {},
                DomainName: {},
                ARN: {},
                Created: {
                    type: "boolean"
                },
                Deleted: {
                    type: "boolean"
                },
                DocService: {
                    shape: "Sc"
                },
                SearchService: {
                    shape: "Sc"
                },
                RequiresIndexDocuments: {
                    type: "boolean"
                },
                Processing: {
                    type: "boolean"
                },
                SearchInstanceType: {},
                SearchPartitionCount: {
                    type: "integer"
                },
                SearchInstanceCount: {
                    type: "integer"
                },
                Limits: {
                    type: "structure",
                    required: [ "MaximumReplicationCount", "MaximumPartitionCount" ],
                    members: {
                        MaximumReplicationCount: {
                            type: "integer"
                        },
                        MaximumPartitionCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                Endpoint: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "AnalysisSchemeName", "AnalysisSchemeLanguage" ],
            members: {
                AnalysisSchemeName: {},
                AnalysisSchemeLanguage: {},
                AnalysisOptions: {
                    type: "structure",
                    members: {
                        Synonyms: {},
                        Stopwords: {},
                        StemmingDictionary: {},
                        JapaneseTokenizationDictionary: {},
                        AlgorithmicStemming: {}
                    }
                }
            }
        },
        Ss: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    shape: "Sl"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        St: {
            type: "structure",
            required: [ "CreationDate", "UpdateDate", "State" ],
            members: {
                CreationDate: {
                    type: "timestamp"
                },
                UpdateDate: {
                    type: "timestamp"
                },
                UpdateVersion: {
                    type: "integer"
                },
                State: {},
                PendingDeletion: {
                    type: "boolean"
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "ExpressionName", "ExpressionValue" ],
            members: {
                ExpressionName: {},
                ExpressionValue: {}
            }
        },
        S11: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    shape: "Sy"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        S13: {
            type: "structure",
            required: [ "IndexFieldName", "IndexFieldType" ],
            members: {
                IndexFieldName: {},
                IndexFieldType: {},
                IntOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {
                            type: "long"
                        },
                        SourceField: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        SortEnabled: {
                            type: "boolean"
                        }
                    }
                },
                DoubleOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {
                            type: "double"
                        },
                        SourceField: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        SortEnabled: {
                            type: "boolean"
                        }
                    }
                },
                LiteralOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceField: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        SortEnabled: {
                            type: "boolean"
                        }
                    }
                },
                TextOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceField: {},
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        SortEnabled: {
                            type: "boolean"
                        },
                        HighlightEnabled: {
                            type: "boolean"
                        },
                        AnalysisScheme: {}
                    }
                },
                DateOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceField: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        SortEnabled: {
                            type: "boolean"
                        }
                    }
                },
                LatLonOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceField: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        SortEnabled: {
                            type: "boolean"
                        }
                    }
                },
                IntArrayOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {
                            type: "long"
                        },
                        SourceFields: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        }
                    }
                },
                DoubleArrayOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {
                            type: "double"
                        },
                        SourceFields: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        }
                    }
                },
                LiteralArrayOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceFields: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        }
                    }
                },
                TextArrayOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceFields: {},
                        ReturnEnabled: {
                            type: "boolean"
                        },
                        HighlightEnabled: {
                            type: "boolean"
                        },
                        AnalysisScheme: {}
                    }
                },
                DateArrayOptions: {
                    type: "structure",
                    members: {
                        DefaultValue: {},
                        SourceFields: {},
                        FacetEnabled: {
                            type: "boolean"
                        },
                        SearchEnabled: {
                            type: "boolean"
                        },
                        ReturnEnabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    shape: "S13"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "SuggesterName", "DocumentSuggesterOptions" ],
            members: {
                SuggesterName: {},
                DocumentSuggesterOptions: {
                    type: "structure",
                    required: [ "SourceField" ],
                    members: {
                        SourceField: {},
                        FuzzyMatching: {},
                        SortExpression: {}
                    }
                }
            }
        },
        S1t: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    shape: "S1p"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        S25: {
            type: "list",
            member: {}
        },
        S2a: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    type: "boolean"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    shape: "S2f"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        S2f: {
            type: "structure",
            members: {
                EnforceHTTPS: {
                    type: "boolean"
                },
                TLSSecurityPolicy: {}
            }
        },
        S2u: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {
                    shape: "S2v"
                },
                Status: {
                    shape: "St"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                DesiredInstanceType: {},
                DesiredReplicationCount: {
                    type: "integer"
                },
                DesiredPartitionCount: {
                    type: "integer"
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "Options", "Status" ],
            members: {
                Options: {},
                Status: {
                    shape: "St"
                }
            }
        }
    },
    paginators: {
        DescribeAnalysisSchemes: {
            result_key: "AnalysisSchemes"
        },
        DescribeDomains: {
            result_key: "DomainStatusList"
        },
        DescribeExpressions: {
            result_key: "Expressions"
        },
        DescribeIndexFields: {
            result_key: "IndexFields"
        },
        DescribeSuggesters: {
            result_key: "Suggesters"
        }
    }
};

AWS.apiLoader.services["cloudsearchdomain"] = {};

AWS.CloudSearchDomain = AWS.Service.defineService("cloudsearchdomain", [ "2013-01-01" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    99: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.CloudSearchDomain.prototype, {
            validateService: function validateService() {
                if (!this.config.endpoint || this.config.endpoint.indexOf("{") >= 0) {
                    var msg = "AWS.CloudSearchDomain requires an explicit " + "`endpoint' configuration option.";
                    throw AWS.util.error(new Error(), {
                        name: "InvalidEndpoint",
                        message: msg
                    });
                }
            },
            setupRequestListeners: function setupRequestListeners(request) {
                request.removeListener("validate", AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
                request.onAsync("validate", this.validateCredentials);
                request.addListener("validate", this.updateRegion);
                if (request.operation === "search") {
                    request.addListener("build", this.convertGetToPost);
                }
            },
            validateCredentials: function(req, done) {
                if (!req.service.api.signatureVersion) return done();
                req.service.config.getCredentials(function(err) {
                    if (err) {
                        req.removeListener("sign", AWS.EventListeners.Core.SIGN);
                    }
                    done();
                });
            },
            convertGetToPost: function(request) {
                var httpRequest = request.httpRequest;
                var path = httpRequest.path.split("?");
                httpRequest.method = "POST";
                httpRequest.path = path[0];
                httpRequest.body = path[1];
                httpRequest.headers["Content-Length"] = httpRequest.body.length;
                httpRequest.headers["Content-Type"] = "application/x-www-form-urlencoded";
            },
            updateRegion: function updateRegion(request) {
                var endpoint = request.httpRequest.endpoint.hostname;
                var zones = endpoint.split(".");
                request.httpRequest.region = zones[1] || request.httpRequest.region;
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 99 ]);

AWS.apiLoader.services["cloudsearchdomain"]["2013-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-01-01",
        endpointPrefix: "cloudsearchdomain",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CloudSearch Domain",
        serviceId: "CloudSearch Domain",
        signatureVersion: "v4",
        signingName: "cloudsearch",
        uid: "cloudsearchdomain-2013-01-01"
    },
    operations: {
        Search: {
            http: {
                method: "GET",
                requestUri: "/2013-01-01/search?format=sdk&pretty=true"
            },
            input: {
                type: "structure",
                required: [ "query" ],
                members: {
                    cursor: {
                        location: "querystring",
                        locationName: "cursor"
                    },
                    expr: {
                        location: "querystring",
                        locationName: "expr"
                    },
                    facet: {
                        location: "querystring",
                        locationName: "facet"
                    },
                    filterQuery: {
                        location: "querystring",
                        locationName: "fq"
                    },
                    highlight: {
                        location: "querystring",
                        locationName: "highlight"
                    },
                    partial: {
                        location: "querystring",
                        locationName: "partial",
                        type: "boolean"
                    },
                    query: {
                        location: "querystring",
                        locationName: "q"
                    },
                    queryOptions: {
                        location: "querystring",
                        locationName: "q.options"
                    },
                    queryParser: {
                        location: "querystring",
                        locationName: "q.parser"
                    },
                    return: {
                        location: "querystring",
                        locationName: "return"
                    },
                    size: {
                        location: "querystring",
                        locationName: "size",
                        type: "long"
                    },
                    sort: {
                        location: "querystring",
                        locationName: "sort"
                    },
                    start: {
                        location: "querystring",
                        locationName: "start",
                        type: "long"
                    },
                    stats: {
                        location: "querystring",
                        locationName: "stats"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {
                        type: "structure",
                        members: {
                            timems: {
                                type: "long"
                            },
                            rid: {}
                        }
                    },
                    hits: {
                        type: "structure",
                        members: {
                            found: {
                                type: "long"
                            },
                            start: {
                                type: "long"
                            },
                            cursor: {},
                            hit: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        id: {},
                                        fields: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "list",
                                                member: {}
                                            }
                                        },
                                        exprs: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        highlights: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    facets: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                buckets: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            value: {},
                                            count: {
                                                type: "long"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    stats: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                min: {},
                                max: {},
                                count: {
                                    type: "long"
                                },
                                missing: {
                                    type: "long"
                                },
                                sum: {
                                    type: "double"
                                },
                                sumOfSquares: {
                                    type: "double"
                                },
                                mean: {},
                                stddev: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        Suggest: {
            http: {
                method: "GET",
                requestUri: "/2013-01-01/suggest?format=sdk&pretty=true"
            },
            input: {
                type: "structure",
                required: [ "query", "suggester" ],
                members: {
                    query: {
                        location: "querystring",
                        locationName: "q"
                    },
                    suggester: {
                        location: "querystring",
                        locationName: "suggester"
                    },
                    size: {
                        location: "querystring",
                        locationName: "size",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {
                        type: "structure",
                        members: {
                            timems: {
                                type: "long"
                            },
                            rid: {}
                        }
                    },
                    suggest: {
                        type: "structure",
                        members: {
                            query: {},
                            found: {
                                type: "long"
                            },
                            suggestions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        suggestion: {},
                                        score: {
                                            type: "long"
                                        },
                                        id: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        UploadDocuments: {
            http: {
                requestUri: "/2013-01-01/documents/batch?format=sdk"
            },
            input: {
                type: "structure",
                required: [ "documents", "contentType" ],
                members: {
                    documents: {
                        type: "blob",
                        streaming: true
                    },
                    contentType: {
                        location: "header",
                        locationName: "Content-Type"
                    }
                },
                payload: "documents"
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    adds: {
                        type: "long"
                    },
                    deletes: {
                        type: "long"
                    },
                    warnings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                message: {}
                            }
                        }
                    }
                }
            }
        }
    },
    shapes: {}
};

AWS.apiLoader.services["cloudtrail"] = {};

AWS.CloudTrail = AWS.Service.defineService("cloudtrail", [ "2013-11-01" ]);

AWS.apiLoader.services["cloudtrail"]["2013-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-11-01",
        endpointPrefix: "cloudtrail",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CloudTrail",
        serviceFullName: "AWS CloudTrail",
        serviceId: "CloudTrail",
        signatureVersion: "v4",
        targetPrefix: "com.amazonaws.cloudtrail.v20131101.CloudTrail_20131101",
        uid: "cloudtrail-2013-11-01"
    },
    operations: {
        AddTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagsList" ],
                members: {
                    ResourceId: {},
                    TagsList: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CancelQuery: {
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    EventDataStore: {
                        deprecated: true,
                        deprecatedMessage: "EventDataStore is no longer required by CancelQueryRequest"
                    },
                    QueryId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "QueryId", "QueryStatus" ],
                members: {
                    QueryId: {},
                    QueryStatus: {}
                }
            },
            idempotent: true
        },
        CreateChannel: {
            input: {
                type: "structure",
                required: [ "Name", "Source", "Destinations" ],
                members: {
                    Name: {},
                    Source: {},
                    Destinations: {
                        shape: "Sg"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Name: {},
                    Source: {},
                    Destinations: {
                        shape: "Sg"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        CreateEventDataStore: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    AdvancedEventSelectors: {
                        shape: "So"
                    },
                    MultiRegionEnabled: {
                        type: "boolean"
                    },
                    OrganizationEnabled: {
                        type: "boolean"
                    },
                    RetentionPeriod: {
                        type: "integer"
                    },
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    },
                    TagsList: {
                        shape: "S3"
                    },
                    KmsKeyId: {},
                    StartIngestion: {
                        type: "boolean"
                    },
                    BillingMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStoreArn: {},
                    Name: {},
                    Status: {},
                    AdvancedEventSelectors: {
                        shape: "So"
                    },
                    MultiRegionEnabled: {
                        type: "boolean"
                    },
                    OrganizationEnabled: {
                        type: "boolean"
                    },
                    RetentionPeriod: {
                        type: "integer"
                    },
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    },
                    TagsList: {
                        shape: "S3"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    },
                    KmsKeyId: {},
                    BillingMode: {}
                }
            }
        },
        CreateTrail: {
            input: {
                type: "structure",
                required: [ "Name", "S3BucketName" ],
                members: {
                    Name: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    SnsTopicName: {},
                    IncludeGlobalServiceEvents: {
                        type: "boolean"
                    },
                    IsMultiRegionTrail: {
                        type: "boolean"
                    },
                    EnableLogFileValidation: {
                        type: "boolean"
                    },
                    CloudWatchLogsLogGroupArn: {},
                    CloudWatchLogsRoleArn: {},
                    KmsKeyId: {},
                    IsOrganizationTrail: {
                        type: "boolean"
                    },
                    TagsList: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    SnsTopicName: {
                        deprecated: true
                    },
                    SnsTopicARN: {},
                    IncludeGlobalServiceEvents: {
                        type: "boolean"
                    },
                    IsMultiRegionTrail: {
                        type: "boolean"
                    },
                    TrailARN: {},
                    LogFileValidationEnabled: {
                        type: "boolean"
                    },
                    CloudWatchLogsLogGroupArn: {},
                    CloudWatchLogsRoleArn: {},
                    KmsKeyId: {},
                    IsOrganizationTrail: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        },
        DeleteChannel: {
            input: {
                type: "structure",
                required: [ "Channel" ],
                members: {
                    Channel: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEventDataStore: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteTrail: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeregisterOrganizationDelegatedAdmin: {
            input: {
                type: "structure",
                required: [ "DelegatedAdminAccountId" ],
                members: {
                    DelegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeQuery: {
            input: {
                type: "structure",
                members: {
                    EventDataStore: {
                        deprecated: true,
                        deprecatedMessage: "EventDataStore is no longer required by DescribeQueryRequest"
                    },
                    QueryId: {},
                    QueryAlias: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryId: {},
                    QueryString: {},
                    QueryStatus: {},
                    QueryStatistics: {
                        type: "structure",
                        members: {
                            EventsMatched: {
                                type: "long"
                            },
                            EventsScanned: {
                                type: "long"
                            },
                            BytesScanned: {
                                type: "long"
                            },
                            ExecutionTimeInMillis: {
                                type: "integer"
                            },
                            CreationTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    ErrorMessage: {},
                    DeliveryS3Uri: {},
                    DeliveryStatus: {}
                }
            },
            idempotent: true
        },
        DescribeTrails: {
            input: {
                type: "structure",
                members: {
                    trailNameList: {
                        type: "list",
                        member: {}
                    },
                    includeShadowTrails: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    trailList: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    }
                }
            },
            idempotent: true
        },
        DisableFederation: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStoreArn: {},
                    FederationStatus: {}
                }
            }
        },
        EnableFederation: {
            input: {
                type: "structure",
                required: [ "EventDataStore", "FederationRoleArn" ],
                members: {
                    EventDataStore: {},
                    FederationRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStoreArn: {},
                    FederationStatus: {},
                    FederationRoleArn: {}
                }
            }
        },
        GetChannel: {
            input: {
                type: "structure",
                required: [ "Channel" ],
                members: {
                    Channel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Name: {},
                    Source: {},
                    SourceConfig: {
                        type: "structure",
                        members: {
                            ApplyToAllRegions: {
                                type: "boolean"
                            },
                            AdvancedEventSelectors: {
                                shape: "So"
                            }
                        }
                    },
                    Destinations: {
                        shape: "Sg"
                    },
                    IngestionStatus: {
                        type: "structure",
                        members: {
                            LatestIngestionSuccessTime: {
                                type: "timestamp"
                            },
                            LatestIngestionSuccessEventID: {},
                            LatestIngestionErrorCode: {},
                            LatestIngestionAttemptTime: {
                                type: "timestamp"
                            },
                            LatestIngestionAttemptEventID: {}
                        }
                    }
                }
            },
            idempotent: true
        },
        GetEventDataStore: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStoreArn: {},
                    Name: {},
                    Status: {},
                    AdvancedEventSelectors: {
                        shape: "So"
                    },
                    MultiRegionEnabled: {
                        type: "boolean"
                    },
                    OrganizationEnabled: {
                        type: "boolean"
                    },
                    RetentionPeriod: {
                        type: "integer"
                    },
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    },
                    KmsKeyId: {},
                    BillingMode: {},
                    FederationStatus: {},
                    FederationRoleArn: {}
                }
            },
            idempotent: true
        },
        GetEventSelectors: {
            input: {
                type: "structure",
                required: [ "TrailName" ],
                members: {
                    TrailName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrailARN: {},
                    EventSelectors: {
                        shape: "S2b"
                    },
                    AdvancedEventSelectors: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        GetImport: {
            input: {
                type: "structure",
                required: [ "ImportId" ],
                members: {
                    ImportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportId: {},
                    Destinations: {
                        shape: "S2k"
                    },
                    ImportSource: {
                        shape: "S2l"
                    },
                    StartEventTime: {
                        type: "timestamp"
                    },
                    EndEventTime: {
                        type: "timestamp"
                    },
                    ImportStatus: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    },
                    ImportStatistics: {
                        shape: "S2o"
                    }
                }
            }
        },
        GetInsightSelectors: {
            input: {
                type: "structure",
                members: {
                    TrailName: {},
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrailARN: {},
                    InsightSelectors: {
                        shape: "S2r"
                    },
                    EventDataStoreArn: {},
                    InsightsDestination: {}
                }
            },
            idempotent: true
        },
        GetQueryResults: {
            input: {
                type: "structure",
                required: [ "QueryId" ],
                members: {
                    EventDataStore: {
                        deprecated: true,
                        deprecatedMessage: "EventDataStore is no longer required by GetQueryResultsRequest"
                    },
                    QueryId: {},
                    NextToken: {},
                    MaxQueryResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryStatus: {},
                    QueryStatistics: {
                        type: "structure",
                        members: {
                            ResultsCount: {
                                type: "integer"
                            },
                            TotalResultsCount: {
                                type: "integer"
                            },
                            BytesScanned: {
                                type: "long"
                            }
                        }
                    },
                    QueryResultRows: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    NextToken: {},
                    ErrorMessage: {}
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourcePolicy: {}
                }
            },
            idempotent: true
        },
        GetTrail: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Trail: {
                        shape: "S1w"
                    }
                }
            },
            idempotent: true
        },
        GetTrailStatus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IsLogging: {
                        type: "boolean"
                    },
                    LatestDeliveryError: {},
                    LatestNotificationError: {},
                    LatestDeliveryTime: {
                        type: "timestamp"
                    },
                    LatestNotificationTime: {
                        type: "timestamp"
                    },
                    StartLoggingTime: {
                        type: "timestamp"
                    },
                    StopLoggingTime: {
                        type: "timestamp"
                    },
                    LatestCloudWatchLogsDeliveryError: {},
                    LatestCloudWatchLogsDeliveryTime: {
                        type: "timestamp"
                    },
                    LatestDigestDeliveryTime: {
                        type: "timestamp"
                    },
                    LatestDigestDeliveryError: {},
                    LatestDeliveryAttemptTime: {},
                    LatestNotificationAttemptTime: {},
                    LatestNotificationAttemptSucceeded: {},
                    LatestDeliveryAttemptSucceeded: {},
                    TimeLoggingStarted: {},
                    TimeLoggingStopped: {}
                }
            },
            idempotent: true
        },
        ListChannels: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelArn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListEventDataStores: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventDataStoreArn: {},
                                Name: {},
                                TerminationProtectionEnabled: {
                                    deprecated: true,
                                    deprecatedMessage: "TerminationProtectionEnabled is no longer returned by ListEventDataStores",
                                    type: "boolean"
                                },
                                Status: {
                                    deprecated: true,
                                    deprecatedMessage: "Status is no longer returned by ListEventDataStores"
                                },
                                AdvancedEventSelectors: {
                                    shape: "So",
                                    deprecated: true,
                                    deprecatedMessage: "AdvancedEventSelectors is no longer returned by ListEventDataStores"
                                },
                                MultiRegionEnabled: {
                                    deprecated: true,
                                    deprecatedMessage: "MultiRegionEnabled is no longer returned by ListEventDataStores",
                                    type: "boolean"
                                },
                                OrganizationEnabled: {
                                    deprecated: true,
                                    deprecatedMessage: "OrganizationEnabled is no longer returned by ListEventDataStores",
                                    type: "boolean"
                                },
                                RetentionPeriod: {
                                    deprecated: true,
                                    deprecatedMessage: "RetentionPeriod is no longer returned by ListEventDataStores",
                                    type: "integer"
                                },
                                CreatedTimestamp: {
                                    deprecated: true,
                                    deprecatedMessage: "CreatedTimestamp is no longer returned by ListEventDataStores",
                                    type: "timestamp"
                                },
                                UpdatedTimestamp: {
                                    deprecated: true,
                                    deprecatedMessage: "UpdatedTimestamp is no longer returned by ListEventDataStores",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListImportFailures: {
            input: {
                type: "structure",
                required: [ "ImportId" ],
                members: {
                    ImportId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Location: {},
                                Status: {},
                                ErrorType: {},
                                ErrorMessage: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListImports: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    Destination: {},
                    ImportStatus: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Imports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ImportId: {},
                                ImportStatus: {},
                                Destinations: {
                                    shape: "S2k"
                                },
                                CreatedTimestamp: {
                                    type: "timestamp"
                                },
                                UpdatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListPublicKeys: {
            input: {
                type: "structure",
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicKeyList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Value: {
                                    type: "blob"
                                },
                                ValidityStartTime: {
                                    type: "timestamp"
                                },
                                ValidityEndTime: {
                                    type: "timestamp"
                                },
                                Fingerprint: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListQueries: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    QueryStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Queries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QueryId: {},
                                QueryStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceIdList" ],
                members: {
                    ResourceIdList: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceTagList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {},
                                TagsList: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        ListTrails: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Trails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrailARN: {},
                                Name: {},
                                HomeRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        LookupEvents: {
            input: {
                type: "structure",
                members: {
                    LookupAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AttributeKey", "AttributeValue" ],
                            members: {
                                AttributeKey: {},
                                AttributeValue: {}
                            }
                        }
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    EventCategory: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                EventName: {},
                                ReadOnly: {},
                                AccessKeyId: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                EventSource: {},
                                Username: {},
                                Resources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ResourceType: {},
                                            ResourceName: {}
                                        }
                                    }
                                },
                                CloudTrailEvent: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            idempotent: true
        },
        PutEventSelectors: {
            input: {
                type: "structure",
                required: [ "TrailName" ],
                members: {
                    TrailName: {},
                    EventSelectors: {
                        shape: "S2b"
                    },
                    AdvancedEventSelectors: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrailARN: {},
                    EventSelectors: {
                        shape: "S2b"
                    },
                    AdvancedEventSelectors: {
                        shape: "So"
                    }
                }
            },
            idempotent: true
        },
        PutInsightSelectors: {
            input: {
                type: "structure",
                required: [ "InsightSelectors" ],
                members: {
                    TrailName: {},
                    InsightSelectors: {
                        shape: "S2r"
                    },
                    EventDataStore: {},
                    InsightsDestination: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrailARN: {},
                    InsightSelectors: {
                        shape: "S2r"
                    },
                    EventDataStoreArn: {},
                    InsightsDestination: {}
                }
            },
            idempotent: true
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourcePolicy" ],
                members: {
                    ResourceArn: {},
                    ResourcePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourcePolicy: {}
                }
            },
            idempotent: true
        },
        RegisterOrganizationDelegatedAdmin: {
            input: {
                type: "structure",
                required: [ "MemberAccountId" ],
                members: {
                    MemberAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RemoveTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagsList" ],
                members: {
                    ResourceId: {},
                    TagsList: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RestoreEventDataStore: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStoreArn: {},
                    Name: {},
                    Status: {},
                    AdvancedEventSelectors: {
                        shape: "So"
                    },
                    MultiRegionEnabled: {
                        type: "boolean"
                    },
                    OrganizationEnabled: {
                        type: "boolean"
                    },
                    RetentionPeriod: {
                        type: "integer"
                    },
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    },
                    KmsKeyId: {},
                    BillingMode: {}
                }
            }
        },
        StartEventDataStoreIngestion: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartImport: {
            input: {
                type: "structure",
                members: {
                    Destinations: {
                        shape: "S2k"
                    },
                    ImportSource: {
                        shape: "S2l"
                    },
                    StartEventTime: {
                        type: "timestamp"
                    },
                    EndEventTime: {
                        type: "timestamp"
                    },
                    ImportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportId: {},
                    Destinations: {
                        shape: "S2k"
                    },
                    ImportSource: {
                        shape: "S2l"
                    },
                    StartEventTime: {
                        type: "timestamp"
                    },
                    EndEventTime: {
                        type: "timestamp"
                    },
                    ImportStatus: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        StartLogging: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartQuery: {
            input: {
                type: "structure",
                members: {
                    QueryStatement: {},
                    DeliveryS3Uri: {},
                    QueryAlias: {},
                    QueryParameters: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryId: {}
                }
            },
            idempotent: true
        },
        StopEventDataStoreIngestion: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopImport: {
            input: {
                type: "structure",
                required: [ "ImportId" ],
                members: {
                    ImportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportId: {},
                    ImportSource: {
                        shape: "S2l"
                    },
                    Destinations: {
                        shape: "S2k"
                    },
                    ImportStatus: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    },
                    StartEventTime: {
                        type: "timestamp"
                    },
                    EndEventTime: {
                        type: "timestamp"
                    },
                    ImportStatistics: {
                        shape: "S2o"
                    }
                }
            }
        },
        StopLogging: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateChannel: {
            input: {
                type: "structure",
                required: [ "Channel" ],
                members: {
                    Channel: {},
                    Destinations: {
                        shape: "Sg"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelArn: {},
                    Name: {},
                    Source: {},
                    Destinations: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        UpdateEventDataStore: {
            input: {
                type: "structure",
                required: [ "EventDataStore" ],
                members: {
                    EventDataStore: {},
                    Name: {},
                    AdvancedEventSelectors: {
                        shape: "So"
                    },
                    MultiRegionEnabled: {
                        type: "boolean"
                    },
                    OrganizationEnabled: {
                        type: "boolean"
                    },
                    RetentionPeriod: {
                        type: "integer"
                    },
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    BillingMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventDataStoreArn: {},
                    Name: {},
                    Status: {},
                    AdvancedEventSelectors: {
                        shape: "So"
                    },
                    MultiRegionEnabled: {
                        type: "boolean"
                    },
                    OrganizationEnabled: {
                        type: "boolean"
                    },
                    RetentionPeriod: {
                        type: "integer"
                    },
                    TerminationProtectionEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    UpdatedTimestamp: {
                        type: "timestamp"
                    },
                    KmsKeyId: {},
                    BillingMode: {},
                    FederationStatus: {},
                    FederationRoleArn: {}
                }
            },
            idempotent: true
        },
        UpdateTrail: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    SnsTopicName: {},
                    IncludeGlobalServiceEvents: {
                        type: "boolean"
                    },
                    IsMultiRegionTrail: {
                        type: "boolean"
                    },
                    EnableLogFileValidation: {
                        type: "boolean"
                    },
                    CloudWatchLogsLogGroupArn: {},
                    CloudWatchLogsRoleArn: {},
                    KmsKeyId: {},
                    IsOrganizationTrail: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    S3BucketName: {},
                    S3KeyPrefix: {},
                    SnsTopicName: {
                        deprecated: true
                    },
                    SnsTopicARN: {},
                    IncludeGlobalServiceEvents: {
                        type: "boolean"
                    },
                    IsMultiRegionTrail: {
                        type: "boolean"
                    },
                    TrailARN: {},
                    LogFileValidationEnabled: {
                        type: "boolean"
                    },
                    CloudWatchLogsLogGroupArn: {},
                    CloudWatchLogsRoleArn: {},
                    KmsKeyId: {},
                    IsOrganizationTrail: {
                        type: "boolean"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "Location" ],
                members: {
                    Type: {},
                    Location: {}
                }
            }
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                required: [ "FieldSelectors" ],
                members: {
                    Name: {},
                    FieldSelectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Field" ],
                            members: {
                                Field: {},
                                Equals: {
                                    shape: "Su"
                                },
                                StartsWith: {
                                    shape: "Su"
                                },
                                EndsWith: {
                                    shape: "Su"
                                },
                                NotEquals: {
                                    shape: "Su"
                                },
                                NotStartsWith: {
                                    shape: "Su"
                                },
                                NotEndsWith: {
                                    shape: "Su"
                                }
                            }
                        }
                    }
                }
            }
        },
        Su: {
            type: "list",
            member: {}
        },
        S1w: {
            type: "structure",
            members: {
                Name: {},
                S3BucketName: {},
                S3KeyPrefix: {},
                SnsTopicName: {
                    deprecated: true
                },
                SnsTopicARN: {},
                IncludeGlobalServiceEvents: {
                    type: "boolean"
                },
                IsMultiRegionTrail: {
                    type: "boolean"
                },
                HomeRegion: {},
                TrailARN: {},
                LogFileValidationEnabled: {
                    type: "boolean"
                },
                CloudWatchLogsLogGroupArn: {},
                CloudWatchLogsRoleArn: {},
                KmsKeyId: {},
                HasCustomEventSelectors: {
                    type: "boolean"
                },
                HasInsightSelectors: {
                    type: "boolean"
                },
                IsOrganizationTrail: {
                    type: "boolean"
                }
            }
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ReadWriteType: {},
                    IncludeManagementEvents: {
                        type: "boolean"
                    },
                    DataResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    ExcludeManagementEventSources: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S2k: {
            type: "list",
            member: {}
        },
        S2l: {
            type: "structure",
            required: [ "S3" ],
            members: {
                S3: {
                    type: "structure",
                    required: [ "S3LocationUri", "S3BucketRegion", "S3BucketAccessRoleArn" ],
                    members: {
                        S3LocationUri: {},
                        S3BucketRegion: {},
                        S3BucketAccessRoleArn: {}
                    }
                }
            }
        },
        S2o: {
            type: "structure",
            members: {
                PrefixesFound: {
                    type: "long"
                },
                PrefixesCompleted: {
                    type: "long"
                },
                FilesCompleted: {
                    type: "long"
                },
                EventsCompleted: {
                    type: "long"
                },
                FailedEntries: {
                    type: "long"
                }
            }
        },
        S2r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    InsightType: {}
                }
            }
        }
    },
    paginators: {
        DescribeTrails: {
            result_key: "trailList"
        },
        GetQueryResults: {
            input_token: "NextToken",
            output_token: "NextToken"
        },
        ListChannels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListEventDataStores: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListImportFailures: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Failures"
        },
        ListImports: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Imports"
        },
        ListPublicKeys: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "PublicKeyList"
        },
        ListQueries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "ResourceTagList"
        },
        ListTrails: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Trails"
        },
        LookupEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Events"
        }
    }
};

AWS.apiLoader.services["cloudwatch"] = {};

AWS.CloudWatch = AWS.Service.defineService("cloudwatch", [ "2010-08-01" ]);

AWS.apiLoader.services["cloudwatch"]["2010-08-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2010-08-01",
        endpointPrefix: "monitoring",
        protocol: "query",
        serviceAbbreviation: "CloudWatch",
        serviceFullName: "Amazon CloudWatch",
        serviceId: "CloudWatch",
        signatureVersion: "v4",
        uid: "monitoring-2010-08-01",
        xmlNamespace: "http://monitoring.amazonaws.com/doc/2010-08-01/"
    },
    operations: {
        DeleteAlarms: {
            input: {
                type: "structure",
                required: [ "AlarmNames" ],
                members: {
                    AlarmNames: {
                        shape: "S2"
                    }
                }
            }
        },
        DeleteAnomalyDetector: {
            input: {
                type: "structure",
                members: {
                    Namespace: {
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    MetricName: {
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    Dimensions: {
                        shape: "S7",
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    Stat: {
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    SingleMetricAnomalyDetector: {
                        shape: "Sc"
                    },
                    MetricMathAnomalyDetector: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteAnomalyDetectorResult",
                type: "structure",
                members: {}
            }
        },
        DeleteDashboards: {
            input: {
                type: "structure",
                required: [ "DashboardNames" ],
                members: {
                    DashboardNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DeleteDashboardsResult",
                type: "structure",
                members: {}
            }
        },
        DeleteInsightRules: {
            input: {
                type: "structure",
                required: [ "RuleNames" ],
                members: {
                    RuleNames: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                resultWrapper: "DeleteInsightRulesResult",
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sz"
                    }
                }
            }
        },
        DeleteMetricStream: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                resultWrapper: "DeleteMetricStreamResult",
                type: "structure",
                members: {}
            }
        },
        DescribeAlarmHistory: {
            input: {
                type: "structure",
                members: {
                    AlarmName: {},
                    AlarmTypes: {
                        shape: "S19"
                    },
                    HistoryItemType: {},
                    StartDate: {
                        type: "timestamp"
                    },
                    EndDate: {
                        type: "timestamp"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {},
                    ScanBy: {}
                }
            },
            output: {
                resultWrapper: "DescribeAlarmHistoryResult",
                type: "structure",
                members: {
                    AlarmHistoryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AlarmName: {},
                                AlarmType: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                HistoryItemType: {},
                                HistorySummary: {},
                                HistoryData: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAlarms: {
            input: {
                type: "structure",
                members: {
                    AlarmNames: {
                        shape: "S2"
                    },
                    AlarmNamePrefix: {},
                    AlarmTypes: {
                        shape: "S19"
                    },
                    ChildrenOfAlarmName: {},
                    ParentsOfAlarmName: {},
                    StateValue: {},
                    ActionPrefix: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "DescribeAlarmsResult",
                type: "structure",
                members: {
                    CompositeAlarms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActionsEnabled: {
                                    type: "boolean"
                                },
                                AlarmActions: {
                                    shape: "S1t"
                                },
                                AlarmArn: {},
                                AlarmConfigurationUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                AlarmDescription: {},
                                AlarmName: {},
                                AlarmRule: {},
                                InsufficientDataActions: {
                                    shape: "S1t"
                                },
                                OKActions: {
                                    shape: "S1t"
                                },
                                StateReason: {},
                                StateReasonData: {},
                                StateUpdatedTimestamp: {
                                    type: "timestamp"
                                },
                                StateValue: {},
                                StateTransitionedTimestamp: {
                                    type: "timestamp"
                                },
                                ActionsSuppressedBy: {},
                                ActionsSuppressedReason: {},
                                ActionsSuppressor: {},
                                ActionsSuppressorWaitPeriod: {
                                    type: "integer"
                                },
                                ActionsSuppressorExtensionPeriod: {
                                    type: "integer"
                                }
                            },
                            xmlOrder: [ "ActionsEnabled", "AlarmActions", "AlarmArn", "AlarmConfigurationUpdatedTimestamp", "AlarmDescription", "AlarmName", "AlarmRule", "InsufficientDataActions", "OKActions", "StateReason", "StateReasonData", "StateUpdatedTimestamp", "StateValue", "StateTransitionedTimestamp", "ActionsSuppressedBy", "ActionsSuppressedReason", "ActionsSuppressor", "ActionsSuppressorWaitPeriod", "ActionsSuppressorExtensionPeriod" ]
                        }
                    },
                    MetricAlarms: {
                        shape: "S23"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAlarmsForMetric: {
            input: {
                type: "structure",
                required: [ "MetricName", "Namespace" ],
                members: {
                    MetricName: {},
                    Namespace: {},
                    Statistic: {},
                    ExtendedStatistic: {},
                    Dimensions: {
                        shape: "S7"
                    },
                    Period: {
                        type: "integer"
                    },
                    Unit: {}
                }
            },
            output: {
                resultWrapper: "DescribeAlarmsForMetricResult",
                type: "structure",
                members: {
                    MetricAlarms: {
                        shape: "S23"
                    }
                }
            }
        },
        DescribeAnomalyDetectors: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Namespace: {},
                    MetricName: {},
                    Dimensions: {
                        shape: "S7"
                    },
                    AnomalyDetectorTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeAnomalyDetectorsResult",
                type: "structure",
                members: {
                    AnomalyDetectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Namespace: {
                                    deprecated: true,
                                    deprecatedMessage: "Use SingleMetricAnomalyDetector.Namespace property."
                                },
                                MetricName: {
                                    deprecated: true,
                                    deprecatedMessage: "Use SingleMetricAnomalyDetector.MetricName property."
                                },
                                Dimensions: {
                                    shape: "S7",
                                    deprecated: true,
                                    deprecatedMessage: "Use SingleMetricAnomalyDetector.Dimensions property."
                                },
                                Stat: {
                                    deprecated: true,
                                    deprecatedMessage: "Use SingleMetricAnomalyDetector.Stat property."
                                },
                                Configuration: {
                                    shape: "S2n"
                                },
                                StateValue: {},
                                SingleMetricAnomalyDetector: {
                                    shape: "Sc"
                                },
                                MetricMathAnomalyDetector: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInsightRules: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "DescribeInsightRulesResult",
                type: "structure",
                members: {
                    NextToken: {},
                    InsightRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "State", "Schema", "Definition" ],
                            members: {
                                Name: {},
                                State: {},
                                Schema: {},
                                Definition: {},
                                ManagedRule: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DisableAlarmActions: {
            input: {
                type: "structure",
                required: [ "AlarmNames" ],
                members: {
                    AlarmNames: {
                        shape: "S2"
                    }
                }
            }
        },
        DisableInsightRules: {
            input: {
                type: "structure",
                required: [ "RuleNames" ],
                members: {
                    RuleNames: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                resultWrapper: "DisableInsightRulesResult",
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sz"
                    }
                }
            }
        },
        EnableAlarmActions: {
            input: {
                type: "structure",
                required: [ "AlarmNames" ],
                members: {
                    AlarmNames: {
                        shape: "S2"
                    }
                }
            }
        },
        EnableInsightRules: {
            input: {
                type: "structure",
                required: [ "RuleNames" ],
                members: {
                    RuleNames: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                resultWrapper: "EnableInsightRulesResult",
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sz"
                    }
                }
            }
        },
        GetDashboard: {
            input: {
                type: "structure",
                required: [ "DashboardName" ],
                members: {
                    DashboardName: {}
                }
            },
            output: {
                resultWrapper: "GetDashboardResult",
                type: "structure",
                members: {
                    DashboardArn: {},
                    DashboardBody: {},
                    DashboardName: {}
                }
            }
        },
        GetInsightRuleReport: {
            input: {
                type: "structure",
                required: [ "RuleName", "StartTime", "EndTime", "Period" ],
                members: {
                    RuleName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Period: {
                        type: "integer"
                    },
                    MaxContributorCount: {
                        type: "integer"
                    },
                    Metrics: {
                        type: "list",
                        member: {}
                    },
                    OrderBy: {}
                }
            },
            output: {
                resultWrapper: "GetInsightRuleReportResult",
                type: "structure",
                members: {
                    KeyLabels: {
                        type: "list",
                        member: {}
                    },
                    AggregationStatistic: {},
                    AggregateValue: {
                        type: "double"
                    },
                    ApproximateUniqueCount: {
                        type: "long"
                    },
                    Contributors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Keys", "ApproximateAggregateValue", "Datapoints" ],
                            members: {
                                Keys: {
                                    type: "list",
                                    member: {}
                                },
                                ApproximateAggregateValue: {
                                    type: "double"
                                },
                                Datapoints: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Timestamp", "ApproximateValue" ],
                                        members: {
                                            Timestamp: {
                                                type: "timestamp"
                                            },
                                            ApproximateValue: {
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    MetricDatapoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Timestamp" ],
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                UniqueContributors: {
                                    type: "double"
                                },
                                MaxContributorValue: {
                                    type: "double"
                                },
                                SampleCount: {
                                    type: "double"
                                },
                                Average: {
                                    type: "double"
                                },
                                Sum: {
                                    type: "double"
                                },
                                Minimum: {
                                    type: "double"
                                },
                                Maximum: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetMetricData: {
            input: {
                type: "structure",
                required: [ "MetricDataQueries", "StartTime", "EndTime" ],
                members: {
                    MetricDataQueries: {
                        shape: "Se"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {},
                    ScanBy: {},
                    MaxDatapoints: {
                        type: "integer"
                    },
                    LabelOptions: {
                        type: "structure",
                        members: {
                            Timezone: {}
                        }
                    }
                }
            },
            output: {
                resultWrapper: "GetMetricDataResult",
                type: "structure",
                members: {
                    MetricDataResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Label: {},
                                Timestamps: {
                                    type: "list",
                                    member: {
                                        type: "timestamp"
                                    }
                                },
                                Values: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                },
                                StatusCode: {},
                                Messages: {
                                    shape: "S45"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    Messages: {
                        shape: "S45"
                    }
                }
            }
        },
        GetMetricStatistics: {
            input: {
                type: "structure",
                required: [ "Namespace", "MetricName", "StartTime", "EndTime", "Period" ],
                members: {
                    Namespace: {},
                    MetricName: {},
                    Dimensions: {
                        shape: "S7"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Period: {
                        type: "integer"
                    },
                    Statistics: {
                        type: "list",
                        member: {}
                    },
                    ExtendedStatistics: {
                        type: "list",
                        member: {}
                    },
                    Unit: {}
                }
            },
            output: {
                resultWrapper: "GetMetricStatisticsResult",
                type: "structure",
                members: {
                    Label: {},
                    Datapoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                SampleCount: {
                                    type: "double"
                                },
                                Average: {
                                    type: "double"
                                },
                                Sum: {
                                    type: "double"
                                },
                                Minimum: {
                                    type: "double"
                                },
                                Maximum: {
                                    type: "double"
                                },
                                Unit: {},
                                ExtendedStatistics: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "double"
                                    }
                                }
                            },
                            xmlOrder: [ "Timestamp", "SampleCount", "Average", "Sum", "Minimum", "Maximum", "Unit", "ExtendedStatistics" ]
                        }
                    }
                }
            }
        },
        GetMetricStream: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                resultWrapper: "GetMetricStreamResult",
                type: "structure",
                members: {
                    Arn: {},
                    Name: {},
                    IncludeFilters: {
                        shape: "S4j"
                    },
                    ExcludeFilters: {
                        shape: "S4j"
                    },
                    FirehoseArn: {},
                    RoleArn: {},
                    State: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    LastUpdateDate: {
                        type: "timestamp"
                    },
                    OutputFormat: {},
                    StatisticsConfigurations: {
                        shape: "S4o"
                    },
                    IncludeLinkedAccountsMetrics: {
                        type: "boolean"
                    }
                }
            }
        },
        GetMetricWidgetImage: {
            input: {
                type: "structure",
                required: [ "MetricWidget" ],
                members: {
                    MetricWidget: {},
                    OutputFormat: {}
                }
            },
            output: {
                resultWrapper: "GetMetricWidgetImageResult",
                type: "structure",
                members: {
                    MetricWidgetImage: {
                        type: "blob"
                    }
                }
            }
        },
        ListDashboards: {
            input: {
                type: "structure",
                members: {
                    DashboardNamePrefix: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListDashboardsResult",
                type: "structure",
                members: {
                    DashboardEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DashboardName: {},
                                DashboardArn: {},
                                LastModified: {
                                    type: "timestamp"
                                },
                                Size: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListManagedInsightRules: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListManagedInsightRulesResult",
                type: "structure",
                members: {
                    ManagedRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateName: {},
                                ResourceARN: {},
                                RuleState: {
                                    type: "structure",
                                    required: [ "RuleName", "State" ],
                                    members: {
                                        RuleName: {},
                                        State: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMetricStreams: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListMetricStreamsResult",
                type: "structure",
                members: {
                    NextToken: {},
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                LastUpdateDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                FirehoseArn: {},
                                State: {},
                                OutputFormat: {}
                            }
                        }
                    }
                }
            }
        },
        ListMetrics: {
            input: {
                type: "structure",
                members: {
                    Namespace: {},
                    MetricName: {},
                    Dimensions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {},
                    RecentlyActive: {},
                    IncludeLinkedAccounts: {
                        type: "boolean"
                    },
                    OwningAccount: {}
                }
            },
            output: {
                resultWrapper: "ListMetricsResult",
                type: "structure",
                members: {
                    Metrics: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    NextToken: {},
                    OwningAccounts: {
                        type: "list",
                        member: {}
                    }
                },
                xmlOrder: [ "Metrics", "NextToken", "OwningAccounts" ]
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5s"
                    }
                }
            }
        },
        PutAnomalyDetector: {
            input: {
                type: "structure",
                members: {
                    Namespace: {
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    MetricName: {
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    Dimensions: {
                        shape: "S7",
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    Stat: {
                        deprecated: true,
                        deprecatedMessage: "Use SingleMetricAnomalyDetector."
                    },
                    Configuration: {
                        shape: "S2n"
                    },
                    SingleMetricAnomalyDetector: {
                        shape: "Sc"
                    },
                    MetricMathAnomalyDetector: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                resultWrapper: "PutAnomalyDetectorResult",
                type: "structure",
                members: {}
            }
        },
        PutCompositeAlarm: {
            input: {
                type: "structure",
                required: [ "AlarmName", "AlarmRule" ],
                members: {
                    ActionsEnabled: {
                        type: "boolean"
                    },
                    AlarmActions: {
                        shape: "S1t"
                    },
                    AlarmDescription: {},
                    AlarmName: {},
                    AlarmRule: {},
                    InsufficientDataActions: {
                        shape: "S1t"
                    },
                    OKActions: {
                        shape: "S1t"
                    },
                    Tags: {
                        shape: "S5s"
                    },
                    ActionsSuppressor: {},
                    ActionsSuppressorWaitPeriod: {
                        type: "integer"
                    },
                    ActionsSuppressorExtensionPeriod: {
                        type: "integer"
                    }
                }
            }
        },
        PutDashboard: {
            input: {
                type: "structure",
                required: [ "DashboardName", "DashboardBody" ],
                members: {
                    DashboardName: {},
                    DashboardBody: {}
                }
            },
            output: {
                resultWrapper: "PutDashboardResult",
                type: "structure",
                members: {
                    DashboardValidationMessages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DataPath: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        PutInsightRule: {
            input: {
                type: "structure",
                required: [ "RuleName", "RuleDefinition" ],
                members: {
                    RuleName: {},
                    RuleState: {},
                    RuleDefinition: {},
                    Tags: {
                        shape: "S5s"
                    }
                }
            },
            output: {
                resultWrapper: "PutInsightRuleResult",
                type: "structure",
                members: {}
            }
        },
        PutManagedInsightRules: {
            input: {
                type: "structure",
                required: [ "ManagedRules" ],
                members: {
                    ManagedRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TemplateName", "ResourceARN" ],
                            members: {
                                TemplateName: {},
                                ResourceARN: {},
                                Tags: {
                                    shape: "S5s"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "PutManagedInsightRulesResult",
                type: "structure",
                members: {
                    Failures: {
                        shape: "Sz"
                    }
                }
            }
        },
        PutMetricAlarm: {
            input: {
                type: "structure",
                required: [ "AlarmName", "EvaluationPeriods", "ComparisonOperator" ],
                members: {
                    AlarmName: {},
                    AlarmDescription: {},
                    ActionsEnabled: {
                        type: "boolean"
                    },
                    OKActions: {
                        shape: "S1t"
                    },
                    AlarmActions: {
                        shape: "S1t"
                    },
                    InsufficientDataActions: {
                        shape: "S1t"
                    },
                    MetricName: {},
                    Namespace: {},
                    Statistic: {},
                    ExtendedStatistic: {},
                    Dimensions: {
                        shape: "S7"
                    },
                    Period: {
                        type: "integer"
                    },
                    Unit: {},
                    EvaluationPeriods: {
                        type: "integer"
                    },
                    DatapointsToAlarm: {
                        type: "integer"
                    },
                    Threshold: {
                        type: "double"
                    },
                    ComparisonOperator: {},
                    TreatMissingData: {},
                    EvaluateLowSampleCountPercentile: {},
                    Metrics: {
                        shape: "Se"
                    },
                    Tags: {
                        shape: "S5s"
                    },
                    ThresholdMetricId: {}
                }
            }
        },
        PutMetricData: {
            input: {
                type: "structure",
                required: [ "Namespace", "MetricData" ],
                members: {
                    Namespace: {},
                    MetricData: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MetricName" ],
                            members: {
                                MetricName: {},
                                Dimensions: {
                                    shape: "S7"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Value: {
                                    type: "double"
                                },
                                StatisticValues: {
                                    type: "structure",
                                    required: [ "SampleCount", "Sum", "Minimum", "Maximum" ],
                                    members: {
                                        SampleCount: {
                                            type: "double"
                                        },
                                        Sum: {
                                            type: "double"
                                        },
                                        Minimum: {
                                            type: "double"
                                        },
                                        Maximum: {
                                            type: "double"
                                        }
                                    }
                                },
                                Values: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                },
                                Counts: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                },
                                Unit: {},
                                StorageResolution: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutMetricStream: {
            input: {
                type: "structure",
                required: [ "Name", "FirehoseArn", "RoleArn", "OutputFormat" ],
                members: {
                    Name: {},
                    IncludeFilters: {
                        shape: "S4j"
                    },
                    ExcludeFilters: {
                        shape: "S4j"
                    },
                    FirehoseArn: {},
                    RoleArn: {},
                    OutputFormat: {},
                    Tags: {
                        shape: "S5s"
                    },
                    StatisticsConfigurations: {
                        shape: "S4o"
                    },
                    IncludeLinkedAccountsMetrics: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "PutMetricStreamResult",
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        SetAlarmState: {
            input: {
                type: "structure",
                required: [ "AlarmName", "StateValue", "StateReason" ],
                members: {
                    AlarmName: {},
                    StateValue: {},
                    StateReason: {},
                    StateReasonData: {}
                }
            }
        },
        StartMetricStreams: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "S6n"
                    }
                }
            },
            output: {
                resultWrapper: "StartMetricStreamsResult",
                type: "structure",
                members: {}
            }
        },
        StopMetricStreams: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "S6n"
                    }
                }
            },
            output: {
                resultWrapper: "StopMetricStreamsResult",
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S5s"
                    }
                }
            },
            output: {
                resultWrapper: "TagResourceResult",
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "UntagResourceResult",
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                },
                xmlOrder: [ "Name", "Value" ]
            }
        },
        Sc: {
            type: "structure",
            members: {
                Namespace: {},
                MetricName: {},
                Dimensions: {
                    shape: "S7"
                },
                Stat: {}
            }
        },
        Sd: {
            type: "structure",
            members: {
                MetricDataQueries: {
                    shape: "Se"
                }
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    MetricStat: {
                        type: "structure",
                        required: [ "Metric", "Period", "Stat" ],
                        members: {
                            Metric: {
                                shape: "Si"
                            },
                            Period: {
                                type: "integer"
                            },
                            Stat: {},
                            Unit: {}
                        }
                    },
                    Expression: {},
                    Label: {},
                    ReturnData: {
                        type: "boolean"
                    },
                    Period: {
                        type: "integer"
                    },
                    AccountId: {}
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                Namespace: {},
                MetricName: {},
                Dimensions: {
                    shape: "S7"
                }
            },
            xmlOrder: [ "Namespace", "MetricName", "Dimensions" ]
        },
        Sw: {
            type: "list",
            member: {}
        },
        Sz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FailureResource: {},
                    ExceptionType: {},
                    FailureCode: {},
                    FailureDescription: {}
                }
            }
        },
        S19: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "list",
            member: {}
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AlarmName: {},
                    AlarmArn: {},
                    AlarmDescription: {},
                    AlarmConfigurationUpdatedTimestamp: {
                        type: "timestamp"
                    },
                    ActionsEnabled: {
                        type: "boolean"
                    },
                    OKActions: {
                        shape: "S1t"
                    },
                    AlarmActions: {
                        shape: "S1t"
                    },
                    InsufficientDataActions: {
                        shape: "S1t"
                    },
                    StateValue: {},
                    StateReason: {},
                    StateReasonData: {},
                    StateUpdatedTimestamp: {
                        type: "timestamp"
                    },
                    MetricName: {},
                    Namespace: {},
                    Statistic: {},
                    ExtendedStatistic: {},
                    Dimensions: {
                        shape: "S7"
                    },
                    Period: {
                        type: "integer"
                    },
                    Unit: {},
                    EvaluationPeriods: {
                        type: "integer"
                    },
                    DatapointsToAlarm: {
                        type: "integer"
                    },
                    Threshold: {
                        type: "double"
                    },
                    ComparisonOperator: {},
                    TreatMissingData: {},
                    EvaluateLowSampleCountPercentile: {},
                    Metrics: {
                        shape: "Se"
                    },
                    ThresholdMetricId: {},
                    EvaluationState: {},
                    StateTransitionedTimestamp: {
                        type: "timestamp"
                    }
                },
                xmlOrder: [ "AlarmName", "AlarmArn", "AlarmDescription", "AlarmConfigurationUpdatedTimestamp", "ActionsEnabled", "OKActions", "AlarmActions", "InsufficientDataActions", "StateValue", "StateReason", "StateReasonData", "StateUpdatedTimestamp", "MetricName", "Namespace", "Statistic", "Dimensions", "Period", "Unit", "EvaluationPeriods", "Threshold", "ComparisonOperator", "ExtendedStatistic", "TreatMissingData", "EvaluateLowSampleCountPercentile", "DatapointsToAlarm", "Metrics", "ThresholdMetricId", "EvaluationState", "StateTransitionedTimestamp" ]
            }
        },
        S2n: {
            type: "structure",
            members: {
                ExcludedTimeRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "StartTime", "EndTime" ],
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            }
                        },
                        xmlOrder: [ "StartTime", "EndTime" ]
                    }
                },
                MetricTimezone: {}
            }
        },
        S45: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Code: {},
                    Value: {}
                }
            }
        },
        S4j: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Namespace: {},
                    MetricNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "IncludeMetrics", "AdditionalStatistics" ],
                members: {
                    IncludeMetrics: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Namespace", "MetricName" ],
                            members: {
                                Namespace: {},
                                MetricName: {}
                            }
                        }
                    },
                    AdditionalStatistics: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S5s: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S6n: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeAlarmHistory: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: "AlarmHistoryItems"
        },
        DescribeAlarms: {
            input_token: "NextToken",
            limit_key: "MaxRecords",
            output_token: "NextToken",
            result_key: [ "MetricAlarms", "CompositeAlarms" ]
        },
        DescribeAlarmsForMetric: {
            result_key: "MetricAlarms"
        },
        DescribeAnomalyDetectors: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AnomalyDetectors"
        },
        DescribeInsightRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMetricData: {
            input_token: "NextToken",
            limit_key: "MaxDatapoints",
            output_token: "NextToken",
            result_key: [ "MetricDataResults", "Messages" ]
        },
        ListDashboards: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "DashboardEntries"
        },
        ListManagedInsightRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListMetricStreams: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListMetrics: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: [ "Metrics", "OwningAccounts" ]
        }
    },
    waiters: {
        AlarmExists: {
            delay: 5,
            maxAttempts: 40,
            operation: "DescribeAlarms",
            acceptors: [ {
                matcher: "path",
                expected: true,
                argument: "length(MetricAlarms[]) > `0`",
                state: "success"
            } ]
        },
        CompositeAlarmExists: {
            delay: 5,
            maxAttempts: 40,
            operation: "DescribeAlarms",
            acceptors: [ {
                matcher: "path",
                expected: true,
                argument: "length(CompositeAlarms[]) > `0`",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["cloudwatchevents"] = {};

AWS.CloudWatchEvents = AWS.Service.defineService("cloudwatchevents", [ "2015-10-07" ]);

AWS.apiLoader.services["cloudwatchevents"]["2015-10-07"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-10-07",
        endpointPrefix: "events",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon CloudWatch Events",
        serviceId: "CloudWatch Events",
        signatureVersion: "v4",
        targetPrefix: "AWSEvents",
        uid: "events-2015-10-07"
    },
    operations: {
        ActivateEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        CancelReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName" ],
                members: {
                    ReplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayArn: {},
                    State: {},
                    StateReason: {}
                }
            }
        },
        CreateApiDestination: {
            input: {
                type: "structure",
                required: [ "Name", "ConnectionArn", "InvocationEndpoint", "HttpMethod" ],
                members: {
                    Name: {},
                    Description: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    ApiDestinationState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName", "EventSourceArn" ],
                members: {
                    ArchiveName: {},
                    EventSourceArn: {},
                    Description: {},
                    EventPattern: {},
                    RetentionDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "Name", "AuthorizationType", "AuthParameters" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthorizationType: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                required: [ "Username", "Password" ],
                                members: {
                                    Username: {},
                                    Password: {
                                        shape: "S11"
                                    }
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                required: [ "ClientParameters", "AuthorizationEndpoint", "HttpMethod" ],
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        required: [ "ClientID", "ClientSecret" ],
                                        members: {
                                            ClientID: {},
                                            ClientSecret: {
                                                shape: "S11"
                                            }
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S15"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                required: [ "ApiKeyName", "ApiKeyValue" ],
                                members: {
                                    ApiKeyName: {},
                                    ApiKeyValue: {
                                        shape: "S11"
                                    }
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S15"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateEventBus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventSourceName: {},
                    Tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventBusArn: {}
                }
            }
        },
        CreatePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name", "Account" ],
                members: {
                    Name: {},
                    Account: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSourceArn: {}
                }
            }
        },
        DeactivateEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeauthorizeConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteEventBus: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            }
        },
        DeletePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name", "Account" ],
                members: {
                    Name: {},
                    Account: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {},
                    Force: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    Name: {},
                    Description: {},
                    ApiDestinationState: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    ArchiveName: {},
                    EventSourceArn: {},
                    Description: {},
                    EventPattern: {},
                    State: {},
                    StateReason: {},
                    RetentionDays: {
                        type: "integer"
                    },
                    SizeBytes: {
                        type: "long"
                    },
                    EventCount: {
                        type: "long"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    Name: {},
                    Description: {},
                    ConnectionState: {},
                    StateReason: {},
                    AuthorizationType: {},
                    SecretArn: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                members: {
                                    Username: {}
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        members: {
                                            ClientID: {}
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S15"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                members: {
                                    ApiKeyName: {}
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S15"
                            }
                        }
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeEventBus: {
            input: {
                type: "structure",
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    Policy: {}
                }
            }
        },
        DescribeEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedBy: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ExpirationTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            }
        },
        DescribePartnerEventSource: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {}
                }
            }
        },
        DescribeReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName" ],
                members: {
                    ReplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayName: {},
                    ReplayArn: {},
                    Description: {},
                    State: {},
                    StateReason: {},
                    EventSourceArn: {},
                    Destination: {
                        shape: "S2y"
                    },
                    EventStartTime: {
                        type: "timestamp"
                    },
                    EventEndTime: {
                        type: "timestamp"
                    },
                    EventLastReplayedTime: {
                        type: "timestamp"
                    },
                    ReplayStartTime: {
                        type: "timestamp"
                    },
                    ReplayEndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Arn: {},
                    EventPattern: {},
                    ScheduleExpression: {},
                    State: {},
                    Description: {},
                    RoleArn: {},
                    ManagedBy: {},
                    EventBusName: {},
                    CreatedBy: {}
                }
            }
        },
        DisableRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            }
        },
        EnableRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    EventBusName: {}
                }
            }
        },
        ListApiDestinations: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    ConnectionArn: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiDestinationArn: {},
                                Name: {},
                                ApiDestinationState: {},
                                ConnectionArn: {},
                                InvocationEndpoint: {},
                                HttpMethod: {},
                                InvocationRateLimitPerSecond: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListArchives: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    EventSourceArn: {},
                    State: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Archives: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ArchiveName: {},
                                EventSourceArn: {},
                                State: {},
                                StateReason: {},
                                RetentionDays: {
                                    type: "integer"
                                },
                                SizeBytes: {
                                    type: "long"
                                },
                                EventCount: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnections: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    ConnectionState: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionArn: {},
                                Name: {},
                                ConnectionState: {},
                                StateReason: {},
                                AuthorizationType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastAuthorizedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventBuses: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventBuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                Policy: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventSources: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedBy: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ExpirationTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPartnerEventSourceAccounts: {
            input: {
                type: "structure",
                required: [ "EventSourceName" ],
                members: {
                    EventSourceName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PartnerEventSourceAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Account: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ExpirationTime: {
                                    type: "timestamp"
                                },
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPartnerEventSources: {
            input: {
                type: "structure",
                required: [ "NamePrefix" ],
                members: {
                    NamePrefix: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PartnerEventSources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListReplays: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    State: {},
                    EventSourceArn: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Replays: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReplayName: {},
                                EventSourceArn: {},
                                State: {},
                                StateReason: {},
                                EventStartTime: {
                                    type: "timestamp"
                                },
                                EventEndTime: {
                                    type: "timestamp"
                                },
                                EventLastReplayedTime: {
                                    type: "timestamp"
                                },
                                ReplayStartTime: {
                                    type: "timestamp"
                                },
                                ReplayEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRuleNamesByTarget: {
            input: {
                type: "structure",
                required: [ "TargetArn" ],
                members: {
                    TargetArn: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NamePrefix: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                EventPattern: {},
                                State: {},
                                Description: {},
                                ScheduleExpression: {},
                                RoleArn: {},
                                ManagedBy: {},
                                EventBusName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        ListTargetsByRule: {
            input: {
                type: "structure",
                required: [ "Rule" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        shape: "S4n"
                    },
                    NextToken: {}
                }
            }
        },
        PutEvents: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Time: {
                                    type: "timestamp"
                                },
                                Source: {},
                                Resources: {
                                    shape: "S6n"
                                },
                                DetailType: {},
                                Detail: {},
                                EventBusName: {},
                                TraceHeader: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        PutPartnerEvents: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Time: {
                                    type: "timestamp"
                                },
                                Source: {},
                                Resources: {
                                    shape: "S6n"
                                },
                                DetailType: {},
                                Detail: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        PutPermission: {
            input: {
                type: "structure",
                members: {
                    EventBusName: {},
                    Action: {},
                    Principal: {},
                    StatementId: {},
                    Condition: {
                        type: "structure",
                        required: [ "Type", "Key", "Value" ],
                        members: {
                            Type: {},
                            Key: {},
                            Value: {}
                        }
                    },
                    Policy: {}
                }
            }
        },
        PutRule: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    ScheduleExpression: {},
                    EventPattern: {},
                    State: {},
                    Description: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S1o"
                    },
                    EventBusName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleArn: {}
                }
            }
        },
        PutTargets: {
            input: {
                type: "structure",
                required: [ "Rule", "Targets" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    Targets: {
                        shape: "S4n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    FailedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        RemovePermission: {
            input: {
                type: "structure",
                members: {
                    StatementId: {},
                    RemoveAllPermissions: {
                        type: "boolean"
                    },
                    EventBusName: {}
                }
            }
        },
        RemoveTargets: {
            input: {
                type: "structure",
                required: [ "Rule", "Ids" ],
                members: {
                    Rule: {},
                    EventBusName: {},
                    Ids: {
                        type: "list",
                        member: {}
                    },
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEntryCount: {
                        type: "integer"
                    },
                    FailedEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        StartReplay: {
            input: {
                type: "structure",
                required: [ "ReplayName", "EventSourceArn", "EventStartTime", "EventEndTime", "Destination" ],
                members: {
                    ReplayName: {},
                    Description: {},
                    EventSourceArn: {},
                    EventStartTime: {
                        type: "timestamp"
                    },
                    EventEndTime: {
                        type: "timestamp"
                    },
                    Destination: {
                        shape: "S2y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplayArn: {},
                    State: {},
                    StateReason: {},
                    ReplayStartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestEventPattern: {
            input: {
                type: "structure",
                required: [ "EventPattern", "Event" ],
                members: {
                    EventPattern: {},
                    Event: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {
                        type: "boolean"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApiDestination: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    ConnectionArn: {},
                    InvocationEndpoint: {},
                    HttpMethod: {},
                    InvocationRateLimitPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiDestinationArn: {},
                    ApiDestinationState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateArchive: {
            input: {
                type: "structure",
                required: [ "ArchiveName" ],
                members: {
                    ArchiveName: {},
                    Description: {},
                    EventPattern: {},
                    RetentionDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArchiveArn: {},
                    State: {},
                    StateReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdateConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    AuthorizationType: {},
                    AuthParameters: {
                        type: "structure",
                        members: {
                            BasicAuthParameters: {
                                type: "structure",
                                members: {
                                    Username: {},
                                    Password: {
                                        shape: "S11"
                                    }
                                }
                            },
                            OAuthParameters: {
                                type: "structure",
                                members: {
                                    ClientParameters: {
                                        type: "structure",
                                        members: {
                                            ClientID: {},
                                            ClientSecret: {
                                                shape: "S11"
                                            }
                                        }
                                    },
                                    AuthorizationEndpoint: {},
                                    HttpMethod: {},
                                    OAuthHttpParameters: {
                                        shape: "S15"
                                    }
                                }
                            },
                            ApiKeyAuthParameters: {
                                type: "structure",
                                members: {
                                    ApiKeyName: {},
                                    ApiKeyValue: {
                                        shape: "S11"
                                    }
                                }
                            },
                            InvocationHttpParameters: {
                                shape: "S15"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionArn: {},
                    ConnectionState: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastAuthorizedTime: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S11: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "structure",
            members: {
                HeaderParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            },
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                },
                QueryStringParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            },
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                },
                BodyParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {
                                type: "string",
                                sensitive: true
                            },
                            IsValueSecret: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S1o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S2y: {
            type: "structure",
            required: [ "Arn" ],
            members: {
                Arn: {},
                FilterArns: {
                    type: "list",
                    member: {}
                }
            }
        },
        S4n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id", "Arn" ],
                members: {
                    Id: {},
                    Arn: {},
                    RoleArn: {},
                    Input: {},
                    InputPath: {},
                    InputTransformer: {
                        type: "structure",
                        required: [ "InputTemplate" ],
                        members: {
                            InputPathsMap: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            InputTemplate: {}
                        }
                    },
                    KinesisParameters: {
                        type: "structure",
                        required: [ "PartitionKeyPath" ],
                        members: {
                            PartitionKeyPath: {}
                        }
                    },
                    RunCommandParameters: {
                        type: "structure",
                        required: [ "RunCommandTargets" ],
                        members: {
                            RunCommandTargets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Key", "Values" ],
                                    members: {
                                        Key: {},
                                        Values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EcsParameters: {
                        type: "structure",
                        required: [ "TaskDefinitionArn" ],
                        members: {
                            TaskDefinitionArn: {},
                            TaskCount: {
                                type: "integer"
                            },
                            LaunchType: {},
                            NetworkConfiguration: {
                                type: "structure",
                                members: {
                                    awsvpcConfiguration: {
                                        type: "structure",
                                        required: [ "Subnets" ],
                                        members: {
                                            Subnets: {
                                                shape: "S59"
                                            },
                                            SecurityGroups: {
                                                shape: "S59"
                                            },
                                            AssignPublicIp: {}
                                        }
                                    }
                                }
                            },
                            PlatformVersion: {},
                            Group: {},
                            CapacityProviderStrategy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "capacityProvider" ],
                                    members: {
                                        capacityProvider: {},
                                        weight: {
                                            type: "integer"
                                        },
                                        base: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            EnableECSManagedTags: {
                                type: "boolean"
                            },
                            EnableExecuteCommand: {
                                type: "boolean"
                            },
                            PlacementConstraints: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        type: {},
                                        expression: {}
                                    }
                                }
                            },
                            PlacementStrategy: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        type: {},
                                        field: {}
                                    }
                                }
                            },
                            PropagateTags: {},
                            ReferenceId: {},
                            Tags: {
                                shape: "S1o"
                            }
                        }
                    },
                    BatchParameters: {
                        type: "structure",
                        required: [ "JobDefinition", "JobName" ],
                        members: {
                            JobDefinition: {},
                            JobName: {},
                            ArrayProperties: {
                                type: "structure",
                                members: {
                                    Size: {
                                        type: "integer"
                                    }
                                }
                            },
                            RetryStrategy: {
                                type: "structure",
                                members: {
                                    Attempts: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    SqsParameters: {
                        type: "structure",
                        members: {
                            MessageGroupId: {}
                        }
                    },
                    HttpParameters: {
                        type: "structure",
                        members: {
                            PathParameterValues: {
                                type: "list",
                                member: {}
                            },
                            HeaderParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            QueryStringParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    RedshiftDataParameters: {
                        type: "structure",
                        required: [ "Database", "Sql" ],
                        members: {
                            SecretManagerArn: {},
                            Database: {},
                            DbUser: {},
                            Sql: {},
                            StatementName: {},
                            WithEvent: {
                                type: "boolean"
                            }
                        }
                    },
                    SageMakerPipelineParameters: {
                        type: "structure",
                        members: {
                            PipelineParameterList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "Value" ],
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            }
                        }
                    },
                    DeadLetterConfig: {
                        type: "structure",
                        members: {
                            Arn: {}
                        }
                    },
                    RetryPolicy: {
                        type: "structure",
                        members: {
                            MaximumRetryAttempts: {
                                type: "integer"
                            },
                            MaximumEventAgeInSeconds: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S59: {
            type: "list",
            member: {}
        },
        S6n: {
            type: "list",
            member: {}
        }
    },
    paginators: {}
};

AWS.apiLoader.services["cloudwatchlogs"] = {};

AWS.CloudWatchLogs = AWS.Service.defineService("cloudwatchlogs", [ "2014-03-28" ]);

AWS.apiLoader.services["cloudwatchlogs"]["2014-03-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-03-28",
        endpointPrefix: "logs",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon CloudWatch Logs",
        serviceId: "CloudWatch Logs",
        signatureVersion: "v4",
        targetPrefix: "Logs_20140328",
        uid: "logs-2014-03-28"
    },
    operations: {
        AssociateKmsKey: {
            input: {
                type: "structure",
                required: [ "kmsKeyId" ],
                members: {
                    logGroupName: {},
                    kmsKeyId: {},
                    resourceIdentifier: {}
                }
            }
        },
        CancelExportTask: {
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {}
                }
            }
        },
        CreateDelivery: {
            input: {
                type: "structure",
                required: [ "deliverySourceName", "deliveryDestinationArn" ],
                members: {
                    deliverySourceName: {},
                    deliveryDestinationArn: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    delivery: {
                        shape: "Se"
                    }
                }
            }
        },
        CreateExportTask: {
            input: {
                type: "structure",
                required: [ "logGroupName", "from", "to", "destination" ],
                members: {
                    taskName: {},
                    logGroupName: {},
                    logStreamNamePrefix: {},
                    from: {
                        type: "long"
                    },
                    to: {
                        type: "long"
                    },
                    destination: {},
                    destinationPrefix: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        CreateLogAnomalyDetector: {
            input: {
                type: "structure",
                required: [ "logGroupArnList" ],
                members: {
                    logGroupArnList: {
                        shape: "Sp"
                    },
                    detectorName: {},
                    evaluationFrequency: {},
                    filterPattern: {},
                    kmsKeyId: {},
                    anomalyVisibilityTime: {
                        type: "long"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    anomalyDetectorArn: {}
                }
            }
        },
        CreateLogGroup: {
            input: {
                type: "structure",
                required: [ "logGroupName" ],
                members: {
                    logGroupName: {},
                    kmsKeyId: {},
                    tags: {
                        shape: "Sa"
                    },
                    logGroupClass: {}
                }
            }
        },
        CreateLogStream: {
            input: {
                type: "structure",
                required: [ "logGroupName", "logStreamName" ],
                members: {
                    logGroupName: {},
                    logStreamName: {}
                }
            }
        },
        DeleteAccountPolicy: {
            input: {
                type: "structure",
                required: [ "policyName", "policyType" ],
                members: {
                    policyName: {},
                    policyType: {}
                }
            }
        },
        DeleteDataProtectionPolicy: {
            input: {
                type: "structure",
                required: [ "logGroupIdentifier" ],
                members: {
                    logGroupIdentifier: {}
                }
            }
        },
        DeleteDelivery: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            }
        },
        DeleteDeliveryDestination: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        DeleteDeliveryDestinationPolicy: {
            input: {
                type: "structure",
                required: [ "deliveryDestinationName" ],
                members: {
                    deliveryDestinationName: {}
                }
            }
        },
        DeleteDeliverySource: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        DeleteDestination: {
            input: {
                type: "structure",
                required: [ "destinationName" ],
                members: {
                    destinationName: {}
                }
            }
        },
        DeleteLogAnomalyDetector: {
            input: {
                type: "structure",
                required: [ "anomalyDetectorArn" ],
                members: {
                    anomalyDetectorArn: {}
                }
            }
        },
        DeleteLogGroup: {
            input: {
                type: "structure",
                required: [ "logGroupName" ],
                members: {
                    logGroupName: {}
                }
            }
        },
        DeleteLogStream: {
            input: {
                type: "structure",
                required: [ "logGroupName", "logStreamName" ],
                members: {
                    logGroupName: {},
                    logStreamName: {}
                }
            }
        },
        DeleteMetricFilter: {
            input: {
                type: "structure",
                required: [ "logGroupName", "filterName" ],
                members: {
                    logGroupName: {},
                    filterName: {}
                }
            }
        },
        DeleteQueryDefinition: {
            input: {
                type: "structure",
                required: [ "queryDefinitionId" ],
                members: {
                    queryDefinitionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    success: {
                        type: "boolean"
                    }
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                members: {
                    policyName: {}
                }
            }
        },
        DeleteRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "logGroupName" ],
                members: {
                    logGroupName: {}
                }
            }
        },
        DeleteSubscriptionFilter: {
            input: {
                type: "structure",
                required: [ "logGroupName", "filterName" ],
                members: {
                    logGroupName: {},
                    filterName: {}
                }
            }
        },
        DescribeAccountPolicies: {
            input: {
                type: "structure",
                required: [ "policyType" ],
                members: {
                    policyType: {},
                    policyName: {},
                    accountIdentifiers: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accountPolicies: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    }
                }
            }
        },
        DescribeDeliveries: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deliveries: {
                        type: "list",
                        member: {
                            shape: "Se"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeDeliveryDestinations: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deliveryDestinations: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeDeliverySources: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deliverySources: {
                        type: "list",
                        member: {
                            shape: "S2a"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeDestinations: {
            input: {
                type: "structure",
                members: {
                    DestinationNamePrefix: {},
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    destinations: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeExportTasks: {
            input: {
                type: "structure",
                members: {
                    taskId: {},
                    statusCode: {},
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                taskId: {},
                                taskName: {},
                                logGroupName: {},
                                from: {
                                    type: "long"
                                },
                                to: {
                                    type: "long"
                                },
                                destination: {},
                                destinationPrefix: {},
                                status: {
                                    type: "structure",
                                    members: {
                                        code: {},
                                        message: {}
                                    }
                                },
                                executionInfo: {
                                    type: "structure",
                                    members: {
                                        creationTime: {
                                            type: "long"
                                        },
                                        completionTime: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeLogGroups: {
            input: {
                type: "structure",
                members: {
                    accountIdentifiers: {
                        shape: "S1p"
                    },
                    logGroupNamePrefix: {},
                    logGroupNamePattern: {},
                    nextToken: {},
                    limit: {
                        type: "integer"
                    },
                    includeLinkedAccounts: {
                        type: "boolean"
                    },
                    logGroupClass: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    logGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                logGroupName: {},
                                creationTime: {
                                    type: "long"
                                },
                                retentionInDays: {
                                    type: "integer"
                                },
                                metricFilterCount: {
                                    type: "integer"
                                },
                                arn: {},
                                storedBytes: {
                                    type: "long"
                                },
                                kmsKeyId: {},
                                dataProtectionStatus: {},
                                inheritedProperties: {
                                    type: "list",
                                    member: {}
                                },
                                logGroupClass: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeLogStreams: {
            input: {
                type: "structure",
                members: {
                    logGroupName: {},
                    logGroupIdentifier: {},
                    logStreamNamePrefix: {},
                    orderBy: {},
                    descending: {
                        type: "boolean"
                    },
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    logStreams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                logStreamName: {},
                                creationTime: {
                                    type: "long"
                                },
                                firstEventTimestamp: {
                                    type: "long"
                                },
                                lastEventTimestamp: {
                                    type: "long"
                                },
                                lastIngestionTime: {
                                    type: "long"
                                },
                                uploadSequenceToken: {},
                                arn: {},
                                storedBytes: {
                                    deprecated: true,
                                    deprecatedMessage: "Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.",
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeMetricFilters: {
            input: {
                type: "structure",
                members: {
                    logGroupName: {},
                    filterNamePrefix: {},
                    nextToken: {},
                    limit: {
                        type: "integer"
                    },
                    metricName: {},
                    metricNamespace: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    metricFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                filterName: {},
                                filterPattern: {},
                                metricTransformations: {
                                    shape: "S3i"
                                },
                                creationTime: {
                                    type: "long"
                                },
                                logGroupName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeQueries: {
            input: {
                type: "structure",
                members: {
                    logGroupName: {},
                    status: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    queries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                queryId: {},
                                queryString: {},
                                status: {},
                                createTime: {
                                    type: "long"
                                },
                                logGroupName: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeQueryDefinitions: {
            input: {
                type: "structure",
                members: {
                    queryDefinitionNamePrefix: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    queryDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                queryDefinitionId: {},
                                name: {},
                                queryString: {},
                                lastModified: {
                                    type: "long"
                                },
                                logGroupNames: {
                                    shape: "S44"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeResourcePolicies: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcePolicies: {
                        type: "list",
                        member: {
                            shape: "S48"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSubscriptionFilters: {
            input: {
                type: "structure",
                required: [ "logGroupName" ],
                members: {
                    logGroupName: {},
                    filterNamePrefix: {},
                    nextToken: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subscriptionFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                filterName: {},
                                logGroupName: {},
                                filterPattern: {},
                                destinationArn: {},
                                roleArn: {},
                                distribution: {},
                                creationTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisassociateKmsKey: {
            input: {
                type: "structure",
                members: {
                    logGroupName: {},
                    resourceIdentifier: {}
                }
            }
        },
        FilterLogEvents: {
            input: {
                type: "structure",
                members: {
                    logGroupName: {},
                    logGroupIdentifier: {},
                    logStreamNames: {
                        shape: "S4i"
                    },
                    logStreamNamePrefix: {},
                    startTime: {
                        type: "long"
                    },
                    endTime: {
                        type: "long"
                    },
                    filterPattern: {},
                    nextToken: {},
                    limit: {
                        type: "integer"
                    },
                    interleaved: {
                        deprecated: true,
                        deprecatedMessage: "Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.",
                        type: "boolean"
                    },
                    unmask: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                logStreamName: {},
                                timestamp: {
                                    type: "long"
                                },
                                message: {},
                                ingestionTime: {
                                    type: "long"
                                },
                                eventId: {}
                            }
                        }
                    },
                    searchedLogStreams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                logStreamName: {},
                                searchedCompletely: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetDataProtectionPolicy: {
            input: {
                type: "structure",
                required: [ "logGroupIdentifier" ],
                members: {
                    logGroupIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    logGroupIdentifier: {},
                    policyDocument: {},
                    lastUpdatedTime: {
                        type: "long"
                    }
                }
            }
        },
        GetDelivery: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    delivery: {
                        shape: "Se"
                    }
                }
            }
        },
        GetDeliveryDestination: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deliveryDestination: {
                        shape: "S24"
                    }
                }
            }
        },
        GetDeliveryDestinationPolicy: {
            input: {
                type: "structure",
                required: [ "deliveryDestinationName" ],
                members: {
                    deliveryDestinationName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S53"
                    }
                }
            }
        },
        GetDeliverySource: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deliverySource: {
                        shape: "S2a"
                    }
                }
            }
        },
        GetLogAnomalyDetector: {
            input: {
                type: "structure",
                required: [ "anomalyDetectorArn" ],
                members: {
                    anomalyDetectorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    detectorName: {},
                    logGroupArnList: {
                        shape: "Sp"
                    },
                    evaluationFrequency: {},
                    filterPattern: {},
                    anomalyDetectorStatus: {},
                    kmsKeyId: {},
                    creationTimeStamp: {
                        type: "long"
                    },
                    lastModifiedTimeStamp: {
                        type: "long"
                    },
                    anomalyVisibilityTime: {
                        type: "long"
                    }
                }
            }
        },
        GetLogEvents: {
            input: {
                type: "structure",
                required: [ "logStreamName" ],
                members: {
                    logGroupName: {},
                    logGroupIdentifier: {},
                    logStreamName: {},
                    startTime: {
                        type: "long"
                    },
                    endTime: {
                        type: "long"
                    },
                    nextToken: {},
                    limit: {
                        type: "integer"
                    },
                    startFromHead: {
                        type: "boolean"
                    },
                    unmask: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                timestamp: {
                                    type: "long"
                                },
                                message: {},
                                ingestionTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextForwardToken: {},
                    nextBackwardToken: {}
                }
            }
        },
        GetLogGroupFields: {
            input: {
                type: "structure",
                members: {
                    logGroupName: {},
                    time: {
                        type: "long"
                    },
                    logGroupIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    logGroupFields: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                percent: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetLogRecord: {
            input: {
                type: "structure",
                required: [ "logRecordPointer" ],
                members: {
                    logRecordPointer: {},
                    unmask: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    logRecord: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        GetQueryResults: {
            input: {
                type: "structure",
                required: [ "queryId" ],
                members: {
                    queryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    results: {
                        type: "list",
                        member: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    field: {},
                                    value: {}
                                }
                            }
                        }
                    },
                    statistics: {
                        type: "structure",
                        members: {
                            recordsMatched: {
                                type: "double"
                            },
                            recordsScanned: {
                                type: "double"
                            },
                            bytesScanned: {
                                type: "double"
                            }
                        }
                    },
                    status: {},
                    encryptionKey: {}
                }
            }
        },
        ListAnomalies: {
            input: {
                type: "structure",
                members: {
                    anomalyDetectorArn: {},
                    suppressionState: {},
                    limit: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    anomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "anomalyId", "patternId", "anomalyDetectorArn", "patternString", "firstSeen", "lastSeen", "description", "active", "state", "histogram", "logSamples", "patternTokens", "logGroupArnList" ],
                            members: {
                                anomalyId: {},
                                patternId: {},
                                anomalyDetectorArn: {},
                                patternString: {},
                                patternRegex: {},
                                priority: {},
                                firstSeen: {
                                    type: "long"
                                },
                                lastSeen: {
                                    type: "long"
                                },
                                description: {},
                                active: {
                                    type: "boolean"
                                },
                                state: {},
                                histogram: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "long"
                                    }
                                },
                                logSamples: {
                                    type: "list",
                                    member: {}
                                },
                                patternTokens: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            dynamicTokenPosition: {
                                                type: "integer"
                                            },
                                            isDynamic: {
                                                type: "boolean"
                                            },
                                            tokenString: {},
                                            enumerations: {
                                                type: "map",
                                                key: {},
                                                value: {
                                                    type: "long"
                                                }
                                            }
                                        }
                                    }
                                },
                                logGroupArnList: {
                                    shape: "Sp"
                                },
                                suppressed: {
                                    type: "boolean"
                                },
                                suppressedDate: {
                                    type: "long"
                                },
                                suppressedUntil: {
                                    type: "long"
                                },
                                isPatternLevelSuppression: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLogAnomalyDetectors: {
            input: {
                type: "structure",
                members: {
                    filterLogGroupArn: {},
                    limit: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    anomalyDetectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                anomalyDetectorArn: {},
                                detectorName: {},
                                logGroupArnList: {
                                    shape: "Sp"
                                },
                                evaluationFrequency: {},
                                filterPattern: {},
                                anomalyDetectorStatus: {},
                                kmsKeyId: {},
                                creationTimeStamp: {
                                    type: "long"
                                },
                                lastModifiedTimeStamp: {
                                    type: "long"
                                },
                                anomalyVisibilityTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListTagsLogGroup: {
            input: {
                type: "structure",
                required: [ "logGroupName" ],
                members: {
                    logGroupName: {}
                },
                deprecated: true,
                deprecatedMessage: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse"
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sa"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse"
            },
            deprecated: true,
            deprecatedMessage: "Please use the generic tagging API ListTagsForResource"
        },
        PutAccountPolicy: {
            input: {
                type: "structure",
                required: [ "policyName", "policyDocument", "policyType" ],
                members: {
                    policyName: {},
                    policyDocument: {},
                    policyType: {},
                    scope: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    accountPolicy: {
                        shape: "S1t"
                    }
                }
            }
        },
        PutDataProtectionPolicy: {
            input: {
                type: "structure",
                required: [ "logGroupIdentifier", "policyDocument" ],
                members: {
                    logGroupIdentifier: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    logGroupIdentifier: {},
                    policyDocument: {},
                    lastUpdatedTime: {
                        type: "long"
                    }
                }
            }
        },
        PutDeliveryDestination: {
            input: {
                type: "structure",
                required: [ "name", "deliveryDestinationConfiguration" ],
                members: {
                    name: {},
                    outputFormat: {},
                    deliveryDestinationConfiguration: {
                        shape: "S26"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deliveryDestination: {
                        shape: "S24"
                    }
                }
            }
        },
        PutDeliveryDestinationPolicy: {
            input: {
                type: "structure",
                required: [ "deliveryDestinationName", "deliveryDestinationPolicy" ],
                members: {
                    deliveryDestinationName: {},
                    deliveryDestinationPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {
                        shape: "S53"
                    }
                }
            }
        },
        PutDeliverySource: {
            input: {
                type: "structure",
                required: [ "name", "resourceArn", "logType" ],
                members: {
                    name: {},
                    resourceArn: {},
                    logType: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deliverySource: {
                        shape: "S2a"
                    }
                }
            }
        },
        PutDestination: {
            input: {
                type: "structure",
                required: [ "destinationName", "targetArn", "roleArn" ],
                members: {
                    destinationName: {},
                    targetArn: {},
                    roleArn: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    destination: {
                        shape: "S2h"
                    }
                }
            }
        },
        PutDestinationPolicy: {
            input: {
                type: "structure",
                required: [ "destinationName", "accessPolicy" ],
                members: {
                    destinationName: {},
                    accessPolicy: {},
                    forceUpdate: {
                        type: "boolean"
                    }
                }
            }
        },
        PutLogEvents: {
            input: {
                type: "structure",
                required: [ "logGroupName", "logStreamName", "logEvents" ],
                members: {
                    logGroupName: {},
                    logStreamName: {},
                    logEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timestamp", "message" ],
                            members: {
                                timestamp: {
                                    type: "long"
                                },
                                message: {}
                            }
                        }
                    },
                    sequenceToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextSequenceToken: {},
                    rejectedLogEventsInfo: {
                        type: "structure",
                        members: {
                            tooNewLogEventStartIndex: {
                                type: "integer"
                            },
                            tooOldLogEventEndIndex: {
                                type: "integer"
                            },
                            expiredLogEventEndIndex: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        PutMetricFilter: {
            input: {
                type: "structure",
                required: [ "logGroupName", "filterName", "filterPattern", "metricTransformations" ],
                members: {
                    logGroupName: {},
                    filterName: {},
                    filterPattern: {},
                    metricTransformations: {
                        shape: "S3i"
                    }
                }
            }
        },
        PutQueryDefinition: {
            input: {
                type: "structure",
                required: [ "name", "queryString" ],
                members: {
                    name: {},
                    queryDefinitionId: {},
                    logGroupNames: {
                        shape: "S44"
                    },
                    queryString: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    queryDefinitionId: {}
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                members: {
                    policyName: {},
                    policyDocument: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcePolicy: {
                        shape: "S48"
                    }
                }
            }
        },
        PutRetentionPolicy: {
            input: {
                type: "structure",
                required: [ "logGroupName", "retentionInDays" ],
                members: {
                    logGroupName: {},
                    retentionInDays: {
                        type: "integer"
                    }
                }
            }
        },
        PutSubscriptionFilter: {
            input: {
                type: "structure",
                required: [ "logGroupName", "filterName", "filterPattern", "destinationArn" ],
                members: {
                    logGroupName: {},
                    filterName: {},
                    filterPattern: {},
                    destinationArn: {},
                    roleArn: {},
                    distribution: {}
                }
            }
        },
        StartLiveTail: {
            input: {
                type: "structure",
                required: [ "logGroupIdentifiers" ],
                members: {
                    logGroupIdentifiers: {
                        shape: "S7r"
                    },
                    logStreamNames: {
                        shape: "S4i"
                    },
                    logStreamNamePrefixes: {
                        shape: "S4i"
                    },
                    logEventFilterPattern: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    responseStream: {
                        type: "structure",
                        members: {
                            sessionStart: {
                                type: "structure",
                                members: {
                                    requestId: {},
                                    sessionId: {},
                                    logGroupIdentifiers: {
                                        shape: "S7r"
                                    },
                                    logStreamNames: {
                                        shape: "S4i"
                                    },
                                    logStreamNamePrefixes: {
                                        shape: "S4i"
                                    },
                                    logEventFilterPattern: {}
                                },
                                event: true
                            },
                            sessionUpdate: {
                                type: "structure",
                                members: {
                                    sessionMetadata: {
                                        type: "structure",
                                        members: {
                                            sampled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    sessionResults: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                logStreamName: {},
                                                logGroupIdentifier: {},
                                                message: {},
                                                timestamp: {
                                                    type: "long"
                                                },
                                                ingestionTime: {
                                                    type: "long"
                                                }
                                            }
                                        }
                                    }
                                },
                                event: true
                            },
                            SessionTimeoutException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                exception: true
                            },
                            SessionStreamingException: {
                                type: "structure",
                                members: {
                                    message: {}
                                },
                                exception: true
                            }
                        },
                        eventstream: true
                    }
                }
            },
            endpoint: {
                hostPrefix: "streaming-"
            }
        },
        StartQuery: {
            input: {
                type: "structure",
                required: [ "startTime", "endTime", "queryString" ],
                members: {
                    logGroupName: {},
                    logGroupNames: {
                        shape: "S44"
                    },
                    logGroupIdentifiers: {
                        type: "list",
                        member: {}
                    },
                    startTime: {
                        type: "long"
                    },
                    endTime: {
                        type: "long"
                    },
                    queryString: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    queryId: {}
                }
            }
        },
        StopQuery: {
            input: {
                type: "structure",
                required: [ "queryId" ],
                members: {
                    queryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    success: {
                        type: "boolean"
                    }
                }
            }
        },
        TagLogGroup: {
            input: {
                type: "structure",
                required: [ "logGroupName", "tags" ],
                members: {
                    logGroupName: {},
                    tags: {
                        shape: "Sa"
                    }
                },
                deprecated: true,
                deprecatedMessage: "Please use the generic tagging API model TagResourceRequest"
            },
            deprecated: true,
            deprecatedMessage: "Please use the generic tagging API TagResource"
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        TestMetricFilter: {
            input: {
                type: "structure",
                required: [ "filterPattern", "logEventMessages" ],
                members: {
                    filterPattern: {},
                    logEventMessages: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    matches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventNumber: {
                                    type: "long"
                                },
                                eventMessage: {},
                                extractedValues: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        UntagLogGroup: {
            input: {
                type: "structure",
                required: [ "logGroupName", "tags" ],
                members: {
                    logGroupName: {},
                    tags: {
                        type: "list",
                        member: {}
                    }
                },
                deprecated: true,
                deprecatedMessage: "Please use the generic tagging API model UntagResourceRequest"
            },
            deprecated: true,
            deprecatedMessage: "Please use the generic tagging API UntagResource"
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateAnomaly: {
            input: {
                type: "structure",
                required: [ "anomalyDetectorArn" ],
                members: {
                    anomalyId: {},
                    patternId: {},
                    anomalyDetectorArn: {},
                    suppressionType: {},
                    suppressionPeriod: {
                        type: "structure",
                        members: {
                            value: {
                                type: "integer"
                            },
                            suppressionUnit: {}
                        }
                    }
                }
            }
        },
        UpdateLogAnomalyDetector: {
            input: {
                type: "structure",
                required: [ "anomalyDetectorArn", "enabled" ],
                members: {
                    anomalyDetectorArn: {},
                    evaluationFrequency: {},
                    filterPattern: {},
                    anomalyVisibilityTime: {
                        type: "long"
                    },
                    enabled: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Se: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                deliverySourceName: {},
                deliveryDestinationArn: {},
                deliveryDestinationType: {},
                tags: {
                    shape: "Sa"
                }
            }
        },
        Sp: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "list",
            member: {}
        },
        S1t: {
            type: "structure",
            members: {
                policyName: {},
                policyDocument: {},
                lastUpdatedTime: {
                    type: "long"
                },
                policyType: {},
                scope: {},
                accountId: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                deliveryDestinationType: {},
                outputFormat: {},
                deliveryDestinationConfiguration: {
                    shape: "S26"
                },
                tags: {
                    shape: "Sa"
                }
            }
        },
        S26: {
            type: "structure",
            required: [ "destinationResourceArn" ],
            members: {
                destinationResourceArn: {}
            }
        },
        S2a: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                resourceArns: {
                    type: "list",
                    member: {}
                },
                service: {},
                logType: {},
                tags: {
                    shape: "Sa"
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                destinationName: {},
                targetArn: {},
                roleArn: {},
                accessPolicy: {},
                arn: {},
                creationTime: {
                    type: "long"
                }
            }
        },
        S3i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "metricName", "metricNamespace", "metricValue" ],
                members: {
                    metricName: {},
                    metricNamespace: {},
                    metricValue: {},
                    defaultValue: {
                        type: "double"
                    },
                    dimensions: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    unit: {}
                }
            }
        },
        S44: {
            type: "list",
            member: {}
        },
        S48: {
            type: "structure",
            members: {
                policyName: {},
                policyDocument: {},
                lastUpdatedTime: {
                    type: "long"
                }
            }
        },
        S4i: {
            type: "list",
            member: {}
        },
        S53: {
            type: "structure",
            members: {
                deliveryDestinationPolicy: {}
            }
        },
        S7r: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeDeliveries: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "deliveries"
        },
        DescribeDeliveryDestinations: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "deliveryDestinations"
        },
        DescribeDeliverySources: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "deliverySources"
        },
        DescribeDestinations: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "destinations"
        },
        DescribeLogGroups: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "logGroups"
        },
        DescribeLogStreams: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "logStreams"
        },
        DescribeMetricFilters: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "metricFilters"
        },
        DescribeSubscriptionFilters: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "subscriptionFilters"
        },
        FilterLogEvents: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: [ "events", "searchedLogStreams" ]
        },
        GetLogEvents: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextForwardToken",
            result_key: "events"
        },
        ListAnomalies: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "anomalies"
        },
        ListLogAnomalyDetectors: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "anomalyDetectors"
        }
    }
};

AWS.apiLoader.services["codebuild"] = {};

AWS.CodeBuild = AWS.Service.defineService("codebuild", [ "2016-10-06" ]);

AWS.apiLoader.services["codebuild"]["2016-10-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-10-06",
        endpointPrefix: "codebuild",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS CodeBuild",
        serviceId: "CodeBuild",
        signatureVersion: "v4",
        targetPrefix: "CodeBuild_20161006",
        uid: "codebuild-2016-10-06"
    },
    operations: {
        BatchDeleteBuilds: {
            input: {
                type: "structure",
                required: [ "ids" ],
                members: {
                    ids: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buildsDeleted: {
                        shape: "S2"
                    },
                    buildsNotDeleted: {
                        shape: "S5"
                    }
                }
            }
        },
        BatchGetBuildBatches: {
            input: {
                type: "structure",
                required: [ "ids" ],
                members: {
                    ids: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buildBatches: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    },
                    buildBatchesNotFound: {
                        shape: "S9"
                    }
                }
            }
        },
        BatchGetBuilds: {
            input: {
                type: "structure",
                required: [ "ids" ],
                members: {
                    ids: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    builds: {
                        type: "list",
                        member: {
                            shape: "S23"
                        }
                    },
                    buildsNotFound: {
                        shape: "S2"
                    }
                }
            }
        },
        BatchGetProjects: {
            input: {
                type: "structure",
                required: [ "names" ],
                members: {
                    names: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    projects: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    projectsNotFound: {
                        shape: "S2e"
                    }
                }
            }
        },
        BatchGetReportGroups: {
            input: {
                type: "structure",
                required: [ "reportGroupArns" ],
                members: {
                    reportGroupArns: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportGroups: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    },
                    reportGroupsNotFound: {
                        shape: "S32"
                    }
                }
            }
        },
        BatchGetReports: {
            input: {
                type: "structure",
                required: [ "reportArns" ],
                members: {
                    reportArns: {
                        shape: "S3e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                type: {},
                                name: {},
                                reportGroupArn: {},
                                executionId: {},
                                status: {},
                                created: {
                                    type: "timestamp"
                                },
                                expired: {
                                    type: "timestamp"
                                },
                                exportConfig: {
                                    shape: "S38"
                                },
                                truncated: {
                                    type: "boolean"
                                },
                                testSummary: {
                                    type: "structure",
                                    required: [ "total", "statusCounts", "durationInNanoSeconds" ],
                                    members: {
                                        total: {
                                            type: "integer"
                                        },
                                        statusCounts: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "integer"
                                            }
                                        },
                                        durationInNanoSeconds: {
                                            type: "long"
                                        }
                                    }
                                },
                                codeCoverageSummary: {
                                    type: "structure",
                                    members: {
                                        lineCoveragePercentage: {
                                            type: "double"
                                        },
                                        linesCovered: {
                                            type: "integer"
                                        },
                                        linesMissed: {
                                            type: "integer"
                                        },
                                        branchCoveragePercentage: {
                                            type: "double"
                                        },
                                        branchesCovered: {
                                            type: "integer"
                                        },
                                        branchesMissed: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    reportsNotFound: {
                        shape: "S3e"
                    }
                }
            }
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "name", "source", "artifacts", "environment", "serviceRole" ],
                members: {
                    name: {},
                    description: {},
                    source: {
                        shape: "Sl"
                    },
                    secondarySources: {
                        shape: "St"
                    },
                    sourceVersion: {},
                    secondarySourceVersions: {
                        shape: "Su"
                    },
                    artifacts: {
                        shape: "S2k"
                    },
                    secondaryArtifacts: {
                        shape: "S2n"
                    },
                    cache: {
                        shape: "Sz"
                    },
                    environment: {
                        shape: "S13"
                    },
                    serviceRole: {},
                    timeoutInMinutes: {
                        type: "integer"
                    },
                    queuedTimeoutInMinutes: {
                        type: "integer"
                    },
                    encryptionKey: {},
                    tags: {
                        shape: "S2p"
                    },
                    vpcConfig: {
                        shape: "S1i"
                    },
                    badgeEnabled: {
                        type: "boolean"
                    },
                    logsConfig: {
                        shape: "S1c"
                    },
                    fileSystemLocations: {
                        shape: "S1l"
                    },
                    buildBatchConfig: {
                        shape: "S1o"
                    },
                    concurrentBuildLimit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    project: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateReportGroup: {
            input: {
                type: "structure",
                required: [ "name", "type", "exportConfig" ],
                members: {
                    name: {},
                    type: {},
                    exportConfig: {
                        shape: "S38"
                    },
                    tags: {
                        shape: "S2p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportGroup: {
                        shape: "S35"
                    }
                }
            }
        },
        CreateWebhook: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    branchFilter: {},
                    filterGroups: {
                        shape: "S2u"
                    },
                    buildType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    webhook: {
                        shape: "S2t"
                    }
                }
            }
        },
        DeleteBuildBatch: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    statusCode: {},
                    buildsDeleted: {
                        shape: "S2"
                    },
                    buildsNotDeleted: {
                        shape: "S5"
                    }
                }
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReport: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReportGroup: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    deleteReports: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSourceCredentials: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {}
                }
            }
        },
        DeleteWebhook: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCodeCoverages: {
            input: {
                type: "structure",
                required: [ "reportArn" ],
                members: {
                    reportArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    sortOrder: {},
                    sortBy: {},
                    minLineCoveragePercentage: {
                        type: "double"
                    },
                    maxLineCoveragePercentage: {
                        type: "double"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    codeCoverages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                reportARN: {},
                                filePath: {},
                                lineCoveragePercentage: {
                                    type: "double"
                                },
                                linesCovered: {
                                    type: "integer"
                                },
                                linesMissed: {
                                    type: "integer"
                                },
                                branchCoveragePercentage: {
                                    type: "double"
                                },
                                branchesCovered: {
                                    type: "integer"
                                },
                                branchesMissed: {
                                    type: "integer"
                                },
                                expired: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTestCases: {
            input: {
                type: "structure",
                required: [ "reportArn" ],
                members: {
                    reportArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        type: "structure",
                        members: {
                            status: {},
                            keyword: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    testCases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                reportArn: {},
                                testRawDataPath: {},
                                prefix: {},
                                name: {},
                                status: {},
                                durationInNanoSeconds: {
                                    type: "long"
                                },
                                message: {},
                                expired: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetReportGroupTrend: {
            input: {
                type: "structure",
                required: [ "reportGroupArn", "trendField" ],
                members: {
                    reportGroupArn: {},
                    numOfReports: {
                        type: "integer"
                    },
                    trendField: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stats: {
                        type: "structure",
                        members: {
                            average: {},
                            max: {},
                            min: {}
                        }
                    },
                    rawData: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                reportArn: {},
                                data: {}
                            }
                        }
                    }
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    policy: {}
                }
            }
        },
        ImportSourceCredentials: {
            input: {
                type: "structure",
                required: [ "token", "serverType", "authType" ],
                members: {
                    username: {},
                    token: {
                        type: "string",
                        sensitive: true
                    },
                    serverType: {},
                    authType: {},
                    shouldOverwrite: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {}
                }
            }
        },
        InvalidateProjectCache: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListBuildBatches: {
            input: {
                type: "structure",
                members: {
                    filter: {
                        shape: "S50"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    sortOrder: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S9"
                    },
                    nextToken: {}
                }
            }
        },
        ListBuildBatchesForProject: {
            input: {
                type: "structure",
                members: {
                    projectName: {},
                    filter: {
                        shape: "S50"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    sortOrder: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S9"
                    },
                    nextToken: {}
                }
            }
        },
        ListBuilds: {
            input: {
                type: "structure",
                members: {
                    sortOrder: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S2"
                    },
                    nextToken: {}
                }
            }
        },
        ListBuildsForProject: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    sortOrder: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "S2"
                    },
                    nextToken: {}
                }
            }
        },
        ListCuratedEnvironmentImages: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    platforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                platform: {},
                                languages: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            language: {},
                                            images: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        name: {},
                                                        description: {},
                                                        versions: {
                                                            type: "list",
                                                            member: {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProjects: {
            input: {
                type: "structure",
                members: {
                    sortBy: {},
                    sortOrder: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    projects: {
                        shape: "S2e"
                    }
                }
            }
        },
        ListReportGroups: {
            input: {
                type: "structure",
                members: {
                    sortOrder: {},
                    sortBy: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    reportGroups: {
                        shape: "S32"
                    }
                }
            }
        },
        ListReports: {
            input: {
                type: "structure",
                members: {
                    sortOrder: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        shape: "S5q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    reports: {
                        shape: "S3e"
                    }
                }
            }
        },
        ListReportsForReportGroup: {
            input: {
                type: "structure",
                required: [ "reportGroupArn" ],
                members: {
                    reportGroupArn: {},
                    nextToken: {},
                    sortOrder: {},
                    maxResults: {
                        type: "integer"
                    },
                    filter: {
                        shape: "S5q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    reports: {
                        shape: "S3e"
                    }
                }
            }
        },
        ListSharedProjects: {
            input: {
                type: "structure",
                members: {
                    sortBy: {},
                    sortOrder: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    projects: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListSharedReportGroups: {
            input: {
                type: "structure",
                members: {
                    sortOrder: {},
                    sortBy: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    reportGroups: {
                        shape: "S32"
                    }
                }
            }
        },
        ListSourceCredentials: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    sourceCredentialsInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                serverType: {},
                                authType: {}
                            }
                        }
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "policy", "resourceArn" ],
                members: {
                    policy: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceArn: {}
                }
            }
        },
        RetryBuild: {
            input: {
                type: "structure",
                members: {
                    id: {},
                    idempotencyToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    build: {
                        shape: "S23"
                    }
                }
            }
        },
        RetryBuildBatch: {
            input: {
                type: "structure",
                members: {
                    id: {},
                    idempotencyToken: {},
                    retryType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    buildBatch: {
                        shape: "Sc"
                    }
                }
            }
        },
        StartBuild: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    secondarySourcesOverride: {
                        shape: "St"
                    },
                    secondarySourcesVersionOverride: {
                        shape: "Su"
                    },
                    sourceVersion: {},
                    artifactsOverride: {
                        shape: "S2k"
                    },
                    secondaryArtifactsOverride: {
                        shape: "S2n"
                    },
                    environmentVariablesOverride: {
                        shape: "S16"
                    },
                    sourceTypeOverride: {},
                    sourceLocationOverride: {},
                    sourceAuthOverride: {
                        shape: "Sq"
                    },
                    gitCloneDepthOverride: {
                        type: "integer"
                    },
                    gitSubmodulesConfigOverride: {
                        shape: "So"
                    },
                    buildspecOverride: {},
                    insecureSslOverride: {
                        type: "boolean"
                    },
                    reportBuildStatusOverride: {
                        type: "boolean"
                    },
                    buildStatusConfigOverride: {
                        shape: "Ss"
                    },
                    environmentTypeOverride: {},
                    imageOverride: {},
                    computeTypeOverride: {},
                    certificateOverride: {},
                    cacheOverride: {
                        shape: "Sz"
                    },
                    serviceRoleOverride: {},
                    privilegedModeOverride: {
                        type: "boolean"
                    },
                    timeoutInMinutesOverride: {
                        type: "integer"
                    },
                    queuedTimeoutInMinutesOverride: {
                        type: "integer"
                    },
                    encryptionKeyOverride: {},
                    idempotencyToken: {},
                    logsConfigOverride: {
                        shape: "S1c"
                    },
                    registryCredentialOverride: {
                        shape: "S19"
                    },
                    imagePullCredentialsTypeOverride: {},
                    debugSessionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    build: {
                        shape: "S23"
                    }
                }
            }
        },
        StartBuildBatch: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    secondarySourcesOverride: {
                        shape: "St"
                    },
                    secondarySourcesVersionOverride: {
                        shape: "Su"
                    },
                    sourceVersion: {},
                    artifactsOverride: {
                        shape: "S2k"
                    },
                    secondaryArtifactsOverride: {
                        shape: "S2n"
                    },
                    environmentVariablesOverride: {
                        shape: "S16"
                    },
                    sourceTypeOverride: {},
                    sourceLocationOverride: {},
                    sourceAuthOverride: {
                        shape: "Sq"
                    },
                    gitCloneDepthOverride: {
                        type: "integer"
                    },
                    gitSubmodulesConfigOverride: {
                        shape: "So"
                    },
                    buildspecOverride: {},
                    insecureSslOverride: {
                        type: "boolean"
                    },
                    reportBuildBatchStatusOverride: {
                        type: "boolean"
                    },
                    environmentTypeOverride: {},
                    imageOverride: {},
                    computeTypeOverride: {},
                    certificateOverride: {},
                    cacheOverride: {
                        shape: "Sz"
                    },
                    serviceRoleOverride: {},
                    privilegedModeOverride: {
                        type: "boolean"
                    },
                    buildTimeoutInMinutesOverride: {
                        type: "integer"
                    },
                    queuedTimeoutInMinutesOverride: {
                        type: "integer"
                    },
                    encryptionKeyOverride: {},
                    idempotencyToken: {},
                    logsConfigOverride: {
                        shape: "S1c"
                    },
                    registryCredentialOverride: {
                        shape: "S19"
                    },
                    imagePullCredentialsTypeOverride: {},
                    buildBatchConfigOverride: {
                        shape: "S1o"
                    },
                    debugSessionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    buildBatch: {
                        shape: "Sc"
                    }
                }
            }
        },
        StopBuild: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    build: {
                        shape: "S23"
                    }
                }
            }
        },
        StopBuildBatch: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    buildBatch: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateProject: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    source: {
                        shape: "Sl"
                    },
                    secondarySources: {
                        shape: "St"
                    },
                    sourceVersion: {},
                    secondarySourceVersions: {
                        shape: "Su"
                    },
                    artifacts: {
                        shape: "S2k"
                    },
                    secondaryArtifacts: {
                        shape: "S2n"
                    },
                    cache: {
                        shape: "Sz"
                    },
                    environment: {
                        shape: "S13"
                    },
                    serviceRole: {},
                    timeoutInMinutes: {
                        type: "integer"
                    },
                    queuedTimeoutInMinutes: {
                        type: "integer"
                    },
                    encryptionKey: {},
                    tags: {
                        shape: "S2p"
                    },
                    vpcConfig: {
                        shape: "S1i"
                    },
                    badgeEnabled: {
                        type: "boolean"
                    },
                    logsConfig: {
                        shape: "S1c"
                    },
                    fileSystemLocations: {
                        shape: "S1l"
                    },
                    buildBatchConfig: {
                        shape: "S1o"
                    },
                    concurrentBuildLimit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    project: {
                        shape: "S2h"
                    }
                }
            }
        },
        UpdateProjectVisibility: {
            input: {
                type: "structure",
                required: [ "projectArn", "projectVisibility" ],
                members: {
                    projectArn: {},
                    projectVisibility: {},
                    resourceAccessRole: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    projectArn: {},
                    publicProjectAlias: {},
                    projectVisibility: {}
                }
            }
        },
        UpdateReportGroup: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    exportConfig: {
                        shape: "S38"
                    },
                    tags: {
                        shape: "S2p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportGroup: {
                        shape: "S35"
                    }
                }
            }
        },
        UpdateWebhook: {
            input: {
                type: "structure",
                required: [ "projectName" ],
                members: {
                    projectName: {},
                    branchFilter: {},
                    rotateSecret: {
                        type: "boolean"
                    },
                    filterGroups: {
                        shape: "S2u"
                    },
                    buildType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    webhook: {
                        shape: "S2t"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    statusCode: {}
                }
            }
        },
        S9: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                },
                currentPhase: {},
                buildBatchStatus: {},
                sourceVersion: {},
                resolvedSourceVersion: {},
                projectName: {},
                phases: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            phaseType: {},
                            phaseStatus: {},
                            startTime: {
                                type: "timestamp"
                            },
                            endTime: {
                                type: "timestamp"
                            },
                            durationInSeconds: {
                                type: "long"
                            },
                            contexts: {
                                shape: "Sj"
                            }
                        }
                    }
                },
                source: {
                    shape: "Sl"
                },
                secondarySources: {
                    shape: "St"
                },
                secondarySourceVersions: {
                    shape: "Su"
                },
                artifacts: {
                    shape: "Sw"
                },
                secondaryArtifacts: {
                    shape: "Sy"
                },
                cache: {
                    shape: "Sz"
                },
                environment: {
                    shape: "S13"
                },
                serviceRole: {},
                logConfig: {
                    shape: "S1c"
                },
                buildTimeoutInMinutes: {
                    type: "integer"
                },
                queuedTimeoutInMinutes: {
                    type: "integer"
                },
                complete: {
                    type: "boolean"
                },
                initiator: {},
                vpcConfig: {
                    shape: "S1i"
                },
                encryptionKey: {},
                buildBatchNumber: {
                    type: "long"
                },
                fileSystemLocations: {
                    shape: "S1l"
                },
                buildBatchConfig: {
                    shape: "S1o"
                },
                buildGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            identifier: {},
                            dependsOn: {
                                type: "list",
                                member: {}
                            },
                            ignoreFailure: {
                                type: "boolean"
                            },
                            currentBuildSummary: {
                                shape: "S1v"
                            },
                            priorBuildSummaryList: {
                                type: "list",
                                member: {
                                    shape: "S1v"
                                }
                            }
                        }
                    }
                },
                debugSessionEnabled: {
                    type: "boolean"
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    statusCode: {},
                    message: {}
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                location: {},
                gitCloneDepth: {
                    type: "integer"
                },
                gitSubmodulesConfig: {
                    shape: "So"
                },
                buildspec: {},
                auth: {
                    shape: "Sq"
                },
                reportBuildStatus: {
                    type: "boolean"
                },
                buildStatusConfig: {
                    shape: "Ss"
                },
                insecureSsl: {
                    type: "boolean"
                },
                sourceIdentifier: {}
            }
        },
        So: {
            type: "structure",
            required: [ "fetchSubmodules" ],
            members: {
                fetchSubmodules: {
                    type: "boolean"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                resource: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                context: {},
                targetUrl: {}
            }
        },
        St: {
            type: "list",
            member: {
                shape: "Sl"
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                required: [ "sourceIdentifier", "sourceVersion" ],
                members: {
                    sourceIdentifier: {},
                    sourceVersion: {}
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                location: {},
                sha256sum: {},
                md5sum: {},
                overrideArtifactName: {
                    type: "boolean"
                },
                encryptionDisabled: {
                    type: "boolean"
                },
                artifactIdentifier: {},
                bucketOwnerAccess: {}
            }
        },
        Sy: {
            type: "list",
            member: {
                shape: "Sw"
            }
        },
        Sz: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                location: {},
                modes: {
                    type: "list",
                    member: {}
                }
            }
        },
        S13: {
            type: "structure",
            required: [ "type", "image", "computeType" ],
            members: {
                type: {},
                image: {},
                computeType: {},
                environmentVariables: {
                    shape: "S16"
                },
                privilegedMode: {
                    type: "boolean"
                },
                certificate: {},
                registryCredential: {
                    shape: "S19"
                },
                imagePullCredentialsType: {}
            }
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {},
                    type: {}
                }
            }
        },
        S19: {
            type: "structure",
            required: [ "credential", "credentialProvider" ],
            members: {
                credential: {},
                credentialProvider: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                cloudWatchLogs: {
                    shape: "S1d"
                },
                s3Logs: {
                    shape: "S1f"
                }
            }
        },
        S1d: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {},
                groupName: {},
                streamName: {}
            }
        },
        S1f: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {},
                location: {},
                encryptionDisabled: {
                    type: "boolean"
                },
                bucketOwnerAccess: {}
            }
        },
        S1i: {
            type: "structure",
            members: {
                vpcId: {},
                subnets: {
                    type: "list",
                    member: {}
                },
                securityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    type: {},
                    location: {},
                    mountPoint: {},
                    identifier: {},
                    mountOptions: {}
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                serviceRole: {},
                combineArtifacts: {
                    type: "boolean"
                },
                restrictions: {
                    type: "structure",
                    members: {
                        maximumBuildsAllowed: {
                            type: "integer"
                        },
                        computeTypesAllowed: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                timeoutInMins: {
                    type: "integer"
                },
                batchReportMode: {}
            }
        },
        S1v: {
            type: "structure",
            members: {
                arn: {},
                requestedOn: {
                    type: "timestamp"
                },
                buildStatus: {},
                primaryArtifact: {
                    shape: "S1w"
                },
                secondaryArtifacts: {
                    type: "list",
                    member: {
                        shape: "S1w"
                    }
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                type: {},
                location: {},
                identifier: {}
            }
        },
        S23: {
            type: "structure",
            members: {
                id: {},
                arn: {},
                buildNumber: {
                    type: "long"
                },
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                },
                currentPhase: {},
                buildStatus: {},
                sourceVersion: {},
                resolvedSourceVersion: {},
                projectName: {},
                phases: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            phaseType: {},
                            phaseStatus: {},
                            startTime: {
                                type: "timestamp"
                            },
                            endTime: {
                                type: "timestamp"
                            },
                            durationInSeconds: {
                                type: "long"
                            },
                            contexts: {
                                shape: "Sj"
                            }
                        }
                    }
                },
                source: {
                    shape: "Sl"
                },
                secondarySources: {
                    shape: "St"
                },
                secondarySourceVersions: {
                    shape: "Su"
                },
                artifacts: {
                    shape: "Sw"
                },
                secondaryArtifacts: {
                    shape: "Sy"
                },
                cache: {
                    shape: "Sz"
                },
                environment: {
                    shape: "S13"
                },
                serviceRole: {},
                logs: {
                    type: "structure",
                    members: {
                        groupName: {},
                        streamName: {},
                        deepLink: {},
                        s3DeepLink: {},
                        cloudWatchLogsArn: {},
                        s3LogsArn: {},
                        cloudWatchLogs: {
                            shape: "S1d"
                        },
                        s3Logs: {
                            shape: "S1f"
                        }
                    }
                },
                timeoutInMinutes: {
                    type: "integer"
                },
                queuedTimeoutInMinutes: {
                    type: "integer"
                },
                buildComplete: {
                    type: "boolean"
                },
                initiator: {},
                vpcConfig: {
                    shape: "S1i"
                },
                networkInterface: {
                    type: "structure",
                    members: {
                        subnetId: {},
                        networkInterfaceId: {}
                    }
                },
                encryptionKey: {},
                exportedEnvironmentVariables: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            value: {}
                        }
                    }
                },
                reportArns: {
                    type: "list",
                    member: {}
                },
                fileSystemLocations: {
                    shape: "S1l"
                },
                debugSession: {
                    type: "structure",
                    members: {
                        sessionEnabled: {
                            type: "boolean"
                        },
                        sessionTarget: {}
                    }
                },
                buildBatchArn: {}
            }
        },
        S2e: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "structure",
            members: {
                name: {},
                arn: {},
                description: {},
                source: {
                    shape: "Sl"
                },
                secondarySources: {
                    shape: "St"
                },
                sourceVersion: {},
                secondarySourceVersions: {
                    shape: "Su"
                },
                artifacts: {
                    shape: "S2k"
                },
                secondaryArtifacts: {
                    shape: "S2n"
                },
                cache: {
                    shape: "Sz"
                },
                environment: {
                    shape: "S13"
                },
                serviceRole: {},
                timeoutInMinutes: {
                    type: "integer"
                },
                queuedTimeoutInMinutes: {
                    type: "integer"
                },
                encryptionKey: {},
                tags: {
                    shape: "S2p"
                },
                created: {
                    type: "timestamp"
                },
                lastModified: {
                    type: "timestamp"
                },
                webhook: {
                    shape: "S2t"
                },
                vpcConfig: {
                    shape: "S1i"
                },
                badge: {
                    type: "structure",
                    members: {
                        badgeEnabled: {
                            type: "boolean"
                        },
                        badgeRequestUrl: {}
                    }
                },
                logsConfig: {
                    shape: "S1c"
                },
                fileSystemLocations: {
                    shape: "S1l"
                },
                buildBatchConfig: {
                    shape: "S1o"
                },
                concurrentBuildLimit: {
                    type: "integer"
                },
                projectVisibility: {},
                publicProjectAlias: {},
                resourceAccessRole: {}
            }
        },
        S2k: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                location: {},
                path: {},
                namespaceType: {},
                name: {},
                packaging: {},
                overrideArtifactName: {
                    type: "boolean"
                },
                encryptionDisabled: {
                    type: "boolean"
                },
                artifactIdentifier: {},
                bucketOwnerAccess: {}
            }
        },
        S2n: {
            type: "list",
            member: {
                shape: "S2k"
            }
        },
        S2p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                url: {},
                payloadUrl: {},
                secret: {},
                branchFilter: {},
                filterGroups: {
                    shape: "S2u"
                },
                buildType: {},
                lastModifiedSecret: {
                    type: "timestamp"
                }
            }
        },
        S2u: {
            type: "list",
            member: {
                type: "list",
                member: {
                    type: "structure",
                    required: [ "type", "pattern" ],
                    members: {
                        type: {},
                        pattern: {},
                        excludeMatchedPattern: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S32: {
            type: "list",
            member: {}
        },
        S35: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                type: {},
                exportConfig: {
                    shape: "S38"
                },
                created: {
                    type: "timestamp"
                },
                lastModified: {
                    type: "timestamp"
                },
                tags: {
                    shape: "S2p"
                },
                status: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                exportConfigType: {},
                s3Destination: {
                    type: "structure",
                    members: {
                        bucket: {},
                        bucketOwner: {},
                        path: {},
                        packaging: {},
                        encryptionKey: {},
                        encryptionDisabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S3e: {
            type: "list",
            member: {}
        },
        S50: {
            type: "structure",
            members: {
                status: {}
            }
        },
        S5q: {
            type: "structure",
            members: {
                status: {}
            }
        }
    },
    paginators: {
        DescribeCodeCoverages: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "codeCoverages"
        },
        DescribeTestCases: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "testCases"
        },
        ListBuildBatches: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "ids"
        },
        ListBuildBatchesForProject: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "ids"
        },
        ListBuilds: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "ids"
        },
        ListBuildsForProject: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "ids"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "projects"
        },
        ListReportGroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "reportGroups"
        },
        ListReports: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "reports"
        },
        ListReportsForReportGroup: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "reports"
        },
        ListSharedProjects: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "projects"
        },
        ListSharedReportGroups: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "reportGroups"
        }
    }
};

AWS.apiLoader.services["codecommit"] = {};

AWS.CodeCommit = AWS.Service.defineService("codecommit", [ "2015-04-13" ]);

AWS.apiLoader.services["codecommit"]["2015-04-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-04-13",
        endpointPrefix: "codecommit",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CodeCommit",
        serviceFullName: "AWS CodeCommit",
        serviceId: "CodeCommit",
        signatureVersion: "v4",
        targetPrefix: "CodeCommit_20150413",
        uid: "codecommit-2015-04-13"
    },
    operations: {
        AssociateApprovalRuleTemplateWithRepository: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "repositoryName" ],
                members: {
                    approvalRuleTemplateName: {},
                    repositoryName: {}
                }
            }
        },
        BatchAssociateApprovalRuleTemplateWithRepositories: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "repositoryNames" ],
                members: {
                    approvalRuleTemplateName: {},
                    repositoryNames: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "associatedRepositoryNames", "errors" ],
                members: {
                    associatedRepositoryNames: {
                        shape: "S5"
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                repositoryName: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDescribeMergeConflicts: {
            input: {
                type: "structure",
                required: [ "repositoryName", "destinationCommitSpecifier", "sourceCommitSpecifier", "mergeOption" ],
                members: {
                    repositoryName: {},
                    destinationCommitSpecifier: {},
                    sourceCommitSpecifier: {},
                    mergeOption: {},
                    maxMergeHunks: {
                        type: "integer"
                    },
                    maxConflictFiles: {
                        type: "integer"
                    },
                    filePaths: {
                        type: "list",
                        member: {}
                    },
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "conflicts", "destinationCommitId", "sourceCommitId" ],
                members: {
                    conflicts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                conflictMetadata: {
                                    shape: "Sn"
                                },
                                mergeHunks: {
                                    shape: "S12"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "filePath", "exceptionName", "message" ],
                            members: {
                                filePath: {},
                                exceptionName: {},
                                message: {}
                            }
                        }
                    },
                    destinationCommitId: {},
                    sourceCommitId: {},
                    baseCommitId: {}
                }
            }
        },
        BatchDisassociateApprovalRuleTemplateFromRepositories: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "repositoryNames" ],
                members: {
                    approvalRuleTemplateName: {},
                    repositoryNames: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "disassociatedRepositoryNames", "errors" ],
                members: {
                    disassociatedRepositoryNames: {
                        shape: "S5"
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                repositoryName: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetCommits: {
            input: {
                type: "structure",
                required: [ "commitIds", "repositoryName" ],
                members: {
                    commitIds: {
                        type: "list",
                        member: {}
                    },
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    commits: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                commitId: {},
                                errorCode: {},
                                errorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetRepositories: {
            input: {
                type: "structure",
                required: [ "repositoryNames" ],
                members: {
                    repositoryNames: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        type: "list",
                        member: {
                            shape: "S1x"
                        }
                    },
                    repositoriesNotFound: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        CreateApprovalRuleTemplate: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "approvalRuleTemplateContent" ],
                members: {
                    approvalRuleTemplateName: {},
                    approvalRuleTemplateContent: {},
                    approvalRuleTemplateDescription: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleTemplate" ],
                members: {
                    approvalRuleTemplate: {
                        shape: "S2c"
                    }
                }
            }
        },
        CreateBranch: {
            input: {
                type: "structure",
                required: [ "repositoryName", "branchName", "commitId" ],
                members: {
                    repositoryName: {},
                    branchName: {},
                    commitId: {}
                }
            }
        },
        CreateCommit: {
            input: {
                type: "structure",
                required: [ "repositoryName", "branchName" ],
                members: {
                    repositoryName: {},
                    branchName: {},
                    parentCommitId: {},
                    authorName: {},
                    email: {},
                    commitMessage: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    putFiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "filePath" ],
                            members: {
                                filePath: {},
                                fileMode: {},
                                fileContent: {
                                    type: "blob"
                                },
                                sourceFile: {
                                    type: "structure",
                                    required: [ "filePath" ],
                                    members: {
                                        filePath: {},
                                        isMove: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    deleteFiles: {
                        shape: "S2o"
                    },
                    setFileModes: {
                        shape: "S2q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    commitId: {},
                    treeId: {},
                    filesAdded: {
                        shape: "S2t"
                    },
                    filesUpdated: {
                        shape: "S2t"
                    },
                    filesDeleted: {
                        shape: "S2t"
                    }
                }
            }
        },
        CreatePullRequest: {
            input: {
                type: "structure",
                required: [ "title", "targets" ],
                members: {
                    title: {},
                    description: {},
                    targets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "repositoryName", "sourceReference" ],
                            members: {
                                repositoryName: {},
                                sourceReference: {},
                                destinationReference: {}
                            }
                        }
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequest" ],
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        CreatePullRequestApprovalRule: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "approvalRuleName", "approvalRuleContent" ],
                members: {
                    pullRequestId: {},
                    approvalRuleName: {},
                    approvalRuleContent: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRule" ],
                members: {
                    approvalRule: {
                        shape: "S3c"
                    }
                }
            }
        },
        CreateRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    repositoryDescription: {},
                    tags: {
                        shape: "S3k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryMetadata: {
                        shape: "S1x"
                    }
                }
            }
        },
        CreateUnreferencedMergeCommit: {
            input: {
                type: "structure",
                required: [ "repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier", "mergeOption" ],
                members: {
                    repositoryName: {},
                    sourceCommitSpecifier: {},
                    destinationCommitSpecifier: {},
                    mergeOption: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    authorName: {},
                    email: {},
                    commitMessage: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    conflictResolution: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    commitId: {},
                    treeId: {}
                }
            }
        },
        DeleteApprovalRuleTemplate: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName" ],
                members: {
                    approvalRuleTemplateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleTemplateId" ],
                members: {
                    approvalRuleTemplateId: {}
                }
            }
        },
        DeleteBranch: {
            input: {
                type: "structure",
                required: [ "repositoryName", "branchName" ],
                members: {
                    repositoryName: {},
                    branchName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deletedBranch: {
                        shape: "S3y"
                    }
                }
            }
        },
        DeleteCommentContent: {
            input: {
                type: "structure",
                required: [ "commentId" ],
                members: {
                    commentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    comment: {
                        shape: "S42"
                    }
                }
            }
        },
        DeleteFile: {
            input: {
                type: "structure",
                required: [ "repositoryName", "branchName", "filePath", "parentCommitId" ],
                members: {
                    repositoryName: {},
                    branchName: {},
                    filePath: {},
                    parentCommitId: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    commitMessage: {},
                    name: {},
                    email: {}
                }
            },
            output: {
                type: "structure",
                required: [ "commitId", "blobId", "treeId", "filePath" ],
                members: {
                    commitId: {},
                    blobId: {},
                    treeId: {},
                    filePath: {}
                }
            }
        },
        DeletePullRequestApprovalRule: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "approvalRuleName" ],
                members: {
                    pullRequestId: {},
                    approvalRuleName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleId" ],
                members: {
                    approvalRuleId: {}
                }
            }
        },
        DeleteRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryId: {}
                }
            }
        },
        DescribeMergeConflicts: {
            input: {
                type: "structure",
                required: [ "repositoryName", "destinationCommitSpecifier", "sourceCommitSpecifier", "mergeOption", "filePath" ],
                members: {
                    repositoryName: {},
                    destinationCommitSpecifier: {},
                    sourceCommitSpecifier: {},
                    mergeOption: {},
                    maxMergeHunks: {
                        type: "integer"
                    },
                    filePath: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "conflictMetadata", "mergeHunks", "destinationCommitId", "sourceCommitId" ],
                members: {
                    conflictMetadata: {
                        shape: "Sn"
                    },
                    mergeHunks: {
                        shape: "S12"
                    },
                    nextToken: {},
                    destinationCommitId: {},
                    sourceCommitId: {},
                    baseCommitId: {}
                }
            }
        },
        DescribePullRequestEvents: {
            input: {
                type: "structure",
                required: [ "pullRequestId" ],
                members: {
                    pullRequestId: {},
                    pullRequestEventType: {},
                    actorArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequestEvents" ],
                members: {
                    pullRequestEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pullRequestId: {},
                                eventDate: {
                                    type: "timestamp"
                                },
                                pullRequestEventType: {},
                                actorArn: {},
                                pullRequestCreatedEventMetadata: {
                                    type: "structure",
                                    members: {
                                        repositoryName: {},
                                        sourceCommitId: {},
                                        destinationCommitId: {},
                                        mergeBase: {}
                                    }
                                },
                                pullRequestStatusChangedEventMetadata: {
                                    type: "structure",
                                    members: {
                                        pullRequestStatus: {}
                                    }
                                },
                                pullRequestSourceReferenceUpdatedEventMetadata: {
                                    type: "structure",
                                    members: {
                                        repositoryName: {},
                                        beforeCommitId: {},
                                        afterCommitId: {},
                                        mergeBase: {}
                                    }
                                },
                                pullRequestMergedStateChangedEventMetadata: {
                                    type: "structure",
                                    members: {
                                        repositoryName: {},
                                        destinationReference: {},
                                        mergeMetadata: {
                                            shape: "S38"
                                        }
                                    }
                                },
                                approvalRuleEventMetadata: {
                                    type: "structure",
                                    members: {
                                        approvalRuleName: {},
                                        approvalRuleId: {},
                                        approvalRuleContent: {}
                                    }
                                },
                                approvalStateChangedEventMetadata: {
                                    type: "structure",
                                    members: {
                                        revisionId: {},
                                        approvalStatus: {}
                                    }
                                },
                                approvalRuleOverriddenEventMetadata: {
                                    type: "structure",
                                    members: {
                                        revisionId: {},
                                        overrideStatus: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisassociateApprovalRuleTemplateFromRepository: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "repositoryName" ],
                members: {
                    approvalRuleTemplateName: {},
                    repositoryName: {}
                }
            }
        },
        EvaluatePullRequestApprovalRules: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "revisionId" ],
                members: {
                    pullRequestId: {},
                    revisionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "evaluation" ],
                members: {
                    evaluation: {
                        type: "structure",
                        members: {
                            approved: {
                                type: "boolean"
                            },
                            overridden: {
                                type: "boolean"
                            },
                            approvalRulesSatisfied: {
                                type: "list",
                                member: {}
                            },
                            approvalRulesNotSatisfied: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        GetApprovalRuleTemplate: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName" ],
                members: {
                    approvalRuleTemplateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleTemplate" ],
                members: {
                    approvalRuleTemplate: {
                        shape: "S2c"
                    }
                }
            }
        },
        GetBlob: {
            input: {
                type: "structure",
                required: [ "repositoryName", "blobId" ],
                members: {
                    repositoryName: {},
                    blobId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "content" ],
                members: {
                    content: {
                        type: "blob"
                    }
                }
            }
        },
        GetBranch: {
            input: {
                type: "structure",
                members: {
                    repositoryName: {},
                    branchName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    branch: {
                        shape: "S3y"
                    }
                }
            }
        },
        GetComment: {
            input: {
                type: "structure",
                required: [ "commentId" ],
                members: {
                    commentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    comment: {
                        shape: "S42"
                    }
                }
            }
        },
        GetCommentReactions: {
            input: {
                type: "structure",
                required: [ "commentId" ],
                members: {
                    commentId: {},
                    reactionUserArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "reactionsForComment" ],
                members: {
                    reactionsForComment: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                reaction: {
                                    type: "structure",
                                    members: {
                                        emoji: {},
                                        shortCode: {},
                                        unicode: {}
                                    }
                                },
                                reactionUsers: {
                                    type: "list",
                                    member: {}
                                },
                                reactionsFromDeletedUsersCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetCommentsForComparedCommit: {
            input: {
                type: "structure",
                required: [ "repositoryName", "afterCommitId" ],
                members: {
                    repositoryName: {},
                    beforeCommitId: {},
                    afterCommitId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    commentsForComparedCommitData: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                repositoryName: {},
                                beforeCommitId: {},
                                afterCommitId: {},
                                beforeBlobId: {},
                                afterBlobId: {},
                                location: {
                                    shape: "S5q"
                                },
                                comments: {
                                    shape: "S5t"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetCommentsForPullRequest: {
            input: {
                type: "structure",
                required: [ "pullRequestId" ],
                members: {
                    pullRequestId: {},
                    repositoryName: {},
                    beforeCommitId: {},
                    afterCommitId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    commentsForPullRequestData: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pullRequestId: {},
                                repositoryName: {},
                                beforeCommitId: {},
                                afterCommitId: {},
                                beforeBlobId: {},
                                afterBlobId: {},
                                location: {
                                    shape: "S5q"
                                },
                                comments: {
                                    shape: "S5t"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetCommit: {
            input: {
                type: "structure",
                required: [ "repositoryName", "commitId" ],
                members: {
                    repositoryName: {},
                    commitId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "commit" ],
                members: {
                    commit: {
                        shape: "S1l"
                    }
                }
            }
        },
        GetDifferences: {
            input: {
                type: "structure",
                required: [ "repositoryName", "afterCommitSpecifier" ],
                members: {
                    repositoryName: {},
                    beforeCommitSpecifier: {},
                    afterCommitSpecifier: {},
                    beforePath: {},
                    afterPath: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    differences: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                beforeBlob: {
                                    shape: "S65"
                                },
                                afterBlob: {
                                    shape: "S65"
                                },
                                changeType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetFile: {
            input: {
                type: "structure",
                required: [ "repositoryName", "filePath" ],
                members: {
                    repositoryName: {},
                    commitSpecifier: {},
                    filePath: {}
                }
            },
            output: {
                type: "structure",
                required: [ "commitId", "blobId", "filePath", "fileMode", "fileSize", "fileContent" ],
                members: {
                    commitId: {},
                    blobId: {},
                    filePath: {},
                    fileMode: {},
                    fileSize: {
                        type: "long"
                    },
                    fileContent: {
                        type: "blob"
                    }
                }
            }
        },
        GetFolder: {
            input: {
                type: "structure",
                required: [ "repositoryName", "folderPath" ],
                members: {
                    repositoryName: {},
                    commitSpecifier: {},
                    folderPath: {}
                }
            },
            output: {
                type: "structure",
                required: [ "commitId", "folderPath" ],
                members: {
                    commitId: {},
                    folderPath: {},
                    treeId: {},
                    subFolders: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                treeId: {},
                                absolutePath: {},
                                relativePath: {}
                            }
                        }
                    },
                    files: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                blobId: {},
                                absolutePath: {},
                                relativePath: {},
                                fileMode: {}
                            }
                        }
                    },
                    symbolicLinks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                blobId: {},
                                absolutePath: {},
                                relativePath: {},
                                fileMode: {}
                            }
                        }
                    },
                    subModules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                commitId: {},
                                absolutePath: {},
                                relativePath: {}
                            }
                        }
                    }
                }
            }
        },
        GetMergeCommit: {
            input: {
                type: "structure",
                required: [ "repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier" ],
                members: {
                    repositoryName: {},
                    sourceCommitSpecifier: {},
                    destinationCommitSpecifier: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceCommitId: {},
                    destinationCommitId: {},
                    baseCommitId: {},
                    mergedCommitId: {}
                }
            }
        },
        GetMergeConflicts: {
            input: {
                type: "structure",
                required: [ "repositoryName", "destinationCommitSpecifier", "sourceCommitSpecifier", "mergeOption" ],
                members: {
                    repositoryName: {},
                    destinationCommitSpecifier: {},
                    sourceCommitSpecifier: {},
                    mergeOption: {},
                    conflictDetailLevel: {},
                    maxConflictFiles: {
                        type: "integer"
                    },
                    conflictResolutionStrategy: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "mergeable", "destinationCommitId", "sourceCommitId", "conflictMetadataList" ],
                members: {
                    mergeable: {
                        type: "boolean"
                    },
                    destinationCommitId: {},
                    sourceCommitId: {},
                    baseCommitId: {},
                    conflictMetadataList: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetMergeOptions: {
            input: {
                type: "structure",
                required: [ "repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier" ],
                members: {
                    repositoryName: {},
                    sourceCommitSpecifier: {},
                    destinationCommitSpecifier: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {}
                }
            },
            output: {
                type: "structure",
                required: [ "mergeOptions", "sourceCommitId", "destinationCommitId", "baseCommitId" ],
                members: {
                    mergeOptions: {
                        type: "list",
                        member: {}
                    },
                    sourceCommitId: {},
                    destinationCommitId: {},
                    baseCommitId: {}
                }
            }
        },
        GetPullRequest: {
            input: {
                type: "structure",
                required: [ "pullRequestId" ],
                members: {
                    pullRequestId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequest" ],
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        GetPullRequestApprovalStates: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "revisionId" ],
                members: {
                    pullRequestId: {},
                    revisionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    approvals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                userArn: {},
                                approvalState: {}
                            }
                        }
                    }
                }
            }
        },
        GetPullRequestOverrideState: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "revisionId" ],
                members: {
                    pullRequestId: {},
                    revisionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    overridden: {
                        type: "boolean"
                    },
                    overrider: {}
                }
            }
        },
        GetRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryMetadata: {
                        shape: "S1x"
                    }
                }
            }
        },
        GetRepositoryTriggers: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    configurationId: {},
                    triggers: {
                        shape: "S76"
                    }
                }
            }
        },
        ListApprovalRuleTemplates: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    approvalRuleTemplateNames: {
                        shape: "S7f"
                    },
                    nextToken: {}
                }
            }
        },
        ListAssociatedApprovalRuleTemplatesForRepository: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    approvalRuleTemplateNames: {
                        shape: "S7f"
                    },
                    nextToken: {}
                }
            }
        },
        ListBranches: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    branches: {
                        shape: "S7a"
                    },
                    nextToken: {}
                }
            }
        },
        ListFileCommitHistory: {
            input: {
                type: "structure",
                required: [ "repositoryName", "filePath" ],
                members: {
                    repositoryName: {},
                    commitSpecifier: {},
                    filePath: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "revisionDag" ],
                members: {
                    revisionDag: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                commit: {
                                    shape: "S1l"
                                },
                                blobId: {},
                                path: {},
                                revisionChildren: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPullRequests: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    authorArn: {},
                    pullRequestStatus: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequestIds" ],
                members: {
                    pullRequestIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositories: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    sortBy: {},
                    order: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    repositories: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                repositoryName: {},
                                repositoryId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRepositoriesForApprovalRuleTemplate: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName" ],
                members: {
                    approvalRuleTemplateName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryNames: {
                        shape: "S5"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S3k"
                    },
                    nextToken: {}
                }
            }
        },
        MergeBranchesByFastForward: {
            input: {
                type: "structure",
                required: [ "repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier" ],
                members: {
                    repositoryName: {},
                    sourceCommitSpecifier: {},
                    destinationCommitSpecifier: {},
                    targetBranch: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    commitId: {},
                    treeId: {}
                }
            }
        },
        MergeBranchesBySquash: {
            input: {
                type: "structure",
                required: [ "repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier" ],
                members: {
                    repositoryName: {},
                    sourceCommitSpecifier: {},
                    destinationCommitSpecifier: {},
                    targetBranch: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    authorName: {},
                    email: {},
                    commitMessage: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    conflictResolution: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    commitId: {},
                    treeId: {}
                }
            }
        },
        MergeBranchesByThreeWay: {
            input: {
                type: "structure",
                required: [ "repositoryName", "sourceCommitSpecifier", "destinationCommitSpecifier" ],
                members: {
                    repositoryName: {},
                    sourceCommitSpecifier: {},
                    destinationCommitSpecifier: {},
                    targetBranch: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    authorName: {},
                    email: {},
                    commitMessage: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    conflictResolution: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    commitId: {},
                    treeId: {}
                }
            }
        },
        MergePullRequestByFastForward: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "repositoryName" ],
                members: {
                    pullRequestId: {},
                    repositoryName: {},
                    sourceCommitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        MergePullRequestBySquash: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "repositoryName" ],
                members: {
                    pullRequestId: {},
                    repositoryName: {},
                    sourceCommitId: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    commitMessage: {},
                    authorName: {},
                    email: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    conflictResolution: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        MergePullRequestByThreeWay: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "repositoryName" ],
                members: {
                    pullRequestId: {},
                    repositoryName: {},
                    sourceCommitId: {},
                    conflictDetailLevel: {},
                    conflictResolutionStrategy: {},
                    commitMessage: {},
                    authorName: {},
                    email: {},
                    keepEmptyFolders: {
                        type: "boolean"
                    },
                    conflictResolution: {
                        shape: "S3p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        OverridePullRequestApprovalRules: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "revisionId", "overrideStatus" ],
                members: {
                    pullRequestId: {},
                    revisionId: {},
                    overrideStatus: {}
                }
            }
        },
        PostCommentForComparedCommit: {
            input: {
                type: "structure",
                required: [ "repositoryName", "afterCommitId", "content" ],
                members: {
                    repositoryName: {},
                    beforeCommitId: {},
                    afterCommitId: {},
                    location: {
                        shape: "S5q"
                    },
                    content: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryName: {},
                    beforeCommitId: {},
                    afterCommitId: {},
                    beforeBlobId: {},
                    afterBlobId: {},
                    location: {
                        shape: "S5q"
                    },
                    comment: {
                        shape: "S42"
                    }
                }
            },
            idempotent: true
        },
        PostCommentForPullRequest: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "repositoryName", "beforeCommitId", "afterCommitId", "content" ],
                members: {
                    pullRequestId: {},
                    repositoryName: {},
                    beforeCommitId: {},
                    afterCommitId: {},
                    location: {
                        shape: "S5q"
                    },
                    content: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    repositoryName: {},
                    pullRequestId: {},
                    beforeCommitId: {},
                    afterCommitId: {},
                    beforeBlobId: {},
                    afterBlobId: {},
                    location: {
                        shape: "S5q"
                    },
                    comment: {
                        shape: "S42"
                    }
                }
            },
            idempotent: true
        },
        PostCommentReply: {
            input: {
                type: "structure",
                required: [ "inReplyTo", "content" ],
                members: {
                    inReplyTo: {},
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    content: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    comment: {
                        shape: "S42"
                    }
                }
            },
            idempotent: true
        },
        PutCommentReaction: {
            input: {
                type: "structure",
                required: [ "commentId", "reactionValue" ],
                members: {
                    commentId: {},
                    reactionValue: {}
                }
            }
        },
        PutFile: {
            input: {
                type: "structure",
                required: [ "repositoryName", "branchName", "fileContent", "filePath" ],
                members: {
                    repositoryName: {},
                    branchName: {},
                    fileContent: {
                        type: "blob"
                    },
                    filePath: {},
                    fileMode: {},
                    parentCommitId: {},
                    commitMessage: {},
                    name: {},
                    email: {}
                }
            },
            output: {
                type: "structure",
                required: [ "commitId", "blobId", "treeId" ],
                members: {
                    commitId: {},
                    blobId: {},
                    treeId: {}
                }
            }
        },
        PutRepositoryTriggers: {
            input: {
                type: "structure",
                required: [ "repositoryName", "triggers" ],
                members: {
                    repositoryName: {},
                    triggers: {
                        shape: "S76"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    configurationId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3k"
                    }
                }
            }
        },
        TestRepositoryTriggers: {
            input: {
                type: "structure",
                required: [ "repositoryName", "triggers" ],
                members: {
                    repositoryName: {},
                    triggers: {
                        shape: "S76"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    successfulExecutions: {
                        type: "list",
                        member: {}
                    },
                    failedExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                trigger: {},
                                failureMessage: {}
                            }
                        }
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateApprovalRuleTemplateContent: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "newRuleContent" ],
                members: {
                    approvalRuleTemplateName: {},
                    newRuleContent: {},
                    existingRuleContentSha256: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleTemplate" ],
                members: {
                    approvalRuleTemplate: {
                        shape: "S2c"
                    }
                }
            }
        },
        UpdateApprovalRuleTemplateDescription: {
            input: {
                type: "structure",
                required: [ "approvalRuleTemplateName", "approvalRuleTemplateDescription" ],
                members: {
                    approvalRuleTemplateName: {},
                    approvalRuleTemplateDescription: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleTemplate" ],
                members: {
                    approvalRuleTemplate: {
                        shape: "S2c"
                    }
                }
            }
        },
        UpdateApprovalRuleTemplateName: {
            input: {
                type: "structure",
                required: [ "oldApprovalRuleTemplateName", "newApprovalRuleTemplateName" ],
                members: {
                    oldApprovalRuleTemplateName: {},
                    newApprovalRuleTemplateName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRuleTemplate" ],
                members: {
                    approvalRuleTemplate: {
                        shape: "S2c"
                    }
                }
            }
        },
        UpdateComment: {
            input: {
                type: "structure",
                required: [ "commentId", "content" ],
                members: {
                    commentId: {},
                    content: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    comment: {
                        shape: "S42"
                    }
                }
            }
        },
        UpdateDefaultBranch: {
            input: {
                type: "structure",
                required: [ "repositoryName", "defaultBranchName" ],
                members: {
                    repositoryName: {},
                    defaultBranchName: {}
                }
            }
        },
        UpdatePullRequestApprovalRuleContent: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "approvalRuleName", "newRuleContent" ],
                members: {
                    pullRequestId: {},
                    approvalRuleName: {},
                    existingRuleContentSha256: {},
                    newRuleContent: {}
                }
            },
            output: {
                type: "structure",
                required: [ "approvalRule" ],
                members: {
                    approvalRule: {
                        shape: "S3c"
                    }
                }
            }
        },
        UpdatePullRequestApprovalState: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "revisionId", "approvalState" ],
                members: {
                    pullRequestId: {},
                    revisionId: {},
                    approvalState: {}
                }
            }
        },
        UpdatePullRequestDescription: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "description" ],
                members: {
                    pullRequestId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequest" ],
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        UpdatePullRequestStatus: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "pullRequestStatus" ],
                members: {
                    pullRequestId: {},
                    pullRequestStatus: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequest" ],
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        UpdatePullRequestTitle: {
            input: {
                type: "structure",
                required: [ "pullRequestId", "title" ],
                members: {
                    pullRequestId: {},
                    title: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pullRequest" ],
                members: {
                    pullRequest: {
                        shape: "S33"
                    }
                }
            }
        },
        UpdateRepositoryDescription: {
            input: {
                type: "structure",
                required: [ "repositoryName" ],
                members: {
                    repositoryName: {},
                    repositoryDescription: {}
                }
            }
        },
        UpdateRepositoryName: {
            input: {
                type: "structure",
                required: [ "oldName", "newName" ],
                members: {
                    oldName: {},
                    newName: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        Sn: {
            type: "structure",
            members: {
                filePath: {},
                fileSizes: {
                    type: "structure",
                    members: {
                        source: {
                            type: "long"
                        },
                        destination: {
                            type: "long"
                        },
                        base: {
                            type: "long"
                        }
                    }
                },
                fileModes: {
                    type: "structure",
                    members: {
                        source: {},
                        destination: {},
                        base: {}
                    }
                },
                objectTypes: {
                    type: "structure",
                    members: {
                        source: {},
                        destination: {},
                        base: {}
                    }
                },
                numberOfConflicts: {
                    type: "integer"
                },
                isBinaryFile: {
                    type: "structure",
                    members: {
                        source: {
                            type: "boolean"
                        },
                        destination: {
                            type: "boolean"
                        },
                        base: {
                            type: "boolean"
                        }
                    }
                },
                contentConflict: {
                    type: "boolean"
                },
                fileModeConflict: {
                    type: "boolean"
                },
                objectTypeConflict: {
                    type: "boolean"
                },
                mergeOperations: {
                    type: "structure",
                    members: {
                        source: {},
                        destination: {}
                    }
                }
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    isConflict: {
                        type: "boolean"
                    },
                    source: {
                        shape: "S15"
                    },
                    destination: {
                        shape: "S15"
                    },
                    base: {
                        shape: "S15"
                    }
                }
            }
        },
        S15: {
            type: "structure",
            members: {
                startLine: {
                    type: "integer"
                },
                endLine: {
                    type: "integer"
                },
                hunkContent: {}
            }
        },
        S1l: {
            type: "structure",
            members: {
                commitId: {},
                treeId: {},
                parents: {
                    type: "list",
                    member: {}
                },
                message: {},
                author: {
                    shape: "S1n"
                },
                committer: {
                    shape: "S1n"
                },
                additionalData: {}
            }
        },
        S1n: {
            type: "structure",
            members: {
                name: {},
                email: {},
                date: {}
            }
        },
        S1x: {
            type: "structure",
            members: {
                accountId: {},
                repositoryId: {},
                repositoryName: {},
                repositoryDescription: {},
                defaultBranch: {},
                lastModifiedDate: {
                    type: "timestamp"
                },
                creationDate: {
                    type: "timestamp"
                },
                cloneUrlHttp: {},
                cloneUrlSsh: {},
                Arn: {}
            }
        },
        S2c: {
            type: "structure",
            members: {
                approvalRuleTemplateId: {},
                approvalRuleTemplateName: {},
                approvalRuleTemplateDescription: {},
                approvalRuleTemplateContent: {},
                ruleContentSha256: {},
                lastModifiedDate: {
                    type: "timestamp"
                },
                creationDate: {
                    type: "timestamp"
                },
                lastModifiedUser: {}
            }
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "filePath" ],
                members: {
                    filePath: {}
                }
            }
        },
        S2q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "filePath", "fileMode" ],
                members: {
                    filePath: {},
                    fileMode: {}
                }
            }
        },
        S2t: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    absolutePath: {},
                    blobId: {},
                    fileMode: {}
                }
            }
        },
        S33: {
            type: "structure",
            members: {
                pullRequestId: {},
                title: {},
                description: {},
                lastActivityDate: {
                    type: "timestamp"
                },
                creationDate: {
                    type: "timestamp"
                },
                pullRequestStatus: {},
                authorArn: {},
                pullRequestTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            repositoryName: {},
                            sourceReference: {},
                            destinationReference: {},
                            destinationCommit: {},
                            sourceCommit: {},
                            mergeBase: {},
                            mergeMetadata: {
                                shape: "S38"
                            }
                        }
                    }
                },
                clientRequestToken: {},
                revisionId: {},
                approvalRules: {
                    type: "list",
                    member: {
                        shape: "S3c"
                    }
                }
            }
        },
        S38: {
            type: "structure",
            members: {
                isMerged: {
                    type: "boolean"
                },
                mergedBy: {},
                mergeCommitId: {},
                mergeOption: {}
            }
        },
        S3c: {
            type: "structure",
            members: {
                approvalRuleId: {},
                approvalRuleName: {},
                approvalRuleContent: {},
                ruleContentSha256: {},
                lastModifiedDate: {
                    type: "timestamp"
                },
                creationDate: {
                    type: "timestamp"
                },
                lastModifiedUser: {},
                originApprovalRuleTemplate: {
                    type: "structure",
                    members: {
                        approvalRuleTemplateId: {},
                        approvalRuleTemplateName: {}
                    }
                }
            }
        },
        S3k: {
            type: "map",
            key: {},
            value: {}
        },
        S3p: {
            type: "structure",
            members: {
                replaceContents: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "filePath", "replacementType" ],
                        members: {
                            filePath: {},
                            replacementType: {},
                            content: {
                                type: "blob"
                            },
                            fileMode: {}
                        }
                    }
                },
                deleteFiles: {
                    shape: "S2o"
                },
                setFileModes: {
                    shape: "S2q"
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                branchName: {},
                commitId: {}
            }
        },
        S42: {
            type: "structure",
            members: {
                commentId: {},
                content: {},
                inReplyTo: {},
                creationDate: {
                    type: "timestamp"
                },
                lastModifiedDate: {
                    type: "timestamp"
                },
                authorArn: {},
                deleted: {
                    type: "boolean"
                },
                clientRequestToken: {},
                callerReactions: {
                    type: "list",
                    member: {}
                },
                reactionCounts: {
                    type: "map",
                    key: {},
                    value: {
                        type: "integer"
                    }
                }
            }
        },
        S5q: {
            type: "structure",
            members: {
                filePath: {},
                filePosition: {
                    type: "long"
                },
                relativeFileVersion: {}
            }
        },
        S5t: {
            type: "list",
            member: {
                shape: "S42"
            }
        },
        S65: {
            type: "structure",
            members: {
                blobId: {},
                path: {},
                mode: {}
            }
        },
        S76: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "destinationArn", "events" ],
                members: {
                    name: {},
                    destinationArn: {},
                    customData: {},
                    branches: {
                        shape: "S7a"
                    },
                    events: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S7a: {
            type: "list",
            member: {}
        },
        S7f: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeMergeConflicts: {
            input_token: "nextToken",
            limit_key: "maxMergeHunks",
            output_token: "nextToken"
        },
        DescribePullRequestEvents: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        GetCommentReactions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        GetCommentsForComparedCommit: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        GetCommentsForPullRequest: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        GetDifferences: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMergeConflicts: {
            input_token: "nextToken",
            limit_key: "maxConflictFiles",
            output_token: "nextToken"
        },
        ListApprovalRuleTemplates: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        ListAssociatedApprovalRuleTemplatesForRepository: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        ListBranches: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "branches"
        },
        ListFileCommitHistory: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        ListPullRequests: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        },
        ListRepositories: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "repositories"
        },
        ListRepositoriesForApprovalRuleTemplate: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken"
        }
    }
};

AWS.apiLoader.services["codedeploy"] = {};

AWS.CodeDeploy = AWS.Service.defineService("codedeploy", [ "2014-10-06" ]);

AWS.apiLoader.services["codedeploy"]["2014-10-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-10-06",
        endpointPrefix: "codedeploy",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CodeDeploy",
        serviceFullName: "AWS CodeDeploy",
        serviceId: "CodeDeploy",
        signatureVersion: "v4",
        targetPrefix: "CodeDeploy_20141006",
        uid: "codedeploy-2014-10-06"
    },
    operations: {
        AddTagsToOnPremisesInstances: {
            input: {
                type: "structure",
                required: [ "tags", "instanceNames" ],
                members: {
                    tags: {
                        shape: "S2"
                    },
                    instanceNames: {
                        shape: "S6"
                    }
                }
            }
        },
        BatchGetApplicationRevisions: {
            input: {
                type: "structure",
                required: [ "applicationName", "revisions" ],
                members: {
                    applicationName: {},
                    revisions: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationName: {},
                    errorMessage: {},
                    revisions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                revisionLocation: {
                                    shape: "Sb"
                                },
                                genericRevisionInfo: {
                                    shape: "Su"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchGetApplications: {
            input: {
                type: "structure",
                required: [ "applicationNames" ],
                members: {
                    applicationNames: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationsInfo: {
                        type: "list",
                        member: {
                            shape: "S13"
                        }
                    }
                }
            }
        },
        BatchGetDeploymentGroups: {
            input: {
                type: "structure",
                required: [ "applicationName", "deploymentGroupNames" ],
                members: {
                    applicationName: {},
                    deploymentGroupNames: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentGroupsInfo: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    errorMessage: {}
                }
            }
        },
        BatchGetDeploymentInstances: {
            input: {
                type: "structure",
                required: [ "deploymentId", "instanceIds" ],
                members: {
                    deploymentId: {},
                    instanceIds: {
                        shape: "S32"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instancesSummary: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    },
                    errorMessage: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use BatchGetDeploymentTargets instead."
        },
        BatchGetDeploymentTargets: {
            input: {
                type: "structure",
                required: [ "deploymentId", "targetIds" ],
                members: {
                    deploymentId: {},
                    targetIds: {
                        shape: "S3j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentTargets: {
                        type: "list",
                        member: {
                            shape: "S3n"
                        }
                    }
                }
            }
        },
        BatchGetDeployments: {
            input: {
                type: "structure",
                required: [ "deploymentIds" ],
                members: {
                    deploymentIds: {
                        shape: "S49"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentsInfo: {
                        type: "list",
                        member: {
                            shape: "S4c"
                        }
                    }
                }
            }
        },
        BatchGetOnPremisesInstances: {
            input: {
                type: "structure",
                required: [ "instanceNames" ],
                members: {
                    instanceNames: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceInfos: {
                        type: "list",
                        member: {
                            shape: "S4t"
                        }
                    }
                }
            }
        },
        ContinueDeployment: {
            input: {
                type: "structure",
                members: {
                    deploymentId: {},
                    deploymentWaitType: {}
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "applicationName" ],
                members: {
                    applicationName: {},
                    computePlatform: {},
                    tags: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationId: {}
                }
            }
        },
        CreateDeployment: {
            input: {
                type: "structure",
                required: [ "applicationName" ],
                members: {
                    applicationName: {},
                    deploymentGroupName: {},
                    revision: {
                        shape: "Sb"
                    },
                    deploymentConfigName: {},
                    description: {},
                    ignoreApplicationStopFailures: {
                        type: "boolean"
                    },
                    targetInstances: {
                        shape: "S4j"
                    },
                    autoRollbackConfiguration: {
                        shape: "S1z"
                    },
                    updateOutdatedInstancesOnly: {
                        type: "boolean"
                    },
                    fileExistsBehavior: {},
                    overrideAlarmConfiguration: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentId: {}
                }
            }
        },
        CreateDeploymentConfig: {
            input: {
                type: "structure",
                required: [ "deploymentConfigName" ],
                members: {
                    deploymentConfigName: {},
                    minimumHealthyHosts: {
                        shape: "S54"
                    },
                    trafficRoutingConfig: {
                        shape: "S57"
                    },
                    computePlatform: {},
                    zonalConfig: {
                        shape: "S5d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentConfigId: {}
                }
            }
        },
        CreateDeploymentGroup: {
            input: {
                type: "structure",
                required: [ "applicationName", "deploymentGroupName", "serviceRoleArn" ],
                members: {
                    applicationName: {},
                    deploymentGroupName: {},
                    deploymentConfigName: {},
                    ec2TagFilters: {
                        shape: "S1e"
                    },
                    onPremisesInstanceTagFilters: {
                        shape: "S1h"
                    },
                    autoScalingGroups: {
                        shape: "S4k"
                    },
                    serviceRoleArn: {},
                    triggerConfigurations: {
                        shape: "S1p"
                    },
                    alarmConfiguration: {
                        shape: "S1v"
                    },
                    autoRollbackConfiguration: {
                        shape: "S1z"
                    },
                    outdatedInstancesStrategy: {},
                    deploymentStyle: {
                        shape: "S22"
                    },
                    blueGreenDeploymentConfiguration: {
                        shape: "S26"
                    },
                    loadBalancerInfo: {
                        shape: "S2e"
                    },
                    ec2TagSet: {
                        shape: "S2t"
                    },
                    ecsServices: {
                        shape: "S2x"
                    },
                    onPremisesTagSet: {
                        shape: "S2v"
                    },
                    tags: {
                        shape: "S2"
                    },
                    terminationHookEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentGroupId: {}
                }
            }
        },
        DeleteApplication: {
            input: {
                type: "structure",
                required: [ "applicationName" ],
                members: {
                    applicationName: {}
                }
            }
        },
        DeleteDeploymentConfig: {
            input: {
                type: "structure",
                required: [ "deploymentConfigName" ],
                members: {
                    deploymentConfigName: {}
                }
            }
        },
        DeleteDeploymentGroup: {
            input: {
                type: "structure",
                required: [ "applicationName", "deploymentGroupName" ],
                members: {
                    applicationName: {},
                    deploymentGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    hooksNotCleanedUp: {
                        shape: "S1k"
                    }
                }
            }
        },
        DeleteGitHubAccountToken: {
            input: {
                type: "structure",
                members: {
                    tokenName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tokenName: {}
                }
            }
        },
        DeleteResourcesByExternalId: {
            input: {
                type: "structure",
                members: {
                    externalId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterOnPremisesInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            }
        },
        GetApplication: {
            input: {
                type: "structure",
                required: [ "applicationName" ],
                members: {
                    applicationName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    application: {
                        shape: "S13"
                    }
                }
            }
        },
        GetApplicationRevision: {
            input: {
                type: "structure",
                required: [ "applicationName", "revision" ],
                members: {
                    applicationName: {},
                    revision: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationName: {},
                    revision: {
                        shape: "Sb"
                    },
                    revisionInfo: {
                        shape: "Su"
                    }
                }
            }
        },
        GetDeployment: {
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentInfo: {
                        shape: "S4c"
                    }
                }
            }
        },
        GetDeploymentConfig: {
            input: {
                type: "structure",
                required: [ "deploymentConfigName" ],
                members: {
                    deploymentConfigName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentConfigInfo: {
                        type: "structure",
                        members: {
                            deploymentConfigId: {},
                            deploymentConfigName: {},
                            minimumHealthyHosts: {
                                shape: "S54"
                            },
                            createTime: {
                                type: "timestamp"
                            },
                            computePlatform: {},
                            trafficRoutingConfig: {
                                shape: "S57"
                            },
                            zonalConfig: {
                                shape: "S5d"
                            }
                        }
                    }
                }
            }
        },
        GetDeploymentGroup: {
            input: {
                type: "structure",
                required: [ "applicationName", "deploymentGroupName" ],
                members: {
                    applicationName: {},
                    deploymentGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentGroupInfo: {
                        shape: "S1b"
                    }
                }
            }
        },
        GetDeploymentInstance: {
            input: {
                type: "structure",
                required: [ "deploymentId", "instanceId" ],
                members: {
                    deploymentId: {},
                    instanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceSummary: {
                        shape: "S36"
                    }
                }
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use GetDeploymentTarget instead."
        },
        GetDeploymentTarget: {
            input: {
                type: "structure",
                required: [ "deploymentId", "targetId" ],
                members: {
                    deploymentId: {},
                    targetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentTarget: {
                        shape: "S3n"
                    }
                }
            }
        },
        GetOnPremisesInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceInfo: {
                        shape: "S4t"
                    }
                }
            }
        },
        ListApplicationRevisions: {
            input: {
                type: "structure",
                required: [ "applicationName" ],
                members: {
                    applicationName: {},
                    sortBy: {},
                    sortOrder: {},
                    s3Bucket: {},
                    s3KeyPrefix: {},
                    deployed: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    revisions: {
                        shape: "Sa"
                    },
                    nextToken: {}
                }
            }
        },
        ListApplications: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    applications: {
                        shape: "S10"
                    },
                    nextToken: {}
                }
            }
        },
        ListDeploymentConfigs: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deploymentConfigsList: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListDeploymentGroups: {
            input: {
                type: "structure",
                required: [ "applicationName" ],
                members: {
                    applicationName: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationName: {},
                    deploymentGroups: {
                        shape: "Sw"
                    },
                    nextToken: {}
                }
            }
        },
        ListDeploymentInstances: {
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {},
                    nextToken: {},
                    instanceStatusFilter: {
                        type: "list",
                        member: {
                            shape: "S37"
                        }
                    },
                    instanceTypeFilter: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instancesList: {
                        shape: "S32"
                    },
                    nextToken: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use ListDeploymentTargets instead."
        },
        ListDeploymentTargets: {
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {},
                    nextToken: {},
                    targetFilters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    targetIds: {
                        shape: "S3j"
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            input: {
                type: "structure",
                members: {
                    applicationName: {},
                    deploymentGroupName: {},
                    externalId: {},
                    includeOnlyStatuses: {
                        type: "list",
                        member: {}
                    },
                    createTimeRange: {
                        type: "structure",
                        members: {
                            start: {
                                type: "timestamp"
                            },
                            end: {
                                type: "timestamp"
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deployments: {
                        shape: "S49"
                    },
                    nextToken: {}
                }
            }
        },
        ListGitHubAccountTokenNames: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tokenNameList: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListOnPremisesInstances: {
            input: {
                type: "structure",
                members: {
                    registrationStatus: {},
                    tagFilters: {
                        shape: "S1h"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceNames: {
                        shape: "S6"
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            }
        },
        PutLifecycleEventHookExecutionStatus: {
            input: {
                type: "structure",
                members: {
                    deploymentId: {},
                    lifecycleEventHookExecutionId: {},
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lifecycleEventHookExecutionId: {}
                }
            }
        },
        RegisterApplicationRevision: {
            input: {
                type: "structure",
                required: [ "applicationName", "revision" ],
                members: {
                    applicationName: {},
                    description: {},
                    revision: {
                        shape: "Sb"
                    }
                }
            }
        },
        RegisterOnPremisesInstance: {
            input: {
                type: "structure",
                required: [ "instanceName" ],
                members: {
                    instanceName: {},
                    iamSessionArn: {},
                    iamUserArn: {}
                }
            }
        },
        RemoveTagsFromOnPremisesInstances: {
            input: {
                type: "structure",
                required: [ "tags", "instanceNames" ],
                members: {
                    tags: {
                        shape: "S2"
                    },
                    instanceNames: {
                        shape: "S6"
                    }
                }
            }
        },
        SkipWaitTimeForInstanceTermination: {
            input: {
                type: "structure",
                members: {
                    deploymentId: {}
                }
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use ContinueDeployment with DeploymentWaitType instead."
        },
        StopDeployment: {
            input: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {},
                    autoRollbackEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    statusMessage: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                members: {
                    applicationName: {},
                    newApplicationName: {}
                }
            }
        },
        UpdateDeploymentGroup: {
            input: {
                type: "structure",
                required: [ "applicationName", "currentDeploymentGroupName" ],
                members: {
                    applicationName: {},
                    currentDeploymentGroupName: {},
                    newDeploymentGroupName: {},
                    deploymentConfigName: {},
                    ec2TagFilters: {
                        shape: "S1e"
                    },
                    onPremisesInstanceTagFilters: {
                        shape: "S1h"
                    },
                    autoScalingGroups: {
                        shape: "S4k"
                    },
                    serviceRoleArn: {},
                    triggerConfigurations: {
                        shape: "S1p"
                    },
                    alarmConfiguration: {
                        shape: "S1v"
                    },
                    autoRollbackConfiguration: {
                        shape: "S1z"
                    },
                    outdatedInstancesStrategy: {},
                    deploymentStyle: {
                        shape: "S22"
                    },
                    blueGreenDeploymentConfiguration: {
                        shape: "S26"
                    },
                    loadBalancerInfo: {
                        shape: "S2e"
                    },
                    ec2TagSet: {
                        shape: "S2t"
                    },
                    ecsServices: {
                        shape: "S2x"
                    },
                    onPremisesTagSet: {
                        shape: "S2v"
                    },
                    terminationHookEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    hooksNotCleanedUp: {
                        shape: "S1k"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S6: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "list",
            member: {
                shape: "Sb"
            }
        },
        Sb: {
            type: "structure",
            members: {
                revisionType: {},
                s3Location: {
                    type: "structure",
                    members: {
                        bucket: {},
                        key: {},
                        bundleType: {},
                        version: {},
                        eTag: {}
                    }
                },
                gitHubLocation: {
                    type: "structure",
                    members: {
                        repository: {},
                        commitId: {}
                    }
                },
                string: {
                    type: "structure",
                    members: {
                        content: {},
                        sha256: {}
                    },
                    deprecated: true,
                    deprecatedMessage: "RawString and String revision type are deprecated, use AppSpecContent type instead."
                },
                appSpecContent: {
                    type: "structure",
                    members: {
                        content: {},
                        sha256: {}
                    }
                }
            }
        },
        Su: {
            type: "structure",
            members: {
                description: {},
                deploymentGroups: {
                    shape: "Sw"
                },
                firstUsedTime: {
                    type: "timestamp"
                },
                lastUsedTime: {
                    type: "timestamp"
                },
                registerTime: {
                    type: "timestamp"
                }
            }
        },
        Sw: {
            type: "list",
            member: {}
        },
        S10: {
            type: "list",
            member: {}
        },
        S13: {
            type: "structure",
            members: {
                applicationId: {},
                applicationName: {},
                createTime: {
                    type: "timestamp"
                },
                linkedToGitHub: {
                    type: "boolean"
                },
                gitHubAccountName: {},
                computePlatform: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                applicationName: {},
                deploymentGroupId: {},
                deploymentGroupName: {},
                deploymentConfigName: {},
                ec2TagFilters: {
                    shape: "S1e"
                },
                onPremisesInstanceTagFilters: {
                    shape: "S1h"
                },
                autoScalingGroups: {
                    shape: "S1k"
                },
                serviceRoleArn: {},
                targetRevision: {
                    shape: "Sb"
                },
                triggerConfigurations: {
                    shape: "S1p"
                },
                alarmConfiguration: {
                    shape: "S1v"
                },
                autoRollbackConfiguration: {
                    shape: "S1z"
                },
                deploymentStyle: {
                    shape: "S22"
                },
                outdatedInstancesStrategy: {},
                blueGreenDeploymentConfiguration: {
                    shape: "S26"
                },
                loadBalancerInfo: {
                    shape: "S2e"
                },
                lastSuccessfulDeployment: {
                    shape: "S2q"
                },
                lastAttemptedDeployment: {
                    shape: "S2q"
                },
                ec2TagSet: {
                    shape: "S2t"
                },
                onPremisesTagSet: {
                    shape: "S2v"
                },
                computePlatform: {},
                ecsServices: {
                    shape: "S2x"
                },
                terminationHookEnabled: {
                    type: "boolean"
                }
            }
        },
        S1e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    Type: {}
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    Type: {}
                }
            }
        },
        S1k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    hook: {},
                    terminationHook: {}
                }
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    triggerName: {},
                    triggerTargetArn: {},
                    triggerEvents: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                },
                ignorePollAlarmFailure: {
                    type: "boolean"
                },
                alarms: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {}
                        }
                    }
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                },
                events: {
                    type: "list",
                    member: {}
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                deploymentType: {},
                deploymentOption: {}
            }
        },
        S26: {
            type: "structure",
            members: {
                terminateBlueInstancesOnDeploymentSuccess: {
                    type: "structure",
                    members: {
                        action: {},
                        terminationWaitTimeInMinutes: {
                            type: "integer"
                        }
                    }
                },
                deploymentReadyOption: {
                    type: "structure",
                    members: {
                        actionOnTimeout: {},
                        waitTimeInMinutes: {
                            type: "integer"
                        }
                    }
                },
                greenFleetProvisioningOption: {
                    type: "structure",
                    members: {
                        action: {}
                    }
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                elbInfoList: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {}
                        }
                    }
                },
                targetGroupInfoList: {
                    shape: "S2i"
                },
                targetGroupPairInfoList: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            targetGroups: {
                                shape: "S2i"
                            },
                            prodTrafficRoute: {
                                shape: "S2n"
                            },
                            testTrafficRoute: {
                                shape: "S2n"
                            }
                        }
                    }
                }
            }
        },
        S2i: {
            type: "list",
            member: {
                shape: "S2j"
            }
        },
        S2j: {
            type: "structure",
            members: {
                name: {}
            }
        },
        S2n: {
            type: "structure",
            members: {
                listenerArns: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                deploymentId: {},
                status: {},
                endTime: {
                    type: "timestamp"
                },
                createTime: {
                    type: "timestamp"
                }
            }
        },
        S2t: {
            type: "structure",
            members: {
                ec2TagSetList: {
                    type: "list",
                    member: {
                        shape: "S1e"
                    }
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                onPremisesTagSetList: {
                    type: "list",
                    member: {
                        shape: "S1h"
                    }
                }
            }
        },
        S2x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    serviceName: {},
                    clusterName: {}
                }
            }
        },
        S32: {
            type: "list",
            member: {}
        },
        S36: {
            type: "structure",
            members: {
                deploymentId: {},
                instanceId: {},
                status: {
                    shape: "S37"
                },
                lastUpdatedAt: {
                    type: "timestamp"
                },
                lifecycleEvents: {
                    shape: "S38"
                },
                instanceType: {}
            },
            deprecated: true,
            deprecatedMessage: "InstanceSummary is deprecated, use DeploymentTarget instead."
        },
        S37: {
            type: "string",
            deprecated: true,
            deprecatedMessage: "InstanceStatus is deprecated, use TargetStatus instead."
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    lifecycleEventName: {},
                    diagnostics: {
                        type: "structure",
                        members: {
                            errorCode: {},
                            scriptName: {},
                            message: {},
                            logTail: {}
                        }
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    status: {}
                }
            }
        },
        S3j: {
            type: "list",
            member: {}
        },
        S3n: {
            type: "structure",
            members: {
                deploymentTargetType: {},
                instanceTarget: {
                    type: "structure",
                    members: {
                        deploymentId: {},
                        targetId: {},
                        targetArn: {},
                        status: {},
                        lastUpdatedAt: {
                            type: "timestamp"
                        },
                        lifecycleEvents: {
                            shape: "S38"
                        },
                        instanceLabel: {}
                    }
                },
                lambdaTarget: {
                    type: "structure",
                    members: {
                        deploymentId: {},
                        targetId: {},
                        targetArn: {},
                        status: {},
                        lastUpdatedAt: {
                            type: "timestamp"
                        },
                        lifecycleEvents: {
                            shape: "S38"
                        },
                        lambdaFunctionInfo: {
                            type: "structure",
                            members: {
                                functionName: {},
                                functionAlias: {},
                                currentVersion: {},
                                targetVersion: {},
                                targetVersionWeight: {
                                    type: "double"
                                }
                            }
                        }
                    }
                },
                ecsTarget: {
                    type: "structure",
                    members: {
                        deploymentId: {},
                        targetId: {},
                        targetArn: {},
                        lastUpdatedAt: {
                            type: "timestamp"
                        },
                        lifecycleEvents: {
                            shape: "S38"
                        },
                        status: {},
                        taskSetsInfo: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    identifer: {},
                                    desiredCount: {
                                        type: "long"
                                    },
                                    pendingCount: {
                                        type: "long"
                                    },
                                    runningCount: {
                                        type: "long"
                                    },
                                    status: {},
                                    trafficWeight: {
                                        type: "double"
                                    },
                                    targetGroup: {
                                        shape: "S2j"
                                    },
                                    taskSetLabel: {}
                                }
                            }
                        }
                    }
                },
                cloudFormationTarget: {
                    type: "structure",
                    members: {
                        deploymentId: {},
                        targetId: {},
                        lastUpdatedAt: {
                            type: "timestamp"
                        },
                        lifecycleEvents: {
                            shape: "S38"
                        },
                        status: {},
                        resourceType: {},
                        targetVersionWeight: {
                            type: "double"
                        }
                    }
                }
            }
        },
        S49: {
            type: "list",
            member: {}
        },
        S4c: {
            type: "structure",
            members: {
                applicationName: {},
                deploymentGroupName: {},
                deploymentConfigName: {},
                deploymentId: {},
                previousRevision: {
                    shape: "Sb"
                },
                revision: {
                    shape: "Sb"
                },
                status: {},
                errorInformation: {
                    type: "structure",
                    members: {
                        code: {},
                        message: {}
                    }
                },
                createTime: {
                    type: "timestamp"
                },
                startTime: {
                    type: "timestamp"
                },
                completeTime: {
                    type: "timestamp"
                },
                deploymentOverview: {
                    type: "structure",
                    members: {
                        Pending: {
                            type: "long"
                        },
                        InProgress: {
                            type: "long"
                        },
                        Succeeded: {
                            type: "long"
                        },
                        Failed: {
                            type: "long"
                        },
                        Skipped: {
                            type: "long"
                        },
                        Ready: {
                            type: "long"
                        }
                    }
                },
                description: {},
                creator: {},
                ignoreApplicationStopFailures: {
                    type: "boolean"
                },
                autoRollbackConfiguration: {
                    shape: "S1z"
                },
                updateOutdatedInstancesOnly: {
                    type: "boolean"
                },
                rollbackInfo: {
                    type: "structure",
                    members: {
                        rollbackDeploymentId: {},
                        rollbackTriggeringDeploymentId: {},
                        rollbackMessage: {}
                    }
                },
                deploymentStyle: {
                    shape: "S22"
                },
                targetInstances: {
                    shape: "S4j"
                },
                instanceTerminationWaitTimeStarted: {
                    type: "boolean"
                },
                blueGreenDeploymentConfiguration: {
                    shape: "S26"
                },
                loadBalancerInfo: {
                    shape: "S2e"
                },
                additionalDeploymentStatusInfo: {
                    type: "string",
                    deprecated: true,
                    deprecatedMessage: "AdditionalDeploymentStatusInfo is deprecated, use DeploymentStatusMessageList instead."
                },
                fileExistsBehavior: {},
                deploymentStatusMessages: {
                    type: "list",
                    member: {}
                },
                computePlatform: {},
                externalId: {},
                relatedDeployments: {
                    type: "structure",
                    members: {
                        autoUpdateOutdatedInstancesRootDeploymentId: {},
                        autoUpdateOutdatedInstancesDeploymentIds: {
                            shape: "S49"
                        }
                    }
                },
                overrideAlarmConfiguration: {
                    shape: "S1v"
                }
            }
        },
        S4j: {
            type: "structure",
            members: {
                tagFilters: {
                    shape: "S1e"
                },
                autoScalingGroups: {
                    shape: "S4k"
                },
                ec2TagSet: {
                    shape: "S2t"
                }
            }
        },
        S4k: {
            type: "list",
            member: {}
        },
        S4t: {
            type: "structure",
            members: {
                instanceName: {},
                iamSessionArn: {},
                iamUserArn: {},
                instanceArn: {},
                registerTime: {
                    type: "timestamp"
                },
                deregisterTime: {
                    type: "timestamp"
                },
                tags: {
                    shape: "S2"
                }
            }
        },
        S54: {
            type: "structure",
            members: {
                type: {},
                value: {
                    type: "integer"
                }
            }
        },
        S57: {
            type: "structure",
            members: {
                type: {},
                timeBasedCanary: {
                    type: "structure",
                    members: {
                        canaryPercentage: {
                            type: "integer"
                        },
                        canaryInterval: {
                            type: "integer"
                        }
                    }
                },
                timeBasedLinear: {
                    type: "structure",
                    members: {
                        linearPercentage: {
                            type: "integer"
                        },
                        linearInterval: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S5d: {
            type: "structure",
            members: {
                firstZoneMonitorDurationInSeconds: {
                    type: "long"
                },
                monitorDurationInSeconds: {
                    type: "long"
                },
                minimumHealthyHostsPerZone: {
                    type: "structure",
                    members: {
                        type: {},
                        value: {
                            type: "integer"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListApplicationRevisions: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "revisions"
        },
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "applications"
        },
        ListDeploymentConfigs: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "deploymentConfigsList"
        },
        ListDeploymentGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "deploymentGroups"
        },
        ListDeploymentInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "instancesList"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "deployments"
        }
    },
    waiters: {
        DeploymentSuccessful: {
            delay: 15,
            operation: "GetDeployment",
            maxAttempts: 120,
            acceptors: [ {
                expected: "Succeeded",
                matcher: "path",
                state: "success",
                argument: "deploymentInfo.status"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "deploymentInfo.status"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "failure",
                argument: "deploymentInfo.status"
            } ]
        }
    }
};

AWS.apiLoader.services["codepipeline"] = {};

AWS.CodePipeline = AWS.Service.defineService("codepipeline", [ "2015-07-09" ]);

AWS.apiLoader.services["codepipeline"]["2015-07-09"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-07-09",
        endpointPrefix: "codepipeline",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CodePipeline",
        serviceFullName: "AWS CodePipeline",
        serviceId: "CodePipeline",
        signatureVersion: "v4",
        targetPrefix: "CodePipeline_20150709",
        uid: "codepipeline-2015-07-09"
    },
    operations: {
        AcknowledgeJob: {
            input: {
                type: "structure",
                required: [ "jobId", "nonce" ],
                members: {
                    jobId: {},
                    nonce: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        AcknowledgeThirdPartyJob: {
            input: {
                type: "structure",
                required: [ "jobId", "nonce", "clientToken" ],
                members: {
                    jobId: {},
                    nonce: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        CreateCustomActionType: {
            input: {
                type: "structure",
                required: [ "category", "provider", "version", "inputArtifactDetails", "outputArtifactDetails" ],
                members: {
                    category: {},
                    provider: {},
                    version: {},
                    settings: {
                        shape: "Se"
                    },
                    configurationProperties: {
                        shape: "Sh"
                    },
                    inputArtifactDetails: {
                        shape: "Sn"
                    },
                    outputArtifactDetails: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "actionType" ],
                members: {
                    actionType: {
                        shape: "Sv"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreatePipeline: {
            input: {
                type: "structure",
                required: [ "pipeline" ],
                members: {
                    pipeline: {
                        shape: "Sz"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipeline: {
                        shape: "Sz"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            }
        },
        DeleteCustomActionType: {
            input: {
                type: "structure",
                required: [ "category", "provider", "version" ],
                members: {
                    category: {},
                    provider: {},
                    version: {}
                }
            }
        },
        DeletePipeline: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        DeleteWebhook: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterWebhookWithThirdParty: {
            input: {
                type: "structure",
                members: {
                    webhookName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableStageTransition: {
            input: {
                type: "structure",
                required: [ "pipelineName", "stageName", "transitionType", "reason" ],
                members: {
                    pipelineName: {},
                    stageName: {},
                    transitionType: {},
                    reason: {}
                }
            }
        },
        EnableStageTransition: {
            input: {
                type: "structure",
                required: [ "pipelineName", "stageName", "transitionType" ],
                members: {
                    pipelineName: {},
                    stageName: {},
                    transitionType: {}
                }
            }
        },
        GetActionType: {
            input: {
                type: "structure",
                required: [ "category", "owner", "provider", "version" ],
                members: {
                    category: {},
                    owner: {},
                    provider: {},
                    version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    actionType: {
                        shape: "S2o"
                    }
                }
            }
        },
        GetJobDetails: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobDetails: {
                        type: "structure",
                        members: {
                            id: {},
                            data: {
                                shape: "S3g"
                            },
                            accountId: {}
                        }
                    }
                }
            }
        },
        GetPipeline: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    version: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipeline: {
                        shape: "Sz"
                    },
                    metadata: {
                        type: "structure",
                        members: {
                            pipelineArn: {},
                            created: {
                                type: "timestamp"
                            },
                            updated: {
                                type: "timestamp"
                            },
                            pollingDisabledAt: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        GetPipelineExecution: {
            input: {
                type: "structure",
                required: [ "pipelineName", "pipelineExecutionId" ],
                members: {
                    pipelineName: {},
                    pipelineExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineExecution: {
                        type: "structure",
                        members: {
                            pipelineName: {},
                            pipelineVersion: {
                                type: "integer"
                            },
                            pipelineExecutionId: {},
                            status: {},
                            statusSummary: {},
                            artifactRevisions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        revisionId: {},
                                        revisionChangeIdentifier: {},
                                        revisionSummary: {},
                                        created: {
                                            type: "timestamp"
                                        },
                                        revisionUrl: {}
                                    }
                                }
                            },
                            trigger: {
                                shape: "S4e"
                            },
                            variables: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        resolvedValue: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetPipelineState: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineName: {},
                    pipelineVersion: {
                        type: "integer"
                    },
                    stageStates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                stageName: {},
                                inboundExecution: {
                                    shape: "S4o"
                                },
                                inboundTransitionState: {
                                    type: "structure",
                                    members: {
                                        enabled: {
                                            type: "boolean"
                                        },
                                        lastChangedBy: {},
                                        lastChangedAt: {
                                            type: "timestamp"
                                        },
                                        disabledReason: {}
                                    }
                                },
                                actionStates: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            actionName: {},
                                            currentRevision: {
                                                shape: "S4w"
                                            },
                                            latestExecution: {
                                                type: "structure",
                                                members: {
                                                    actionExecutionId: {},
                                                    status: {},
                                                    summary: {},
                                                    lastStatusChange: {
                                                        type: "timestamp"
                                                    },
                                                    token: {},
                                                    lastUpdatedBy: {},
                                                    externalExecutionId: {},
                                                    externalExecutionUrl: {},
                                                    percentComplete: {
                                                        type: "integer"
                                                    },
                                                    errorDetails: {
                                                        type: "structure",
                                                        members: {
                                                            code: {},
                                                            message: {}
                                                        }
                                                    }
                                                }
                                            },
                                            entityUrl: {},
                                            revisionUrl: {}
                                        }
                                    }
                                },
                                latestExecution: {
                                    shape: "S4o"
                                }
                            }
                        }
                    },
                    created: {
                        type: "timestamp"
                    },
                    updated: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetThirdPartyJobDetails: {
            input: {
                type: "structure",
                required: [ "jobId", "clientToken" ],
                members: {
                    jobId: {},
                    clientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobDetails: {
                        type: "structure",
                        members: {
                            id: {},
                            data: {
                                type: "structure",
                                members: {
                                    actionTypeId: {
                                        shape: "Sw"
                                    },
                                    actionConfiguration: {
                                        shape: "S3h"
                                    },
                                    pipelineContext: {
                                        shape: "S3i"
                                    },
                                    inputArtifacts: {
                                        shape: "S3o"
                                    },
                                    outputArtifacts: {
                                        shape: "S3o"
                                    },
                                    artifactCredentials: {
                                        shape: "S3w"
                                    },
                                    continuationToken: {},
                                    encryptionKey: {
                                        shape: "S15"
                                    }
                                }
                            },
                            nonce: {}
                        }
                    }
                }
            }
        },
        ListActionExecutions: {
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {},
                    filter: {
                        type: "structure",
                        members: {
                            pipelineExecutionId: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    actionExecutionDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pipelineExecutionId: {},
                                actionExecutionId: {},
                                pipelineVersion: {
                                    type: "integer"
                                },
                                stageName: {},
                                actionName: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                input: {
                                    type: "structure",
                                    members: {
                                        actionTypeId: {
                                            shape: "Sw"
                                        },
                                        configuration: {
                                            shape: "S1l"
                                        },
                                        resolvedConfiguration: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        roleArn: {},
                                        region: {},
                                        inputArtifacts: {
                                            shape: "S5k"
                                        },
                                        namespace: {}
                                    }
                                },
                                output: {
                                    type: "structure",
                                    members: {
                                        outputArtifacts: {
                                            shape: "S5k"
                                        },
                                        executionResult: {
                                            type: "structure",
                                            members: {
                                                externalExecutionId: {},
                                                externalExecutionSummary: {},
                                                externalExecutionUrl: {}
                                            }
                                        },
                                        outputVariables: {
                                            shape: "S5t"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListActionTypes: {
            input: {
                type: "structure",
                members: {
                    actionOwnerFilter: {},
                    nextToken: {},
                    regionFilter: {}
                }
            },
            output: {
                type: "structure",
                required: [ "actionTypes" ],
                members: {
                    actionTypes: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPipelineExecutions: {
            input: {
                type: "structure",
                required: [ "pipelineName" ],
                members: {
                    pipelineName: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineExecutionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pipelineExecutionId: {},
                                status: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                lastUpdateTime: {
                                    type: "timestamp"
                                },
                                sourceRevisions: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "actionName" ],
                                        members: {
                                            actionName: {},
                                            revisionId: {},
                                            revisionSummary: {},
                                            revisionUrl: {}
                                        }
                                    }
                                },
                                trigger: {
                                    shape: "S4e"
                                },
                                stopTrigger: {
                                    type: "structure",
                                    members: {
                                        reason: {}
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPipelines: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                version: {
                                    type: "integer"
                                },
                                pipelineType: {},
                                created: {
                                    type: "timestamp"
                                },
                                updated: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sq"
                    },
                    nextToken: {}
                }
            }
        },
        ListWebhooks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    webhooks: {
                        type: "list",
                        member: {
                            shape: "S6i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PollForJobs: {
            input: {
                type: "structure",
                required: [ "actionTypeId" ],
                members: {
                    actionTypeId: {
                        shape: "Sw"
                    },
                    maxBatchSize: {
                        type: "integer"
                    },
                    queryParam: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                data: {
                                    shape: "S3g"
                                },
                                nonce: {},
                                accountId: {}
                            }
                        }
                    }
                }
            }
        },
        PollForThirdPartyJobs: {
            input: {
                type: "structure",
                required: [ "actionTypeId" ],
                members: {
                    actionTypeId: {
                        shape: "Sw"
                    },
                    maxBatchSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                clientId: {},
                                jobId: {}
                            }
                        }
                    }
                }
            }
        },
        PutActionRevision: {
            input: {
                type: "structure",
                required: [ "pipelineName", "stageName", "actionName", "actionRevision" ],
                members: {
                    pipelineName: {},
                    stageName: {},
                    actionName: {},
                    actionRevision: {
                        shape: "S4w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    newRevision: {
                        type: "boolean"
                    },
                    pipelineExecutionId: {}
                }
            }
        },
        PutApprovalResult: {
            input: {
                type: "structure",
                required: [ "pipelineName", "stageName", "actionName", "result", "token" ],
                members: {
                    pipelineName: {},
                    stageName: {},
                    actionName: {},
                    result: {
                        type: "structure",
                        required: [ "summary", "status" ],
                        members: {
                            summary: {},
                            status: {}
                        }
                    },
                    token: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    approvedAt: {
                        type: "timestamp"
                    }
                }
            }
        },
        PutJobFailureResult: {
            input: {
                type: "structure",
                required: [ "jobId", "failureDetails" ],
                members: {
                    jobId: {},
                    failureDetails: {
                        shape: "S7i"
                    }
                }
            }
        },
        PutJobSuccessResult: {
            input: {
                type: "structure",
                required: [ "jobId" ],
                members: {
                    jobId: {},
                    currentRevision: {
                        shape: "S7l"
                    },
                    continuationToken: {},
                    executionDetails: {
                        shape: "S7n"
                    },
                    outputVariables: {
                        shape: "S5t"
                    }
                }
            }
        },
        PutThirdPartyJobFailureResult: {
            input: {
                type: "structure",
                required: [ "jobId", "clientToken", "failureDetails" ],
                members: {
                    jobId: {},
                    clientToken: {},
                    failureDetails: {
                        shape: "S7i"
                    }
                }
            }
        },
        PutThirdPartyJobSuccessResult: {
            input: {
                type: "structure",
                required: [ "jobId", "clientToken" ],
                members: {
                    jobId: {},
                    clientToken: {},
                    currentRevision: {
                        shape: "S7l"
                    },
                    continuationToken: {},
                    executionDetails: {
                        shape: "S7n"
                    }
                }
            }
        },
        PutWebhook: {
            input: {
                type: "structure",
                required: [ "webhook" ],
                members: {
                    webhook: {
                        shape: "S6j"
                    },
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    webhook: {
                        shape: "S6i"
                    }
                }
            }
        },
        RegisterWebhookWithThirdParty: {
            input: {
                type: "structure",
                members: {
                    webhookName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RetryStageExecution: {
            input: {
                type: "structure",
                required: [ "pipelineName", "stageName", "pipelineExecutionId", "retryMode" ],
                members: {
                    pipelineName: {},
                    stageName: {},
                    pipelineExecutionId: {},
                    retryMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineExecutionId: {}
                }
            }
        },
        StartPipelineExecution: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    variables: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "value" ],
                            members: {
                                name: {},
                                value: {}
                            }
                        }
                    },
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    sourceRevisions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "actionName", "revisionType", "revisionValue" ],
                            members: {
                                actionName: {},
                                revisionType: {},
                                revisionValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineExecutionId: {}
                }
            }
        },
        StopPipelineExecution: {
            input: {
                type: "structure",
                required: [ "pipelineName", "pipelineExecutionId" ],
                members: {
                    pipelineName: {},
                    pipelineExecutionId: {},
                    abandon: {
                        type: "boolean"
                    },
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineExecutionId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateActionType: {
            input: {
                type: "structure",
                required: [ "actionType" ],
                members: {
                    actionType: {
                        shape: "S2o"
                    }
                }
            }
        },
        UpdatePipeline: {
            input: {
                type: "structure",
                required: [ "pipeline" ],
                members: {
                    pipeline: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    pipeline: {
                        shape: "Sz"
                    }
                }
            }
        }
    },
    shapes: {
        Se: {
            type: "structure",
            members: {
                thirdPartyConfigurationUrl: {},
                entityUrlTemplate: {},
                executionUrlTemplate: {},
                revisionUrlTemplate: {}
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "required", "key", "secret" ],
                members: {
                    name: {},
                    required: {
                        type: "boolean"
                    },
                    key: {
                        type: "boolean"
                    },
                    secret: {
                        type: "boolean"
                    },
                    queryable: {
                        type: "boolean"
                    },
                    description: {},
                    type: {}
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "minimumCount", "maximumCount" ],
            members: {
                minimumCount: {
                    type: "integer"
                },
                maximumCount: {
                    type: "integer"
                }
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "id", "inputArtifactDetails", "outputArtifactDetails" ],
            members: {
                id: {
                    shape: "Sw"
                },
                settings: {
                    shape: "Se"
                },
                actionConfigurationProperties: {
                    shape: "Sh"
                },
                inputArtifactDetails: {
                    shape: "Sn"
                },
                outputArtifactDetails: {
                    shape: "Sn"
                }
            }
        },
        Sw: {
            type: "structure",
            required: [ "category", "owner", "provider", "version" ],
            members: {
                category: {},
                owner: {},
                provider: {},
                version: {}
            }
        },
        Sz: {
            type: "structure",
            required: [ "name", "roleArn", "stages" ],
            members: {
                name: {},
                roleArn: {},
                artifactStore: {
                    shape: "S12"
                },
                artifactStores: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S12"
                    }
                },
                stages: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "actions" ],
                        members: {
                            name: {},
                            blockers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "type" ],
                                    members: {
                                        name: {},
                                        type: {}
                                    }
                                }
                            },
                            actions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "name", "actionTypeId" ],
                                    members: {
                                        name: {},
                                        actionTypeId: {
                                            shape: "Sw"
                                        },
                                        runOrder: {
                                            type: "integer"
                                        },
                                        configuration: {
                                            shape: "S1l"
                                        },
                                        outputArtifacts: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name" ],
                                                members: {
                                                    name: {}
                                                }
                                            }
                                        },
                                        inputArtifacts: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name" ],
                                                members: {
                                                    name: {}
                                                }
                                            }
                                        },
                                        roleArn: {},
                                        region: {},
                                        namespace: {}
                                    }
                                }
                            }
                        }
                    }
                },
                version: {
                    type: "integer"
                },
                pipelineType: {},
                triggers: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "providerType", "gitConfiguration" ],
                        members: {
                            providerType: {},
                            gitConfiguration: {
                                type: "structure",
                                required: [ "sourceActionName" ],
                                members: {
                                    sourceActionName: {},
                                    push: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                tags: {
                                                    type: "structure",
                                                    members: {
                                                        includes: {
                                                            shape: "S22"
                                                        },
                                                        excludes: {
                                                            shape: "S22"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                variables: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {},
                            defaultValue: {},
                            description: {}
                        }
                    }
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "type", "location" ],
            members: {
                type: {},
                location: {},
                encryptionKey: {
                    shape: "S15"
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "id", "type" ],
            members: {
                id: {},
                type: {}
            }
        },
        S1l: {
            type: "map",
            key: {},
            value: {}
        },
        S22: {
            type: "list",
            member: {}
        },
        S2o: {
            type: "structure",
            required: [ "executor", "id", "inputArtifactDetails", "outputArtifactDetails" ],
            members: {
                description: {},
                executor: {
                    type: "structure",
                    required: [ "configuration", "type" ],
                    members: {
                        configuration: {
                            type: "structure",
                            members: {
                                lambdaExecutorConfiguration: {
                                    type: "structure",
                                    required: [ "lambdaFunctionArn" ],
                                    members: {
                                        lambdaFunctionArn: {}
                                    }
                                },
                                jobWorkerExecutorConfiguration: {
                                    type: "structure",
                                    members: {
                                        pollingAccounts: {
                                            type: "list",
                                            member: {}
                                        },
                                        pollingServicePrincipals: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        },
                        type: {},
                        policyStatementsTemplate: {},
                        jobTimeout: {
                            type: "integer"
                        }
                    }
                },
                id: {
                    type: "structure",
                    required: [ "category", "owner", "provider", "version" ],
                    members: {
                        category: {},
                        owner: {},
                        provider: {},
                        version: {}
                    }
                },
                inputArtifactDetails: {
                    shape: "S33"
                },
                outputArtifactDetails: {
                    shape: "S33"
                },
                permissions: {
                    type: "structure",
                    required: [ "allowedAccounts" ],
                    members: {
                        allowedAccounts: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                properties: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "optional", "key", "noEcho" ],
                        members: {
                            name: {},
                            optional: {
                                type: "boolean"
                            },
                            key: {
                                type: "boolean"
                            },
                            noEcho: {
                                type: "boolean"
                            },
                            queryable: {
                                type: "boolean"
                            },
                            description: {}
                        }
                    }
                },
                urls: {
                    type: "structure",
                    members: {
                        configurationUrl: {},
                        entityUrlTemplate: {},
                        executionUrlTemplate: {},
                        revisionUrlTemplate: {}
                    }
                }
            }
        },
        S33: {
            type: "structure",
            required: [ "minimumCount", "maximumCount" ],
            members: {
                minimumCount: {
                    type: "integer"
                },
                maximumCount: {
                    type: "integer"
                }
            }
        },
        S3g: {
            type: "structure",
            members: {
                actionTypeId: {
                    shape: "Sw"
                },
                actionConfiguration: {
                    shape: "S3h"
                },
                pipelineContext: {
                    shape: "S3i"
                },
                inputArtifacts: {
                    shape: "S3o"
                },
                outputArtifacts: {
                    shape: "S3o"
                },
                artifactCredentials: {
                    shape: "S3w"
                },
                continuationToken: {},
                encryptionKey: {
                    shape: "S15"
                }
            }
        },
        S3h: {
            type: "structure",
            members: {
                configuration: {
                    shape: "S1l"
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                pipelineName: {},
                stage: {
                    type: "structure",
                    members: {
                        name: {}
                    }
                },
                action: {
                    type: "structure",
                    members: {
                        name: {},
                        actionExecutionId: {}
                    }
                },
                pipelineArn: {},
                pipelineExecutionId: {}
            }
        },
        S3o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    revision: {},
                    location: {
                        type: "structure",
                        members: {
                            type: {},
                            s3Location: {
                                type: "structure",
                                required: [ "bucketName", "objectKey" ],
                                members: {
                                    bucketName: {},
                                    objectKey: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S3w: {
            type: "structure",
            required: [ "accessKeyId", "secretAccessKey", "sessionToken" ],
            members: {
                accessKeyId: {
                    type: "string",
                    sensitive: true
                },
                secretAccessKey: {
                    type: "string",
                    sensitive: true
                },
                sessionToken: {
                    type: "string",
                    sensitive: true
                }
            },
            sensitive: true
        },
        S4e: {
            type: "structure",
            members: {
                triggerType: {},
                triggerDetail: {}
            }
        },
        S4o: {
            type: "structure",
            required: [ "pipelineExecutionId", "status" ],
            members: {
                pipelineExecutionId: {},
                status: {}
            }
        },
        S4w: {
            type: "structure",
            required: [ "revisionId", "revisionChangeId", "created" ],
            members: {
                revisionId: {},
                revisionChangeId: {},
                created: {
                    type: "timestamp"
                }
            }
        },
        S5k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    s3location: {
                        type: "structure",
                        members: {
                            bucket: {},
                            key: {}
                        }
                    }
                }
            }
        },
        S5t: {
            type: "map",
            key: {},
            value: {}
        },
        S6i: {
            type: "structure",
            required: [ "definition", "url" ],
            members: {
                definition: {
                    shape: "S6j"
                },
                url: {},
                errorMessage: {},
                errorCode: {},
                lastTriggered: {
                    type: "timestamp"
                },
                arn: {},
                tags: {
                    shape: "Sq"
                }
            }
        },
        S6j: {
            type: "structure",
            required: [ "name", "targetPipeline", "targetAction", "filters", "authentication", "authenticationConfiguration" ],
            members: {
                name: {},
                targetPipeline: {},
                targetAction: {},
                filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "jsonPath" ],
                        members: {
                            jsonPath: {},
                            matchEquals: {}
                        }
                    }
                },
                authentication: {},
                authenticationConfiguration: {
                    type: "structure",
                    members: {
                        AllowedIPRange: {},
                        SecretToken: {}
                    }
                }
            }
        },
        S7i: {
            type: "structure",
            required: [ "type", "message" ],
            members: {
                type: {},
                message: {},
                externalExecutionId: {}
            }
        },
        S7l: {
            type: "structure",
            required: [ "revision", "changeIdentifier" ],
            members: {
                revision: {},
                changeIdentifier: {},
                created: {
                    type: "timestamp"
                },
                revisionSummary: {}
            }
        },
        S7n: {
            type: "structure",
            members: {
                summary: {},
                externalExecutionId: {},
                percentComplete: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListActionExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "actionExecutionDetails"
        },
        ListActionTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "actionTypes"
        },
        ListPipelineExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "pipelineExecutionSummaries"
        },
        ListPipelines: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "pipelines"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tags"
        },
        ListWebhooks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "webhooks"
        }
    }
};

AWS.apiLoader.services["cognitoidentityserviceprovider"] = {};

AWS.CognitoIdentityServiceProvider = AWS.Service.defineService("cognitoidentityserviceprovider", [ "2016-04-18" ]);

AWS.apiLoader.services["cognitoidentityserviceprovider"]["2016-04-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-04-18",
        endpointPrefix: "cognito-idp",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Cognito Identity Provider",
        serviceId: "Cognito Identity Provider",
        signatureVersion: "v4",
        targetPrefix: "AWSCognitoIdentityProviderService",
        uid: "cognito-idp-2016-04-18"
    },
    operations: {
        AddCustomAttributes: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "CustomAttributes" ],
                members: {
                    UserPoolId: {},
                    CustomAttributes: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminAddUserToGroup: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "GroupName" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    GroupName: {}
                }
            }
        },
        AdminConfirmSignUp: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminCreateUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    UserAttributes: {
                        shape: "Sj"
                    },
                    ValidationData: {
                        shape: "Sj"
                    },
                    TemporaryPassword: {
                        shape: "Sn"
                    },
                    ForceAliasCreation: {
                        type: "boolean"
                    },
                    MessageAction: {},
                    DesiredDeliveryMediums: {
                        type: "list",
                        member: {}
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "St"
                    }
                }
            }
        },
        AdminDeleteUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    }
                }
            }
        },
        AdminDeleteUserAttributes: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "UserAttributeNames" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    UserAttributeNames: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminDisableProviderForUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "User" ],
                members: {
                    UserPoolId: {},
                    User: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminDisableUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminEnableUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminForgetDevice: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "DeviceKey" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    DeviceKey: {}
                }
            }
        },
        AdminGetDevice: {
            input: {
                type: "structure",
                required: [ "DeviceKey", "UserPoolId", "Username" ],
                members: {
                    DeviceKey: {},
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Device" ],
                members: {
                    Device: {
                        shape: "S1e"
                    }
                }
            }
        },
        AdminGetUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Username" ],
                members: {
                    Username: {
                        shape: "Sd"
                    },
                    UserAttributes: {
                        shape: "Sj"
                    },
                    UserCreateDate: {
                        type: "timestamp"
                    },
                    UserLastModifiedDate: {
                        type: "timestamp"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    UserStatus: {},
                    MFAOptions: {
                        shape: "Sw"
                    },
                    PreferredMfaSetting: {},
                    UserMFASettingList: {
                        shape: "S1h"
                    }
                }
            }
        },
        AdminInitiateAuth: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ClientId", "AuthFlow" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    },
                    AuthFlow: {},
                    AuthParameters: {
                        shape: "S1l"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    ContextData: {
                        shape: "S1n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChallengeName: {},
                    Session: {
                        shape: "S1s"
                    },
                    ChallengeParameters: {
                        shape: "S1t"
                    },
                    AuthenticationResult: {
                        shape: "S1u"
                    }
                }
            }
        },
        AdminLinkProviderForUser: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "DestinationUser", "SourceUser" ],
                members: {
                    UserPoolId: {},
                    DestinationUser: {
                        shape: "S13"
                    },
                    SourceUser: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminListDevices: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    Limit: {
                        type: "integer"
                    },
                    PaginationToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        shape: "S24"
                    },
                    PaginationToken: {}
                }
            }
        },
        AdminListGroupsForUser: {
            input: {
                type: "structure",
                required: [ "Username", "UserPoolId" ],
                members: {
                    Username: {
                        shape: "Sd"
                    },
                    UserPoolId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        AdminListUserAuthEvents: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EventId: {},
                                EventType: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                EventResponse: {},
                                EventRisk: {
                                    type: "structure",
                                    members: {
                                        RiskDecision: {},
                                        RiskLevel: {},
                                        CompromisedCredentialsDetected: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                ChallengeResponses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ChallengeName: {},
                                            ChallengeResponse: {}
                                        }
                                    }
                                },
                                EventContextData: {
                                    type: "structure",
                                    members: {
                                        IpAddress: {},
                                        DeviceName: {},
                                        Timezone: {},
                                        City: {},
                                        Country: {}
                                    }
                                },
                                EventFeedback: {
                                    type: "structure",
                                    required: [ "FeedbackValue", "Provider" ],
                                    members: {
                                        FeedbackValue: {},
                                        Provider: {},
                                        FeedbackDate: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        AdminRemoveUserFromGroup: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "GroupName" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    GroupName: {}
                }
            }
        },
        AdminResetUserPassword: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminRespondToAuthChallenge: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ClientId", "ChallengeName" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    },
                    ChallengeName: {},
                    ChallengeResponses: {
                        shape: "S2y"
                    },
                    Session: {
                        shape: "S1s"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    ContextData: {
                        shape: "S1n"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChallengeName: {},
                    Session: {
                        shape: "S1s"
                    },
                    ChallengeParameters: {
                        shape: "S1t"
                    },
                    AuthenticationResult: {
                        shape: "S1u"
                    }
                }
            }
        },
        AdminSetUserMFAPreference: {
            input: {
                type: "structure",
                required: [ "Username", "UserPoolId" ],
                members: {
                    SMSMfaSettings: {
                        shape: "S31"
                    },
                    SoftwareTokenMfaSettings: {
                        shape: "S32"
                    },
                    Username: {
                        shape: "Sd"
                    },
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminSetUserPassword: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "Password" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    Password: {
                        shape: "Sn"
                    },
                    Permanent: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminSetUserSettings: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "MFAOptions" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    MFAOptions: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminUpdateAuthEventFeedback: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "EventId", "FeedbackValue" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    EventId: {},
                    FeedbackValue: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminUpdateDeviceStatus: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "DeviceKey" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    DeviceKey: {},
                    DeviceRememberedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminUpdateUserAttributes: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "UserAttributes" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    UserAttributes: {
                        shape: "Sj"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AdminUserGlobalSignOut: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateSoftwareToken: {
            input: {
                type: "structure",
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    Session: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecretCode: {
                        type: "string",
                        sensitive: true
                    },
                    Session: {
                        shape: "S1s"
                    }
                }
            },
            authtype: "none"
        },
        ChangePassword: {
            input: {
                type: "structure",
                required: [ "PreviousPassword", "ProposedPassword", "AccessToken" ],
                members: {
                    PreviousPassword: {
                        shape: "Sn"
                    },
                    ProposedPassword: {
                        shape: "Sn"
                    },
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        ConfirmDevice: {
            input: {
                type: "structure",
                required: [ "AccessToken", "DeviceKey" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    DeviceKey: {},
                    DeviceSecretVerifierConfig: {
                        type: "structure",
                        members: {
                            PasswordVerifier: {},
                            Salt: {}
                        }
                    },
                    DeviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserConfirmationNecessary: {
                        type: "boolean"
                    }
                }
            },
            authtype: "none"
        },
        ConfirmForgotPassword: {
            input: {
                type: "structure",
                required: [ "ClientId", "Username", "ConfirmationCode", "Password" ],
                members: {
                    ClientId: {
                        shape: "S1j"
                    },
                    SecretHash: {
                        shape: "S3s"
                    },
                    Username: {
                        shape: "Sd"
                    },
                    ConfirmationCode: {},
                    Password: {
                        shape: "Sn"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    UserContextData: {
                        shape: "S3u"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        ConfirmSignUp: {
            input: {
                type: "structure",
                required: [ "ClientId", "Username", "ConfirmationCode" ],
                members: {
                    ClientId: {
                        shape: "S1j"
                    },
                    SecretHash: {
                        shape: "S3s"
                    },
                    Username: {
                        shape: "Sd"
                    },
                    ConfirmationCode: {},
                    ForceAliasCreation: {
                        type: "boolean"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    UserContextData: {
                        shape: "S3u"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        CreateGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "UserPoolId" ],
                members: {
                    GroupName: {},
                    UserPoolId: {},
                    Description: {},
                    RoleArn: {},
                    Precedence: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S29"
                    }
                }
            }
        },
        CreateIdentityProvider: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ProviderName", "ProviderType", "ProviderDetails" ],
                members: {
                    UserPoolId: {},
                    ProviderName: {},
                    ProviderType: {},
                    ProviderDetails: {
                        shape: "S43"
                    },
                    AttributeMapping: {
                        shape: "S44"
                    },
                    IdpIdentifiers: {
                        shape: "S46"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProvider" ],
                members: {
                    IdentityProvider: {
                        shape: "S49"
                    }
                }
            }
        },
        CreateResourceServer: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Identifier", "Name" ],
                members: {
                    UserPoolId: {},
                    Identifier: {},
                    Name: {},
                    Scopes: {
                        shape: "S4d"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceServer" ],
                members: {
                    ResourceServer: {
                        shape: "S4i"
                    }
                }
            }
        },
        CreateUserImportJob: {
            input: {
                type: "structure",
                required: [ "JobName", "UserPoolId", "CloudWatchLogsRoleArn" ],
                members: {
                    JobName: {},
                    UserPoolId: {},
                    CloudWatchLogsRoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserImportJob: {
                        shape: "S4m"
                    }
                }
            }
        },
        CreateUserPool: {
            input: {
                type: "structure",
                required: [ "PoolName" ],
                members: {
                    PoolName: {},
                    Policies: {
                        shape: "S4u"
                    },
                    DeletionProtection: {},
                    LambdaConfig: {
                        shape: "S4z"
                    },
                    AutoVerifiedAttributes: {
                        shape: "S54"
                    },
                    AliasAttributes: {
                        shape: "S56"
                    },
                    UsernameAttributes: {
                        shape: "S58"
                    },
                    SmsVerificationMessage: {},
                    EmailVerificationMessage: {},
                    EmailVerificationSubject: {},
                    VerificationMessageTemplate: {
                        shape: "S5d"
                    },
                    SmsAuthenticationMessage: {},
                    MfaConfiguration: {},
                    UserAttributeUpdateSettings: {
                        shape: "S5i"
                    },
                    DeviceConfiguration: {
                        shape: "S5k"
                    },
                    EmailConfiguration: {
                        shape: "S5l"
                    },
                    SmsConfiguration: {
                        shape: "S5p"
                    },
                    UserPoolTags: {
                        shape: "S5r"
                    },
                    AdminCreateUserConfig: {
                        shape: "S5u"
                    },
                    Schema: {
                        shape: "S5x"
                    },
                    UserPoolAddOns: {
                        shape: "S5y"
                    },
                    UsernameConfiguration: {
                        shape: "S60"
                    },
                    AccountRecoverySetting: {
                        shape: "S61"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPool: {
                        shape: "S67"
                    }
                }
            }
        },
        CreateUserPoolClient: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ClientName" ],
                members: {
                    UserPoolId: {},
                    ClientName: {},
                    GenerateSecret: {
                        type: "boolean"
                    },
                    RefreshTokenValidity: {
                        type: "integer"
                    },
                    AccessTokenValidity: {
                        type: "integer"
                    },
                    IdTokenValidity: {
                        type: "integer"
                    },
                    TokenValidityUnits: {
                        shape: "S6g"
                    },
                    ReadAttributes: {
                        shape: "S6i"
                    },
                    WriteAttributes: {
                        shape: "S6i"
                    },
                    ExplicitAuthFlows: {
                        shape: "S6k"
                    },
                    SupportedIdentityProviders: {
                        shape: "S6m"
                    },
                    CallbackURLs: {
                        shape: "S6n"
                    },
                    LogoutURLs: {
                        shape: "S6p"
                    },
                    DefaultRedirectURI: {},
                    AllowedOAuthFlows: {
                        shape: "S6q"
                    },
                    AllowedOAuthScopes: {
                        shape: "S6s"
                    },
                    AllowedOAuthFlowsUserPoolClient: {
                        type: "boolean"
                    },
                    AnalyticsConfiguration: {
                        shape: "S6u"
                    },
                    PreventUserExistenceErrors: {},
                    EnableTokenRevocation: {
                        type: "boolean"
                    },
                    EnablePropagateAdditionalUserContextData: {
                        type: "boolean"
                    },
                    AuthSessionValidity: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPoolClient: {
                        shape: "S6z"
                    }
                }
            }
        },
        CreateUserPoolDomain: {
            input: {
                type: "structure",
                required: [ "Domain", "UserPoolId" ],
                members: {
                    Domain: {},
                    UserPoolId: {},
                    CustomDomainConfig: {
                        shape: "S72"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontDomain: {}
                }
            }
        },
        DeleteGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "UserPoolId" ],
                members: {
                    GroupName: {},
                    UserPoolId: {}
                }
            }
        },
        DeleteIdentityProvider: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ProviderName" ],
                members: {
                    UserPoolId: {},
                    ProviderName: {}
                }
            }
        },
        DeleteResourceServer: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Identifier" ],
                members: {
                    UserPoolId: {},
                    Identifier: {}
                }
            }
        },
        DeleteUser: {
            input: {
                type: "structure",
                required: [ "AccessToken" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            authtype: "none"
        },
        DeleteUserAttributes: {
            input: {
                type: "structure",
                required: [ "UserAttributeNames", "AccessToken" ],
                members: {
                    UserAttributeNames: {
                        shape: "S10"
                    },
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        DeleteUserPool: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {}
                }
            }
        },
        DeleteUserPoolClient: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ClientId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    }
                }
            }
        },
        DeleteUserPoolDomain: {
            input: {
                type: "structure",
                required: [ "Domain", "UserPoolId" ],
                members: {
                    Domain: {},
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeIdentityProvider: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ProviderName" ],
                members: {
                    UserPoolId: {},
                    ProviderName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProvider" ],
                members: {
                    IdentityProvider: {
                        shape: "S49"
                    }
                }
            }
        },
        DescribeResourceServer: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Identifier" ],
                members: {
                    UserPoolId: {},
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceServer" ],
                members: {
                    ResourceServer: {
                        shape: "S4i"
                    }
                }
            }
        },
        DescribeRiskConfiguration: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RiskConfiguration" ],
                members: {
                    RiskConfiguration: {
                        shape: "S7k"
                    }
                }
            }
        },
        DescribeUserImportJob: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "JobId" ],
                members: {
                    UserPoolId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserImportJob: {
                        shape: "S4m"
                    }
                }
            }
        },
        DescribeUserPool: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPool: {
                        shape: "S67"
                    }
                }
            }
        },
        DescribeUserPoolClient: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ClientId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPoolClient: {
                        shape: "S6z"
                    }
                }
            }
        },
        DescribeUserPoolDomain: {
            input: {
                type: "structure",
                required: [ "Domain" ],
                members: {
                    Domain: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainDescription: {
                        type: "structure",
                        members: {
                            UserPoolId: {},
                            AWSAccountId: {},
                            Domain: {},
                            S3Bucket: {},
                            CloudFrontDistribution: {},
                            Version: {},
                            Status: {},
                            CustomDomainConfig: {
                                shape: "S72"
                            }
                        }
                    }
                }
            }
        },
        ForgetDevice: {
            input: {
                type: "structure",
                required: [ "DeviceKey" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    DeviceKey: {}
                }
            },
            authtype: "none"
        },
        ForgotPassword: {
            input: {
                type: "structure",
                required: [ "ClientId", "Username" ],
                members: {
                    ClientId: {
                        shape: "S1j"
                    },
                    SecretHash: {
                        shape: "S3s"
                    },
                    UserContextData: {
                        shape: "S3u"
                    },
                    Username: {
                        shape: "Sd"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeDeliveryDetails: {
                        shape: "S8i"
                    }
                }
            },
            authtype: "none"
        },
        GetCSVHeader: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPoolId: {},
                    CSVHeader: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        GetDevice: {
            input: {
                type: "structure",
                required: [ "DeviceKey" ],
                members: {
                    DeviceKey: {},
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Device" ],
                members: {
                    Device: {
                        shape: "S1e"
                    }
                }
            },
            authtype: "none"
        },
        GetGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "UserPoolId" ],
                members: {
                    GroupName: {},
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S29"
                    }
                }
            }
        },
        GetIdentityProviderByIdentifier: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "IdpIdentifier" ],
                members: {
                    UserPoolId: {},
                    IdpIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProvider" ],
                members: {
                    IdentityProvider: {
                        shape: "S49"
                    }
                }
            }
        },
        GetLogDeliveryConfiguration: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LogDeliveryConfiguration: {
                        shape: "S8u"
                    }
                }
            }
        },
        GetSigningCertificate: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {}
                }
            }
        },
        GetUICustomization: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UICustomization" ],
                members: {
                    UICustomization: {
                        shape: "S94"
                    }
                }
            }
        },
        GetUser: {
            input: {
                type: "structure",
                required: [ "AccessToken" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Username", "UserAttributes" ],
                members: {
                    Username: {
                        shape: "Sd"
                    },
                    UserAttributes: {
                        shape: "Sj"
                    },
                    MFAOptions: {
                        shape: "Sw"
                    },
                    PreferredMfaSetting: {},
                    UserMFASettingList: {
                        shape: "S1h"
                    }
                }
            },
            authtype: "none"
        },
        GetUserAttributeVerificationCode: {
            input: {
                type: "structure",
                required: [ "AccessToken", "AttributeName" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    AttributeName: {},
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeDeliveryDetails: {
                        shape: "S8i"
                    }
                }
            },
            authtype: "none"
        },
        GetUserPoolMfaConfig: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SmsMfaConfiguration: {
                        shape: "S9e"
                    },
                    SoftwareTokenMfaConfiguration: {
                        shape: "S9f"
                    },
                    MfaConfiguration: {}
                }
            }
        },
        GlobalSignOut: {
            input: {
                type: "structure",
                required: [ "AccessToken" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        InitiateAuth: {
            input: {
                type: "structure",
                required: [ "AuthFlow", "ClientId" ],
                members: {
                    AuthFlow: {},
                    AuthParameters: {
                        shape: "S1l"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    },
                    ClientId: {
                        shape: "S1j"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    UserContextData: {
                        shape: "S3u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChallengeName: {},
                    Session: {
                        shape: "S1s"
                    },
                    ChallengeParameters: {
                        shape: "S1t"
                    },
                    AuthenticationResult: {
                        shape: "S1u"
                    }
                }
            },
            authtype: "none"
        },
        ListDevices: {
            input: {
                type: "structure",
                required: [ "AccessToken" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    Limit: {
                        type: "integer"
                    },
                    PaginationToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Devices: {
                        shape: "S24"
                    },
                    PaginationToken: {}
                }
            },
            authtype: "none"
        },
        ListGroups: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        ListIdentityProviders: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Providers" ],
                members: {
                    Providers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProviderName: {},
                                ProviderType: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                CreationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceServers: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceServers" ],
                members: {
                    ResourceServers: {
                        type: "list",
                        member: {
                            shape: "S4i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S5r"
                    }
                }
            }
        },
        ListUserImportJobs: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "MaxResults" ],
                members: {
                    UserPoolId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    PaginationToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserImportJobs: {
                        type: "list",
                        member: {
                            shape: "S4m"
                        }
                    },
                    PaginationToken: {}
                }
            }
        },
        ListUserPoolClients: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPoolClients: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClientId: {
                                    shape: "S1j"
                                },
                                UserPoolId: {},
                                ClientName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUserPools: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPools: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                LambdaConfig: {
                                    shape: "S4z"
                                },
                                Status: {
                                    deprecated: true,
                                    deprecatedMessage: "This property is no longer available."
                                },
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                CreationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUsers: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    AttributesToGet: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    PaginationToken: {},
                    Filter: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        shape: "Sah"
                    },
                    PaginationToken: {}
                }
            }
        },
        ListUsersInGroup: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "GroupName" ],
                members: {
                    UserPoolId: {},
                    GroupName: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        shape: "Sah"
                    },
                    NextToken: {}
                }
            }
        },
        ResendConfirmationCode: {
            input: {
                type: "structure",
                required: [ "ClientId", "Username" ],
                members: {
                    ClientId: {
                        shape: "S1j"
                    },
                    SecretHash: {
                        shape: "S3s"
                    },
                    UserContextData: {
                        shape: "S3u"
                    },
                    Username: {
                        shape: "Sd"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeDeliveryDetails: {
                        shape: "S8i"
                    }
                }
            },
            authtype: "none"
        },
        RespondToAuthChallenge: {
            input: {
                type: "structure",
                required: [ "ClientId", "ChallengeName" ],
                members: {
                    ClientId: {
                        shape: "S1j"
                    },
                    ChallengeName: {},
                    Session: {
                        shape: "S1s"
                    },
                    ChallengeResponses: {
                        shape: "S2y"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    UserContextData: {
                        shape: "S3u"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChallengeName: {},
                    Session: {
                        shape: "S1s"
                    },
                    ChallengeParameters: {
                        shape: "S1t"
                    },
                    AuthenticationResult: {
                        shape: "S1u"
                    }
                }
            },
            authtype: "none"
        },
        RevokeToken: {
            input: {
                type: "structure",
                required: [ "Token", "ClientId" ],
                members: {
                    Token: {
                        shape: "S1v"
                    },
                    ClientId: {
                        shape: "S1j"
                    },
                    ClientSecret: {
                        shape: "S70"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        SetLogDeliveryConfiguration: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "LogConfigurations" ],
                members: {
                    UserPoolId: {},
                    LogConfigurations: {
                        shape: "S8v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LogDeliveryConfiguration: {
                        shape: "S8u"
                    }
                }
            }
        },
        SetRiskConfiguration: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    },
                    CompromisedCredentialsRiskConfiguration: {
                        shape: "S7l"
                    },
                    AccountTakeoverRiskConfiguration: {
                        shape: "S7q"
                    },
                    RiskExceptionConfiguration: {
                        shape: "S7z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "RiskConfiguration" ],
                members: {
                    RiskConfiguration: {
                        shape: "S7k"
                    }
                }
            }
        },
        SetUICustomization: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    },
                    CSS: {},
                    ImageFile: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UICustomization" ],
                members: {
                    UICustomization: {
                        shape: "S94"
                    }
                }
            }
        },
        SetUserMFAPreference: {
            input: {
                type: "structure",
                required: [ "AccessToken" ],
                members: {
                    SMSMfaSettings: {
                        shape: "S31"
                    },
                    SoftwareTokenMfaSettings: {
                        shape: "S32"
                    },
                    AccessToken: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        SetUserPoolMfaConfig: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    SmsMfaConfiguration: {
                        shape: "S9e"
                    },
                    SoftwareTokenMfaConfiguration: {
                        shape: "S9f"
                    },
                    MfaConfiguration: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SmsMfaConfiguration: {
                        shape: "S9e"
                    },
                    SoftwareTokenMfaConfiguration: {
                        shape: "S9f"
                    },
                    MfaConfiguration: {}
                }
            }
        },
        SetUserSettings: {
            input: {
                type: "structure",
                required: [ "AccessToken", "MFAOptions" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    MFAOptions: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        SignUp: {
            input: {
                type: "structure",
                required: [ "ClientId", "Username", "Password" ],
                members: {
                    ClientId: {
                        shape: "S1j"
                    },
                    SecretHash: {
                        shape: "S3s"
                    },
                    Username: {
                        shape: "Sd"
                    },
                    Password: {
                        shape: "Sn"
                    },
                    UserAttributes: {
                        shape: "Sj"
                    },
                    ValidationData: {
                        shape: "Sj"
                    },
                    AnalyticsMetadata: {
                        shape: "S1m"
                    },
                    UserContextData: {
                        shape: "S3u"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UserConfirmed", "UserSub" ],
                members: {
                    UserConfirmed: {
                        type: "boolean"
                    },
                    CodeDeliveryDetails: {
                        shape: "S8i"
                    },
                    UserSub: {}
                }
            },
            authtype: "none"
        },
        StartUserImportJob: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "JobId" ],
                members: {
                    UserPoolId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserImportJob: {
                        shape: "S4m"
                    }
                }
            }
        },
        StopUserImportJob: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "JobId" ],
                members: {
                    UserPoolId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserImportJob: {
                        shape: "S4m"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S5r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAuthEventFeedback: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Username", "EventId", "FeedbackToken", "FeedbackValue" ],
                members: {
                    UserPoolId: {},
                    Username: {
                        shape: "Sd"
                    },
                    EventId: {},
                    FeedbackToken: {
                        shape: "S1v"
                    },
                    FeedbackValue: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        UpdateDeviceStatus: {
            input: {
                type: "structure",
                required: [ "AccessToken", "DeviceKey" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    DeviceKey: {},
                    DeviceRememberedStatus: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        },
        UpdateGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "UserPoolId" ],
                members: {
                    GroupName: {},
                    UserPoolId: {},
                    Description: {},
                    RoleArn: {},
                    Precedence: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "S29"
                    }
                }
            }
        },
        UpdateIdentityProvider: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ProviderName" ],
                members: {
                    UserPoolId: {},
                    ProviderName: {},
                    ProviderDetails: {
                        shape: "S43"
                    },
                    AttributeMapping: {
                        shape: "S44"
                    },
                    IdpIdentifiers: {
                        shape: "S46"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProvider" ],
                members: {
                    IdentityProvider: {
                        shape: "S49"
                    }
                }
            }
        },
        UpdateResourceServer: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "Identifier", "Name" ],
                members: {
                    UserPoolId: {},
                    Identifier: {},
                    Name: {},
                    Scopes: {
                        shape: "S4d"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceServer" ],
                members: {
                    ResourceServer: {
                        shape: "S4i"
                    }
                }
            }
        },
        UpdateUserAttributes: {
            input: {
                type: "structure",
                required: [ "UserAttributes", "AccessToken" ],
                members: {
                    UserAttributes: {
                        shape: "Sj"
                    },
                    AccessToken: {
                        shape: "S1v"
                    },
                    ClientMetadata: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeDeliveryDetailsList: {
                        type: "list",
                        member: {
                            shape: "S8i"
                        }
                    }
                }
            },
            authtype: "none"
        },
        UpdateUserPool: {
            input: {
                type: "structure",
                required: [ "UserPoolId" ],
                members: {
                    UserPoolId: {},
                    Policies: {
                        shape: "S4u"
                    },
                    DeletionProtection: {},
                    LambdaConfig: {
                        shape: "S4z"
                    },
                    AutoVerifiedAttributes: {
                        shape: "S54"
                    },
                    SmsVerificationMessage: {},
                    EmailVerificationMessage: {},
                    EmailVerificationSubject: {},
                    VerificationMessageTemplate: {
                        shape: "S5d"
                    },
                    SmsAuthenticationMessage: {},
                    UserAttributeUpdateSettings: {
                        shape: "S5i"
                    },
                    MfaConfiguration: {},
                    DeviceConfiguration: {
                        shape: "S5k"
                    },
                    EmailConfiguration: {
                        shape: "S5l"
                    },
                    SmsConfiguration: {
                        shape: "S5p"
                    },
                    UserPoolTags: {
                        shape: "S5r"
                    },
                    AdminCreateUserConfig: {
                        shape: "S5u"
                    },
                    UserPoolAddOns: {
                        shape: "S5y"
                    },
                    AccountRecoverySetting: {
                        shape: "S61"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateUserPoolClient: {
            input: {
                type: "structure",
                required: [ "UserPoolId", "ClientId" ],
                members: {
                    UserPoolId: {},
                    ClientId: {
                        shape: "S1j"
                    },
                    ClientName: {},
                    RefreshTokenValidity: {
                        type: "integer"
                    },
                    AccessTokenValidity: {
                        type: "integer"
                    },
                    IdTokenValidity: {
                        type: "integer"
                    },
                    TokenValidityUnits: {
                        shape: "S6g"
                    },
                    ReadAttributes: {
                        shape: "S6i"
                    },
                    WriteAttributes: {
                        shape: "S6i"
                    },
                    ExplicitAuthFlows: {
                        shape: "S6k"
                    },
                    SupportedIdentityProviders: {
                        shape: "S6m"
                    },
                    CallbackURLs: {
                        shape: "S6n"
                    },
                    LogoutURLs: {
                        shape: "S6p"
                    },
                    DefaultRedirectURI: {},
                    AllowedOAuthFlows: {
                        shape: "S6q"
                    },
                    AllowedOAuthScopes: {
                        shape: "S6s"
                    },
                    AllowedOAuthFlowsUserPoolClient: {
                        type: "boolean"
                    },
                    AnalyticsConfiguration: {
                        shape: "S6u"
                    },
                    PreventUserExistenceErrors: {},
                    EnableTokenRevocation: {
                        type: "boolean"
                    },
                    EnablePropagateAdditionalUserContextData: {
                        type: "boolean"
                    },
                    AuthSessionValidity: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserPoolClient: {
                        shape: "S6z"
                    }
                }
            }
        },
        UpdateUserPoolDomain: {
            input: {
                type: "structure",
                required: [ "Domain", "UserPoolId", "CustomDomainConfig" ],
                members: {
                    Domain: {},
                    UserPoolId: {},
                    CustomDomainConfig: {
                        shape: "S72"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CloudFrontDomain: {}
                }
            }
        },
        VerifySoftwareToken: {
            input: {
                type: "structure",
                required: [ "UserCode" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    Session: {
                        shape: "S1s"
                    },
                    UserCode: {
                        type: "string",
                        sensitive: true
                    },
                    FriendlyDeviceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    Session: {
                        shape: "S1s"
                    }
                }
            },
            authtype: "none"
        },
        VerifyUserAttribute: {
            input: {
                type: "structure",
                required: [ "AccessToken", "AttributeName", "Code" ],
                members: {
                    AccessToken: {
                        shape: "S1v"
                    },
                    AttributeName: {},
                    Code: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            authtype: "none"
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                Name: {},
                AttributeDataType: {},
                DeveloperOnlyAttribute: {
                    type: "boolean"
                },
                Mutable: {
                    type: "boolean"
                },
                Required: {
                    type: "boolean"
                },
                NumberAttributeConstraints: {
                    type: "structure",
                    members: {
                        MinValue: {},
                        MaxValue: {}
                    }
                },
                StringAttributeConstraints: {
                    type: "structure",
                    members: {
                        MinLength: {},
                        MaxLength: {}
                    }
                }
            }
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        St: {
            type: "structure",
            members: {
                Username: {
                    shape: "Sd"
                },
                Attributes: {
                    shape: "Sj"
                },
                UserCreateDate: {
                    type: "timestamp"
                },
                UserLastModifiedDate: {
                    type: "timestamp"
                },
                Enabled: {
                    type: "boolean"
                },
                UserStatus: {},
                MFAOptions: {
                    shape: "Sw"
                }
            }
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DeliveryMedium: {},
                    AttributeName: {}
                }
            }
        },
        S10: {
            type: "list",
            member: {}
        },
        S13: {
            type: "structure",
            members: {
                ProviderName: {},
                ProviderAttributeName: {},
                ProviderAttributeValue: {}
            }
        },
        S1e: {
            type: "structure",
            members: {
                DeviceKey: {},
                DeviceAttributes: {
                    shape: "Sj"
                },
                DeviceCreateDate: {
                    type: "timestamp"
                },
                DeviceLastModifiedDate: {
                    type: "timestamp"
                },
                DeviceLastAuthenticatedDate: {
                    type: "timestamp"
                }
            }
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1j: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S1m: {
            type: "structure",
            members: {
                AnalyticsEndpointId: {}
            }
        },
        S1n: {
            type: "structure",
            required: [ "IpAddress", "ServerName", "ServerPath", "HttpHeaders" ],
            members: {
                IpAddress: {},
                ServerName: {},
                ServerPath: {},
                HttpHeaders: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            headerName: {},
                            headerValue: {}
                        }
                    }
                },
                EncodedData: {}
            }
        },
        S1s: {
            type: "string",
            sensitive: true
        },
        S1t: {
            type: "map",
            key: {},
            value: {}
        },
        S1u: {
            type: "structure",
            members: {
                AccessToken: {
                    shape: "S1v"
                },
                ExpiresIn: {
                    type: "integer"
                },
                TokenType: {},
                RefreshToken: {
                    shape: "S1v"
                },
                IdToken: {
                    shape: "S1v"
                },
                NewDeviceMetadata: {
                    type: "structure",
                    members: {
                        DeviceKey: {},
                        DeviceGroupKey: {}
                    }
                }
            }
        },
        S1v: {
            type: "string",
            sensitive: true
        },
        S24: {
            type: "list",
            member: {
                shape: "S1e"
            }
        },
        S28: {
            type: "list",
            member: {
                shape: "S29"
            }
        },
        S29: {
            type: "structure",
            members: {
                GroupName: {},
                UserPoolId: {},
                Description: {},
                RoleArn: {},
                Precedence: {
                    type: "integer"
                },
                LastModifiedDate: {
                    type: "timestamp"
                },
                CreationDate: {
                    type: "timestamp"
                }
            }
        },
        S2y: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S31: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                PreferredMfa: {
                    type: "boolean"
                }
            }
        },
        S32: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                PreferredMfa: {
                    type: "boolean"
                }
            }
        },
        S3s: {
            type: "string",
            sensitive: true
        },
        S3u: {
            type: "structure",
            members: {
                IpAddress: {},
                EncodedData: {}
            },
            sensitive: true
        },
        S43: {
            type: "map",
            key: {},
            value: {}
        },
        S44: {
            type: "map",
            key: {},
            value: {}
        },
        S46: {
            type: "list",
            member: {}
        },
        S49: {
            type: "structure",
            members: {
                UserPoolId: {},
                ProviderName: {},
                ProviderType: {},
                ProviderDetails: {
                    shape: "S43"
                },
                AttributeMapping: {
                    shape: "S44"
                },
                IdpIdentifiers: {
                    shape: "S46"
                },
                LastModifiedDate: {
                    type: "timestamp"
                },
                CreationDate: {
                    type: "timestamp"
                }
            }
        },
        S4d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ScopeName", "ScopeDescription" ],
                members: {
                    ScopeName: {},
                    ScopeDescription: {}
                }
            }
        },
        S4i: {
            type: "structure",
            members: {
                UserPoolId: {},
                Identifier: {},
                Name: {},
                Scopes: {
                    shape: "S4d"
                }
            }
        },
        S4m: {
            type: "structure",
            members: {
                JobName: {},
                JobId: {},
                UserPoolId: {},
                PreSignedUrl: {},
                CreationDate: {
                    type: "timestamp"
                },
                StartDate: {
                    type: "timestamp"
                },
                CompletionDate: {
                    type: "timestamp"
                },
                Status: {},
                CloudWatchLogsRoleArn: {},
                ImportedUsers: {
                    type: "long"
                },
                SkippedUsers: {
                    type: "long"
                },
                FailedUsers: {
                    type: "long"
                },
                CompletionMessage: {}
            }
        },
        S4u: {
            type: "structure",
            members: {
                PasswordPolicy: {
                    type: "structure",
                    members: {
                        MinimumLength: {
                            type: "integer"
                        },
                        RequireUppercase: {
                            type: "boolean"
                        },
                        RequireLowercase: {
                            type: "boolean"
                        },
                        RequireNumbers: {
                            type: "boolean"
                        },
                        RequireSymbols: {
                            type: "boolean"
                        },
                        TemporaryPasswordValidityDays: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S4z: {
            type: "structure",
            members: {
                PreSignUp: {},
                CustomMessage: {},
                PostConfirmation: {},
                PreAuthentication: {},
                PostAuthentication: {},
                DefineAuthChallenge: {},
                CreateAuthChallenge: {},
                VerifyAuthChallengeResponse: {},
                PreTokenGeneration: {},
                UserMigration: {},
                CustomSMSSender: {
                    type: "structure",
                    required: [ "LambdaVersion", "LambdaArn" ],
                    members: {
                        LambdaVersion: {},
                        LambdaArn: {}
                    }
                },
                CustomEmailSender: {
                    type: "structure",
                    required: [ "LambdaVersion", "LambdaArn" ],
                    members: {
                        LambdaVersion: {},
                        LambdaArn: {}
                    }
                },
                KMSKeyID: {}
            }
        },
        S54: {
            type: "list",
            member: {}
        },
        S56: {
            type: "list",
            member: {}
        },
        S58: {
            type: "list",
            member: {}
        },
        S5d: {
            type: "structure",
            members: {
                SmsMessage: {},
                EmailMessage: {},
                EmailSubject: {},
                EmailMessageByLink: {},
                EmailSubjectByLink: {},
                DefaultEmailOption: {}
            }
        },
        S5i: {
            type: "structure",
            members: {
                AttributesRequireVerificationBeforeUpdate: {
                    type: "list",
                    member: {}
                }
            }
        },
        S5k: {
            type: "structure",
            members: {
                ChallengeRequiredOnNewDevice: {
                    type: "boolean"
                },
                DeviceOnlyRememberedOnUserPrompt: {
                    type: "boolean"
                }
            }
        },
        S5l: {
            type: "structure",
            members: {
                SourceArn: {},
                ReplyToEmailAddress: {},
                EmailSendingAccount: {},
                From: {},
                ConfigurationSet: {}
            }
        },
        S5p: {
            type: "structure",
            required: [ "SnsCallerArn" ],
            members: {
                SnsCallerArn: {},
                ExternalId: {},
                SnsRegion: {}
            }
        },
        S5r: {
            type: "map",
            key: {},
            value: {}
        },
        S5u: {
            type: "structure",
            members: {
                AllowAdminCreateUserOnly: {
                    type: "boolean"
                },
                UnusedAccountValidityDays: {
                    type: "integer"
                },
                InviteMessageTemplate: {
                    type: "structure",
                    members: {
                        SMSMessage: {},
                        EmailMessage: {},
                        EmailSubject: {}
                    }
                }
            }
        },
        S5x: {
            type: "list",
            member: {
                shape: "S4"
            }
        },
        S5y: {
            type: "structure",
            required: [ "AdvancedSecurityMode" ],
            members: {
                AdvancedSecurityMode: {}
            }
        },
        S60: {
            type: "structure",
            required: [ "CaseSensitive" ],
            members: {
                CaseSensitive: {
                    type: "boolean"
                }
            }
        },
        S61: {
            type: "structure",
            members: {
                RecoveryMechanisms: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Priority", "Name" ],
                        members: {
                            Priority: {
                                type: "integer"
                            },
                            Name: {}
                        }
                    }
                }
            }
        },
        S67: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Policies: {
                    shape: "S4u"
                },
                DeletionProtection: {},
                LambdaConfig: {
                    shape: "S4z"
                },
                Status: {
                    deprecated: true,
                    deprecatedMessage: "This property is no longer available."
                },
                LastModifiedDate: {
                    type: "timestamp"
                },
                CreationDate: {
                    type: "timestamp"
                },
                SchemaAttributes: {
                    shape: "S5x"
                },
                AutoVerifiedAttributes: {
                    shape: "S54"
                },
                AliasAttributes: {
                    shape: "S56"
                },
                UsernameAttributes: {
                    shape: "S58"
                },
                SmsVerificationMessage: {},
                EmailVerificationMessage: {},
                EmailVerificationSubject: {},
                VerificationMessageTemplate: {
                    shape: "S5d"
                },
                SmsAuthenticationMessage: {},
                UserAttributeUpdateSettings: {
                    shape: "S5i"
                },
                MfaConfiguration: {},
                DeviceConfiguration: {
                    shape: "S5k"
                },
                EstimatedNumberOfUsers: {
                    type: "integer"
                },
                EmailConfiguration: {
                    shape: "S5l"
                },
                SmsConfiguration: {
                    shape: "S5p"
                },
                UserPoolTags: {
                    shape: "S5r"
                },
                SmsConfigurationFailure: {},
                EmailConfigurationFailure: {},
                Domain: {},
                CustomDomain: {},
                AdminCreateUserConfig: {
                    shape: "S5u"
                },
                UserPoolAddOns: {
                    shape: "S5y"
                },
                UsernameConfiguration: {
                    shape: "S60"
                },
                Arn: {},
                AccountRecoverySetting: {
                    shape: "S61"
                }
            }
        },
        S6g: {
            type: "structure",
            members: {
                AccessToken: {},
                IdToken: {},
                RefreshToken: {}
            }
        },
        S6i: {
            type: "list",
            member: {}
        },
        S6k: {
            type: "list",
            member: {}
        },
        S6m: {
            type: "list",
            member: {}
        },
        S6n: {
            type: "list",
            member: {}
        },
        S6p: {
            type: "list",
            member: {}
        },
        S6q: {
            type: "list",
            member: {}
        },
        S6s: {
            type: "list",
            member: {}
        },
        S6u: {
            type: "structure",
            members: {
                ApplicationId: {},
                ApplicationArn: {},
                RoleArn: {},
                ExternalId: {},
                UserDataShared: {
                    type: "boolean"
                }
            }
        },
        S6z: {
            type: "structure",
            members: {
                UserPoolId: {},
                ClientName: {},
                ClientId: {
                    shape: "S1j"
                },
                ClientSecret: {
                    shape: "S70"
                },
                LastModifiedDate: {
                    type: "timestamp"
                },
                CreationDate: {
                    type: "timestamp"
                },
                RefreshTokenValidity: {
                    type: "integer"
                },
                AccessTokenValidity: {
                    type: "integer"
                },
                IdTokenValidity: {
                    type: "integer"
                },
                TokenValidityUnits: {
                    shape: "S6g"
                },
                ReadAttributes: {
                    shape: "S6i"
                },
                WriteAttributes: {
                    shape: "S6i"
                },
                ExplicitAuthFlows: {
                    shape: "S6k"
                },
                SupportedIdentityProviders: {
                    shape: "S6m"
                },
                CallbackURLs: {
                    shape: "S6n"
                },
                LogoutURLs: {
                    shape: "S6p"
                },
                DefaultRedirectURI: {},
                AllowedOAuthFlows: {
                    shape: "S6q"
                },
                AllowedOAuthScopes: {
                    shape: "S6s"
                },
                AllowedOAuthFlowsUserPoolClient: {
                    type: "boolean"
                },
                AnalyticsConfiguration: {
                    shape: "S6u"
                },
                PreventUserExistenceErrors: {},
                EnableTokenRevocation: {
                    type: "boolean"
                },
                EnablePropagateAdditionalUserContextData: {
                    type: "boolean"
                },
                AuthSessionValidity: {
                    type: "integer"
                }
            }
        },
        S70: {
            type: "string",
            sensitive: true
        },
        S72: {
            type: "structure",
            required: [ "CertificateArn" ],
            members: {
                CertificateArn: {}
            }
        },
        S7k: {
            type: "structure",
            members: {
                UserPoolId: {},
                ClientId: {
                    shape: "S1j"
                },
                CompromisedCredentialsRiskConfiguration: {
                    shape: "S7l"
                },
                AccountTakeoverRiskConfiguration: {
                    shape: "S7q"
                },
                RiskExceptionConfiguration: {
                    shape: "S7z"
                },
                LastModifiedDate: {
                    type: "timestamp"
                }
            }
        },
        S7l: {
            type: "structure",
            required: [ "Actions" ],
            members: {
                EventFilter: {
                    type: "list",
                    member: {}
                },
                Actions: {
                    type: "structure",
                    required: [ "EventAction" ],
                    members: {
                        EventAction: {}
                    }
                }
            }
        },
        S7q: {
            type: "structure",
            required: [ "Actions" ],
            members: {
                NotifyConfiguration: {
                    type: "structure",
                    required: [ "SourceArn" ],
                    members: {
                        From: {},
                        ReplyTo: {},
                        SourceArn: {},
                        BlockEmail: {
                            shape: "S7s"
                        },
                        NoActionEmail: {
                            shape: "S7s"
                        },
                        MfaEmail: {
                            shape: "S7s"
                        }
                    }
                },
                Actions: {
                    type: "structure",
                    members: {
                        LowAction: {
                            shape: "S7w"
                        },
                        MediumAction: {
                            shape: "S7w"
                        },
                        HighAction: {
                            shape: "S7w"
                        }
                    }
                }
            }
        },
        S7s: {
            type: "structure",
            required: [ "Subject" ],
            members: {
                Subject: {},
                HtmlBody: {},
                TextBody: {}
            }
        },
        S7w: {
            type: "structure",
            required: [ "Notify", "EventAction" ],
            members: {
                Notify: {
                    type: "boolean"
                },
                EventAction: {}
            }
        },
        S7z: {
            type: "structure",
            members: {
                BlockedIPRangeList: {
                    type: "list",
                    member: {}
                },
                SkippedIPRangeList: {
                    type: "list",
                    member: {}
                }
            }
        },
        S8i: {
            type: "structure",
            members: {
                Destination: {},
                DeliveryMedium: {},
                AttributeName: {}
            }
        },
        S8u: {
            type: "structure",
            required: [ "UserPoolId", "LogConfigurations" ],
            members: {
                UserPoolId: {},
                LogConfigurations: {
                    shape: "S8v"
                }
            }
        },
        S8v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "LogLevel", "EventSource" ],
                members: {
                    LogLevel: {},
                    EventSource: {},
                    CloudWatchLogsConfiguration: {
                        type: "structure",
                        members: {
                            LogGroupArn: {}
                        }
                    }
                }
            }
        },
        S94: {
            type: "structure",
            members: {
                UserPoolId: {},
                ClientId: {
                    shape: "S1j"
                },
                ImageUrl: {},
                CSS: {},
                CSSVersion: {},
                LastModifiedDate: {
                    type: "timestamp"
                },
                CreationDate: {
                    type: "timestamp"
                }
            }
        },
        S9e: {
            type: "structure",
            members: {
                SmsAuthenticationMessage: {},
                SmsConfiguration: {
                    shape: "S5p"
                }
            }
        },
        S9f: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                }
            }
        },
        Sah: {
            type: "list",
            member: {
                shape: "St"
            }
        }
    },
    paginators: {
        AdminListGroupsForUser: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Groups"
        },
        AdminListUserAuthEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AuthEvents"
        },
        ListGroups: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Groups"
        },
        ListIdentityProviders: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Providers"
        },
        ListResourceServers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ResourceServers"
        },
        ListUserPoolClients: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UserPoolClients"
        },
        ListUserPools: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "UserPools"
        },
        ListUsers: {
            input_token: "PaginationToken",
            limit_key: "Limit",
            output_token: "PaginationToken",
            result_key: "Users"
        },
        ListUsersInGroup: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Users"
        }
    }
};

AWS.apiLoader.services["cognitosync"] = {};

AWS.CognitoSync = AWS.Service.defineService("cognitosync", [ "2014-06-30" ]);

AWS.apiLoader.services["cognitosync"]["2014-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-06-30",
        endpointPrefix: "cognito-sync",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Cognito Sync",
        serviceId: "Cognito Sync",
        signatureVersion: "v4",
        uid: "cognito-sync-2014-06-30"
    },
    operations: {
        BulkPublish: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/bulkpublish",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {}
                }
            }
        },
        DeleteDataset: {
            http: {
                method: "DELETE",
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "DatasetName" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    DatasetName: {
                        location: "uri",
                        locationName: "DatasetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Dataset: {
                        shape: "S8"
                    }
                }
            }
        },
        DescribeDataset: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "DatasetName" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    DatasetName: {
                        location: "uri",
                        locationName: "DatasetName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Dataset: {
                        shape: "S8"
                    }
                }
            }
        },
        DescribeIdentityPoolUsage: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolUsage: {
                        shape: "Sg"
                    }
                }
            }
        },
        DescribeIdentityUsage: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityUsage: {
                        type: "structure",
                        members: {
                            IdentityId: {},
                            IdentityPoolId: {},
                            LastModifiedDate: {
                                type: "timestamp"
                            },
                            DatasetCount: {
                                type: "integer"
                            },
                            DataStorage: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetBulkPublishDetails: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/getBulkPublishDetails",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    BulkPublishStartTime: {
                        type: "timestamp"
                    },
                    BulkPublishCompleteTime: {
                        type: "timestamp"
                    },
                    BulkPublishStatus: {},
                    FailureMessage: {}
                }
            }
        },
        GetCognitoEvents: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}/events",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        shape: "Sq"
                    }
                }
            }
        },
        GetIdentityPoolConfiguration: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    PushSync: {
                        shape: "Sv"
                    },
                    CognitoStreams: {
                        shape: "Sz"
                    }
                }
            }
        },
        ListDatasets: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityId", "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Datasets: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    Count: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        ListIdentityPoolUsage: {
            http: {
                method: "GET",
                requestUri: "/identitypools",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolUsages: {
                        type: "list",
                        member: {
                            shape: "Sg"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    Count: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            }
        },
        ListRecords: {
            http: {
                method: "GET",
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "DatasetName" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    DatasetName: {
                        location: "uri",
                        locationName: "DatasetName"
                    },
                    LastSyncCount: {
                        location: "querystring",
                        locationName: "lastSyncCount",
                        type: "long"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    SyncSessionToken: {
                        location: "querystring",
                        locationName: "syncSessionToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Records: {
                        shape: "S1c"
                    },
                    NextToken: {},
                    Count: {
                        type: "integer"
                    },
                    DatasetSyncCount: {
                        type: "long"
                    },
                    LastModifiedBy: {},
                    MergedDatasetNames: {
                        type: "list",
                        member: {}
                    },
                    DatasetExists: {
                        type: "boolean"
                    },
                    DatasetDeletedAfterRequestedSyncCount: {
                        type: "boolean"
                    },
                    SyncSessionToken: {}
                }
            }
        },
        RegisterDevice: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/identity/{IdentityId}/device",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "Platform", "Token" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    Platform: {},
                    Token: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        },
        SetCognitoEvents: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/events",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "Events" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    Events: {
                        shape: "Sq"
                    }
                }
            }
        },
        SetIdentityPoolConfiguration: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    PushSync: {
                        shape: "Sv"
                    },
                    CognitoStreams: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IdentityPoolId: {},
                    PushSync: {
                        shape: "Sv"
                    },
                    CognitoStreams: {
                        shape: "Sz"
                    }
                }
            }
        },
        SubscribeToDataset: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "DatasetName", "DeviceId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    DatasetName: {
                        location: "uri",
                        locationName: "DatasetName"
                    },
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UnsubscribeFromDataset: {
            http: {
                method: "DELETE",
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "DatasetName", "DeviceId" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    DatasetName: {
                        location: "uri",
                        locationName: "DatasetName"
                    },
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRecords: {
            http: {
                requestUri: "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityPoolId", "IdentityId", "DatasetName", "SyncSessionToken" ],
                members: {
                    IdentityPoolId: {
                        location: "uri",
                        locationName: "IdentityPoolId"
                    },
                    IdentityId: {
                        location: "uri",
                        locationName: "IdentityId"
                    },
                    DatasetName: {
                        location: "uri",
                        locationName: "DatasetName"
                    },
                    DeviceId: {},
                    RecordPatches: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Op", "Key", "SyncCount" ],
                            members: {
                                Op: {},
                                Key: {},
                                Value: {},
                                SyncCount: {
                                    type: "long"
                                },
                                DeviceLastModifiedDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    SyncSessionToken: {},
                    ClientContext: {
                        location: "header",
                        locationName: "x-amz-Client-Context"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Records: {
                        shape: "S1c"
                    }
                }
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                IdentityId: {},
                DatasetName: {},
                CreationDate: {
                    type: "timestamp"
                },
                LastModifiedDate: {
                    type: "timestamp"
                },
                LastModifiedBy: {},
                DataStorage: {
                    type: "long"
                },
                NumRecords: {
                    type: "long"
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                IdentityPoolId: {},
                SyncSessionsCount: {
                    type: "long"
                },
                DataStorage: {
                    type: "long"
                },
                LastModifiedDate: {
                    type: "timestamp"
                }
            }
        },
        Sq: {
            type: "map",
            key: {},
            value: {}
        },
        Sv: {
            type: "structure",
            members: {
                ApplicationArns: {
                    type: "list",
                    member: {}
                },
                RoleArn: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                StreamName: {},
                RoleArn: {},
                StreamingStatus: {}
            }
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    SyncCount: {
                        type: "long"
                    },
                    LastModifiedDate: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {},
                    DeviceLastModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["configservice"] = {};

AWS.ConfigService = AWS.Service.defineService("configservice", [ "2014-11-12" ]);

AWS.apiLoader.services["configservice"]["2014-11-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-11-12",
        endpointPrefix: "config",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Config Service",
        serviceFullName: "AWS Config",
        serviceId: "Config Service",
        signatureVersion: "v4",
        targetPrefix: "StarlingDoveService",
        uid: "config-2014-11-12"
    },
    operations: {
        BatchGetAggregateResourceConfig: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName", "ResourceIdentifiers" ],
                members: {
                    ConfigurationAggregatorName: {},
                    ResourceIdentifiers: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BaseConfigurationItems: {
                        shape: "Sb"
                    },
                    UnprocessedResourceIdentifiers: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            }
        },
        BatchGetResourceConfig: {
            input: {
                type: "structure",
                required: [ "resourceKeys" ],
                members: {
                    resourceKeys: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    baseConfigurationItems: {
                        shape: "Sb"
                    },
                    unprocessedResourceKeys: {
                        shape: "Ss"
                    }
                }
            }
        },
        DeleteAggregationAuthorization: {
            input: {
                type: "structure",
                required: [ "AuthorizedAccountId", "AuthorizedAwsRegion" ],
                members: {
                    AuthorizedAccountId: {},
                    AuthorizedAwsRegion: {}
                }
            }
        },
        DeleteConfigRule: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName" ],
                members: {
                    ConfigRuleName: {}
                }
            }
        },
        DeleteConfigurationAggregator: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {}
                }
            }
        },
        DeleteConfigurationRecorder: {
            input: {
                type: "structure",
                required: [ "ConfigurationRecorderName" ],
                members: {
                    ConfigurationRecorderName: {}
                }
            }
        },
        DeleteConformancePack: {
            input: {
                type: "structure",
                required: [ "ConformancePackName" ],
                members: {
                    ConformancePackName: {}
                }
            }
        },
        DeleteDeliveryChannel: {
            input: {
                type: "structure",
                required: [ "DeliveryChannelName" ],
                members: {
                    DeliveryChannelName: {}
                }
            }
        },
        DeleteEvaluationResults: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName" ],
                members: {
                    ConfigRuleName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOrganizationConfigRule: {
            input: {
                type: "structure",
                required: [ "OrganizationConfigRuleName" ],
                members: {
                    OrganizationConfigRuleName: {}
                }
            }
        },
        DeleteOrganizationConformancePack: {
            input: {
                type: "structure",
                required: [ "OrganizationConformancePackName" ],
                members: {
                    OrganizationConformancePackName: {}
                }
            }
        },
        DeletePendingAggregationRequest: {
            input: {
                type: "structure",
                required: [ "RequesterAccountId", "RequesterAwsRegion" ],
                members: {
                    RequesterAccountId: {},
                    RequesterAwsRegion: {}
                }
            }
        },
        DeleteRemediationConfiguration: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName" ],
                members: {
                    ConfigRuleName: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRemediationExceptions: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName", "ResourceKeys" ],
                members: {
                    ConfigRuleName: {},
                    ResourceKeys: {
                        shape: "S1h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedBatches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FailureMessage: {},
                                FailedItems: {
                                    shape: "S1h"
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteResourceConfig: {
            input: {
                type: "structure",
                required: [ "ResourceType", "ResourceId" ],
                members: {
                    ResourceType: {},
                    ResourceId: {}
                }
            }
        },
        DeleteRetentionConfiguration: {
            input: {
                type: "structure",
                required: [ "RetentionConfigurationName" ],
                members: {
                    RetentionConfigurationName: {}
                }
            }
        },
        DeleteStoredQuery: {
            input: {
                type: "structure",
                required: [ "QueryName" ],
                members: {
                    QueryName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeliverConfigSnapshot: {
            input: {
                type: "structure",
                required: [ "deliveryChannelName" ],
                members: {
                    deliveryChannelName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    configSnapshotId: {}
                }
            }
        },
        DescribeAggregateComplianceByConfigRules: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            ConfigRuleName: {},
                            ComplianceType: {},
                            AccountId: {},
                            AwsRegion: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregateComplianceByConfigRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConfigRuleName: {},
                                Compliance: {
                                    shape: "S25"
                                },
                                AccountId: {},
                                AwsRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAggregateComplianceByConformancePacks: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            ConformancePackName: {},
                            ComplianceType: {},
                            AccountId: {},
                            AwsRegion: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregateComplianceByConformancePacks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConformancePackName: {},
                                Compliance: {
                                    type: "structure",
                                    members: {
                                        ComplianceType: {},
                                        CompliantRuleCount: {
                                            type: "integer"
                                        },
                                        NonCompliantRuleCount: {
                                            type: "integer"
                                        },
                                        TotalRuleCount: {
                                            type: "integer"
                                        }
                                    }
                                },
                                AccountId: {},
                                AwsRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAggregationAuthorizations: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregationAuthorizations: {
                        type: "list",
                        member: {
                            shape: "S2k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeComplianceByConfigRule: {
            input: {
                type: "structure",
                members: {
                    ConfigRuleNames: {
                        shape: "S2n"
                    },
                    ComplianceTypes: {
                        shape: "S2o"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComplianceByConfigRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConfigRuleName: {},
                                Compliance: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeComplianceByResource: {
            input: {
                type: "structure",
                members: {
                    ResourceType: {},
                    ResourceId: {},
                    ComplianceTypes: {
                        shape: "S2o"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ComplianceByResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {},
                                ResourceId: {},
                                Compliance: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigRuleEvaluationStatus: {
            input: {
                type: "structure",
                members: {
                    ConfigRuleNames: {
                        shape: "S2n"
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigRulesEvaluationStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConfigRuleName: {},
                                ConfigRuleArn: {},
                                ConfigRuleId: {},
                                LastSuccessfulInvocationTime: {
                                    type: "timestamp"
                                },
                                LastFailedInvocationTime: {
                                    type: "timestamp"
                                },
                                LastSuccessfulEvaluationTime: {
                                    type: "timestamp"
                                },
                                LastFailedEvaluationTime: {
                                    type: "timestamp"
                                },
                                FirstActivatedTime: {
                                    type: "timestamp"
                                },
                                LastDeactivatedTime: {
                                    type: "timestamp"
                                },
                                LastErrorCode: {},
                                LastErrorMessage: {},
                                FirstEvaluationStarted: {
                                    type: "boolean"
                                },
                                LastDebugLogDeliveryStatus: {},
                                LastDebugLogDeliveryStatusReason: {},
                                LastDebugLogDeliveryTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigRules: {
            input: {
                type: "structure",
                members: {
                    ConfigRuleNames: {
                        shape: "S2n"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            EvaluationMode: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigRules: {
                        type: "list",
                        member: {
                            shape: "S37"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigurationAggregatorSourcesStatus: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    UpdateStatus: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregatedSourceStatusList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceId: {},
                                SourceType: {},
                                AwsRegion: {},
                                LastUpdateStatus: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                },
                                LastErrorCode: {},
                                LastErrorMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigurationAggregators: {
            input: {
                type: "structure",
                members: {
                    ConfigurationAggregatorNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationAggregators: {
                        type: "list",
                        member: {
                            shape: "S40"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigurationRecorderStatus: {
            input: {
                type: "structure",
                members: {
                    ConfigurationRecorderNames: {
                        shape: "S48"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationRecordersStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                lastStartTime: {
                                    type: "timestamp"
                                },
                                lastStopTime: {
                                    type: "timestamp"
                                },
                                recording: {
                                    type: "boolean"
                                },
                                lastStatus: {},
                                lastErrorCode: {},
                                lastErrorMessage: {},
                                lastStatusChangeTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConfigurationRecorders: {
            input: {
                type: "structure",
                members: {
                    ConfigurationRecorderNames: {
                        shape: "S48"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationRecorders: {
                        type: "list",
                        member: {
                            shape: "S4g"
                        }
                    }
                }
            }
        },
        DescribeConformancePackCompliance: {
            input: {
                type: "structure",
                required: [ "ConformancePackName" ],
                members: {
                    ConformancePackName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            ConfigRuleNames: {
                                shape: "S4v"
                            },
                            ComplianceType: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConformancePackName", "ConformancePackRuleComplianceList" ],
                members: {
                    ConformancePackName: {},
                    ConformancePackRuleComplianceList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConfigRuleName: {},
                                ComplianceType: {},
                                Controls: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConformancePackStatus: {
            input: {
                type: "structure",
                members: {
                    ConformancePackNames: {
                        shape: "S52"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConformancePackStatusDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ConformancePackName", "ConformancePackId", "ConformancePackArn", "ConformancePackState", "StackArn", "LastUpdateRequestedTime" ],
                            members: {
                                ConformancePackName: {},
                                ConformancePackId: {},
                                ConformancePackArn: {},
                                ConformancePackState: {},
                                StackArn: {},
                                ConformancePackStatusReason: {},
                                LastUpdateRequestedTime: {
                                    type: "timestamp"
                                },
                                LastUpdateCompletedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConformancePacks: {
            input: {
                type: "structure",
                members: {
                    ConformancePackNames: {
                        shape: "S52"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConformancePackDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ConformancePackName", "ConformancePackArn", "ConformancePackId" ],
                            members: {
                                ConformancePackName: {},
                                ConformancePackArn: {},
                                ConformancePackId: {},
                                DeliveryS3Bucket: {},
                                DeliveryS3KeyPrefix: {},
                                ConformancePackInputParameters: {
                                    shape: "S5i"
                                },
                                LastUpdateRequestedTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {},
                                TemplateSSMDocumentDetails: {
                                    shape: "S5m"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDeliveryChannelStatus: {
            input: {
                type: "structure",
                members: {
                    DeliveryChannelNames: {
                        shape: "S5q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeliveryChannelsStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                configSnapshotDeliveryInfo: {
                                    shape: "S5u"
                                },
                                configHistoryDeliveryInfo: {
                                    shape: "S5u"
                                },
                                configStreamDeliveryInfo: {
                                    type: "structure",
                                    members: {
                                        lastStatus: {},
                                        lastErrorCode: {},
                                        lastErrorMessage: {},
                                        lastStatusChangeTime: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDeliveryChannels: {
            input: {
                type: "structure",
                members: {
                    DeliveryChannelNames: {
                        shape: "S5q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeliveryChannels: {
                        type: "list",
                        member: {
                            shape: "S60"
                        }
                    }
                }
            }
        },
        DescribeOrganizationConfigRuleStatuses: {
            input: {
                type: "structure",
                members: {
                    OrganizationConfigRuleNames: {
                        shape: "S63"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConfigRuleStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OrganizationConfigRuleName", "OrganizationRuleStatus" ],
                            members: {
                                OrganizationConfigRuleName: {},
                                OrganizationRuleStatus: {},
                                ErrorCode: {},
                                ErrorMessage: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOrganizationConfigRules: {
            input: {
                type: "structure",
                members: {
                    OrganizationConfigRuleNames: {
                        shape: "S63"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConfigRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OrganizationConfigRuleName", "OrganizationConfigRuleArn" ],
                            members: {
                                OrganizationConfigRuleName: {},
                                OrganizationConfigRuleArn: {},
                                OrganizationManagedRuleMetadata: {
                                    shape: "S6d"
                                },
                                OrganizationCustomRuleMetadata: {
                                    shape: "S6i"
                                },
                                ExcludedAccounts: {
                                    shape: "S6l"
                                },
                                LastUpdateTime: {
                                    type: "timestamp"
                                },
                                OrganizationCustomPolicyRuleMetadata: {
                                    type: "structure",
                                    members: {
                                        Description: {},
                                        OrganizationConfigRuleTriggerTypes: {
                                            shape: "S6n"
                                        },
                                        InputParameters: {},
                                        MaximumExecutionFrequency: {},
                                        ResourceTypesScope: {
                                            shape: "S6g"
                                        },
                                        ResourceIdScope: {},
                                        TagKeyScope: {},
                                        TagValueScope: {},
                                        PolicyRuntime: {},
                                        DebugLogDeliveryAccounts: {
                                            shape: "S6p"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOrganizationConformancePackStatuses: {
            input: {
                type: "structure",
                members: {
                    OrganizationConformancePackNames: {
                        shape: "S6r"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConformancePackStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OrganizationConformancePackName", "Status" ],
                            members: {
                                OrganizationConformancePackName: {},
                                Status: {},
                                ErrorCode: {},
                                ErrorMessage: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOrganizationConformancePacks: {
            input: {
                type: "structure",
                members: {
                    OrganizationConformancePackNames: {
                        shape: "S6r"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConformancePacks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OrganizationConformancePackName", "OrganizationConformancePackArn", "LastUpdateTime" ],
                            members: {
                                OrganizationConformancePackName: {},
                                OrganizationConformancePackArn: {},
                                DeliveryS3Bucket: {},
                                DeliveryS3KeyPrefix: {},
                                ConformancePackInputParameters: {
                                    shape: "S5i"
                                },
                                ExcludedAccounts: {
                                    shape: "S6l"
                                },
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePendingAggregationRequests: {
            input: {
                type: "structure",
                members: {
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PendingAggregationRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RequesterAccountId: {},
                                RequesterAwsRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRemediationConfigurations: {
            input: {
                type: "structure",
                required: [ "ConfigRuleNames" ],
                members: {
                    ConfigRuleNames: {
                        shape: "S2n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RemediationConfigurations: {
                        shape: "S77"
                    }
                }
            }
        },
        DescribeRemediationExceptions: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName" ],
                members: {
                    ConfigRuleName: {},
                    ResourceKeys: {
                        shape: "S1h"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RemediationExceptions: {
                        shape: "S7n"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRemediationExecutionStatus: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName" ],
                members: {
                    ConfigRuleName: {},
                    ResourceKeys: {
                        shape: "Ss"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RemediationExecutionStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceKey: {
                                    shape: "St"
                                },
                                State: {},
                                StepDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            State: {},
                                            ErrorMessage: {},
                                            StartTime: {
                                                type: "timestamp"
                                            },
                                            StopTime: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                },
                                InvocationTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRetentionConfigurations: {
            input: {
                type: "structure",
                members: {
                    RetentionConfigurationNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RetentionConfigurations: {
                        type: "list",
                        member: {
                            shape: "S81"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetAggregateComplianceDetailsByConfigRule: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName", "ConfigRuleName", "AccountId", "AwsRegion" ],
                members: {
                    ConfigurationAggregatorName: {},
                    ConfigRuleName: {},
                    AccountId: {},
                    AwsRegion: {},
                    ComplianceType: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregateEvaluationResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EvaluationResultIdentifier: {
                                    shape: "S87"
                                },
                                ComplianceType: {},
                                ResultRecordedTime: {
                                    type: "timestamp"
                                },
                                ConfigRuleInvokedTime: {
                                    type: "timestamp"
                                },
                                Annotation: {},
                                AccountId: {},
                                AwsRegion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetAggregateConfigRuleComplianceSummary: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            AccountId: {},
                            AwsRegion: {}
                        }
                    },
                    GroupByKey: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupByKey: {},
                    AggregateComplianceCounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupName: {},
                                ComplianceSummary: {
                                    shape: "S8g"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetAggregateConformancePackComplianceSummary: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            AccountId: {},
                            AwsRegion: {}
                        }
                    },
                    GroupByKey: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregateConformancePackComplianceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComplianceSummary: {
                                    type: "structure",
                                    members: {
                                        CompliantConformancePackCount: {
                                            type: "integer"
                                        },
                                        NonCompliantConformancePackCount: {
                                            type: "integer"
                                        }
                                    }
                                },
                                GroupName: {}
                            }
                        }
                    },
                    GroupByKey: {},
                    NextToken: {}
                }
            }
        },
        GetAggregateDiscoveredResourceCounts: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            ResourceType: {},
                            AccountId: {},
                            Region: {}
                        }
                    },
                    GroupByKey: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TotalDiscoveredResources" ],
                members: {
                    TotalDiscoveredResources: {
                        type: "long"
                    },
                    GroupByKey: {},
                    GroupedResourceCounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GroupName", "ResourceCount" ],
                            members: {
                                GroupName: {},
                                ResourceCount: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetAggregateResourceConfig: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName", "ResourceIdentifier" ],
                members: {
                    ConfigurationAggregatorName: {},
                    ResourceIdentifier: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationItem: {
                        shape: "S8x"
                    }
                }
            }
        },
        GetComplianceDetailsByConfigRule: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName" ],
                members: {
                    ConfigRuleName: {},
                    ComplianceTypes: {
                        shape: "S2o"
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EvaluationResults: {
                        shape: "S99"
                    },
                    NextToken: {}
                }
            }
        },
        GetComplianceDetailsByResource: {
            input: {
                type: "structure",
                members: {
                    ResourceType: {},
                    ResourceId: {},
                    ComplianceTypes: {
                        shape: "S2o"
                    },
                    NextToken: {},
                    ResourceEvaluationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EvaluationResults: {
                        shape: "S99"
                    },
                    NextToken: {}
                }
            }
        },
        GetComplianceSummaryByConfigRule: {
            output: {
                type: "structure",
                members: {
                    ComplianceSummary: {
                        shape: "S8g"
                    }
                }
            }
        },
        GetComplianceSummaryByResourceType: {
            input: {
                type: "structure",
                members: {
                    ResourceTypes: {
                        shape: "S9f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComplianceSummariesByResourceType: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {},
                                ComplianceSummary: {
                                    shape: "S8g"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConformancePackComplianceDetails: {
            input: {
                type: "structure",
                required: [ "ConformancePackName" ],
                members: {
                    ConformancePackName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            ConfigRuleNames: {
                                shape: "S4v"
                            },
                            ComplianceType: {},
                            ResourceType: {},
                            ResourceIds: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConformancePackName" ],
                members: {
                    ConformancePackName: {},
                    ConformancePackRuleEvaluationResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ComplianceType", "EvaluationResultIdentifier", "ConfigRuleInvokedTime", "ResultRecordedTime" ],
                            members: {
                                ComplianceType: {},
                                EvaluationResultIdentifier: {
                                    shape: "S87"
                                },
                                ConfigRuleInvokedTime: {
                                    type: "timestamp"
                                },
                                ResultRecordedTime: {
                                    type: "timestamp"
                                },
                                Annotation: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetConformancePackComplianceSummary: {
            input: {
                type: "structure",
                required: [ "ConformancePackNames" ],
                members: {
                    ConformancePackNames: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConformancePackComplianceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ConformancePackName", "ConformancePackComplianceStatus" ],
                            members: {
                                ConformancePackName: {},
                                ConformancePackComplianceStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCustomRulePolicy: {
            input: {
                type: "structure",
                members: {
                    ConfigRuleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyText: {}
                }
            }
        },
        GetDiscoveredResourceCounts: {
            input: {
                type: "structure",
                members: {
                    resourceTypes: {
                        shape: "S9f"
                    },
                    limit: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    totalDiscoveredResources: {
                        type: "long"
                    },
                    resourceCounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                count: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetOrganizationConfigRuleDetailedStatus: {
            input: {
                type: "structure",
                required: [ "OrganizationConfigRuleName" ],
                members: {
                    OrganizationConfigRuleName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            AccountId: {},
                            MemberAccountRuleStatus: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConfigRuleDetailedStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "ConfigRuleName", "MemberAccountRuleStatus" ],
                            members: {
                                AccountId: {},
                                ConfigRuleName: {},
                                MemberAccountRuleStatus: {},
                                ErrorCode: {},
                                ErrorMessage: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetOrganizationConformancePackDetailedStatus: {
            input: {
                type: "structure",
                required: [ "OrganizationConformancePackName" ],
                members: {
                    OrganizationConformancePackName: {},
                    Filters: {
                        type: "structure",
                        members: {
                            AccountId: {},
                            Status: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConformancePackDetailedStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "ConformancePackName", "Status" ],
                            members: {
                                AccountId: {},
                                ConformancePackName: {},
                                Status: {},
                                ErrorCode: {},
                                ErrorMessage: {},
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetOrganizationCustomRulePolicy: {
            input: {
                type: "structure",
                required: [ "OrganizationConfigRuleName" ],
                members: {
                    OrganizationConfigRuleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyText: {}
                }
            }
        },
        GetResourceConfigHistory: {
            input: {
                type: "structure",
                required: [ "resourceType", "resourceId" ],
                members: {
                    resourceType: {},
                    resourceId: {},
                    laterTime: {
                        type: "timestamp"
                    },
                    earlierTime: {
                        type: "timestamp"
                    },
                    chronologicalOrder: {},
                    limit: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    configurationItems: {
                        type: "list",
                        member: {
                            shape: "S8x"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetResourceEvaluationSummary: {
            input: {
                type: "structure",
                required: [ "ResourceEvaluationId" ],
                members: {
                    ResourceEvaluationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceEvaluationId: {},
                    EvaluationMode: {},
                    EvaluationStatus: {
                        type: "structure",
                        required: [ "Status" ],
                        members: {
                            Status: {},
                            FailureReason: {}
                        }
                    },
                    EvaluationStartTimestamp: {
                        type: "timestamp"
                    },
                    Compliance: {},
                    EvaluationContext: {
                        shape: "Saq"
                    },
                    ResourceDetails: {
                        shape: "Sas"
                    }
                }
            }
        },
        GetStoredQuery: {
            input: {
                type: "structure",
                required: [ "QueryName" ],
                members: {
                    QueryName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StoredQuery: {
                        shape: "Sax"
                    }
                }
            }
        },
        ListAggregateDiscoveredResources: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName", "ResourceType" ],
                members: {
                    ConfigurationAggregatorName: {},
                    ResourceType: {},
                    Filters: {
                        type: "structure",
                        members: {
                            AccountId: {},
                            ResourceId: {},
                            ResourceName: {},
                            Region: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceIdentifiers: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConformancePackComplianceScores: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "structure",
                        required: [ "ConformancePackNames" ],
                        members: {
                            ConformancePackNames: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    SortOrder: {},
                    SortBy: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ConformancePackComplianceScores" ],
                members: {
                    NextToken: {},
                    ConformancePackComplianceScores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Score: {},
                                ConformancePackName: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListDiscoveredResources: {
            input: {
                type: "structure",
                required: [ "resourceType" ],
                members: {
                    resourceType: {},
                    resourceIds: {
                        type: "list",
                        member: {}
                    },
                    resourceName: {},
                    limit: {
                        type: "integer"
                    },
                    includeDeletedResources: {
                        type: "boolean"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceType: {},
                                resourceId: {},
                                resourceName: {},
                                resourceDeletionTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResourceEvaluations: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "structure",
                        members: {
                            EvaluationMode: {},
                            TimeWindow: {
                                type: "structure",
                                members: {
                                    StartTime: {
                                        type: "timestamp"
                                    },
                                    EndTime: {
                                        type: "timestamp"
                                    }
                                }
                            },
                            EvaluationContextIdentifier: {}
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceEvaluations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceEvaluationId: {},
                                EvaluationMode: {},
                                EvaluationStartTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStoredQueries: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StoredQueryMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "QueryId", "QueryArn", "QueryName" ],
                            members: {
                                QueryId: {},
                                QueryArn: {},
                                QueryName: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sc0"
                    },
                    NextToken: {}
                }
            }
        },
        PutAggregationAuthorization: {
            input: {
                type: "structure",
                required: [ "AuthorizedAccountId", "AuthorizedAwsRegion" ],
                members: {
                    AuthorizedAccountId: {},
                    AuthorizedAwsRegion: {},
                    Tags: {
                        shape: "Sc5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AggregationAuthorization: {
                        shape: "S2k"
                    }
                }
            }
        },
        PutConfigRule: {
            input: {
                type: "structure",
                required: [ "ConfigRule" ],
                members: {
                    ConfigRule: {
                        shape: "S37"
                    },
                    Tags: {
                        shape: "Sc5"
                    }
                }
            }
        },
        PutConfigurationAggregator: {
            input: {
                type: "structure",
                required: [ "ConfigurationAggregatorName" ],
                members: {
                    ConfigurationAggregatorName: {},
                    AccountAggregationSources: {
                        shape: "S42"
                    },
                    OrganizationAggregationSource: {
                        shape: "S46"
                    },
                    Tags: {
                        shape: "Sc5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationAggregator: {
                        shape: "S40"
                    }
                }
            }
        },
        PutConfigurationRecorder: {
            input: {
                type: "structure",
                required: [ "ConfigurationRecorder" ],
                members: {
                    ConfigurationRecorder: {
                        shape: "S4g"
                    }
                }
            }
        },
        PutConformancePack: {
            input: {
                type: "structure",
                required: [ "ConformancePackName" ],
                members: {
                    ConformancePackName: {},
                    TemplateS3Uri: {},
                    TemplateBody: {},
                    DeliveryS3Bucket: {},
                    DeliveryS3KeyPrefix: {},
                    ConformancePackInputParameters: {
                        shape: "S5i"
                    },
                    TemplateSSMDocumentDetails: {
                        shape: "S5m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConformancePackArn: {}
                }
            }
        },
        PutDeliveryChannel: {
            input: {
                type: "structure",
                required: [ "DeliveryChannel" ],
                members: {
                    DeliveryChannel: {
                        shape: "S60"
                    }
                }
            }
        },
        PutEvaluations: {
            input: {
                type: "structure",
                required: [ "ResultToken" ],
                members: {
                    Evaluations: {
                        shape: "Sch"
                    },
                    ResultToken: {},
                    TestMode: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedEvaluations: {
                        shape: "Sch"
                    }
                }
            }
        },
        PutExternalEvaluation: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName", "ExternalEvaluation" ],
                members: {
                    ConfigRuleName: {},
                    ExternalEvaluation: {
                        type: "structure",
                        required: [ "ComplianceResourceType", "ComplianceResourceId", "ComplianceType", "OrderingTimestamp" ],
                        members: {
                            ComplianceResourceType: {},
                            ComplianceResourceId: {},
                            ComplianceType: {},
                            Annotation: {},
                            OrderingTimestamp: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutOrganizationConfigRule: {
            input: {
                type: "structure",
                required: [ "OrganizationConfigRuleName" ],
                members: {
                    OrganizationConfigRuleName: {},
                    OrganizationManagedRuleMetadata: {
                        shape: "S6d"
                    },
                    OrganizationCustomRuleMetadata: {
                        shape: "S6i"
                    },
                    ExcludedAccounts: {
                        shape: "S6l"
                    },
                    OrganizationCustomPolicyRuleMetadata: {
                        type: "structure",
                        required: [ "PolicyRuntime", "PolicyText" ],
                        members: {
                            Description: {},
                            OrganizationConfigRuleTriggerTypes: {
                                shape: "S6n"
                            },
                            InputParameters: {},
                            MaximumExecutionFrequency: {},
                            ResourceTypesScope: {
                                shape: "S6g"
                            },
                            ResourceIdScope: {},
                            TagKeyScope: {},
                            TagValueScope: {},
                            PolicyRuntime: {},
                            PolicyText: {},
                            DebugLogDeliveryAccounts: {
                                shape: "S6p"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConfigRuleArn: {}
                }
            }
        },
        PutOrganizationConformancePack: {
            input: {
                type: "structure",
                required: [ "OrganizationConformancePackName" ],
                members: {
                    OrganizationConformancePackName: {},
                    TemplateS3Uri: {},
                    TemplateBody: {},
                    DeliveryS3Bucket: {},
                    DeliveryS3KeyPrefix: {},
                    ConformancePackInputParameters: {
                        shape: "S5i"
                    },
                    ExcludedAccounts: {
                        shape: "S6l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationConformancePackArn: {}
                }
            }
        },
        PutRemediationConfigurations: {
            input: {
                type: "structure",
                required: [ "RemediationConfigurations" ],
                members: {
                    RemediationConfigurations: {
                        shape: "S77"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedBatches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FailureMessage: {},
                                FailedItems: {
                                    shape: "S77"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutRemediationExceptions: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName", "ResourceKeys" ],
                members: {
                    ConfigRuleName: {},
                    ResourceKeys: {
                        shape: "S1h"
                    },
                    Message: {},
                    ExpirationTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedBatches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FailureMessage: {},
                                FailedItems: {
                                    shape: "S7n"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutResourceConfig: {
            input: {
                type: "structure",
                required: [ "ResourceType", "SchemaVersionId", "ResourceId", "Configuration" ],
                members: {
                    ResourceType: {},
                    SchemaVersionId: {},
                    ResourceId: {},
                    ResourceName: {},
                    Configuration: {},
                    Tags: {
                        shape: "S8z"
                    }
                }
            }
        },
        PutRetentionConfiguration: {
            input: {
                type: "structure",
                required: [ "RetentionPeriodInDays" ],
                members: {
                    RetentionPeriodInDays: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RetentionConfiguration: {
                        shape: "S81"
                    }
                }
            }
        },
        PutStoredQuery: {
            input: {
                type: "structure",
                required: [ "StoredQuery" ],
                members: {
                    StoredQuery: {
                        shape: "Sax"
                    },
                    Tags: {
                        shape: "Sc5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryArn: {}
                }
            }
        },
        SelectAggregateResourceConfig: {
            input: {
                type: "structure",
                required: [ "Expression", "ConfigurationAggregatorName" ],
                members: {
                    Expression: {},
                    ConfigurationAggregatorName: {},
                    Limit: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        shape: "Sda"
                    },
                    QueryInfo: {
                        shape: "Sdb"
                    },
                    NextToken: {}
                }
            }
        },
        SelectResourceConfig: {
            input: {
                type: "structure",
                required: [ "Expression" ],
                members: {
                    Expression: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        shape: "Sda"
                    },
                    QueryInfo: {
                        shape: "Sdb"
                    },
                    NextToken: {}
                }
            }
        },
        StartConfigRulesEvaluation: {
            input: {
                type: "structure",
                members: {
                    ConfigRuleNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartConfigurationRecorder: {
            input: {
                type: "structure",
                required: [ "ConfigurationRecorderName" ],
                members: {
                    ConfigurationRecorderName: {}
                }
            }
        },
        StartRemediationExecution: {
            input: {
                type: "structure",
                required: [ "ConfigRuleName", "ResourceKeys" ],
                members: {
                    ConfigRuleName: {},
                    ResourceKeys: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailureMessage: {},
                    FailedItems: {
                        shape: "Ss"
                    }
                }
            }
        },
        StartResourceEvaluation: {
            input: {
                type: "structure",
                required: [ "ResourceDetails", "EvaluationMode" ],
                members: {
                    ResourceDetails: {
                        shape: "Sas"
                    },
                    EvaluationContext: {
                        shape: "Saq"
                    },
                    EvaluationMode: {},
                    EvaluationTimeout: {
                        type: "integer"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceEvaluationId: {}
                }
            }
        },
        StopConfigurationRecorder: {
            input: {
                type: "structure",
                required: [ "ConfigurationRecorderName" ],
                members: {
                    ConfigurationRecorderName: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sc0"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "SourceAccountId", "SourceRegion", "ResourceId", "ResourceType" ],
            members: {
                SourceAccountId: {},
                SourceRegion: {},
                ResourceId: {},
                ResourceType: {},
                ResourceName: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    version: {},
                    accountId: {},
                    configurationItemCaptureTime: {
                        type: "timestamp"
                    },
                    configurationItemStatus: {},
                    configurationStateId: {},
                    arn: {},
                    resourceType: {},
                    resourceId: {},
                    resourceName: {},
                    awsRegion: {},
                    availabilityZone: {},
                    resourceCreationTime: {
                        type: "timestamp"
                    },
                    configuration: {},
                    supplementaryConfiguration: {
                        shape: "Sl"
                    },
                    recordingFrequency: {},
                    configurationItemDeliveryTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        Sl: {
            type: "map",
            key: {},
            value: {}
        },
        Ss: {
            type: "list",
            member: {
                shape: "St"
            }
        },
        St: {
            type: "structure",
            required: [ "resourceType", "resourceId" ],
            members: {
                resourceType: {},
                resourceId: {}
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    ResourceId: {}
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                ComplianceType: {},
                ComplianceContributorCount: {
                    shape: "S26"
                }
            }
        },
        S26: {
            type: "structure",
            members: {
                CappedCount: {
                    type: "integer"
                },
                CapExceeded: {
                    type: "boolean"
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                AggregationAuthorizationArn: {},
                AuthorizedAccountId: {},
                AuthorizedAwsRegion: {},
                CreationTime: {
                    type: "timestamp"
                }
            }
        },
        S2n: {
            type: "list",
            member: {}
        },
        S2o: {
            type: "list",
            member: {}
        },
        S37: {
            type: "structure",
            required: [ "Source" ],
            members: {
                ConfigRuleName: {},
                ConfigRuleArn: {},
                ConfigRuleId: {},
                Description: {},
                Scope: {
                    type: "structure",
                    members: {
                        ComplianceResourceTypes: {
                            type: "list",
                            member: {}
                        },
                        TagKey: {},
                        TagValue: {},
                        ComplianceResourceId: {}
                    }
                },
                Source: {
                    type: "structure",
                    required: [ "Owner" ],
                    members: {
                        Owner: {},
                        SourceIdentifier: {},
                        SourceDetails: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    EventSource: {},
                                    MessageType: {},
                                    MaximumExecutionFrequency: {}
                                }
                            }
                        },
                        CustomPolicyDetails: {
                            type: "structure",
                            required: [ "PolicyRuntime", "PolicyText" ],
                            members: {
                                PolicyRuntime: {},
                                PolicyText: {},
                                EnableDebugLogDelivery: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                InputParameters: {},
                MaximumExecutionFrequency: {},
                ConfigRuleState: {},
                CreatedBy: {},
                EvaluationModes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Mode: {}
                        }
                    }
                }
            }
        },
        S40: {
            type: "structure",
            members: {
                ConfigurationAggregatorName: {},
                ConfigurationAggregatorArn: {},
                AccountAggregationSources: {
                    shape: "S42"
                },
                OrganizationAggregationSource: {
                    shape: "S46"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                CreatedBy: {}
            }
        },
        S42: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        type: "list",
                        member: {}
                    },
                    AllAwsRegions: {
                        type: "boolean"
                    },
                    AwsRegions: {
                        shape: "S45"
                    }
                }
            }
        },
        S45: {
            type: "list",
            member: {}
        },
        S46: {
            type: "structure",
            required: [ "RoleArn" ],
            members: {
                RoleArn: {},
                AwsRegions: {
                    shape: "S45"
                },
                AllAwsRegions: {
                    type: "boolean"
                }
            }
        },
        S48: {
            type: "list",
            member: {}
        },
        S4g: {
            type: "structure",
            members: {
                name: {},
                roleARN: {},
                recordingGroup: {
                    type: "structure",
                    members: {
                        allSupported: {
                            type: "boolean"
                        },
                        includeGlobalResourceTypes: {
                            type: "boolean"
                        },
                        resourceTypes: {
                            shape: "S4k"
                        },
                        exclusionByResourceTypes: {
                            type: "structure",
                            members: {
                                resourceTypes: {
                                    shape: "S4k"
                                }
                            }
                        },
                        recordingStrategy: {
                            type: "structure",
                            members: {
                                useOnly: {}
                            }
                        }
                    }
                },
                recordingMode: {
                    type: "structure",
                    required: [ "recordingFrequency" ],
                    members: {
                        recordingFrequency: {},
                        recordingModeOverrides: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "resourceTypes", "recordingFrequency" ],
                                members: {
                                    description: {},
                                    resourceTypes: {
                                        type: "list",
                                        member: {}
                                    },
                                    recordingFrequency: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S4k: {
            type: "list",
            member: {}
        },
        S4v: {
            type: "list",
            member: {}
        },
        S52: {
            type: "list",
            member: {}
        },
        S5i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ParameterName", "ParameterValue" ],
                members: {
                    ParameterName: {},
                    ParameterValue: {}
                }
            }
        },
        S5m: {
            type: "structure",
            required: [ "DocumentName" ],
            members: {
                DocumentName: {},
                DocumentVersion: {}
            }
        },
        S5q: {
            type: "list",
            member: {}
        },
        S5u: {
            type: "structure",
            members: {
                lastStatus: {},
                lastErrorCode: {},
                lastErrorMessage: {},
                lastAttemptTime: {
                    type: "timestamp"
                },
                lastSuccessfulTime: {
                    type: "timestamp"
                },
                nextDeliveryTime: {
                    type: "timestamp"
                }
            }
        },
        S60: {
            type: "structure",
            members: {
                name: {},
                s3BucketName: {},
                s3KeyPrefix: {},
                s3KmsKeyArn: {},
                snsTopicARN: {},
                configSnapshotDeliveryProperties: {
                    type: "structure",
                    members: {
                        deliveryFrequency: {}
                    }
                }
            }
        },
        S63: {
            type: "list",
            member: {}
        },
        S6d: {
            type: "structure",
            required: [ "RuleIdentifier" ],
            members: {
                Description: {},
                RuleIdentifier: {},
                InputParameters: {},
                MaximumExecutionFrequency: {},
                ResourceTypesScope: {
                    shape: "S6g"
                },
                ResourceIdScope: {},
                TagKeyScope: {},
                TagValueScope: {}
            }
        },
        S6g: {
            type: "list",
            member: {}
        },
        S6i: {
            type: "structure",
            required: [ "LambdaFunctionArn", "OrganizationConfigRuleTriggerTypes" ],
            members: {
                Description: {},
                LambdaFunctionArn: {},
                OrganizationConfigRuleTriggerTypes: {
                    type: "list",
                    member: {}
                },
                InputParameters: {},
                MaximumExecutionFrequency: {},
                ResourceTypesScope: {
                    shape: "S6g"
                },
                ResourceIdScope: {},
                TagKeyScope: {},
                TagValueScope: {}
            }
        },
        S6l: {
            type: "list",
            member: {}
        },
        S6n: {
            type: "list",
            member: {}
        },
        S6p: {
            type: "list",
            member: {}
        },
        S6r: {
            type: "list",
            member: {}
        },
        S77: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ConfigRuleName", "TargetType", "TargetId" ],
                members: {
                    ConfigRuleName: {},
                    TargetType: {},
                    TargetId: {},
                    TargetVersion: {},
                    Parameters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                ResourceValue: {
                                    type: "structure",
                                    required: [ "Value" ],
                                    members: {
                                        Value: {}
                                    }
                                },
                                StaticValue: {
                                    type: "structure",
                                    required: [ "Values" ],
                                    members: {
                                        Values: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ResourceType: {},
                    Automatic: {
                        type: "boolean"
                    },
                    ExecutionControls: {
                        type: "structure",
                        members: {
                            SsmControls: {
                                type: "structure",
                                members: {
                                    ConcurrentExecutionRatePercentage: {
                                        type: "integer"
                                    },
                                    ErrorPercentage: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    MaximumAutomaticAttempts: {
                        type: "integer"
                    },
                    RetryAttemptSeconds: {
                        type: "long"
                    },
                    Arn: {},
                    CreatedByService: {}
                }
            }
        },
        S7n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ConfigRuleName", "ResourceType", "ResourceId" ],
                members: {
                    ConfigRuleName: {},
                    ResourceType: {},
                    ResourceId: {},
                    Message: {},
                    ExpirationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S81: {
            type: "structure",
            required: [ "Name", "RetentionPeriodInDays" ],
            members: {
                Name: {},
                RetentionPeriodInDays: {
                    type: "integer"
                }
            }
        },
        S87: {
            type: "structure",
            members: {
                EvaluationResultQualifier: {
                    type: "structure",
                    members: {
                        ConfigRuleName: {},
                        ResourceType: {},
                        ResourceId: {},
                        EvaluationMode: {}
                    }
                },
                OrderingTimestamp: {
                    type: "timestamp"
                },
                ResourceEvaluationId: {}
            }
        },
        S8g: {
            type: "structure",
            members: {
                CompliantResourceCount: {
                    shape: "S26"
                },
                NonCompliantResourceCount: {
                    shape: "S26"
                },
                ComplianceSummaryTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S8x: {
            type: "structure",
            members: {
                version: {},
                accountId: {},
                configurationItemCaptureTime: {
                    type: "timestamp"
                },
                configurationItemStatus: {},
                configurationStateId: {},
                configurationItemMD5Hash: {},
                arn: {},
                resourceType: {},
                resourceId: {},
                resourceName: {},
                awsRegion: {},
                availabilityZone: {},
                resourceCreationTime: {
                    type: "timestamp"
                },
                tags: {
                    shape: "S8z"
                },
                relatedEvents: {
                    type: "list",
                    member: {}
                },
                relationships: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            resourceType: {},
                            resourceId: {},
                            resourceName: {},
                            relationshipName: {}
                        }
                    }
                },
                configuration: {},
                supplementaryConfiguration: {
                    shape: "Sl"
                },
                recordingFrequency: {},
                configurationItemDeliveryTime: {
                    type: "timestamp"
                }
            }
        },
        S8z: {
            type: "map",
            key: {},
            value: {}
        },
        S99: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EvaluationResultIdentifier: {
                        shape: "S87"
                    },
                    ComplianceType: {},
                    ResultRecordedTime: {
                        type: "timestamp"
                    },
                    ConfigRuleInvokedTime: {
                        type: "timestamp"
                    },
                    Annotation: {},
                    ResultToken: {}
                }
            }
        },
        S9f: {
            type: "list",
            member: {}
        },
        Saq: {
            type: "structure",
            members: {
                EvaluationContextIdentifier: {}
            }
        },
        Sas: {
            type: "structure",
            required: [ "ResourceId", "ResourceType", "ResourceConfiguration" ],
            members: {
                ResourceId: {},
                ResourceType: {},
                ResourceConfiguration: {},
                ResourceConfigurationSchemaType: {}
            }
        },
        Sax: {
            type: "structure",
            required: [ "QueryName" ],
            members: {
                QueryId: {},
                QueryArn: {},
                QueryName: {},
                Description: {},
                Expression: {}
            }
        },
        Sc0: {
            type: "list",
            member: {
                shape: "Sc1"
            }
        },
        Sc1: {
            type: "structure",
            members: {
                Key: {},
                Value: {}
            }
        },
        Sc5: {
            type: "list",
            member: {
                shape: "Sc1"
            }
        },
        Sch: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ComplianceResourceType", "ComplianceResourceId", "ComplianceType", "OrderingTimestamp" ],
                members: {
                    ComplianceResourceType: {},
                    ComplianceResourceId: {},
                    ComplianceType: {},
                    Annotation: {},
                    OrderingTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        Sda: {
            type: "list",
            member: {}
        },
        Sdb: {
            type: "structure",
            members: {
                SelectFields: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeAggregateComplianceByConfigRules: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        DescribeAggregateComplianceByConformancePacks: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "AggregateComplianceByConformancePacks"
        },
        DescribeAggregationAuthorizations: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "AggregationAuthorizations"
        },
        DescribeComplianceByConfigRule: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "ComplianceByConfigRules"
        },
        DescribeComplianceByResource: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ComplianceByResources"
        },
        DescribeConfigRuleEvaluationStatus: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ConfigRulesEvaluationStatus"
        },
        DescribeConfigRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "ConfigRules"
        },
        DescribeConfigurationAggregatorSourcesStatus: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "AggregatedSourceStatusList"
        },
        DescribeConfigurationAggregators: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ConfigurationAggregators"
        },
        DescribeConformancePackCompliance: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        DescribeConformancePackStatus: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ConformancePackStatusDetails"
        },
        DescribeConformancePacks: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ConformancePackDetails"
        },
        DescribeOrganizationConfigRuleStatuses: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "OrganizationConfigRuleStatuses"
        },
        DescribeOrganizationConfigRules: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "OrganizationConfigRules"
        },
        DescribeOrganizationConformancePackStatuses: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "OrganizationConformancePackStatuses"
        },
        DescribeOrganizationConformancePacks: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "OrganizationConformancePacks"
        },
        DescribePendingAggregationRequests: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "PendingAggregationRequests"
        },
        DescribeRemediationExceptions: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        DescribeRemediationExecutionStatus: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "RemediationExecutionStatuses"
        },
        DescribeRetentionConfigurations: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "RetentionConfigurations"
        },
        GetAggregateComplianceDetailsByConfigRule: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "AggregateEvaluationResults"
        },
        GetAggregateConfigRuleComplianceSummary: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        GetAggregateConformancePackComplianceSummary: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        GetAggregateDiscoveredResourceCounts: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        GetComplianceDetailsByConfigRule: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "EvaluationResults"
        },
        GetComplianceDetailsByResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "EvaluationResults"
        },
        GetConformancePackComplianceDetails: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        GetConformancePackComplianceSummary: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ConformancePackComplianceSummaryList"
        },
        GetDiscoveredResourceCounts: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken"
        },
        GetOrganizationConfigRuleDetailedStatus: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "OrganizationConfigRuleDetailedStatus"
        },
        GetOrganizationConformancePackDetailedStatus: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "OrganizationConformancePackDetailedStatuses"
        },
        GetResourceConfigHistory: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "configurationItems"
        },
        ListAggregateDiscoveredResources: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ResourceIdentifiers"
        },
        ListConformancePackComplianceScores: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        ListDiscoveredResources: {
            input_token: "nextToken",
            limit_key: "limit",
            output_token: "nextToken",
            result_key: "resourceIdentifiers"
        },
        ListResourceEvaluations: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ResourceEvaluations"
        },
        ListStoredQueries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Tags"
        },
        SelectAggregateResourceConfig: {
            input_token: "NextToken",
            limit_key: "Limit",
            non_aggregate_keys: [ "QueryInfo" ],
            output_token: "NextToken",
            result_key: "Results"
        },
        SelectResourceConfig: {
            input_token: "NextToken",
            limit_key: "Limit",
            non_aggregate_keys: [ "QueryInfo" ],
            output_token: "NextToken",
            result_key: "Results"
        }
    }
};

AWS.apiLoader.services["cur"] = {};

AWS.CUR = AWS.Service.defineService("cur", [ "2017-01-06" ]);

AWS.apiLoader.services["cur"]["2017-01-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-01-06",
        endpointPrefix: "cur",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Cost and Usage Report Service",
        serviceId: "Cost and Usage Report Service",
        signatureVersion: "v4",
        signingName: "cur",
        targetPrefix: "AWSOrigamiServiceGatewayService",
        uid: "cur-2017-01-06"
    },
    operations: {
        DeleteReportDefinition: {
            input: {
                type: "structure",
                required: [ "ReportName" ],
                members: {
                    ReportName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResponseMessage: {}
                }
            }
        },
        DescribeReportDefinitions: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReportDefinitions: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ReportName" ],
                members: {
                    ReportName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "St"
                    }
                }
            }
        },
        ModifyReportDefinition: {
            input: {
                type: "structure",
                required: [ "ReportName", "ReportDefinition" ],
                members: {
                    ReportName: {},
                    ReportDefinition: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutReportDefinition: {
            input: {
                type: "structure",
                required: [ "ReportDefinition" ],
                members: {
                    ReportDefinition: {
                        shape: "Sa"
                    },
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ReportName", "Tags" ],
                members: {
                    ReportName: {},
                    Tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ReportName", "TagKeys" ],
                members: {
                    ReportName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sa: {
            type: "structure",
            required: [ "ReportName", "TimeUnit", "Format", "Compression", "AdditionalSchemaElements", "S3Bucket", "S3Prefix", "S3Region" ],
            members: {
                ReportName: {},
                TimeUnit: {},
                Format: {},
                Compression: {},
                AdditionalSchemaElements: {
                    type: "list",
                    member: {}
                },
                S3Bucket: {},
                S3Prefix: {},
                S3Region: {},
                AdditionalArtifacts: {
                    type: "list",
                    member: {}
                },
                RefreshClosedReports: {
                    type: "boolean"
                },
                ReportVersioning: {},
                BillingViewArn: {},
                ReportStatus: {
                    type: "structure",
                    members: {
                        lastDelivery: {},
                        lastStatus: {}
                    }
                }
            }
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        }
    },
    paginators: {
        DescribeReportDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["datapipeline"] = {};

AWS.DataPipeline = AWS.Service.defineService("datapipeline", [ "2012-10-29" ]);

AWS.apiLoader.services["datapipeline"]["2012-10-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-10-29",
        endpointPrefix: "datapipeline",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Data Pipeline",
        serviceId: "Data Pipeline",
        signatureVersion: "v4",
        targetPrefix: "DataPipeline",
        uid: "datapipeline-2012-10-29"
    },
    operations: {
        ActivatePipeline: {
            input: {
                type: "structure",
                required: [ "pipelineId" ],
                members: {
                    pipelineId: {},
                    parameterValues: {
                        shape: "S3"
                    },
                    startTimestamp: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddTags: {
            input: {
                type: "structure",
                required: [ "pipelineId", "tags" ],
                members: {
                    pipelineId: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePipeline: {
            input: {
                type: "structure",
                required: [ "name", "uniqueId" ],
                members: {
                    name: {},
                    uniqueId: {},
                    description: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "pipelineId" ],
                members: {
                    pipelineId: {}
                }
            }
        },
        DeactivatePipeline: {
            input: {
                type: "structure",
                required: [ "pipelineId" ],
                members: {
                    pipelineId: {},
                    cancelActive: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePipeline: {
            input: {
                type: "structure",
                required: [ "pipelineId" ],
                members: {
                    pipelineId: {}
                }
            }
        },
        DescribeObjects: {
            input: {
                type: "structure",
                required: [ "pipelineId", "objectIds" ],
                members: {
                    pipelineId: {},
                    objectIds: {
                        shape: "Sn"
                    },
                    evaluateExpressions: {
                        type: "boolean"
                    },
                    marker: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pipelineObjects" ],
                members: {
                    pipelineObjects: {
                        shape: "Sq"
                    },
                    marker: {},
                    hasMoreResults: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribePipelines: {
            input: {
                type: "structure",
                required: [ "pipelineIds" ],
                members: {
                    pipelineIds: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "pipelineDescriptionList" ],
                members: {
                    pipelineDescriptionList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "pipelineId", "name", "fields" ],
                            members: {
                                pipelineId: {},
                                name: {},
                                fields: {
                                    shape: "Ss"
                                },
                                description: {},
                                tags: {
                                    shape: "Sa"
                                }
                            }
                        }
                    }
                }
            }
        },
        EvaluateExpression: {
            input: {
                type: "structure",
                required: [ "pipelineId", "objectId", "expression" ],
                members: {
                    pipelineId: {},
                    objectId: {},
                    expression: {}
                }
            },
            output: {
                type: "structure",
                required: [ "evaluatedExpression" ],
                members: {
                    evaluatedExpression: {}
                }
            }
        },
        GetPipelineDefinition: {
            input: {
                type: "structure",
                required: [ "pipelineId" ],
                members: {
                    pipelineId: {},
                    version: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    pipelineObjects: {
                        shape: "Sq"
                    },
                    parameterObjects: {
                        shape: "S13"
                    },
                    parameterValues: {
                        shape: "S3"
                    }
                }
            }
        },
        ListPipelines: {
            input: {
                type: "structure",
                members: {
                    marker: {}
                }
            },
            output: {
                type: "structure",
                required: [ "pipelineIdList" ],
                members: {
                    pipelineIdList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {}
                            }
                        }
                    },
                    marker: {},
                    hasMoreResults: {
                        type: "boolean"
                    }
                }
            }
        },
        PollForTask: {
            input: {
                type: "structure",
                required: [ "workerGroup" ],
                members: {
                    workerGroup: {},
                    hostname: {},
                    instanceIdentity: {
                        type: "structure",
                        members: {
                            document: {},
                            signature: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskObject: {
                        type: "structure",
                        members: {
                            taskId: {},
                            pipelineId: {},
                            attemptId: {},
                            objects: {
                                type: "map",
                                key: {},
                                value: {
                                    shape: "Sr"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutPipelineDefinition: {
            input: {
                type: "structure",
                required: [ "pipelineId", "pipelineObjects" ],
                members: {
                    pipelineId: {},
                    pipelineObjects: {
                        shape: "Sq"
                    },
                    parameterObjects: {
                        shape: "S13"
                    },
                    parameterValues: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errored" ],
                members: {
                    validationErrors: {
                        shape: "S1l"
                    },
                    validationWarnings: {
                        shape: "S1p"
                    },
                    errored: {
                        type: "boolean"
                    }
                }
            }
        },
        QueryObjects: {
            input: {
                type: "structure",
                required: [ "pipelineId", "sphere" ],
                members: {
                    pipelineId: {},
                    query: {
                        type: "structure",
                        members: {
                            selectors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        fieldName: {},
                                        operator: {
                                            type: "structure",
                                            members: {
                                                type: {},
                                                values: {
                                                    shape: "S1x"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    sphere: {},
                    marker: {},
                    limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ids: {
                        shape: "Sn"
                    },
                    marker: {},
                    hasMoreResults: {
                        type: "boolean"
                    }
                }
            }
        },
        RemoveTags: {
            input: {
                type: "structure",
                required: [ "pipelineId", "tagKeys" ],
                members: {
                    pipelineId: {},
                    tagKeys: {
                        shape: "S1x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ReportTaskProgress: {
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {},
                    fields: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "canceled" ],
                members: {
                    canceled: {
                        type: "boolean"
                    }
                }
            }
        },
        ReportTaskRunnerHeartbeat: {
            input: {
                type: "structure",
                required: [ "taskrunnerId" ],
                members: {
                    taskrunnerId: {},
                    workerGroup: {},
                    hostname: {}
                }
            },
            output: {
                type: "structure",
                required: [ "terminate" ],
                members: {
                    terminate: {
                        type: "boolean"
                    }
                }
            }
        },
        SetStatus: {
            input: {
                type: "structure",
                required: [ "pipelineId", "objectIds", "status" ],
                members: {
                    pipelineId: {},
                    objectIds: {
                        shape: "Sn"
                    },
                    status: {}
                }
            }
        },
        SetTaskStatus: {
            input: {
                type: "structure",
                required: [ "taskId", "taskStatus" ],
                members: {
                    taskId: {},
                    taskStatus: {},
                    errorId: {},
                    errorMessage: {},
                    errorStackTrace: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ValidatePipelineDefinition: {
            input: {
                type: "structure",
                required: [ "pipelineId", "pipelineObjects" ],
                members: {
                    pipelineId: {},
                    pipelineObjects: {
                        shape: "Sq"
                    },
                    parameterObjects: {
                        shape: "S13"
                    },
                    parameterValues: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errored" ],
                members: {
                    validationErrors: {
                        shape: "S1l"
                    },
                    validationWarnings: {
                        shape: "S1p"
                    },
                    errored: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "stringValue" ],
                members: {
                    id: {},
                    stringValue: {}
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sq: {
            type: "list",
            member: {
                shape: "Sr"
            }
        },
        Sr: {
            type: "structure",
            required: [ "id", "name", "fields" ],
            members: {
                id: {},
                name: {},
                fields: {
                    shape: "Ss"
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key" ],
                members: {
                    key: {},
                    stringValue: {},
                    refValue: {}
                }
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                required: [ "id", "attributes" ],
                members: {
                    id: {},
                    attributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "stringValue" ],
                            members: {
                                key: {},
                                stringValue: {}
                            }
                        }
                    }
                }
            }
        },
        S1l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    errors: {
                        shape: "S1n"
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    warnings: {
                        shape: "S1n"
                    }
                }
            }
        },
        S1x: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeObjects: {
            input_token: "marker",
            more_results: "hasMoreResults",
            output_token: "marker",
            result_key: "pipelineObjects"
        },
        DescribePipelines: {
            result_key: "pipelineDescriptionList"
        },
        ListPipelines: {
            input_token: "marker",
            more_results: "hasMoreResults",
            output_token: "marker",
            result_key: "pipelineIdList"
        },
        QueryObjects: {
            input_token: "marker",
            limit_key: "limit",
            more_results: "hasMoreResults",
            output_token: "marker",
            result_key: "ids"
        }
    }
};

AWS.apiLoader.services["devicefarm"] = {};

AWS.DeviceFarm = AWS.Service.defineService("devicefarm", [ "2015-06-23" ]);

AWS.apiLoader.services["devicefarm"]["2015-06-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-06-23",
        endpointPrefix: "devicefarm",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Device Farm",
        serviceId: "Device Farm",
        signatureVersion: "v4",
        targetPrefix: "DeviceFarm_20150623",
        uid: "devicefarm-2015-06-23"
    },
    operations: {
        CreateDevicePool: {
            input: {
                type: "structure",
                required: [ "projectArn", "name", "rules" ],
                members: {
                    projectArn: {},
                    name: {},
                    description: {},
                    rules: {
                        shape: "S5"
                    },
                    maxDevices: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    devicePool: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateInstanceProfile: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    packageCleanup: {
                        type: "boolean"
                    },
                    excludeAppPackagesFromCleanup: {
                        shape: "Sg"
                    },
                    rebootAfterUse: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceProfile: {
                        shape: "Si"
                    }
                }
            }
        },
        CreateNetworkProfile: {
            input: {
                type: "structure",
                required: [ "projectArn", "name" ],
                members: {
                    projectArn: {},
                    name: {},
                    description: {},
                    type: {},
                    uplinkBandwidthBits: {
                        type: "long"
                    },
                    downlinkBandwidthBits: {
                        type: "long"
                    },
                    uplinkDelayMs: {
                        type: "long"
                    },
                    downlinkDelayMs: {
                        type: "long"
                    },
                    uplinkJitterMs: {
                        type: "long"
                    },
                    downlinkJitterMs: {
                        type: "long"
                    },
                    uplinkLossPercent: {
                        type: "integer"
                    },
                    downlinkLossPercent: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkProfile: {
                        shape: "So"
                    }
                }
            }
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    defaultJobTimeoutMinutes: {
                        type: "integer"
                    },
                    vpcConfig: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    project: {
                        shape: "Sy"
                    }
                }
            }
        },
        CreateRemoteAccessSession: {
            input: {
                type: "structure",
                required: [ "projectArn", "deviceArn" ],
                members: {
                    projectArn: {},
                    deviceArn: {},
                    instanceArn: {},
                    sshPublicKey: {},
                    remoteDebugEnabled: {
                        type: "boolean"
                    },
                    remoteRecordEnabled: {
                        type: "boolean"
                    },
                    remoteRecordAppArn: {},
                    name: {},
                    clientId: {},
                    configuration: {
                        type: "structure",
                        members: {
                            billingMethod: {},
                            vpceConfigurationArns: {
                                shape: "S15"
                            }
                        }
                    },
                    interactionMode: {},
                    skipAppResign: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    remoteAccessSession: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateTestGridProject: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    vpcConfig: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testGridProject: {
                        shape: "S1w"
                    }
                }
            }
        },
        CreateTestGridUrl: {
            input: {
                type: "structure",
                required: [ "projectArn", "expiresInSeconds" ],
                members: {
                    projectArn: {},
                    expiresInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    url: {
                        shape: "S21"
                    },
                    expires: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateUpload: {
            input: {
                type: "structure",
                required: [ "projectArn", "name", "type" ],
                members: {
                    projectArn: {},
                    name: {},
                    type: {},
                    contentType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    upload: {
                        shape: "S26"
                    }
                }
            }
        },
        CreateVPCEConfiguration: {
            input: {
                type: "structure",
                required: [ "vpceConfigurationName", "vpceServiceName", "serviceDnsName" ],
                members: {
                    vpceConfigurationName: {},
                    vpceServiceName: {},
                    serviceDnsName: {},
                    vpceConfigurationDescription: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vpceConfiguration: {
                        shape: "S2h"
                    }
                }
            }
        },
        DeleteDevicePool: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInstanceProfile: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNetworkProfile: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRemoteAccessSession: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRun: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTestGridProject: {
            input: {
                type: "structure",
                required: [ "projectArn" ],
                members: {
                    projectArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteUpload: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteVPCEConfiguration: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccountSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    accountSettings: {
                        type: "structure",
                        members: {
                            awsAccountNumber: {},
                            unmeteredDevices: {
                                shape: "S34"
                            },
                            unmeteredRemoteAccessDevices: {
                                shape: "S34"
                            },
                            maxJobTimeoutMinutes: {
                                type: "integer"
                            },
                            trialMinutes: {
                                type: "structure",
                                members: {
                                    total: {
                                        type: "double"
                                    },
                                    remaining: {
                                        type: "double"
                                    }
                                }
                            },
                            maxSlots: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "integer"
                                }
                            },
                            defaultJobTimeoutMinutes: {
                                type: "integer"
                            },
                            skipAppResign: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        GetDevice: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    device: {
                        shape: "S1b"
                    }
                }
            }
        },
        GetDeviceInstance: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceInstance: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetDevicePool: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    devicePool: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetDevicePoolCompatibility: {
            input: {
                type: "structure",
                required: [ "devicePoolArn" ],
                members: {
                    devicePoolArn: {},
                    appArn: {},
                    testType: {},
                    test: {
                        shape: "S3f"
                    },
                    configuration: {
                        shape: "S3i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    compatibleDevices: {
                        shape: "S3q"
                    },
                    incompatibleDevices: {
                        shape: "S3q"
                    }
                }
            }
        },
        GetInstanceProfile: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceProfile: {
                        shape: "Si"
                    }
                }
            }
        },
        GetJob: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S3y"
                    }
                }
            }
        },
        GetNetworkProfile: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkProfile: {
                        shape: "So"
                    }
                }
            }
        },
        GetOfferingStatus: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    current: {
                        shape: "S46"
                    },
                    nextPeriod: {
                        shape: "S46"
                    },
                    nextToken: {}
                }
            }
        },
        GetProject: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    project: {
                        shape: "Sy"
                    }
                }
            }
        },
        GetRemoteAccessSession: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    remoteAccessSession: {
                        shape: "S18"
                    }
                }
            }
        },
        GetRun: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    run: {
                        shape: "S4n"
                    }
                }
            }
        },
        GetSuite: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    suite: {
                        shape: "S4w"
                    }
                }
            }
        },
        GetTest: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    test: {
                        shape: "S4z"
                    }
                }
            }
        },
        GetTestGridProject: {
            input: {
                type: "structure",
                required: [ "projectArn" ],
                members: {
                    projectArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testGridProject: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetTestGridSession: {
            input: {
                type: "structure",
                members: {
                    projectArn: {},
                    sessionId: {},
                    sessionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testGridSession: {
                        shape: "S55"
                    }
                }
            }
        },
        GetUpload: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    upload: {
                        shape: "S26"
                    }
                }
            }
        },
        GetVPCEConfiguration: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vpceConfiguration: {
                        shape: "S2h"
                    }
                }
            }
        },
        InstallToRemoteAccessSession: {
            input: {
                type: "structure",
                required: [ "remoteAccessSessionArn", "appArn" ],
                members: {
                    remoteAccessSessionArn: {},
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    appUpload: {
                        shape: "S26"
                    }
                }
            }
        },
        ListArtifacts: {
            input: {
                type: "structure",
                required: [ "arn", "type" ],
                members: {
                    arn: {},
                    type: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    artifacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                name: {},
                                type: {},
                                extension: {},
                                url: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeviceInstances: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceInstances: {
                        shape: "S1h"
                    },
                    nextToken: {}
                }
            }
        },
        ListDevicePools: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    type: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    devicePools: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDevices: {
            input: {
                type: "structure",
                members: {
                    arn: {},
                    nextToken: {},
                    filters: {
                        shape: "S4q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    devices: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListInstanceProfiles: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceProfiles: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobs: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    jobs: {
                        type: "list",
                        member: {
                            shape: "S3y"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkProfiles: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    type: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkProfiles: {
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOfferingPromotions: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    offeringPromotions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOfferingTransactions: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    offeringTransactions: {
                        type: "list",
                        member: {
                            shape: "S69"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOfferings: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    offerings: {
                        type: "list",
                        member: {
                            shape: "S4a"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            input: {
                type: "structure",
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    projects: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRemoteAccessSessions: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    remoteAccessSessions: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRuns: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    runs: {
                        type: "list",
                        member: {
                            shape: "S4n"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSamples: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    samples: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                type: {},
                                url: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSuites: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    suites: {
                        type: "list",
                        member: {
                            shape: "S4w"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6x"
                    }
                }
            }
        },
        ListTestGridProjects: {
            input: {
                type: "structure",
                members: {
                    maxResult: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testGridProjects: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTestGridSessionActions: {
            input: {
                type: "structure",
                required: [ "sessionArn" ],
                members: {
                    sessionArn: {},
                    maxResult: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    actions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                action: {},
                                started: {
                                    type: "timestamp"
                                },
                                duration: {
                                    type: "long"
                                },
                                statusCode: {},
                                requestMethod: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTestGridSessionArtifacts: {
            input: {
                type: "structure",
                required: [ "sessionArn" ],
                members: {
                    sessionArn: {},
                    type: {},
                    maxResult: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    artifacts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                filename: {},
                                type: {},
                                url: {
                                    shape: "S21"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTestGridSessions: {
            input: {
                type: "structure",
                required: [ "projectArn" ],
                members: {
                    projectArn: {},
                    status: {},
                    creationTimeAfter: {
                        type: "timestamp"
                    },
                    creationTimeBefore: {
                        type: "timestamp"
                    },
                    endTimeAfter: {
                        type: "timestamp"
                    },
                    endTimeBefore: {
                        type: "timestamp"
                    },
                    maxResult: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    testGridSessions: {
                        type: "list",
                        member: {
                            shape: "S55"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTests: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tests: {
                        type: "list",
                        member: {
                            shape: "S4z"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListUniqueProblems: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    uniqueProblems: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    message: {},
                                    problems: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                run: {
                                                    shape: "S7s"
                                                },
                                                job: {
                                                    shape: "S7s"
                                                },
                                                suite: {
                                                    shape: "S7s"
                                                },
                                                test: {
                                                    shape: "S7s"
                                                },
                                                device: {
                                                    shape: "S1b"
                                                },
                                                result: {},
                                                message: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListUploads: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    type: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    uploads: {
                        type: "list",
                        member: {
                            shape: "S26"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListVPCEConfigurations: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vpceConfigurations: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PurchaseOffering: {
            input: {
                type: "structure",
                required: [ "offeringId", "quantity" ],
                members: {
                    offeringId: {},
                    quantity: {
                        type: "integer"
                    },
                    offeringPromotionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    offeringTransaction: {
                        shape: "S69"
                    }
                }
            }
        },
        RenewOffering: {
            input: {
                type: "structure",
                required: [ "offeringId", "quantity" ],
                members: {
                    offeringId: {},
                    quantity: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    offeringTransaction: {
                        shape: "S69"
                    }
                }
            }
        },
        ScheduleRun: {
            input: {
                type: "structure",
                required: [ "projectArn", "test" ],
                members: {
                    projectArn: {},
                    appArn: {},
                    devicePoolArn: {},
                    deviceSelectionConfiguration: {
                        type: "structure",
                        required: [ "filters", "maxDevices" ],
                        members: {
                            filters: {
                                shape: "S4q"
                            },
                            maxDevices: {
                                type: "integer"
                            }
                        }
                    },
                    name: {},
                    test: {
                        shape: "S3f"
                    },
                    configuration: {
                        shape: "S3i"
                    },
                    executionConfiguration: {
                        type: "structure",
                        members: {
                            jobTimeoutMinutes: {
                                type: "integer"
                            },
                            accountsCleanup: {
                                type: "boolean"
                            },
                            appPackagesCleanup: {
                                type: "boolean"
                            },
                            videoCapture: {
                                type: "boolean"
                            },
                            skipAppResign: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    run: {
                        shape: "S4n"
                    }
                }
            }
        },
        StopJob: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S3y"
                    }
                }
            }
        },
        StopRemoteAccessSession: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    remoteAccessSession: {
                        shape: "S18"
                    }
                }
            }
        },
        StopRun: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    run: {
                        shape: "S4n"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S6x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDeviceInstance: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    profileArn: {},
                    labels: {
                        shape: "S1j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceInstance: {
                        shape: "S1i"
                    }
                }
            }
        },
        UpdateDevicePool: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {},
                    description: {},
                    rules: {
                        shape: "S5"
                    },
                    maxDevices: {
                        type: "integer"
                    },
                    clearMaxDevices: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    devicePool: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateInstanceProfile: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {},
                    description: {},
                    packageCleanup: {
                        type: "boolean"
                    },
                    excludeAppPackagesFromCleanup: {
                        shape: "Sg"
                    },
                    rebootAfterUse: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    instanceProfile: {
                        shape: "Si"
                    }
                }
            }
        },
        UpdateNetworkProfile: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {},
                    description: {},
                    type: {},
                    uplinkBandwidthBits: {
                        type: "long"
                    },
                    downlinkBandwidthBits: {
                        type: "long"
                    },
                    uplinkDelayMs: {
                        type: "long"
                    },
                    downlinkDelayMs: {
                        type: "long"
                    },
                    uplinkJitterMs: {
                        type: "long"
                    },
                    downlinkJitterMs: {
                        type: "long"
                    },
                    uplinkLossPercent: {
                        type: "integer"
                    },
                    downlinkLossPercent: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkProfile: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateProject: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {},
                    defaultJobTimeoutMinutes: {
                        type: "integer"
                    },
                    vpcConfig: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    project: {
                        shape: "Sy"
                    }
                }
            }
        },
        UpdateTestGridProject: {
            input: {
                type: "structure",
                required: [ "projectArn" ],
                members: {
                    projectArn: {},
                    name: {},
                    description: {},
                    vpcConfig: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    testGridProject: {
                        shape: "S1w"
                    }
                }
            }
        },
        UpdateUpload: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    name: {},
                    contentType: {},
                    editContent: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    upload: {
                        shape: "S26"
                    }
                }
            }
        },
        UpdateVPCEConfiguration: {
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {},
                    vpceConfigurationName: {},
                    vpceServiceName: {},
                    serviceDnsName: {},
                    vpceConfigurationDescription: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vpceConfiguration: {
                        shape: "S2h"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    attribute: {},
                    operator: {},
                    value: {}
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                type: {},
                rules: {
                    shape: "S5"
                },
                maxDevices: {
                    type: "integer"
                }
            }
        },
        Sg: {
            type: "list",
            member: {}
        },
        Si: {
            type: "structure",
            members: {
                arn: {},
                packageCleanup: {
                    type: "boolean"
                },
                excludeAppPackagesFromCleanup: {
                    shape: "Sg"
                },
                rebootAfterUse: {
                    type: "boolean"
                },
                name: {},
                description: {}
            }
        },
        So: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                type: {},
                uplinkBandwidthBits: {
                    type: "long"
                },
                downlinkBandwidthBits: {
                    type: "long"
                },
                uplinkDelayMs: {
                    type: "long"
                },
                downlinkDelayMs: {
                    type: "long"
                },
                uplinkJitterMs: {
                    type: "long"
                },
                downlinkJitterMs: {
                    type: "long"
                },
                uplinkLossPercent: {
                    type: "integer"
                },
                downlinkLossPercent: {
                    type: "integer"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "securityGroupIds", "subnetIds", "vpcId" ],
            members: {
                securityGroupIds: {
                    type: "list",
                    member: {}
                },
                subnetIds: {
                    type: "list",
                    member: {}
                },
                vpcId: {}
            }
        },
        Sy: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                defaultJobTimeoutMinutes: {
                    type: "integer"
                },
                created: {
                    type: "timestamp"
                },
                vpcConfig: {
                    shape: "Sr"
                }
            }
        },
        S15: {
            type: "list",
            member: {}
        },
        S18: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                created: {
                    type: "timestamp"
                },
                status: {},
                result: {},
                message: {},
                started: {
                    type: "timestamp"
                },
                stopped: {
                    type: "timestamp"
                },
                device: {
                    shape: "S1b"
                },
                instanceArn: {},
                remoteDebugEnabled: {
                    type: "boolean"
                },
                remoteRecordEnabled: {
                    type: "boolean"
                },
                remoteRecordAppArn: {},
                hostAddress: {},
                clientId: {},
                billingMethod: {},
                deviceMinutes: {
                    shape: "S1n"
                },
                endpoint: {},
                deviceUdid: {},
                interactionMode: {},
                skipAppResign: {
                    type: "boolean"
                },
                vpcConfig: {
                    shape: "Sr"
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                manufacturer: {},
                model: {},
                modelId: {},
                formFactor: {},
                platform: {},
                os: {},
                cpu: {
                    type: "structure",
                    members: {
                        frequency: {},
                        architecture: {},
                        clock: {
                            type: "double"
                        }
                    }
                },
                resolution: {
                    type: "structure",
                    members: {
                        width: {
                            type: "integer"
                        },
                        height: {
                            type: "integer"
                        }
                    }
                },
                heapSize: {
                    type: "long"
                },
                memory: {
                    type: "long"
                },
                image: {},
                carrier: {},
                radio: {},
                remoteAccessEnabled: {
                    type: "boolean"
                },
                remoteDebugEnabled: {
                    type: "boolean"
                },
                fleetType: {},
                fleetName: {},
                instances: {
                    shape: "S1h"
                },
                availability: {}
            }
        },
        S1h: {
            type: "list",
            member: {
                shape: "S1i"
            }
        },
        S1i: {
            type: "structure",
            members: {
                arn: {},
                deviceArn: {},
                labels: {
                    shape: "S1j"
                },
                status: {},
                udid: {},
                instanceProfile: {
                    shape: "Si"
                }
            }
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1n: {
            type: "structure",
            members: {
                total: {
                    type: "double"
                },
                metered: {
                    type: "double"
                },
                unmetered: {
                    type: "double"
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "securityGroupIds", "subnetIds", "vpcId" ],
            members: {
                securityGroupIds: {
                    type: "list",
                    member: {}
                },
                subnetIds: {
                    type: "list",
                    member: {}
                },
                vpcId: {}
            }
        },
        S1w: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                description: {},
                vpcConfig: {
                    shape: "S1s"
                },
                created: {
                    type: "timestamp"
                }
            }
        },
        S21: {
            type: "string",
            sensitive: true
        },
        S26: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                created: {
                    type: "timestamp"
                },
                type: {},
                status: {},
                url: {
                    type: "string",
                    sensitive: true
                },
                metadata: {},
                contentType: {},
                message: {},
                category: {}
            }
        },
        S2h: {
            type: "structure",
            members: {
                arn: {},
                vpceConfigurationName: {},
                vpceServiceName: {},
                serviceDnsName: {},
                vpceConfigurationDescription: {}
            }
        },
        S34: {
            type: "map",
            key: {},
            value: {
                type: "integer"
            }
        },
        S3f: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                testPackageArn: {},
                testSpecArn: {},
                filter: {},
                parameters: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                extraDataPackageArn: {},
                networkProfileArn: {},
                locale: {},
                location: {
                    shape: "S3j"
                },
                vpceConfigurationArns: {
                    shape: "S15"
                },
                customerArtifactPaths: {
                    shape: "S3k"
                },
                radios: {
                    shape: "S3o"
                },
                auxiliaryApps: {
                    shape: "S15"
                },
                billingMethod: {}
            }
        },
        S3j: {
            type: "structure",
            required: [ "latitude", "longitude" ],
            members: {
                latitude: {
                    type: "double"
                },
                longitude: {
                    type: "double"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                iosPaths: {
                    type: "list",
                    member: {}
                },
                androidPaths: {
                    type: "list",
                    member: {}
                },
                deviceHostPaths: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3o: {
            type: "structure",
            members: {
                wifi: {
                    type: "boolean"
                },
                bluetooth: {
                    type: "boolean"
                },
                nfc: {
                    type: "boolean"
                },
                gps: {
                    type: "boolean"
                }
            }
        },
        S3q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    device: {
                        shape: "S1b"
                    },
                    compatible: {
                        type: "boolean"
                    },
                    incompatibilityMessages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                message: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                type: {},
                created: {
                    type: "timestamp"
                },
                status: {},
                result: {},
                started: {
                    type: "timestamp"
                },
                stopped: {
                    type: "timestamp"
                },
                counters: {
                    shape: "S3z"
                },
                message: {},
                device: {
                    shape: "S1b"
                },
                instanceArn: {},
                deviceMinutes: {
                    shape: "S1n"
                },
                videoEndpoint: {},
                videoCapture: {
                    type: "boolean"
                }
            }
        },
        S3z: {
            type: "structure",
            members: {
                total: {
                    type: "integer"
                },
                passed: {
                    type: "integer"
                },
                failed: {
                    type: "integer"
                },
                warned: {
                    type: "integer"
                },
                errored: {
                    type: "integer"
                },
                stopped: {
                    type: "integer"
                },
                skipped: {
                    type: "integer"
                }
            }
        },
        S46: {
            type: "map",
            key: {},
            value: {
                shape: "S48"
            }
        },
        S48: {
            type: "structure",
            members: {
                type: {},
                offering: {
                    shape: "S4a"
                },
                quantity: {
                    type: "integer"
                },
                effectiveOn: {
                    type: "timestamp"
                }
            }
        },
        S4a: {
            type: "structure",
            members: {
                id: {},
                description: {},
                type: {},
                platform: {},
                recurringCharges: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            cost: {
                                shape: "S4e"
                            },
                            frequency: {}
                        }
                    }
                }
            }
        },
        S4e: {
            type: "structure",
            members: {
                amount: {
                    type: "double"
                },
                currencyCode: {}
            }
        },
        S4n: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                type: {},
                platform: {},
                created: {
                    type: "timestamp"
                },
                status: {},
                result: {},
                started: {
                    type: "timestamp"
                },
                stopped: {
                    type: "timestamp"
                },
                counters: {
                    shape: "S3z"
                },
                message: {},
                totalJobs: {
                    type: "integer"
                },
                completedJobs: {
                    type: "integer"
                },
                billingMethod: {},
                deviceMinutes: {
                    shape: "S1n"
                },
                networkProfile: {
                    shape: "So"
                },
                parsingResultUrl: {},
                resultCode: {},
                seed: {
                    type: "integer"
                },
                appUpload: {},
                eventCount: {
                    type: "integer"
                },
                jobTimeoutMinutes: {
                    type: "integer"
                },
                devicePoolArn: {},
                locale: {},
                radios: {
                    shape: "S3o"
                },
                location: {
                    shape: "S3j"
                },
                customerArtifactPaths: {
                    shape: "S3k"
                },
                webUrl: {},
                skipAppResign: {
                    type: "boolean"
                },
                testSpecArn: {},
                deviceSelectionResult: {
                    type: "structure",
                    members: {
                        filters: {
                            shape: "S4q"
                        },
                        matchedDevicesCount: {
                            type: "integer"
                        },
                        maxDevices: {
                            type: "integer"
                        }
                    }
                },
                vpcConfig: {
                    shape: "Sr"
                }
            }
        },
        S4q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "attribute", "operator", "values" ],
                members: {
                    attribute: {},
                    operator: {},
                    values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S4w: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                type: {},
                created: {
                    type: "timestamp"
                },
                status: {},
                result: {},
                started: {
                    type: "timestamp"
                },
                stopped: {
                    type: "timestamp"
                },
                counters: {
                    shape: "S3z"
                },
                message: {},
                deviceMinutes: {
                    shape: "S1n"
                }
            }
        },
        S4z: {
            type: "structure",
            members: {
                arn: {},
                name: {},
                type: {},
                created: {
                    type: "timestamp"
                },
                status: {},
                result: {},
                started: {
                    type: "timestamp"
                },
                stopped: {
                    type: "timestamp"
                },
                counters: {
                    shape: "S3z"
                },
                message: {},
                deviceMinutes: {
                    shape: "S1n"
                }
            }
        },
        S55: {
            type: "structure",
            members: {
                arn: {},
                status: {},
                created: {
                    type: "timestamp"
                },
                ended: {
                    type: "timestamp"
                },
                billingMinutes: {
                    type: "double"
                },
                seleniumProperties: {}
            }
        },
        S69: {
            type: "structure",
            members: {
                offeringStatus: {
                    shape: "S48"
                },
                transactionId: {},
                offeringPromotionId: {},
                createdOn: {
                    type: "timestamp"
                },
                cost: {
                    shape: "S4e"
                }
            }
        },
        S6x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S7s: {
            type: "structure",
            members: {
                arn: {},
                name: {}
            }
        }
    },
    paginators: {
        GetOfferingStatus: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: [ "current", "nextPeriod" ]
        },
        ListArtifacts: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "artifacts"
        },
        ListDevicePools: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "devicePools"
        },
        ListDevices: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "devices"
        },
        ListJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "jobs"
        },
        ListOfferingTransactions: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "offeringTransactions"
        },
        ListOfferings: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "offerings"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "projects"
        },
        ListRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "runs"
        },
        ListSamples: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "samples"
        },
        ListSuites: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "suites"
        },
        ListTestGridProjects: {
            input_token: "nextToken",
            limit_key: "maxResult",
            output_token: "nextToken"
        },
        ListTestGridSessionActions: {
            input_token: "nextToken",
            limit_key: "maxResult",
            output_token: "nextToken"
        },
        ListTestGridSessionArtifacts: {
            input_token: "nextToken",
            limit_key: "maxResult",
            output_token: "nextToken"
        },
        ListTestGridSessions: {
            input_token: "nextToken",
            limit_key: "maxResult",
            output_token: "nextToken"
        },
        ListTests: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "tests"
        },
        ListUniqueProblems: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "uniqueProblems"
        },
        ListUploads: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "uploads"
        }
    }
};

AWS.apiLoader.services["directconnect"] = {};

AWS.DirectConnect = AWS.Service.defineService("directconnect", [ "2012-10-25" ]);

AWS.apiLoader.services["directconnect"]["2012-10-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-10-25",
        endpointPrefix: "directconnect",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Direct Connect",
        serviceId: "Direct Connect",
        signatureVersion: "v4",
        targetPrefix: "OvertureService",
        uid: "directconnect-2012-10-25"
    },
    operations: {
        AcceptDirectConnectGatewayAssociationProposal: {
            input: {
                type: "structure",
                required: [ "directConnectGatewayId", "proposalId", "associatedGatewayOwnerAccount" ],
                members: {
                    directConnectGatewayId: {},
                    proposalId: {},
                    associatedGatewayOwnerAccount: {},
                    overrideAllowedPrefixesToDirectConnectGateway: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociation: {
                        shape: "S9"
                    }
                }
            }
        },
        AllocateConnectionOnInterconnect: {
            input: {
                type: "structure",
                required: [ "bandwidth", "connectionName", "ownerAccount", "interconnectId", "vlan" ],
                members: {
                    bandwidth: {},
                    connectionName: {},
                    ownerAccount: {},
                    interconnectId: {},
                    vlan: {
                        type: "integer"
                    }
                }
            },
            output: {
                shape: "So"
            },
            deprecated: true
        },
        AllocateHostedConnection: {
            input: {
                type: "structure",
                required: [ "connectionId", "ownerAccount", "bandwidth", "connectionName", "vlan" ],
                members: {
                    connectionId: {},
                    ownerAccount: {},
                    bandwidth: {},
                    connectionName: {},
                    vlan: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                shape: "So"
            }
        },
        AllocatePrivateVirtualInterface: {
            input: {
                type: "structure",
                required: [ "connectionId", "ownerAccount", "newPrivateVirtualInterfaceAllocation" ],
                members: {
                    connectionId: {},
                    ownerAccount: {},
                    newPrivateVirtualInterfaceAllocation: {
                        type: "structure",
                        required: [ "virtualInterfaceName", "vlan", "asn" ],
                        members: {
                            virtualInterfaceName: {},
                            vlan: {
                                type: "integer"
                            },
                            asn: {
                                type: "integer"
                            },
                            mtu: {
                                type: "integer"
                            },
                            authKey: {},
                            amazonAddress: {},
                            addressFamily: {},
                            customerAddress: {},
                            tags: {
                                shape: "S10"
                            }
                        }
                    }
                }
            },
            output: {
                shape: "S1o"
            }
        },
        AllocatePublicVirtualInterface: {
            input: {
                type: "structure",
                required: [ "connectionId", "ownerAccount", "newPublicVirtualInterfaceAllocation" ],
                members: {
                    connectionId: {},
                    ownerAccount: {},
                    newPublicVirtualInterfaceAllocation: {
                        type: "structure",
                        required: [ "virtualInterfaceName", "vlan", "asn" ],
                        members: {
                            virtualInterfaceName: {},
                            vlan: {
                                type: "integer"
                            },
                            asn: {
                                type: "integer"
                            },
                            authKey: {},
                            amazonAddress: {},
                            customerAddress: {},
                            addressFamily: {},
                            routeFilterPrefixes: {
                                shape: "S5"
                            },
                            tags: {
                                shape: "S10"
                            }
                        }
                    }
                }
            },
            output: {
                shape: "S1o"
            }
        },
        AllocateTransitVirtualInterface: {
            input: {
                type: "structure",
                required: [ "connectionId", "ownerAccount", "newTransitVirtualInterfaceAllocation" ],
                members: {
                    connectionId: {},
                    ownerAccount: {},
                    newTransitVirtualInterfaceAllocation: {
                        type: "structure",
                        members: {
                            virtualInterfaceName: {},
                            vlan: {
                                type: "integer"
                            },
                            asn: {
                                type: "integer"
                            },
                            mtu: {
                                type: "integer"
                            },
                            authKey: {},
                            amazonAddress: {},
                            customerAddress: {},
                            addressFamily: {},
                            tags: {
                                shape: "S10"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterface: {
                        shape: "S1o"
                    }
                }
            }
        },
        AssociateConnectionWithLag: {
            input: {
                type: "structure",
                required: [ "connectionId", "lagId" ],
                members: {
                    connectionId: {},
                    lagId: {}
                }
            },
            output: {
                shape: "So"
            }
        },
        AssociateHostedConnection: {
            input: {
                type: "structure",
                required: [ "connectionId", "parentConnectionId" ],
                members: {
                    connectionId: {},
                    parentConnectionId: {}
                }
            },
            output: {
                shape: "So"
            }
        },
        AssociateMacSecKey: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {},
                    secretARN: {},
                    ckn: {},
                    cak: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectionId: {},
                    macSecKeys: {
                        shape: "S18"
                    }
                }
            }
        },
        AssociateVirtualInterface: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId", "connectionId" ],
                members: {
                    virtualInterfaceId: {},
                    connectionId: {}
                }
            },
            output: {
                shape: "S1o"
            }
        },
        ConfirmConnection: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectionState: {}
                }
            }
        },
        ConfirmCustomerAgreement: {
            input: {
                type: "structure",
                members: {
                    agreementName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        ConfirmPrivateVirtualInterface: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {},
                    virtualGatewayId: {},
                    directConnectGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceState: {}
                }
            }
        },
        ConfirmPublicVirtualInterface: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceState: {}
                }
            }
        },
        ConfirmTransitVirtualInterface: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId", "directConnectGatewayId" ],
                members: {
                    virtualInterfaceId: {},
                    directConnectGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceState: {}
                }
            }
        },
        CreateBGPPeer: {
            input: {
                type: "structure",
                members: {
                    virtualInterfaceId: {},
                    newBGPPeer: {
                        type: "structure",
                        members: {
                            asn: {
                                type: "integer"
                            },
                            authKey: {},
                            addressFamily: {},
                            amazonAddress: {},
                            customerAddress: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterface: {
                        shape: "S1o"
                    }
                }
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "location", "bandwidth", "connectionName" ],
                members: {
                    location: {},
                    bandwidth: {},
                    connectionName: {},
                    lagId: {},
                    tags: {
                        shape: "S10"
                    },
                    providerName: {},
                    requestMACSec: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "So"
            }
        },
        CreateDirectConnectGateway: {
            input: {
                type: "structure",
                required: [ "directConnectGatewayName" ],
                members: {
                    directConnectGatewayName: {},
                    amazonSideAsn: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGateway: {
                        shape: "S2v"
                    }
                }
            }
        },
        CreateDirectConnectGatewayAssociation: {
            input: {
                type: "structure",
                required: [ "directConnectGatewayId" ],
                members: {
                    directConnectGatewayId: {},
                    gatewayId: {},
                    addAllowedPrefixesToDirectConnectGateway: {
                        shape: "S5"
                    },
                    virtualGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociation: {
                        shape: "S9"
                    }
                }
            }
        },
        CreateDirectConnectGatewayAssociationProposal: {
            input: {
                type: "structure",
                required: [ "directConnectGatewayId", "directConnectGatewayOwnerAccount", "gatewayId" ],
                members: {
                    directConnectGatewayId: {},
                    directConnectGatewayOwnerAccount: {},
                    gatewayId: {},
                    addAllowedPrefixesToDirectConnectGateway: {
                        shape: "S5"
                    },
                    removeAllowedPrefixesToDirectConnectGateway: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociationProposal: {
                        shape: "S32"
                    }
                }
            }
        },
        CreateInterconnect: {
            input: {
                type: "structure",
                required: [ "interconnectName", "bandwidth", "location" ],
                members: {
                    interconnectName: {},
                    bandwidth: {},
                    location: {},
                    lagId: {},
                    tags: {
                        shape: "S10"
                    },
                    providerName: {}
                }
            },
            output: {
                shape: "S36"
            }
        },
        CreateLag: {
            input: {
                type: "structure",
                required: [ "numberOfConnections", "location", "connectionsBandwidth", "lagName" ],
                members: {
                    numberOfConnections: {
                        type: "integer"
                    },
                    location: {},
                    connectionsBandwidth: {},
                    lagName: {},
                    connectionId: {},
                    tags: {
                        shape: "S10"
                    },
                    childConnectionTags: {
                        shape: "S10"
                    },
                    providerName: {},
                    requestMACSec: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S3b"
            }
        },
        CreatePrivateVirtualInterface: {
            input: {
                type: "structure",
                required: [ "connectionId", "newPrivateVirtualInterface" ],
                members: {
                    connectionId: {},
                    newPrivateVirtualInterface: {
                        type: "structure",
                        required: [ "virtualInterfaceName", "vlan", "asn" ],
                        members: {
                            virtualInterfaceName: {},
                            vlan: {
                                type: "integer"
                            },
                            asn: {
                                type: "integer"
                            },
                            mtu: {
                                type: "integer"
                            },
                            authKey: {},
                            amazonAddress: {},
                            customerAddress: {},
                            addressFamily: {},
                            virtualGatewayId: {},
                            directConnectGatewayId: {},
                            tags: {
                                shape: "S10"
                            },
                            enableSiteLink: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                shape: "S1o"
            }
        },
        CreatePublicVirtualInterface: {
            input: {
                type: "structure",
                required: [ "connectionId", "newPublicVirtualInterface" ],
                members: {
                    connectionId: {},
                    newPublicVirtualInterface: {
                        type: "structure",
                        required: [ "virtualInterfaceName", "vlan", "asn" ],
                        members: {
                            virtualInterfaceName: {},
                            vlan: {
                                type: "integer"
                            },
                            asn: {
                                type: "integer"
                            },
                            authKey: {},
                            amazonAddress: {},
                            customerAddress: {},
                            addressFamily: {},
                            routeFilterPrefixes: {
                                shape: "S5"
                            },
                            tags: {
                                shape: "S10"
                            }
                        }
                    }
                }
            },
            output: {
                shape: "S1o"
            }
        },
        CreateTransitVirtualInterface: {
            input: {
                type: "structure",
                required: [ "connectionId", "newTransitVirtualInterface" ],
                members: {
                    connectionId: {},
                    newTransitVirtualInterface: {
                        type: "structure",
                        members: {
                            virtualInterfaceName: {},
                            vlan: {
                                type: "integer"
                            },
                            asn: {
                                type: "integer"
                            },
                            mtu: {
                                type: "integer"
                            },
                            authKey: {},
                            amazonAddress: {},
                            customerAddress: {},
                            addressFamily: {},
                            directConnectGatewayId: {},
                            tags: {
                                shape: "S10"
                            },
                            enableSiteLink: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterface: {
                        shape: "S1o"
                    }
                }
            }
        },
        DeleteBGPPeer: {
            input: {
                type: "structure",
                members: {
                    virtualInterfaceId: {},
                    asn: {
                        type: "integer"
                    },
                    customerAddress: {},
                    bgpPeerId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterface: {
                        shape: "S1o"
                    }
                }
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {}
                }
            },
            output: {
                shape: "So"
            }
        },
        DeleteDirectConnectGateway: {
            input: {
                type: "structure",
                required: [ "directConnectGatewayId" ],
                members: {
                    directConnectGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGateway: {
                        shape: "S2v"
                    }
                }
            }
        },
        DeleteDirectConnectGatewayAssociation: {
            input: {
                type: "structure",
                members: {
                    associationId: {},
                    directConnectGatewayId: {},
                    virtualGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociation: {
                        shape: "S9"
                    }
                }
            }
        },
        DeleteDirectConnectGatewayAssociationProposal: {
            input: {
                type: "structure",
                required: [ "proposalId" ],
                members: {
                    proposalId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociationProposal: {
                        shape: "S32"
                    }
                }
            }
        },
        DeleteInterconnect: {
            input: {
                type: "structure",
                required: [ "interconnectId" ],
                members: {
                    interconnectId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    interconnectState: {}
                }
            }
        },
        DeleteLag: {
            input: {
                type: "structure",
                required: [ "lagId" ],
                members: {
                    lagId: {}
                }
            },
            output: {
                shape: "S3b"
            }
        },
        DeleteVirtualInterface: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceState: {}
                }
            }
        },
        DescribeConnectionLoa: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {},
                    providerName: {},
                    loaContentType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    loa: {
                        shape: "S44"
                    }
                }
            },
            deprecated: true
        },
        DescribeConnections: {
            input: {
                type: "structure",
                members: {
                    connectionId: {}
                }
            },
            output: {
                shape: "S47"
            }
        },
        DescribeConnectionsOnInterconnect: {
            input: {
                type: "structure",
                required: [ "interconnectId" ],
                members: {
                    interconnectId: {}
                }
            },
            output: {
                shape: "S47"
            },
            deprecated: true
        },
        DescribeCustomerMetadata: {
            output: {
                type: "structure",
                members: {
                    agreements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                agreementName: {},
                                status: {}
                            }
                        }
                    },
                    nniPartnerType: {}
                }
            }
        },
        DescribeDirectConnectGatewayAssociationProposals: {
            input: {
                type: "structure",
                members: {
                    directConnectGatewayId: {},
                    proposalId: {},
                    associatedGatewayId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociationProposals: {
                        type: "list",
                        member: {
                            shape: "S32"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeDirectConnectGatewayAssociations: {
            input: {
                type: "structure",
                members: {
                    associationId: {},
                    associatedGatewayId: {},
                    directConnectGatewayId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    virtualGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociations: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeDirectConnectGatewayAttachments: {
            input: {
                type: "structure",
                members: {
                    directConnectGatewayId: {},
                    virtualInterfaceId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAttachments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                directConnectGatewayId: {},
                                virtualInterfaceId: {},
                                virtualInterfaceRegion: {},
                                virtualInterfaceOwnerAccount: {},
                                attachmentState: {},
                                attachmentType: {},
                                stateChangeError: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeDirectConnectGateways: {
            input: {
                type: "structure",
                members: {
                    directConnectGatewayId: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGateways: {
                        type: "list",
                        member: {
                            shape: "S2v"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeHostedConnections: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {}
                }
            },
            output: {
                shape: "S47"
            }
        },
        DescribeInterconnectLoa: {
            input: {
                type: "structure",
                required: [ "interconnectId" ],
                members: {
                    interconnectId: {},
                    providerName: {},
                    loaContentType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    loa: {
                        shape: "S44"
                    }
                }
            },
            deprecated: true
        },
        DescribeInterconnects: {
            input: {
                type: "structure",
                members: {
                    interconnectId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    interconnects: {
                        type: "list",
                        member: {
                            shape: "S36"
                        }
                    }
                }
            }
        },
        DescribeLags: {
            input: {
                type: "structure",
                members: {
                    lagId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    lags: {
                        type: "list",
                        member: {
                            shape: "S3b"
                        }
                    }
                }
            }
        },
        DescribeLoa: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {},
                    providerName: {},
                    loaContentType: {}
                }
            },
            output: {
                shape: "S44"
            }
        },
        DescribeLocations: {
            output: {
                type: "structure",
                members: {
                    locations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                locationCode: {},
                                locationName: {},
                                region: {},
                                availablePortSpeeds: {
                                    type: "list",
                                    member: {}
                                },
                                availableProviders: {
                                    type: "list",
                                    member: {}
                                },
                                availableMacSecPortSpeeds: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeRouterConfiguration: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {},
                    routerTypeIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customerRouterConfig: {},
                    router: {
                        type: "structure",
                        members: {
                            vendor: {},
                            platform: {},
                            software: {},
                            xsltTemplateName: {},
                            xsltTemplateNameForMacSec: {},
                            routerTypeIdentifier: {}
                        }
                    },
                    virtualInterfaceId: {},
                    virtualInterfaceName: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                required: [ "resourceArns" ],
                members: {
                    resourceArns: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resourceTags: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                resourceArn: {},
                                tags: {
                                    shape: "S10"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVirtualGateways: {
            output: {
                type: "structure",
                members: {
                    virtualGateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                virtualGatewayId: {},
                                virtualGatewayState: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeVirtualInterfaces: {
            input: {
                type: "structure",
                members: {
                    connectionId: {},
                    virtualInterfaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaces: {
                        type: "list",
                        member: {
                            shape: "S1o"
                        }
                    }
                }
            }
        },
        DisassociateConnectionFromLag: {
            input: {
                type: "structure",
                required: [ "connectionId", "lagId" ],
                members: {
                    connectionId: {},
                    lagId: {}
                }
            },
            output: {
                shape: "So"
            }
        },
        DisassociateMacSecKey: {
            input: {
                type: "structure",
                required: [ "connectionId", "secretARN" ],
                members: {
                    connectionId: {},
                    secretARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    connectionId: {},
                    macSecKeys: {
                        shape: "S18"
                    }
                }
            }
        },
        ListVirtualInterfaceTestHistory: {
            input: {
                type: "structure",
                members: {
                    testId: {},
                    virtualInterfaceId: {},
                    bgpPeers: {
                        shape: "S65"
                    },
                    status: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceTestHistory: {
                        type: "list",
                        member: {
                            shape: "S69"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        StartBgpFailoverTest: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {},
                    bgpPeers: {
                        shape: "S65"
                    },
                    testDurationInMinutes: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceTest: {
                        shape: "S69"
                    }
                }
            }
        },
        StopBgpFailoverTest: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    virtualInterfaceTest: {
                        shape: "S69"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnection: {
            input: {
                type: "structure",
                required: [ "connectionId" ],
                members: {
                    connectionId: {},
                    connectionName: {},
                    encryptionMode: {}
                }
            },
            output: {
                shape: "So"
            }
        },
        UpdateDirectConnectGateway: {
            input: {
                type: "structure",
                required: [ "directConnectGatewayId", "newDirectConnectGatewayName" ],
                members: {
                    directConnectGatewayId: {},
                    newDirectConnectGatewayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGateway: {
                        shape: "S2v"
                    }
                }
            }
        },
        UpdateDirectConnectGatewayAssociation: {
            input: {
                type: "structure",
                members: {
                    associationId: {},
                    addAllowedPrefixesToDirectConnectGateway: {
                        shape: "S5"
                    },
                    removeAllowedPrefixesToDirectConnectGateway: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    directConnectGatewayAssociation: {
                        shape: "S9"
                    }
                }
            }
        },
        UpdateLag: {
            input: {
                type: "structure",
                required: [ "lagId" ],
                members: {
                    lagId: {},
                    lagName: {},
                    minimumLinks: {
                        type: "integer"
                    },
                    encryptionMode: {}
                }
            },
            output: {
                shape: "S3b"
            }
        },
        UpdateVirtualInterfaceAttributes: {
            input: {
                type: "structure",
                required: [ "virtualInterfaceId" ],
                members: {
                    virtualInterfaceId: {},
                    mtu: {
                        type: "integer"
                    },
                    enableSiteLink: {
                        type: "boolean"
                    },
                    virtualInterfaceName: {}
                }
            },
            output: {
                shape: "S1o"
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    cidr: {}
                }
            }
        },
        S9: {
            type: "structure",
            members: {
                directConnectGatewayId: {},
                directConnectGatewayOwnerAccount: {},
                associationState: {},
                stateChangeError: {},
                associatedGateway: {
                    shape: "Sc"
                },
                associationId: {},
                allowedPrefixesToDirectConnectGateway: {
                    shape: "S5"
                },
                virtualGatewayId: {},
                virtualGatewayRegion: {
                    type: "string",
                    deprecated: true
                },
                virtualGatewayOwnerAccount: {}
            }
        },
        Sc: {
            type: "structure",
            members: {
                id: {},
                type: {},
                ownerAccount: {},
                region: {}
            }
        },
        So: {
            type: "structure",
            members: {
                ownerAccount: {},
                connectionId: {},
                connectionName: {},
                connectionState: {},
                region: {},
                location: {},
                bandwidth: {},
                vlan: {
                    type: "integer"
                },
                partnerName: {},
                loaIssueTime: {
                    type: "timestamp"
                },
                lagId: {},
                awsDevice: {
                    shape: "Sv"
                },
                jumboFrameCapable: {
                    type: "boolean"
                },
                awsDeviceV2: {},
                awsLogicalDeviceId: {},
                hasLogicalRedundancy: {},
                tags: {
                    shape: "S10"
                },
                providerName: {},
                macSecCapable: {
                    type: "boolean"
                },
                portEncryptionStatus: {},
                encryptionMode: {},
                macSecKeys: {
                    shape: "S18"
                }
            }
        },
        Sv: {
            type: "string",
            deprecated: true
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S18: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    secretARN: {},
                    ckn: {},
                    state: {},
                    startOn: {}
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                ownerAccount: {},
                virtualInterfaceId: {},
                location: {},
                connectionId: {},
                virtualInterfaceType: {},
                virtualInterfaceName: {},
                vlan: {
                    type: "integer"
                },
                asn: {
                    type: "integer"
                },
                amazonSideAsn: {
                    type: "long"
                },
                authKey: {},
                amazonAddress: {},
                customerAddress: {},
                addressFamily: {},
                virtualInterfaceState: {},
                customerRouterConfig: {},
                mtu: {
                    type: "integer"
                },
                jumboFrameCapable: {
                    type: "boolean"
                },
                virtualGatewayId: {},
                directConnectGatewayId: {},
                routeFilterPrefixes: {
                    shape: "S5"
                },
                bgpPeers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            bgpPeerId: {},
                            asn: {
                                type: "integer"
                            },
                            authKey: {},
                            addressFamily: {},
                            amazonAddress: {},
                            customerAddress: {},
                            bgpPeerState: {},
                            bgpStatus: {},
                            awsDeviceV2: {},
                            awsLogicalDeviceId: {}
                        }
                    }
                },
                region: {},
                awsDeviceV2: {},
                awsLogicalDeviceId: {},
                tags: {
                    shape: "S10"
                },
                siteLinkEnabled: {
                    type: "boolean"
                }
            }
        },
        S2v: {
            type: "structure",
            members: {
                directConnectGatewayId: {},
                directConnectGatewayName: {},
                amazonSideAsn: {
                    type: "long"
                },
                ownerAccount: {},
                directConnectGatewayState: {},
                stateChangeError: {}
            }
        },
        S32: {
            type: "structure",
            members: {
                proposalId: {},
                directConnectGatewayId: {},
                directConnectGatewayOwnerAccount: {},
                proposalState: {},
                associatedGateway: {
                    shape: "Sc"
                },
                existingAllowedPrefixesToDirectConnectGateway: {
                    shape: "S5"
                },
                requestedAllowedPrefixesToDirectConnectGateway: {
                    shape: "S5"
                }
            }
        },
        S36: {
            type: "structure",
            members: {
                interconnectId: {},
                interconnectName: {},
                interconnectState: {},
                region: {},
                location: {},
                bandwidth: {},
                loaIssueTime: {
                    type: "timestamp"
                },
                lagId: {},
                awsDevice: {
                    shape: "Sv"
                },
                jumboFrameCapable: {
                    type: "boolean"
                },
                awsDeviceV2: {},
                awsLogicalDeviceId: {},
                hasLogicalRedundancy: {},
                tags: {
                    shape: "S10"
                },
                providerName: {}
            }
        },
        S3b: {
            type: "structure",
            members: {
                connectionsBandwidth: {},
                numberOfConnections: {
                    type: "integer"
                },
                lagId: {},
                ownerAccount: {},
                lagName: {},
                lagState: {},
                location: {},
                region: {},
                minimumLinks: {
                    type: "integer"
                },
                awsDevice: {
                    shape: "Sv"
                },
                awsDeviceV2: {},
                awsLogicalDeviceId: {},
                connections: {
                    shape: "S3d"
                },
                allowsHostedConnections: {
                    type: "boolean"
                },
                jumboFrameCapable: {
                    type: "boolean"
                },
                hasLogicalRedundancy: {},
                tags: {
                    shape: "S10"
                },
                providerName: {},
                macSecCapable: {
                    type: "boolean"
                },
                encryptionMode: {},
                macSecKeys: {
                    shape: "S18"
                }
            }
        },
        S3d: {
            type: "list",
            member: {
                shape: "So"
            }
        },
        S44: {
            type: "structure",
            members: {
                loaContent: {
                    type: "blob"
                },
                loaContentType: {}
            }
        },
        S47: {
            type: "structure",
            members: {
                connections: {
                    shape: "S3d"
                }
            }
        },
        S65: {
            type: "list",
            member: {}
        },
        S69: {
            type: "structure",
            members: {
                testId: {},
                virtualInterfaceId: {},
                bgpPeers: {
                    shape: "S65"
                },
                status: {},
                ownerAccount: {},
                testDurationInMinutes: {
                    type: "integer"
                },
                startTime: {
                    type: "timestamp"
                },
                endTime: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeConnections: {
            result_key: "connections"
        },
        DescribeConnectionsOnInterconnect: {
            result_key: "connections"
        },
        DescribeInterconnects: {
            result_key: "interconnects"
        },
        DescribeLocations: {
            result_key: "locations"
        },
        DescribeVirtualGateways: {
            result_key: "virtualGateways"
        },
        DescribeVirtualInterfaces: {
            result_key: "virtualInterfaces"
        }
    }
};

AWS.apiLoader.services["directoryservice"] = {};

AWS.DirectoryService = AWS.Service.defineService("directoryservice", [ "2015-04-16" ]);

AWS.apiLoader.services["directoryservice"]["2015-04-16"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-04-16",
        endpointPrefix: "ds",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Directory Service",
        serviceFullName: "AWS Directory Service",
        serviceId: "Directory Service",
        signatureVersion: "v4",
        targetPrefix: "DirectoryService_20150416",
        uid: "ds-2015-04-16"
    },
    operations: {
        AcceptSharedDirectory: {
            input: {
                type: "structure",
                required: [ "SharedDirectoryId" ],
                members: {
                    SharedDirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SharedDirectory: {
                        shape: "S4"
                    }
                }
            }
        },
        AddIpRoutes: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "IpRoutes" ],
                members: {
                    DirectoryId: {},
                    IpRoutes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CidrIp: {},
                                Description: {}
                            }
                        }
                    },
                    UpdateSecurityGroupForDirectoryControllers: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddRegion: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RegionName", "VPCSettings" ],
                members: {
                    DirectoryId: {},
                    RegionName: {},
                    VPCSettings: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Tags" ],
                members: {
                    ResourceId: {},
                    Tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelSchemaExtension: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "SchemaExtensionId" ],
                members: {
                    DirectoryId: {},
                    SchemaExtensionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ConnectDirectory: {
            input: {
                type: "structure",
                required: [ "Name", "Password", "Size", "ConnectSettings" ],
                members: {
                    Name: {},
                    ShortName: {},
                    Password: {
                        shape: "S12"
                    },
                    Description: {},
                    Size: {},
                    ConnectSettings: {
                        type: "structure",
                        required: [ "VpcId", "SubnetIds", "CustomerDnsIps", "CustomerUserName" ],
                        members: {
                            VpcId: {},
                            SubnetIds: {
                                shape: "Sm"
                            },
                            CustomerDnsIps: {
                                shape: "S15"
                            },
                            CustomerUserName: {}
                        }
                    },
                    Tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {}
                }
            }
        },
        CreateAlias: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "Alias" ],
                members: {
                    DirectoryId: {},
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {},
                    Alias: {}
                }
            }
        },
        CreateComputer: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "ComputerName", "Password" ],
                members: {
                    DirectoryId: {},
                    ComputerName: {},
                    Password: {
                        type: "string",
                        sensitive: true
                    },
                    OrganizationalUnitDistinguishedName: {},
                    ComputerAttributes: {
                        shape: "S1g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Computer: {
                        type: "structure",
                        members: {
                            ComputerId: {},
                            ComputerName: {},
                            ComputerAttributes: {
                                shape: "S1g"
                            }
                        }
                    }
                }
            }
        },
        CreateConditionalForwarder: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RemoteDomainName", "DnsIpAddrs" ],
                members: {
                    DirectoryId: {},
                    RemoteDomainName: {},
                    DnsIpAddrs: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDirectory: {
            input: {
                type: "structure",
                required: [ "Name", "Password", "Size" ],
                members: {
                    Name: {},
                    ShortName: {},
                    Password: {
                        shape: "S1r"
                    },
                    Description: {},
                    Size: {},
                    VpcSettings: {
                        shape: "Sk"
                    },
                    Tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {}
                }
            }
        },
        CreateLogSubscription: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "LogGroupName" ],
                members: {
                    DirectoryId: {},
                    LogGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateMicrosoftAD: {
            input: {
                type: "structure",
                required: [ "Name", "Password", "VpcSettings" ],
                members: {
                    Name: {},
                    ShortName: {},
                    Password: {
                        shape: "S1r"
                    },
                    Description: {},
                    VpcSettings: {
                        shape: "Sk"
                    },
                    Edition: {},
                    Tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {}
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {}
                }
            }
        },
        CreateTrust: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RemoteDomainName", "TrustPassword", "TrustDirection" ],
                members: {
                    DirectoryId: {},
                    RemoteDomainName: {},
                    TrustPassword: {
                        type: "string",
                        sensitive: true
                    },
                    TrustDirection: {},
                    TrustType: {},
                    ConditionalForwarderIpAddrs: {
                        shape: "S15"
                    },
                    SelectiveAuth: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrustId: {}
                }
            }
        },
        DeleteConditionalForwarder: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RemoteDomainName" ],
                members: {
                    DirectoryId: {},
                    RemoteDomainName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {}
                }
            }
        },
        DeleteLogSubscription: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {}
                }
            }
        },
        DeleteTrust: {
            input: {
                type: "structure",
                required: [ "TrustId" ],
                members: {
                    TrustId: {},
                    DeleteAssociatedConditionalForwarder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrustId: {}
                }
            }
        },
        DeregisterCertificate: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "CertificateId" ],
                members: {
                    DirectoryId: {},
                    CertificateId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterEventTopic: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "TopicName" ],
                members: {
                    DirectoryId: {},
                    TopicName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeCertificate: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "CertificateId" ],
                members: {
                    DirectoryId: {},
                    CertificateId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {
                        type: "structure",
                        members: {
                            CertificateId: {},
                            State: {},
                            StateReason: {},
                            CommonName: {},
                            RegisteredDateTime: {
                                type: "timestamp"
                            },
                            ExpiryDateTime: {
                                type: "timestamp"
                            },
                            Type: {},
                            ClientCertAuthSettings: {
                                shape: "S30"
                            }
                        }
                    }
                }
            }
        },
        DescribeClientAuthenticationSettings: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    Type: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientAuthenticationSettingsInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Status: {},
                                LastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConditionalForwarders: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    RemoteDomainNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConditionalForwarders: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RemoteDomainName: {},
                                DnsIpAddrs: {
                                    shape: "S15"
                                },
                                ReplicationScope: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeDirectories: {
            input: {
                type: "structure",
                members: {
                    DirectoryIds: {
                        shape: "S3h"
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryDescriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                Name: {},
                                ShortName: {},
                                Size: {},
                                Edition: {},
                                Alias: {},
                                AccessUrl: {},
                                Description: {},
                                DnsIpAddrs: {
                                    shape: "S15"
                                },
                                Stage: {},
                                ShareStatus: {},
                                ShareMethod: {},
                                ShareNotes: {
                                    shape: "S8"
                                },
                                LaunchTime: {
                                    type: "timestamp"
                                },
                                StageLastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                Type: {},
                                VpcSettings: {
                                    shape: "S3q"
                                },
                                ConnectSettings: {
                                    type: "structure",
                                    members: {
                                        VpcId: {},
                                        SubnetIds: {
                                            shape: "Sm"
                                        },
                                        CustomerUserName: {},
                                        SecurityGroupId: {},
                                        AvailabilityZones: {
                                            shape: "S3s"
                                        },
                                        ConnectIps: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                RadiusSettings: {
                                    shape: "S3w"
                                },
                                RadiusStatus: {},
                                StageReason: {},
                                SsoEnabled: {
                                    type: "boolean"
                                },
                                DesiredNumberOfDomainControllers: {
                                    type: "integer"
                                },
                                OwnerDirectoryDescription: {
                                    type: "structure",
                                    members: {
                                        DirectoryId: {},
                                        AccountId: {},
                                        DnsIpAddrs: {
                                            shape: "S15"
                                        },
                                        VpcSettings: {
                                            shape: "S3q"
                                        },
                                        RadiusSettings: {
                                            shape: "S3w"
                                        },
                                        RadiusStatus: {}
                                    }
                                },
                                RegionsInfo: {
                                    type: "structure",
                                    members: {
                                        PrimaryRegion: {},
                                        AdditionalRegions: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                },
                                OsVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDomainControllers: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    DomainControllerIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainControllers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                DomainControllerId: {},
                                DnsIpAddr: {},
                                VpcId: {},
                                SubnetId: {},
                                AvailabilityZone: {},
                                Status: {},
                                StatusReason: {},
                                LaunchTime: {
                                    type: "timestamp"
                                },
                                StatusLastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEventTopics: {
            input: {
                type: "structure",
                members: {
                    DirectoryId: {},
                    TopicNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventTopics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                TopicName: {},
                                TopicArn: {},
                                CreatedDateTime: {
                                    type: "timestamp"
                                },
                                Status: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeLDAPSSettings: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    Type: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LDAPSSettingsInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LDAPSStatus: {},
                                LDAPSStatusReason: {},
                                LastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeRegions: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    RegionName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegionsDescription: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                RegionName: {},
                                RegionType: {},
                                Status: {},
                                VpcSettings: {
                                    shape: "Sk"
                                },
                                DesiredNumberOfDomainControllers: {
                                    type: "integer"
                                },
                                LaunchTime: {
                                    type: "timestamp"
                                },
                                StatusLastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSettings: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    Status: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {},
                    SettingEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Name: {},
                                AllowedValues: {},
                                AppliedValue: {},
                                RequestedValue: {},
                                RequestStatus: {},
                                RequestDetailedStatus: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                },
                                RequestStatusMessage: {},
                                LastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                LastRequestedDateTime: {
                                    type: "timestamp"
                                },
                                DataType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSharedDirectories: {
            input: {
                type: "structure",
                required: [ "OwnerDirectoryId" ],
                members: {
                    OwnerDirectoryId: {},
                    SharedDirectoryIds: {
                        shape: "S3h"
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SharedDirectories: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSnapshots: {
            input: {
                type: "structure",
                members: {
                    DirectoryId: {},
                    SnapshotIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                SnapshotId: {},
                                Type: {},
                                Name: {},
                                Status: {},
                                StartTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTrusts: {
            input: {
                type: "structure",
                members: {
                    DirectoryId: {},
                    TrustIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Trusts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                TrustId: {},
                                RemoteDomainName: {},
                                TrustType: {},
                                TrustDirection: {},
                                TrustState: {},
                                CreatedDateTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                StateLastUpdatedDateTime: {
                                    type: "timestamp"
                                },
                                TrustStateReason: {},
                                SelectiveAuth: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeUpdateDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "UpdateType" ],
                members: {
                    DirectoryId: {},
                    UpdateType: {},
                    RegionName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateActivities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Region: {},
                                Status: {},
                                StatusReason: {},
                                InitiatedBy: {},
                                NewValue: {
                                    shape: "S6a"
                                },
                                PreviousValue: {
                                    shape: "S6a"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisableClientAuthentication: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "Type" ],
                members: {
                    DirectoryId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableLDAPS: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "Type" ],
                members: {
                    DirectoryId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableRadius: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableSso: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    UserName: {},
                    Password: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableClientAuthentication: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "Type" ],
                members: {
                    DirectoryId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableLDAPS: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "Type" ],
                members: {
                    DirectoryId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableRadius: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RadiusSettings" ],
                members: {
                    DirectoryId: {},
                    RadiusSettings: {
                        shape: "S3w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableSso: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    UserName: {},
                    Password: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDirectoryLimits: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DirectoryLimits: {
                        type: "structure",
                        members: {
                            CloudOnlyDirectoriesLimit: {
                                type: "integer"
                            },
                            CloudOnlyDirectoriesCurrentCount: {
                                type: "integer"
                            },
                            CloudOnlyDirectoriesLimitReached: {
                                type: "boolean"
                            },
                            CloudOnlyMicrosoftADLimit: {
                                type: "integer"
                            },
                            CloudOnlyMicrosoftADCurrentCount: {
                                type: "integer"
                            },
                            CloudOnlyMicrosoftADLimitReached: {
                                type: "boolean"
                            },
                            ConnectedDirectoriesLimit: {
                                type: "integer"
                            },
                            ConnectedDirectoriesCurrentCount: {
                                type: "integer"
                            },
                            ConnectedDirectoriesLimitReached: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        GetSnapshotLimits: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotLimits: {
                        type: "structure",
                        members: {
                            ManualSnapshotsLimit: {
                                type: "integer"
                            },
                            ManualSnapshotsCurrentCount: {
                                type: "integer"
                            },
                            ManualSnapshotsLimitReached: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        ListCertificates: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CertificatesInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CertificateId: {},
                                CommonName: {},
                                State: {},
                                ExpiryDateTime: {
                                    type: "timestamp"
                                },
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        ListIpRoutes: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpRoutesInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                CidrIp: {},
                                IpRouteStatusMsg: {},
                                AddedDateTime: {
                                    type: "timestamp"
                                },
                                IpRouteStatusReason: {},
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLogSubscriptions: {
            input: {
                type: "structure",
                members: {
                    DirectoryId: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LogSubscriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                LogGroupName: {},
                                SubscriptionCreatedDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemaExtensions: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaExtensionsInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                SchemaExtensionId: {},
                                Description: {},
                                SchemaExtensionStatus: {},
                                SchemaExtensionStatusReason: {},
                                StartDateTime: {
                                    type: "timestamp"
                                },
                                EndDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    NextToken: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sr"
                    },
                    NextToken: {}
                }
            }
        },
        RegisterCertificate: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "CertificateData" ],
                members: {
                    DirectoryId: {},
                    CertificateData: {},
                    Type: {},
                    ClientCertAuthSettings: {
                        shape: "S30"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateId: {}
                }
            }
        },
        RegisterEventTopic: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "TopicName" ],
                members: {
                    DirectoryId: {},
                    TopicName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RejectSharedDirectory: {
            input: {
                type: "structure",
                required: [ "SharedDirectoryId" ],
                members: {
                    SharedDirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SharedDirectoryId: {}
                }
            }
        },
        RemoveIpRoutes: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "CidrIps" ],
                members: {
                    DirectoryId: {},
                    CidrIps: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveRegion: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeys" ],
                members: {
                    ResourceId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResetUserPassword: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "UserName", "NewPassword" ],
                members: {
                    DirectoryId: {},
                    UserName: {},
                    NewPassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RestoreFromSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ShareDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "ShareTarget", "ShareMethod" ],
                members: {
                    DirectoryId: {},
                    ShareNotes: {
                        shape: "S8"
                    },
                    ShareTarget: {
                        type: "structure",
                        required: [ "Id", "Type" ],
                        members: {
                            Id: {},
                            Type: {}
                        }
                    },
                    ShareMethod: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SharedDirectoryId: {}
                }
            }
        },
        StartSchemaExtension: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "CreateSnapshotBeforeSchemaExtension", "LdifContent", "Description" ],
                members: {
                    DirectoryId: {},
                    CreateSnapshotBeforeSchemaExtension: {
                        type: "boolean"
                    },
                    LdifContent: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaExtensionId: {}
                }
            }
        },
        UnshareDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "UnshareTarget" ],
                members: {
                    DirectoryId: {},
                    UnshareTarget: {
                        type: "structure",
                        required: [ "Id", "Type" ],
                        members: {
                            Id: {},
                            Type: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SharedDirectoryId: {}
                }
            }
        },
        UpdateConditionalForwarder: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RemoteDomainName", "DnsIpAddrs" ],
                members: {
                    DirectoryId: {},
                    RemoteDomainName: {},
                    DnsIpAddrs: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDirectorySetup: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "UpdateType" ],
                members: {
                    DirectoryId: {},
                    UpdateType: {},
                    OSUpdateSettings: {
                        shape: "S6b"
                    },
                    CreateSnapshotBeforeUpdate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNumberOfDomainControllers: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "DesiredNumber" ],
                members: {
                    DirectoryId: {},
                    DesiredNumber: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRadius: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "RadiusSettings" ],
                members: {
                    DirectoryId: {},
                    RadiusSettings: {
                        shape: "S3w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSettings: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "Settings" ],
                members: {
                    DirectoryId: {},
                    Settings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DirectoryId: {}
                }
            }
        },
        UpdateTrust: {
            input: {
                type: "structure",
                required: [ "TrustId" ],
                members: {
                    TrustId: {},
                    SelectiveAuth: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestId: {},
                    TrustId: {}
                }
            }
        },
        VerifyTrust: {
            input: {
                type: "structure",
                required: [ "TrustId" ],
                members: {
                    TrustId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrustId: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                OwnerAccountId: {},
                OwnerDirectoryId: {},
                ShareMethod: {},
                SharedAccountId: {},
                SharedDirectoryId: {},
                ShareStatus: {},
                ShareNotes: {
                    shape: "S8"
                },
                CreatedDateTime: {
                    type: "timestamp"
                },
                LastUpdatedDateTime: {
                    type: "timestamp"
                }
            }
        },
        S8: {
            type: "string",
            sensitive: true
        },
        Sk: {
            type: "structure",
            required: [ "VpcId", "SubnetIds" ],
            members: {
                VpcId: {},
                SubnetIds: {
                    shape: "Sm"
                }
            }
        },
        Sm: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S12: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S1r: {
            type: "string",
            sensitive: true
        },
        S30: {
            type: "structure",
            members: {
                OCSPUrl: {}
            }
        },
        S3h: {
            type: "list",
            member: {}
        },
        S3q: {
            type: "structure",
            members: {
                VpcId: {},
                SubnetIds: {
                    shape: "Sm"
                },
                SecurityGroupId: {},
                AvailabilityZones: {
                    shape: "S3s"
                }
            }
        },
        S3s: {
            type: "list",
            member: {}
        },
        S3w: {
            type: "structure",
            members: {
                RadiusServers: {
                    type: "list",
                    member: {}
                },
                RadiusPort: {
                    type: "integer"
                },
                RadiusTimeout: {
                    type: "integer"
                },
                RadiusRetries: {
                    type: "integer"
                },
                SharedSecret: {
                    type: "string",
                    sensitive: true
                },
                AuthenticationProtocol: {},
                DisplayLabel: {},
                UseSameUsername: {
                    type: "boolean"
                }
            }
        },
        S6a: {
            type: "structure",
            members: {
                OSUpdateSettings: {
                    shape: "S6b"
                }
            }
        },
        S6b: {
            type: "structure",
            members: {
                OSVersion: {}
            }
        }
    },
    paginators: {
        DescribeClientAuthenticationSettings: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "ClientAuthenticationSettingsInfo"
        },
        DescribeDirectories: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "DirectoryDescriptions"
        },
        DescribeDomainControllers: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken"
        },
        DescribeLDAPSSettings: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "LDAPSSettingsInfo"
        },
        DescribeRegions: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "RegionsDescription"
        },
        DescribeSharedDirectories: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "SharedDirectories"
        },
        DescribeSnapshots: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Snapshots"
        },
        DescribeTrusts: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Trusts"
        },
        DescribeUpdateDirectory: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "UpdateActivities"
        },
        ListCertificates: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "CertificatesInfo"
        },
        ListIpRoutes: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "IpRoutesInfo"
        },
        ListLogSubscriptions: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "LogSubscriptions"
        },
        ListSchemaExtensions: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "SchemaExtensionsInfo"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["discovery"] = {};

AWS.Discovery = AWS.Service.defineService("discovery", [ "2015-11-01" ]);

AWS.apiLoader.services["discovery"]["2015-11-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-11-01",
        endpointPrefix: "discovery",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Application Discovery Service",
        serviceId: "Application Discovery Service",
        signatureVersion: "v4",
        targetPrefix: "AWSPoseidonService_V2015_11_01",
        uid: "discovery-2015-11-01"
    },
    operations: {
        AssociateConfigurationItemsToApplication: {
            input: {
                type: "structure",
                required: [ "applicationConfigurationId", "configurationIds" ],
                members: {
                    applicationConfigurationId: {},
                    configurationIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchDeleteAgents: {
            input: {
                type: "structure",
                required: [ "deleteAgents" ],
                members: {
                    deleteAgents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentId" ],
                            members: {
                                agentId: {},
                                force: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "agentId", "errorMessage", "errorCode" ],
                            members: {
                                agentId: {},
                                errorMessage: {},
                                errorCode: {}
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteImportData: {
            input: {
                type: "structure",
                required: [ "importTaskIds" ],
                members: {
                    importTaskIds: {
                        type: "list",
                        member: {}
                    },
                    deleteHistory: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                importTaskId: {},
                                errorCode: {},
                                errorDescription: {}
                            }
                        }
                    }
                }
            }
        },
        CreateApplication: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    configurationId: {}
                }
            }
        },
        CreateTags: {
            input: {
                type: "structure",
                required: [ "configurationIds", "tags" ],
                members: {
                    configurationIds: {
                        shape: "S3"
                    },
                    tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApplications: {
            input: {
                type: "structure",
                required: [ "configurationIds" ],
                members: {
                    configurationIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "configurationIds" ],
                members: {
                    configurationIds: {
                        shape: "S3"
                    },
                    tags: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAgents: {
            input: {
                type: "structure",
                members: {
                    agentIds: {
                        shape: "S14"
                    },
                    filters: {
                        shape: "S15"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    agentsInfo: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                agentId: {},
                                hostName: {},
                                agentNetworkInfoList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ipAddress: {},
                                            macAddress: {}
                                        },
                                        sensitive: true
                                    }
                                },
                                connectorId: {},
                                version: {},
                                health: {},
                                lastHealthPingTime: {},
                                collectionStatus: {},
                                agentType: {},
                                registeredTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeBatchDeleteConfigurationTask: {
            input: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    task: {
                        type: "structure",
                        members: {
                            taskId: {},
                            status: {},
                            startTime: {
                                type: "timestamp"
                            },
                            endTime: {
                                type: "timestamp"
                            },
                            configurationType: {},
                            requestedConfigurations: {
                                shape: "S3"
                            },
                            deletedConfigurations: {
                                shape: "S3"
                            },
                            failedConfigurations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        configurationId: {},
                                        errorStatusCode: {
                                            type: "integer"
                                        },
                                        errorMessage: {}
                                    }
                                }
                            },
                            deletionWarnings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        configurationId: {},
                                        warningCode: {
                                            type: "integer"
                                        },
                                        warningText: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConfigurations: {
            input: {
                type: "structure",
                required: [ "configurationIds" ],
                members: {
                    configurationIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    configurations: {
                        type: "list",
                        member: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                }
            }
        },
        DescribeContinuousExports: {
            input: {
                type: "structure",
                members: {
                    exportIds: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    descriptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                exportId: {},
                                status: {},
                                statusDetail: {},
                                s3Bucket: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                stopTime: {
                                    type: "timestamp"
                                },
                                dataSource: {},
                                schemaStorageConfig: {
                                    shape: "S2c"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeExportConfigurations: {
            input: {
                type: "structure",
                members: {
                    exportIds: {
                        shape: "S2f"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    exportsInfo: {
                        shape: "S2h"
                    },
                    nextToken: {}
                }
            },
            deprecated: true
        },
        DescribeExportTasks: {
            input: {
                type: "structure",
                members: {
                    exportIds: {
                        shape: "S2f"
                    },
                    filters: {
                        shape: "S2o"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    exportsInfo: {
                        shape: "S2h"
                    },
                    nextToken: {}
                }
            }
        },
        DescribeImportTasks: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tasks: {
                        type: "list",
                        member: {
                            shape: "S31"
                        }
                    }
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "values" ],
                            members: {
                                name: {},
                                values: {
                                    shape: "S17"
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                configurationType: {},
                                configurationId: {},
                                key: {},
                                value: {},
                                timeOfCreation: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisassociateConfigurationItemsFromApplication: {
            input: {
                type: "structure",
                required: [ "applicationConfigurationId", "configurationIds" ],
                members: {
                    applicationConfigurationId: {},
                    configurationIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExportConfigurations: {
            output: {
                type: "structure",
                members: {
                    exportId: {}
                }
            },
            deprecated: true
        },
        GetDiscoverySummary: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    servers: {
                        type: "long"
                    },
                    applications: {
                        type: "long"
                    },
                    serversMappedToApplications: {
                        type: "long"
                    },
                    serversMappedtoTags: {
                        type: "long"
                    },
                    agentSummary: {
                        type: "structure",
                        required: [ "activeAgents", "healthyAgents", "blackListedAgents", "shutdownAgents", "unhealthyAgents", "totalAgents", "unknownAgents" ],
                        members: {
                            activeAgents: {
                                type: "integer"
                            },
                            healthyAgents: {
                                type: "integer"
                            },
                            blackListedAgents: {
                                type: "integer"
                            },
                            shutdownAgents: {
                                type: "integer"
                            },
                            unhealthyAgents: {
                                type: "integer"
                            },
                            totalAgents: {
                                type: "integer"
                            },
                            unknownAgents: {
                                type: "integer"
                            }
                        }
                    },
                    connectorSummary: {
                        type: "structure",
                        required: [ "activeConnectors", "healthyConnectors", "blackListedConnectors", "shutdownConnectors", "unhealthyConnectors", "totalConnectors", "unknownConnectors" ],
                        members: {
                            activeConnectors: {
                                type: "integer"
                            },
                            healthyConnectors: {
                                type: "integer"
                            },
                            blackListedConnectors: {
                                type: "integer"
                            },
                            shutdownConnectors: {
                                type: "integer"
                            },
                            unhealthyConnectors: {
                                type: "integer"
                            },
                            totalConnectors: {
                                type: "integer"
                            },
                            unknownConnectors: {
                                type: "integer"
                            }
                        }
                    },
                    meCollectorSummary: {
                        type: "structure",
                        required: [ "activeMeCollectors", "healthyMeCollectors", "denyListedMeCollectors", "shutdownMeCollectors", "unhealthyMeCollectors", "totalMeCollectors", "unknownMeCollectors" ],
                        members: {
                            activeMeCollectors: {
                                type: "integer"
                            },
                            healthyMeCollectors: {
                                type: "integer"
                            },
                            denyListedMeCollectors: {
                                type: "integer"
                            },
                            shutdownMeCollectors: {
                                type: "integer"
                            },
                            unhealthyMeCollectors: {
                                type: "integer"
                            },
                            totalMeCollectors: {
                                type: "integer"
                            },
                            unknownMeCollectors: {
                                type: "integer"
                            }
                        }
                    },
                    agentlessCollectorSummary: {
                        type: "structure",
                        required: [ "activeAgentlessCollectors", "healthyAgentlessCollectors", "denyListedAgentlessCollectors", "shutdownAgentlessCollectors", "unhealthyAgentlessCollectors", "totalAgentlessCollectors", "unknownAgentlessCollectors" ],
                        members: {
                            activeAgentlessCollectors: {
                                type: "integer"
                            },
                            healthyAgentlessCollectors: {
                                type: "integer"
                            },
                            denyListedAgentlessCollectors: {
                                type: "integer"
                            },
                            shutdownAgentlessCollectors: {
                                type: "integer"
                            },
                            unhealthyAgentlessCollectors: {
                                type: "integer"
                            },
                            totalAgentlessCollectors: {
                                type: "integer"
                            },
                            unknownAgentlessCollectors: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        ListConfigurations: {
            input: {
                type: "structure",
                required: [ "configurationType" ],
                members: {
                    configurationType: {},
                    filters: {
                        shape: "S15"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    orderBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldName" ],
                            members: {
                                fieldName: {},
                                sortOrder: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    configurations: {
                        type: "list",
                        member: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListServerNeighbors: {
            input: {
                type: "structure",
                required: [ "configurationId" ],
                members: {
                    configurationId: {},
                    portInformationNeeded: {
                        type: "boolean"
                    },
                    neighborConfigurationIds: {
                        shape: "S3"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "neighbors" ],
                members: {
                    neighbors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceServerId", "destinationServerId", "connectionsCount" ],
                            members: {
                                sourceServerId: {},
                                destinationServerId: {},
                                destinationPort: {
                                    type: "integer"
                                },
                                transportProtocol: {},
                                connectionsCount: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    nextToken: {},
                    knownDependencyCount: {
                        type: "long"
                    }
                }
            }
        },
        StartBatchDeleteConfigurationTask: {
            input: {
                type: "structure",
                required: [ "configurationType", "configurationIds" ],
                members: {
                    configurationType: {},
                    configurationIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    taskId: {}
                }
            }
        },
        StartContinuousExport: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    exportId: {},
                    s3Bucket: {},
                    startTime: {
                        type: "timestamp"
                    },
                    dataSource: {},
                    schemaStorageConfig: {
                        shape: "S2c"
                    }
                }
            }
        },
        StartDataCollectionByAgentIds: {
            input: {
                type: "structure",
                required: [ "agentIds" ],
                members: {
                    agentIds: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    agentsConfigurationStatus: {
                        shape: "S47"
                    }
                }
            }
        },
        StartExportTask: {
            input: {
                type: "structure",
                members: {
                    exportDataFormat: {
                        type: "list",
                        member: {}
                    },
                    filters: {
                        shape: "S2o"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    preferences: {
                        type: "structure",
                        members: {
                            ec2RecommendationsPreferences: {
                                type: "structure",
                                members: {
                                    enabled: {
                                        type: "boolean"
                                    },
                                    cpuPerformanceMetricBasis: {
                                        shape: "S4f"
                                    },
                                    ramPerformanceMetricBasis: {
                                        shape: "S4f"
                                    },
                                    tenancy: {},
                                    excludedInstanceTypes: {
                                        type: "list",
                                        member: {}
                                    },
                                    preferredRegion: {},
                                    reservedInstanceOptions: {
                                        type: "structure",
                                        required: [ "purchasingOption", "offeringClass", "termLength" ],
                                        members: {
                                            purchasingOption: {},
                                            offeringClass: {},
                                            termLength: {}
                                        }
                                    }
                                }
                            }
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    exportId: {}
                }
            }
        },
        StartImportTask: {
            input: {
                type: "structure",
                required: [ "name", "importUrl" ],
                members: {
                    clientRequestToken: {
                        idempotencyToken: true
                    },
                    name: {},
                    importUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    task: {
                        shape: "S31"
                    }
                }
            }
        },
        StopContinuousExport: {
            input: {
                type: "structure",
                required: [ "exportId" ],
                members: {
                    exportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    startTime: {
                        type: "timestamp"
                    },
                    stopTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StopDataCollectionByAgentIds: {
            input: {
                type: "structure",
                required: [ "agentIds" ],
                members: {
                    agentIds: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    agentsConfigurationStatus: {
                        shape: "S47"
                    }
                }
            }
        },
        UpdateApplication: {
            input: {
                type: "structure",
                required: [ "configurationId" ],
                members: {
                    configurationId: {},
                    name: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S15: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "values", "condition" ],
                members: {
                    name: {},
                    values: {
                        shape: "S17"
                    },
                    condition: {}
                }
            }
        },
        S17: {
            type: "list",
            member: {}
        },
        S2c: {
            type: "map",
            key: {},
            value: {}
        },
        S2f: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "exportId", "exportStatus", "statusMessage", "exportRequestTime" ],
                members: {
                    exportId: {},
                    exportStatus: {},
                    statusMessage: {},
                    configurationsDownloadUrl: {},
                    exportRequestTime: {
                        type: "timestamp"
                    },
                    isTruncated: {
                        type: "boolean"
                    },
                    requestedStartTime: {
                        type: "timestamp"
                    },
                    requestedEndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S2o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "values", "condition" ],
                members: {
                    name: {},
                    values: {
                        shape: "S17"
                    },
                    condition: {}
                }
            }
        },
        S31: {
            type: "structure",
            members: {
                importTaskId: {},
                clientRequestToken: {},
                name: {},
                importUrl: {},
                status: {},
                importRequestTime: {
                    type: "timestamp"
                },
                importCompletionTime: {
                    type: "timestamp"
                },
                importDeletedTime: {
                    type: "timestamp"
                },
                serverImportSuccess: {
                    type: "integer"
                },
                serverImportFailure: {
                    type: "integer"
                },
                applicationImportSuccess: {
                    type: "integer"
                },
                applicationImportFailure: {
                    type: "integer"
                },
                errorsAndFailedEntriesZip: {}
            }
        },
        S47: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    agentId: {},
                    operationSucceeded: {
                        type: "boolean"
                    },
                    description: {}
                }
            }
        },
        S4f: {
            type: "structure",
            members: {
                name: {},
                percentageAdjust: {
                    type: "double"
                }
            }
        }
    },
    paginators: {
        DescribeAgents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "agentsInfo"
        },
        DescribeContinuousExports: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "descriptions"
        },
        DescribeExportConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "exportsInfo"
        },
        DescribeExportTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "exportsInfo"
        },
        DescribeImportTasks: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tasks"
        },
        DescribeTags: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tags"
        },
        ListConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "configurations"
        }
    }
};

AWS.apiLoader.services["dms"] = {};

AWS.DMS = AWS.Service.defineService("dms", [ "2016-01-01" ]);

AWS.apiLoader.services["dms"]["2016-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-01-01",
        endpointPrefix: "dms",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Database Migration Service",
        serviceId: "Database Migration Service",
        signatureVersion: "v4",
        targetPrefix: "AmazonDMSv20160101",
        uid: "dms-2016-01-01"
    },
    operations: {
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ApplyPendingMaintenanceAction: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceArn", "ApplyAction", "OptInType" ],
                members: {
                    ReplicationInstanceArn: {},
                    ApplyAction: {},
                    OptInType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourcePendingMaintenanceActions: {
                        shape: "S8"
                    }
                }
            }
        },
        BatchStartRecommendations: {
            input: {
                type: "structure",
                members: {
                    Data: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DatabaseId", "Settings" ],
                            members: {
                                DatabaseId: {},
                                Settings: {
                                    shape: "Sf"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ErrorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatabaseId: {},
                                Message: {},
                                Code: {}
                            }
                        }
                    }
                }
            }
        },
        CancelReplicationTaskAssessmentRun: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskAssessmentRunArn" ],
                members: {
                    ReplicationTaskAssessmentRunArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTaskAssessmentRun: {
                        shape: "Sl"
                    }
                }
            }
        },
        CreateDataProvider: {
            input: {
                type: "structure",
                required: [ "Engine", "Settings" ],
                members: {
                    DataProviderName: {},
                    Description: {},
                    Engine: {},
                    Settings: {
                        shape: "Sp"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataProvider: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointIdentifier", "EndpointType", "EngineName" ],
                members: {
                    EndpointIdentifier: {},
                    EndpointType: {},
                    EngineName: {},
                    Username: {},
                    Password: {
                        shape: "S17"
                    },
                    ServerName: {},
                    Port: {
                        type: "integer"
                    },
                    DatabaseName: {},
                    ExtraConnectionAttributes: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S3"
                    },
                    CertificateArn: {},
                    SslMode: {},
                    ServiceAccessRoleArn: {},
                    ExternalTableDefinition: {},
                    DynamoDbSettings: {
                        shape: "S18"
                    },
                    S3Settings: {
                        shape: "S19"
                    },
                    DmsTransferSettings: {
                        shape: "S1j"
                    },
                    MongoDbSettings: {
                        shape: "S1k"
                    },
                    KinesisSettings: {
                        shape: "S1m"
                    },
                    KafkaSettings: {
                        shape: "S1o"
                    },
                    ElasticsearchSettings: {
                        shape: "S1s"
                    },
                    NeptuneSettings: {
                        shape: "S1t"
                    },
                    RedshiftSettings: {
                        shape: "S1u"
                    },
                    PostgreSQLSettings: {
                        shape: "S1v"
                    },
                    MySQLSettings: {
                        shape: "S1z"
                    },
                    OracleSettings: {
                        shape: "S21"
                    },
                    SybaseSettings: {
                        shape: "S24"
                    },
                    MicrosoftSQLServerSettings: {
                        shape: "S25"
                    },
                    IBMDb2Settings: {
                        shape: "S28"
                    },
                    ResourceIdentifier: {},
                    DocDbSettings: {
                        shape: "S29"
                    },
                    RedisSettings: {
                        shape: "S2a"
                    },
                    GcpMySQLSettings: {
                        shape: "S2d"
                    },
                    TimestreamSettings: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        shape: "S2g"
                    }
                }
            }
        },
        CreateEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName", "SnsTopicArn" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S2i"
                    },
                    SourceIds: {
                        shape: "S2j"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S2l"
                    }
                }
            }
        },
        CreateFleetAdvisorCollector: {
            input: {
                type: "structure",
                required: [ "CollectorName", "ServiceAccessRoleArn", "S3BucketName" ],
                members: {
                    CollectorName: {},
                    Description: {},
                    ServiceAccessRoleArn: {},
                    S3BucketName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CollectorReferencedId: {},
                    CollectorName: {},
                    Description: {},
                    ServiceAccessRoleArn: {},
                    S3BucketName: {}
                }
            }
        },
        CreateInstanceProfile: {
            input: {
                type: "structure",
                members: {
                    AvailabilityZone: {},
                    KmsKeyArn: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S3"
                    },
                    NetworkType: {},
                    InstanceProfileName: {},
                    Description: {},
                    SubnetGroupIdentifier: {},
                    VpcSecurityGroups: {
                        shape: "S2q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceProfile: {
                        shape: "S2s"
                    }
                }
            }
        },
        CreateMigrationProject: {
            input: {
                type: "structure",
                required: [ "SourceDataProviderDescriptors", "TargetDataProviderDescriptors", "InstanceProfileIdentifier" ],
                members: {
                    MigrationProjectName: {},
                    SourceDataProviderDescriptors: {
                        shape: "S2u"
                    },
                    TargetDataProviderDescriptors: {
                        shape: "S2u"
                    },
                    InstanceProfileIdentifier: {},
                    TransformationRules: {},
                    Description: {},
                    Tags: {
                        shape: "S3"
                    },
                    SchemaConversionApplicationAttributes: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationProject: {
                        shape: "S2y"
                    }
                }
            }
        },
        CreateReplicationConfig: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigIdentifier", "SourceEndpointArn", "TargetEndpointArn", "ComputeConfig", "ReplicationType", "TableMappings" ],
                members: {
                    ReplicationConfigIdentifier: {},
                    SourceEndpointArn: {},
                    TargetEndpointArn: {},
                    ComputeConfig: {
                        shape: "S32"
                    },
                    ReplicationType: {},
                    TableMappings: {},
                    ReplicationSettings: {},
                    SupplementalSettings: {},
                    ResourceIdentifier: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfig: {
                        shape: "S35"
                    }
                }
            }
        },
        CreateReplicationInstance: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceIdentifier", "ReplicationInstanceClass" ],
                members: {
                    ReplicationInstanceIdentifier: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    ReplicationInstanceClass: {},
                    VpcSecurityGroupIds: {
                        shape: "S37"
                    },
                    AvailabilityZone: {},
                    ReplicationSubnetGroupIdentifier: {},
                    PreferredMaintenanceWindow: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S3"
                    },
                    KmsKeyId: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    DnsNameServers: {},
                    ResourceIdentifier: {},
                    NetworkType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationInstance: {
                        shape: "S39"
                    }
                }
            }
        },
        CreateReplicationSubnetGroup: {
            input: {
                type: "structure",
                required: [ "ReplicationSubnetGroupIdentifier", "ReplicationSubnetGroupDescription", "SubnetIds" ],
                members: {
                    ReplicationSubnetGroupIdentifier: {},
                    ReplicationSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S3l"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationSubnetGroup: {
                        shape: "S3c"
                    }
                }
            }
        },
        CreateReplicationTask: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskIdentifier", "SourceEndpointArn", "TargetEndpointArn", "ReplicationInstanceArn", "MigrationType", "TableMappings" ],
                members: {
                    ReplicationTaskIdentifier: {},
                    SourceEndpointArn: {},
                    TargetEndpointArn: {},
                    ReplicationInstanceArn: {},
                    MigrationType: {},
                    TableMappings: {},
                    ReplicationTaskSettings: {},
                    CdcStartTime: {
                        type: "timestamp"
                    },
                    CdcStartPosition: {},
                    CdcStopPosition: {},
                    Tags: {
                        shape: "S3"
                    },
                    TaskData: {},
                    ResourceIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        DeleteCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {
                        shape: "S3u"
                    }
                }
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "EndpointArn", "ReplicationInstanceArn" ],
                members: {
                    EndpointArn: {},
                    ReplicationInstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S3y"
                    }
                }
            }
        },
        DeleteDataProvider: {
            input: {
                type: "structure",
                required: [ "DataProviderIdentifier" ],
                members: {
                    DataProviderIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataProvider: {
                        shape: "S13"
                    }
                }
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        shape: "S2g"
                    }
                }
            }
        },
        DeleteEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S2l"
                    }
                }
            }
        },
        DeleteFleetAdvisorCollector: {
            input: {
                type: "structure",
                required: [ "CollectorReferencedId" ],
                members: {
                    CollectorReferencedId: {}
                }
            }
        },
        DeleteFleetAdvisorDatabases: {
            input: {
                type: "structure",
                required: [ "DatabaseIds" ],
                members: {
                    DatabaseIds: {
                        shape: "S2q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatabaseIds: {
                        shape: "S2q"
                    }
                }
            }
        },
        DeleteInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileIdentifier" ],
                members: {
                    InstanceProfileIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceProfile: {
                        shape: "S2s"
                    }
                }
            }
        },
        DeleteMigrationProject: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationProject: {
                        shape: "S2y"
                    }
                }
            }
        },
        DeleteReplicationConfig: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigArn" ],
                members: {
                    ReplicationConfigArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfig: {
                        shape: "S35"
                    }
                }
            }
        },
        DeleteReplicationInstance: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceArn" ],
                members: {
                    ReplicationInstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationInstance: {
                        shape: "S39"
                    }
                }
            }
        },
        DeleteReplicationSubnetGroup: {
            input: {
                type: "structure",
                required: [ "ReplicationSubnetGroupIdentifier" ],
                members: {
                    ReplicationSubnetGroupIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReplicationTask: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn" ],
                members: {
                    ReplicationTaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        DeleteReplicationTaskAssessmentRun: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskAssessmentRunArn" ],
                members: {
                    ReplicationTaskAssessmentRunArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTaskAssessmentRun: {
                        shape: "Sl"
                    }
                }
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AccountQuotas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountQuotaName: {},
                                Used: {
                                    type: "long"
                                },
                                Max: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    UniqueAccountIdentifier: {}
                }
            }
        },
        DescribeApplicableIndividualAssessments: {
            input: {
                type: "structure",
                members: {
                    ReplicationTaskArn: {},
                    ReplicationInstanceArn: {},
                    SourceEngineName: {},
                    TargetEngineName: {},
                    MigrationType: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IndividualAssessmentNames: {
                        type: "list",
                        member: {}
                    },
                    Marker: {}
                }
            }
        },
        DescribeCertificates: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Certificates: {
                        type: "list",
                        member: {
                            shape: "S3u"
                        }
                    }
                }
            }
        },
        DescribeConnections: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Connections: {
                        type: "list",
                        member: {
                            shape: "S3y"
                        }
                    }
                }
            }
        },
        DescribeConversionConfiguration: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationProjectIdentifier: {},
                    ConversionConfiguration: {}
                }
            }
        },
        DescribeDataProviders: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    DataProviders: {
                        type: "list",
                        member: {
                            shape: "S13"
                        }
                    }
                }
            }
        },
        DescribeEndpointSettings: {
            input: {
                type: "structure",
                required: [ "EngineName" ],
                members: {
                    EngineName: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    EndpointSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {},
                                EnumValues: {
                                    type: "list",
                                    member: {}
                                },
                                Sensitive: {
                                    type: "boolean"
                                },
                                Units: {},
                                Applicability: {},
                                IntValueMin: {
                                    type: "integer"
                                },
                                IntValueMax: {
                                    type: "integer"
                                },
                                DefaultValue: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeEndpointTypes: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    SupportedEndpointTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EngineName: {},
                                SupportsCDC: {
                                    type: "boolean"
                                },
                                EndpointType: {},
                                ReplicationInstanceEngineMinimumVersion: {},
                                EngineDisplayName: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeEndpoints: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Endpoints: {
                        type: "list",
                        member: {
                            shape: "S2g"
                        }
                    }
                }
            }
        },
        DescribeEngineVersions: {
            input: {
                type: "structure",
                members: {
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EngineVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Version: {},
                                Lifecycle: {},
                                ReleaseStatus: {},
                                LaunchDate: {
                                    type: "timestamp"
                                },
                                AutoUpgradeDate: {
                                    type: "timestamp"
                                },
                                DeprecationDate: {
                                    type: "timestamp"
                                },
                                ForceUpgradeDate: {
                                    type: "timestamp"
                                },
                                AvailableUpgrades: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeEventCategories: {
            input: {
                type: "structure",
                members: {
                    SourceType: {},
                    Filters: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventCategoryGroupList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceType: {},
                                EventCategories: {
                                    shape: "S2i"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeEventSubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionName: {},
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    EventSubscriptionsList: {
                        type: "list",
                        member: {
                            shape: "S2l"
                        }
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceIdentifier: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    EventCategories: {
                        shape: "S2i"
                    },
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceIdentifier: {},
                                SourceType: {},
                                Message: {},
                                EventCategories: {
                                    shape: "S2i"
                                },
                                Date: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeExtensionPackAssociations: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Requests: {
                        shape: "S64"
                    }
                }
            }
        },
        DescribeFleetAdvisorCollectors: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Collectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CollectorReferencedId: {},
                                CollectorName: {},
                                CollectorVersion: {},
                                VersionStatus: {},
                                Description: {},
                                S3BucketName: {},
                                ServiceAccessRoleArn: {},
                                CollectorHealthCheck: {
                                    type: "structure",
                                    members: {
                                        CollectorStatus: {},
                                        LocalCollectorS3Access: {
                                            type: "boolean"
                                        },
                                        WebCollectorS3Access: {
                                            type: "boolean"
                                        },
                                        WebCollectorGrantedRoleBasedAccess: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                LastDataReceived: {},
                                RegisteredDate: {},
                                CreatedDate: {},
                                ModifiedDate: {},
                                InventoryData: {
                                    type: "structure",
                                    members: {
                                        NumberOfDatabases: {
                                            type: "integer"
                                        },
                                        NumberOfSchemas: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetAdvisorDatabases: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Databases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatabaseId: {},
                                DatabaseName: {},
                                IpAddress: {},
                                NumberOfSchemas: {
                                    type: "long"
                                },
                                Server: {
                                    shape: "S6m"
                                },
                                SoftwareDetails: {
                                    type: "structure",
                                    members: {
                                        Engine: {},
                                        EngineVersion: {},
                                        EngineEdition: {},
                                        ServicePack: {},
                                        SupportLevel: {},
                                        OsArchitecture: {
                                            type: "integer"
                                        },
                                        Tooltip: {}
                                    }
                                },
                                Collectors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CollectorReferencedId: {},
                                            CollectorName: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetAdvisorLsaAnalysis: {
            input: {
                type: "structure",
                members: {
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Analysis: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LsaAnalysisId: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetAdvisorSchemaObjectSummary: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetAdvisorSchemaObjects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SchemaId: {},
                                ObjectType: {},
                                NumberOfObjects: {
                                    type: "long"
                                },
                                CodeLineCount: {
                                    type: "long"
                                },
                                CodeSize: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeFleetAdvisorSchemas: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetAdvisorSchemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CodeLineCount: {
                                    type: "long"
                                },
                                CodeSize: {
                                    type: "long"
                                },
                                Complexity: {},
                                Server: {
                                    shape: "S6m"
                                },
                                DatabaseInstance: {
                                    type: "structure",
                                    members: {
                                        DatabaseId: {},
                                        DatabaseName: {},
                                        DatabaseIpAddress: {},
                                        DatabaseEngine: {}
                                    }
                                },
                                SchemaId: {},
                                SchemaName: {},
                                OriginalSchema: {
                                    type: "structure",
                                    members: {
                                        SchemaId: {},
                                        SchemaName: {},
                                        DatabaseId: {},
                                        DatabaseName: {},
                                        DatabaseIpAddress: {}
                                    }
                                },
                                Similarity: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstanceProfiles: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    InstanceProfiles: {
                        type: "list",
                        member: {
                            shape: "S2s"
                        }
                    }
                }
            }
        },
        DescribeMetadataModelAssessments: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Requests: {
                        shape: "S64"
                    }
                }
            }
        },
        DescribeMetadataModelConversions: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Requests: {
                        shape: "S64"
                    }
                }
            }
        },
        DescribeMetadataModelExportsAsScript: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Requests: {
                        shape: "S64"
                    }
                }
            }
        },
        DescribeMetadataModelExportsToTarget: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Requests: {
                        shape: "S64"
                    }
                }
            }
        },
        DescribeMetadataModelImports: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Requests: {
                        shape: "S64"
                    }
                }
            }
        },
        DescribeMigrationProjects: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    MigrationProjects: {
                        type: "list",
                        member: {
                            shape: "S2y"
                        }
                    }
                }
            }
        },
        DescribeOrderableReplicationInstances: {
            input: {
                type: "structure",
                members: {
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OrderableReplicationInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EngineVersion: {},
                                ReplicationInstanceClass: {},
                                StorageType: {},
                                MinAllocatedStorage: {
                                    type: "integer"
                                },
                                MaxAllocatedStorage: {
                                    type: "integer"
                                },
                                DefaultAllocatedStorage: {
                                    type: "integer"
                                },
                                IncludedAllocatedStorage: {
                                    type: "integer"
                                },
                                AvailabilityZones: {
                                    type: "list",
                                    member: {}
                                },
                                ReleaseStatus: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribePendingMaintenanceActions: {
            input: {
                type: "structure",
                members: {
                    ReplicationInstanceArn: {},
                    Filters: {
                        shape: "S4u"
                    },
                    Marker: {},
                    MaxRecords: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PendingMaintenanceActions: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeRecommendationLimitations: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Limitations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatabaseId: {},
                                EngineName: {},
                                Name: {},
                                Description: {},
                                Impact: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeRecommendations: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DatabaseId: {},
                                EngineName: {},
                                CreatedDate: {},
                                Status: {},
                                Preferred: {
                                    type: "boolean"
                                },
                                Settings: {
                                    shape: "Sf"
                                },
                                Data: {
                                    type: "structure",
                                    members: {
                                        RdsEngine: {
                                            type: "structure",
                                            members: {
                                                RequirementsToTarget: {
                                                    type: "structure",
                                                    members: {
                                                        EngineEdition: {},
                                                        InstanceVcpu: {
                                                            type: "double"
                                                        },
                                                        InstanceMemory: {
                                                            type: "double"
                                                        },
                                                        StorageSize: {
                                                            type: "integer"
                                                        },
                                                        StorageIops: {
                                                            type: "integer"
                                                        },
                                                        DeploymentOption: {},
                                                        EngineVersion: {}
                                                    }
                                                },
                                                TargetConfiguration: {
                                                    type: "structure",
                                                    members: {
                                                        EngineEdition: {},
                                                        InstanceType: {},
                                                        InstanceVcpu: {
                                                            type: "double"
                                                        },
                                                        InstanceMemory: {
                                                            type: "double"
                                                        },
                                                        StorageType: {},
                                                        StorageSize: {
                                                            type: "integer"
                                                        },
                                                        StorageIops: {
                                                            type: "integer"
                                                        },
                                                        DeploymentOption: {},
                                                        EngineVersion: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeRefreshSchemasStatus: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RefreshSchemasStatus: {
                        shape: "S87"
                    }
                }
            }
        },
        DescribeReplicationConfigs: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationConfigs: {
                        type: "list",
                        member: {
                            shape: "S35"
                        }
                    }
                }
            }
        },
        DescribeReplicationInstanceTaskLogs: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceArn" ],
                members: {
                    ReplicationInstanceArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationInstanceArn: {},
                    ReplicationInstanceTaskLogs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReplicationTaskName: {},
                                ReplicationTaskArn: {},
                                ReplicationInstanceTaskLogSize: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeReplicationInstances: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationInstances: {
                        type: "list",
                        member: {
                            shape: "S39"
                        }
                    }
                }
            }
        },
        DescribeReplicationSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationSubnetGroups: {
                        type: "list",
                        member: {
                            shape: "S3c"
                        }
                    }
                }
            }
        },
        DescribeReplicationTableStatistics: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigArn" ],
                members: {
                    ReplicationConfigArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    Filters: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfigArn: {},
                    Marker: {},
                    ReplicationTableStatistics: {
                        type: "list",
                        member: {
                            shape: "S8p"
                        }
                    }
                }
            }
        },
        DescribeReplicationTaskAssessmentResults: {
            input: {
                type: "structure",
                members: {
                    ReplicationTaskArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    BucketName: {},
                    ReplicationTaskAssessmentResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReplicationTaskIdentifier: {},
                                ReplicationTaskArn: {},
                                ReplicationTaskLastAssessmentDate: {
                                    type: "timestamp"
                                },
                                AssessmentStatus: {},
                                AssessmentResultsFile: {},
                                AssessmentResults: {},
                                S3ObjectUrl: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeReplicationTaskAssessmentRuns: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationTaskAssessmentRuns: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        DescribeReplicationTaskIndividualAssessments: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationTaskIndividualAssessments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReplicationTaskIndividualAssessmentArn: {},
                                ReplicationTaskAssessmentRunArn: {},
                                IndividualAssessmentName: {},
                                Status: {},
                                ReplicationTaskIndividualAssessmentStartDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReplicationTasks: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    WithoutSettings: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    ReplicationTasks: {
                        type: "list",
                        member: {
                            shape: "S3p"
                        }
                    }
                }
            }
        },
        DescribeReplications: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S4u"
                    },
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Replications: {
                        type: "list",
                        member: {
                            shape: "S97"
                        }
                    }
                }
            }
        },
        DescribeSchemas: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    Schemas: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        DescribeTableStatistics: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn" ],
                members: {
                    ReplicationTaskArn: {},
                    MaxRecords: {
                        type: "integer"
                    },
                    Marker: {},
                    Filters: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTaskArn: {},
                    TableStatistics: {
                        type: "list",
                        member: {
                            shape: "S8p"
                        }
                    },
                    Marker: {}
                }
            }
        },
        ExportMetadataModelAssessment: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "SelectionRules" ],
                members: {
                    MigrationProjectIdentifier: {},
                    SelectionRules: {},
                    FileName: {},
                    AssessmentReportTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PdfReport: {
                        shape: "S9k"
                    },
                    CsvReport: {
                        shape: "S9k"
                    }
                }
            }
        },
        ImportCertificate: {
            input: {
                type: "structure",
                required: [ "CertificateIdentifier" ],
                members: {
                    CertificateIdentifier: {},
                    CertificatePem: {
                        shape: "S17"
                    },
                    CertificateWallet: {
                        type: "blob"
                    },
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Certificate: {
                        shape: "S3u"
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    ResourceArnList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "S3"
                    }
                }
            }
        },
        ModifyConversionConfiguration: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "ConversionConfiguration" ],
                members: {
                    MigrationProjectIdentifier: {},
                    ConversionConfiguration: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationProjectIdentifier: {}
                }
            }
        },
        ModifyDataProvider: {
            input: {
                type: "structure",
                required: [ "DataProviderIdentifier" ],
                members: {
                    DataProviderIdentifier: {},
                    DataProviderName: {},
                    Description: {},
                    Engine: {},
                    ExactSettings: {
                        type: "boolean"
                    },
                    Settings: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataProvider: {
                        shape: "S13"
                    }
                }
            }
        },
        ModifyEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {},
                    EndpointIdentifier: {},
                    EndpointType: {},
                    EngineName: {},
                    Username: {},
                    Password: {
                        shape: "S17"
                    },
                    ServerName: {},
                    Port: {
                        type: "integer"
                    },
                    DatabaseName: {},
                    ExtraConnectionAttributes: {},
                    CertificateArn: {},
                    SslMode: {},
                    ServiceAccessRoleArn: {},
                    ExternalTableDefinition: {},
                    DynamoDbSettings: {
                        shape: "S18"
                    },
                    S3Settings: {
                        shape: "S19"
                    },
                    DmsTransferSettings: {
                        shape: "S1j"
                    },
                    MongoDbSettings: {
                        shape: "S1k"
                    },
                    KinesisSettings: {
                        shape: "S1m"
                    },
                    KafkaSettings: {
                        shape: "S1o"
                    },
                    ElasticsearchSettings: {
                        shape: "S1s"
                    },
                    NeptuneSettings: {
                        shape: "S1t"
                    },
                    RedshiftSettings: {
                        shape: "S1u"
                    },
                    PostgreSQLSettings: {
                        shape: "S1v"
                    },
                    MySQLSettings: {
                        shape: "S1z"
                    },
                    OracleSettings: {
                        shape: "S21"
                    },
                    SybaseSettings: {
                        shape: "S24"
                    },
                    MicrosoftSQLServerSettings: {
                        shape: "S25"
                    },
                    IBMDb2Settings: {
                        shape: "S28"
                    },
                    DocDbSettings: {
                        shape: "S29"
                    },
                    RedisSettings: {
                        shape: "S2a"
                    },
                    ExactSettings: {
                        type: "boolean"
                    },
                    GcpMySQLSettings: {
                        shape: "S2d"
                    },
                    TimestreamSettings: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoint: {
                        shape: "S2g"
                    }
                }
            }
        },
        ModifyEventSubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionName" ],
                members: {
                    SubscriptionName: {},
                    SnsTopicArn: {},
                    SourceType: {},
                    EventCategories: {
                        shape: "S2i"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventSubscription: {
                        shape: "S2l"
                    }
                }
            }
        },
        ModifyInstanceProfile: {
            input: {
                type: "structure",
                required: [ "InstanceProfileIdentifier" ],
                members: {
                    InstanceProfileIdentifier: {},
                    AvailabilityZone: {},
                    KmsKeyArn: {},
                    PubliclyAccessible: {
                        type: "boolean"
                    },
                    NetworkType: {},
                    InstanceProfileName: {},
                    Description: {},
                    SubnetGroupIdentifier: {},
                    VpcSecurityGroups: {
                        shape: "S2q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceProfile: {
                        shape: "S2s"
                    }
                }
            }
        },
        ModifyMigrationProject: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {},
                    MigrationProjectName: {},
                    SourceDataProviderDescriptors: {
                        shape: "S2u"
                    },
                    TargetDataProviderDescriptors: {
                        shape: "S2u"
                    },
                    InstanceProfileIdentifier: {},
                    TransformationRules: {},
                    Description: {},
                    SchemaConversionApplicationAttributes: {
                        shape: "S2w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationProject: {
                        shape: "S2y"
                    }
                }
            }
        },
        ModifyReplicationConfig: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigArn" ],
                members: {
                    ReplicationConfigArn: {},
                    ReplicationConfigIdentifier: {},
                    ReplicationType: {},
                    TableMappings: {},
                    ReplicationSettings: {},
                    SupplementalSettings: {},
                    ComputeConfig: {
                        shape: "S32"
                    },
                    SourceEndpointArn: {},
                    TargetEndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfig: {
                        shape: "S35"
                    }
                }
            }
        },
        ModifyReplicationInstance: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceArn" ],
                members: {
                    ReplicationInstanceArn: {},
                    AllocatedStorage: {
                        type: "integer"
                    },
                    ApplyImmediately: {
                        type: "boolean"
                    },
                    ReplicationInstanceClass: {},
                    VpcSecurityGroupIds: {
                        shape: "S37"
                    },
                    PreferredMaintenanceWindow: {},
                    MultiAZ: {
                        type: "boolean"
                    },
                    EngineVersion: {},
                    AllowMajorVersionUpgrade: {
                        type: "boolean"
                    },
                    AutoMinorVersionUpgrade: {
                        type: "boolean"
                    },
                    ReplicationInstanceIdentifier: {},
                    NetworkType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationInstance: {
                        shape: "S39"
                    }
                }
            }
        },
        ModifyReplicationSubnetGroup: {
            input: {
                type: "structure",
                required: [ "ReplicationSubnetGroupIdentifier", "SubnetIds" ],
                members: {
                    ReplicationSubnetGroupIdentifier: {},
                    ReplicationSubnetGroupDescription: {},
                    SubnetIds: {
                        shape: "S3l"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationSubnetGroup: {
                        shape: "S3c"
                    }
                }
            }
        },
        ModifyReplicationTask: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn" ],
                members: {
                    ReplicationTaskArn: {},
                    ReplicationTaskIdentifier: {},
                    MigrationType: {},
                    TableMappings: {},
                    ReplicationTaskSettings: {},
                    CdcStartTime: {
                        type: "timestamp"
                    },
                    CdcStartPosition: {},
                    CdcStopPosition: {},
                    TaskData: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        MoveReplicationTask: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn", "TargetReplicationInstanceArn" ],
                members: {
                    ReplicationTaskArn: {},
                    TargetReplicationInstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        RebootReplicationInstance: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceArn" ],
                members: {
                    ReplicationInstanceArn: {},
                    ForceFailover: {
                        type: "boolean"
                    },
                    ForcePlannedFailover: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationInstance: {
                        shape: "S39"
                    }
                }
            }
        },
        RefreshSchemas: {
            input: {
                type: "structure",
                required: [ "EndpointArn", "ReplicationInstanceArn" ],
                members: {
                    EndpointArn: {},
                    ReplicationInstanceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RefreshSchemasStatus: {
                        shape: "S87"
                    }
                }
            }
        },
        ReloadReplicationTables: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigArn", "TablesToReload" ],
                members: {
                    ReplicationConfigArn: {},
                    TablesToReload: {
                        shape: "Sah"
                    },
                    ReloadOption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationConfigArn: {}
                }
            }
        },
        ReloadTables: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn", "TablesToReload" ],
                members: {
                    ReplicationTaskArn: {},
                    TablesToReload: {
                        shape: "Sah"
                    },
                    ReloadOption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTaskArn: {}
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RunFleetAdvisorLsaAnalysis: {
            output: {
                type: "structure",
                members: {
                    LsaAnalysisId: {},
                    Status: {}
                }
            }
        },
        StartExtensionPackAssociation: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier" ],
                members: {
                    MigrationProjectIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestIdentifier: {}
                }
            }
        },
        StartMetadataModelAssessment: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "SelectionRules" ],
                members: {
                    MigrationProjectIdentifier: {},
                    SelectionRules: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestIdentifier: {}
                }
            }
        },
        StartMetadataModelConversion: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "SelectionRules" ],
                members: {
                    MigrationProjectIdentifier: {},
                    SelectionRules: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestIdentifier: {}
                }
            }
        },
        StartMetadataModelExportAsScript: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "SelectionRules", "Origin" ],
                members: {
                    MigrationProjectIdentifier: {},
                    SelectionRules: {},
                    Origin: {},
                    FileName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestIdentifier: {}
                }
            }
        },
        StartMetadataModelExportToTarget: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "SelectionRules" ],
                members: {
                    MigrationProjectIdentifier: {},
                    SelectionRules: {},
                    OverwriteExtensionPack: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestIdentifier: {}
                }
            }
        },
        StartMetadataModelImport: {
            input: {
                type: "structure",
                required: [ "MigrationProjectIdentifier", "SelectionRules", "Origin" ],
                members: {
                    MigrationProjectIdentifier: {},
                    SelectionRules: {},
                    Origin: {},
                    Refresh: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RequestIdentifier: {}
                }
            }
        },
        StartRecommendations: {
            input: {
                type: "structure",
                required: [ "DatabaseId", "Settings" ],
                members: {
                    DatabaseId: {},
                    Settings: {
                        shape: "Sf"
                    }
                }
            }
        },
        StartReplication: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigArn", "StartReplicationType" ],
                members: {
                    ReplicationConfigArn: {},
                    StartReplicationType: {},
                    CdcStartTime: {
                        type: "timestamp"
                    },
                    CdcStartPosition: {},
                    CdcStopPosition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Replication: {
                        shape: "S97"
                    }
                }
            }
        },
        StartReplicationTask: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn", "StartReplicationTaskType" ],
                members: {
                    ReplicationTaskArn: {},
                    StartReplicationTaskType: {},
                    CdcStartTime: {
                        type: "timestamp"
                    },
                    CdcStartPosition: {},
                    CdcStopPosition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        StartReplicationTaskAssessment: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn" ],
                members: {
                    ReplicationTaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        StartReplicationTaskAssessmentRun: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn", "ServiceAccessRoleArn", "ResultLocationBucket", "AssessmentRunName" ],
                members: {
                    ReplicationTaskArn: {},
                    ServiceAccessRoleArn: {},
                    ResultLocationBucket: {},
                    ResultLocationFolder: {},
                    ResultEncryptionMode: {},
                    ResultKmsKeyArn: {},
                    AssessmentRunName: {},
                    IncludeOnly: {
                        type: "list",
                        member: {}
                    },
                    Exclude: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTaskAssessmentRun: {
                        shape: "Sl"
                    }
                }
            }
        },
        StopReplication: {
            input: {
                type: "structure",
                required: [ "ReplicationConfigArn" ],
                members: {
                    ReplicationConfigArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Replication: {
                        shape: "S97"
                    }
                }
            }
        },
        StopReplicationTask: {
            input: {
                type: "structure",
                required: [ "ReplicationTaskArn" ],
                members: {
                    ReplicationTaskArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplicationTask: {
                        shape: "S3p"
                    }
                }
            }
        },
        TestConnection: {
            input: {
                type: "structure",
                required: [ "ReplicationInstanceArn", "EndpointArn" ],
                members: {
                    ReplicationInstanceArn: {},
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "S3y"
                    }
                }
            }
        },
        UpdateSubscriptionsToEventBridge: {
            input: {
                type: "structure",
                members: {
                    ForceMove: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    ResourceArn: {}
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                ResourceIdentifier: {},
                PendingMaintenanceActionDetails: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Action: {},
                            AutoAppliedAfterDate: {
                                type: "timestamp"
                            },
                            ForcedApplyDate: {
                                type: "timestamp"
                            },
                            OptInStatus: {},
                            CurrentApplyDate: {
                                type: "timestamp"
                            },
                            Description: {}
                        }
                    }
                }
            }
        },
        Sf: {
            type: "structure",
            required: [ "InstanceSizingType", "WorkloadType" ],
            members: {
                InstanceSizingType: {},
                WorkloadType: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                ReplicationTaskAssessmentRunArn: {},
                ReplicationTaskArn: {},
                Status: {},
                ReplicationTaskAssessmentRunCreationDate: {
                    type: "timestamp"
                },
                AssessmentProgress: {
                    type: "structure",
                    members: {
                        IndividualAssessmentCount: {
                            type: "integer"
                        },
                        IndividualAssessmentCompletedCount: {
                            type: "integer"
                        }
                    }
                },
                LastFailureMessage: {},
                ServiceAccessRoleArn: {},
                ResultLocationBucket: {},
                ResultLocationFolder: {},
                ResultEncryptionMode: {},
                ResultKmsKeyArn: {},
                AssessmentRunName: {}
            }
        },
        Sp: {
            type: "structure",
            members: {
                RedshiftSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        DatabaseName: {}
                    }
                },
                PostgreSqlSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        DatabaseName: {},
                        SslMode: {},
                        CertificateArn: {}
                    }
                },
                MySqlSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        SslMode: {},
                        CertificateArn: {}
                    }
                },
                OracleSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        DatabaseName: {},
                        SslMode: {},
                        CertificateArn: {},
                        AsmServer: {},
                        SecretsManagerOracleAsmSecretId: {},
                        SecretsManagerOracleAsmAccessRoleArn: {},
                        SecretsManagerSecurityDbEncryptionSecretId: {},
                        SecretsManagerSecurityDbEncryptionAccessRoleArn: {}
                    }
                },
                MicrosoftSqlServerSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        DatabaseName: {},
                        SslMode: {},
                        CertificateArn: {}
                    }
                },
                DocDbSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        DatabaseName: {},
                        SslMode: {},
                        CertificateArn: {}
                    }
                },
                MariaDbSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        SslMode: {},
                        CertificateArn: {}
                    }
                },
                MongoDbSettings: {
                    type: "structure",
                    members: {
                        ServerName: {},
                        Port: {
                            type: "integer"
                        },
                        DatabaseName: {},
                        SslMode: {},
                        CertificateArn: {},
                        AuthType: {},
                        AuthSource: {},
                        AuthMechanism: {}
                    }
                }
            },
            union: true
        },
        S13: {
            type: "structure",
            members: {
                DataProviderName: {},
                DataProviderArn: {},
                DataProviderCreationTime: {
                    shape: "S14"
                },
                Description: {},
                Engine: {},
                Settings: {
                    shape: "Sp"
                }
            }
        },
        S14: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S17: {
            type: "string",
            sensitive: true
        },
        S18: {
            type: "structure",
            required: [ "ServiceAccessRoleArn" ],
            members: {
                ServiceAccessRoleArn: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                ServiceAccessRoleArn: {},
                ExternalTableDefinition: {},
                CsvRowDelimiter: {},
                CsvDelimiter: {},
                BucketFolder: {},
                BucketName: {},
                CompressionType: {},
                EncryptionMode: {},
                ServerSideEncryptionKmsKeyId: {},
                DataFormat: {},
                EncodingType: {},
                DictPageSizeLimit: {
                    type: "integer"
                },
                RowGroupLength: {
                    type: "integer"
                },
                DataPageSize: {
                    type: "integer"
                },
                ParquetVersion: {},
                EnableStatistics: {
                    type: "boolean"
                },
                IncludeOpForFullLoad: {
                    type: "boolean"
                },
                CdcInsertsOnly: {
                    type: "boolean"
                },
                TimestampColumnName: {},
                ParquetTimestampInMillisecond: {
                    type: "boolean"
                },
                CdcInsertsAndUpdates: {
                    type: "boolean"
                },
                DatePartitionEnabled: {
                    type: "boolean"
                },
                DatePartitionSequence: {},
                DatePartitionDelimiter: {},
                UseCsvNoSupValue: {
                    type: "boolean"
                },
                CsvNoSupValue: {},
                PreserveTransactions: {
                    type: "boolean"
                },
                CdcPath: {},
                UseTaskStartTimeForFullLoadTimestamp: {
                    type: "boolean"
                },
                CannedAclForObjects: {},
                AddColumnName: {
                    type: "boolean"
                },
                CdcMaxBatchInterval: {
                    type: "integer"
                },
                CdcMinFileSize: {
                    type: "integer"
                },
                CsvNullValue: {},
                IgnoreHeaderRows: {
                    type: "integer"
                },
                MaxFileSize: {
                    type: "integer"
                },
                Rfc4180: {
                    type: "boolean"
                },
                DatePartitionTimezone: {},
                AddTrailingPaddingCharacter: {
                    type: "boolean"
                },
                ExpectedBucketOwner: {},
                GlueCatalogGeneration: {
                    type: "boolean"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                ServiceAccessRoleArn: {},
                BucketName: {}
            }
        },
        S1k: {
            type: "structure",
            members: {
                Username: {},
                Password: {
                    shape: "S17"
                },
                ServerName: {},
                Port: {
                    type: "integer"
                },
                DatabaseName: {},
                AuthType: {},
                AuthMechanism: {},
                NestingLevel: {},
                ExtractDocId: {},
                DocsToInvestigate: {},
                AuthSource: {},
                KmsKeyId: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                UseUpdateLookUp: {
                    type: "boolean"
                },
                ReplicateShardCollections: {
                    type: "boolean"
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                StreamArn: {},
                MessageFormat: {},
                ServiceAccessRoleArn: {},
                IncludeTransactionDetails: {
                    type: "boolean"
                },
                IncludePartitionValue: {
                    type: "boolean"
                },
                PartitionIncludeSchemaTable: {
                    type: "boolean"
                },
                IncludeTableAlterOperations: {
                    type: "boolean"
                },
                IncludeControlDetails: {
                    type: "boolean"
                },
                IncludeNullAndEmpty: {
                    type: "boolean"
                },
                NoHexPrefix: {
                    type: "boolean"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                Broker: {},
                Topic: {},
                MessageFormat: {},
                IncludeTransactionDetails: {
                    type: "boolean"
                },
                IncludePartitionValue: {
                    type: "boolean"
                },
                PartitionIncludeSchemaTable: {
                    type: "boolean"
                },
                IncludeTableAlterOperations: {
                    type: "boolean"
                },
                IncludeControlDetails: {
                    type: "boolean"
                },
                MessageMaxBytes: {
                    type: "integer"
                },
                IncludeNullAndEmpty: {
                    type: "boolean"
                },
                SecurityProtocol: {},
                SslClientCertificateArn: {},
                SslClientKeyArn: {},
                SslClientKeyPassword: {
                    shape: "S17"
                },
                SslCaCertificateArn: {},
                SaslUsername: {},
                SaslPassword: {
                    shape: "S17"
                },
                NoHexPrefix: {
                    type: "boolean"
                },
                SaslMechanism: {},
                SslEndpointIdentificationAlgorithm: {}
            }
        },
        S1s: {
            type: "structure",
            required: [ "ServiceAccessRoleArn", "EndpointUri" ],
            members: {
                ServiceAccessRoleArn: {},
                EndpointUri: {},
                FullLoadErrorPercentage: {
                    type: "integer"
                },
                ErrorRetryDuration: {
                    type: "integer"
                },
                UseNewMappingType: {
                    type: "boolean"
                }
            }
        },
        S1t: {
            type: "structure",
            required: [ "S3BucketName", "S3BucketFolder" ],
            members: {
                ServiceAccessRoleArn: {},
                S3BucketName: {},
                S3BucketFolder: {},
                ErrorRetryDuration: {
                    type: "integer"
                },
                MaxFileSize: {
                    type: "integer"
                },
                MaxRetryCount: {
                    type: "integer"
                },
                IamAuthEnabled: {
                    type: "boolean"
                }
            }
        },
        S1u: {
            type: "structure",
            members: {
                AcceptAnyDate: {
                    type: "boolean"
                },
                AfterConnectScript: {},
                BucketFolder: {},
                BucketName: {},
                CaseSensitiveNames: {
                    type: "boolean"
                },
                CompUpdate: {
                    type: "boolean"
                },
                ConnectionTimeout: {
                    type: "integer"
                },
                DatabaseName: {},
                DateFormat: {},
                EmptyAsNull: {
                    type: "boolean"
                },
                EncryptionMode: {},
                ExplicitIds: {
                    type: "boolean"
                },
                FileTransferUploadStreams: {
                    type: "integer"
                },
                LoadTimeout: {
                    type: "integer"
                },
                MaxFileSize: {
                    type: "integer"
                },
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                RemoveQuotes: {
                    type: "boolean"
                },
                ReplaceInvalidChars: {},
                ReplaceChars: {},
                ServerName: {},
                ServiceAccessRoleArn: {},
                ServerSideEncryptionKmsKeyId: {},
                TimeFormat: {},
                TrimBlanks: {
                    type: "boolean"
                },
                TruncateColumns: {
                    type: "boolean"
                },
                Username: {},
                WriteBufferSize: {
                    type: "integer"
                },
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                MapBooleanAsBoolean: {
                    type: "boolean"
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                AfterConnectScript: {},
                CaptureDdls: {
                    type: "boolean"
                },
                MaxFileSize: {
                    type: "integer"
                },
                DatabaseName: {},
                DdlArtifactsSchema: {},
                ExecuteTimeout: {
                    type: "integer"
                },
                FailTasksOnLobTruncation: {
                    type: "boolean"
                },
                HeartbeatEnable: {
                    type: "boolean"
                },
                HeartbeatSchema: {},
                HeartbeatFrequency: {
                    type: "integer"
                },
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                ServerName: {},
                Username: {},
                SlotName: {},
                PluginName: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                TrimSpaceInChar: {
                    type: "boolean"
                },
                MapBooleanAsBoolean: {
                    type: "boolean"
                },
                MapJsonbAsClob: {
                    type: "boolean"
                },
                MapLongVarcharAs: {},
                DatabaseMode: {},
                BabelfishDatabaseName: {}
            }
        },
        S1z: {
            type: "structure",
            members: {
                AfterConnectScript: {},
                CleanSourceMetadataOnMismatch: {
                    type: "boolean"
                },
                DatabaseName: {},
                EventsPollInterval: {
                    type: "integer"
                },
                TargetDbType: {},
                MaxFileSize: {
                    type: "integer"
                },
                ParallelLoadThreads: {
                    type: "integer"
                },
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                ServerName: {},
                ServerTimezone: {},
                Username: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                ExecuteTimeout: {
                    type: "integer"
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                AddSupplementalLogging: {
                    type: "boolean"
                },
                ArchivedLogDestId: {
                    type: "integer"
                },
                AdditionalArchivedLogDestId: {
                    type: "integer"
                },
                ExtraArchivedLogDestIds: {
                    type: "list",
                    member: {
                        type: "integer"
                    }
                },
                AllowSelectNestedTables: {
                    type: "boolean"
                },
                ParallelAsmReadThreads: {
                    type: "integer"
                },
                ReadAheadBlocks: {
                    type: "integer"
                },
                AccessAlternateDirectly: {
                    type: "boolean"
                },
                UseAlternateFolderForOnline: {
                    type: "boolean"
                },
                OraclePathPrefix: {},
                UsePathPrefix: {},
                ReplacePathPrefix: {
                    type: "boolean"
                },
                EnableHomogenousTablespace: {
                    type: "boolean"
                },
                DirectPathNoLog: {
                    type: "boolean"
                },
                ArchivedLogsOnly: {
                    type: "boolean"
                },
                AsmPassword: {
                    shape: "S17"
                },
                AsmServer: {},
                AsmUser: {},
                CharLengthSemantics: {},
                DatabaseName: {},
                DirectPathParallelLoad: {
                    type: "boolean"
                },
                FailTasksOnLobTruncation: {
                    type: "boolean"
                },
                NumberDatatypeScale: {
                    type: "integer"
                },
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                ReadTableSpaceName: {
                    type: "boolean"
                },
                RetryInterval: {
                    type: "integer"
                },
                SecurityDbEncryption: {
                    shape: "S17"
                },
                SecurityDbEncryptionName: {},
                ServerName: {},
                SpatialDataOptionToGeoJsonFunctionName: {},
                StandbyDelayTime: {
                    type: "integer"
                },
                Username: {},
                UseBFile: {
                    type: "boolean"
                },
                UseDirectPathFullLoad: {
                    type: "boolean"
                },
                UseLogminerReader: {
                    type: "boolean"
                },
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                SecretsManagerOracleAsmAccessRoleArn: {},
                SecretsManagerOracleAsmSecretId: {},
                TrimSpaceInChar: {
                    type: "boolean"
                },
                ConvertTimestampWithZoneToUTC: {
                    type: "boolean"
                },
                OpenTransactionWindow: {
                    type: "integer"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                DatabaseName: {},
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                ServerName: {},
                Username: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {}
            }
        },
        S25: {
            type: "structure",
            members: {
                Port: {
                    type: "integer"
                },
                BcpPacketSize: {
                    type: "integer"
                },
                DatabaseName: {},
                ControlTablesFileGroup: {},
                Password: {
                    shape: "S17"
                },
                QuerySingleAlwaysOnNode: {
                    type: "boolean"
                },
                ReadBackupOnly: {
                    type: "boolean"
                },
                SafeguardPolicy: {},
                ServerName: {},
                Username: {},
                UseBcpFullLoad: {
                    type: "boolean"
                },
                UseThirdPartyBackupDevice: {
                    type: "boolean"
                },
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                TrimSpaceInChar: {
                    type: "boolean"
                },
                TlogAccessMode: {},
                ForceLobLookup: {
                    type: "boolean"
                }
            }
        },
        S28: {
            type: "structure",
            members: {
                DatabaseName: {},
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                ServerName: {},
                SetDataCaptureChanges: {
                    type: "boolean"
                },
                CurrentLsn: {},
                MaxKBytesPerRead: {
                    type: "integer"
                },
                Username: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                LoadTimeout: {
                    type: "integer"
                },
                WriteBufferSize: {
                    type: "integer"
                },
                MaxFileSize: {
                    type: "integer"
                },
                KeepCsvFiles: {
                    type: "boolean"
                }
            }
        },
        S29: {
            type: "structure",
            members: {
                Username: {},
                Password: {
                    shape: "S17"
                },
                ServerName: {},
                Port: {
                    type: "integer"
                },
                DatabaseName: {},
                NestingLevel: {},
                ExtractDocId: {
                    type: "boolean"
                },
                DocsToInvestigate: {
                    type: "integer"
                },
                KmsKeyId: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {},
                UseUpdateLookUp: {
                    type: "boolean"
                },
                ReplicateShardCollections: {
                    type: "boolean"
                }
            }
        },
        S2a: {
            type: "structure",
            required: [ "ServerName", "Port" ],
            members: {
                ServerName: {},
                Port: {
                    type: "integer"
                },
                SslSecurityProtocol: {},
                AuthType: {},
                AuthUserName: {},
                AuthPassword: {
                    shape: "S17"
                },
                SslCaCertificateArn: {}
            }
        },
        S2d: {
            type: "structure",
            members: {
                AfterConnectScript: {},
                CleanSourceMetadataOnMismatch: {
                    type: "boolean"
                },
                DatabaseName: {},
                EventsPollInterval: {
                    type: "integer"
                },
                TargetDbType: {},
                MaxFileSize: {
                    type: "integer"
                },
                ParallelLoadThreads: {
                    type: "integer"
                },
                Password: {
                    shape: "S17"
                },
                Port: {
                    type: "integer"
                },
                ServerName: {},
                ServerTimezone: {},
                Username: {},
                SecretsManagerAccessRoleArn: {},
                SecretsManagerSecretId: {}
            }
        },
        S2e: {
            type: "structure",
            required: [ "DatabaseName", "MemoryDuration", "MagneticDuration" ],
            members: {
                DatabaseName: {},
                MemoryDuration: {
                    type: "integer"
                },
                MagneticDuration: {
                    type: "integer"
                },
                CdcInsertsAndUpdates: {
                    type: "boolean"
                },
                EnableMagneticStoreWrites: {
                    type: "boolean"
                }
            }
        },
        S2g: {
            type: "structure",
            members: {
                EndpointIdentifier: {},
                EndpointType: {},
                EngineName: {},
                EngineDisplayName: {},
                Username: {},
                ServerName: {},
                Port: {
                    type: "integer"
                },
                DatabaseName: {},
                ExtraConnectionAttributes: {},
                Status: {},
                KmsKeyId: {},
                EndpointArn: {},
                CertificateArn: {},
                SslMode: {},
                ServiceAccessRoleArn: {},
                ExternalTableDefinition: {},
                ExternalId: {},
                DynamoDbSettings: {
                    shape: "S18"
                },
                S3Settings: {
                    shape: "S19"
                },
                DmsTransferSettings: {
                    shape: "S1j"
                },
                MongoDbSettings: {
                    shape: "S1k"
                },
                KinesisSettings: {
                    shape: "S1m"
                },
                KafkaSettings: {
                    shape: "S1o"
                },
                ElasticsearchSettings: {
                    shape: "S1s"
                },
                NeptuneSettings: {
                    shape: "S1t"
                },
                RedshiftSettings: {
                    shape: "S1u"
                },
                PostgreSQLSettings: {
                    shape: "S1v"
                },
                MySQLSettings: {
                    shape: "S1z"
                },
                OracleSettings: {
                    shape: "S21"
                },
                SybaseSettings: {
                    shape: "S24"
                },
                MicrosoftSQLServerSettings: {
                    shape: "S25"
                },
                IBMDb2Settings: {
                    shape: "S28"
                },
                DocDbSettings: {
                    shape: "S29"
                },
                RedisSettings: {
                    shape: "S2a"
                },
                GcpMySQLSettings: {
                    shape: "S2d"
                },
                TimestreamSettings: {
                    shape: "S2e"
                }
            }
        },
        S2i: {
            type: "list",
            member: {}
        },
        S2j: {
            type: "list",
            member: {}
        },
        S2l: {
            type: "structure",
            members: {
                CustomerAwsId: {},
                CustSubscriptionId: {},
                SnsTopicArn: {},
                Status: {},
                SubscriptionCreationTime: {},
                SourceType: {},
                SourceIdsList: {
                    shape: "S2j"
                },
                EventCategoriesList: {
                    shape: "S2i"
                },
                Enabled: {
                    type: "boolean"
                }
            }
        },
        S2q: {
            type: "list",
            member: {}
        },
        S2s: {
            type: "structure",
            members: {
                InstanceProfileArn: {},
                AvailabilityZone: {},
                KmsKeyArn: {},
                PubliclyAccessible: {
                    type: "boolean"
                },
                NetworkType: {},
                InstanceProfileName: {},
                Description: {},
                InstanceProfileCreationTime: {
                    shape: "S14"
                },
                SubnetGroupIdentifier: {},
                VpcSecurityGroups: {
                    shape: "S2q"
                }
            }
        },
        S2u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataProviderIdentifier" ],
                members: {
                    DataProviderIdentifier: {},
                    SecretsManagerSecretId: {},
                    SecretsManagerAccessRoleArn: {}
                }
            }
        },
        S2w: {
            type: "structure",
            members: {
                S3BucketPath: {},
                S3BucketRoleArn: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                MigrationProjectName: {},
                MigrationProjectArn: {},
                MigrationProjectCreationTime: {
                    shape: "S14"
                },
                SourceDataProviderDescriptors: {
                    shape: "S2z"
                },
                TargetDataProviderDescriptors: {
                    shape: "S2z"
                },
                InstanceProfileArn: {},
                InstanceProfileName: {},
                TransformationRules: {},
                Description: {},
                SchemaConversionApplicationAttributes: {
                    shape: "S2w"
                }
            }
        },
        S2z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SecretsManagerSecretId: {},
                    SecretsManagerAccessRoleArn: {},
                    DataProviderName: {},
                    DataProviderArn: {}
                }
            }
        },
        S32: {
            type: "structure",
            members: {
                AvailabilityZone: {},
                DnsNameServers: {},
                KmsKeyId: {},
                MaxCapacityUnits: {
                    type: "integer"
                },
                MinCapacityUnits: {
                    type: "integer"
                },
                MultiAZ: {
                    type: "boolean"
                },
                PreferredMaintenanceWindow: {},
                ReplicationSubnetGroupId: {},
                VpcSecurityGroupIds: {
                    shape: "S2q"
                }
            }
        },
        S35: {
            type: "structure",
            members: {
                ReplicationConfigIdentifier: {},
                ReplicationConfigArn: {},
                SourceEndpointArn: {},
                TargetEndpointArn: {},
                ReplicationType: {},
                ComputeConfig: {
                    shape: "S32"
                },
                ReplicationSettings: {},
                SupplementalSettings: {},
                TableMappings: {},
                ReplicationConfigCreateTime: {
                    type: "timestamp"
                },
                ReplicationConfigUpdateTime: {
                    type: "timestamp"
                }
            }
        },
        S37: {
            type: "list",
            member: {}
        },
        S39: {
            type: "structure",
            members: {
                ReplicationInstanceIdentifier: {},
                ReplicationInstanceClass: {},
                ReplicationInstanceStatus: {},
                AllocatedStorage: {
                    type: "integer"
                },
                InstanceCreateTime: {
                    type: "timestamp"
                },
                VpcSecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            VpcSecurityGroupId: {},
                            Status: {}
                        }
                    }
                },
                AvailabilityZone: {},
                ReplicationSubnetGroup: {
                    shape: "S3c"
                },
                PreferredMaintenanceWindow: {},
                PendingModifiedValues: {
                    type: "structure",
                    members: {
                        ReplicationInstanceClass: {},
                        AllocatedStorage: {
                            type: "integer"
                        },
                        MultiAZ: {
                            type: "boolean"
                        },
                        EngineVersion: {},
                        NetworkType: {}
                    }
                },
                MultiAZ: {
                    type: "boolean"
                },
                EngineVersion: {},
                AutoMinorVersionUpgrade: {
                    type: "boolean"
                },
                KmsKeyId: {},
                ReplicationInstanceArn: {},
                ReplicationInstancePublicIpAddress: {
                    deprecated: true
                },
                ReplicationInstancePrivateIpAddress: {
                    deprecated: true
                },
                ReplicationInstancePublicIpAddresses: {
                    type: "list",
                    member: {}
                },
                ReplicationInstancePrivateIpAddresses: {
                    type: "list",
                    member: {}
                },
                ReplicationInstanceIpv6Addresses: {
                    type: "list",
                    member: {}
                },
                PubliclyAccessible: {
                    type: "boolean"
                },
                SecondaryAvailabilityZone: {},
                FreeUntil: {
                    type: "timestamp"
                },
                DnsNameServers: {},
                NetworkType: {}
            }
        },
        S3c: {
            type: "structure",
            members: {
                ReplicationSubnetGroupIdentifier: {},
                ReplicationSubnetGroupDescription: {},
                VpcId: {},
                SubnetGroupStatus: {},
                Subnets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {
                                type: "structure",
                                members: {
                                    Name: {}
                                }
                            },
                            SubnetStatus: {}
                        }
                    }
                },
                SupportedNetworkTypes: {
                    shape: "S2q"
                }
            }
        },
        S3l: {
            type: "list",
            member: {}
        },
        S3p: {
            type: "structure",
            members: {
                ReplicationTaskIdentifier: {},
                SourceEndpointArn: {},
                TargetEndpointArn: {},
                ReplicationInstanceArn: {},
                MigrationType: {},
                TableMappings: {},
                ReplicationTaskSettings: {},
                Status: {},
                LastFailureMessage: {},
                StopReason: {},
                ReplicationTaskCreationDate: {
                    type: "timestamp"
                },
                ReplicationTaskStartDate: {
                    type: "timestamp"
                },
                CdcStartPosition: {},
                CdcStopPosition: {},
                RecoveryCheckpoint: {},
                ReplicationTaskArn: {},
                ReplicationTaskStats: {
                    type: "structure",
                    members: {
                        FullLoadProgressPercent: {
                            type: "integer"
                        },
                        ElapsedTimeMillis: {
                            type: "long"
                        },
                        TablesLoaded: {
                            type: "integer"
                        },
                        TablesLoading: {
                            type: "integer"
                        },
                        TablesQueued: {
                            type: "integer"
                        },
                        TablesErrored: {
                            type: "integer"
                        },
                        FreshStartDate: {
                            type: "timestamp"
                        },
                        StartDate: {
                            type: "timestamp"
                        },
                        StopDate: {
                            type: "timestamp"
                        },
                        FullLoadStartDate: {
                            type: "timestamp"
                        },
                        FullLoadFinishDate: {
                            type: "timestamp"
                        }
                    }
                },
                TaskData: {},
                TargetReplicationInstanceArn: {}
            }
        },
        S3u: {
            type: "structure",
            members: {
                CertificateIdentifier: {},
                CertificateCreationDate: {
                    type: "timestamp"
                },
                CertificatePem: {},
                CertificateWallet: {
                    type: "blob"
                },
                CertificateArn: {},
                CertificateOwner: {},
                ValidFromDate: {
                    type: "timestamp"
                },
                ValidToDate: {
                    type: "timestamp"
                },
                SigningAlgorithm: {},
                KeyLength: {
                    type: "integer"
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                ReplicationInstanceArn: {},
                EndpointArn: {},
                Status: {},
                LastFailureMessage: {},
                EndpointIdentifier: {},
                ReplicationInstanceIdentifier: {}
            }
        },
        S4u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Values" ],
                members: {
                    Name: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S64: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Status: {},
                    RequestIdentifier: {},
                    MigrationProjectArn: {},
                    Error: {
                        type: "structure",
                        members: {
                            defaultErrorDetails: {
                                type: "structure",
                                members: {
                                    Message: {}
                                }
                            }
                        },
                        union: true
                    },
                    ExportSqlDetails: {
                        type: "structure",
                        members: {
                            S3ObjectKey: {},
                            ObjectURL: {}
                        }
                    }
                }
            }
        },
        S6m: {
            type: "structure",
            members: {
                ServerId: {},
                IpAddress: {},
                ServerName: {}
            }
        },
        S87: {
            type: "structure",
            members: {
                EndpointArn: {},
                ReplicationInstanceArn: {},
                Status: {},
                LastRefreshDate: {
                    type: "timestamp"
                },
                LastFailureMessage: {}
            }
        },
        S8p: {
            type: "structure",
            members: {
                SchemaName: {},
                TableName: {},
                Inserts: {
                    type: "long"
                },
                Deletes: {
                    type: "long"
                },
                Updates: {
                    type: "long"
                },
                Ddls: {
                    type: "long"
                },
                AppliedInserts: {
                    type: "long"
                },
                AppliedDeletes: {
                    type: "long"
                },
                AppliedUpdates: {
                    type: "long"
                },
                AppliedDdls: {
                    type: "long"
                },
                FullLoadRows: {
                    type: "long"
                },
                FullLoadCondtnlChkFailedRows: {
                    type: "long"
                },
                FullLoadErrorRows: {
                    type: "long"
                },
                FullLoadStartTime: {
                    type: "timestamp"
                },
                FullLoadEndTime: {
                    type: "timestamp"
                },
                FullLoadReloaded: {
                    type: "boolean"
                },
                LastUpdateTime: {
                    type: "timestamp"
                },
                TableState: {},
                ValidationPendingRecords: {
                    type: "long"
                },
                ValidationFailedRecords: {
                    type: "long"
                },
                ValidationSuspendedRecords: {
                    type: "long"
                },
                ValidationState: {},
                ValidationStateDetails: {}
            }
        },
        S97: {
            type: "structure",
            members: {
                ReplicationConfigIdentifier: {},
                ReplicationConfigArn: {},
                SourceEndpointArn: {},
                TargetEndpointArn: {},
                ReplicationType: {},
                Status: {},
                ProvisionData: {
                    type: "structure",
                    members: {
                        ProvisionState: {},
                        ProvisionedCapacityUnits: {
                            type: "integer"
                        },
                        DateProvisioned: {
                            type: "timestamp"
                        },
                        IsNewProvisioningAvailable: {
                            type: "boolean"
                        },
                        DateNewProvisioningDataAvailable: {
                            type: "timestamp"
                        },
                        ReasonForNewProvisioningData: {}
                    }
                },
                StopReason: {},
                FailureMessages: {
                    shape: "S2q"
                },
                ReplicationStats: {
                    type: "structure",
                    members: {
                        FullLoadProgressPercent: {
                            type: "integer"
                        },
                        ElapsedTimeMillis: {
                            type: "long"
                        },
                        TablesLoaded: {
                            type: "integer"
                        },
                        TablesLoading: {
                            type: "integer"
                        },
                        TablesQueued: {
                            type: "integer"
                        },
                        TablesErrored: {
                            type: "integer"
                        },
                        FreshStartDate: {
                            type: "timestamp"
                        },
                        StartDate: {
                            type: "timestamp"
                        },
                        StopDate: {
                            type: "timestamp"
                        },
                        FullLoadStartDate: {
                            type: "timestamp"
                        },
                        FullLoadFinishDate: {
                            type: "timestamp"
                        }
                    }
                },
                StartReplicationType: {},
                CdcStartTime: {
                    type: "timestamp"
                },
                CdcStartPosition: {},
                CdcStopPosition: {},
                RecoveryCheckpoint: {},
                ReplicationCreateTime: {
                    type: "timestamp"
                },
                ReplicationUpdateTime: {
                    type: "timestamp"
                },
                ReplicationLastStopTime: {
                    type: "timestamp"
                },
                ReplicationDeprovisionTime: {
                    type: "timestamp"
                }
            }
        },
        S9k: {
            type: "structure",
            members: {
                S3ObjectKey: {},
                ObjectURL: {}
            }
        },
        Sah: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SchemaName", "TableName" ],
                members: {
                    SchemaName: {},
                    TableName: {}
                }
            }
        }
    },
    paginators: {
        DescribeApplicableIndividualAssessments: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeCertificates: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeConnections: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeDataProviders: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeEndpointSettings: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeEndpointTypes: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeEndpoints: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeEngineVersions: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeEventSubscriptions: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeEvents: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeExtensionPackAssociations: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeFleetAdvisorCollectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeFleetAdvisorDatabases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeFleetAdvisorLsaAnalysis: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeFleetAdvisorSchemaObjectSummary: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeFleetAdvisorSchemas: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeInstanceProfiles: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeMetadataModelAssessments: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeMetadataModelConversions: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeMetadataModelExportsAsScript: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeMetadataModelExportsToTarget: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeMetadataModelImports: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeMigrationProjects: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeOrderableReplicationInstances: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribePendingMaintenanceActions: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeRecommendationLimitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeRecommendations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxRecords"
        },
        DescribeReplicationConfigs: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationInstanceTaskLogs: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationInstances: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationSubnetGroups: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationTableStatistics: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationTaskAssessmentResults: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationTaskAssessmentRuns: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationTaskIndividualAssessments: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplicationTasks: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeReplications: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeSchemas: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        },
        DescribeTableStatistics: {
            input_token: "Marker",
            output_token: "Marker",
            limit_key: "MaxRecords"
        }
    },
    waiters: {
        TestConnectionSucceeds: {
            acceptors: [ {
                argument: "Connections[].Status",
                expected: "successful",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "Connections[].Status",
                expected: "failed",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 5,
            description: "Wait until testing connection succeeds.",
            maxAttempts: 60,
            operation: "DescribeConnections"
        },
        EndpointDeleted: {
            acceptors: [ {
                expected: "ResourceNotFoundFault",
                matcher: "error",
                state: "success"
            }, {
                argument: "Endpoints[].Status",
                expected: "active",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "Endpoints[].Status",
                expected: "creating",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 5,
            description: "Wait until testing endpoint is deleted.",
            maxAttempts: 60,
            operation: "DescribeEndpoints"
        },
        ReplicationInstanceAvailable: {
            acceptors: [ {
                argument: "ReplicationInstances[].ReplicationInstanceStatus",
                expected: "available",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "ReplicationInstances[].ReplicationInstanceStatus",
                expected: "deleting",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationInstances[].ReplicationInstanceStatus",
                expected: "incompatible-credentials",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationInstances[].ReplicationInstanceStatus",
                expected: "incompatible-network",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationInstances[].ReplicationInstanceStatus",
                expected: "inaccessible-encryption-credentials",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 60,
            description: "Wait until DMS replication instance is available.",
            maxAttempts: 60,
            operation: "DescribeReplicationInstances"
        },
        ReplicationInstanceDeleted: {
            acceptors: [ {
                argument: "ReplicationInstances[].ReplicationInstanceStatus",
                expected: "available",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "ResourceNotFoundFault",
                matcher: "error",
                state: "success"
            } ],
            delay: 15,
            description: "Wait until DMS replication instance is deleted.",
            maxAttempts: 60,
            operation: "DescribeReplicationInstances"
        },
        ReplicationTaskReady: {
            acceptors: [ {
                argument: "ReplicationTasks[].Status",
                expected: "ready",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "starting",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "running",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "stopping",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "stopped",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "failed",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "modifying",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "testing",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "deleting",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 15,
            description: "Wait until DMS replication task is ready.",
            maxAttempts: 60,
            operation: "DescribeReplicationTasks"
        },
        ReplicationTaskStopped: {
            acceptors: [ {
                argument: "ReplicationTasks[].Status",
                expected: "stopped",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "ready",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "creating",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "starting",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "failed",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "modifying",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "testing",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "deleting",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 15,
            description: "Wait until DMS replication task is stopped.",
            maxAttempts: 60,
            operation: "DescribeReplicationTasks"
        },
        ReplicationTaskRunning: {
            acceptors: [ {
                argument: "ReplicationTasks[].Status",
                expected: "running",
                matcher: "pathAll",
                state: "success"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "ready",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "creating",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "stopping",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "stopped",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "failed",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "modifying",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "testing",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "deleting",
                matcher: "pathAny",
                state: "failure"
            } ],
            delay: 15,
            description: "Wait until DMS replication task is running.",
            maxAttempts: 60,
            operation: "DescribeReplicationTasks"
        },
        ReplicationTaskDeleted: {
            acceptors: [ {
                argument: "ReplicationTasks[].Status",
                expected: "ready",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "creating",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "stopped",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "running",
                matcher: "pathAny",
                state: "failure"
            }, {
                argument: "ReplicationTasks[].Status",
                expected: "failed",
                matcher: "pathAny",
                state: "failure"
            }, {
                expected: "ResourceNotFoundFault",
                matcher: "error",
                state: "success"
            } ],
            delay: 15,
            description: "Wait until DMS replication task is deleted.",
            maxAttempts: 60,
            operation: "DescribeReplicationTasks"
        }
    }
};

AWS.apiLoader.services["dynamodb"] = {};

AWS.DynamoDB = AWS.Service.defineService("dynamodb", [ "2011-12-05", "2012-08-10" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    101: [ function(require, module, exports) {
        var AWS = require("../core");
        require("../dynamodb/document_client");
        AWS.util.update(AWS.DynamoDB.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                if (request.service.config.dynamoDbCrc32) {
                    request.removeListener("extractData", AWS.EventListeners.Json.EXTRACT_DATA);
                    request.addListener("extractData", this.checkCrc32);
                    request.addListener("extractData", AWS.EventListeners.Json.EXTRACT_DATA);
                }
            },
            checkCrc32: function checkCrc32(resp) {
                if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {
                    resp.data = null;
                    resp.error = AWS.util.error(new Error(), {
                        code: "CRC32CheckFailed",
                        message: "CRC32 integrity check failed",
                        retryable: true
                    });
                    resp.request.haltHandlersOnError();
                    throw resp.error;
                }
            },
            crc32IsValid: function crc32IsValid(resp) {
                var crc = resp.httpResponse.headers["x-amz-crc32"];
                if (!crc) return true;
                return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);
            },
            defaultRetryCount: 10,
            retryDelays: function retryDelays(retryCount, err) {
                var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);
                if (typeof retryDelayOptions.base !== "number") {
                    retryDelayOptions.base = 50;
                }
                var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions, err);
                return delay;
            }
        });
    }, {
        "../core": 44,
        "../dynamodb/document_client": 54
    } ],
    54: [ function(require, module, exports) {
        var AWS = require("../core");
        var Translator = require("./translator");
        var DynamoDBSet = require("./set");
        AWS.DynamoDB.DocumentClient = AWS.util.inherit({
            constructor: function DocumentClient(options) {
                var self = this;
                self.options = options || {};
                self.configure(self.options);
            },
            configure: function configure(options) {
                var self = this;
                self.service = options.service;
                self.bindServiceObject(options);
                self.attrValue = options.attrValue = self.service.api.operations.putItem.input.members.Item.value.shape;
            },
            bindServiceObject: function bindServiceObject(options) {
                var self = this;
                options = options || {};
                if (!self.service) {
                    self.service = new AWS.DynamoDB(options);
                } else {
                    var config = AWS.util.copy(self.service.config);
                    self.service = new self.service.constructor.__super__(config);
                    self.service.config.params = AWS.util.merge(self.service.config.params || {}, options.params);
                }
            },
            makeServiceRequest: function(operation, params, callback) {
                var self = this;
                var request = self.service[operation](params);
                self.setupRequest(request);
                self.setupResponse(request);
                if (typeof callback === "function") {
                    request.send(callback);
                }
                return request;
            },
            serviceClientOperationsMap: {
                batchGet: "batchGetItem",
                batchWrite: "batchWriteItem",
                delete: "deleteItem",
                get: "getItem",
                put: "putItem",
                query: "query",
                scan: "scan",
                update: "updateItem",
                transactGet: "transactGetItems",
                transactWrite: "transactWriteItems"
            },
            batchGet: function(params, callback) {
                var operation = this.serviceClientOperationsMap["batchGet"];
                return this.makeServiceRequest(operation, params, callback);
            },
            batchWrite: function(params, callback) {
                var operation = this.serviceClientOperationsMap["batchWrite"];
                return this.makeServiceRequest(operation, params, callback);
            },
            delete: function(params, callback) {
                var operation = this.serviceClientOperationsMap["delete"];
                return this.makeServiceRequest(operation, params, callback);
            },
            get: function(params, callback) {
                var operation = this.serviceClientOperationsMap["get"];
                return this.makeServiceRequest(operation, params, callback);
            },
            put: function(params, callback) {
                var operation = this.serviceClientOperationsMap["put"];
                return this.makeServiceRequest(operation, params, callback);
            },
            update: function(params, callback) {
                var operation = this.serviceClientOperationsMap["update"];
                return this.makeServiceRequest(operation, params, callback);
            },
            scan: function(params, callback) {
                var operation = this.serviceClientOperationsMap["scan"];
                return this.makeServiceRequest(operation, params, callback);
            },
            query: function(params, callback) {
                var operation = this.serviceClientOperationsMap["query"];
                return this.makeServiceRequest(operation, params, callback);
            },
            transactWrite: function(params, callback) {
                var operation = this.serviceClientOperationsMap["transactWrite"];
                return this.makeServiceRequest(operation, params, callback);
            },
            transactGet: function(params, callback) {
                var operation = this.serviceClientOperationsMap["transactGet"];
                return this.makeServiceRequest(operation, params, callback);
            },
            createSet: function(list, options) {
                options = options || {};
                return new DynamoDBSet(list, options);
            },
            getTranslator: function() {
                return new Translator(this.options);
            },
            setupRequest: function setupRequest(request) {
                var self = this;
                var translator = self.getTranslator();
                var operation = request.operation;
                var inputShape = request.service.api.operations[operation].input;
                request._events.validate.unshift(function(req) {
                    req.rawParams = AWS.util.copy(req.params);
                    req.params = translator.translateInput(req.rawParams, inputShape);
                });
            },
            setupResponse: function setupResponse(request) {
                var self = this;
                var translator = self.getTranslator();
                var outputShape = self.service.api.operations[request.operation].output;
                request.on("extractData", function(response) {
                    response.data = translator.translateOutput(response.data, outputShape);
                });
                var response = request.response;
                response.nextPage = function(cb) {
                    var resp = this;
                    var req = resp.request;
                    var config;
                    var service = req.service;
                    var operation = req.operation;
                    try {
                        config = service.paginationConfig(operation, true);
                    } catch (e) {
                        resp.error = e;
                    }
                    if (!resp.hasNextPage()) {
                        if (cb) cb(resp.error, null); else if (resp.error) throw resp.error;
                        return null;
                    }
                    var params = AWS.util.copy(req.rawParams);
                    if (!resp.nextPageTokens) {
                        return cb ? cb(null, null) : null;
                    } else {
                        var inputTokens = config.inputToken;
                        if (typeof inputTokens === "string") inputTokens = [ inputTokens ];
                        for (var i = 0; i < inputTokens.length; i++) {
                            params[inputTokens[i]] = resp.nextPageTokens[i];
                        }
                        return self[operation](params, cb);
                    }
                };
            }
        });
        module.exports = AWS.DynamoDB.DocumentClient;
    }, {
        "../core": 44,
        "./set": 56,
        "./translator": 57
    } ],
    57: [ function(require, module, exports) {
        var util = require("../core").util;
        var convert = require("./converter");
        var Translator = function(options) {
            options = options || {};
            this.attrValue = options.attrValue;
            this.convertEmptyValues = Boolean(options.convertEmptyValues);
            this.wrapNumbers = Boolean(options.wrapNumbers);
        };
        Translator.prototype.translateInput = function(value, shape) {
            this.mode = "input";
            return this.translate(value, shape);
        };
        Translator.prototype.translateOutput = function(value, shape) {
            this.mode = "output";
            return this.translate(value, shape);
        };
        Translator.prototype.translate = function(value, shape) {
            var self = this;
            if (!shape || value === undefined) return undefined;
            if (shape.shape === self.attrValue) {
                return convert[self.mode](value, {
                    convertEmptyValues: self.convertEmptyValues,
                    wrapNumbers: self.wrapNumbers
                });
            }
            switch (shape.type) {
              case "structure":
                return self.translateStructure(value, shape);

              case "map":
                return self.translateMap(value, shape);

              case "list":
                return self.translateList(value, shape);

              default:
                return self.translateScalar(value, shape);
            }
        };
        Translator.prototype.translateStructure = function(structure, shape) {
            var self = this;
            if (structure == null) return undefined;
            var struct = {};
            util.each(structure, function(name, value) {
                var memberShape = shape.members[name];
                if (memberShape) {
                    var result = self.translate(value, memberShape);
                    if (result !== undefined) struct[name] = result;
                }
            });
            return struct;
        };
        Translator.prototype.translateList = function(list, shape) {
            var self = this;
            if (list == null) return undefined;
            var out = [];
            util.arrayEach(list, function(value) {
                var result = self.translate(value, shape.member);
                if (result === undefined) out.push(null); else out.push(result);
            });
            return out;
        };
        Translator.prototype.translateMap = function(map, shape) {
            var self = this;
            if (map == null) return undefined;
            var out = {};
            util.each(map, function(key, value) {
                var result = self.translate(value, shape.value);
                if (result === undefined) out[key] = null; else out[key] = result;
            });
            return out;
        };
        Translator.prototype.translateScalar = function(value, shape) {
            return shape.toType(value);
        };
        module.exports = Translator;
    }, {
        "../core": 44,
        "./converter": 53
    } ],
    53: [ function(require, module, exports) {
        var AWS = require("../core");
        var util = AWS.util;
        var typeOf = require("./types").typeOf;
        var DynamoDBSet = require("./set");
        var NumberValue = require("./numberValue");
        AWS.DynamoDB.Converter = {
            input: function convertInput(data, options) {
                options = options || {};
                var type = typeOf(data);
                if (type === "Object") {
                    return formatMap(data, options);
                } else if (type === "Array") {
                    return formatList(data, options);
                } else if (type === "Set") {
                    return formatSet(data, options);
                } else if (type === "String") {
                    if (data.length === 0 && options.convertEmptyValues) {
                        return convertInput(null);
                    }
                    return {
                        S: data
                    };
                } else if (type === "Number" || type === "NumberValue") {
                    return {
                        N: data.toString()
                    };
                } else if (type === "Binary") {
                    if (data.length === 0 && options.convertEmptyValues) {
                        return convertInput(null);
                    }
                    return {
                        B: data
                    };
                } else if (type === "Boolean") {
                    return {
                        BOOL: data
                    };
                } else if (type === "null") {
                    return {
                        NULL: true
                    };
                } else if (type !== "undefined" && type !== "Function") {
                    return formatMap(data, options);
                }
            },
            marshall: function marshallItem(data, options) {
                return AWS.DynamoDB.Converter.input(data, options).M;
            },
            output: function convertOutput(data, options) {
                options = options || {};
                var list, map, i;
                for (var type in data) {
                    var values = data[type];
                    if (type === "M") {
                        map = {};
                        for (var key in values) {
                            map[key] = convertOutput(values[key], options);
                        }
                        return map;
                    } else if (type === "L") {
                        list = [];
                        for (i = 0; i < values.length; i++) {
                            list.push(convertOutput(values[i], options));
                        }
                        return list;
                    } else if (type === "SS") {
                        list = [];
                        for (i = 0; i < values.length; i++) {
                            list.push(values[i] + "");
                        }
                        return new DynamoDBSet(list);
                    } else if (type === "NS") {
                        list = [];
                        for (i = 0; i < values.length; i++) {
                            list.push(convertNumber(values[i], options.wrapNumbers));
                        }
                        return new DynamoDBSet(list);
                    } else if (type === "BS") {
                        list = [];
                        for (i = 0; i < values.length; i++) {
                            list.push(AWS.util.buffer.toBuffer(values[i]));
                        }
                        return new DynamoDBSet(list);
                    } else if (type === "S") {
                        return values + "";
                    } else if (type === "N") {
                        return convertNumber(values, options.wrapNumbers);
                    } else if (type === "B") {
                        return util.buffer.toBuffer(values);
                    } else if (type === "BOOL") {
                        return values === "true" || values === "TRUE" || values === true;
                    } else if (type === "NULL") {
                        return null;
                    }
                }
            },
            unmarshall: function unmarshall(data, options) {
                return AWS.DynamoDB.Converter.output({
                    M: data
                }, options);
            }
        };
        function formatList(data, options) {
            var list = {
                L: []
            };
            for (var i = 0; i < data.length; i++) {
                list["L"].push(AWS.DynamoDB.Converter.input(data[i], options));
            }
            return list;
        }
        function convertNumber(value, wrapNumbers) {
            return wrapNumbers ? new NumberValue(value) : Number(value);
        }
        function formatMap(data, options) {
            var map = {
                M: {}
            };
            for (var key in data) {
                var formatted = AWS.DynamoDB.Converter.input(data[key], options);
                if (formatted !== void 0) {
                    map["M"][key] = formatted;
                }
            }
            return map;
        }
        function formatSet(data, options) {
            options = options || {};
            var values = data.values;
            if (options.convertEmptyValues) {
                values = filterEmptySetValues(data);
                if (values.length === 0) {
                    return AWS.DynamoDB.Converter.input(null);
                }
            }
            var map = {};
            switch (data.type) {
              case "String":
                map["SS"] = values;
                break;

              case "Binary":
                map["BS"] = values;
                break;

              case "Number":
                map["NS"] = values.map(function(value) {
                    return value.toString();
                });
            }
            return map;
        }
        function filterEmptySetValues(set) {
            var nonEmptyValues = [];
            var potentiallyEmptyTypes = {
                String: true,
                Binary: true,
                Number: false
            };
            if (potentiallyEmptyTypes[set.type]) {
                for (var i = 0; i < set.values.length; i++) {
                    if (set.values[i].length === 0) {
                        continue;
                    }
                    nonEmptyValues.push(set.values[i]);
                }
                return nonEmptyValues;
            }
            return set.values;
        }
        module.exports = AWS.DynamoDB.Converter;
    }, {
        "../core": 44,
        "./numberValue": 55,
        "./set": 56,
        "./types": 58
    } ],
    56: [ function(require, module, exports) {
        var util = require("../core").util;
        var typeOf = require("./types").typeOf;
        var memberTypeToSetType = {
            String: "String",
            Number: "Number",
            NumberValue: "Number",
            Binary: "Binary"
        };
        var DynamoDBSet = util.inherit({
            constructor: function Set(list, options) {
                options = options || {};
                this.wrapperName = "Set";
                this.initialize(list, options.validate);
            },
            initialize: function(list, validate) {
                var self = this;
                self.values = [].concat(list);
                self.detectType();
                if (validate) {
                    self.validate();
                }
            },
            detectType: function() {
                this.type = memberTypeToSetType[typeOf(this.values[0])];
                if (!this.type) {
                    throw util.error(new Error(), {
                        code: "InvalidSetType",
                        message: "Sets can contain string, number, or binary values"
                    });
                }
            },
            validate: function() {
                var self = this;
                var length = self.values.length;
                var values = self.values;
                for (var i = 0; i < length; i++) {
                    if (memberTypeToSetType[typeOf(values[i])] !== self.type) {
                        throw util.error(new Error(), {
                            code: "InvalidType",
                            message: self.type + " Set contains " + typeOf(values[i]) + " value"
                        });
                    }
                }
            },
            toJSON: function() {
                var self = this;
                return self.values;
            }
        });
        module.exports = DynamoDBSet;
    }, {
        "../core": 44,
        "./types": 58
    } ],
    58: [ function(require, module, exports) {
        var util = require("../core").util;
        function typeOf(data) {
            if (data === null && typeof data === "object") {
                return "null";
            } else if (data !== undefined && isBinary(data)) {
                return "Binary";
            } else if (data !== undefined && data.constructor) {
                return data.wrapperName || util.typeName(data.constructor);
            } else if (data !== undefined && typeof data === "object") {
                return "Object";
            } else {
                return "undefined";
            }
        }
        function isBinary(data) {
            var types = [ "Buffer", "File", "Blob", "ArrayBuffer", "DataView", "Int8Array", "Uint8Array", "Uint8ClampedArray", "Int16Array", "Uint16Array", "Int32Array", "Uint32Array", "Float32Array", "Float64Array" ];
            if (util.isNode()) {
                var Stream = util.stream.Stream;
                if (util.Buffer.isBuffer(data) || data instanceof Stream) {
                    return true;
                }
            }
            for (var i = 0; i < types.length; i++) {
                if (data !== undefined && data.constructor) {
                    if (util.isType(data, types[i])) return true;
                    if (util.typeName(data.constructor) === types[i]) return true;
                }
            }
            return false;
        }
        module.exports = {
            typeOf: typeOf,
            isBinary: isBinary
        };
    }, {
        "../core": 44
    } ],
    55: [ function(require, module, exports) {
        var util = require("../core").util;
        var DynamoDBNumberValue = util.inherit({
            constructor: function NumberValue(value) {
                this.wrapperName = "NumberValue";
                this.value = value.toString();
            },
            toJSON: function() {
                return this.toNumber();
            },
            toNumber: function() {
                return Number(this.value);
            },
            toString: function() {
                return this.value;
            }
        });
        module.exports = DynamoDBNumberValue;
    }, {
        "../core": 44
    } ]
}, {}, [ 101 ]);

AWS.apiLoader.services["dynamodb"]["2012-08-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-08-10",
        endpointPrefix: "dynamodb",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "DynamoDB",
        serviceFullName: "Amazon DynamoDB",
        serviceId: "DynamoDB",
        signatureVersion: "v4",
        targetPrefix: "DynamoDB_20120810",
        uid: "dynamodb-2012-08-10"
    },
    operations: {
        BatchExecuteStatement: {
            input: {
                type: "structure",
                required: [ "Statements" ],
                members: {
                    Statements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Statement" ],
                            members: {
                                Statement: {},
                                Parameters: {
                                    shape: "S5"
                                },
                                ConsistentRead: {
                                    type: "boolean"
                                },
                                ReturnValuesOnConditionCheckFailure: {}
                            }
                        }
                    },
                    ReturnConsumedCapacity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Responses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Error: {
                                    type: "structure",
                                    members: {
                                        Code: {},
                                        Message: {},
                                        Item: {
                                            shape: "Sr"
                                        }
                                    }
                                },
                                TableName: {},
                                Item: {
                                    shape: "Sr"
                                }
                            }
                        }
                    },
                    ConsumedCapacity: {
                        shape: "St"
                    }
                }
            }
        },
        BatchGetItem: {
            input: {
                type: "structure",
                required: [ "RequestItems" ],
                members: {
                    RequestItems: {
                        shape: "S10"
                    },
                    ReturnConsumedCapacity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Responses: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S1a"
                        }
                    },
                    UnprocessedKeys: {
                        shape: "S10"
                    },
                    ConsumedCapacity: {
                        shape: "St"
                    }
                }
            },
            endpointdiscovery: {}
        },
        BatchWriteItem: {
            input: {
                type: "structure",
                required: [ "RequestItems" ],
                members: {
                    RequestItems: {
                        shape: "S1c"
                    },
                    ReturnConsumedCapacity: {},
                    ReturnItemCollectionMetrics: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedItems: {
                        shape: "S1c"
                    },
                    ItemCollectionMetrics: {
                        shape: "S1k"
                    },
                    ConsumedCapacity: {
                        shape: "St"
                    }
                }
            },
            endpointdiscovery: {}
        },
        CreateBackup: {
            input: {
                type: "structure",
                required: [ "TableName", "BackupName" ],
                members: {
                    TableName: {},
                    BackupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupDetails: {
                        shape: "S1t"
                    }
                }
            },
            endpointdiscovery: {}
        },
        CreateGlobalTable: {
            input: {
                type: "structure",
                required: [ "GlobalTableName", "ReplicationGroup" ],
                members: {
                    GlobalTableName: {},
                    ReplicationGroup: {
                        shape: "S21"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalTableDescription: {
                        shape: "S25"
                    }
                }
            },
            endpointdiscovery: {}
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "AttributeDefinitions", "TableName", "KeySchema" ],
                members: {
                    AttributeDefinitions: {
                        shape: "S2l"
                    },
                    TableName: {},
                    KeySchema: {
                        shape: "S2p"
                    },
                    LocalSecondaryIndexes: {
                        shape: "S2s"
                    },
                    GlobalSecondaryIndexes: {
                        shape: "S2y"
                    },
                    BillingMode: {},
                    ProvisionedThroughput: {
                        shape: "S30"
                    },
                    StreamSpecification: {
                        shape: "S32"
                    },
                    SSESpecification: {
                        shape: "S35"
                    },
                    Tags: {
                        shape: "S38"
                    },
                    TableClass: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableDescription: {
                        shape: "S3e"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DeleteBackup: {
            input: {
                type: "structure",
                required: [ "BackupArn" ],
                members: {
                    BackupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupDescription: {
                        shape: "S42"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DeleteItem: {
            input: {
                type: "structure",
                required: [ "TableName", "Key" ],
                members: {
                    TableName: {},
                    Key: {
                        shape: "S13"
                    },
                    Expected: {
                        shape: "S4f"
                    },
                    ConditionalOperator: {},
                    ReturnValues: {},
                    ReturnConsumedCapacity: {},
                    ReturnItemCollectionMetrics: {},
                    ConditionExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    },
                    ExpressionAttributeValues: {
                        shape: "S4n"
                    },
                    ReturnValuesOnConditionCheckFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sr"
                    },
                    ConsumedCapacity: {
                        shape: "Su"
                    },
                    ItemCollectionMetrics: {
                        shape: "S1m"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableDescription: {
                        shape: "S3e"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeBackup: {
            input: {
                type: "structure",
                required: [ "BackupArn" ],
                members: {
                    BackupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupDescription: {
                        shape: "S42"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeContinuousBackups: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuousBackupsDescription: {
                        shape: "S4w"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeContributorInsights: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {},
                    IndexName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableName: {},
                    IndexName: {},
                    ContributorInsightsRuleList: {
                        type: "list",
                        member: {}
                    },
                    ContributorInsightsStatus: {},
                    LastUpdateDateTime: {
                        type: "timestamp"
                    },
                    FailureException: {
                        type: "structure",
                        members: {
                            ExceptionName: {},
                            ExceptionDescription: {}
                        }
                    }
                }
            }
        },
        DescribeEndpoints: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Address", "CachePeriodInMinutes" ],
                            members: {
                                Address: {},
                                CachePeriodInMinutes: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            },
            endpointoperation: true
        },
        DescribeExport: {
            input: {
                type: "structure",
                required: [ "ExportArn" ],
                members: {
                    ExportArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportDescription: {
                        shape: "S5h"
                    }
                }
            }
        },
        DescribeGlobalTable: {
            input: {
                type: "structure",
                required: [ "GlobalTableName" ],
                members: {
                    GlobalTableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalTableDescription: {
                        shape: "S25"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeGlobalTableSettings: {
            input: {
                type: "structure",
                required: [ "GlobalTableName" ],
                members: {
                    GlobalTableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalTableName: {},
                    ReplicaSettings: {
                        shape: "S66"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeImport: {
            input: {
                type: "structure",
                required: [ "ImportArn" ],
                members: {
                    ImportArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ImportTableDescription" ],
                members: {
                    ImportTableDescription: {
                        shape: "S6k"
                    }
                }
            }
        },
        DescribeKinesisStreamingDestination: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableName: {},
                    KinesisDataStreamDestinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StreamArn: {},
                                DestinationStatus: {},
                                DestinationStatusDescription: {}
                            }
                        }
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeLimits: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AccountMaxReadCapacityUnits: {
                        type: "long"
                    },
                    AccountMaxWriteCapacityUnits: {
                        type: "long"
                    },
                    TableMaxReadCapacityUnits: {
                        type: "long"
                    },
                    TableMaxWriteCapacityUnits: {
                        type: "long"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeTable: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "S3e"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DescribeTableReplicaAutoScaling: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableAutoScalingDescription: {
                        shape: "S7c"
                    }
                }
            }
        },
        DescribeTimeToLive: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TimeToLiveDescription: {
                        shape: "S4b"
                    }
                }
            },
            endpointdiscovery: {}
        },
        DisableKinesisStreamingDestination: {
            input: {
                shape: "S7j"
            },
            output: {
                shape: "S7k"
            },
            endpointdiscovery: {}
        },
        EnableKinesisStreamingDestination: {
            input: {
                shape: "S7j"
            },
            output: {
                shape: "S7k"
            },
            endpointdiscovery: {}
        },
        ExecuteStatement: {
            input: {
                type: "structure",
                required: [ "Statement" ],
                members: {
                    Statement: {},
                    Parameters: {
                        shape: "S5"
                    },
                    ConsistentRead: {
                        type: "boolean"
                    },
                    NextToken: {},
                    ReturnConsumedCapacity: {},
                    Limit: {
                        type: "integer"
                    },
                    ReturnValuesOnConditionCheckFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S1a"
                    },
                    NextToken: {},
                    ConsumedCapacity: {
                        shape: "Su"
                    },
                    LastEvaluatedKey: {
                        shape: "S13"
                    }
                }
            }
        },
        ExecuteTransaction: {
            input: {
                type: "structure",
                required: [ "TransactStatements" ],
                members: {
                    TransactStatements: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Statement" ],
                            members: {
                                Statement: {},
                                Parameters: {
                                    shape: "S5"
                                },
                                ReturnValuesOnConditionCheckFailure: {}
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    ReturnConsumedCapacity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Responses: {
                        shape: "S7u"
                    },
                    ConsumedCapacity: {
                        shape: "St"
                    }
                }
            }
        },
        ExportTableToPointInTime: {
            input: {
                type: "structure",
                required: [ "TableArn", "S3Bucket" ],
                members: {
                    TableArn: {},
                    ExportTime: {
                        type: "timestamp"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    S3Bucket: {},
                    S3BucketOwner: {},
                    S3Prefix: {},
                    S3SseAlgorithm: {},
                    S3SseKmsKeyId: {},
                    ExportFormat: {},
                    ExportType: {},
                    IncrementalExportSpecification: {
                        shape: "S5y"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportDescription: {
                        shape: "S5h"
                    }
                }
            }
        },
        GetItem: {
            input: {
                type: "structure",
                required: [ "TableName", "Key" ],
                members: {
                    TableName: {},
                    Key: {
                        shape: "S13"
                    },
                    AttributesToGet: {
                        shape: "S14"
                    },
                    ConsistentRead: {
                        type: "boolean"
                    },
                    ReturnConsumedCapacity: {},
                    ProjectionExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Item: {
                        shape: "Sr"
                    },
                    ConsumedCapacity: {
                        shape: "Su"
                    }
                }
            },
            endpointdiscovery: {}
        },
        ImportTable: {
            input: {
                type: "structure",
                required: [ "S3BucketSource", "InputFormat", "TableCreationParameters" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    S3BucketSource: {
                        shape: "S6m"
                    },
                    InputFormat: {},
                    InputFormatOptions: {
                        shape: "S6q"
                    },
                    InputCompressionType: {},
                    TableCreationParameters: {
                        shape: "S6w"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ImportTableDescription" ],
                members: {
                    ImportTableDescription: {
                        shape: "S6k"
                    }
                }
            }
        },
        ListBackups: {
            input: {
                type: "structure",
                members: {
                    TableName: {},
                    Limit: {
                        type: "integer"
                    },
                    TimeRangeLowerBound: {
                        type: "timestamp"
                    },
                    TimeRangeUpperBound: {
                        type: "timestamp"
                    },
                    ExclusiveStartBackupArn: {},
                    BackupType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BackupSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableName: {},
                                TableId: {},
                                TableArn: {},
                                BackupArn: {},
                                BackupName: {},
                                BackupCreationDateTime: {
                                    type: "timestamp"
                                },
                                BackupExpiryDateTime: {
                                    type: "timestamp"
                                },
                                BackupStatus: {},
                                BackupType: {},
                                BackupSizeBytes: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    LastEvaluatedBackupArn: {}
                }
            },
            endpointdiscovery: {}
        },
        ListContributorInsights: {
            input: {
                type: "structure",
                members: {
                    TableName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContributorInsightsSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableName: {},
                                IndexName: {},
                                ContributorInsightsStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExports: {
            input: {
                type: "structure",
                members: {
                    TableArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExportArn: {},
                                ExportStatus: {},
                                ExportType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGlobalTables: {
            input: {
                type: "structure",
                members: {
                    ExclusiveStartGlobalTableName: {},
                    Limit: {
                        type: "integer"
                    },
                    RegionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalTables: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GlobalTableName: {},
                                ReplicationGroup: {
                                    shape: "S21"
                                }
                            }
                        }
                    },
                    LastEvaluatedGlobalTableName: {}
                }
            },
            endpointdiscovery: {}
        },
        ListImports: {
            input: {
                type: "structure",
                members: {
                    TableArn: {},
                    PageSize: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ImportArn: {},
                                ImportStatus: {},
                                TableArn: {},
                                S3BucketSource: {
                                    shape: "S6m"
                                },
                                CloudWatchLogGroupArn: {},
                                InputFormat: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTables: {
            input: {
                type: "structure",
                members: {
                    ExclusiveStartTableName: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableNames: {
                        type: "list",
                        member: {}
                    },
                    LastEvaluatedTableName: {}
                }
            },
            endpointdiscovery: {}
        },
        ListTagsOfResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S38"
                    },
                    NextToken: {}
                }
            },
            endpointdiscovery: {}
        },
        PutItem: {
            input: {
                type: "structure",
                required: [ "TableName", "Item" ],
                members: {
                    TableName: {},
                    Item: {
                        shape: "S1g"
                    },
                    Expected: {
                        shape: "S4f"
                    },
                    ReturnValues: {},
                    ReturnConsumedCapacity: {},
                    ReturnItemCollectionMetrics: {},
                    ConditionalOperator: {},
                    ConditionExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    },
                    ExpressionAttributeValues: {
                        shape: "S4n"
                    },
                    ReturnValuesOnConditionCheckFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sr"
                    },
                    ConsumedCapacity: {
                        shape: "Su"
                    },
                    ItemCollectionMetrics: {
                        shape: "S1m"
                    }
                }
            },
            endpointdiscovery: {}
        },
        Query: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {},
                    IndexName: {},
                    Select: {},
                    AttributesToGet: {
                        shape: "S14"
                    },
                    Limit: {
                        type: "integer"
                    },
                    ConsistentRead: {
                        type: "boolean"
                    },
                    KeyConditions: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S98"
                        }
                    },
                    QueryFilter: {
                        shape: "S99"
                    },
                    ConditionalOperator: {},
                    ScanIndexForward: {
                        type: "boolean"
                    },
                    ExclusiveStartKey: {
                        shape: "S13"
                    },
                    ReturnConsumedCapacity: {},
                    ProjectionExpression: {},
                    FilterExpression: {},
                    KeyConditionExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    },
                    ExpressionAttributeValues: {
                        shape: "S4n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S1a"
                    },
                    Count: {
                        type: "integer"
                    },
                    ScannedCount: {
                        type: "integer"
                    },
                    LastEvaluatedKey: {
                        shape: "S13"
                    },
                    ConsumedCapacity: {
                        shape: "Su"
                    }
                }
            },
            endpointdiscovery: {}
        },
        RestoreTableFromBackup: {
            input: {
                type: "structure",
                required: [ "TargetTableName", "BackupArn" ],
                members: {
                    TargetTableName: {},
                    BackupArn: {},
                    BillingModeOverride: {},
                    GlobalSecondaryIndexOverride: {
                        shape: "S2y"
                    },
                    LocalSecondaryIndexOverride: {
                        shape: "S2s"
                    },
                    ProvisionedThroughputOverride: {
                        shape: "S30"
                    },
                    SSESpecificationOverride: {
                        shape: "S35"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableDescription: {
                        shape: "S3e"
                    }
                }
            },
            endpointdiscovery: {}
        },
        RestoreTableToPointInTime: {
            input: {
                type: "structure",
                required: [ "TargetTableName" ],
                members: {
                    SourceTableArn: {},
                    SourceTableName: {},
                    TargetTableName: {},
                    UseLatestRestorableTime: {
                        type: "boolean"
                    },
                    RestoreDateTime: {
                        type: "timestamp"
                    },
                    BillingModeOverride: {},
                    GlobalSecondaryIndexOverride: {
                        shape: "S2y"
                    },
                    LocalSecondaryIndexOverride: {
                        shape: "S2s"
                    },
                    ProvisionedThroughputOverride: {
                        shape: "S30"
                    },
                    SSESpecificationOverride: {
                        shape: "S35"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableDescription: {
                        shape: "S3e"
                    }
                }
            },
            endpointdiscovery: {}
        },
        Scan: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    TableName: {},
                    IndexName: {},
                    AttributesToGet: {
                        shape: "S14"
                    },
                    Limit: {
                        type: "integer"
                    },
                    Select: {},
                    ScanFilter: {
                        shape: "S99"
                    },
                    ConditionalOperator: {},
                    ExclusiveStartKey: {
                        shape: "S13"
                    },
                    ReturnConsumedCapacity: {},
                    TotalSegments: {
                        type: "integer"
                    },
                    Segment: {
                        type: "integer"
                    },
                    ProjectionExpression: {},
                    FilterExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    },
                    ExpressionAttributeValues: {
                        shape: "S4n"
                    },
                    ConsistentRead: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        shape: "S1a"
                    },
                    Count: {
                        type: "integer"
                    },
                    ScannedCount: {
                        type: "integer"
                    },
                    LastEvaluatedKey: {
                        shape: "S13"
                    },
                    ConsumedCapacity: {
                        shape: "Su"
                    }
                }
            },
            endpointdiscovery: {}
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S38"
                    }
                }
            },
            endpointdiscovery: {}
        },
        TransactGetItems: {
            input: {
                type: "structure",
                required: [ "TransactItems" ],
                members: {
                    TransactItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Get" ],
                            members: {
                                Get: {
                                    type: "structure",
                                    required: [ "Key", "TableName" ],
                                    members: {
                                        Key: {
                                            shape: "S13"
                                        },
                                        TableName: {},
                                        ProjectionExpression: {},
                                        ExpressionAttributeNames: {
                                            shape: "S16"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ReturnConsumedCapacity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConsumedCapacity: {
                        shape: "St"
                    },
                    Responses: {
                        shape: "S7u"
                    }
                }
            },
            endpointdiscovery: {}
        },
        TransactWriteItems: {
            input: {
                type: "structure",
                required: [ "TransactItems" ],
                members: {
                    TransactItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConditionCheck: {
                                    type: "structure",
                                    required: [ "Key", "TableName", "ConditionExpression" ],
                                    members: {
                                        Key: {
                                            shape: "S13"
                                        },
                                        TableName: {},
                                        ConditionExpression: {},
                                        ExpressionAttributeNames: {
                                            shape: "S16"
                                        },
                                        ExpressionAttributeValues: {
                                            shape: "S4n"
                                        },
                                        ReturnValuesOnConditionCheckFailure: {}
                                    }
                                },
                                Put: {
                                    type: "structure",
                                    required: [ "Item", "TableName" ],
                                    members: {
                                        Item: {
                                            shape: "S1g"
                                        },
                                        TableName: {},
                                        ConditionExpression: {},
                                        ExpressionAttributeNames: {
                                            shape: "S16"
                                        },
                                        ExpressionAttributeValues: {
                                            shape: "S4n"
                                        },
                                        ReturnValuesOnConditionCheckFailure: {}
                                    }
                                },
                                Delete: {
                                    type: "structure",
                                    required: [ "Key", "TableName" ],
                                    members: {
                                        Key: {
                                            shape: "S13"
                                        },
                                        TableName: {},
                                        ConditionExpression: {},
                                        ExpressionAttributeNames: {
                                            shape: "S16"
                                        },
                                        ExpressionAttributeValues: {
                                            shape: "S4n"
                                        },
                                        ReturnValuesOnConditionCheckFailure: {}
                                    }
                                },
                                Update: {
                                    type: "structure",
                                    required: [ "Key", "UpdateExpression", "TableName" ],
                                    members: {
                                        Key: {
                                            shape: "S13"
                                        },
                                        UpdateExpression: {},
                                        TableName: {},
                                        ConditionExpression: {},
                                        ExpressionAttributeNames: {
                                            shape: "S16"
                                        },
                                        ExpressionAttributeValues: {
                                            shape: "S4n"
                                        },
                                        ReturnValuesOnConditionCheckFailure: {}
                                    }
                                }
                            }
                        }
                    },
                    ReturnConsumedCapacity: {},
                    ReturnItemCollectionMetrics: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConsumedCapacity: {
                        shape: "St"
                    },
                    ItemCollectionMetrics: {
                        shape: "S1k"
                    }
                }
            },
            endpointdiscovery: {}
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            endpointdiscovery: {}
        },
        UpdateContinuousBackups: {
            input: {
                type: "structure",
                required: [ "TableName", "PointInTimeRecoverySpecification" ],
                members: {
                    TableName: {},
                    PointInTimeRecoverySpecification: {
                        type: "structure",
                        required: [ "PointInTimeRecoveryEnabled" ],
                        members: {
                            PointInTimeRecoveryEnabled: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContinuousBackupsDescription: {
                        shape: "S4w"
                    }
                }
            },
            endpointdiscovery: {}
        },
        UpdateContributorInsights: {
            input: {
                type: "structure",
                required: [ "TableName", "ContributorInsightsAction" ],
                members: {
                    TableName: {},
                    IndexName: {},
                    ContributorInsightsAction: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableName: {},
                    IndexName: {},
                    ContributorInsightsStatus: {}
                }
            }
        },
        UpdateGlobalTable: {
            input: {
                type: "structure",
                required: [ "GlobalTableName", "ReplicaUpdates" ],
                members: {
                    GlobalTableName: {},
                    ReplicaUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Create: {
                                    type: "structure",
                                    required: [ "RegionName" ],
                                    members: {
                                        RegionName: {}
                                    }
                                },
                                Delete: {
                                    type: "structure",
                                    required: [ "RegionName" ],
                                    members: {
                                        RegionName: {}
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalTableDescription: {
                        shape: "S25"
                    }
                }
            },
            endpointdiscovery: {}
        },
        UpdateGlobalTableSettings: {
            input: {
                type: "structure",
                required: [ "GlobalTableName" ],
                members: {
                    GlobalTableName: {},
                    GlobalTableBillingMode: {},
                    GlobalTableProvisionedWriteCapacityUnits: {
                        type: "long"
                    },
                    GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: {
                        shape: "Saf"
                    },
                    GlobalTableGlobalSecondaryIndexSettingsUpdate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IndexName" ],
                            members: {
                                IndexName: {},
                                ProvisionedWriteCapacityUnits: {
                                    type: "long"
                                },
                                ProvisionedWriteCapacityAutoScalingSettingsUpdate: {
                                    shape: "Saf"
                                }
                            }
                        }
                    },
                    ReplicaSettingsUpdate: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegionName" ],
                            members: {
                                RegionName: {},
                                ReplicaProvisionedReadCapacityUnits: {
                                    type: "long"
                                },
                                ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: {
                                    shape: "Saf"
                                },
                                ReplicaGlobalSecondaryIndexSettingsUpdate: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "IndexName" ],
                                        members: {
                                            IndexName: {},
                                            ProvisionedReadCapacityUnits: {
                                                type: "long"
                                            },
                                            ProvisionedReadCapacityAutoScalingSettingsUpdate: {
                                                shape: "Saf"
                                            }
                                        }
                                    }
                                },
                                ReplicaTableClass: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GlobalTableName: {},
                    ReplicaSettings: {
                        shape: "S66"
                    }
                }
            },
            endpointdiscovery: {}
        },
        UpdateItem: {
            input: {
                type: "structure",
                required: [ "TableName", "Key" ],
                members: {
                    TableName: {},
                    Key: {
                        shape: "S13"
                    },
                    AttributeUpdates: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                Value: {
                                    shape: "S6"
                                },
                                Action: {}
                            }
                        }
                    },
                    Expected: {
                        shape: "S4f"
                    },
                    ConditionalOperator: {},
                    ReturnValues: {},
                    ReturnConsumedCapacity: {},
                    ReturnItemCollectionMetrics: {},
                    UpdateExpression: {},
                    ConditionExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    },
                    ExpressionAttributeValues: {
                        shape: "S4n"
                    },
                    ReturnValuesOnConditionCheckFailure: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sr"
                    },
                    ConsumedCapacity: {
                        shape: "Su"
                    },
                    ItemCollectionMetrics: {
                        shape: "S1m"
                    }
                }
            },
            endpointdiscovery: {}
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    AttributeDefinitions: {
                        shape: "S2l"
                    },
                    TableName: {},
                    BillingMode: {},
                    ProvisionedThroughput: {
                        shape: "S30"
                    },
                    GlobalSecondaryIndexUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Update: {
                                    type: "structure",
                                    required: [ "IndexName", "ProvisionedThroughput" ],
                                    members: {
                                        IndexName: {},
                                        ProvisionedThroughput: {
                                            shape: "S30"
                                        }
                                    }
                                },
                                Create: {
                                    type: "structure",
                                    required: [ "IndexName", "KeySchema", "Projection" ],
                                    members: {
                                        IndexName: {},
                                        KeySchema: {
                                            shape: "S2p"
                                        },
                                        Projection: {
                                            shape: "S2u"
                                        },
                                        ProvisionedThroughput: {
                                            shape: "S30"
                                        }
                                    }
                                },
                                Delete: {
                                    type: "structure",
                                    required: [ "IndexName" ],
                                    members: {
                                        IndexName: {}
                                    }
                                }
                            }
                        }
                    },
                    StreamSpecification: {
                        shape: "S32"
                    },
                    SSESpecification: {
                        shape: "S35"
                    },
                    ReplicaUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Create: {
                                    type: "structure",
                                    required: [ "RegionName" ],
                                    members: {
                                        RegionName: {},
                                        KMSMasterKeyId: {},
                                        ProvisionedThroughputOverride: {
                                            shape: "S2c"
                                        },
                                        GlobalSecondaryIndexes: {
                                            shape: "Sb4"
                                        },
                                        TableClassOverride: {}
                                    }
                                },
                                Update: {
                                    type: "structure",
                                    required: [ "RegionName" ],
                                    members: {
                                        RegionName: {},
                                        KMSMasterKeyId: {},
                                        ProvisionedThroughputOverride: {
                                            shape: "S2c"
                                        },
                                        GlobalSecondaryIndexes: {
                                            shape: "Sb4"
                                        },
                                        TableClassOverride: {}
                                    }
                                },
                                Delete: {
                                    type: "structure",
                                    required: [ "RegionName" ],
                                    members: {
                                        RegionName: {}
                                    }
                                }
                            }
                        }
                    },
                    TableClass: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableDescription: {
                        shape: "S3e"
                    }
                }
            },
            endpointdiscovery: {}
        },
        UpdateTableReplicaAutoScaling: {
            input: {
                type: "structure",
                required: [ "TableName" ],
                members: {
                    GlobalSecondaryIndexUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IndexName: {},
                                ProvisionedWriteCapacityAutoScalingUpdate: {
                                    shape: "Saf"
                                }
                            }
                        }
                    },
                    TableName: {},
                    ProvisionedWriteCapacityAutoScalingUpdate: {
                        shape: "Saf"
                    },
                    ReplicaUpdates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegionName" ],
                            members: {
                                RegionName: {},
                                ReplicaGlobalSecondaryIndexUpdates: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            IndexName: {},
                                            ProvisionedReadCapacityAutoScalingUpdate: {
                                                shape: "Saf"
                                            }
                                        }
                                    }
                                },
                                ReplicaProvisionedReadCapacityAutoScalingUpdate: {
                                    shape: "Saf"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableAutoScalingDescription: {
                        shape: "S7c"
                    }
                }
            }
        },
        UpdateTimeToLive: {
            input: {
                type: "structure",
                required: [ "TableName", "TimeToLiveSpecification" ],
                members: {
                    TableName: {},
                    TimeToLiveSpecification: {
                        shape: "Sbi"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TimeToLiveSpecification: {
                        shape: "Sbi"
                    }
                }
            },
            endpointdiscovery: {}
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                shape: "S6"
            }
        },
        S6: {
            type: "structure",
            members: {
                S: {},
                N: {},
                B: {
                    type: "blob"
                },
                SS: {
                    type: "list",
                    member: {}
                },
                NS: {
                    type: "list",
                    member: {}
                },
                BS: {
                    type: "list",
                    member: {
                        type: "blob"
                    }
                },
                M: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S6"
                    }
                },
                L: {
                    type: "list",
                    member: {
                        shape: "S6"
                    }
                },
                NULL: {
                    type: "boolean"
                },
                BOOL: {
                    type: "boolean"
                }
            }
        },
        Sr: {
            type: "map",
            key: {},
            value: {
                shape: "S6"
            }
        },
        St: {
            type: "list",
            member: {
                shape: "Su"
            }
        },
        Su: {
            type: "structure",
            members: {
                TableName: {},
                CapacityUnits: {
                    type: "double"
                },
                ReadCapacityUnits: {
                    type: "double"
                },
                WriteCapacityUnits: {
                    type: "double"
                },
                Table: {
                    shape: "Sw"
                },
                LocalSecondaryIndexes: {
                    shape: "Sx"
                },
                GlobalSecondaryIndexes: {
                    shape: "Sx"
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                ReadCapacityUnits: {
                    type: "double"
                },
                WriteCapacityUnits: {
                    type: "double"
                },
                CapacityUnits: {
                    type: "double"
                }
            }
        },
        Sx: {
            type: "map",
            key: {},
            value: {
                shape: "Sw"
            }
        },
        S10: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Keys" ],
                members: {
                    Keys: {
                        type: "list",
                        member: {
                            shape: "S13"
                        }
                    },
                    AttributesToGet: {
                        shape: "S14"
                    },
                    ConsistentRead: {
                        type: "boolean"
                    },
                    ProjectionExpression: {},
                    ExpressionAttributeNames: {
                        shape: "S16"
                    }
                }
            }
        },
        S13: {
            type: "map",
            key: {},
            value: {
                shape: "S6"
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S1a: {
            type: "list",
            member: {
                shape: "Sr"
            }
        },
        S1c: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    type: "structure",
                    members: {
                        PutRequest: {
                            type: "structure",
                            required: [ "Item" ],
                            members: {
                                Item: {
                                    shape: "S1g"
                                }
                            }
                        },
                        DeleteRequest: {
                            type: "structure",
                            required: [ "Key" ],
                            members: {
                                Key: {
                                    shape: "S13"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1g: {
            type: "map",
            key: {},
            value: {
                shape: "S6"
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {
                    shape: "S1m"
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                ItemCollectionKey: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S6"
                    }
                },
                SizeEstimateRangeGB: {
                    type: "list",
                    member: {
                        type: "double"
                    }
                }
            }
        },
        S1t: {
            type: "structure",
            required: [ "BackupArn", "BackupName", "BackupStatus", "BackupType", "BackupCreationDateTime" ],
            members: {
                BackupArn: {},
                BackupName: {},
                BackupSizeBytes: {
                    type: "long"
                },
                BackupStatus: {},
                BackupType: {},
                BackupCreationDateTime: {
                    type: "timestamp"
                },
                BackupExpiryDateTime: {
                    type: "timestamp"
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RegionName: {}
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                ReplicationGroup: {
                    shape: "S26"
                },
                GlobalTableArn: {},
                CreationDateTime: {
                    type: "timestamp"
                },
                GlobalTableStatus: {},
                GlobalTableName: {}
            }
        },
        S26: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RegionName: {},
                    ReplicaStatus: {},
                    ReplicaStatusDescription: {},
                    ReplicaStatusPercentProgress: {},
                    KMSMasterKeyId: {},
                    ProvisionedThroughputOverride: {
                        shape: "S2c"
                    },
                    GlobalSecondaryIndexes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                IndexName: {},
                                ProvisionedThroughputOverride: {
                                    shape: "S2c"
                                }
                            }
                        }
                    },
                    ReplicaInaccessibleDateTime: {
                        type: "timestamp"
                    },
                    ReplicaTableClassSummary: {
                        shape: "S2g"
                    }
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                ReadCapacityUnits: {
                    type: "long"
                }
            }
        },
        S2g: {
            type: "structure",
            members: {
                TableClass: {},
                LastUpdateDateTime: {
                    type: "timestamp"
                }
            }
        },
        S2l: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributeName", "AttributeType" ],
                members: {
                    AttributeName: {},
                    AttributeType: {}
                }
            }
        },
        S2p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AttributeName", "KeyType" ],
                members: {
                    AttributeName: {},
                    KeyType: {}
                }
            }
        },
        S2s: {
            type: "list",
            member: {
                type: "structure",
                required: [ "IndexName", "KeySchema", "Projection" ],
                members: {
                    IndexName: {},
                    KeySchema: {
                        shape: "S2p"
                    },
                    Projection: {
                        shape: "S2u"
                    }
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                ProjectionType: {},
                NonKeyAttributes: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "IndexName", "KeySchema", "Projection" ],
                members: {
                    IndexName: {},
                    KeySchema: {
                        shape: "S2p"
                    },
                    Projection: {
                        shape: "S2u"
                    },
                    ProvisionedThroughput: {
                        shape: "S30"
                    }
                }
            }
        },
        S30: {
            type: "structure",
            required: [ "ReadCapacityUnits", "WriteCapacityUnits" ],
            members: {
                ReadCapacityUnits: {
                    type: "long"
                },
                WriteCapacityUnits: {
                    type: "long"
                }
            }
        },
        S32: {
            type: "structure",
            required: [ "StreamEnabled" ],
            members: {
                StreamEnabled: {
                    type: "boolean"
                },
                StreamViewType: {}
            }
        },
        S35: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                SSEType: {},
                KMSMasterKeyId: {}
            }
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                AttributeDefinitions: {
                    shape: "S2l"
                },
                TableName: {},
                KeySchema: {
                    shape: "S2p"
                },
                TableStatus: {},
                CreationDateTime: {
                    type: "timestamp"
                },
                ProvisionedThroughput: {
                    shape: "S3g"
                },
                TableSizeBytes: {
                    type: "long"
                },
                ItemCount: {
                    type: "long"
                },
                TableArn: {},
                TableId: {},
                BillingModeSummary: {
                    shape: "S3k"
                },
                LocalSecondaryIndexes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            IndexName: {},
                            KeySchema: {
                                shape: "S2p"
                            },
                            Projection: {
                                shape: "S2u"
                            },
                            IndexSizeBytes: {
                                type: "long"
                            },
                            ItemCount: {
                                type: "long"
                            },
                            IndexArn: {}
                        }
                    }
                },
                GlobalSecondaryIndexes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            IndexName: {},
                            KeySchema: {
                                shape: "S2p"
                            },
                            Projection: {
                                shape: "S2u"
                            },
                            IndexStatus: {},
                            Backfilling: {
                                type: "boolean"
                            },
                            ProvisionedThroughput: {
                                shape: "S3g"
                            },
                            IndexSizeBytes: {
                                type: "long"
                            },
                            ItemCount: {
                                type: "long"
                            },
                            IndexArn: {}
                        }
                    }
                },
                StreamSpecification: {
                    shape: "S32"
                },
                LatestStreamLabel: {},
                LatestStreamArn: {},
                GlobalTableVersion: {},
                Replicas: {
                    shape: "S26"
                },
                RestoreSummary: {
                    type: "structure",
                    required: [ "RestoreDateTime", "RestoreInProgress" ],
                    members: {
                        SourceBackupArn: {},
                        SourceTableArn: {},
                        RestoreDateTime: {
                            type: "timestamp"
                        },
                        RestoreInProgress: {
                            type: "boolean"
                        }
                    }
                },
                SSEDescription: {
                    shape: "S3v"
                },
                ArchivalSummary: {
                    type: "structure",
                    members: {
                        ArchivalDateTime: {
                            type: "timestamp"
                        },
                        ArchivalReason: {},
                        ArchivalBackupArn: {}
                    }
                },
                TableClassSummary: {
                    shape: "S2g"
                },
                DeletionProtectionEnabled: {
                    type: "boolean"
                }
            }
        },
        S3g: {
            type: "structure",
            members: {
                LastIncreaseDateTime: {
                    type: "timestamp"
                },
                LastDecreaseDateTime: {
                    type: "timestamp"
                },
                NumberOfDecreasesToday: {
                    type: "long"
                },
                ReadCapacityUnits: {
                    type: "long"
                },
                WriteCapacityUnits: {
                    type: "long"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                BillingMode: {},
                LastUpdateToPayPerRequestDateTime: {
                    type: "timestamp"
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                Status: {},
                SSEType: {},
                KMSMasterKeyArn: {},
                InaccessibleEncryptionDateTime: {
                    type: "timestamp"
                }
            }
        },
        S42: {
            type: "structure",
            members: {
                BackupDetails: {
                    shape: "S1t"
                },
                SourceTableDetails: {
                    type: "structure",
                    required: [ "TableName", "TableId", "KeySchema", "TableCreationDateTime", "ProvisionedThroughput" ],
                    members: {
                        TableName: {},
                        TableId: {},
                        TableArn: {},
                        TableSizeBytes: {
                            type: "long"
                        },
                        KeySchema: {
                            shape: "S2p"
                        },
                        TableCreationDateTime: {
                            type: "timestamp"
                        },
                        ProvisionedThroughput: {
                            shape: "S30"
                        },
                        ItemCount: {
                            type: "long"
                        },
                        BillingMode: {}
                    }
                },
                SourceTableFeatureDetails: {
                    type: "structure",
                    members: {
                        LocalSecondaryIndexes: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    IndexName: {},
                                    KeySchema: {
                                        shape: "S2p"
                                    },
                                    Projection: {
                                        shape: "S2u"
                                    }
                                }
                            }
                        },
                        GlobalSecondaryIndexes: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    IndexName: {},
                                    KeySchema: {
                                        shape: "S2p"
                                    },
                                    Projection: {
                                        shape: "S2u"
                                    },
                                    ProvisionedThroughput: {
                                        shape: "S30"
                                    }
                                }
                            }
                        },
                        StreamDescription: {
                            shape: "S32"
                        },
                        TimeToLiveDescription: {
                            shape: "S4b"
                        },
                        SSEDescription: {
                            shape: "S3v"
                        }
                    }
                }
            }
        },
        S4b: {
            type: "structure",
            members: {
                TimeToLiveStatus: {},
                AttributeName: {}
            }
        },
        S4f: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Value: {
                        shape: "S6"
                    },
                    Exists: {
                        type: "boolean"
                    },
                    ComparisonOperator: {},
                    AttributeValueList: {
                        shape: "S4j"
                    }
                }
            }
        },
        S4j: {
            type: "list",
            member: {
                shape: "S6"
            }
        },
        S4n: {
            type: "map",
            key: {},
            value: {
                shape: "S6"
            }
        },
        S4w: {
            type: "structure",
            required: [ "ContinuousBackupsStatus" ],
            members: {
                ContinuousBackupsStatus: {},
                PointInTimeRecoveryDescription: {
                    type: "structure",
                    members: {
                        PointInTimeRecoveryStatus: {},
                        EarliestRestorableDateTime: {
                            type: "timestamp"
                        },
                        LatestRestorableDateTime: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        S5h: {
            type: "structure",
            members: {
                ExportArn: {},
                ExportStatus: {},
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ExportManifest: {},
                TableArn: {},
                TableId: {},
                ExportTime: {
                    type: "timestamp"
                },
                ClientToken: {},
                S3Bucket: {},
                S3BucketOwner: {},
                S3Prefix: {},
                S3SseAlgorithm: {},
                S3SseKmsKeyId: {},
                FailureCode: {},
                FailureMessage: {},
                ExportFormat: {},
                BilledSizeBytes: {
                    type: "long"
                },
                ItemCount: {
                    type: "long"
                },
                ExportType: {},
                IncrementalExportSpecification: {
                    shape: "S5y"
                }
            }
        },
        S5y: {
            type: "structure",
            members: {
                ExportFromTime: {
                    type: "timestamp"
                },
                ExportToTime: {
                    type: "timestamp"
                },
                ExportViewType: {}
            }
        },
        S66: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RegionName" ],
                members: {
                    RegionName: {},
                    ReplicaStatus: {},
                    ReplicaBillingModeSummary: {
                        shape: "S3k"
                    },
                    ReplicaProvisionedReadCapacityUnits: {
                        type: "long"
                    },
                    ReplicaProvisionedReadCapacityAutoScalingSettings: {
                        shape: "S68"
                    },
                    ReplicaProvisionedWriteCapacityUnits: {
                        type: "long"
                    },
                    ReplicaProvisionedWriteCapacityAutoScalingSettings: {
                        shape: "S68"
                    },
                    ReplicaGlobalSecondaryIndexSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IndexName" ],
                            members: {
                                IndexName: {},
                                IndexStatus: {},
                                ProvisionedReadCapacityUnits: {
                                    type: "long"
                                },
                                ProvisionedReadCapacityAutoScalingSettings: {
                                    shape: "S68"
                                },
                                ProvisionedWriteCapacityUnits: {
                                    type: "long"
                                },
                                ProvisionedWriteCapacityAutoScalingSettings: {
                                    shape: "S68"
                                }
                            }
                        }
                    },
                    ReplicaTableClassSummary: {
                        shape: "S2g"
                    }
                }
            }
        },
        S68: {
            type: "structure",
            members: {
                MinimumUnits: {
                    type: "long"
                },
                MaximumUnits: {
                    type: "long"
                },
                AutoScalingDisabled: {
                    type: "boolean"
                },
                AutoScalingRoleArn: {},
                ScalingPolicies: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            PolicyName: {},
                            TargetTrackingScalingPolicyConfiguration: {
                                type: "structure",
                                required: [ "TargetValue" ],
                                members: {
                                    DisableScaleIn: {
                                        type: "boolean"
                                    },
                                    ScaleInCooldown: {
                                        type: "integer"
                                    },
                                    ScaleOutCooldown: {
                                        type: "integer"
                                    },
                                    TargetValue: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S6k: {
            type: "structure",
            members: {
                ImportArn: {},
                ImportStatus: {},
                TableArn: {},
                TableId: {},
                ClientToken: {},
                S3BucketSource: {
                    shape: "S6m"
                },
                ErrorCount: {
                    type: "long"
                },
                CloudWatchLogGroupArn: {},
                InputFormat: {},
                InputFormatOptions: {
                    shape: "S6q"
                },
                InputCompressionType: {},
                TableCreationParameters: {
                    shape: "S6w"
                },
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ProcessedSizeBytes: {
                    type: "long"
                },
                ProcessedItemCount: {
                    type: "long"
                },
                ImportedItemCount: {
                    type: "long"
                },
                FailureCode: {},
                FailureMessage: {}
            }
        },
        S6m: {
            type: "structure",
            required: [ "S3Bucket" ],
            members: {
                S3BucketOwner: {},
                S3Bucket: {},
                S3KeyPrefix: {}
            }
        },
        S6q: {
            type: "structure",
            members: {
                Csv: {
                    type: "structure",
                    members: {
                        Delimiter: {},
                        HeaderList: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S6w: {
            type: "structure",
            required: [ "TableName", "AttributeDefinitions", "KeySchema" ],
            members: {
                TableName: {},
                AttributeDefinitions: {
                    shape: "S2l"
                },
                KeySchema: {
                    shape: "S2p"
                },
                BillingMode: {},
                ProvisionedThroughput: {
                    shape: "S30"
                },
                SSESpecification: {
                    shape: "S35"
                },
                GlobalSecondaryIndexes: {
                    shape: "S2y"
                }
            }
        },
        S7c: {
            type: "structure",
            members: {
                TableName: {},
                TableStatus: {},
                Replicas: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            RegionName: {},
                            GlobalSecondaryIndexes: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        IndexName: {},
                                        IndexStatus: {},
                                        ProvisionedReadCapacityAutoScalingSettings: {
                                            shape: "S68"
                                        },
                                        ProvisionedWriteCapacityAutoScalingSettings: {
                                            shape: "S68"
                                        }
                                    }
                                }
                            },
                            ReplicaProvisionedReadCapacityAutoScalingSettings: {
                                shape: "S68"
                            },
                            ReplicaProvisionedWriteCapacityAutoScalingSettings: {
                                shape: "S68"
                            },
                            ReplicaStatus: {}
                        }
                    }
                }
            }
        },
        S7j: {
            type: "structure",
            required: [ "TableName", "StreamArn" ],
            members: {
                TableName: {},
                StreamArn: {}
            }
        },
        S7k: {
            type: "structure",
            members: {
                TableName: {},
                StreamArn: {},
                DestinationStatus: {}
            }
        },
        S7u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Item: {
                        shape: "Sr"
                    }
                }
            }
        },
        S98: {
            type: "structure",
            required: [ "ComparisonOperator" ],
            members: {
                AttributeValueList: {
                    shape: "S4j"
                },
                ComparisonOperator: {}
            }
        },
        S99: {
            type: "map",
            key: {},
            value: {
                shape: "S98"
            }
        },
        Saf: {
            type: "structure",
            members: {
                MinimumUnits: {
                    type: "long"
                },
                MaximumUnits: {
                    type: "long"
                },
                AutoScalingDisabled: {
                    type: "boolean"
                },
                AutoScalingRoleArn: {},
                ScalingPolicyUpdate: {
                    type: "structure",
                    required: [ "TargetTrackingScalingPolicyConfiguration" ],
                    members: {
                        PolicyName: {},
                        TargetTrackingScalingPolicyConfiguration: {
                            type: "structure",
                            required: [ "TargetValue" ],
                            members: {
                                DisableScaleIn: {
                                    type: "boolean"
                                },
                                ScaleInCooldown: {
                                    type: "integer"
                                },
                                ScaleOutCooldown: {
                                    type: "integer"
                                },
                                TargetValue: {
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sb4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "IndexName" ],
                members: {
                    IndexName: {},
                    ProvisionedThroughputOverride: {
                        shape: "S2c"
                    }
                }
            }
        },
        Sbi: {
            type: "structure",
            required: [ "Enabled", "AttributeName" ],
            members: {
                Enabled: {
                    type: "boolean"
                },
                AttributeName: {}
            }
        }
    },
    paginators: {
        BatchGetItem: {
            input_token: "RequestItems",
            output_token: "UnprocessedKeys"
        },
        ListContributorInsights: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListExports: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListImports: {
            input_token: "NextToken",
            limit_key: "PageSize",
            output_token: "NextToken"
        },
        ListTables: {
            input_token: "ExclusiveStartTableName",
            limit_key: "Limit",
            output_token: "LastEvaluatedTableName",
            result_key: "TableNames"
        },
        Query: {
            input_token: "ExclusiveStartKey",
            limit_key: "Limit",
            output_token: "LastEvaluatedKey",
            result_key: "Items"
        },
        Scan: {
            input_token: "ExclusiveStartKey",
            limit_key: "Limit",
            output_token: "LastEvaluatedKey",
            result_key: "Items"
        }
    },
    waiters: {
        TableExists: {
            delay: 20,
            operation: "DescribeTable",
            maxAttempts: 25,
            acceptors: [ {
                expected: "ACTIVE",
                matcher: "path",
                state: "success",
                argument: "Table.TableStatus"
            }, {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "retry"
            } ]
        },
        TableNotExists: {
            delay: 20,
            operation: "DescribeTable",
            maxAttempts: 25,
            acceptors: [ {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            } ]
        }
    }
};

AWS.apiLoader.services["dynamodbstreams"] = {};

AWS.DynamoDBStreams = AWS.Service.defineService("dynamodbstreams", [ "2012-08-10" ]);

AWS.apiLoader.services["dynamodbstreams"]["2012-08-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-08-10",
        endpointPrefix: "streams.dynamodb",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon DynamoDB Streams",
        serviceId: "DynamoDB Streams",
        signatureVersion: "v4",
        signingName: "dynamodb",
        targetPrefix: "DynamoDBStreams_20120810",
        uid: "streams-dynamodb-2012-08-10"
    },
    operations: {
        DescribeStream: {
            input: {
                type: "structure",
                required: [ "StreamArn" ],
                members: {
                    StreamArn: {},
                    Limit: {
                        type: "integer"
                    },
                    ExclusiveStartShardId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamDescription: {
                        type: "structure",
                        members: {
                            StreamArn: {},
                            StreamLabel: {},
                            StreamStatus: {},
                            StreamViewType: {},
                            CreationRequestDateTime: {
                                type: "timestamp"
                            },
                            TableName: {},
                            KeySchema: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "AttributeName", "KeyType" ],
                                    members: {
                                        AttributeName: {},
                                        KeyType: {}
                                    }
                                }
                            },
                            Shards: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ShardId: {},
                                        SequenceNumberRange: {
                                            type: "structure",
                                            members: {
                                                StartingSequenceNumber: {},
                                                EndingSequenceNumber: {}
                                            }
                                        },
                                        ParentShardId: {}
                                    }
                                }
                            },
                            LastEvaluatedShardId: {}
                        }
                    }
                }
            }
        },
        GetRecords: {
            input: {
                type: "structure",
                required: [ "ShardIterator" ],
                members: {
                    ShardIterator: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Records: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                eventID: {},
                                eventName: {},
                                eventVersion: {},
                                eventSource: {},
                                awsRegion: {},
                                dynamodb: {
                                    type: "structure",
                                    members: {
                                        ApproximateCreationDateTime: {
                                            type: "timestamp"
                                        },
                                        Keys: {
                                            shape: "Sr"
                                        },
                                        NewImage: {
                                            shape: "Sr"
                                        },
                                        OldImage: {
                                            shape: "Sr"
                                        },
                                        SequenceNumber: {},
                                        SizeBytes: {
                                            type: "long"
                                        },
                                        StreamViewType: {}
                                    }
                                },
                                userIdentity: {
                                    type: "structure",
                                    members: {
                                        PrincipalId: {},
                                        Type: {}
                                    }
                                }
                            }
                        }
                    },
                    NextShardIterator: {}
                }
            }
        },
        GetShardIterator: {
            input: {
                type: "structure",
                required: [ "StreamArn", "ShardId", "ShardIteratorType" ],
                members: {
                    StreamArn: {},
                    ShardId: {},
                    ShardIteratorType: {},
                    SequenceNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ShardIterator: {}
                }
            }
        },
        ListStreams: {
            input: {
                type: "structure",
                members: {
                    TableName: {},
                    Limit: {
                        type: "integer"
                    },
                    ExclusiveStartStreamArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Streams: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StreamArn: {},
                                TableName: {},
                                StreamLabel: {}
                            }
                        }
                    },
                    LastEvaluatedStreamArn: {}
                }
            }
        }
    },
    shapes: {
        Sr: {
            type: "map",
            key: {},
            value: {
                shape: "St"
            }
        },
        St: {
            type: "structure",
            members: {
                S: {},
                N: {},
                B: {
                    type: "blob"
                },
                SS: {
                    type: "list",
                    member: {}
                },
                NS: {
                    type: "list",
                    member: {}
                },
                BS: {
                    type: "list",
                    member: {
                        type: "blob"
                    }
                },
                M: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "St"
                    }
                },
                L: {
                    type: "list",
                    member: {
                        shape: "St"
                    }
                },
                NULL: {
                    type: "boolean"
                },
                BOOL: {
                    type: "boolean"
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["ec2"] = {};

AWS.EC2 = AWS.Service.defineService("ec2", [ "2016-11-15" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    102: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.EC2.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                request.removeListener("extractError", AWS.EventListeners.Query.EXTRACT_ERROR);
                request.addListener("extractError", this.extractError);
                if (request.operation === "copySnapshot") {
                    request.onAsync("validate", this.buildCopySnapshotPresignedUrl);
                }
            },
            buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {
                if (req.params.PresignedUrl || req._subRequest) {
                    return done();
                }
                req.params = AWS.util.copy(req.params);
                req.params.DestinationRegion = req.service.config.region;
                var config = AWS.util.copy(req.service.config);
                delete config.endpoint;
                config.region = req.params.SourceRegion;
                var svc = new req.service.constructor(config);
                var newReq = svc[req.operation](req.params);
                newReq._subRequest = true;
                newReq.presign(function(err, url) {
                    if (err) done(err); else {
                        req.params.PresignedUrl = url;
                        done();
                    }
                });
            },
            extractError: function extractError(resp) {
                var httpResponse = resp.httpResponse;
                var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || "");
                if (data.Errors) {
                    resp.error = AWS.util.error(new Error(), {
                        code: data.Errors.Error.Code,
                        message: data.Errors.Error.Message
                    });
                } else {
                    resp.error = AWS.util.error(new Error(), {
                        code: httpResponse.statusCode,
                        message: null
                    });
                }
                resp.error.requestId = data.RequestID || null;
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 102 ]);

AWS.apiLoader.services["ec2"]["2016-11-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-15",
        endpointPrefix: "ec2",
        protocol: "ec2",
        serviceAbbreviation: "Amazon EC2",
        serviceFullName: "Amazon Elastic Compute Cloud",
        serviceId: "EC2",
        signatureVersion: "v4",
        uid: "ec2-2016-11-15",
        xmlNamespace: "http://ec2.amazonaws.com/doc/2016-11-15"
    },
    operations: {
        AcceptAddressTransfer: {
            input: {
                type: "structure",
                required: [ "Address" ],
                members: {
                    Address: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressTransfer: {
                        shape: "Sa",
                        locationName: "addressTransfer"
                    }
                }
            }
        },
        AcceptReservedInstancesExchangeQuote: {
            input: {
                type: "structure",
                required: [ "ReservedInstanceIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ReservedInstanceIds: {
                        shape: "Se",
                        locationName: "ReservedInstanceId"
                    },
                    TargetConfigurations: {
                        shape: "Sg",
                        locationName: "TargetConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExchangeId: {
                        locationName: "exchangeId"
                    }
                }
            }
        },
        AcceptTransitGatewayMulticastDomainAssociations: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomainId: {},
                    TransitGatewayAttachmentId: {},
                    SubnetIds: {
                        shape: "So"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        shape: "Sq",
                        locationName: "associations"
                    }
                }
            }
        },
        AcceptTransitGatewayPeeringAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeeringAttachment: {
                        shape: "Sx",
                        locationName: "transitGatewayPeeringAttachment"
                    }
                }
            }
        },
        AcceptTransitGatewayVpcAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayVpcAttachment: {
                        shape: "S16",
                        locationName: "transitGatewayVpcAttachment"
                    }
                }
            }
        },
        AcceptVpcEndpointConnections: {
            input: {
                type: "structure",
                required: [ "ServiceId", "VpcEndpointIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    VpcEndpointIds: {
                        shape: "S1e",
                        locationName: "VpcEndpointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        AcceptVpcPeeringConnection: {
            input: {
                type: "structure",
                required: [ "VpcPeeringConnectionId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcPeeringConnectionId: {
                        locationName: "vpcPeeringConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcPeeringConnection: {
                        shape: "S1n",
                        locationName: "vpcPeeringConnection"
                    }
                }
            }
        },
        AdvertiseByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {},
                    Asn: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "S1y",
                        locationName: "byoipCidr"
                    }
                }
            }
        },
        AllocateAddress: {
            input: {
                type: "structure",
                members: {
                    Domain: {},
                    Address: {},
                    PublicIpv4Pool: {},
                    NetworkBorderGroup: {},
                    CustomerOwnedIpv4Pool: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicIp: {
                        locationName: "publicIp"
                    },
                    AllocationId: {
                        locationName: "allocationId"
                    },
                    PublicIpv4Pool: {
                        locationName: "publicIpv4Pool"
                    },
                    NetworkBorderGroup: {
                        locationName: "networkBorderGroup"
                    },
                    Domain: {
                        locationName: "domain"
                    },
                    CustomerOwnedIp: {
                        locationName: "customerOwnedIp"
                    },
                    CustomerOwnedIpv4Pool: {
                        locationName: "customerOwnedIpv4Pool"
                    },
                    CarrierIp: {
                        locationName: "carrierIp"
                    }
                }
            }
        },
        AllocateHosts: {
            input: {
                type: "structure",
                required: [ "AvailabilityZone" ],
                members: {
                    AutoPlacement: {
                        locationName: "autoPlacement"
                    },
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    InstanceType: {
                        locationName: "instanceType"
                    },
                    InstanceFamily: {},
                    Quantity: {
                        locationName: "quantity",
                        type: "integer"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    HostRecovery: {},
                    OutpostArn: {},
                    HostMaintenance: {},
                    AssetIds: {
                        locationName: "AssetId",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HostIds: {
                        shape: "S2f",
                        locationName: "hostIdSet"
                    }
                }
            }
        },
        AllocateIpamPoolCidr: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Cidr: {},
                    NetmaskLength: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    PreviewNextCidr: {
                        type: "boolean"
                    },
                    AllowedCidrs: {
                        locationName: "AllowedCidr",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DisallowedCidrs: {
                        locationName: "DisallowedCidr",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPoolAllocation: {
                        shape: "S2l",
                        locationName: "ipamPoolAllocation"
                    }
                }
            }
        },
        ApplySecurityGroupsToClientVpnTargetNetwork: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "VpcId", "SecurityGroupIds" ],
                members: {
                    ClientVpnEndpointId: {},
                    VpcId: {},
                    SecurityGroupIds: {
                        shape: "S2r",
                        locationName: "SecurityGroupId"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroupIds: {
                        shape: "S2r",
                        locationName: "securityGroupIds"
                    }
                }
            }
        },
        AssignIpv6Addresses: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    Ipv6AddressCount: {
                        locationName: "ipv6AddressCount",
                        type: "integer"
                    },
                    Ipv6Addresses: {
                        shape: "S2v",
                        locationName: "ipv6Addresses"
                    },
                    Ipv6PrefixCount: {
                        type: "integer"
                    },
                    Ipv6Prefixes: {
                        shape: "S2w",
                        locationName: "Ipv6Prefix"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssignedIpv6Addresses: {
                        shape: "S2v",
                        locationName: "assignedIpv6Addresses"
                    },
                    AssignedIpv6Prefixes: {
                        shape: "S2w",
                        locationName: "assignedIpv6PrefixSet"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    }
                }
            }
        },
        AssignPrivateIpAddresses: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    AllowReassignment: {
                        locationName: "allowReassignment",
                        type: "boolean"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    PrivateIpAddresses: {
                        shape: "S30",
                        locationName: "privateIpAddress"
                    },
                    SecondaryPrivateIpAddressCount: {
                        locationName: "secondaryPrivateIpAddressCount",
                        type: "integer"
                    },
                    Ipv4Prefixes: {
                        shape: "S2w",
                        locationName: "Ipv4Prefix"
                    },
                    Ipv4PrefixCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    AssignedPrivateIpAddresses: {
                        locationName: "assignedPrivateIpAddressesSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                PrivateIpAddress: {
                                    locationName: "privateIpAddress"
                                }
                            }
                        }
                    },
                    AssignedIpv4Prefixes: {
                        shape: "S34",
                        locationName: "assignedIpv4PrefixSet"
                    }
                }
            }
        },
        AssignPrivateNatGatewayAddress: {
            input: {
                type: "structure",
                required: [ "NatGatewayId" ],
                members: {
                    NatGatewayId: {},
                    PrivateIpAddresses: {
                        shape: "S38",
                        locationName: "PrivateIpAddress"
                    },
                    PrivateIpAddressCount: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    },
                    NatGatewayAddresses: {
                        shape: "S3b",
                        locationName: "natGatewayAddressSet"
                    }
                }
            }
        },
        AssociateAddress: {
            input: {
                type: "structure",
                members: {
                    AllocationId: {},
                    InstanceId: {},
                    PublicIp: {},
                    AllowReassociation: {
                        locationName: "allowReassociation",
                        type: "boolean"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    PrivateIpAddress: {
                        locationName: "privateIpAddress"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    }
                }
            }
        },
        AssociateClientVpnTargetNetwork: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "SubnetId" ],
                members: {
                    ClientVpnEndpointId: {},
                    SubnetId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    },
                    Status: {
                        shape: "S3m",
                        locationName: "status"
                    }
                }
            }
        },
        AssociateDhcpOptions: {
            input: {
                type: "structure",
                required: [ "DhcpOptionsId", "VpcId" ],
                members: {
                    DhcpOptionsId: {},
                    VpcId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        AssociateEnclaveCertificateIamRole: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "RoleArn" ],
                members: {
                    CertificateArn: {},
                    RoleArn: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateS3BucketName: {
                        locationName: "certificateS3BucketName"
                    },
                    CertificateS3ObjectKey: {
                        locationName: "certificateS3ObjectKey"
                    },
                    EncryptionKmsKeyId: {
                        locationName: "encryptionKmsKeyId"
                    }
                }
            }
        },
        AssociateIamInstanceProfile: {
            input: {
                type: "structure",
                required: [ "IamInstanceProfile", "InstanceId" ],
                members: {
                    IamInstanceProfile: {
                        shape: "S3v"
                    },
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IamInstanceProfileAssociation: {
                        shape: "S3x",
                        locationName: "iamInstanceProfileAssociation"
                    }
                }
            }
        },
        AssociateInstanceEventWindow: {
            input: {
                type: "structure",
                required: [ "InstanceEventWindowId", "AssociationTarget" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceEventWindowId: {},
                    AssociationTarget: {
                        type: "structure",
                        members: {
                            InstanceIds: {
                                shape: "S43",
                                locationName: "InstanceId"
                            },
                            InstanceTags: {
                                shape: "S6",
                                locationName: "InstanceTag"
                            },
                            DedicatedHostIds: {
                                shape: "S44",
                                locationName: "DedicatedHostId"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceEventWindow: {
                        shape: "S47",
                        locationName: "instanceEventWindow"
                    }
                }
            }
        },
        AssociateIpamByoasn: {
            input: {
                type: "structure",
                required: [ "Asn", "Cidr" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Asn: {},
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AsnAssociation: {
                        shape: "S20",
                        locationName: "asnAssociation"
                    }
                }
            }
        },
        AssociateIpamResourceDiscovery: {
            input: {
                type: "structure",
                required: [ "IpamId", "IpamResourceDiscoveryId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamId: {},
                    IpamResourceDiscoveryId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscoveryAssociation: {
                        shape: "S4l",
                        locationName: "ipamResourceDiscoveryAssociation"
                    }
                }
            }
        },
        AssociateNatGatewayAddress: {
            input: {
                type: "structure",
                required: [ "NatGatewayId", "AllocationIds" ],
                members: {
                    NatGatewayId: {},
                    AllocationIds: {
                        shape: "S4r",
                        locationName: "AllocationId"
                    },
                    PrivateIpAddresses: {
                        shape: "S38",
                        locationName: "PrivateIpAddress"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    },
                    NatGatewayAddresses: {
                        shape: "S3b",
                        locationName: "natGatewayAddressSet"
                    }
                }
            }
        },
        AssociateRouteTable: {
            input: {
                type: "structure",
                required: [ "RouteTableId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    RouteTableId: {
                        locationName: "routeTableId"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    },
                    GatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    },
                    AssociationState: {
                        shape: "S4x",
                        locationName: "associationState"
                    }
                }
            }
        },
        AssociateSubnetCidrBlock: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    Ipv6CidrBlock: {
                        locationName: "ipv6CidrBlock"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    },
                    Ipv6IpamPoolId: {},
                    Ipv6NetmaskLength: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipv6CidrBlockAssociation: {
                        shape: "S52",
                        locationName: "ipv6CidrBlockAssociation"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    }
                }
            }
        },
        AssociateTransitGatewayMulticastDomain: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId", "TransitGatewayAttachmentId", "SubnetIds" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    TransitGatewayAttachmentId: {},
                    SubnetIds: {
                        shape: "S57"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        shape: "Sq",
                        locationName: "associations"
                    }
                }
            }
        },
        AssociateTransitGatewayPolicyTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayPolicyTableId", "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayPolicyTableId: {},
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "S5c",
                        locationName: "association"
                    }
                }
            }
        },
        AssociateTransitGatewayRouteTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "S5h",
                        locationName: "association"
                    }
                }
            }
        },
        AssociateTrunkInterface: {
            input: {
                type: "structure",
                required: [ "BranchInterfaceId", "TrunkInterfaceId" ],
                members: {
                    BranchInterfaceId: {},
                    TrunkInterfaceId: {},
                    VlanId: {
                        type: "integer"
                    },
                    GreKey: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InterfaceAssociation: {
                        shape: "S5k",
                        locationName: "interfaceAssociation"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        AssociateVpcCidrBlock: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    AmazonProvidedIpv6CidrBlock: {
                        locationName: "amazonProvidedIpv6CidrBlock",
                        type: "boolean"
                    },
                    CidrBlock: {},
                    VpcId: {
                        locationName: "vpcId"
                    },
                    Ipv6CidrBlockNetworkBorderGroup: {},
                    Ipv6Pool: {},
                    Ipv6CidrBlock: {},
                    Ipv4IpamPoolId: {},
                    Ipv4NetmaskLength: {
                        type: "integer"
                    },
                    Ipv6IpamPoolId: {},
                    Ipv6NetmaskLength: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipv6CidrBlockAssociation: {
                        shape: "S5q",
                        locationName: "ipv6CidrBlockAssociation"
                    },
                    CidrBlockAssociation: {
                        shape: "S5t",
                        locationName: "cidrBlockAssociation"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            }
        },
        AttachClassicLinkVpc: {
            input: {
                type: "structure",
                required: [ "Groups", "InstanceId", "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "S5v",
                        locationName: "SecurityGroupId"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        AttachInternetGateway: {
            input: {
                type: "structure",
                required: [ "InternetGatewayId", "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InternetGatewayId: {
                        locationName: "internetGatewayId"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            }
        },
        AttachNetworkInterface: {
            input: {
                type: "structure",
                required: [ "DeviceIndex", "InstanceId", "NetworkInterfaceId" ],
                members: {
                    DeviceIndex: {
                        locationName: "deviceIndex",
                        type: "integer"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    NetworkCardIndex: {
                        type: "integer"
                    },
                    EnaSrdSpecification: {
                        shape: "S60"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttachmentId: {
                        locationName: "attachmentId"
                    },
                    NetworkCardIndex: {
                        locationName: "networkCardIndex",
                        type: "integer"
                    }
                }
            }
        },
        AttachVerifiedAccessTrustProvider: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessInstanceId", "VerifiedAccessTrustProviderId" ],
                members: {
                    VerifiedAccessInstanceId: {},
                    VerifiedAccessTrustProviderId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProvider: {
                        shape: "S67",
                        locationName: "verifiedAccessTrustProvider"
                    },
                    VerifiedAccessInstance: {
                        shape: "S6g",
                        locationName: "verifiedAccessInstance"
                    }
                }
            }
        },
        AttachVolume: {
            input: {
                type: "structure",
                required: [ "Device", "InstanceId", "VolumeId" ],
                members: {
                    Device: {},
                    InstanceId: {},
                    VolumeId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S6l"
            }
        },
        AttachVpnGateway: {
            input: {
                type: "structure",
                required: [ "VpcId", "VpnGatewayId" ],
                members: {
                    VpcId: {},
                    VpnGatewayId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcAttachment: {
                        shape: "S6q",
                        locationName: "attachment"
                    }
                }
            }
        },
        AuthorizeClientVpnIngress: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "TargetNetworkCidr" ],
                members: {
                    ClientVpnEndpointId: {},
                    TargetNetworkCidr: {},
                    AccessGroupId: {},
                    AuthorizeAllGroups: {
                        type: "boolean"
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "S6u",
                        locationName: "status"
                    }
                }
            }
        },
        AuthorizeSecurityGroupEgress: {
            input: {
                type: "structure",
                required: [ "GroupId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    GroupId: {
                        locationName: "groupId"
                    },
                    IpPermissions: {
                        shape: "S6x",
                        locationName: "ipPermissions"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    CidrIp: {
                        locationName: "cidrIp"
                    },
                    FromPort: {
                        locationName: "fromPort",
                        type: "integer"
                    },
                    IpProtocol: {
                        locationName: "ipProtocol"
                    },
                    ToPort: {
                        locationName: "toPort",
                        type: "integer"
                    },
                    SourceSecurityGroupName: {
                        locationName: "sourceSecurityGroupName"
                    },
                    SourceSecurityGroupOwnerId: {
                        locationName: "sourceSecurityGroupOwnerId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    },
                    SecurityGroupRules: {
                        shape: "S78",
                        locationName: "securityGroupRuleSet"
                    }
                }
            }
        },
        AuthorizeSecurityGroupIngress: {
            input: {
                type: "structure",
                members: {
                    CidrIp: {},
                    FromPort: {
                        type: "integer"
                    },
                    GroupId: {},
                    GroupName: {},
                    IpPermissions: {
                        shape: "S6x"
                    },
                    IpProtocol: {},
                    SourceSecurityGroupName: {},
                    SourceSecurityGroupOwnerId: {},
                    ToPort: {
                        type: "integer"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    },
                    SecurityGroupRules: {
                        shape: "S78",
                        locationName: "securityGroupRuleSet"
                    }
                }
            }
        },
        BundleInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId", "Storage" ],
                members: {
                    InstanceId: {},
                    Storage: {
                        shape: "S7h"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BundleTask: {
                        shape: "S7m",
                        locationName: "bundleInstanceTask"
                    }
                }
            }
        },
        CancelBundleTask: {
            input: {
                type: "structure",
                required: [ "BundleId" ],
                members: {
                    BundleId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BundleTask: {
                        shape: "S7m",
                        locationName: "bundleInstanceTask"
                    }
                }
            }
        },
        CancelCapacityReservation: {
            input: {
                type: "structure",
                required: [ "CapacityReservationId" ],
                members: {
                    CapacityReservationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        CancelCapacityReservationFleets: {
            input: {
                type: "structure",
                required: [ "CapacityReservationFleetIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    CapacityReservationFleetIds: {
                        shape: "S7w",
                        locationName: "CapacityReservationFleetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulFleetCancellations: {
                        locationName: "successfulFleetCancellationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CurrentFleetState: {
                                    locationName: "currentFleetState"
                                },
                                PreviousFleetState: {
                                    locationName: "previousFleetState"
                                },
                                CapacityReservationFleetId: {
                                    locationName: "capacityReservationFleetId"
                                }
                            }
                        }
                    },
                    FailedFleetCancellations: {
                        locationName: "failedFleetCancellationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CapacityReservationFleetId: {
                                    locationName: "capacityReservationFleetId"
                                },
                                CancelCapacityReservationFleetError: {
                                    locationName: "cancelCapacityReservationFleetError",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        CancelConversionTask: {
            input: {
                type: "structure",
                required: [ "ConversionTaskId" ],
                members: {
                    ConversionTaskId: {
                        locationName: "conversionTaskId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    ReasonMessage: {
                        locationName: "reasonMessage"
                    }
                }
            }
        },
        CancelExportTask: {
            input: {
                type: "structure",
                required: [ "ExportTaskId" ],
                members: {
                    ExportTaskId: {
                        locationName: "exportTaskId"
                    }
                }
            }
        },
        CancelImageLaunchPermission: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        CancelImportTask: {
            input: {
                type: "structure",
                members: {
                    CancelReason: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ImportTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportTaskId: {
                        locationName: "importTaskId"
                    },
                    PreviousState: {
                        locationName: "previousState"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        CancelReservedInstancesListing: {
            input: {
                type: "structure",
                required: [ "ReservedInstancesListingId" ],
                members: {
                    ReservedInstancesListingId: {
                        locationName: "reservedInstancesListingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstancesListings: {
                        shape: "S8k",
                        locationName: "reservedInstancesListingsSet"
                    }
                }
            }
        },
        CancelSpotFleetRequests: {
            input: {
                type: "structure",
                required: [ "SpotFleetRequestIds", "TerminateInstances" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    SpotFleetRequestIds: {
                        shape: "S8w",
                        locationName: "spotFleetRequestId"
                    },
                    TerminateInstances: {
                        locationName: "terminateInstances",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulFleetRequests: {
                        locationName: "successfulFleetRequestSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CurrentSpotFleetRequestState: {
                                    locationName: "currentSpotFleetRequestState"
                                },
                                PreviousSpotFleetRequestState: {
                                    locationName: "previousSpotFleetRequestState"
                                },
                                SpotFleetRequestId: {
                                    locationName: "spotFleetRequestId"
                                }
                            }
                        }
                    },
                    UnsuccessfulFleetRequests: {
                        locationName: "unsuccessfulFleetRequestSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Error: {
                                    locationName: "error",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                },
                                SpotFleetRequestId: {
                                    locationName: "spotFleetRequestId"
                                }
                            }
                        }
                    }
                }
            }
        },
        CancelSpotInstanceRequests: {
            input: {
                type: "structure",
                required: [ "SpotInstanceRequestIds" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    SpotInstanceRequestIds: {
                        shape: "S97",
                        locationName: "SpotInstanceRequestId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CancelledSpotInstanceRequests: {
                        locationName: "spotInstanceRequestSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SpotInstanceRequestId: {
                                    locationName: "spotInstanceRequestId"
                                },
                                State: {
                                    locationName: "state"
                                }
                            }
                        }
                    }
                }
            }
        },
        ConfirmProductInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId", "ProductCode" ],
                members: {
                    InstanceId: {},
                    ProductCode: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OwnerId: {
                        locationName: "ownerId"
                    },
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        CopyFpgaImage: {
            input: {
                type: "structure",
                required: [ "SourceFpgaImageId", "SourceRegion" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    SourceFpgaImageId: {},
                    Description: {},
                    Name: {},
                    SourceRegion: {},
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FpgaImageId: {
                        locationName: "fpgaImageId"
                    }
                }
            }
        },
        CopyImage: {
            input: {
                type: "structure",
                required: [ "Name", "SourceImageId", "SourceRegion" ],
                members: {
                    ClientToken: {},
                    Description: {},
                    Encrypted: {
                        locationName: "encrypted",
                        type: "boolean"
                    },
                    KmsKeyId: {
                        locationName: "kmsKeyId"
                    },
                    Name: {},
                    SourceImageId: {},
                    SourceRegion: {},
                    DestinationOutpostArn: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    CopyImageTags: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {
                        locationName: "imageId"
                    }
                }
            }
        },
        CopySnapshot: {
            input: {
                type: "structure",
                required: [ "SourceRegion", "SourceSnapshotId" ],
                members: {
                    Description: {},
                    DestinationOutpostArn: {},
                    DestinationRegion: {
                        locationName: "destinationRegion"
                    },
                    Encrypted: {
                        locationName: "encrypted",
                        type: "boolean"
                    },
                    KmsKeyId: {
                        locationName: "kmsKeyId"
                    },
                    PresignedUrl: {
                        locationName: "presignedUrl",
                        type: "string",
                        sensitive: true
                    },
                    SourceRegion: {},
                    SourceSnapshotId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {
                        locationName: "snapshotId"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        CreateCapacityReservation: {
            input: {
                type: "structure",
                required: [ "InstanceType", "InstancePlatform", "InstanceCount" ],
                members: {
                    ClientToken: {},
                    InstanceType: {},
                    InstancePlatform: {},
                    AvailabilityZone: {},
                    AvailabilityZoneId: {},
                    Tenancy: {},
                    InstanceCount: {
                        type: "integer"
                    },
                    EbsOptimized: {
                        type: "boolean"
                    },
                    EphemeralStorage: {
                        type: "boolean"
                    },
                    EndDate: {
                        type: "timestamp"
                    },
                    EndDateType: {},
                    InstanceMatchCriteria: {},
                    TagSpecifications: {
                        shape: "S3"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    OutpostArn: {},
                    PlacementGroupArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CapacityReservation: {
                        shape: "S9x",
                        locationName: "capacityReservation"
                    }
                }
            }
        },
        CreateCapacityReservationFleet: {
            input: {
                type: "structure",
                required: [ "InstanceTypeSpecifications", "TotalTargetCapacity" ],
                members: {
                    AllocationStrategy: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    InstanceTypeSpecifications: {
                        locationName: "InstanceTypeSpecification",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceType: {},
                                InstancePlatform: {},
                                Weight: {
                                    type: "double"
                                },
                                AvailabilityZone: {},
                                AvailabilityZoneId: {},
                                EbsOptimized: {
                                    type: "boolean"
                                },
                                Priority: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    Tenancy: {},
                    TotalTargetCapacity: {
                        type: "integer"
                    },
                    EndDate: {
                        type: "timestamp"
                    },
                    InstanceMatchCriteria: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CapacityReservationFleetId: {
                        locationName: "capacityReservationFleetId"
                    },
                    State: {
                        locationName: "state"
                    },
                    TotalTargetCapacity: {
                        locationName: "totalTargetCapacity",
                        type: "integer"
                    },
                    TotalFulfilledCapacity: {
                        locationName: "totalFulfilledCapacity",
                        type: "double"
                    },
                    InstanceMatchCriteria: {
                        locationName: "instanceMatchCriteria"
                    },
                    AllocationStrategy: {
                        locationName: "allocationStrategy"
                    },
                    CreateTime: {
                        locationName: "createTime",
                        type: "timestamp"
                    },
                    EndDate: {
                        locationName: "endDate",
                        type: "timestamp"
                    },
                    Tenancy: {
                        locationName: "tenancy"
                    },
                    FleetCapacityReservations: {
                        shape: "Sac",
                        locationName: "fleetCapacityReservationSet"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        CreateCarrierGateway: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    VpcId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CarrierGateway: {
                        shape: "Sag",
                        locationName: "carrierGateway"
                    }
                }
            }
        },
        CreateClientVpnEndpoint: {
            input: {
                type: "structure",
                required: [ "ClientCidrBlock", "ServerCertificateArn", "AuthenticationOptions", "ConnectionLogOptions" ],
                members: {
                    ClientCidrBlock: {},
                    ServerCertificateArn: {},
                    AuthenticationOptions: {
                        locationName: "Authentication",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                ActiveDirectory: {
                                    type: "structure",
                                    members: {
                                        DirectoryId: {}
                                    }
                                },
                                MutualAuthentication: {
                                    type: "structure",
                                    members: {
                                        ClientRootCertificateChainArn: {}
                                    }
                                },
                                FederatedAuthentication: {
                                    type: "structure",
                                    members: {
                                        SAMLProviderArn: {},
                                        SelfServiceSAMLProviderArn: {}
                                    }
                                }
                            }
                        }
                    },
                    ConnectionLogOptions: {
                        shape: "Saq"
                    },
                    DnsServers: {
                        shape: "So"
                    },
                    TransportProtocol: {},
                    VpnPort: {
                        type: "integer"
                    },
                    Description: {},
                    SplitTunnel: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    SecurityGroupIds: {
                        shape: "S2r",
                        locationName: "SecurityGroupId"
                    },
                    VpcId: {},
                    SelfServicePortal: {},
                    ClientConnectOptions: {
                        shape: "Sat"
                    },
                    SessionTimeoutHours: {
                        type: "integer"
                    },
                    ClientLoginBannerOptions: {
                        shape: "Sau"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientVpnEndpointId: {
                        locationName: "clientVpnEndpointId"
                    },
                    Status: {
                        shape: "Saw",
                        locationName: "status"
                    },
                    DnsName: {
                        locationName: "dnsName"
                    }
                }
            }
        },
        CreateClientVpnRoute: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "DestinationCidrBlock", "TargetVpcSubnetId" ],
                members: {
                    ClientVpnEndpointId: {},
                    DestinationCidrBlock: {},
                    TargetVpcSubnetId: {},
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "Sb0",
                        locationName: "status"
                    }
                }
            }
        },
        CreateCoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr", "CoipPoolId" ],
                members: {
                    Cidr: {},
                    CoipPoolId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoipCidr: {
                        shape: "Sb5",
                        locationName: "coipCidr"
                    }
                }
            }
        },
        CreateCoipPool: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId" ],
                members: {
                    LocalGatewayRouteTableId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoipPool: {
                        shape: "Sb9",
                        locationName: "coipPool"
                    }
                }
            }
        },
        CreateCustomerGateway: {
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    BgpAsn: {
                        type: "integer"
                    },
                    PublicIp: {},
                    CertificateArn: {},
                    Type: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DeviceName: {},
                    IpAddress: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGateway: {
                        shape: "Sbd",
                        locationName: "customerGateway"
                    }
                }
            }
        },
        CreateDefaultSubnet: {
            input: {
                type: "structure",
                required: [ "AvailabilityZone" ],
                members: {
                    AvailabilityZone: {},
                    DryRun: {
                        type: "boolean"
                    },
                    Ipv6Native: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Subnet: {
                        shape: "Sbg",
                        locationName: "subnet"
                    }
                }
            }
        },
        CreateDefaultVpc: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Vpc: {
                        shape: "Sbo",
                        locationName: "vpc"
                    }
                }
            }
        },
        CreateDhcpOptions: {
            input: {
                type: "structure",
                required: [ "DhcpConfigurations" ],
                members: {
                    DhcpConfigurations: {
                        locationName: "dhcpConfiguration",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Key: {
                                    locationName: "key"
                                },
                                Values: {
                                    shape: "So",
                                    locationName: "Value"
                                }
                            }
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DhcpOptions: {
                        shape: "Sbx",
                        locationName: "dhcpOptions"
                    }
                }
            }
        },
        CreateEgressOnlyInternetGateway: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    ClientToken: {},
                    DryRun: {
                        type: "boolean"
                    },
                    VpcId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    EgressOnlyInternetGateway: {
                        shape: "Sc4",
                        locationName: "egressOnlyInternetGateway"
                    }
                }
            }
        },
        CreateFleet: {
            input: {
                type: "structure",
                required: [ "LaunchTemplateConfigs", "TargetCapacitySpecification" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {},
                    SpotOptions: {
                        type: "structure",
                        members: {
                            AllocationStrategy: {},
                            MaintenanceStrategies: {
                                type: "structure",
                                members: {
                                    CapacityRebalance: {
                                        type: "structure",
                                        members: {
                                            ReplacementStrategy: {},
                                            TerminationDelay: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            InstanceInterruptionBehavior: {},
                            InstancePoolsToUseCount: {
                                type: "integer"
                            },
                            SingleInstanceType: {
                                type: "boolean"
                            },
                            SingleAvailabilityZone: {
                                type: "boolean"
                            },
                            MinTargetCapacity: {
                                type: "integer"
                            },
                            MaxTotalPrice: {}
                        }
                    },
                    OnDemandOptions: {
                        type: "structure",
                        members: {
                            AllocationStrategy: {},
                            CapacityReservationOptions: {
                                type: "structure",
                                members: {
                                    UsageStrategy: {}
                                }
                            },
                            SingleInstanceType: {
                                type: "boolean"
                            },
                            SingleAvailabilityZone: {
                                type: "boolean"
                            },
                            MinTargetCapacity: {
                                type: "integer"
                            },
                            MaxTotalPrice: {}
                        }
                    },
                    ExcessCapacityTerminationPolicy: {},
                    LaunchTemplateConfigs: {
                        shape: "Sck"
                    },
                    TargetCapacitySpecification: {
                        shape: "Sdn"
                    },
                    TerminateInstancesWithExpiration: {
                        type: "boolean"
                    },
                    Type: {},
                    ValidFrom: {
                        type: "timestamp"
                    },
                    ValidUntil: {
                        type: "timestamp"
                    },
                    ReplaceUnhealthyInstances: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    Context: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FleetId: {
                        locationName: "fleetId"
                    },
                    Errors: {
                        locationName: "errorSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LaunchTemplateAndOverrides: {
                                    shape: "Sdv",
                                    locationName: "launchTemplateAndOverrides"
                                },
                                Lifecycle: {
                                    locationName: "lifecycle"
                                },
                                ErrorCode: {
                                    locationName: "errorCode"
                                },
                                ErrorMessage: {
                                    locationName: "errorMessage"
                                }
                            }
                        }
                    },
                    Instances: {
                        locationName: "fleetInstanceSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LaunchTemplateAndOverrides: {
                                    shape: "Sdv",
                                    locationName: "launchTemplateAndOverrides"
                                },
                                Lifecycle: {
                                    locationName: "lifecycle"
                                },
                                InstanceIds: {
                                    shape: "Sec",
                                    locationName: "instanceIds"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                Platform: {
                                    locationName: "platform"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateFlowLogs: {
            input: {
                type: "structure",
                required: [ "ResourceIds", "ResourceType" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {},
                    DeliverLogsPermissionArn: {},
                    DeliverCrossAccountRole: {},
                    LogGroupName: {},
                    ResourceIds: {
                        locationName: "ResourceId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    ResourceType: {},
                    TrafficType: {},
                    LogDestinationType: {},
                    LogDestination: {},
                    LogFormat: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    MaxAggregationInterval: {
                        type: "integer"
                    },
                    DestinationOptions: {
                        type: "structure",
                        members: {
                            FileFormat: {},
                            HiveCompatiblePartitions: {
                                type: "boolean"
                            },
                            PerHourPartition: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    FlowLogIds: {
                        shape: "So",
                        locationName: "flowLogIdSet"
                    },
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        CreateFpgaImage: {
            input: {
                type: "structure",
                required: [ "InputStorageLocation" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InputStorageLocation: {
                        shape: "Seo"
                    },
                    LogsStorageLocation: {
                        shape: "Seo"
                    },
                    Description: {},
                    Name: {},
                    ClientToken: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FpgaImageId: {
                        locationName: "fpgaImageId"
                    },
                    FpgaImageGlobalId: {
                        locationName: "fpgaImageGlobalId"
                    }
                }
            }
        },
        CreateImage: {
            input: {
                type: "structure",
                required: [ "InstanceId", "Name" ],
                members: {
                    BlockDeviceMappings: {
                        shape: "Ser",
                        locationName: "blockDeviceMapping"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NoReboot: {
                        locationName: "noReboot",
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {
                        locationName: "imageId"
                    }
                }
            }
        },
        CreateInstanceConnectEndpoint: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    SubnetId: {},
                    SecurityGroupIds: {
                        locationName: "SecurityGroupId",
                        type: "list",
                        member: {
                            locationName: "SecurityGroupId"
                        }
                    },
                    PreserveClientIp: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceConnectEndpoint: {
                        shape: "Sf0",
                        locationName: "instanceConnectEndpoint"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateInstanceEventWindow: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Name: {},
                    TimeRanges: {
                        shape: "Sf6",
                        locationName: "TimeRange"
                    },
                    CronExpression: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceEventWindow: {
                        shape: "S47",
                        locationName: "instanceEventWindow"
                    }
                }
            }
        },
        CreateInstanceExportTask: {
            input: {
                type: "structure",
                required: [ "ExportToS3Task", "InstanceId", "TargetEnvironment" ],
                members: {
                    Description: {
                        locationName: "description"
                    },
                    ExportToS3Task: {
                        locationName: "exportToS3",
                        type: "structure",
                        members: {
                            ContainerFormat: {
                                locationName: "containerFormat"
                            },
                            DiskImageFormat: {
                                locationName: "diskImageFormat"
                            },
                            S3Bucket: {
                                locationName: "s3Bucket"
                            },
                            S3Prefix: {
                                locationName: "s3Prefix"
                            }
                        }
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    TargetEnvironment: {
                        locationName: "targetEnvironment"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportTask: {
                        shape: "Sff",
                        locationName: "exportTask"
                    }
                }
            }
        },
        CreateInternetGateway: {
            input: {
                type: "structure",
                members: {
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InternetGateway: {
                        shape: "Sfl",
                        locationName: "internetGateway"
                    }
                }
            }
        },
        CreateIpam: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Description: {},
                    OperatingRegions: {
                        shape: "Sfn",
                        locationName: "OperatingRegion"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipam: {
                        shape: "Sfr",
                        locationName: "ipam"
                    }
                }
            }
        },
        CreateIpamPool: {
            input: {
                type: "structure",
                required: [ "IpamScopeId", "AddressFamily" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamScopeId: {},
                    Locale: {},
                    SourceIpamPoolId: {},
                    Description: {},
                    AddressFamily: {},
                    AutoImport: {
                        type: "boolean"
                    },
                    PubliclyAdvertisable: {
                        type: "boolean"
                    },
                    AllocationMinNetmaskLength: {
                        type: "integer"
                    },
                    AllocationMaxNetmaskLength: {
                        type: "integer"
                    },
                    AllocationDefaultNetmaskLength: {
                        type: "integer"
                    },
                    AllocationResourceTags: {
                        shape: "Sfz",
                        locationName: "AllocationResourceTag"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    AwsService: {},
                    PublicIpSource: {},
                    SourceResource: {
                        type: "structure",
                        members: {
                            ResourceId: {},
                            ResourceType: {},
                            ResourceRegion: {},
                            ResourceOwner: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPool: {
                        shape: "Sg6",
                        locationName: "ipamPool"
                    }
                }
            }
        },
        CreateIpamResourceDiscovery: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Description: {},
                    OperatingRegions: {
                        shape: "Sfn",
                        locationName: "OperatingRegion"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscovery: {
                        shape: "Sge",
                        locationName: "ipamResourceDiscovery"
                    }
                }
            }
        },
        CreateIpamScope: {
            input: {
                type: "structure",
                required: [ "IpamId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamId: {},
                    Description: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamScope: {
                        shape: "Sgi",
                        locationName: "ipamScope"
                    }
                }
            }
        },
        CreateKeyPair: {
            input: {
                type: "structure",
                required: [ "KeyName" ],
                members: {
                    KeyName: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    KeyType: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    KeyFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyFingerprint: {
                        locationName: "keyFingerprint"
                    },
                    KeyMaterial: {
                        shape: "Sgo",
                        locationName: "keyMaterial"
                    },
                    KeyName: {
                        locationName: "keyName"
                    },
                    KeyPairId: {
                        locationName: "keyPairId"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        CreateLaunchTemplate: {
            input: {
                type: "structure",
                required: [ "LaunchTemplateName", "LaunchTemplateData" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {},
                    LaunchTemplateName: {},
                    VersionDescription: {},
                    LaunchTemplateData: {
                        shape: "Sgr"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplate: {
                        shape: "Sic",
                        locationName: "launchTemplate"
                    },
                    Warning: {
                        shape: "Sid",
                        locationName: "warning"
                    }
                }
            }
        },
        CreateLaunchTemplateVersion: {
            input: {
                type: "structure",
                required: [ "LaunchTemplateData" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {},
                    LaunchTemplateId: {},
                    LaunchTemplateName: {},
                    SourceVersion: {},
                    VersionDescription: {},
                    LaunchTemplateData: {
                        shape: "Sgr"
                    },
                    ResolveAlias: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplateVersion: {
                        shape: "Sii",
                        locationName: "launchTemplateVersion"
                    },
                    Warning: {
                        shape: "Sid",
                        locationName: "warning"
                    }
                }
            }
        },
        CreateLocalGatewayRoute: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId" ],
                members: {
                    DestinationCidrBlock: {},
                    LocalGatewayRouteTableId: {},
                    LocalGatewayVirtualInterfaceGroupId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    NetworkInterfaceId: {},
                    DestinationPrefixListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Route: {
                        shape: "Sjo",
                        locationName: "route"
                    }
                }
            }
        },
        CreateLocalGatewayRouteTable: {
            input: {
                type: "structure",
                required: [ "LocalGatewayId" ],
                members: {
                    LocalGatewayId: {},
                    Mode: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTable: {
                        shape: "Sjv",
                        locationName: "localGatewayRouteTable"
                    }
                }
            }
        },
        CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId", "LocalGatewayVirtualInterfaceGroupId" ],
                members: {
                    LocalGatewayRouteTableId: {},
                    LocalGatewayVirtualInterfaceGroupId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVirtualInterfaceGroupAssociation: {
                        shape: "Sjz",
                        locationName: "localGatewayRouteTableVirtualInterfaceGroupAssociation"
                    }
                }
            }
        },
        CreateLocalGatewayRouteTableVpcAssociation: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId", "VpcId" ],
                members: {
                    LocalGatewayRouteTableId: {},
                    VpcId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVpcAssociation: {
                        shape: "Sk3",
                        locationName: "localGatewayRouteTableVpcAssociation"
                    }
                }
            }
        },
        CreateManagedPrefixList: {
            input: {
                type: "structure",
                required: [ "PrefixListName", "MaxEntries", "AddressFamily" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PrefixListName: {},
                    Entries: {
                        shape: "Sk6",
                        locationName: "Entry"
                    },
                    MaxEntries: {
                        type: "integer"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    AddressFamily: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PrefixList: {
                        shape: "Sk9",
                        locationName: "prefixList"
                    }
                }
            }
        },
        CreateNatGateway: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    AllocationId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SubnetId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ConnectivityType: {},
                    PrivateIpAddress: {},
                    SecondaryAllocationIds: {
                        shape: "S4r",
                        locationName: "SecondaryAllocationId"
                    },
                    SecondaryPrivateIpAddresses: {
                        shape: "S38",
                        locationName: "SecondaryPrivateIpAddress"
                    },
                    SecondaryPrivateIpAddressCount: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    NatGateway: {
                        shape: "Ske",
                        locationName: "natGateway"
                    }
                }
            }
        },
        CreateNetworkAcl: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkAcl: {
                        shape: "Skj",
                        locationName: "networkAcl"
                    }
                }
            }
        },
        CreateNetworkAclEntry: {
            input: {
                type: "structure",
                required: [ "Egress", "NetworkAclId", "Protocol", "RuleAction", "RuleNumber" ],
                members: {
                    CidrBlock: {
                        locationName: "cidrBlock"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Egress: {
                        locationName: "egress",
                        type: "boolean"
                    },
                    IcmpTypeCode: {
                        shape: "Sko",
                        locationName: "Icmp"
                    },
                    Ipv6CidrBlock: {
                        locationName: "ipv6CidrBlock"
                    },
                    NetworkAclId: {
                        locationName: "networkAclId"
                    },
                    PortRange: {
                        shape: "Skp",
                        locationName: "portRange"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    RuleAction: {
                        locationName: "ruleAction"
                    },
                    RuleNumber: {
                        locationName: "ruleNumber",
                        type: "integer"
                    }
                }
            }
        },
        CreateNetworkInsightsAccessScope: {
            input: {
                type: "structure",
                required: [ "ClientToken" ],
                members: {
                    MatchPaths: {
                        shape: "Sku",
                        locationName: "MatchPath"
                    },
                    ExcludePaths: {
                        shape: "Sku",
                        locationName: "ExcludePath"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScope: {
                        shape: "Sl4",
                        locationName: "networkInsightsAccessScope"
                    },
                    NetworkInsightsAccessScopeContent: {
                        shape: "Sl6",
                        locationName: "networkInsightsAccessScopeContent"
                    }
                }
            }
        },
        CreateNetworkInsightsPath: {
            input: {
                type: "structure",
                required: [ "Source", "Protocol", "ClientToken" ],
                members: {
                    SourceIp: {},
                    DestinationIp: {},
                    Source: {},
                    Destination: {},
                    Protocol: {},
                    DestinationPort: {
                        type: "integer"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    FilterAtSource: {
                        shape: "Sli"
                    },
                    FilterAtDestination: {
                        shape: "Sli"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsPath: {
                        shape: "Sll",
                        locationName: "networkInsightsPath"
                    }
                }
            }
        },
        CreateNetworkInterface: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    Description: {
                        locationName: "description"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sgz",
                        locationName: "SecurityGroupId"
                    },
                    Ipv6AddressCount: {
                        locationName: "ipv6AddressCount",
                        type: "integer"
                    },
                    Ipv6Addresses: {
                        shape: "Siq",
                        locationName: "ipv6Addresses"
                    },
                    PrivateIpAddress: {
                        locationName: "privateIpAddress"
                    },
                    PrivateIpAddresses: {
                        shape: "Sh2",
                        locationName: "privateIpAddresses"
                    },
                    SecondaryPrivateIpAddressCount: {
                        locationName: "secondaryPrivateIpAddressCount",
                        type: "integer"
                    },
                    Ipv4Prefixes: {
                        shape: "Sh4",
                        locationName: "Ipv4Prefix"
                    },
                    Ipv4PrefixCount: {
                        type: "integer"
                    },
                    Ipv6Prefixes: {
                        shape: "Sh6",
                        locationName: "Ipv6Prefix"
                    },
                    Ipv6PrefixCount: {
                        type: "integer"
                    },
                    InterfaceType: {},
                    SubnetId: {
                        locationName: "subnetId"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    EnablePrimaryIpv6: {
                        type: "boolean"
                    },
                    ConnectionTrackingSpecification: {
                        shape: "Sha"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInterface: {
                        shape: "Sls",
                        locationName: "networkInterface"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateNetworkInterfacePermission: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId", "Permission" ],
                members: {
                    NetworkInterfaceId: {},
                    AwsAccountId: {},
                    AwsService: {},
                    Permission: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InterfacePermission: {
                        shape: "Smb",
                        locationName: "interfacePermission"
                    }
                }
            }
        },
        CreatePlacementGroup: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    GroupName: {
                        locationName: "groupName"
                    },
                    Strategy: {
                        locationName: "strategy"
                    },
                    PartitionCount: {
                        type: "integer"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    SpreadLevel: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PlacementGroup: {
                        shape: "Smi",
                        locationName: "placementGroup"
                    }
                }
            }
        },
        CreatePublicIpv4Pool: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolId: {
                        locationName: "poolId"
                    }
                }
            }
        },
        CreateReplaceRootVolumeTask: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    SnapshotId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ImageId: {},
                    DeleteReplacedRootVolume: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplaceRootVolumeTask: {
                        shape: "Smo",
                        locationName: "replaceRootVolumeTask"
                    }
                }
            }
        },
        CreateReservedInstancesListing: {
            input: {
                type: "structure",
                required: [ "ClientToken", "InstanceCount", "PriceSchedules", "ReservedInstancesId" ],
                members: {
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    InstanceCount: {
                        locationName: "instanceCount",
                        type: "integer"
                    },
                    PriceSchedules: {
                        locationName: "priceSchedules",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Price: {
                                    locationName: "price",
                                    type: "double"
                                },
                                Term: {
                                    locationName: "term",
                                    type: "long"
                                }
                            }
                        }
                    },
                    ReservedInstancesId: {
                        locationName: "reservedInstancesId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstancesListings: {
                        shape: "S8k",
                        locationName: "reservedInstancesListingsSet"
                    }
                }
            }
        },
        CreateRestoreImageTask: {
            input: {
                type: "structure",
                required: [ "Bucket", "ObjectKey" ],
                members: {
                    Bucket: {},
                    ObjectKey: {},
                    Name: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {
                        locationName: "imageId"
                    }
                }
            }
        },
        CreateRoute: {
            input: {
                type: "structure",
                required: [ "RouteTableId" ],
                members: {
                    DestinationCidrBlock: {
                        locationName: "destinationCidrBlock"
                    },
                    DestinationIpv6CidrBlock: {
                        locationName: "destinationIpv6CidrBlock"
                    },
                    DestinationPrefixListId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcEndpointId: {},
                    EgressOnlyInternetGatewayId: {
                        locationName: "egressOnlyInternetGatewayId"
                    },
                    GatewayId: {
                        locationName: "gatewayId"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    },
                    TransitGatewayId: {},
                    LocalGatewayId: {},
                    CarrierGatewayId: {},
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    RouteTableId: {
                        locationName: "routeTableId"
                    },
                    VpcPeeringConnectionId: {
                        locationName: "vpcPeeringConnectionId"
                    },
                    CoreNetworkArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        CreateRouteTable: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RouteTable: {
                        shape: "Sn4",
                        locationName: "routeTable"
                    }
                }
            }
        },
        CreateSecurityGroup: {
            input: {
                type: "structure",
                required: [ "Description", "GroupName" ],
                members: {
                    Description: {
                        locationName: "GroupDescription"
                    },
                    GroupName: {},
                    VpcId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {
                        locationName: "groupId"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    Description: {},
                    OutpostArn: {},
                    VolumeId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "Sng"
            }
        },
        CreateSnapshots: {
            input: {
                type: "structure",
                required: [ "InstanceSpecification" ],
                members: {
                    Description: {},
                    InstanceSpecification: {
                        type: "structure",
                        required: [ "InstanceId" ],
                        members: {
                            InstanceId: {},
                            ExcludeBootVolume: {
                                type: "boolean"
                            },
                            ExcludeDataVolumeIds: {
                                shape: "Snn",
                                locationName: "ExcludeDataVolumeId"
                            }
                        }
                    },
                    OutpostArn: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    CopyTagsFromSource: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshots: {
                        locationName: "snapshotSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "description"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                Encrypted: {
                                    locationName: "encrypted",
                                    type: "boolean"
                                },
                                VolumeId: {
                                    locationName: "volumeId"
                                },
                                State: {
                                    locationName: "state"
                                },
                                VolumeSize: {
                                    locationName: "volumeSize",
                                    type: "integer"
                                },
                                StartTime: {
                                    locationName: "startTime",
                                    type: "timestamp"
                                },
                                Progress: {
                                    locationName: "progress"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                OutpostArn: {
                                    locationName: "outpostArn"
                                },
                                SseType: {
                                    locationName: "sseType"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateSpotDatafeedSubscription: {
            input: {
                type: "structure",
                required: [ "Bucket" ],
                members: {
                    Bucket: {
                        locationName: "bucket"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Prefix: {
                        locationName: "prefix"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpotDatafeedSubscription: {
                        shape: "Snu",
                        locationName: "spotDatafeedSubscription"
                    }
                }
            }
        },
        CreateStoreImageTask: {
            input: {
                type: "structure",
                required: [ "ImageId", "Bucket" ],
                members: {
                    ImageId: {},
                    Bucket: {},
                    S3ObjectTags: {
                        locationName: "S3ObjectTag",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ObjectKey: {
                        locationName: "objectKey"
                    }
                }
            }
        },
        CreateSubnet: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    AvailabilityZone: {},
                    AvailabilityZoneId: {},
                    CidrBlock: {},
                    Ipv6CidrBlock: {},
                    OutpostArn: {},
                    VpcId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Ipv6Native: {
                        type: "boolean"
                    },
                    Ipv4IpamPoolId: {},
                    Ipv4NetmaskLength: {
                        type: "integer"
                    },
                    Ipv6IpamPoolId: {},
                    Ipv6NetmaskLength: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Subnet: {
                        shape: "Sbg",
                        locationName: "subnet"
                    }
                }
            }
        },
        CreateSubnetCidrReservation: {
            input: {
                type: "structure",
                required: [ "SubnetId", "Cidr", "ReservationType" ],
                members: {
                    SubnetId: {},
                    Cidr: {},
                    ReservationType: {},
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetCidrReservation: {
                        shape: "So6",
                        locationName: "subnetCidrReservation"
                    }
                }
            }
        },
        CreateTags: {
            input: {
                type: "structure",
                required: [ "Resources", "Tags" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Resources: {
                        shape: "So9",
                        locationName: "ResourceId"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "Tag"
                    }
                }
            }
        },
        CreateTrafficMirrorFilter: {
            input: {
                type: "structure",
                members: {
                    Description: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilter: {
                        shape: "Sod",
                        locationName: "trafficMirrorFilter"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateTrafficMirrorFilterRule: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorFilterId", "TrafficDirection", "RuleNumber", "RuleAction", "DestinationCidrBlock", "SourceCidrBlock" ],
                members: {
                    TrafficMirrorFilterId: {},
                    TrafficDirection: {},
                    RuleNumber: {
                        type: "integer"
                    },
                    RuleAction: {},
                    DestinationPortRange: {
                        shape: "Son"
                    },
                    SourcePortRange: {
                        shape: "Son"
                    },
                    Protocol: {
                        type: "integer"
                    },
                    DestinationCidrBlock: {},
                    SourceCidrBlock: {},
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilterRule: {
                        shape: "Sof",
                        locationName: "trafficMirrorFilterRule"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateTrafficMirrorSession: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId", "TrafficMirrorTargetId", "TrafficMirrorFilterId", "SessionNumber" ],
                members: {
                    NetworkInterfaceId: {},
                    TrafficMirrorTargetId: {},
                    TrafficMirrorFilterId: {},
                    PacketLength: {
                        type: "integer"
                    },
                    SessionNumber: {
                        type: "integer"
                    },
                    VirtualNetworkId: {
                        type: "integer"
                    },
                    Description: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorSession: {
                        shape: "Sos",
                        locationName: "trafficMirrorSession"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateTrafficMirrorTarget: {
            input: {
                type: "structure",
                members: {
                    NetworkInterfaceId: {},
                    NetworkLoadBalancerArn: {},
                    Description: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    GatewayLoadBalancerEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorTarget: {
                        shape: "Sov",
                        locationName: "trafficMirrorTarget"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateTransitGateway: {
            input: {
                type: "structure",
                members: {
                    Description: {},
                    Options: {
                        type: "structure",
                        members: {
                            AmazonSideAsn: {
                                type: "long"
                            },
                            AutoAcceptSharedAttachments: {},
                            DefaultRouteTableAssociation: {},
                            DefaultRouteTablePropagation: {},
                            VpnEcmpSupport: {},
                            DnsSupport: {},
                            SecurityGroupReferencingSupport: {},
                            MulticastSupport: {},
                            TransitGatewayCidrBlocks: {
                                shape: "Sp4"
                            }
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGateway: {
                        shape: "Sp6",
                        locationName: "transitGateway"
                    }
                }
            }
        },
        CreateTransitGatewayConnect: {
            input: {
                type: "structure",
                required: [ "TransportTransitGatewayAttachmentId", "Options" ],
                members: {
                    TransportTransitGatewayAttachmentId: {},
                    Options: {
                        type: "structure",
                        required: [ "Protocol" ],
                        members: {
                            Protocol: {}
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnect: {
                        shape: "Spd",
                        locationName: "transitGatewayConnect"
                    }
                }
            }
        },
        CreateTransitGatewayConnectPeer: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId", "PeerAddress", "InsideCidrBlocks" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    TransitGatewayAddress: {},
                    PeerAddress: {},
                    BgpOptions: {
                        type: "structure",
                        members: {
                            PeerAsn: {
                                type: "long"
                            }
                        }
                    },
                    InsideCidrBlocks: {
                        shape: "Sph"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeer: {
                        shape: "Spj",
                        locationName: "transitGatewayConnectPeer"
                    }
                }
            }
        },
        CreateTransitGatewayMulticastDomain: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId" ],
                members: {
                    TransitGatewayId: {},
                    Options: {
                        type: "structure",
                        members: {
                            Igmpv2Support: {},
                            StaticSourcesSupport: {},
                            AutoAcceptSharedAssociations: {}
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomain: {
                        shape: "Spw",
                        locationName: "transitGatewayMulticastDomain"
                    }
                }
            }
        },
        CreateTransitGatewayPeeringAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId", "PeerTransitGatewayId", "PeerAccountId", "PeerRegion" ],
                members: {
                    TransitGatewayId: {},
                    PeerTransitGatewayId: {},
                    PeerAccountId: {},
                    PeerRegion: {},
                    Options: {
                        type: "structure",
                        members: {
                            DynamicRouting: {}
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeeringAttachment: {
                        shape: "Sx",
                        locationName: "transitGatewayPeeringAttachment"
                    }
                }
            }
        },
        CreateTransitGatewayPolicyTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId" ],
                members: {
                    TransitGatewayId: {},
                    TagSpecifications: {
                        shape: "S3"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPolicyTable: {
                        shape: "Sq5",
                        locationName: "transitGatewayPolicyTable"
                    }
                }
            }
        },
        CreateTransitGatewayPrefixListReference: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "PrefixListId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    PrefixListId: {},
                    TransitGatewayAttachmentId: {},
                    Blackhole: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPrefixListReference: {
                        shape: "Sq9",
                        locationName: "transitGatewayPrefixListReference"
                    }
                }
            }
        },
        CreateTransitGatewayRoute: {
            input: {
                type: "structure",
                required: [ "DestinationCidrBlock", "TransitGatewayRouteTableId" ],
                members: {
                    DestinationCidrBlock: {},
                    TransitGatewayRouteTableId: {},
                    TransitGatewayAttachmentId: {},
                    Blackhole: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Route: {
                        shape: "Sqe",
                        locationName: "route"
                    }
                }
            }
        },
        CreateTransitGatewayRouteTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId" ],
                members: {
                    TransitGatewayId: {},
                    TagSpecifications: {
                        shape: "S3"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTable: {
                        shape: "Sqm",
                        locationName: "transitGatewayRouteTable"
                    }
                }
            }
        },
        CreateTransitGatewayRouteTableAnnouncement: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "PeeringAttachmentId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    PeeringAttachmentId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableAnnouncement: {
                        shape: "Sqq",
                        locationName: "transitGatewayRouteTableAnnouncement"
                    }
                }
            }
        },
        CreateTransitGatewayVpcAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId", "VpcId", "SubnetIds" ],
                members: {
                    TransitGatewayId: {},
                    VpcId: {},
                    SubnetIds: {
                        shape: "S57"
                    },
                    Options: {
                        type: "structure",
                        members: {
                            DnsSupport: {},
                            SecurityGroupReferencingSupport: {},
                            Ipv6Support: {},
                            ApplianceModeSupport: {}
                        }
                    },
                    TagSpecifications: {
                        shape: "S3"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayVpcAttachment: {
                        shape: "S16",
                        locationName: "transitGatewayVpcAttachment"
                    }
                }
            }
        },
        CreateVerifiedAccessEndpoint: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessGroupId", "EndpointType", "AttachmentType", "DomainCertificateArn", "ApplicationDomain", "EndpointDomainPrefix" ],
                members: {
                    VerifiedAccessGroupId: {},
                    EndpointType: {},
                    AttachmentType: {},
                    DomainCertificateArn: {},
                    ApplicationDomain: {},
                    EndpointDomainPrefix: {},
                    SecurityGroupIds: {
                        shape: "Sr1",
                        locationName: "SecurityGroupId"
                    },
                    LoadBalancerOptions: {
                        type: "structure",
                        members: {
                            Protocol: {},
                            Port: {
                                type: "integer"
                            },
                            LoadBalancerArn: {},
                            SubnetIds: {
                                locationName: "SubnetId",
                                type: "list",
                                member: {
                                    locationName: "item"
                                }
                            }
                        }
                    },
                    NetworkInterfaceOptions: {
                        type: "structure",
                        members: {
                            NetworkInterfaceId: {},
                            Protocol: {},
                            Port: {
                                type: "integer"
                            }
                        }
                    },
                    Description: {},
                    PolicyDocument: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SseSpecification: {
                        shape: "Sr8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessEndpoint: {
                        shape: "Sra",
                        locationName: "verifiedAccessEndpoint"
                    }
                }
            }
        },
        CreateVerifiedAccessGroup: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessInstanceId" ],
                members: {
                    VerifiedAccessInstanceId: {},
                    Description: {},
                    PolicyDocument: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SseSpecification: {
                        shape: "Sr8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessGroup: {
                        shape: "Sri",
                        locationName: "verifiedAccessGroup"
                    }
                }
            }
        },
        CreateVerifiedAccessInstance: {
            input: {
                type: "structure",
                members: {
                    Description: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    FIPSEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessInstance: {
                        shape: "S6g",
                        locationName: "verifiedAccessInstance"
                    }
                }
            }
        },
        CreateVerifiedAccessTrustProvider: {
            input: {
                type: "structure",
                required: [ "TrustProviderType", "PolicyReferenceName" ],
                members: {
                    TrustProviderType: {},
                    UserTrustProviderType: {},
                    DeviceTrustProviderType: {},
                    OidcOptions: {
                        type: "structure",
                        members: {
                            Issuer: {},
                            AuthorizationEndpoint: {},
                            TokenEndpoint: {},
                            UserInfoEndpoint: {},
                            ClientId: {},
                            ClientSecret: {
                                shape: "S6c"
                            },
                            Scope: {}
                        }
                    },
                    DeviceOptions: {
                        type: "structure",
                        members: {
                            TenantId: {},
                            PublicSigningKeyUrl: {}
                        }
                    },
                    PolicyReferenceName: {},
                    Description: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SseSpecification: {
                        shape: "Sr8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProvider: {
                        shape: "S67",
                        locationName: "verifiedAccessTrustProvider"
                    }
                }
            }
        },
        CreateVolume: {
            input: {
                type: "structure",
                required: [ "AvailabilityZone" ],
                members: {
                    AvailabilityZone: {},
                    Encrypted: {
                        locationName: "encrypted",
                        type: "boolean"
                    },
                    Iops: {
                        type: "integer"
                    },
                    KmsKeyId: {},
                    OutpostArn: {},
                    Size: {
                        type: "integer"
                    },
                    SnapshotId: {},
                    VolumeType: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    MultiAttachEnabled: {
                        type: "boolean"
                    },
                    Throughput: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                shape: "Srq"
            }
        },
        CreateVpc: {
            input: {
                type: "structure",
                members: {
                    CidrBlock: {},
                    AmazonProvidedIpv6CidrBlock: {
                        locationName: "amazonProvidedIpv6CidrBlock",
                        type: "boolean"
                    },
                    Ipv6Pool: {},
                    Ipv6CidrBlock: {},
                    Ipv4IpamPoolId: {},
                    Ipv4NetmaskLength: {
                        type: "integer"
                    },
                    Ipv6IpamPoolId: {},
                    Ipv6NetmaskLength: {
                        type: "integer"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceTenancy: {
                        locationName: "instanceTenancy"
                    },
                    Ipv6CidrBlockNetworkBorderGroup: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Vpc: {
                        shape: "Sbo",
                        locationName: "vpc"
                    }
                }
            }
        },
        CreateVpcEndpoint: {
            input: {
                type: "structure",
                required: [ "VpcId", "ServiceName" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    VpcEndpointType: {},
                    VpcId: {},
                    ServiceName: {},
                    PolicyDocument: {},
                    RouteTableIds: {
                        shape: "Srx",
                        locationName: "RouteTableId"
                    },
                    SubnetIds: {
                        shape: "Sry",
                        locationName: "SubnetId"
                    },
                    SecurityGroupIds: {
                        shape: "Srz",
                        locationName: "SecurityGroupId"
                    },
                    IpAddressType: {},
                    DnsOptions: {
                        shape: "Ss1"
                    },
                    ClientToken: {},
                    PrivateDnsEnabled: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    SubnetConfigurations: {
                        shape: "Ss3",
                        locationName: "SubnetConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcEndpoint: {
                        shape: "Ss6",
                        locationName: "vpcEndpoint"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateVpcEndpointConnectionNotification: {
            input: {
                type: "structure",
                required: [ "ConnectionNotificationArn", "ConnectionEvents" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    VpcEndpointId: {},
                    ConnectionNotificationArn: {},
                    ConnectionEvents: {
                        shape: "So"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionNotification: {
                        shape: "Ssg",
                        locationName: "connectionNotification"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateVpcEndpointServiceConfiguration: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    AcceptanceRequired: {
                        type: "boolean"
                    },
                    PrivateDnsName: {},
                    NetworkLoadBalancerArns: {
                        shape: "So",
                        locationName: "NetworkLoadBalancerArn"
                    },
                    GatewayLoadBalancerArns: {
                        shape: "So",
                        locationName: "GatewayLoadBalancerArn"
                    },
                    SupportedIpAddressTypes: {
                        shape: "So",
                        locationName: "SupportedIpAddressType"
                    },
                    ClientToken: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceConfiguration: {
                        shape: "Ssl",
                        locationName: "serviceConfiguration"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        CreateVpcPeeringConnection: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    PeerOwnerId: {
                        locationName: "peerOwnerId"
                    },
                    PeerVpcId: {
                        locationName: "peerVpcId"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    PeerRegion: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcPeeringConnection: {
                        shape: "S1n",
                        locationName: "vpcPeeringConnection"
                    }
                }
            }
        },
        CreateVpnConnection: {
            input: {
                type: "structure",
                required: [ "CustomerGatewayId", "Type" ],
                members: {
                    CustomerGatewayId: {},
                    Type: {},
                    VpnGatewayId: {},
                    TransitGatewayId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Options: {
                        locationName: "options",
                        type: "structure",
                        members: {
                            EnableAcceleration: {
                                type: "boolean"
                            },
                            StaticRoutesOnly: {
                                locationName: "staticRoutesOnly",
                                type: "boolean"
                            },
                            TunnelInsideIpVersion: {},
                            TunnelOptions: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        TunnelInsideCidr: {},
                                        TunnelInsideIpv6Cidr: {},
                                        PreSharedKey: {
                                            shape: "St3"
                                        },
                                        Phase1LifetimeSeconds: {
                                            type: "integer"
                                        },
                                        Phase2LifetimeSeconds: {
                                            type: "integer"
                                        },
                                        RekeyMarginTimeSeconds: {
                                            type: "integer"
                                        },
                                        RekeyFuzzPercentage: {
                                            type: "integer"
                                        },
                                        ReplayWindowSize: {
                                            type: "integer"
                                        },
                                        DPDTimeoutSeconds: {
                                            type: "integer"
                                        },
                                        DPDTimeoutAction: {},
                                        Phase1EncryptionAlgorithms: {
                                            shape: "St4",
                                            locationName: "Phase1EncryptionAlgorithm"
                                        },
                                        Phase2EncryptionAlgorithms: {
                                            shape: "St6",
                                            locationName: "Phase2EncryptionAlgorithm"
                                        },
                                        Phase1IntegrityAlgorithms: {
                                            shape: "St8",
                                            locationName: "Phase1IntegrityAlgorithm"
                                        },
                                        Phase2IntegrityAlgorithms: {
                                            shape: "Sta",
                                            locationName: "Phase2IntegrityAlgorithm"
                                        },
                                        Phase1DHGroupNumbers: {
                                            shape: "Stc",
                                            locationName: "Phase1DHGroupNumber"
                                        },
                                        Phase2DHGroupNumbers: {
                                            shape: "Ste",
                                            locationName: "Phase2DHGroupNumber"
                                        },
                                        IKEVersions: {
                                            shape: "Stg",
                                            locationName: "IKEVersion"
                                        },
                                        StartupAction: {},
                                        LogOptions: {
                                            shape: "Sti"
                                        },
                                        EnableTunnelLifecycleControl: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            LocalIpv4NetworkCidr: {},
                            RemoteIpv4NetworkCidr: {},
                            LocalIpv6NetworkCidr: {},
                            RemoteIpv6NetworkCidr: {},
                            OutsideIpAddressType: {},
                            TransportTransitGatewayAttachmentId: {}
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnection: {
                        shape: "Stm",
                        locationName: "vpnConnection"
                    }
                }
            }
        },
        CreateVpnConnectionRoute: {
            input: {
                type: "structure",
                required: [ "DestinationCidrBlock", "VpnConnectionId" ],
                members: {
                    DestinationCidrBlock: {},
                    VpnConnectionId: {}
                }
            }
        },
        CreateVpnGateway: {
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    AvailabilityZone: {},
                    Type: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    AmazonSideAsn: {
                        type: "long"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnGateway: {
                        shape: "Suj",
                        locationName: "vpnGateway"
                    }
                }
            }
        },
        DeleteCarrierGateway: {
            input: {
                type: "structure",
                required: [ "CarrierGatewayId" ],
                members: {
                    CarrierGatewayId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CarrierGateway: {
                        shape: "Sag",
                        locationName: "carrierGateway"
                    }
                }
            }
        },
        DeleteClientVpnEndpoint: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "Saw",
                        locationName: "status"
                    }
                }
            }
        },
        DeleteClientVpnRoute: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "DestinationCidrBlock" ],
                members: {
                    ClientVpnEndpointId: {},
                    TargetVpcSubnetId: {},
                    DestinationCidrBlock: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "Sb0",
                        locationName: "status"
                    }
                }
            }
        },
        DeleteCoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr", "CoipPoolId" ],
                members: {
                    Cidr: {},
                    CoipPoolId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoipCidr: {
                        shape: "Sb5",
                        locationName: "coipCidr"
                    }
                }
            }
        },
        DeleteCoipPool: {
            input: {
                type: "structure",
                required: [ "CoipPoolId" ],
                members: {
                    CoipPoolId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoipPool: {
                        shape: "Sb9",
                        locationName: "coipPool"
                    }
                }
            }
        },
        DeleteCustomerGateway: {
            input: {
                type: "structure",
                required: [ "CustomerGatewayId" ],
                members: {
                    CustomerGatewayId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteDhcpOptions: {
            input: {
                type: "structure",
                required: [ "DhcpOptionsId" ],
                members: {
                    DhcpOptionsId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteEgressOnlyInternetGateway: {
            input: {
                type: "structure",
                required: [ "EgressOnlyInternetGatewayId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    EgressOnlyInternetGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnCode: {
                        locationName: "returnCode",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteFleets: {
            input: {
                type: "structure",
                required: [ "FleetIds", "TerminateInstances" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FleetIds: {
                        shape: "Sv1",
                        locationName: "FleetId"
                    },
                    TerminateInstances: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulFleetDeletions: {
                        locationName: "successfulFleetDeletionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CurrentFleetState: {
                                    locationName: "currentFleetState"
                                },
                                PreviousFleetState: {
                                    locationName: "previousFleetState"
                                },
                                FleetId: {
                                    locationName: "fleetId"
                                }
                            }
                        }
                    },
                    UnsuccessfulFleetDeletions: {
                        locationName: "unsuccessfulFleetDeletionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Error: {
                                    locationName: "error",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                },
                                FleetId: {
                                    locationName: "fleetId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteFlowLogs: {
            input: {
                type: "structure",
                required: [ "FlowLogIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FlowLogIds: {
                        shape: "Svb",
                        locationName: "FlowLogId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        DeleteFpgaImage: {
            input: {
                type: "structure",
                required: [ "FpgaImageId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FpgaImageId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteInstanceConnectEndpoint: {
            input: {
                type: "structure",
                required: [ "InstanceConnectEndpointId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceConnectEndpointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceConnectEndpoint: {
                        shape: "Sf0",
                        locationName: "instanceConnectEndpoint"
                    }
                }
            }
        },
        DeleteInstanceEventWindow: {
            input: {
                type: "structure",
                required: [ "InstanceEventWindowId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ForceDelete: {
                        type: "boolean"
                    },
                    InstanceEventWindowId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceEventWindowState: {
                        locationName: "instanceEventWindowState",
                        type: "structure",
                        members: {
                            InstanceEventWindowId: {
                                locationName: "instanceEventWindowId"
                            },
                            State: {
                                locationName: "state"
                            }
                        }
                    }
                }
            }
        },
        DeleteInternetGateway: {
            input: {
                type: "structure",
                required: [ "InternetGatewayId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InternetGatewayId: {
                        locationName: "internetGatewayId"
                    }
                }
            }
        },
        DeleteIpam: {
            input: {
                type: "structure",
                required: [ "IpamId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamId: {},
                    Cascade: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipam: {
                        shape: "Sfr",
                        locationName: "ipam"
                    }
                }
            }
        },
        DeleteIpamPool: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Cascade: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPool: {
                        shape: "Sg6",
                        locationName: "ipamPool"
                    }
                }
            }
        },
        DeleteIpamResourceDiscovery: {
            input: {
                type: "structure",
                required: [ "IpamResourceDiscoveryId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscovery: {
                        shape: "Sge",
                        locationName: "ipamResourceDiscovery"
                    }
                }
            }
        },
        DeleteIpamScope: {
            input: {
                type: "structure",
                required: [ "IpamScopeId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamScopeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamScope: {
                        shape: "Sgi",
                        locationName: "ipamScope"
                    }
                }
            }
        },
        DeleteKeyPair: {
            input: {
                type: "structure",
                members: {
                    KeyName: {},
                    KeyPairId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    },
                    KeyPairId: {
                        locationName: "keyPairId"
                    }
                }
            }
        },
        DeleteLaunchTemplate: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    LaunchTemplateId: {},
                    LaunchTemplateName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplate: {
                        shape: "Sic",
                        locationName: "launchTemplate"
                    }
                }
            }
        },
        DeleteLaunchTemplateVersions: {
            input: {
                type: "structure",
                required: [ "Versions" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    LaunchTemplateId: {},
                    LaunchTemplateName: {},
                    Versions: {
                        shape: "Sw1",
                        locationName: "LaunchTemplateVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfullyDeletedLaunchTemplateVersions: {
                        locationName: "successfullyDeletedLaunchTemplateVersionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LaunchTemplateId: {
                                    locationName: "launchTemplateId"
                                },
                                LaunchTemplateName: {
                                    locationName: "launchTemplateName"
                                },
                                VersionNumber: {
                                    locationName: "versionNumber",
                                    type: "long"
                                }
                            }
                        }
                    },
                    UnsuccessfullyDeletedLaunchTemplateVersions: {
                        locationName: "unsuccessfullyDeletedLaunchTemplateVersionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LaunchTemplateId: {
                                    locationName: "launchTemplateId"
                                },
                                LaunchTemplateName: {
                                    locationName: "launchTemplateName"
                                },
                                VersionNumber: {
                                    locationName: "versionNumber",
                                    type: "long"
                                },
                                ResponseError: {
                                    locationName: "responseError",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteLocalGatewayRoute: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId" ],
                members: {
                    DestinationCidrBlock: {},
                    LocalGatewayRouteTableId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    DestinationPrefixListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Route: {
                        shape: "Sjo",
                        locationName: "route"
                    }
                }
            }
        },
        DeleteLocalGatewayRouteTable: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId" ],
                members: {
                    LocalGatewayRouteTableId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTable: {
                        shape: "Sjv",
                        locationName: "localGatewayRouteTable"
                    }
                }
            }
        },
        DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId" ],
                members: {
                    LocalGatewayRouteTableVirtualInterfaceGroupAssociationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVirtualInterfaceGroupAssociation: {
                        shape: "Sjz",
                        locationName: "localGatewayRouteTableVirtualInterfaceGroupAssociation"
                    }
                }
            }
        },
        DeleteLocalGatewayRouteTableVpcAssociation: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableVpcAssociationId" ],
                members: {
                    LocalGatewayRouteTableVpcAssociationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVpcAssociation: {
                        shape: "Sk3",
                        locationName: "localGatewayRouteTableVpcAssociation"
                    }
                }
            }
        },
        DeleteManagedPrefixList: {
            input: {
                type: "structure",
                required: [ "PrefixListId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PrefixListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PrefixList: {
                        shape: "Sk9",
                        locationName: "prefixList"
                    }
                }
            }
        },
        DeleteNatGateway: {
            input: {
                type: "structure",
                required: [ "NatGatewayId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    NatGatewayId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    }
                }
            }
        },
        DeleteNetworkAcl: {
            input: {
                type: "structure",
                required: [ "NetworkAclId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkAclId: {
                        locationName: "networkAclId"
                    }
                }
            }
        },
        DeleteNetworkAclEntry: {
            input: {
                type: "structure",
                required: [ "Egress", "NetworkAclId", "RuleNumber" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Egress: {
                        locationName: "egress",
                        type: "boolean"
                    },
                    NetworkAclId: {
                        locationName: "networkAclId"
                    },
                    RuleNumber: {
                        locationName: "ruleNumber",
                        type: "integer"
                    }
                }
            }
        },
        DeleteNetworkInsightsAccessScope: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsAccessScopeId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    NetworkInsightsAccessScopeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeId: {
                        locationName: "networkInsightsAccessScopeId"
                    }
                }
            }
        },
        DeleteNetworkInsightsAccessScopeAnalysis: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsAccessScopeAnalysisId" ],
                members: {
                    NetworkInsightsAccessScopeAnalysisId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeAnalysisId: {
                        locationName: "networkInsightsAccessScopeAnalysisId"
                    }
                }
            }
        },
        DeleteNetworkInsightsAnalysis: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsAnalysisId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    NetworkInsightsAnalysisId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAnalysisId: {
                        locationName: "networkInsightsAnalysisId"
                    }
                }
            }
        },
        DeleteNetworkInsightsPath: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsPathId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    NetworkInsightsPathId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsPathId: {
                        locationName: "networkInsightsPathId"
                    }
                }
            }
        },
        DeleteNetworkInterface: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    }
                }
            }
        },
        DeleteNetworkInterfacePermission: {
            input: {
                type: "structure",
                required: [ "NetworkInterfacePermissionId" ],
                members: {
                    NetworkInterfacePermissionId: {},
                    Force: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DeletePlacementGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    GroupName: {
                        locationName: "groupName"
                    }
                }
            }
        },
        DeletePublicIpv4Pool: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        locationName: "returnValue",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteQueuedReservedInstances: {
            input: {
                type: "structure",
                required: [ "ReservedInstancesIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ReservedInstancesIds: {
                        locationName: "ReservedInstancesId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulQueuedPurchaseDeletions: {
                        locationName: "successfulQueuedPurchaseDeletionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ReservedInstancesId: {
                                    locationName: "reservedInstancesId"
                                }
                            }
                        }
                    },
                    FailedQueuedPurchaseDeletions: {
                        locationName: "failedQueuedPurchaseDeletionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Error: {
                                    locationName: "error",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                },
                                ReservedInstancesId: {
                                    locationName: "reservedInstancesId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteRoute: {
            input: {
                type: "structure",
                required: [ "RouteTableId" ],
                members: {
                    DestinationCidrBlock: {
                        locationName: "destinationCidrBlock"
                    },
                    DestinationIpv6CidrBlock: {
                        locationName: "destinationIpv6CidrBlock"
                    },
                    DestinationPrefixListId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    RouteTableId: {
                        locationName: "routeTableId"
                    }
                }
            }
        },
        DeleteRouteTable: {
            input: {
                type: "structure",
                required: [ "RouteTableId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    RouteTableId: {
                        locationName: "routeTableId"
                    }
                }
            }
        },
        DeleteSecurityGroup: {
            input: {
                type: "structure",
                members: {
                    GroupId: {},
                    GroupName: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteSpotDatafeedSubscription: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteSubnet: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    SubnetId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteSubnetCidrReservation: {
            input: {
                type: "structure",
                required: [ "SubnetCidrReservationId" ],
                members: {
                    SubnetCidrReservationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletedSubnetCidrReservation: {
                        shape: "So6",
                        locationName: "deletedSubnetCidrReservation"
                    }
                }
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "Resources" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Resources: {
                        shape: "So9",
                        locationName: "resourceId"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tag"
                    }
                }
            }
        },
        DeleteTrafficMirrorFilter: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorFilterId" ],
                members: {
                    TrafficMirrorFilterId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilterId: {
                        locationName: "trafficMirrorFilterId"
                    }
                }
            }
        },
        DeleteTrafficMirrorFilterRule: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorFilterRuleId" ],
                members: {
                    TrafficMirrorFilterRuleId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilterRuleId: {
                        locationName: "trafficMirrorFilterRuleId"
                    }
                }
            }
        },
        DeleteTrafficMirrorSession: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorSessionId" ],
                members: {
                    TrafficMirrorSessionId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorSessionId: {
                        locationName: "trafficMirrorSessionId"
                    }
                }
            }
        },
        DeleteTrafficMirrorTarget: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorTargetId" ],
                members: {
                    TrafficMirrorTargetId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorTargetId: {
                        locationName: "trafficMirrorTargetId"
                    }
                }
            }
        },
        DeleteTransitGateway: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId" ],
                members: {
                    TransitGatewayId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGateway: {
                        shape: "Sp6",
                        locationName: "transitGateway"
                    }
                }
            }
        },
        DeleteTransitGatewayConnect: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnect: {
                        shape: "Spd",
                        locationName: "transitGatewayConnect"
                    }
                }
            }
        },
        DeleteTransitGatewayConnectPeer: {
            input: {
                type: "structure",
                required: [ "TransitGatewayConnectPeerId" ],
                members: {
                    TransitGatewayConnectPeerId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeer: {
                        shape: "Spj",
                        locationName: "transitGatewayConnectPeer"
                    }
                }
            }
        },
        DeleteTransitGatewayMulticastDomain: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomain: {
                        shape: "Spw",
                        locationName: "transitGatewayMulticastDomain"
                    }
                }
            }
        },
        DeleteTransitGatewayPeeringAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeeringAttachment: {
                        shape: "Sx",
                        locationName: "transitGatewayPeeringAttachment"
                    }
                }
            }
        },
        DeleteTransitGatewayPolicyTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayPolicyTableId" ],
                members: {
                    TransitGatewayPolicyTableId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPolicyTable: {
                        shape: "Sq5",
                        locationName: "transitGatewayPolicyTable"
                    }
                }
            }
        },
        DeleteTransitGatewayPrefixListReference: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "PrefixListId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    PrefixListId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPrefixListReference: {
                        shape: "Sq9",
                        locationName: "transitGatewayPrefixListReference"
                    }
                }
            }
        },
        DeleteTransitGatewayRoute: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "DestinationCidrBlock" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    DestinationCidrBlock: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Route: {
                        shape: "Sqe",
                        locationName: "route"
                    }
                }
            }
        },
        DeleteTransitGatewayRouteTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTable: {
                        shape: "Sqm",
                        locationName: "transitGatewayRouteTable"
                    }
                }
            }
        },
        DeleteTransitGatewayRouteTableAnnouncement: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableAnnouncementId" ],
                members: {
                    TransitGatewayRouteTableAnnouncementId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableAnnouncement: {
                        shape: "Sqq",
                        locationName: "transitGatewayRouteTableAnnouncement"
                    }
                }
            }
        },
        DeleteTransitGatewayVpcAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayVpcAttachment: {
                        shape: "S16",
                        locationName: "transitGatewayVpcAttachment"
                    }
                }
            }
        },
        DeleteVerifiedAccessEndpoint: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessEndpointId" ],
                members: {
                    VerifiedAccessEndpointId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessEndpoint: {
                        shape: "Sra",
                        locationName: "verifiedAccessEndpoint"
                    }
                }
            }
        },
        DeleteVerifiedAccessGroup: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessGroupId" ],
                members: {
                    VerifiedAccessGroupId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessGroup: {
                        shape: "Sri",
                        locationName: "verifiedAccessGroup"
                    }
                }
            }
        },
        DeleteVerifiedAccessInstance: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessInstanceId" ],
                members: {
                    VerifiedAccessInstanceId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessInstance: {
                        shape: "S6g",
                        locationName: "verifiedAccessInstance"
                    }
                }
            }
        },
        DeleteVerifiedAccessTrustProvider: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessTrustProviderId" ],
                members: {
                    VerifiedAccessTrustProviderId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProvider: {
                        shape: "S67",
                        locationName: "verifiedAccessTrustProvider"
                    }
                }
            }
        },
        DeleteVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    VolumeId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteVpc: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    VpcId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteVpcEndpointConnectionNotifications: {
            input: {
                type: "structure",
                required: [ "ConnectionNotificationIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ConnectionNotificationIds: {
                        locationName: "ConnectionNotificationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        DeleteVpcEndpointServiceConfigurations: {
            input: {
                type: "structure",
                required: [ "ServiceIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceIds: {
                        shape: "Syy",
                        locationName: "ServiceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        DeleteVpcEndpoints: {
            input: {
                type: "structure",
                required: [ "VpcEndpointIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    VpcEndpointIds: {
                        shape: "S1e",
                        locationName: "VpcEndpointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        DeleteVpcPeeringConnection: {
            input: {
                type: "structure",
                required: [ "VpcPeeringConnectionId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcPeeringConnectionId: {
                        locationName: "vpcPeeringConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteVpnConnection: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId" ],
                members: {
                    VpnConnectionId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteVpnConnectionRoute: {
            input: {
                type: "structure",
                required: [ "DestinationCidrBlock", "VpnConnectionId" ],
                members: {
                    DestinationCidrBlock: {},
                    VpnConnectionId: {}
                }
            }
        },
        DeleteVpnGateway: {
            input: {
                type: "structure",
                required: [ "VpnGatewayId" ],
                members: {
                    VpnGatewayId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeprovisionByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "S1y",
                        locationName: "byoipCidr"
                    }
                }
            }
        },
        DeprovisionIpamByoasn: {
            input: {
                type: "structure",
                required: [ "IpamId", "Asn" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamId: {},
                    Asn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Byoasn: {
                        shape: "Szb",
                        locationName: "byoasn"
                    }
                }
            }
        },
        DeprovisionIpamPoolCidr: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPoolCidr: {
                        shape: "Szf",
                        locationName: "ipamPoolCidr"
                    }
                }
            }
        },
        DeprovisionPublicIpv4PoolCidr: {
            input: {
                type: "structure",
                required: [ "PoolId", "Cidr" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PoolId: {},
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolId: {
                        locationName: "poolId"
                    },
                    DeprovisionedAddresses: {
                        locationName: "deprovisionedAddressSet",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DeregisterImage: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DeregisterInstanceEventNotificationAttributes: {
            input: {
                type: "structure",
                required: [ "InstanceTagAttribute" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceTagAttribute: {
                        type: "structure",
                        members: {
                            IncludeAllTagsOfInstance: {
                                type: "boolean"
                            },
                            InstanceTagKeys: {
                                shape: "Szq",
                                locationName: "InstanceTagKey"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTagAttribute: {
                        shape: "Szs",
                        locationName: "instanceTagAttribute"
                    }
                }
            }
        },
        DeregisterTransitGatewayMulticastGroupMembers: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomainId: {},
                    GroupIpAddress: {},
                    NetworkInterfaceIds: {
                        shape: "Szu"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeregisteredMulticastGroupMembers: {
                        locationName: "deregisteredMulticastGroupMembers",
                        type: "structure",
                        members: {
                            TransitGatewayMulticastDomainId: {
                                locationName: "transitGatewayMulticastDomainId"
                            },
                            DeregisteredNetworkInterfaceIds: {
                                shape: "So",
                                locationName: "deregisteredNetworkInterfaceIds"
                            },
                            GroupIpAddress: {
                                locationName: "groupIpAddress"
                            }
                        }
                    }
                }
            }
        },
        DeregisterTransitGatewayMulticastGroupSources: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomainId: {},
                    GroupIpAddress: {},
                    NetworkInterfaceIds: {
                        shape: "Szu"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeregisteredMulticastGroupSources: {
                        locationName: "deregisteredMulticastGroupSources",
                        type: "structure",
                        members: {
                            TransitGatewayMulticastDomainId: {
                                locationName: "transitGatewayMulticastDomainId"
                            },
                            DeregisteredNetworkInterfaceIds: {
                                shape: "So",
                                locationName: "deregisteredNetworkInterfaceIds"
                            },
                            GroupIpAddress: {
                                locationName: "groupIpAddress"
                            }
                        }
                    }
                }
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {
                    AttributeNames: {
                        locationName: "attributeName",
                        type: "list",
                        member: {
                            locationName: "attributeName"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAttributes: {
                        locationName: "accountAttributeSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AttributeName: {
                                    locationName: "attributeName"
                                },
                                AttributeValues: {
                                    locationName: "attributeValueSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            AttributeValue: {
                                                locationName: "attributeValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAddressTransfers: {
            input: {
                type: "structure",
                members: {
                    AllocationIds: {
                        shape: "S4r",
                        locationName: "AllocationId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressTransfers: {
                        locationName: "addressTransferSet",
                        type: "list",
                        member: {
                            shape: "Sa",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeAddresses: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    PublicIps: {
                        locationName: "PublicIp",
                        type: "list",
                        member: {
                            locationName: "PublicIp"
                        }
                    },
                    AllocationIds: {
                        shape: "S4r",
                        locationName: "AllocationId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Addresses: {
                        locationName: "addressesSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                PublicIp: {
                                    locationName: "publicIp"
                                },
                                AllocationId: {
                                    locationName: "allocationId"
                                },
                                AssociationId: {
                                    locationName: "associationId"
                                },
                                Domain: {
                                    locationName: "domain"
                                },
                                NetworkInterfaceId: {
                                    locationName: "networkInterfaceId"
                                },
                                NetworkInterfaceOwnerId: {
                                    locationName: "networkInterfaceOwnerId"
                                },
                                PrivateIpAddress: {
                                    locationName: "privateIpAddress"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                PublicIpv4Pool: {
                                    locationName: "publicIpv4Pool"
                                },
                                NetworkBorderGroup: {
                                    locationName: "networkBorderGroup"
                                },
                                CustomerOwnedIp: {
                                    locationName: "customerOwnedIp"
                                },
                                CustomerOwnedIpv4Pool: {
                                    locationName: "customerOwnedIpv4Pool"
                                },
                                CarrierIp: {
                                    locationName: "carrierIp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAddressesAttribute: {
            input: {
                type: "structure",
                members: {
                    AllocationIds: {
                        locationName: "AllocationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Attribute: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Addresses: {
                        locationName: "addressSet",
                        type: "list",
                        member: {
                            shape: "S10q",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeAggregateIdFormat: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UseLongIdsAggregated: {
                        locationName: "useLongIdsAggregated",
                        type: "boolean"
                    },
                    Statuses: {
                        shape: "S10u",
                        locationName: "statusSet"
                    }
                }
            }
        },
        DescribeAvailabilityZones: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    ZoneNames: {
                        locationName: "ZoneName",
                        type: "list",
                        member: {
                            locationName: "ZoneName"
                        }
                    },
                    ZoneIds: {
                        locationName: "ZoneId",
                        type: "list",
                        member: {
                            locationName: "ZoneId"
                        }
                    },
                    AllAvailabilityZones: {
                        type: "boolean"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AvailabilityZones: {
                        locationName: "availabilityZoneInfo",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                State: {
                                    locationName: "zoneState"
                                },
                                OptInStatus: {
                                    locationName: "optInStatus"
                                },
                                Messages: {
                                    locationName: "messageSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Message: {
                                                locationName: "message"
                                            }
                                        }
                                    }
                                },
                                RegionName: {
                                    locationName: "regionName"
                                },
                                ZoneName: {
                                    locationName: "zoneName"
                                },
                                ZoneId: {
                                    locationName: "zoneId"
                                },
                                GroupName: {
                                    locationName: "groupName"
                                },
                                NetworkBorderGroup: {
                                    locationName: "networkBorderGroup"
                                },
                                ZoneType: {
                                    locationName: "zoneType"
                                },
                                ParentZoneName: {
                                    locationName: "parentZoneName"
                                },
                                ParentZoneId: {
                                    locationName: "parentZoneId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAwsNetworkPerformanceMetricSubscriptions: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Subscriptions: {
                        locationName: "subscriptionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Source: {
                                    locationName: "source"
                                },
                                Destination: {
                                    locationName: "destination"
                                },
                                Metric: {
                                    locationName: "metric"
                                },
                                Statistic: {
                                    locationName: "statistic"
                                },
                                Period: {
                                    locationName: "period"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeBundleTasks: {
            input: {
                type: "structure",
                members: {
                    BundleIds: {
                        locationName: "BundleId",
                        type: "list",
                        member: {
                            locationName: "BundleId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BundleTasks: {
                        locationName: "bundleInstanceTasksSet",
                        type: "list",
                        member: {
                            shape: "S7m",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeByoipCidrs: {
            input: {
                type: "structure",
                required: [ "MaxResults" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidrs: {
                        locationName: "byoipCidrSet",
                        type: "list",
                        member: {
                            shape: "S1y",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeCapacityBlockOfferings: {
            input: {
                type: "structure",
                required: [ "InstanceType", "InstanceCount", "CapacityDurationHours" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceType: {},
                    InstanceCount: {
                        type: "integer"
                    },
                    StartDateRange: {
                        type: "timestamp"
                    },
                    EndDateRange: {
                        type: "timestamp"
                    },
                    CapacityDurationHours: {
                        type: "integer"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CapacityBlockOfferings: {
                        locationName: "capacityBlockOfferingSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CapacityBlockOfferingId: {
                                    locationName: "capacityBlockOfferingId"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                InstanceCount: {
                                    locationName: "instanceCount",
                                    type: "integer"
                                },
                                StartDate: {
                                    locationName: "startDate",
                                    type: "timestamp"
                                },
                                EndDate: {
                                    locationName: "endDate",
                                    type: "timestamp"
                                },
                                CapacityBlockDurationHours: {
                                    locationName: "capacityBlockDurationHours",
                                    type: "integer"
                                },
                                UpfrontFee: {
                                    locationName: "upfrontFee"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Tenancy: {
                                    locationName: "tenancy"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeCapacityReservationFleets: {
            input: {
                type: "structure",
                members: {
                    CapacityReservationFleetIds: {
                        shape: "S7w",
                        locationName: "CapacityReservationFleetId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CapacityReservationFleets: {
                        locationName: "capacityReservationFleetSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CapacityReservationFleetId: {
                                    locationName: "capacityReservationFleetId"
                                },
                                CapacityReservationFleetArn: {
                                    locationName: "capacityReservationFleetArn"
                                },
                                State: {
                                    locationName: "state"
                                },
                                TotalTargetCapacity: {
                                    locationName: "totalTargetCapacity",
                                    type: "integer"
                                },
                                TotalFulfilledCapacity: {
                                    locationName: "totalFulfilledCapacity",
                                    type: "double"
                                },
                                Tenancy: {
                                    locationName: "tenancy"
                                },
                                EndDate: {
                                    locationName: "endDate",
                                    type: "timestamp"
                                },
                                CreateTime: {
                                    locationName: "createTime",
                                    type: "timestamp"
                                },
                                InstanceMatchCriteria: {
                                    locationName: "instanceMatchCriteria"
                                },
                                AllocationStrategy: {
                                    locationName: "allocationStrategy"
                                },
                                InstanceTypeSpecifications: {
                                    shape: "Sac",
                                    locationName: "instanceTypeSpecificationSet"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeCapacityReservations: {
            input: {
                type: "structure",
                members: {
                    CapacityReservationIds: {
                        locationName: "CapacityReservationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    CapacityReservations: {
                        locationName: "capacityReservationSet",
                        type: "list",
                        member: {
                            shape: "S9x",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeCarrierGateways: {
            input: {
                type: "structure",
                members: {
                    CarrierGatewayIds: {
                        locationName: "CarrierGatewayId",
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CarrierGateways: {
                        locationName: "carrierGatewaySet",
                        type: "list",
                        member: {
                            shape: "Sag",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClassicLinkInstances: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        locationName: "instancesSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Groups: {
                                    shape: "Sly",
                                    locationName: "groupSet"
                                },
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClientVpnAuthorizationRules: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizationRules: {
                        locationName: "authorizationRule",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClientVpnEndpointId: {
                                    locationName: "clientVpnEndpointId"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                GroupId: {
                                    locationName: "groupId"
                                },
                                AccessAll: {
                                    locationName: "accessAll",
                                    type: "boolean"
                                },
                                DestinationCidr: {
                                    locationName: "destinationCidr"
                                },
                                Status: {
                                    shape: "S6u",
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClientVpnConnections: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        locationName: "connections",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClientVpnEndpointId: {
                                    locationName: "clientVpnEndpointId"
                                },
                                Timestamp: {
                                    locationName: "timestamp"
                                },
                                ConnectionId: {
                                    locationName: "connectionId"
                                },
                                Username: {
                                    locationName: "username"
                                },
                                ConnectionEstablishedTime: {
                                    locationName: "connectionEstablishedTime"
                                },
                                IngressBytes: {
                                    locationName: "ingressBytes"
                                },
                                EgressBytes: {
                                    locationName: "egressBytes"
                                },
                                IngressPackets: {
                                    locationName: "ingressPackets"
                                },
                                EgressPackets: {
                                    locationName: "egressPackets"
                                },
                                ClientIp: {
                                    locationName: "clientIp"
                                },
                                CommonName: {
                                    locationName: "commonName"
                                },
                                Status: {
                                    shape: "S12n",
                                    locationName: "status"
                                },
                                ConnectionEndTime: {
                                    locationName: "connectionEndTime"
                                },
                                PostureComplianceStatuses: {
                                    shape: "So",
                                    locationName: "postureComplianceStatusSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClientVpnEndpoints: {
            input: {
                type: "structure",
                members: {
                    ClientVpnEndpointIds: {
                        locationName: "ClientVpnEndpointId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientVpnEndpoints: {
                        locationName: "clientVpnEndpoint",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClientVpnEndpointId: {
                                    locationName: "clientVpnEndpointId"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                Status: {
                                    shape: "Saw",
                                    locationName: "status"
                                },
                                CreationTime: {
                                    locationName: "creationTime"
                                },
                                DeletionTime: {
                                    locationName: "deletionTime"
                                },
                                DnsName: {
                                    locationName: "dnsName"
                                },
                                ClientCidrBlock: {
                                    locationName: "clientCidrBlock"
                                },
                                DnsServers: {
                                    shape: "So",
                                    locationName: "dnsServer"
                                },
                                SplitTunnel: {
                                    locationName: "splitTunnel",
                                    type: "boolean"
                                },
                                VpnProtocol: {
                                    locationName: "vpnProtocol"
                                },
                                TransportProtocol: {
                                    locationName: "transportProtocol"
                                },
                                VpnPort: {
                                    locationName: "vpnPort",
                                    type: "integer"
                                },
                                AssociatedTargetNetworks: {
                                    deprecated: true,
                                    deprecatedMessage: "This property is deprecated. To view the target networks associated with a Client VPN endpoint, call DescribeClientVpnTargetNetworks and inspect the clientVpnTargetNetworks response element.",
                                    locationName: "associatedTargetNetwork",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            NetworkId: {
                                                locationName: "networkId"
                                            },
                                            NetworkType: {
                                                locationName: "networkType"
                                            }
                                        }
                                    }
                                },
                                ServerCertificateArn: {
                                    locationName: "serverCertificateArn"
                                },
                                AuthenticationOptions: {
                                    locationName: "authenticationOptions",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Type: {
                                                locationName: "type"
                                            },
                                            ActiveDirectory: {
                                                locationName: "activeDirectory",
                                                type: "structure",
                                                members: {
                                                    DirectoryId: {
                                                        locationName: "directoryId"
                                                    }
                                                }
                                            },
                                            MutualAuthentication: {
                                                locationName: "mutualAuthentication",
                                                type: "structure",
                                                members: {
                                                    ClientRootCertificateChain: {
                                                        locationName: "clientRootCertificateChain"
                                                    }
                                                }
                                            },
                                            FederatedAuthentication: {
                                                locationName: "federatedAuthentication",
                                                type: "structure",
                                                members: {
                                                    SamlProviderArn: {
                                                        locationName: "samlProviderArn"
                                                    },
                                                    SelfServiceSamlProviderArn: {
                                                        locationName: "selfServiceSamlProviderArn"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                ConnectionLogOptions: {
                                    locationName: "connectionLogOptions",
                                    type: "structure",
                                    members: {
                                        Enabled: {
                                            type: "boolean"
                                        },
                                        CloudwatchLogGroup: {},
                                        CloudwatchLogStream: {}
                                    }
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                SecurityGroupIds: {
                                    shape: "S2r",
                                    locationName: "securityGroupIdSet"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                },
                                SelfServicePortalUrl: {
                                    locationName: "selfServicePortalUrl"
                                },
                                ClientConnectOptions: {
                                    locationName: "clientConnectOptions",
                                    type: "structure",
                                    members: {
                                        Enabled: {
                                            locationName: "enabled",
                                            type: "boolean"
                                        },
                                        LambdaFunctionArn: {
                                            locationName: "lambdaFunctionArn"
                                        },
                                        Status: {
                                            locationName: "status",
                                            type: "structure",
                                            members: {
                                                Code: {
                                                    locationName: "code"
                                                },
                                                Message: {
                                                    locationName: "message"
                                                }
                                            }
                                        }
                                    }
                                },
                                SessionTimeoutHours: {
                                    locationName: "sessionTimeoutHours",
                                    type: "integer"
                                },
                                ClientLoginBannerOptions: {
                                    locationName: "clientLoginBannerOptions",
                                    type: "structure",
                                    members: {
                                        Enabled: {
                                            locationName: "enabled",
                                            type: "boolean"
                                        },
                                        BannerText: {
                                            locationName: "bannerText"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClientVpnRoutes: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Routes: {
                        locationName: "routes",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClientVpnEndpointId: {
                                    locationName: "clientVpnEndpointId"
                                },
                                DestinationCidr: {
                                    locationName: "destinationCidr"
                                },
                                TargetSubnet: {
                                    locationName: "targetSubnet"
                                },
                                Type: {
                                    locationName: "type"
                                },
                                Origin: {
                                    locationName: "origin"
                                },
                                Status: {
                                    shape: "Sb0",
                                    locationName: "status"
                                },
                                Description: {
                                    locationName: "description"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeClientVpnTargetNetworks: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    AssociationIds: {
                        shape: "So"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientVpnTargetNetworks: {
                        locationName: "clientVpnTargetNetworks",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AssociationId: {
                                    locationName: "associationId"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                },
                                TargetNetworkId: {
                                    locationName: "targetNetworkId"
                                },
                                ClientVpnEndpointId: {
                                    locationName: "clientVpnEndpointId"
                                },
                                Status: {
                                    shape: "S3m",
                                    locationName: "status"
                                },
                                SecurityGroups: {
                                    shape: "So",
                                    locationName: "securityGroups"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeCoipPools: {
            input: {
                type: "structure",
                members: {
                    PoolIds: {
                        locationName: "PoolId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoipPools: {
                        locationName: "coipPoolSet",
                        type: "list",
                        member: {
                            shape: "Sb9",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeConversionTasks: {
            input: {
                type: "structure",
                members: {
                    ConversionTaskIds: {
                        locationName: "conversionTaskId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConversionTasks: {
                        locationName: "conversionTasks",
                        type: "list",
                        member: {
                            shape: "S13s",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeCustomerGateways: {
            input: {
                type: "structure",
                members: {
                    CustomerGatewayIds: {
                        locationName: "CustomerGatewayId",
                        type: "list",
                        member: {
                            locationName: "CustomerGatewayId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomerGateways: {
                        locationName: "customerGatewaySet",
                        type: "list",
                        member: {
                            shape: "Sbd",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeDhcpOptions: {
            input: {
                type: "structure",
                members: {
                    DhcpOptionsIds: {
                        locationName: "DhcpOptionsId",
                        type: "list",
                        member: {
                            locationName: "DhcpOptionsId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DhcpOptions: {
                        locationName: "dhcpOptionsSet",
                        type: "list",
                        member: {
                            shape: "Sbx",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeEgressOnlyInternetGateways: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    EgressOnlyInternetGatewayIds: {
                        locationName: "EgressOnlyInternetGatewayId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EgressOnlyInternetGateways: {
                        locationName: "egressOnlyInternetGatewaySet",
                        type: "list",
                        member: {
                            shape: "Sc4",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeElasticGpus: {
            input: {
                type: "structure",
                members: {
                    ElasticGpuIds: {
                        locationName: "ElasticGpuId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ElasticGpuSet: {
                        locationName: "elasticGpuSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ElasticGpuId: {
                                    locationName: "elasticGpuId"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                ElasticGpuType: {
                                    locationName: "elasticGpuType"
                                },
                                ElasticGpuHealth: {
                                    locationName: "elasticGpuHealth",
                                    type: "structure",
                                    members: {
                                        Status: {
                                            locationName: "status"
                                        }
                                    }
                                },
                                ElasticGpuState: {
                                    locationName: "elasticGpuState"
                                },
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeExportImageTasks: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    ExportImageTaskIds: {
                        locationName: "ExportImageTaskId",
                        type: "list",
                        member: {
                            locationName: "ExportImageTaskId"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportImageTasks: {
                        locationName: "exportImageTaskSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "description"
                                },
                                ExportImageTaskId: {
                                    locationName: "exportImageTaskId"
                                },
                                ImageId: {
                                    locationName: "imageId"
                                },
                                Progress: {
                                    locationName: "progress"
                                },
                                S3ExportLocation: {
                                    shape: "S14w",
                                    locationName: "s3ExportLocation"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                StatusMessage: {
                                    locationName: "statusMessage"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeExportTasks: {
            input: {
                type: "structure",
                members: {
                    ExportTaskIds: {
                        locationName: "exportTaskId",
                        type: "list",
                        member: {
                            locationName: "ExportTaskId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExportTasks: {
                        locationName: "exportTaskSet",
                        type: "list",
                        member: {
                            shape: "Sff",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeFastLaunchImages: {
            input: {
                type: "structure",
                members: {
                    ImageIds: {
                        locationName: "ImageId",
                        type: "list",
                        member: {
                            locationName: "ImageId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FastLaunchImages: {
                        locationName: "fastLaunchImageSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ImageId: {
                                    locationName: "imageId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                SnapshotConfiguration: {
                                    shape: "S159",
                                    locationName: "snapshotConfiguration"
                                },
                                LaunchTemplate: {
                                    shape: "S15a",
                                    locationName: "launchTemplate"
                                },
                                MaxParallelLaunches: {
                                    locationName: "maxParallelLaunches",
                                    type: "integer"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                State: {
                                    locationName: "state"
                                },
                                StateTransitionReason: {
                                    locationName: "stateTransitionReason"
                                },
                                StateTransitionTime: {
                                    locationName: "stateTransitionTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeFastSnapshotRestores: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FastSnapshotRestores: {
                        locationName: "fastSnapshotRestoreSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                State: {
                                    locationName: "state"
                                },
                                StateTransitionReason: {
                                    locationName: "stateTransitionReason"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                OwnerAlias: {
                                    locationName: "ownerAlias"
                                },
                                EnablingTime: {
                                    locationName: "enablingTime",
                                    type: "timestamp"
                                },
                                OptimizingTime: {
                                    locationName: "optimizingTime",
                                    type: "timestamp"
                                },
                                EnabledTime: {
                                    locationName: "enabledTime",
                                    type: "timestamp"
                                },
                                DisablingTime: {
                                    locationName: "disablingTime",
                                    type: "timestamp"
                                },
                                DisabledTime: {
                                    locationName: "disabledTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeFleetHistory: {
            input: {
                type: "structure",
                required: [ "FleetId", "StartTime" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    EventType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    FleetId: {},
                    StartTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HistoryRecords: {
                        locationName: "historyRecordSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                EventInformation: {
                                    shape: "S15n",
                                    locationName: "eventInformation"
                                },
                                EventType: {
                                    locationName: "eventType"
                                },
                                Timestamp: {
                                    locationName: "timestamp",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    LastEvaluatedTime: {
                        locationName: "lastEvaluatedTime",
                        type: "timestamp"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    FleetId: {
                        locationName: "fleetId"
                    },
                    StartTime: {
                        locationName: "startTime",
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeFleetInstances: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    FleetId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActiveInstances: {
                        shape: "S15q",
                        locationName: "activeInstanceSet"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    FleetId: {
                        locationName: "fleetId"
                    }
                }
            }
        },
        DescribeFleets: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    FleetIds: {
                        shape: "Sv1",
                        locationName: "FleetId"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Fleets: {
                        locationName: "fleetSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ActivityStatus: {
                                    locationName: "activityStatus"
                                },
                                CreateTime: {
                                    locationName: "createTime",
                                    type: "timestamp"
                                },
                                FleetId: {
                                    locationName: "fleetId"
                                },
                                FleetState: {
                                    locationName: "fleetState"
                                },
                                ClientToken: {
                                    locationName: "clientToken"
                                },
                                ExcessCapacityTerminationPolicy: {
                                    locationName: "excessCapacityTerminationPolicy"
                                },
                                FulfilledCapacity: {
                                    locationName: "fulfilledCapacity",
                                    type: "double"
                                },
                                FulfilledOnDemandCapacity: {
                                    locationName: "fulfilledOnDemandCapacity",
                                    type: "double"
                                },
                                LaunchTemplateConfigs: {
                                    locationName: "launchTemplateConfigs",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            LaunchTemplateSpecification: {
                                                shape: "Sdw",
                                                locationName: "launchTemplateSpecification"
                                            },
                                            Overrides: {
                                                locationName: "overrides",
                                                type: "list",
                                                member: {
                                                    shape: "Sdx",
                                                    locationName: "item"
                                                }
                                            }
                                        }
                                    }
                                },
                                TargetCapacitySpecification: {
                                    locationName: "targetCapacitySpecification",
                                    type: "structure",
                                    members: {
                                        TotalTargetCapacity: {
                                            locationName: "totalTargetCapacity",
                                            type: "integer"
                                        },
                                        OnDemandTargetCapacity: {
                                            locationName: "onDemandTargetCapacity",
                                            type: "integer"
                                        },
                                        SpotTargetCapacity: {
                                            locationName: "spotTargetCapacity",
                                            type: "integer"
                                        },
                                        DefaultTargetCapacityType: {
                                            locationName: "defaultTargetCapacityType"
                                        },
                                        TargetCapacityUnitType: {
                                            locationName: "targetCapacityUnitType"
                                        }
                                    }
                                },
                                TerminateInstancesWithExpiration: {
                                    locationName: "terminateInstancesWithExpiration",
                                    type: "boolean"
                                },
                                Type: {
                                    locationName: "type"
                                },
                                ValidFrom: {
                                    locationName: "validFrom",
                                    type: "timestamp"
                                },
                                ValidUntil: {
                                    locationName: "validUntil",
                                    type: "timestamp"
                                },
                                ReplaceUnhealthyInstances: {
                                    locationName: "replaceUnhealthyInstances",
                                    type: "boolean"
                                },
                                SpotOptions: {
                                    locationName: "spotOptions",
                                    type: "structure",
                                    members: {
                                        AllocationStrategy: {
                                            locationName: "allocationStrategy"
                                        },
                                        MaintenanceStrategies: {
                                            locationName: "maintenanceStrategies",
                                            type: "structure",
                                            members: {
                                                CapacityRebalance: {
                                                    locationName: "capacityRebalance",
                                                    type: "structure",
                                                    members: {
                                                        ReplacementStrategy: {
                                                            locationName: "replacementStrategy"
                                                        },
                                                        TerminationDelay: {
                                                            locationName: "terminationDelay",
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        InstanceInterruptionBehavior: {
                                            locationName: "instanceInterruptionBehavior"
                                        },
                                        InstancePoolsToUseCount: {
                                            locationName: "instancePoolsToUseCount",
                                            type: "integer"
                                        },
                                        SingleInstanceType: {
                                            locationName: "singleInstanceType",
                                            type: "boolean"
                                        },
                                        SingleAvailabilityZone: {
                                            locationName: "singleAvailabilityZone",
                                            type: "boolean"
                                        },
                                        MinTargetCapacity: {
                                            locationName: "minTargetCapacity",
                                            type: "integer"
                                        },
                                        MaxTotalPrice: {
                                            locationName: "maxTotalPrice"
                                        }
                                    }
                                },
                                OnDemandOptions: {
                                    locationName: "onDemandOptions",
                                    type: "structure",
                                    members: {
                                        AllocationStrategy: {
                                            locationName: "allocationStrategy"
                                        },
                                        CapacityReservationOptions: {
                                            locationName: "capacityReservationOptions",
                                            type: "structure",
                                            members: {
                                                UsageStrategy: {
                                                    locationName: "usageStrategy"
                                                }
                                            }
                                        },
                                        SingleInstanceType: {
                                            locationName: "singleInstanceType",
                                            type: "boolean"
                                        },
                                        SingleAvailabilityZone: {
                                            locationName: "singleAvailabilityZone",
                                            type: "boolean"
                                        },
                                        MinTargetCapacity: {
                                            locationName: "minTargetCapacity",
                                            type: "integer"
                                        },
                                        MaxTotalPrice: {
                                            locationName: "maxTotalPrice"
                                        }
                                    }
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                Errors: {
                                    locationName: "errorSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            LaunchTemplateAndOverrides: {
                                                shape: "Sdv",
                                                locationName: "launchTemplateAndOverrides"
                                            },
                                            Lifecycle: {
                                                locationName: "lifecycle"
                                            },
                                            ErrorCode: {
                                                locationName: "errorCode"
                                            },
                                            ErrorMessage: {
                                                locationName: "errorMessage"
                                            }
                                        }
                                    }
                                },
                                Instances: {
                                    locationName: "fleetInstanceSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            LaunchTemplateAndOverrides: {
                                                shape: "Sdv",
                                                locationName: "launchTemplateAndOverrides"
                                            },
                                            Lifecycle: {
                                                locationName: "lifecycle"
                                            },
                                            InstanceIds: {
                                                shape: "Sec",
                                                locationName: "instanceIds"
                                            },
                                            InstanceType: {
                                                locationName: "instanceType"
                                            },
                                            Platform: {
                                                locationName: "platform"
                                            }
                                        }
                                    }
                                },
                                Context: {
                                    locationName: "context"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeFlowLogs: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filter: {
                        shape: "S10d"
                    },
                    FlowLogIds: {
                        shape: "Svb",
                        locationName: "FlowLogId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FlowLogs: {
                        locationName: "flowLogSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CreationTime: {
                                    locationName: "creationTime",
                                    type: "timestamp"
                                },
                                DeliverLogsErrorMessage: {
                                    locationName: "deliverLogsErrorMessage"
                                },
                                DeliverLogsPermissionArn: {
                                    locationName: "deliverLogsPermissionArn"
                                },
                                DeliverCrossAccountRole: {
                                    locationName: "deliverCrossAccountRole"
                                },
                                DeliverLogsStatus: {
                                    locationName: "deliverLogsStatus"
                                },
                                FlowLogId: {
                                    locationName: "flowLogId"
                                },
                                FlowLogStatus: {
                                    locationName: "flowLogStatus"
                                },
                                LogGroupName: {
                                    locationName: "logGroupName"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                TrafficType: {
                                    locationName: "trafficType"
                                },
                                LogDestinationType: {
                                    locationName: "logDestinationType"
                                },
                                LogDestination: {
                                    locationName: "logDestination"
                                },
                                LogFormat: {
                                    locationName: "logFormat"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                MaxAggregationInterval: {
                                    locationName: "maxAggregationInterval",
                                    type: "integer"
                                },
                                DestinationOptions: {
                                    locationName: "destinationOptions",
                                    type: "structure",
                                    members: {
                                        FileFormat: {
                                            locationName: "fileFormat"
                                        },
                                        HiveCompatiblePartitions: {
                                            locationName: "hiveCompatiblePartitions",
                                            type: "boolean"
                                        },
                                        PerHourPartition: {
                                            locationName: "perHourPartition",
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeFpgaImageAttribute: {
            input: {
                type: "structure",
                required: [ "FpgaImageId", "Attribute" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FpgaImageId: {},
                    Attribute: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FpgaImageAttribute: {
                        shape: "S16j",
                        locationName: "fpgaImageAttribute"
                    }
                }
            }
        },
        DescribeFpgaImages: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FpgaImageIds: {
                        locationName: "FpgaImageId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Owners: {
                        shape: "S16s",
                        locationName: "Owner"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FpgaImages: {
                        locationName: "fpgaImageSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                FpgaImageId: {
                                    locationName: "fpgaImageId"
                                },
                                FpgaImageGlobalId: {
                                    locationName: "fpgaImageGlobalId"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                ShellVersion: {
                                    locationName: "shellVersion"
                                },
                                PciId: {
                                    locationName: "pciId",
                                    type: "structure",
                                    members: {
                                        DeviceId: {},
                                        VendorId: {},
                                        SubsystemId: {},
                                        SubsystemVendorId: {}
                                    }
                                },
                                State: {
                                    locationName: "state",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                },
                                CreateTime: {
                                    locationName: "createTime",
                                    type: "timestamp"
                                },
                                UpdateTime: {
                                    locationName: "updateTime",
                                    type: "timestamp"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                OwnerAlias: {
                                    locationName: "ownerAlias"
                                },
                                ProductCodes: {
                                    shape: "S16n",
                                    locationName: "productCodes"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tags"
                                },
                                Public: {
                                    locationName: "public",
                                    type: "boolean"
                                },
                                DataRetentionSupport: {
                                    locationName: "dataRetentionSupport",
                                    type: "boolean"
                                },
                                InstanceTypes: {
                                    locationName: "instanceTypes",
                                    type: "list",
                                    member: {
                                        locationName: "item"
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeHostReservationOfferings: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S10d"
                    },
                    MaxDuration: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    MinDuration: {
                        type: "integer"
                    },
                    NextToken: {},
                    OfferingId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    OfferingSet: {
                        locationName: "offeringSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Duration: {
                                    locationName: "duration",
                                    type: "integer"
                                },
                                HourlyPrice: {
                                    locationName: "hourlyPrice"
                                },
                                InstanceFamily: {
                                    locationName: "instanceFamily"
                                },
                                OfferingId: {
                                    locationName: "offeringId"
                                },
                                PaymentOption: {
                                    locationName: "paymentOption"
                                },
                                UpfrontPrice: {
                                    locationName: "upfrontPrice"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeHostReservations: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S10d"
                    },
                    HostReservationIdSet: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HostReservationSet: {
                        locationName: "hostReservationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Count: {
                                    locationName: "count",
                                    type: "integer"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Duration: {
                                    locationName: "duration",
                                    type: "integer"
                                },
                                End: {
                                    locationName: "end",
                                    type: "timestamp"
                                },
                                HostIdSet: {
                                    shape: "S17d",
                                    locationName: "hostIdSet"
                                },
                                HostReservationId: {
                                    locationName: "hostReservationId"
                                },
                                HourlyPrice: {
                                    locationName: "hourlyPrice"
                                },
                                InstanceFamily: {
                                    locationName: "instanceFamily"
                                },
                                OfferingId: {
                                    locationName: "offeringId"
                                },
                                PaymentOption: {
                                    locationName: "paymentOption"
                                },
                                Start: {
                                    locationName: "start",
                                    type: "timestamp"
                                },
                                State: {
                                    locationName: "state"
                                },
                                UpfrontPrice: {
                                    locationName: "upfrontPrice"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeHosts: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        shape: "S10d",
                        locationName: "filter"
                    },
                    HostIds: {
                        shape: "S17g",
                        locationName: "hostId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Hosts: {
                        locationName: "hostSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AutoPlacement: {
                                    locationName: "autoPlacement"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                AvailableCapacity: {
                                    locationName: "availableCapacity",
                                    type: "structure",
                                    members: {
                                        AvailableInstanceCapacity: {
                                            locationName: "availableInstanceCapacity",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    AvailableCapacity: {
                                                        locationName: "availableCapacity",
                                                        type: "integer"
                                                    },
                                                    InstanceType: {
                                                        locationName: "instanceType"
                                                    },
                                                    TotalCapacity: {
                                                        locationName: "totalCapacity",
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        },
                                        AvailableVCpus: {
                                            locationName: "availableVCpus",
                                            type: "integer"
                                        }
                                    }
                                },
                                ClientToken: {
                                    locationName: "clientToken"
                                },
                                HostId: {
                                    locationName: "hostId"
                                },
                                HostProperties: {
                                    locationName: "hostProperties",
                                    type: "structure",
                                    members: {
                                        Cores: {
                                            locationName: "cores",
                                            type: "integer"
                                        },
                                        InstanceType: {
                                            locationName: "instanceType"
                                        },
                                        InstanceFamily: {
                                            locationName: "instanceFamily"
                                        },
                                        Sockets: {
                                            locationName: "sockets",
                                            type: "integer"
                                        },
                                        TotalVCpus: {
                                            locationName: "totalVCpus",
                                            type: "integer"
                                        }
                                    }
                                },
                                HostReservationId: {
                                    locationName: "hostReservationId"
                                },
                                Instances: {
                                    locationName: "instances",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            InstanceId: {
                                                locationName: "instanceId"
                                            },
                                            InstanceType: {
                                                locationName: "instanceType"
                                            },
                                            OwnerId: {
                                                locationName: "ownerId"
                                            }
                                        }
                                    }
                                },
                                State: {
                                    locationName: "state"
                                },
                                AllocationTime: {
                                    locationName: "allocationTime",
                                    type: "timestamp"
                                },
                                ReleaseTime: {
                                    locationName: "releaseTime",
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                HostRecovery: {
                                    locationName: "hostRecovery"
                                },
                                AllowsMultipleInstanceTypes: {
                                    locationName: "allowsMultipleInstanceTypes"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                AvailabilityZoneId: {
                                    locationName: "availabilityZoneId"
                                },
                                MemberOfServiceLinkedResourceGroup: {
                                    locationName: "memberOfServiceLinkedResourceGroup",
                                    type: "boolean"
                                },
                                OutpostArn: {
                                    locationName: "outpostArn"
                                },
                                HostMaintenance: {
                                    locationName: "hostMaintenance"
                                },
                                AssetId: {
                                    locationName: "assetId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeIamInstanceProfileAssociations: {
            input: {
                type: "structure",
                members: {
                    AssociationIds: {
                        locationName: "AssociationId",
                        type: "list",
                        member: {
                            locationName: "AssociationId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IamInstanceProfileAssociations: {
                        locationName: "iamInstanceProfileAssociationSet",
                        type: "list",
                        member: {
                            shape: "S3x",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeIdFormat: {
            input: {
                type: "structure",
                members: {
                    Resource: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Statuses: {
                        shape: "S10u",
                        locationName: "statusSet"
                    }
                }
            }
        },
        DescribeIdentityIdFormat: {
            input: {
                type: "structure",
                required: [ "PrincipalArn" ],
                members: {
                    PrincipalArn: {
                        locationName: "principalArn"
                    },
                    Resource: {
                        locationName: "resource"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Statuses: {
                        shape: "S10u",
                        locationName: "statusSet"
                    }
                }
            }
        },
        DescribeImageAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "ImageId" ],
                members: {
                    Attribute: {},
                    ImageId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BlockDeviceMappings: {
                        shape: "S185",
                        locationName: "blockDeviceMapping"
                    },
                    ImageId: {
                        locationName: "imageId"
                    },
                    LaunchPermissions: {
                        shape: "S186",
                        locationName: "launchPermission"
                    },
                    ProductCodes: {
                        shape: "S16n",
                        locationName: "productCodes"
                    },
                    Description: {
                        shape: "Sc1",
                        locationName: "description"
                    },
                    KernelId: {
                        shape: "Sc1",
                        locationName: "kernel"
                    },
                    RamdiskId: {
                        shape: "Sc1",
                        locationName: "ramdisk"
                    },
                    SriovNetSupport: {
                        shape: "Sc1",
                        locationName: "sriovNetSupport"
                    },
                    BootMode: {
                        shape: "Sc1",
                        locationName: "bootMode"
                    },
                    TpmSupport: {
                        shape: "Sc1",
                        locationName: "tpmSupport"
                    },
                    UefiData: {
                        shape: "Sc1",
                        locationName: "uefiData"
                    },
                    LastLaunchedTime: {
                        shape: "Sc1",
                        locationName: "lastLaunchedTime"
                    },
                    ImdsSupport: {
                        shape: "Sc1",
                        locationName: "imdsSupport"
                    }
                }
            }
        },
        DescribeImages: {
            input: {
                type: "structure",
                members: {
                    ExecutableUsers: {
                        locationName: "ExecutableBy",
                        type: "list",
                        member: {
                            locationName: "ExecutableBy"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    ImageIds: {
                        shape: "S18a",
                        locationName: "ImageId"
                    },
                    Owners: {
                        shape: "S16s",
                        locationName: "Owner"
                    },
                    IncludeDeprecated: {
                        type: "boolean"
                    },
                    IncludeDisabled: {
                        type: "boolean"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        locationName: "imagesSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Architecture: {
                                    locationName: "architecture"
                                },
                                CreationDate: {
                                    locationName: "creationDate"
                                },
                                ImageId: {
                                    locationName: "imageId"
                                },
                                ImageLocation: {
                                    locationName: "imageLocation"
                                },
                                ImageType: {
                                    locationName: "imageType"
                                },
                                Public: {
                                    locationName: "isPublic",
                                    type: "boolean"
                                },
                                KernelId: {
                                    locationName: "kernelId"
                                },
                                OwnerId: {
                                    locationName: "imageOwnerId"
                                },
                                Platform: {
                                    locationName: "platform"
                                },
                                PlatformDetails: {
                                    locationName: "platformDetails"
                                },
                                UsageOperation: {
                                    locationName: "usageOperation"
                                },
                                ProductCodes: {
                                    shape: "S16n",
                                    locationName: "productCodes"
                                },
                                RamdiskId: {
                                    locationName: "ramdiskId"
                                },
                                State: {
                                    locationName: "imageState"
                                },
                                BlockDeviceMappings: {
                                    shape: "S185",
                                    locationName: "blockDeviceMapping"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                EnaSupport: {
                                    locationName: "enaSupport",
                                    type: "boolean"
                                },
                                Hypervisor: {
                                    locationName: "hypervisor"
                                },
                                ImageOwnerAlias: {
                                    locationName: "imageOwnerAlias"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                RootDeviceName: {
                                    locationName: "rootDeviceName"
                                },
                                RootDeviceType: {
                                    locationName: "rootDeviceType"
                                },
                                SriovNetSupport: {
                                    locationName: "sriovNetSupport"
                                },
                                StateReason: {
                                    shape: "Sjw",
                                    locationName: "stateReason"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                VirtualizationType: {
                                    locationName: "virtualizationType"
                                },
                                BootMode: {
                                    locationName: "bootMode"
                                },
                                TpmSupport: {
                                    locationName: "tpmSupport"
                                },
                                DeprecationTime: {
                                    locationName: "deprecationTime"
                                },
                                ImdsSupport: {
                                    locationName: "imdsSupport"
                                },
                                SourceInstanceId: {
                                    locationName: "sourceInstanceId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeImportImageTasks: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d"
                    },
                    ImportTaskIds: {
                        locationName: "ImportTaskId",
                        type: "list",
                        member: {
                            locationName: "ImportTaskId"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportImageTasks: {
                        locationName: "importImageTaskSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Architecture: {
                                    locationName: "architecture"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                Encrypted: {
                                    locationName: "encrypted",
                                    type: "boolean"
                                },
                                Hypervisor: {
                                    locationName: "hypervisor"
                                },
                                ImageId: {
                                    locationName: "imageId"
                                },
                                ImportTaskId: {
                                    locationName: "importTaskId"
                                },
                                KmsKeyId: {
                                    locationName: "kmsKeyId"
                                },
                                LicenseType: {
                                    locationName: "licenseType"
                                },
                                Platform: {
                                    locationName: "platform"
                                },
                                Progress: {
                                    locationName: "progress"
                                },
                                SnapshotDetails: {
                                    shape: "S18t",
                                    locationName: "snapshotDetailSet"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                StatusMessage: {
                                    locationName: "statusMessage"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                LicenseSpecifications: {
                                    shape: "S18x",
                                    locationName: "licenseSpecifications"
                                },
                                UsageOperation: {
                                    locationName: "usageOperation"
                                },
                                BootMode: {
                                    locationName: "bootMode"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeImportSnapshotTasks: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d"
                    },
                    ImportTaskIds: {
                        locationName: "ImportTaskId",
                        type: "list",
                        member: {
                            locationName: "ImportTaskId"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportSnapshotTasks: {
                        locationName: "importSnapshotTaskSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "description"
                                },
                                ImportTaskId: {
                                    locationName: "importTaskId"
                                },
                                SnapshotTaskDetail: {
                                    shape: "S195",
                                    locationName: "snapshotTaskDetail"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "InstanceId" ],
                members: {
                    Attribute: {
                        locationName: "attribute"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "Sly",
                        locationName: "groupSet"
                    },
                    BlockDeviceMappings: {
                        shape: "S199",
                        locationName: "blockDeviceMapping"
                    },
                    DisableApiTermination: {
                        shape: "S19c",
                        locationName: "disableApiTermination"
                    },
                    EnaSupport: {
                        shape: "S19c",
                        locationName: "enaSupport"
                    },
                    EnclaveOptions: {
                        shape: "S19d",
                        locationName: "enclaveOptions"
                    },
                    EbsOptimized: {
                        shape: "S19c",
                        locationName: "ebsOptimized"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    InstanceInitiatedShutdownBehavior: {
                        shape: "Sc1",
                        locationName: "instanceInitiatedShutdownBehavior"
                    },
                    InstanceType: {
                        shape: "Sc1",
                        locationName: "instanceType"
                    },
                    KernelId: {
                        shape: "Sc1",
                        locationName: "kernel"
                    },
                    ProductCodes: {
                        shape: "S16n",
                        locationName: "productCodes"
                    },
                    RamdiskId: {
                        shape: "Sc1",
                        locationName: "ramdisk"
                    },
                    RootDeviceName: {
                        shape: "Sc1",
                        locationName: "rootDeviceName"
                    },
                    SourceDestCheck: {
                        shape: "S19c",
                        locationName: "sourceDestCheck"
                    },
                    SriovNetSupport: {
                        shape: "Sc1",
                        locationName: "sriovNetSupport"
                    },
                    UserData: {
                        shape: "Sc1",
                        locationName: "userData"
                    },
                    DisableApiStop: {
                        shape: "S19c",
                        locationName: "disableApiStop"
                    }
                }
            }
        },
        DescribeInstanceConnectEndpoints: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    InstanceConnectEndpointIds: {
                        shape: "So",
                        locationName: "InstanceConnectEndpointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceConnectEndpoints: {
                        locationName: "instanceConnectEndpointSet",
                        type: "list",
                        member: {
                            shape: "Sf0",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceCreditSpecifications: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceCreditSpecifications: {
                        locationName: "instanceCreditSpecificationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                CpuCredits: {
                                    locationName: "cpuCredits"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceEventNotificationAttributes: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTagAttribute: {
                        shape: "Szs",
                        locationName: "instanceTagAttribute"
                    }
                }
            }
        },
        DescribeInstanceEventWindows: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceEventWindowIds: {
                        locationName: "InstanceEventWindowId",
                        type: "list",
                        member: {
                            locationName: "InstanceEventWindowId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceEventWindows: {
                        locationName: "instanceEventWindowSet",
                        type: "list",
                        member: {
                            shape: "S47",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceStatus: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    IncludeAllInstances: {
                        locationName: "includeAllInstances",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceStatuses: {
                        locationName: "instanceStatusSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                OutpostArn: {
                                    locationName: "outpostArn"
                                },
                                Events: {
                                    locationName: "eventsSet",
                                    type: "list",
                                    member: {
                                        shape: "S19z",
                                        locationName: "item"
                                    }
                                },
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                InstanceState: {
                                    shape: "S1a2",
                                    locationName: "instanceState"
                                },
                                InstanceStatus: {
                                    shape: "S1a4",
                                    locationName: "instanceStatus"
                                },
                                SystemStatus: {
                                    shape: "S1a4",
                                    locationName: "systemStatus"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceTopology: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InstanceIds: {
                        locationName: "InstanceId",
                        type: "list",
                        member: {}
                    },
                    GroupNames: {
                        locationName: "GroupName",
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        locationName: "instanceSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                GroupName: {
                                    locationName: "groupName"
                                },
                                NetworkNodes: {
                                    locationName: "networkNodeSet",
                                    type: "list",
                                    member: {
                                        locationName: "item"
                                    }
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                ZoneId: {
                                    locationName: "zoneId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceTypeOfferings: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    LocationType: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypeOfferings: {
                        locationName: "instanceTypeOfferingSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                LocationType: {
                                    locationName: "locationType"
                                },
                                Location: {
                                    locationName: "location"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstanceTypes: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceTypes: {
                        locationName: "InstanceType",
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypes: {
                        locationName: "instanceTypeSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                CurrentGeneration: {
                                    locationName: "currentGeneration",
                                    type: "boolean"
                                },
                                FreeTierEligible: {
                                    locationName: "freeTierEligible",
                                    type: "boolean"
                                },
                                SupportedUsageClasses: {
                                    locationName: "supportedUsageClasses",
                                    type: "list",
                                    member: {
                                        locationName: "item"
                                    }
                                },
                                SupportedRootDeviceTypes: {
                                    locationName: "supportedRootDeviceTypes",
                                    type: "list",
                                    member: {
                                        locationName: "item"
                                    }
                                },
                                SupportedVirtualizationTypes: {
                                    locationName: "supportedVirtualizationTypes",
                                    type: "list",
                                    member: {
                                        locationName: "item"
                                    }
                                },
                                BareMetal: {
                                    locationName: "bareMetal",
                                    type: "boolean"
                                },
                                Hypervisor: {
                                    locationName: "hypervisor"
                                },
                                ProcessorInfo: {
                                    locationName: "processorInfo",
                                    type: "structure",
                                    members: {
                                        SupportedArchitectures: {
                                            locationName: "supportedArchitectures",
                                            type: "list",
                                            member: {
                                                locationName: "item"
                                            }
                                        },
                                        SustainedClockSpeedInGhz: {
                                            locationName: "sustainedClockSpeedInGhz",
                                            type: "double"
                                        },
                                        SupportedFeatures: {
                                            locationName: "supportedFeatures",
                                            type: "list",
                                            member: {
                                                locationName: "item"
                                            }
                                        },
                                        Manufacturer: {
                                            locationName: "manufacturer"
                                        }
                                    }
                                },
                                VCpuInfo: {
                                    locationName: "vCpuInfo",
                                    type: "structure",
                                    members: {
                                        DefaultVCpus: {
                                            locationName: "defaultVCpus",
                                            type: "integer"
                                        },
                                        DefaultCores: {
                                            locationName: "defaultCores",
                                            type: "integer"
                                        },
                                        DefaultThreadsPerCore: {
                                            locationName: "defaultThreadsPerCore",
                                            type: "integer"
                                        },
                                        ValidCores: {
                                            locationName: "validCores",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "integer"
                                            }
                                        },
                                        ValidThreadsPerCore: {
                                            locationName: "validThreadsPerCore",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                MemoryInfo: {
                                    locationName: "memoryInfo",
                                    type: "structure",
                                    members: {
                                        SizeInMiB: {
                                            locationName: "sizeInMiB",
                                            type: "long"
                                        }
                                    }
                                },
                                InstanceStorageSupported: {
                                    locationName: "instanceStorageSupported",
                                    type: "boolean"
                                },
                                InstanceStorageInfo: {
                                    locationName: "instanceStorageInfo",
                                    type: "structure",
                                    members: {
                                        TotalSizeInGB: {
                                            locationName: "totalSizeInGB",
                                            type: "long"
                                        },
                                        Disks: {
                                            locationName: "disks",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    SizeInGB: {
                                                        locationName: "sizeInGB",
                                                        type: "long"
                                                    },
                                                    Count: {
                                                        locationName: "count",
                                                        type: "integer"
                                                    },
                                                    Type: {
                                                        locationName: "type"
                                                    }
                                                }
                                            }
                                        },
                                        NvmeSupport: {
                                            locationName: "nvmeSupport"
                                        },
                                        EncryptionSupport: {
                                            locationName: "encryptionSupport"
                                        }
                                    }
                                },
                                EbsInfo: {
                                    locationName: "ebsInfo",
                                    type: "structure",
                                    members: {
                                        EbsOptimizedSupport: {
                                            locationName: "ebsOptimizedSupport"
                                        },
                                        EncryptionSupport: {
                                            locationName: "encryptionSupport"
                                        },
                                        EbsOptimizedInfo: {
                                            locationName: "ebsOptimizedInfo",
                                            type: "structure",
                                            members: {
                                                BaselineBandwidthInMbps: {
                                                    locationName: "baselineBandwidthInMbps",
                                                    type: "integer"
                                                },
                                                BaselineThroughputInMBps: {
                                                    locationName: "baselineThroughputInMBps",
                                                    type: "double"
                                                },
                                                BaselineIops: {
                                                    locationName: "baselineIops",
                                                    type: "integer"
                                                },
                                                MaximumBandwidthInMbps: {
                                                    locationName: "maximumBandwidthInMbps",
                                                    type: "integer"
                                                },
                                                MaximumThroughputInMBps: {
                                                    locationName: "maximumThroughputInMBps",
                                                    type: "double"
                                                },
                                                MaximumIops: {
                                                    locationName: "maximumIops",
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        NvmeSupport: {
                                            locationName: "nvmeSupport"
                                        }
                                    }
                                },
                                NetworkInfo: {
                                    locationName: "networkInfo",
                                    type: "structure",
                                    members: {
                                        NetworkPerformance: {
                                            locationName: "networkPerformance"
                                        },
                                        MaximumNetworkInterfaces: {
                                            locationName: "maximumNetworkInterfaces",
                                            type: "integer"
                                        },
                                        MaximumNetworkCards: {
                                            locationName: "maximumNetworkCards",
                                            type: "integer"
                                        },
                                        DefaultNetworkCardIndex: {
                                            locationName: "defaultNetworkCardIndex",
                                            type: "integer"
                                        },
                                        NetworkCards: {
                                            locationName: "networkCards",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    NetworkCardIndex: {
                                                        locationName: "networkCardIndex",
                                                        type: "integer"
                                                    },
                                                    NetworkPerformance: {
                                                        locationName: "networkPerformance"
                                                    },
                                                    MaximumNetworkInterfaces: {
                                                        locationName: "maximumNetworkInterfaces",
                                                        type: "integer"
                                                    },
                                                    BaselineBandwidthInGbps: {
                                                        locationName: "baselineBandwidthInGbps",
                                                        type: "double"
                                                    },
                                                    PeakBandwidthInGbps: {
                                                        locationName: "peakBandwidthInGbps",
                                                        type: "double"
                                                    }
                                                }
                                            }
                                        },
                                        Ipv4AddressesPerInterface: {
                                            locationName: "ipv4AddressesPerInterface",
                                            type: "integer"
                                        },
                                        Ipv6AddressesPerInterface: {
                                            locationName: "ipv6AddressesPerInterface",
                                            type: "integer"
                                        },
                                        Ipv6Supported: {
                                            locationName: "ipv6Supported",
                                            type: "boolean"
                                        },
                                        EnaSupport: {
                                            locationName: "enaSupport"
                                        },
                                        EfaSupported: {
                                            locationName: "efaSupported",
                                            type: "boolean"
                                        },
                                        EfaInfo: {
                                            locationName: "efaInfo",
                                            type: "structure",
                                            members: {
                                                MaximumEfaInterfaces: {
                                                    locationName: "maximumEfaInterfaces",
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        EncryptionInTransitSupported: {
                                            locationName: "encryptionInTransitSupported",
                                            type: "boolean"
                                        },
                                        EnaSrdSupported: {
                                            locationName: "enaSrdSupported",
                                            type: "boolean"
                                        }
                                    }
                                },
                                GpuInfo: {
                                    locationName: "gpuInfo",
                                    type: "structure",
                                    members: {
                                        Gpus: {
                                            locationName: "gpus",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Name: {
                                                        locationName: "name"
                                                    },
                                                    Manufacturer: {
                                                        locationName: "manufacturer"
                                                    },
                                                    Count: {
                                                        locationName: "count",
                                                        type: "integer"
                                                    },
                                                    MemoryInfo: {
                                                        locationName: "memoryInfo",
                                                        type: "structure",
                                                        members: {
                                                            SizeInMiB: {
                                                                locationName: "sizeInMiB",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        TotalGpuMemoryInMiB: {
                                            locationName: "totalGpuMemoryInMiB",
                                            type: "integer"
                                        }
                                    }
                                },
                                FpgaInfo: {
                                    locationName: "fpgaInfo",
                                    type: "structure",
                                    members: {
                                        Fpgas: {
                                            locationName: "fpgas",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Name: {
                                                        locationName: "name"
                                                    },
                                                    Manufacturer: {
                                                        locationName: "manufacturer"
                                                    },
                                                    Count: {
                                                        locationName: "count",
                                                        type: "integer"
                                                    },
                                                    MemoryInfo: {
                                                        locationName: "memoryInfo",
                                                        type: "structure",
                                                        members: {
                                                            SizeInMiB: {
                                                                locationName: "sizeInMiB",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        TotalFpgaMemoryInMiB: {
                                            locationName: "totalFpgaMemoryInMiB",
                                            type: "integer"
                                        }
                                    }
                                },
                                PlacementGroupInfo: {
                                    locationName: "placementGroupInfo",
                                    type: "structure",
                                    members: {
                                        SupportedStrategies: {
                                            locationName: "supportedStrategies",
                                            type: "list",
                                            member: {
                                                locationName: "item"
                                            }
                                        }
                                    }
                                },
                                InferenceAcceleratorInfo: {
                                    locationName: "inferenceAcceleratorInfo",
                                    type: "structure",
                                    members: {
                                        Accelerators: {
                                            locationName: "item",
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Count: {
                                                        locationName: "count",
                                                        type: "integer"
                                                    },
                                                    Name: {
                                                        locationName: "name"
                                                    },
                                                    Manufacturer: {
                                                        locationName: "manufacturer"
                                                    },
                                                    MemoryInfo: {
                                                        locationName: "memoryInfo",
                                                        type: "structure",
                                                        members: {
                                                            SizeInMiB: {
                                                                locationName: "sizeInMiB",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        TotalInferenceMemoryInMiB: {
                                            locationName: "totalInferenceMemoryInMiB",
                                            type: "integer"
                                        }
                                    }
                                },
                                HibernationSupported: {
                                    locationName: "hibernationSupported",
                                    type: "boolean"
                                },
                                BurstablePerformanceSupported: {
                                    locationName: "burstablePerformanceSupported",
                                    type: "boolean"
                                },
                                DedicatedHostsSupported: {
                                    locationName: "dedicatedHostsSupported",
                                    type: "boolean"
                                },
                                AutoRecoverySupported: {
                                    locationName: "autoRecoverySupported",
                                    type: "boolean"
                                },
                                SupportedBootModes: {
                                    locationName: "supportedBootModes",
                                    type: "list",
                                    member: {
                                        locationName: "item"
                                    }
                                },
                                NitroEnclavesSupport: {
                                    locationName: "nitroEnclavesSupport"
                                },
                                NitroTpmSupport: {
                                    locationName: "nitroTpmSupport"
                                },
                                NitroTpmInfo: {
                                    locationName: "nitroTpmInfo",
                                    type: "structure",
                                    members: {
                                        SupportedVersions: {
                                            locationName: "supportedVersions",
                                            type: "list",
                                            member: {
                                                locationName: "item"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInstances: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Reservations: {
                        locationName: "reservationSet",
                        type: "list",
                        member: {
                            shape: "S1du",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeInternetGateways: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InternetGatewayIds: {
                        locationName: "internetGatewayId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InternetGateways: {
                        locationName: "internetGatewaySet",
                        type: "list",
                        member: {
                            shape: "Sfl",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeIpamByoasn: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Byoasns: {
                        locationName: "byoasnSet",
                        type: "list",
                        member: {
                            shape: "Szb",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeIpamPools: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IpamPoolIds: {
                        shape: "So",
                        locationName: "IpamPoolId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    IpamPools: {
                        locationName: "ipamPoolSet",
                        type: "list",
                        member: {
                            shape: "Sg6",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeIpamResourceDiscoveries: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryIds: {
                        shape: "So",
                        locationName: "IpamResourceDiscoveryId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscoveries: {
                        locationName: "ipamResourceDiscoverySet",
                        type: "list",
                        member: {
                            shape: "Sge",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeIpamResourceDiscoveryAssociations: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryAssociationIds: {
                        shape: "So",
                        locationName: "IpamResourceDiscoveryAssociationId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscoveryAssociations: {
                        locationName: "ipamResourceDiscoveryAssociationSet",
                        type: "list",
                        member: {
                            shape: "S4l",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeIpamScopes: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IpamScopeIds: {
                        shape: "So",
                        locationName: "IpamScopeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    IpamScopes: {
                        locationName: "ipamScopeSet",
                        type: "list",
                        member: {
                            shape: "Sgi",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeIpams: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IpamIds: {
                        shape: "So",
                        locationName: "IpamId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Ipams: {
                        locationName: "ipamSet",
                        type: "list",
                        member: {
                            shape: "Sfr",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeIpv6Pools: {
            input: {
                type: "structure",
                members: {
                    PoolIds: {
                        locationName: "PoolId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipv6Pools: {
                        locationName: "ipv6PoolSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                PoolId: {
                                    locationName: "poolId"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                PoolCidrBlocks: {
                                    locationName: "poolCidrBlockSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Cidr: {
                                                locationName: "poolCidrBlock"
                                            }
                                        }
                                    }
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeKeyPairs: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    KeyNames: {
                        locationName: "KeyName",
                        type: "list",
                        member: {
                            locationName: "KeyName"
                        }
                    },
                    KeyPairIds: {
                        locationName: "KeyPairId",
                        type: "list",
                        member: {
                            locationName: "KeyPairId"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    IncludePublicKey: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPairs: {
                        locationName: "keySet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                KeyPairId: {
                                    locationName: "keyPairId"
                                },
                                KeyFingerprint: {
                                    locationName: "keyFingerprint"
                                },
                                KeyName: {
                                    locationName: "keyName"
                                },
                                KeyType: {
                                    locationName: "keyType"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                PublicKey: {
                                    locationName: "publicKey"
                                },
                                CreateTime: {
                                    locationName: "createTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeLaunchTemplateVersions: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    LaunchTemplateId: {},
                    LaunchTemplateName: {},
                    Versions: {
                        shape: "Sw1",
                        locationName: "LaunchTemplateVersion"
                    },
                    MinVersion: {},
                    MaxVersion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    ResolveAlias: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplateVersions: {
                        locationName: "launchTemplateVersionSet",
                        type: "list",
                        member: {
                            shape: "Sii",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLaunchTemplates: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    LaunchTemplateIds: {
                        locationName: "LaunchTemplateId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    LaunchTemplateNames: {
                        locationName: "LaunchTemplateName",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplates: {
                        locationName: "launchTemplates",
                        type: "list",
                        member: {
                            shape: "Sic",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations: {
            input: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds: {
                        locationName: "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVirtualInterfaceGroupAssociations: {
                        locationName: "localGatewayRouteTableVirtualInterfaceGroupAssociationSet",
                        type: "list",
                        member: {
                            shape: "Sjz",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLocalGatewayRouteTableVpcAssociations: {
            input: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVpcAssociationIds: {
                        locationName: "LocalGatewayRouteTableVpcAssociationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableVpcAssociations: {
                        locationName: "localGatewayRouteTableVpcAssociationSet",
                        type: "list",
                        member: {
                            shape: "Sk3",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLocalGatewayRouteTables: {
            input: {
                type: "structure",
                members: {
                    LocalGatewayRouteTableIds: {
                        locationName: "LocalGatewayRouteTableId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayRouteTables: {
                        locationName: "localGatewayRouteTableSet",
                        type: "list",
                        member: {
                            shape: "Sjv",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLocalGatewayVirtualInterfaceGroups: {
            input: {
                type: "structure",
                members: {
                    LocalGatewayVirtualInterfaceGroupIds: {
                        locationName: "LocalGatewayVirtualInterfaceGroupId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayVirtualInterfaceGroups: {
                        locationName: "localGatewayVirtualInterfaceGroupSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LocalGatewayVirtualInterfaceGroupId: {
                                    locationName: "localGatewayVirtualInterfaceGroupId"
                                },
                                LocalGatewayVirtualInterfaceIds: {
                                    shape: "S1gq",
                                    locationName: "localGatewayVirtualInterfaceIdSet"
                                },
                                LocalGatewayId: {
                                    locationName: "localGatewayId"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLocalGatewayVirtualInterfaces: {
            input: {
                type: "structure",
                members: {
                    LocalGatewayVirtualInterfaceIds: {
                        shape: "S1gq",
                        locationName: "LocalGatewayVirtualInterfaceId"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGatewayVirtualInterfaces: {
                        locationName: "localGatewayVirtualInterfaceSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LocalGatewayVirtualInterfaceId: {
                                    locationName: "localGatewayVirtualInterfaceId"
                                },
                                LocalGatewayId: {
                                    locationName: "localGatewayId"
                                },
                                Vlan: {
                                    locationName: "vlan",
                                    type: "integer"
                                },
                                LocalAddress: {
                                    locationName: "localAddress"
                                },
                                PeerAddress: {
                                    locationName: "peerAddress"
                                },
                                LocalBgpAsn: {
                                    locationName: "localBgpAsn",
                                    type: "integer"
                                },
                                PeerBgpAsn: {
                                    locationName: "peerBgpAsn",
                                    type: "integer"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLocalGateways: {
            input: {
                type: "structure",
                members: {
                    LocalGatewayIds: {
                        locationName: "LocalGatewayId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LocalGateways: {
                        locationName: "localGatewaySet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LocalGatewayId: {
                                    locationName: "localGatewayId"
                                },
                                OutpostArn: {
                                    locationName: "outpostArn"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                State: {
                                    locationName: "state"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeLockedSnapshots: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SnapshotIds: {
                        shape: "S1h3",
                        locationName: "SnapshotId"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshots: {
                        locationName: "snapshotSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                LockState: {
                                    locationName: "lockState"
                                },
                                LockDuration: {
                                    locationName: "lockDuration",
                                    type: "integer"
                                },
                                CoolOffPeriod: {
                                    locationName: "coolOffPeriod",
                                    type: "integer"
                                },
                                CoolOffPeriodExpiresOn: {
                                    locationName: "coolOffPeriodExpiresOn",
                                    type: "timestamp"
                                },
                                LockCreatedOn: {
                                    locationName: "lockCreatedOn",
                                    type: "timestamp"
                                },
                                LockDurationStartTime: {
                                    locationName: "lockDurationStartTime",
                                    type: "timestamp"
                                },
                                LockExpiresOn: {
                                    locationName: "lockExpiresOn",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeManagedPrefixLists: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PrefixListIds: {
                        shape: "So",
                        locationName: "PrefixListId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PrefixLists: {
                        locationName: "prefixListSet",
                        type: "list",
                        member: {
                            shape: "Sk9",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeMovingAddresses: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PublicIps: {
                        shape: "So",
                        locationName: "publicIp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MovingAddressStatuses: {
                        locationName: "movingAddressStatusSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                MoveStatus: {
                                    locationName: "moveStatus"
                                },
                                PublicIp: {
                                    locationName: "publicIp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNatGateways: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filter: {
                        shape: "S10d"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NatGatewayIds: {
                        locationName: "NatGatewayId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NatGateways: {
                        locationName: "natGatewaySet",
                        type: "list",
                        member: {
                            shape: "Ske",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkAcls: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkAclIds: {
                        locationName: "NetworkAclId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkAcls: {
                        locationName: "networkAclSet",
                        type: "list",
                        member: {
                            shape: "Skj",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkInsightsAccessScopeAnalyses: {
            input: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeAnalysisIds: {
                        locationName: "NetworkInsightsAccessScopeAnalysisId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NetworkInsightsAccessScopeId: {},
                    AnalysisStartTimeBegin: {
                        type: "timestamp"
                    },
                    AnalysisStartTimeEnd: {
                        type: "timestamp"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeAnalyses: {
                        locationName: "networkInsightsAccessScopeAnalysisSet",
                        type: "list",
                        member: {
                            shape: "S1hz",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkInsightsAccessScopes: {
            input: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeIds: {
                        locationName: "NetworkInsightsAccessScopeId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopes: {
                        locationName: "networkInsightsAccessScopeSet",
                        type: "list",
                        member: {
                            shape: "Sl4",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkInsightsAnalyses: {
            input: {
                type: "structure",
                members: {
                    NetworkInsightsAnalysisIds: {
                        locationName: "NetworkInsightsAnalysisId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NetworkInsightsPathId: {},
                    AnalysisStartTime: {
                        type: "timestamp"
                    },
                    AnalysisEndTime: {
                        type: "timestamp"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAnalyses: {
                        locationName: "networkInsightsAnalysisSet",
                        type: "list",
                        member: {
                            shape: "S1ia",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkInsightsPaths: {
            input: {
                type: "structure",
                members: {
                    NetworkInsightsPathIds: {
                        locationName: "NetworkInsightsPathId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsPaths: {
                        locationName: "networkInsightsPathSet",
                        type: "list",
                        member: {
                            shape: "Sll",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkInterfaceAttribute: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    Attribute: {
                        locationName: "attribute"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attachment: {
                        shape: "Slu",
                        locationName: "attachment"
                    },
                    Description: {
                        shape: "Sc1",
                        locationName: "description"
                    },
                    Groups: {
                        shape: "Sly",
                        locationName: "groupSet"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    SourceDestCheck: {
                        shape: "S19c",
                        locationName: "sourceDestCheck"
                    }
                }
            }
        },
        DescribeNetworkInterfacePermissions: {
            input: {
                type: "structure",
                members: {
                    NetworkInterfacePermissionIds: {
                        locationName: "NetworkInterfacePermissionId",
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInterfacePermissions: {
                        locationName: "networkInterfacePermissions",
                        type: "list",
                        member: {
                            shape: "Smb",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeNetworkInterfaces: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkInterfaceIds: {
                        locationName: "NetworkInterfaceId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInterfaces: {
                        locationName: "networkInterfaceSet",
                        type: "list",
                        member: {
                            shape: "Sls",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribePlacementGroups: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    GroupNames: {
                        locationName: "groupName",
                        type: "list",
                        member: {}
                    },
                    GroupIds: {
                        locationName: "GroupId",
                        type: "list",
                        member: {
                            locationName: "GroupId"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PlacementGroups: {
                        locationName: "placementGroupSet",
                        type: "list",
                        member: {
                            shape: "Smi",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribePrefixLists: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    PrefixListIds: {
                        locationName: "PrefixListId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    PrefixLists: {
                        locationName: "prefixListSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Cidrs: {
                                    shape: "So",
                                    locationName: "cidrSet"
                                },
                                PrefixListId: {
                                    locationName: "prefixListId"
                                },
                                PrefixListName: {
                                    locationName: "prefixListName"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribePrincipalIdFormat: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Resources: {
                        locationName: "Resource",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Principals: {
                        locationName: "principalSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                Statuses: {
                                    shape: "S10u",
                                    locationName: "statusSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribePublicIpv4Pools: {
            input: {
                type: "structure",
                members: {
                    PoolIds: {
                        locationName: "PoolId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicIpv4Pools: {
                        locationName: "publicIpv4PoolSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                PoolId: {
                                    locationName: "poolId"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                PoolAddressRanges: {
                                    locationName: "poolAddressRangeSet",
                                    type: "list",
                                    member: {
                                        shape: "S1kd",
                                        locationName: "item"
                                    }
                                },
                                TotalAddressCount: {
                                    locationName: "totalAddressCount",
                                    type: "integer"
                                },
                                TotalAvailableAddressCount: {
                                    locationName: "totalAvailableAddressCount",
                                    type: "integer"
                                },
                                NetworkBorderGroup: {
                                    locationName: "networkBorderGroup"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeRegions: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    RegionNames: {
                        locationName: "RegionName",
                        type: "list",
                        member: {
                            locationName: "RegionName"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    AllRegions: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Regions: {
                        locationName: "regionInfo",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Endpoint: {
                                    locationName: "regionEndpoint"
                                },
                                RegionName: {
                                    locationName: "regionName"
                                },
                                OptInStatus: {
                                    locationName: "optInStatus"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReplaceRootVolumeTasks: {
            input: {
                type: "structure",
                members: {
                    ReplaceRootVolumeTaskIds: {
                        locationName: "ReplaceRootVolumeTaskId",
                        type: "list",
                        member: {
                            locationName: "ReplaceRootVolumeTaskId"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReplaceRootVolumeTasks: {
                        locationName: "replaceRootVolumeTaskSet",
                        type: "list",
                        member: {
                            shape: "Smo",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeReservedInstances: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    OfferingClass: {},
                    ReservedInstancesIds: {
                        shape: "S1kq",
                        locationName: "ReservedInstancesId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstances: {
                        locationName: "reservedInstancesSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                Duration: {
                                    locationName: "duration",
                                    type: "long"
                                },
                                End: {
                                    locationName: "end",
                                    type: "timestamp"
                                },
                                FixedPrice: {
                                    locationName: "fixedPrice",
                                    type: "float"
                                },
                                InstanceCount: {
                                    locationName: "instanceCount",
                                    type: "integer"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                ProductDescription: {
                                    locationName: "productDescription"
                                },
                                ReservedInstancesId: {
                                    locationName: "reservedInstancesId"
                                },
                                Start: {
                                    locationName: "start",
                                    type: "timestamp"
                                },
                                State: {
                                    locationName: "state"
                                },
                                UsagePrice: {
                                    locationName: "usagePrice",
                                    type: "float"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                InstanceTenancy: {
                                    locationName: "instanceTenancy"
                                },
                                OfferingClass: {
                                    locationName: "offeringClass"
                                },
                                OfferingType: {
                                    locationName: "offeringType"
                                },
                                RecurringCharges: {
                                    shape: "S1ky",
                                    locationName: "recurringCharges"
                                },
                                Scope: {
                                    locationName: "scope"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReservedInstancesListings: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    ReservedInstancesId: {
                        locationName: "reservedInstancesId"
                    },
                    ReservedInstancesListingId: {
                        locationName: "reservedInstancesListingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstancesListings: {
                        shape: "S8k",
                        locationName: "reservedInstancesListingsSet"
                    }
                }
            }
        },
        DescribeReservedInstancesModifications: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    ReservedInstancesModificationIds: {
                        locationName: "ReservedInstancesModificationId",
                        type: "list",
                        member: {
                            locationName: "ReservedInstancesModificationId"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ReservedInstancesModifications: {
                        locationName: "reservedInstancesModificationsSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClientToken: {
                                    locationName: "clientToken"
                                },
                                CreateDate: {
                                    locationName: "createDate",
                                    type: "timestamp"
                                },
                                EffectiveDate: {
                                    locationName: "effectiveDate",
                                    type: "timestamp"
                                },
                                ModificationResults: {
                                    locationName: "modificationResultSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            ReservedInstancesId: {
                                                locationName: "reservedInstancesId"
                                            },
                                            TargetConfiguration: {
                                                shape: "S1lc",
                                                locationName: "targetConfiguration"
                                            }
                                        }
                                    }
                                },
                                ReservedInstancesIds: {
                                    locationName: "reservedInstancesSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            ReservedInstancesId: {
                                                locationName: "reservedInstancesId"
                                            }
                                        }
                                    }
                                },
                                ReservedInstancesModificationId: {
                                    locationName: "reservedInstancesModificationId"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                StatusMessage: {
                                    locationName: "statusMessage"
                                },
                                UpdateDate: {
                                    locationName: "updateDate",
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeReservedInstancesOfferings: {
            input: {
                type: "structure",
                members: {
                    AvailabilityZone: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    IncludeMarketplace: {
                        type: "boolean"
                    },
                    InstanceType: {},
                    MaxDuration: {
                        type: "long"
                    },
                    MaxInstanceCount: {
                        type: "integer"
                    },
                    MinDuration: {
                        type: "long"
                    },
                    OfferingClass: {},
                    ProductDescription: {},
                    ReservedInstancesOfferingIds: {
                        locationName: "ReservedInstancesOfferingId",
                        type: "list",
                        member: {}
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceTenancy: {
                        locationName: "instanceTenancy"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstancesOfferings: {
                        locationName: "reservedInstancesOfferingsSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                Duration: {
                                    locationName: "duration",
                                    type: "long"
                                },
                                FixedPrice: {
                                    locationName: "fixedPrice",
                                    type: "float"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                ProductDescription: {
                                    locationName: "productDescription"
                                },
                                ReservedInstancesOfferingId: {
                                    locationName: "reservedInstancesOfferingId"
                                },
                                UsagePrice: {
                                    locationName: "usagePrice",
                                    type: "float"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                InstanceTenancy: {
                                    locationName: "instanceTenancy"
                                },
                                Marketplace: {
                                    locationName: "marketplace",
                                    type: "boolean"
                                },
                                OfferingClass: {
                                    locationName: "offeringClass"
                                },
                                OfferingType: {
                                    locationName: "offeringType"
                                },
                                PricingDetails: {
                                    locationName: "pricingDetailsSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Count: {
                                                locationName: "count",
                                                type: "integer"
                                            },
                                            Price: {
                                                locationName: "price",
                                                type: "double"
                                            }
                                        }
                                    }
                                },
                                RecurringCharges: {
                                    shape: "S1ky",
                                    locationName: "recurringCharges"
                                },
                                Scope: {
                                    locationName: "scope"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeRouteTables: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    RouteTableIds: {
                        locationName: "RouteTableId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RouteTables: {
                        locationName: "routeTableSet",
                        type: "list",
                        member: {
                            shape: "Sn4",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeScheduledInstanceAvailability: {
            input: {
                type: "structure",
                required: [ "FirstSlotStartTimeRange", "Recurrence" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    FirstSlotStartTimeRange: {
                        type: "structure",
                        required: [ "EarliestTime", "LatestTime" ],
                        members: {
                            EarliestTime: {
                                type: "timestamp"
                            },
                            LatestTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    MaxSlotDurationInHours: {
                        type: "integer"
                    },
                    MinSlotDurationInHours: {
                        type: "integer"
                    },
                    NextToken: {},
                    Recurrence: {
                        type: "structure",
                        members: {
                            Frequency: {},
                            Interval: {
                                type: "integer"
                            },
                            OccurrenceDays: {
                                locationName: "OccurrenceDay",
                                type: "list",
                                member: {
                                    locationName: "OccurenceDay",
                                    type: "integer"
                                }
                            },
                            OccurrenceRelativeToEnd: {
                                type: "boolean"
                            },
                            OccurrenceUnit: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ScheduledInstanceAvailabilitySet: {
                        locationName: "scheduledInstanceAvailabilitySet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                AvailableInstanceCount: {
                                    locationName: "availableInstanceCount",
                                    type: "integer"
                                },
                                FirstSlotStartTime: {
                                    locationName: "firstSlotStartTime",
                                    type: "timestamp"
                                },
                                HourlyPrice: {
                                    locationName: "hourlyPrice"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                MaxTermDurationInDays: {
                                    locationName: "maxTermDurationInDays",
                                    type: "integer"
                                },
                                MinTermDurationInDays: {
                                    locationName: "minTermDurationInDays",
                                    type: "integer"
                                },
                                NetworkPlatform: {
                                    locationName: "networkPlatform"
                                },
                                Platform: {
                                    locationName: "platform"
                                },
                                PurchaseToken: {
                                    locationName: "purchaseToken"
                                },
                                Recurrence: {
                                    shape: "S1lz",
                                    locationName: "recurrence"
                                },
                                SlotDurationInHours: {
                                    locationName: "slotDurationInHours",
                                    type: "integer"
                                },
                                TotalScheduledInstanceHours: {
                                    locationName: "totalScheduledInstanceHours",
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeScheduledInstances: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ScheduledInstanceIds: {
                        locationName: "ScheduledInstanceId",
                        type: "list",
                        member: {
                            locationName: "ScheduledInstanceId"
                        }
                    },
                    SlotStartTimeRange: {
                        type: "structure",
                        members: {
                            EarliestTime: {
                                type: "timestamp"
                            },
                            LatestTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ScheduledInstanceSet: {
                        locationName: "scheduledInstanceSet",
                        type: "list",
                        member: {
                            shape: "S1m7",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeSecurityGroupReferences: {
            input: {
                type: "structure",
                required: [ "GroupId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    GroupId: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroupReferenceSet: {
                        locationName: "securityGroupReferenceSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                GroupId: {
                                    locationName: "groupId"
                                },
                                ReferencingVpcId: {
                                    locationName: "referencingVpcId"
                                },
                                VpcPeeringConnectionId: {
                                    locationName: "vpcPeeringConnectionId"
                                },
                                TransitGatewayId: {
                                    locationName: "transitGatewayId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSecurityGroupRules: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    SecurityGroupRuleIds: {
                        shape: "S1me",
                        locationName: "SecurityGroupRuleId"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroupRules: {
                        shape: "S78",
                        locationName: "securityGroupRuleSet"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeSecurityGroups: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    GroupIds: {
                        shape: "S5v",
                        locationName: "GroupId"
                    },
                    GroupNames: {
                        shape: "S1mi",
                        locationName: "GroupName"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroups: {
                        locationName: "securityGroupInfo",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "groupDescription"
                                },
                                GroupName: {
                                    locationName: "groupName"
                                },
                                IpPermissions: {
                                    shape: "S6x",
                                    locationName: "ipPermissions"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                GroupId: {
                                    locationName: "groupId"
                                },
                                IpPermissionsEgress: {
                                    shape: "S6x",
                                    locationName: "ipPermissionsEgress"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "SnapshotId" ],
                members: {
                    Attribute: {},
                    SnapshotId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreateVolumePermissions: {
                        shape: "S1mq",
                        locationName: "createVolumePermission"
                    },
                    ProductCodes: {
                        shape: "S16n",
                        locationName: "productCodes"
                    },
                    SnapshotId: {
                        locationName: "snapshotId"
                    }
                }
            }
        },
        DescribeSnapshotTierStatus: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotTierStatuses: {
                        locationName: "snapshotTierStatusSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                VolumeId: {
                                    locationName: "volumeId"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                StorageTier: {
                                    locationName: "storageTier"
                                },
                                LastTieringStartTime: {
                                    locationName: "lastTieringStartTime",
                                    type: "timestamp"
                                },
                                LastTieringProgress: {
                                    locationName: "lastTieringProgress",
                                    type: "integer"
                                },
                                LastTieringOperationStatus: {
                                    locationName: "lastTieringOperationStatus"
                                },
                                LastTieringOperationStatusDetail: {
                                    locationName: "lastTieringOperationStatusDetail"
                                },
                                ArchivalCompleteTime: {
                                    locationName: "archivalCompleteTime",
                                    type: "timestamp"
                                },
                                RestoreExpiryTime: {
                                    locationName: "restoreExpiryTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeSnapshots: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    OwnerIds: {
                        shape: "S16s",
                        locationName: "Owner"
                    },
                    RestorableByUserIds: {
                        locationName: "RestorableBy",
                        type: "list",
                        member: {}
                    },
                    SnapshotIds: {
                        shape: "S1h3",
                        locationName: "SnapshotId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshots: {
                        locationName: "snapshotSet",
                        type: "list",
                        member: {
                            shape: "Sng",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeSpotDatafeedSubscription: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpotDatafeedSubscription: {
                        shape: "Snu",
                        locationName: "spotDatafeedSubscription"
                    }
                }
            }
        },
        DescribeSpotFleetInstances: {
            input: {
                type: "structure",
                required: [ "SpotFleetRequestId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotFleetRequestId: {
                        locationName: "spotFleetRequestId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActiveInstances: {
                        shape: "S15q",
                        locationName: "activeInstanceSet"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotFleetRequestId: {
                        locationName: "spotFleetRequestId"
                    }
                }
            }
        },
        DescribeSpotFleetRequestHistory: {
            input: {
                type: "structure",
                required: [ "SpotFleetRequestId", "StartTime" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    EventType: {
                        locationName: "eventType"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotFleetRequestId: {
                        locationName: "spotFleetRequestId"
                    },
                    StartTime: {
                        locationName: "startTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HistoryRecords: {
                        locationName: "historyRecordSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                EventInformation: {
                                    shape: "S15n",
                                    locationName: "eventInformation"
                                },
                                EventType: {
                                    locationName: "eventType"
                                },
                                Timestamp: {
                                    locationName: "timestamp",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    LastEvaluatedTime: {
                        locationName: "lastEvaluatedTime",
                        type: "timestamp"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotFleetRequestId: {
                        locationName: "spotFleetRequestId"
                    },
                    StartTime: {
                        locationName: "startTime",
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeSpotFleetRequests: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotFleetRequestIds: {
                        shape: "S8w",
                        locationName: "spotFleetRequestId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotFleetRequestConfigs: {
                        locationName: "spotFleetRequestConfigSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ActivityStatus: {
                                    locationName: "activityStatus"
                                },
                                CreateTime: {
                                    locationName: "createTime",
                                    type: "timestamp"
                                },
                                SpotFleetRequestConfig: {
                                    shape: "S1ni",
                                    locationName: "spotFleetRequestConfig"
                                },
                                SpotFleetRequestId: {
                                    locationName: "spotFleetRequestId"
                                },
                                SpotFleetRequestState: {
                                    locationName: "spotFleetRequestState"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSpotInstanceRequests: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    SpotInstanceRequestIds: {
                        shape: "S97",
                        locationName: "SpotInstanceRequestId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpotInstanceRequests: {
                        shape: "S1oa",
                        locationName: "spotInstanceRequestSet"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeSpotPriceHistory: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    EndTime: {
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    InstanceTypes: {
                        locationName: "InstanceType",
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ProductDescriptions: {
                        locationName: "ProductDescription",
                        type: "list",
                        member: {}
                    },
                    StartTime: {
                        locationName: "startTime",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SpotPriceHistory: {
                        locationName: "spotPriceHistorySet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                ProductDescription: {
                                    locationName: "productDescription"
                                },
                                SpotPrice: {
                                    locationName: "spotPrice"
                                },
                                Timestamp: {
                                    locationName: "timestamp",
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeStaleSecurityGroups: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    StaleSecurityGroupSet: {
                        locationName: "staleSecurityGroupSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "description"
                                },
                                GroupId: {
                                    locationName: "groupId"
                                },
                                GroupName: {
                                    locationName: "groupName"
                                },
                                StaleIpPermissions: {
                                    shape: "S1os",
                                    locationName: "staleIpPermissions"
                                },
                                StaleIpPermissionsEgress: {
                                    shape: "S1os",
                                    locationName: "staleIpPermissionsEgress"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeStoreImageTasks: {
            input: {
                type: "structure",
                members: {
                    ImageIds: {
                        locationName: "ImageId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StoreImageTaskResults: {
                        locationName: "storeImageTaskResultSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AmiId: {
                                    locationName: "amiId"
                                },
                                TaskStartTime: {
                                    locationName: "taskStartTime",
                                    type: "timestamp"
                                },
                                Bucket: {
                                    locationName: "bucket"
                                },
                                S3objectKey: {
                                    locationName: "s3objectKey"
                                },
                                ProgressPercentage: {
                                    locationName: "progressPercentage",
                                    type: "integer"
                                },
                                StoreTaskState: {
                                    locationName: "storeTaskState"
                                },
                                StoreTaskFailureReason: {
                                    locationName: "storeTaskFailureReason"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeSubnets: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    SubnetIds: {
                        locationName: "SubnetId",
                        type: "list",
                        member: {
                            locationName: "SubnetId"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Subnets: {
                        locationName: "subnetSet",
                        type: "list",
                        member: {
                            shape: "Sbg",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Tags: {
                        locationName: "tagSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Key: {
                                    locationName: "key"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                Value: {
                                    locationName: "value"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTrafficMirrorFilters: {
            input: {
                type: "structure",
                members: {
                    TrafficMirrorFilterIds: {
                        locationName: "TrafficMirrorFilterId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilters: {
                        locationName: "trafficMirrorFilterSet",
                        type: "list",
                        member: {
                            shape: "Sod",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTrafficMirrorSessions: {
            input: {
                type: "structure",
                members: {
                    TrafficMirrorSessionIds: {
                        locationName: "TrafficMirrorSessionId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorSessions: {
                        locationName: "trafficMirrorSessionSet",
                        type: "list",
                        member: {
                            shape: "Sos",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTrafficMirrorTargets: {
            input: {
                type: "structure",
                members: {
                    TrafficMirrorTargetIds: {
                        locationName: "TrafficMirrorTargetId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorTargets: {
                        locationName: "trafficMirrorTargetSet",
                        type: "list",
                        member: {
                            shape: "Sov",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayAttachments: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayAttachmentIds: {
                        shape: "S1pq"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayAttachments: {
                        locationName: "transitGatewayAttachments",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                TransitGatewayAttachmentId: {
                                    locationName: "transitGatewayAttachmentId"
                                },
                                TransitGatewayId: {
                                    locationName: "transitGatewayId"
                                },
                                TransitGatewayOwnerId: {
                                    locationName: "transitGatewayOwnerId"
                                },
                                ResourceOwnerId: {
                                    locationName: "resourceOwnerId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                State: {
                                    locationName: "state"
                                },
                                Association: {
                                    locationName: "association",
                                    type: "structure",
                                    members: {
                                        TransitGatewayRouteTableId: {
                                            locationName: "transitGatewayRouteTableId"
                                        },
                                        State: {
                                            locationName: "state"
                                        }
                                    }
                                },
                                CreationTime: {
                                    locationName: "creationTime",
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayConnectPeers: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeerIds: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnectPeers: {
                        locationName: "transitGatewayConnectPeerSet",
                        type: "list",
                        member: {
                            shape: "Spj",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayConnects: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayAttachmentIds: {
                        shape: "S1pq"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayConnects: {
                        locationName: "transitGatewayConnectSet",
                        type: "list",
                        member: {
                            shape: "Spd",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayMulticastDomains: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomainIds: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomains: {
                        locationName: "transitGatewayMulticastDomains",
                        type: "list",
                        member: {
                            shape: "Spw",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayPeeringAttachments: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayAttachmentIds: {
                        shape: "S1pq"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeeringAttachments: {
                        locationName: "transitGatewayPeeringAttachments",
                        type: "list",
                        member: {
                            shape: "Sx",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayPolicyTables: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayPolicyTableIds: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPolicyTables: {
                        locationName: "transitGatewayPolicyTables",
                        type: "list",
                        member: {
                            shape: "Sq5",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayRouteTableAnnouncements: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableAnnouncementIds: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableAnnouncements: {
                        locationName: "transitGatewayRouteTableAnnouncements",
                        type: "list",
                        member: {
                            shape: "Sqq",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayRouteTables: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayRouteTableIds: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTables: {
                        locationName: "transitGatewayRouteTables",
                        type: "list",
                        member: {
                            shape: "Sqm",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGatewayVpcAttachments: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayAttachmentIds: {
                        shape: "S1pq"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayVpcAttachments: {
                        locationName: "transitGatewayVpcAttachments",
                        type: "list",
                        member: {
                            shape: "S16",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTransitGateways: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayIds: {
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGateways: {
                        locationName: "transitGatewaySet",
                        type: "list",
                        member: {
                            shape: "Sp6",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeTrunkInterfaceAssociations: {
            input: {
                type: "structure",
                members: {
                    AssociationIds: {
                        locationName: "AssociationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InterfaceAssociations: {
                        locationName: "interfaceAssociationSet",
                        type: "list",
                        member: {
                            shape: "S5k",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVerifiedAccessEndpoints: {
            input: {
                type: "structure",
                members: {
                    VerifiedAccessEndpointIds: {
                        locationName: "VerifiedAccessEndpointId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    VerifiedAccessInstanceId: {},
                    VerifiedAccessGroupId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessEndpoints: {
                        locationName: "verifiedAccessEndpointSet",
                        type: "list",
                        member: {
                            shape: "Sra",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVerifiedAccessGroups: {
            input: {
                type: "structure",
                members: {
                    VerifiedAccessGroupIds: {
                        locationName: "VerifiedAccessGroupId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    VerifiedAccessInstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessGroups: {
                        locationName: "verifiedAccessGroupSet",
                        type: "list",
                        member: {
                            shape: "Sri",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVerifiedAccessInstanceLoggingConfigurations: {
            input: {
                type: "structure",
                members: {
                    VerifiedAccessInstanceIds: {
                        shape: "S1r9",
                        locationName: "VerifiedAccessInstanceId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        locationName: "loggingConfigurationSet",
                        type: "list",
                        member: {
                            shape: "S1rd",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVerifiedAccessInstances: {
            input: {
                type: "structure",
                members: {
                    VerifiedAccessInstanceIds: {
                        shape: "S1r9",
                        locationName: "VerifiedAccessInstanceId"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessInstances: {
                        locationName: "verifiedAccessInstanceSet",
                        type: "list",
                        member: {
                            shape: "S6g",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVerifiedAccessTrustProviders: {
            input: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProviderIds: {
                        locationName: "VerifiedAccessTrustProviderId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProviders: {
                        locationName: "verifiedAccessTrustProviderSet",
                        type: "list",
                        member: {
                            shape: "S67",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVolumeAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "VolumeId" ],
                members: {
                    Attribute: {},
                    VolumeId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AutoEnableIO: {
                        shape: "S19c",
                        locationName: "autoEnableIO"
                    },
                    ProductCodes: {
                        shape: "S16n",
                        locationName: "productCodes"
                    },
                    VolumeId: {
                        locationName: "volumeId"
                    }
                }
            }
        },
        DescribeVolumeStatus: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    VolumeIds: {
                        shape: "Snn",
                        locationName: "VolumeId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    VolumeStatuses: {
                        locationName: "volumeStatusSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Actions: {
                                    locationName: "actionsSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Code: {
                                                locationName: "code"
                                            },
                                            Description: {
                                                locationName: "description"
                                            },
                                            EventId: {
                                                locationName: "eventId"
                                            },
                                            EventType: {
                                                locationName: "eventType"
                                            }
                                        }
                                    }
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                OutpostArn: {
                                    locationName: "outpostArn"
                                },
                                Events: {
                                    locationName: "eventsSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Description: {
                                                locationName: "description"
                                            },
                                            EventId: {
                                                locationName: "eventId"
                                            },
                                            EventType: {
                                                locationName: "eventType"
                                            },
                                            NotAfter: {
                                                locationName: "notAfter",
                                                type: "timestamp"
                                            },
                                            NotBefore: {
                                                locationName: "notBefore",
                                                type: "timestamp"
                                            },
                                            InstanceId: {
                                                locationName: "instanceId"
                                            }
                                        }
                                    }
                                },
                                VolumeId: {
                                    locationName: "volumeId"
                                },
                                VolumeStatus: {
                                    locationName: "volumeStatus",
                                    type: "structure",
                                    members: {
                                        Details: {
                                            locationName: "details",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Name: {
                                                        locationName: "name"
                                                    },
                                                    Status: {
                                                        locationName: "status"
                                                    }
                                                }
                                            }
                                        },
                                        Status: {
                                            locationName: "status"
                                        }
                                    }
                                },
                                AttachmentStatuses: {
                                    locationName: "attachmentStatuses",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            IoPerformance: {
                                                locationName: "ioPerformance"
                                            },
                                            InstanceId: {
                                                locationName: "instanceId"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVolumes: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    VolumeIds: {
                        shape: "Snn",
                        locationName: "VolumeId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Volumes: {
                        locationName: "volumeSet",
                        type: "list",
                        member: {
                            shape: "Srq",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVolumesModifications: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    VolumeIds: {
                        shape: "Snn",
                        locationName: "VolumeId"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumesModifications: {
                        locationName: "volumeModificationSet",
                        type: "list",
                        member: {
                            shape: "S1sh",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "VpcId" ],
                members: {
                    Attribute: {},
                    VpcId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcId: {
                        locationName: "vpcId"
                    },
                    EnableDnsHostnames: {
                        shape: "S19c",
                        locationName: "enableDnsHostnames"
                    },
                    EnableDnsSupport: {
                        shape: "S19c",
                        locationName: "enableDnsSupport"
                    },
                    EnableNetworkAddressUsageMetrics: {
                        shape: "S19c",
                        locationName: "enableNetworkAddressUsageMetrics"
                    }
                }
            }
        },
        DescribeVpcClassicLink: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcIds: {
                        shape: "S1sn",
                        locationName: "VpcId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Vpcs: {
                        locationName: "vpcSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClassicLinkEnabled: {
                                    locationName: "classicLinkEnabled",
                                    type: "boolean"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVpcClassicLinkDnsSupport: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    VpcIds: {
                        shape: "S1sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Vpcs: {
                        locationName: "vpcs",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ClassicLinkDnsSupported: {
                                    locationName: "classicLinkDnsSupported",
                                    type: "boolean"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeVpcEndpointConnectionNotifications: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ConnectionNotificationId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionNotificationSet: {
                        locationName: "connectionNotificationSet",
                        type: "list",
                        member: {
                            shape: "Ssg",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcEndpointConnections: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcEndpointConnections: {
                        locationName: "vpcEndpointConnectionSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ServiceId: {
                                    locationName: "serviceId"
                                },
                                VpcEndpointId: {
                                    locationName: "vpcEndpointId"
                                },
                                VpcEndpointOwner: {
                                    locationName: "vpcEndpointOwner"
                                },
                                VpcEndpointState: {
                                    locationName: "vpcEndpointState"
                                },
                                CreationTimestamp: {
                                    locationName: "creationTimestamp",
                                    type: "timestamp"
                                },
                                DnsEntries: {
                                    shape: "Ssb",
                                    locationName: "dnsEntrySet"
                                },
                                NetworkLoadBalancerArns: {
                                    shape: "So",
                                    locationName: "networkLoadBalancerArnSet"
                                },
                                GatewayLoadBalancerArns: {
                                    shape: "So",
                                    locationName: "gatewayLoadBalancerArnSet"
                                },
                                IpAddressType: {
                                    locationName: "ipAddressType"
                                },
                                VpcEndpointConnectionId: {
                                    locationName: "vpcEndpointConnectionId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcEndpointServiceConfigurations: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceIds: {
                        shape: "Syy",
                        locationName: "ServiceId"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceConfigurations: {
                        locationName: "serviceConfigurationSet",
                        type: "list",
                        member: {
                            shape: "Ssl",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcEndpointServicePermissions: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AllowedPrincipals: {
                        locationName: "allowedPrincipals",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                PrincipalType: {
                                    locationName: "principalType"
                                },
                                Principal: {
                                    locationName: "principal"
                                },
                                ServicePermissionId: {
                                    locationName: "servicePermissionId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                ServiceId: {
                                    locationName: "serviceId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcEndpointServices: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceNames: {
                        shape: "So",
                        locationName: "ServiceName"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceNames: {
                        shape: "So",
                        locationName: "serviceNameSet"
                    },
                    ServiceDetails: {
                        locationName: "serviceDetailSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ServiceName: {
                                    locationName: "serviceName"
                                },
                                ServiceId: {
                                    locationName: "serviceId"
                                },
                                ServiceType: {
                                    shape: "Ssm",
                                    locationName: "serviceType"
                                },
                                AvailabilityZones: {
                                    shape: "So",
                                    locationName: "availabilityZoneSet"
                                },
                                Owner: {
                                    locationName: "owner"
                                },
                                BaseEndpointDnsNames: {
                                    shape: "So",
                                    locationName: "baseEndpointDnsNameSet"
                                },
                                PrivateDnsName: {
                                    locationName: "privateDnsName"
                                },
                                PrivateDnsNames: {
                                    locationName: "privateDnsNameSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            PrivateDnsName: {
                                                locationName: "privateDnsName"
                                            }
                                        }
                                    }
                                },
                                VpcEndpointPolicySupported: {
                                    locationName: "vpcEndpointPolicySupported",
                                    type: "boolean"
                                },
                                AcceptanceRequired: {
                                    locationName: "acceptanceRequired",
                                    type: "boolean"
                                },
                                ManagesVpcEndpoints: {
                                    locationName: "managesVpcEndpoints",
                                    type: "boolean"
                                },
                                PayerResponsibility: {
                                    locationName: "payerResponsibility"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                PrivateDnsNameVerificationState: {
                                    locationName: "privateDnsNameVerificationState"
                                },
                                SupportedIpAddressTypes: {
                                    shape: "Ssq",
                                    locationName: "supportedIpAddressTypeSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcEndpoints: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    VpcEndpointIds: {
                        shape: "S1e",
                        locationName: "VpcEndpointId"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcEndpoints: {
                        locationName: "vpcEndpointSet",
                        type: "list",
                        member: {
                            shape: "Ss6",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcPeeringConnections: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcPeeringConnectionIds: {
                        locationName: "VpcPeeringConnectionId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpcPeeringConnections: {
                        locationName: "vpcPeeringConnectionSet",
                        type: "list",
                        member: {
                            shape: "S1n",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpcs: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    VpcIds: {
                        locationName: "VpcId",
                        type: "list",
                        member: {
                            locationName: "VpcId"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Vpcs: {
                        locationName: "vpcSet",
                        type: "list",
                        member: {
                            shape: "Sbo",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeVpnConnections: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    VpnConnectionIds: {
                        locationName: "VpnConnectionId",
                        type: "list",
                        member: {
                            locationName: "VpnConnectionId"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnections: {
                        locationName: "vpnConnectionSet",
                        type: "list",
                        member: {
                            shape: "Stm",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DescribeVpnGateways: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    VpnGatewayIds: {
                        locationName: "VpnGatewayId",
                        type: "list",
                        member: {
                            locationName: "VpnGatewayId"
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnGateways: {
                        locationName: "vpnGatewaySet",
                        type: "list",
                        member: {
                            shape: "Suj",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        DetachClassicLinkVpc: {
            input: {
                type: "structure",
                required: [ "InstanceId", "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DetachInternetGateway: {
            input: {
                type: "structure",
                required: [ "InternetGatewayId", "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InternetGatewayId: {
                        locationName: "internetGatewayId"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            }
        },
        DetachNetworkInterface: {
            input: {
                type: "structure",
                required: [ "AttachmentId" ],
                members: {
                    AttachmentId: {
                        locationName: "attachmentId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Force: {
                        locationName: "force",
                        type: "boolean"
                    }
                }
            }
        },
        DetachVerifiedAccessTrustProvider: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessInstanceId", "VerifiedAccessTrustProviderId" ],
                members: {
                    VerifiedAccessInstanceId: {},
                    VerifiedAccessTrustProviderId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProvider: {
                        shape: "S67",
                        locationName: "verifiedAccessTrustProvider"
                    },
                    VerifiedAccessInstance: {
                        shape: "S6g",
                        locationName: "verifiedAccessInstance"
                    }
                }
            }
        },
        DetachVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    Device: {},
                    Force: {
                        type: "boolean"
                    },
                    InstanceId: {},
                    VolumeId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S6l"
            }
        },
        DetachVpnGateway: {
            input: {
                type: "structure",
                required: [ "VpcId", "VpnGatewayId" ],
                members: {
                    VpcId: {},
                    VpnGatewayId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DisableAddressTransfer: {
            input: {
                type: "structure",
                required: [ "AllocationId" ],
                members: {
                    AllocationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressTransfer: {
                        shape: "Sa",
                        locationName: "addressTransfer"
                    }
                }
            }
        },
        DisableAwsNetworkPerformanceMetricSubscription: {
            input: {
                type: "structure",
                members: {
                    Source: {},
                    Destination: {},
                    Metric: {},
                    Statistic: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Output: {
                        locationName: "output",
                        type: "boolean"
                    }
                }
            }
        },
        DisableEbsEncryptionByDefault: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EbsEncryptionByDefault: {
                        locationName: "ebsEncryptionByDefault",
                        type: "boolean"
                    }
                }
            }
        },
        DisableFastLaunch: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    Force: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {
                        locationName: "imageId"
                    },
                    ResourceType: {
                        locationName: "resourceType"
                    },
                    SnapshotConfiguration: {
                        shape: "S159",
                        locationName: "snapshotConfiguration"
                    },
                    LaunchTemplate: {
                        shape: "S15a",
                        locationName: "launchTemplate"
                    },
                    MaxParallelLaunches: {
                        locationName: "maxParallelLaunches",
                        type: "integer"
                    },
                    OwnerId: {
                        locationName: "ownerId"
                    },
                    State: {
                        locationName: "state"
                    },
                    StateTransitionReason: {
                        locationName: "stateTransitionReason"
                    },
                    StateTransitionTime: {
                        locationName: "stateTransitionTime",
                        type: "timestamp"
                    }
                }
            }
        },
        DisableFastSnapshotRestores: {
            input: {
                type: "structure",
                required: [ "AvailabilityZones", "SourceSnapshotIds" ],
                members: {
                    AvailabilityZones: {
                        shape: "S1un",
                        locationName: "AvailabilityZone"
                    },
                    SourceSnapshotIds: {
                        shape: "S1h3",
                        locationName: "SourceSnapshotId"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Successful: {
                        locationName: "successful",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                State: {
                                    locationName: "state"
                                },
                                StateTransitionReason: {
                                    locationName: "stateTransitionReason"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                OwnerAlias: {
                                    locationName: "ownerAlias"
                                },
                                EnablingTime: {
                                    locationName: "enablingTime",
                                    type: "timestamp"
                                },
                                OptimizingTime: {
                                    locationName: "optimizingTime",
                                    type: "timestamp"
                                },
                                EnabledTime: {
                                    locationName: "enabledTime",
                                    type: "timestamp"
                                },
                                DisablingTime: {
                                    locationName: "disablingTime",
                                    type: "timestamp"
                                },
                                DisabledTime: {
                                    locationName: "disabledTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Unsuccessful: {
                        locationName: "unsuccessful",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                FastSnapshotRestoreStateErrors: {
                                    locationName: "fastSnapshotRestoreStateErrorSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            AvailabilityZone: {
                                                locationName: "availabilityZone"
                                            },
                                            Error: {
                                                locationName: "error",
                                                type: "structure",
                                                members: {
                                                    Code: {
                                                        locationName: "code"
                                                    },
                                                    Message: {
                                                        locationName: "message"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DisableImage: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DisableImageBlockPublicAccess: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBlockPublicAccessState: {
                        locationName: "imageBlockPublicAccessState"
                    }
                }
            }
        },
        DisableImageDeprecation: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DisableIpamOrganizationAdminAccount: {
            input: {
                type: "structure",
                required: [ "DelegatedAdminAccountId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    DelegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Success: {
                        locationName: "success",
                        type: "boolean"
                    }
                }
            }
        },
        DisableSerialConsoleAccess: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SerialConsoleAccessEnabled: {
                        locationName: "serialConsoleAccessEnabled",
                        type: "boolean"
                    }
                }
            }
        },
        DisableSnapshotBlockPublicAccess: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        DisableTransitGatewayRouteTablePropagation: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    TransitGatewayRouteTableAnnouncementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Propagation: {
                        shape: "S1vc",
                        locationName: "propagation"
                    }
                }
            }
        },
        DisableVgwRoutePropagation: {
            input: {
                type: "structure",
                required: [ "GatewayId", "RouteTableId" ],
                members: {
                    GatewayId: {},
                    RouteTableId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            }
        },
        DisableVpcClassicLink: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DisableVpcClassicLinkDnsSupport: {
            input: {
                type: "structure",
                members: {
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DisassociateAddress: {
            input: {
                type: "structure",
                members: {
                    AssociationId: {},
                    PublicIp: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DisassociateClientVpnTargetNetwork: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "AssociationId" ],
                members: {
                    ClientVpnEndpointId: {},
                    AssociationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    },
                    Status: {
                        shape: "S3m",
                        locationName: "status"
                    }
                }
            }
        },
        DisassociateEnclaveCertificateIamRole: {
            input: {
                type: "structure",
                required: [ "CertificateArn", "RoleArn" ],
                members: {
                    CertificateArn: {},
                    RoleArn: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        DisassociateIamInstanceProfile: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IamInstanceProfileAssociation: {
                        shape: "S3x",
                        locationName: "iamInstanceProfileAssociation"
                    }
                }
            }
        },
        DisassociateInstanceEventWindow: {
            input: {
                type: "structure",
                required: [ "InstanceEventWindowId", "AssociationTarget" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceEventWindowId: {},
                    AssociationTarget: {
                        type: "structure",
                        members: {
                            InstanceIds: {
                                shape: "S43",
                                locationName: "InstanceId"
                            },
                            InstanceTags: {
                                shape: "S6",
                                locationName: "InstanceTag"
                            },
                            DedicatedHostIds: {
                                shape: "S44",
                                locationName: "DedicatedHostId"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceEventWindow: {
                        shape: "S47",
                        locationName: "instanceEventWindow"
                    }
                }
            }
        },
        DisassociateIpamByoasn: {
            input: {
                type: "structure",
                required: [ "Asn", "Cidr" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Asn: {},
                    Cidr: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AsnAssociation: {
                        shape: "S20",
                        locationName: "asnAssociation"
                    }
                }
            }
        },
        DisassociateIpamResourceDiscovery: {
            input: {
                type: "structure",
                required: [ "IpamResourceDiscoveryAssociationId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryAssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscoveryAssociation: {
                        shape: "S4l",
                        locationName: "ipamResourceDiscoveryAssociation"
                    }
                }
            }
        },
        DisassociateNatGatewayAddress: {
            input: {
                type: "structure",
                required: [ "NatGatewayId", "AssociationIds" ],
                members: {
                    NatGatewayId: {},
                    AssociationIds: {
                        locationName: "AssociationId",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    MaxDrainDurationSeconds: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    },
                    NatGatewayAddresses: {
                        shape: "S3b",
                        locationName: "natGatewayAddressSet"
                    }
                }
            }
        },
        DisassociateRouteTable: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        DisassociateSubnetCidrBlock: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipv6CidrBlockAssociation: {
                        shape: "S52",
                        locationName: "ipv6CidrBlockAssociation"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    }
                }
            }
        },
        DisassociateTransitGatewayMulticastDomain: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId", "TransitGatewayAttachmentId", "SubnetIds" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    TransitGatewayAttachmentId: {},
                    SubnetIds: {
                        shape: "S57"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        shape: "Sq",
                        locationName: "associations"
                    }
                }
            }
        },
        DisassociateTransitGatewayPolicyTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayPolicyTableId", "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayPolicyTableId: {},
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "S5c",
                        locationName: "association"
                    }
                }
            }
        },
        DisassociateTransitGatewayRouteTable: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "S5h",
                        locationName: "association"
                    }
                }
            }
        },
        DisassociateTrunkInterface: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    }
                }
            }
        },
        DisassociateVpcCidrBlock: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipv6CidrBlockAssociation: {
                        shape: "S5q",
                        locationName: "ipv6CidrBlockAssociation"
                    },
                    CidrBlockAssociation: {
                        shape: "S5t",
                        locationName: "cidrBlockAssociation"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            }
        },
        EnableAddressTransfer: {
            input: {
                type: "structure",
                required: [ "AllocationId", "TransferAccountId" ],
                members: {
                    AllocationId: {},
                    TransferAccountId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressTransfer: {
                        shape: "Sa",
                        locationName: "addressTransfer"
                    }
                }
            }
        },
        EnableAwsNetworkPerformanceMetricSubscription: {
            input: {
                type: "structure",
                members: {
                    Source: {},
                    Destination: {},
                    Metric: {},
                    Statistic: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Output: {
                        locationName: "output",
                        type: "boolean"
                    }
                }
            }
        },
        EnableEbsEncryptionByDefault: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EbsEncryptionByDefault: {
                        locationName: "ebsEncryptionByDefault",
                        type: "boolean"
                    }
                }
            }
        },
        EnableFastLaunch: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    ResourceType: {},
                    SnapshotConfiguration: {
                        type: "structure",
                        members: {
                            TargetResourceCount: {
                                type: "integer"
                            }
                        }
                    },
                    LaunchTemplate: {
                        type: "structure",
                        required: [ "Version" ],
                        members: {
                            LaunchTemplateId: {},
                            LaunchTemplateName: {},
                            Version: {}
                        }
                    },
                    MaxParallelLaunches: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {
                        locationName: "imageId"
                    },
                    ResourceType: {
                        locationName: "resourceType"
                    },
                    SnapshotConfiguration: {
                        shape: "S159",
                        locationName: "snapshotConfiguration"
                    },
                    LaunchTemplate: {
                        shape: "S15a",
                        locationName: "launchTemplate"
                    },
                    MaxParallelLaunches: {
                        locationName: "maxParallelLaunches",
                        type: "integer"
                    },
                    OwnerId: {
                        locationName: "ownerId"
                    },
                    State: {
                        locationName: "state"
                    },
                    StateTransitionReason: {
                        locationName: "stateTransitionReason"
                    },
                    StateTransitionTime: {
                        locationName: "stateTransitionTime",
                        type: "timestamp"
                    }
                }
            }
        },
        EnableFastSnapshotRestores: {
            input: {
                type: "structure",
                required: [ "AvailabilityZones", "SourceSnapshotIds" ],
                members: {
                    AvailabilityZones: {
                        shape: "S1un",
                        locationName: "AvailabilityZone"
                    },
                    SourceSnapshotIds: {
                        shape: "S1h3",
                        locationName: "SourceSnapshotId"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Successful: {
                        locationName: "successful",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                State: {
                                    locationName: "state"
                                },
                                StateTransitionReason: {
                                    locationName: "stateTransitionReason"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                OwnerAlias: {
                                    locationName: "ownerAlias"
                                },
                                EnablingTime: {
                                    locationName: "enablingTime",
                                    type: "timestamp"
                                },
                                OptimizingTime: {
                                    locationName: "optimizingTime",
                                    type: "timestamp"
                                },
                                EnabledTime: {
                                    locationName: "enabledTime",
                                    type: "timestamp"
                                },
                                DisablingTime: {
                                    locationName: "disablingTime",
                                    type: "timestamp"
                                },
                                DisabledTime: {
                                    locationName: "disabledTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Unsuccessful: {
                        locationName: "unsuccessful",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                FastSnapshotRestoreStateErrors: {
                                    locationName: "fastSnapshotRestoreStateErrorSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            AvailabilityZone: {
                                                locationName: "availabilityZone"
                                            },
                                            Error: {
                                                locationName: "error",
                                                type: "structure",
                                                members: {
                                                    Code: {
                                                        locationName: "code"
                                                    },
                                                    Message: {
                                                        locationName: "message"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        EnableImage: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        EnableImageBlockPublicAccess: {
            input: {
                type: "structure",
                required: [ "ImageBlockPublicAccessState" ],
                members: {
                    ImageBlockPublicAccessState: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBlockPublicAccessState: {
                        locationName: "imageBlockPublicAccessState"
                    }
                }
            }
        },
        EnableImageDeprecation: {
            input: {
                type: "structure",
                required: [ "ImageId", "DeprecateAt" ],
                members: {
                    ImageId: {},
                    DeprecateAt: {
                        type: "timestamp"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        EnableIpamOrganizationAdminAccount: {
            input: {
                type: "structure",
                required: [ "DelegatedAdminAccountId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    DelegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Success: {
                        locationName: "success",
                        type: "boolean"
                    }
                }
            }
        },
        EnableReachabilityAnalyzerOrganizationSharing: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        locationName: "returnValue",
                        type: "boolean"
                    }
                }
            }
        },
        EnableSerialConsoleAccess: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SerialConsoleAccessEnabled: {
                        locationName: "serialConsoleAccessEnabled",
                        type: "boolean"
                    }
                }
            }
        },
        EnableSnapshotBlockPublicAccess: {
            input: {
                type: "structure",
                required: [ "State" ],
                members: {
                    State: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        EnableTransitGatewayRouteTablePropagation: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    TransitGatewayRouteTableAnnouncementId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Propagation: {
                        shape: "S1vc",
                        locationName: "propagation"
                    }
                }
            }
        },
        EnableVgwRoutePropagation: {
            input: {
                type: "structure",
                required: [ "GatewayId", "RouteTableId" ],
                members: {
                    GatewayId: {},
                    RouteTableId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            }
        },
        EnableVolumeIO: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VolumeId: {
                        locationName: "volumeId"
                    }
                }
            }
        },
        EnableVpcClassicLink: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        EnableVpcClassicLinkDnsSupport: {
            input: {
                type: "structure",
                members: {
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ExportClientVpnClientCertificateRevocationList: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CertificateRevocationList: {
                        locationName: "certificateRevocationList"
                    },
                    Status: {
                        locationName: "status",
                        type: "structure",
                        members: {
                            Code: {
                                locationName: "code"
                            },
                            Message: {
                                locationName: "message"
                            }
                        }
                    }
                }
            }
        },
        ExportClientVpnClientConfiguration: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientConfiguration: {
                        locationName: "clientConfiguration"
                    }
                }
            }
        },
        ExportImage: {
            input: {
                type: "structure",
                required: [ "DiskImageFormat", "ImageId", "S3ExportLocation" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    DiskImageFormat: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ImageId: {},
                    S3ExportLocation: {
                        type: "structure",
                        required: [ "S3Bucket" ],
                        members: {
                            S3Bucket: {},
                            S3Prefix: {}
                        }
                    },
                    RoleName: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    DiskImageFormat: {
                        locationName: "diskImageFormat"
                    },
                    ExportImageTaskId: {
                        locationName: "exportImageTaskId"
                    },
                    ImageId: {
                        locationName: "imageId"
                    },
                    RoleName: {
                        locationName: "roleName"
                    },
                    Progress: {
                        locationName: "progress"
                    },
                    S3ExportLocation: {
                        shape: "S14w",
                        locationName: "s3ExportLocation"
                    },
                    Status: {
                        locationName: "status"
                    },
                    StatusMessage: {
                        locationName: "statusMessage"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        ExportTransitGatewayRoutes: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "S3Bucket" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    S3Bucket: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    S3Location: {
                        locationName: "s3Location"
                    }
                }
            }
        },
        GetAssociatedEnclaveCertificateIamRoles: {
            input: {
                type: "structure",
                required: [ "CertificateArn" ],
                members: {
                    CertificateArn: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociatedRoles: {
                        locationName: "associatedRoleSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AssociatedRoleArn: {
                                    locationName: "associatedRoleArn"
                                },
                                CertificateS3BucketName: {
                                    locationName: "certificateS3BucketName"
                                },
                                CertificateS3ObjectKey: {
                                    locationName: "certificateS3ObjectKey"
                                },
                                EncryptionKmsKeyId: {
                                    locationName: "encryptionKmsKeyId"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetAssociatedIpv6PoolCidrs: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipv6CidrAssociations: {
                        locationName: "ipv6CidrAssociationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Ipv6Cidr: {
                                    locationName: "ipv6Cidr"
                                },
                                AssociatedResource: {
                                    locationName: "associatedResource"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetAwsNetworkPerformanceData: {
            input: {
                type: "structure",
                members: {
                    DataQueries: {
                        locationName: "DataQuery",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Source: {},
                                Destination: {},
                                Metric: {},
                                Statistic: {},
                                Period: {}
                            }
                        }
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DataResponses: {
                        locationName: "dataResponseSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Id: {
                                    locationName: "id"
                                },
                                Source: {
                                    locationName: "source"
                                },
                                Destination: {
                                    locationName: "destination"
                                },
                                Metric: {
                                    locationName: "metric"
                                },
                                Statistic: {
                                    locationName: "statistic"
                                },
                                Period: {
                                    locationName: "period"
                                },
                                MetricPoints: {
                                    locationName: "metricPointSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            StartDate: {
                                                locationName: "startDate",
                                                type: "timestamp"
                                            },
                                            EndDate: {
                                                locationName: "endDate",
                                                type: "timestamp"
                                            },
                                            Value: {
                                                locationName: "value",
                                                type: "float"
                                            },
                                            Status: {
                                                locationName: "status"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetCapacityReservationUsage: {
            input: {
                type: "structure",
                required: [ "CapacityReservationId" ],
                members: {
                    CapacityReservationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    CapacityReservationId: {
                        locationName: "capacityReservationId"
                    },
                    InstanceType: {
                        locationName: "instanceType"
                    },
                    TotalInstanceCount: {
                        locationName: "totalInstanceCount",
                        type: "integer"
                    },
                    AvailableInstanceCount: {
                        locationName: "availableInstanceCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    InstanceUsages: {
                        locationName: "instanceUsageSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                UsedInstanceCount: {
                                    locationName: "usedInstanceCount",
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetCoipPoolUsage: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoipPoolId: {
                        locationName: "coipPoolId"
                    },
                    CoipAddressUsages: {
                        locationName: "coipAddressUsageSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AllocationId: {
                                    locationName: "allocationId"
                                },
                                AwsAccountId: {
                                    locationName: "awsAccountId"
                                },
                                AwsService: {
                                    locationName: "awsService"
                                },
                                CoIp: {
                                    locationName: "coIp"
                                }
                            }
                        }
                    },
                    LocalGatewayRouteTableId: {
                        locationName: "localGatewayRouteTableId"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetConsoleOutput: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Latest: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    Output: {
                        locationName: "output"
                    },
                    Timestamp: {
                        locationName: "timestamp",
                        type: "timestamp"
                    }
                }
            }
        },
        GetConsoleScreenshot: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceId: {},
                    WakeUp: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageData: {
                        locationName: "imageData"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    }
                }
            }
        },
        GetDefaultCreditSpecification: {
            input: {
                type: "structure",
                required: [ "InstanceFamily" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceFamily: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceFamilyCreditSpecification: {
                        shape: "S1yu",
                        locationName: "instanceFamilyCreditSpecification"
                    }
                }
            }
        },
        GetEbsDefaultKmsKeyId: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KmsKeyId: {
                        locationName: "kmsKeyId"
                    }
                }
            }
        },
        GetEbsEncryptionByDefault: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EbsEncryptionByDefault: {
                        locationName: "ebsEncryptionByDefault",
                        type: "boolean"
                    },
                    SseType: {
                        locationName: "sseType"
                    }
                }
            }
        },
        GetFlowLogsIntegrationTemplate: {
            input: {
                type: "structure",
                required: [ "FlowLogId", "ConfigDeliveryS3DestinationArn", "IntegrateServices" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FlowLogId: {},
                    ConfigDeliveryS3DestinationArn: {},
                    IntegrateServices: {
                        locationName: "IntegrateService",
                        type: "structure",
                        members: {
                            AthenaIntegrations: {
                                locationName: "AthenaIntegration",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    required: [ "IntegrationResultS3DestinationArn", "PartitionLoadFrequency" ],
                                    members: {
                                        IntegrationResultS3DestinationArn: {},
                                        PartitionLoadFrequency: {},
                                        PartitionStartDate: {
                                            type: "timestamp"
                                        },
                                        PartitionEndDate: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {
                        locationName: "result"
                    }
                }
            }
        },
        GetGroupsForCapacityReservation: {
            input: {
                type: "structure",
                required: [ "CapacityReservationId" ],
                members: {
                    CapacityReservationId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    CapacityReservationGroups: {
                        locationName: "capacityReservationGroupSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                GroupArn: {
                                    locationName: "groupArn"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetHostReservationPurchasePreview: {
            input: {
                type: "structure",
                required: [ "HostIdSet", "OfferingId" ],
                members: {
                    HostIdSet: {
                        shape: "S1zb"
                    },
                    OfferingId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Purchase: {
                        shape: "S1zd",
                        locationName: "purchase"
                    },
                    TotalHourlyPrice: {
                        locationName: "totalHourlyPrice"
                    },
                    TotalUpfrontPrice: {
                        locationName: "totalUpfrontPrice"
                    }
                }
            }
        },
        GetImageBlockPublicAccessState: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageBlockPublicAccessState: {
                        locationName: "imageBlockPublicAccessState"
                    }
                }
            }
        },
        GetInstanceTypesFromInstanceRequirements: {
            input: {
                type: "structure",
                required: [ "ArchitectureTypes", "VirtualizationTypes", "InstanceRequirements" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ArchitectureTypes: {
                        shape: "S1zi",
                        locationName: "ArchitectureType"
                    },
                    VirtualizationTypes: {
                        shape: "S1zj",
                        locationName: "VirtualizationType"
                    },
                    InstanceRequirements: {
                        shape: "Scu"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTypes: {
                        locationName: "instanceTypeSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceType: {
                                    locationName: "instanceType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetInstanceUefiData: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    UefiData: {
                        locationName: "uefiData"
                    }
                }
            }
        },
        GetIpamAddressHistory: {
            input: {
                type: "structure",
                required: [ "Cidr", "IpamScopeId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Cidr: {},
                    IpamScopeId: {},
                    VpcId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HistoryRecords: {
                        locationName: "historyRecordSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ResourceOwnerId: {
                                    locationName: "resourceOwnerId"
                                },
                                ResourceRegion: {
                                    locationName: "resourceRegion"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceCidr: {
                                    locationName: "resourceCidr"
                                },
                                ResourceName: {
                                    locationName: "resourceName"
                                },
                                ResourceComplianceStatus: {
                                    locationName: "resourceComplianceStatus"
                                },
                                ResourceOverlapStatus: {
                                    locationName: "resourceOverlapStatus"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                },
                                SampledStartTime: {
                                    locationName: "sampledStartTime",
                                    type: "timestamp"
                                },
                                SampledEndTime: {
                                    locationName: "sampledEndTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIpamDiscoveredAccounts: {
            input: {
                type: "structure",
                required: [ "IpamResourceDiscoveryId", "DiscoveryRegion" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryId: {},
                    DiscoveryRegion: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamDiscoveredAccounts: {
                        locationName: "ipamDiscoveredAccountSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                DiscoveryRegion: {
                                    locationName: "discoveryRegion"
                                },
                                FailureReason: {
                                    locationName: "failureReason",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                },
                                LastAttemptedDiscoveryTime: {
                                    locationName: "lastAttemptedDiscoveryTime",
                                    type: "timestamp"
                                },
                                LastSuccessfulDiscoveryTime: {
                                    locationName: "lastSuccessfulDiscoveryTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIpamDiscoveredPublicAddresses: {
            input: {
                type: "structure",
                required: [ "IpamResourceDiscoveryId", "AddressRegion" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryId: {},
                    AddressRegion: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamDiscoveredPublicAddresses: {
                        locationName: "ipamDiscoveredPublicAddressSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                IpamResourceDiscoveryId: {
                                    locationName: "ipamResourceDiscoveryId"
                                },
                                AddressRegion: {
                                    locationName: "addressRegion"
                                },
                                Address: {
                                    locationName: "address"
                                },
                                AddressOwnerId: {
                                    locationName: "addressOwnerId"
                                },
                                AddressAllocationId: {
                                    locationName: "addressAllocationId"
                                },
                                AssociationStatus: {
                                    locationName: "associationStatus"
                                },
                                AddressType: {
                                    locationName: "addressType"
                                },
                                Service: {
                                    locationName: "service"
                                },
                                ServiceResource: {
                                    locationName: "serviceResource"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                },
                                SubnetId: {
                                    locationName: "subnetId"
                                },
                                PublicIpv4PoolId: {
                                    locationName: "publicIpv4PoolId"
                                },
                                NetworkInterfaceId: {
                                    locationName: "networkInterfaceId"
                                },
                                NetworkInterfaceDescription: {
                                    locationName: "networkInterfaceDescription"
                                },
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                Tags: {
                                    locationName: "tags",
                                    type: "structure",
                                    members: {
                                        EipTags: {
                                            locationName: "eipTagSet",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Key: {
                                                        locationName: "key"
                                                    },
                                                    Value: {
                                                        locationName: "value"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                NetworkBorderGroup: {
                                    locationName: "networkBorderGroup"
                                },
                                SecurityGroups: {
                                    locationName: "securityGroupSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            GroupName: {
                                                locationName: "groupName"
                                            },
                                            GroupId: {
                                                locationName: "groupId"
                                            }
                                        }
                                    }
                                },
                                SampleTime: {
                                    locationName: "sampleTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    OldestSampleTime: {
                        locationName: "oldestSampleTime",
                        type: "timestamp"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIpamDiscoveredResourceCidrs: {
            input: {
                type: "structure",
                required: [ "IpamResourceDiscoveryId", "ResourceRegion" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryId: {},
                    ResourceRegion: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamDiscoveredResourceCidrs: {
                        locationName: "ipamDiscoveredResourceCidrSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                IpamResourceDiscoveryId: {
                                    locationName: "ipamResourceDiscoveryId"
                                },
                                ResourceRegion: {
                                    locationName: "resourceRegion"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceOwnerId: {
                                    locationName: "resourceOwnerId"
                                },
                                ResourceCidr: {
                                    locationName: "resourceCidr"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                ResourceTags: {
                                    shape: "Sg9",
                                    locationName: "resourceTagSet"
                                },
                                IpUsage: {
                                    locationName: "ipUsage",
                                    type: "double"
                                },
                                VpcId: {
                                    locationName: "vpcId"
                                },
                                SampleTime: {
                                    locationName: "sampleTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIpamPoolAllocations: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    IpamPoolAllocationId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPoolAllocations: {
                        locationName: "ipamPoolAllocationSet",
                        type: "list",
                        member: {
                            shape: "S2l",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIpamPoolCidrs: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPoolCidrs: {
                        locationName: "ipamPoolCidrSet",
                        type: "list",
                        member: {
                            shape: "Szf",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetIpamResourceCidrs: {
            input: {
                type: "structure",
                required: [ "IpamScopeId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    IpamScopeId: {},
                    IpamPoolId: {},
                    ResourceId: {},
                    ResourceType: {},
                    ResourceTag: {
                        shape: "Sg0"
                    },
                    ResourceOwner: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    IpamResourceCidrs: {
                        locationName: "ipamResourceCidrSet",
                        type: "list",
                        member: {
                            shape: "S20v",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        GetLaunchTemplateData: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplateData: {
                        shape: "Sij",
                        locationName: "launchTemplateData"
                    }
                }
            }
        },
        GetManagedPrefixListAssociations: {
            input: {
                type: "structure",
                required: [ "PrefixListId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PrefixListId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PrefixListAssociations: {
                        locationName: "prefixListAssociationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceOwner: {
                                    locationName: "resourceOwner"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetManagedPrefixListEntries: {
            input: {
                type: "structure",
                required: [ "PrefixListId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PrefixListId: {},
                    TargetVersion: {
                        type: "long"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Entries: {
                        locationName: "entrySet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Cidr: {
                                    locationName: "cidr"
                                },
                                Description: {
                                    locationName: "description"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetNetworkInsightsAccessScopeAnalysisFindings: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsAccessScopeAnalysisId" ],
                members: {
                    NetworkInsightsAccessScopeAnalysisId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeAnalysisId: {
                        locationName: "networkInsightsAccessScopeAnalysisId"
                    },
                    AnalysisStatus: {
                        locationName: "analysisStatus"
                    },
                    AnalysisFindings: {
                        locationName: "analysisFindingSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                NetworkInsightsAccessScopeAnalysisId: {
                                    locationName: "networkInsightsAccessScopeAnalysisId"
                                },
                                NetworkInsightsAccessScopeId: {
                                    locationName: "networkInsightsAccessScopeId"
                                },
                                FindingId: {
                                    locationName: "findingId"
                                },
                                FindingComponents: {
                                    shape: "S1ic",
                                    locationName: "findingComponentSet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetNetworkInsightsAccessScopeContent: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsAccessScopeId" ],
                members: {
                    NetworkInsightsAccessScopeId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeContent: {
                        shape: "Sl6",
                        locationName: "networkInsightsAccessScopeContent"
                    }
                }
            }
        },
        GetPasswordData: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    PasswordData: {
                        locationName: "passwordData",
                        type: "string",
                        sensitive: true
                    },
                    Timestamp: {
                        locationName: "timestamp",
                        type: "timestamp"
                    }
                }
            }
        },
        GetReservedInstancesExchangeQuote: {
            input: {
                type: "structure",
                required: [ "ReservedInstanceIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ReservedInstanceIds: {
                        shape: "Se",
                        locationName: "ReservedInstanceId"
                    },
                    TargetConfigurations: {
                        shape: "Sg",
                        locationName: "TargetConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    IsValidExchange: {
                        locationName: "isValidExchange",
                        type: "boolean"
                    },
                    OutputReservedInstancesWillExpireAt: {
                        locationName: "outputReservedInstancesWillExpireAt",
                        type: "timestamp"
                    },
                    PaymentDue: {
                        locationName: "paymentDue"
                    },
                    ReservedInstanceValueRollup: {
                        shape: "S21j",
                        locationName: "reservedInstanceValueRollup"
                    },
                    ReservedInstanceValueSet: {
                        locationName: "reservedInstanceValueSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ReservationValue: {
                                    shape: "S21j",
                                    locationName: "reservationValue"
                                },
                                ReservedInstanceId: {
                                    locationName: "reservedInstanceId"
                                }
                            }
                        }
                    },
                    TargetConfigurationValueRollup: {
                        shape: "S21j",
                        locationName: "targetConfigurationValueRollup"
                    },
                    TargetConfigurationValueSet: {
                        locationName: "targetConfigurationValueSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ReservationValue: {
                                    shape: "S21j",
                                    locationName: "reservationValue"
                                },
                                TargetConfiguration: {
                                    locationName: "targetConfiguration",
                                    type: "structure",
                                    members: {
                                        InstanceCount: {
                                            locationName: "instanceCount",
                                            type: "integer"
                                        },
                                        OfferingId: {
                                            locationName: "offeringId"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ValidationFailureReason: {
                        locationName: "validationFailureReason"
                    }
                }
            }
        },
        GetSecurityGroupsForVpc: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    VpcId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    SecurityGroupForVpcs: {
                        locationName: "securityGroupForVpcSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "description"
                                },
                                GroupName: {
                                    locationName: "groupName"
                                },
                                OwnerId: {
                                    locationName: "ownerId"
                                },
                                GroupId: {
                                    locationName: "groupId"
                                },
                                Tags: {
                                    shape: "S6",
                                    locationName: "tagSet"
                                },
                                PrimaryVpcId: {
                                    locationName: "primaryVpcId"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSerialConsoleAccessStatus: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SerialConsoleAccessEnabled: {
                        locationName: "serialConsoleAccessEnabled",
                        type: "boolean"
                    }
                }
            }
        },
        GetSnapshotBlockPublicAccessState: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        GetSpotPlacementScores: {
            input: {
                type: "structure",
                required: [ "TargetCapacity" ],
                members: {
                    InstanceTypes: {
                        locationName: "InstanceType",
                        type: "list",
                        member: {}
                    },
                    TargetCapacity: {
                        type: "integer"
                    },
                    TargetCapacityUnitType: {},
                    SingleAvailabilityZone: {
                        type: "boolean"
                    },
                    RegionNames: {
                        locationName: "RegionName",
                        type: "list",
                        member: {}
                    },
                    InstanceRequirementsWithMetadata: {
                        type: "structure",
                        members: {
                            ArchitectureTypes: {
                                shape: "S1zi",
                                locationName: "ArchitectureType"
                            },
                            VirtualizationTypes: {
                                shape: "S1zj",
                                locationName: "VirtualizationType"
                            },
                            InstanceRequirements: {
                                shape: "Scu"
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SpotPlacementScores: {
                        locationName: "spotPlacementScoreSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Region: {
                                    locationName: "region"
                                },
                                AvailabilityZoneId: {
                                    locationName: "availabilityZoneId"
                                },
                                Score: {
                                    locationName: "score",
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetSubnetCidrReservations: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    SubnetId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetIpv4CidrReservations: {
                        shape: "S22a",
                        locationName: "subnetIpv4CidrReservationSet"
                    },
                    SubnetIpv6CidrReservations: {
                        shape: "S22a",
                        locationName: "subnetIpv6CidrReservationSet"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTransitGatewayAttachmentPropagations: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayAttachmentPropagations: {
                        locationName: "transitGatewayAttachmentPropagations",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                TransitGatewayRouteTableId: {
                                    locationName: "transitGatewayRouteTableId"
                                },
                                State: {
                                    locationName: "state"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTransitGatewayMulticastDomainAssociations: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MulticastDomainAssociations: {
                        locationName: "multicastDomainAssociations",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                TransitGatewayAttachmentId: {
                                    locationName: "transitGatewayAttachmentId"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                ResourceOwnerId: {
                                    locationName: "resourceOwnerId"
                                },
                                Subnet: {
                                    shape: "St",
                                    locationName: "subnet"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTransitGatewayPolicyTableAssociations: {
            input: {
                type: "structure",
                required: [ "TransitGatewayPolicyTableId" ],
                members: {
                    TransitGatewayPolicyTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        locationName: "associations",
                        type: "list",
                        member: {
                            shape: "S5c",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTransitGatewayPolicyTableEntries: {
            input: {
                type: "structure",
                required: [ "TransitGatewayPolicyTableId" ],
                members: {
                    TransitGatewayPolicyTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPolicyTableEntries: {
                        locationName: "transitGatewayPolicyTableEntries",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                PolicyRuleNumber: {
                                    locationName: "policyRuleNumber"
                                },
                                PolicyRule: {
                                    locationName: "policyRule",
                                    type: "structure",
                                    members: {
                                        SourceCidrBlock: {
                                            locationName: "sourceCidrBlock"
                                        },
                                        SourcePortRange: {
                                            locationName: "sourcePortRange"
                                        },
                                        DestinationCidrBlock: {
                                            locationName: "destinationCidrBlock"
                                        },
                                        DestinationPortRange: {
                                            locationName: "destinationPortRange"
                                        },
                                        Protocol: {
                                            locationName: "protocol"
                                        },
                                        MetaData: {
                                            locationName: "metaData",
                                            type: "structure",
                                            members: {
                                                MetaDataKey: {
                                                    locationName: "metaDataKey"
                                                },
                                                MetaDataValue: {
                                                    locationName: "metaDataValue"
                                                }
                                            }
                                        }
                                    }
                                },
                                TargetRouteTableId: {
                                    locationName: "targetRouteTableId"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetTransitGatewayPrefixListReferences: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPrefixListReferences: {
                        locationName: "transitGatewayPrefixListReferenceSet",
                        type: "list",
                        member: {
                            shape: "Sq9",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTransitGatewayRouteTableAssociations: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        locationName: "associations",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                TransitGatewayAttachmentId: {
                                    locationName: "transitGatewayAttachmentId"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                State: {
                                    locationName: "state"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetTransitGatewayRouteTablePropagations: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayRouteTablePropagations: {
                        locationName: "transitGatewayRouteTablePropagations",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                TransitGatewayAttachmentId: {
                                    locationName: "transitGatewayAttachmentId"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                State: {
                                    locationName: "state"
                                },
                                TransitGatewayRouteTableAnnouncementId: {
                                    locationName: "transitGatewayRouteTableAnnouncementId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetVerifiedAccessEndpointPolicy: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessEndpointId" ],
                members: {
                    VerifiedAccessEndpointId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyEnabled: {
                        locationName: "policyEnabled",
                        type: "boolean"
                    },
                    PolicyDocument: {
                        locationName: "policyDocument"
                    }
                }
            }
        },
        GetVerifiedAccessGroupPolicy: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessGroupId" ],
                members: {
                    VerifiedAccessGroupId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyEnabled: {
                        locationName: "policyEnabled",
                        type: "boolean"
                    },
                    PolicyDocument: {
                        locationName: "policyDocument"
                    }
                }
            }
        },
        GetVpnConnectionDeviceSampleConfiguration: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId", "VpnConnectionDeviceTypeId" ],
                members: {
                    VpnConnectionId: {},
                    VpnConnectionDeviceTypeId: {},
                    InternetKeyExchangeVersion: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnectionDeviceSampleConfiguration: {
                        locationName: "vpnConnectionDeviceSampleConfiguration",
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetVpnConnectionDeviceTypes: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnectionDeviceTypes: {
                        locationName: "vpnConnectionDeviceTypeSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                VpnConnectionDeviceTypeId: {
                                    locationName: "vpnConnectionDeviceTypeId"
                                },
                                Vendor: {
                                    locationName: "vendor"
                                },
                                Platform: {
                                    locationName: "platform"
                                },
                                Software: {
                                    locationName: "software"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        GetVpnTunnelReplacementStatus: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId", "VpnTunnelOutsideIpAddress" ],
                members: {
                    VpnConnectionId: {},
                    VpnTunnelOutsideIpAddress: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnectionId: {
                        locationName: "vpnConnectionId"
                    },
                    TransitGatewayId: {
                        locationName: "transitGatewayId"
                    },
                    CustomerGatewayId: {
                        locationName: "customerGatewayId"
                    },
                    VpnGatewayId: {
                        locationName: "vpnGatewayId"
                    },
                    VpnTunnelOutsideIpAddress: {
                        locationName: "vpnTunnelOutsideIpAddress"
                    },
                    MaintenanceDetails: {
                        locationName: "maintenanceDetails",
                        type: "structure",
                        members: {
                            PendingMaintenance: {
                                locationName: "pendingMaintenance"
                            },
                            MaintenanceAutoAppliedAfter: {
                                locationName: "maintenanceAutoAppliedAfter",
                                type: "timestamp"
                            },
                            LastMaintenanceApplied: {
                                locationName: "lastMaintenanceApplied",
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        ImportClientVpnClientCertificateRevocationList: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "CertificateRevocationList" ],
                members: {
                    ClientVpnEndpointId: {},
                    CertificateRevocationList: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ImportImage: {
            input: {
                type: "structure",
                members: {
                    Architecture: {},
                    ClientData: {
                        shape: "S23m"
                    },
                    ClientToken: {},
                    Description: {},
                    DiskContainers: {
                        locationName: "DiskContainer",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {},
                                DeviceName: {},
                                Format: {},
                                SnapshotId: {},
                                Url: {
                                    shape: "S18v"
                                },
                                UserBucket: {
                                    shape: "S23p"
                                }
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Encrypted: {
                        type: "boolean"
                    },
                    Hypervisor: {},
                    KmsKeyId: {},
                    LicenseType: {},
                    Platform: {},
                    RoleName: {},
                    LicenseSpecifications: {
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LicenseConfigurationArn: {}
                            }
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    UsageOperation: {},
                    BootMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Architecture: {
                        locationName: "architecture"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Encrypted: {
                        locationName: "encrypted",
                        type: "boolean"
                    },
                    Hypervisor: {
                        locationName: "hypervisor"
                    },
                    ImageId: {
                        locationName: "imageId"
                    },
                    ImportTaskId: {
                        locationName: "importTaskId"
                    },
                    KmsKeyId: {
                        locationName: "kmsKeyId"
                    },
                    LicenseType: {
                        locationName: "licenseType"
                    },
                    Platform: {
                        locationName: "platform"
                    },
                    Progress: {
                        locationName: "progress"
                    },
                    SnapshotDetails: {
                        shape: "S18t",
                        locationName: "snapshotDetailSet"
                    },
                    Status: {
                        locationName: "status"
                    },
                    StatusMessage: {
                        locationName: "statusMessage"
                    },
                    LicenseSpecifications: {
                        shape: "S18x",
                        locationName: "licenseSpecifications"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    },
                    UsageOperation: {
                        locationName: "usageOperation"
                    }
                }
            }
        },
        ImportInstance: {
            input: {
                type: "structure",
                required: [ "Platform" ],
                members: {
                    Description: {
                        locationName: "description"
                    },
                    DiskImages: {
                        locationName: "diskImage",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                Image: {
                                    shape: "S23w"
                                },
                                Volume: {
                                    shape: "S23x"
                                }
                            }
                        }
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    LaunchSpecification: {
                        locationName: "launchSpecification",
                        type: "structure",
                        members: {
                            AdditionalInfo: {
                                locationName: "additionalInfo"
                            },
                            Architecture: {
                                locationName: "architecture"
                            },
                            GroupIds: {
                                shape: "Sgz",
                                locationName: "GroupId"
                            },
                            GroupNames: {
                                shape: "Shn",
                                locationName: "GroupName"
                            },
                            InstanceInitiatedShutdownBehavior: {
                                locationName: "instanceInitiatedShutdownBehavior"
                            },
                            InstanceType: {
                                locationName: "instanceType"
                            },
                            Monitoring: {
                                locationName: "monitoring",
                                type: "boolean"
                            },
                            Placement: {
                                shape: "Scr",
                                locationName: "placement"
                            },
                            PrivateIpAddress: {
                                locationName: "privateIpAddress"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            UserData: {
                                locationName: "userData",
                                type: "structure",
                                members: {
                                    Data: {
                                        locationName: "data"
                                    }
                                },
                                sensitive: true
                            }
                        }
                    },
                    Platform: {
                        locationName: "platform"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConversionTask: {
                        shape: "S13s",
                        locationName: "conversionTask"
                    }
                }
            }
        },
        ImportKeyPair: {
            input: {
                type: "structure",
                required: [ "KeyName", "PublicKeyMaterial" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    KeyName: {
                        locationName: "keyName"
                    },
                    PublicKeyMaterial: {
                        locationName: "publicKeyMaterial",
                        type: "blob"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyFingerprint: {
                        locationName: "keyFingerprint"
                    },
                    KeyName: {
                        locationName: "keyName"
                    },
                    KeyPairId: {
                        locationName: "keyPairId"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        ImportSnapshot: {
            input: {
                type: "structure",
                members: {
                    ClientData: {
                        shape: "S23m"
                    },
                    ClientToken: {},
                    Description: {},
                    DiskContainer: {
                        type: "structure",
                        members: {
                            Description: {},
                            Format: {},
                            Url: {
                                shape: "S18v"
                            },
                            UserBucket: {
                                shape: "S23p"
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    Encrypted: {
                        type: "boolean"
                    },
                    KmsKeyId: {},
                    RoleName: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    ImportTaskId: {
                        locationName: "importTaskId"
                    },
                    SnapshotTaskDetail: {
                        shape: "S195",
                        locationName: "snapshotTaskDetail"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        ImportVolume: {
            input: {
                type: "structure",
                required: [ "AvailabilityZone", "Image", "Volume" ],
                members: {
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Image: {
                        shape: "S23w",
                        locationName: "image"
                    },
                    Volume: {
                        shape: "S23x",
                        locationName: "volume"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConversionTask: {
                        shape: "S13s",
                        locationName: "conversionTask"
                    }
                }
            }
        },
        ListImagesInRecycleBin: {
            input: {
                type: "structure",
                members: {
                    ImageIds: {
                        shape: "S18a",
                        locationName: "ImageId"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        locationName: "imageSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ImageId: {
                                    locationName: "imageId"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                RecycleBinEnterTime: {
                                    locationName: "recycleBinEnterTime",
                                    type: "timestamp"
                                },
                                RecycleBinExitTime: {
                                    locationName: "recycleBinExitTime",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListSnapshotsInRecycleBin: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SnapshotIds: {
                        shape: "S1h3",
                        locationName: "SnapshotId"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshots: {
                        locationName: "snapshotSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                SnapshotId: {
                                    locationName: "snapshotId"
                                },
                                RecycleBinEnterTime: {
                                    locationName: "recycleBinEnterTime",
                                    type: "timestamp"
                                },
                                RecycleBinExitTime: {
                                    locationName: "recycleBinExitTime",
                                    type: "timestamp"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                VolumeId: {
                                    locationName: "volumeId"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        LockSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotId", "LockMode" ],
                members: {
                    SnapshotId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    LockMode: {},
                    CoolOffPeriod: {
                        type: "integer"
                    },
                    LockDuration: {
                        type: "integer"
                    },
                    ExpirationDate: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {
                        locationName: "snapshotId"
                    },
                    LockState: {
                        locationName: "lockState"
                    },
                    LockDuration: {
                        locationName: "lockDuration",
                        type: "integer"
                    },
                    CoolOffPeriod: {
                        locationName: "coolOffPeriod",
                        type: "integer"
                    },
                    CoolOffPeriodExpiresOn: {
                        locationName: "coolOffPeriodExpiresOn",
                        type: "timestamp"
                    },
                    LockCreatedOn: {
                        locationName: "lockCreatedOn",
                        type: "timestamp"
                    },
                    LockExpiresOn: {
                        locationName: "lockExpiresOn",
                        type: "timestamp"
                    },
                    LockDurationStartTime: {
                        locationName: "lockDurationStartTime",
                        type: "timestamp"
                    }
                }
            }
        },
        ModifyAddressAttribute: {
            input: {
                type: "structure",
                required: [ "AllocationId" ],
                members: {
                    AllocationId: {},
                    DomainName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Address: {
                        shape: "S10q",
                        locationName: "address"
                    }
                }
            }
        },
        ModifyAvailabilityZoneGroup: {
            input: {
                type: "structure",
                required: [ "GroupName", "OptInStatus" ],
                members: {
                    GroupName: {},
                    OptInStatus: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyCapacityReservation: {
            input: {
                type: "structure",
                required: [ "CapacityReservationId" ],
                members: {
                    CapacityReservationId: {},
                    InstanceCount: {
                        type: "integer"
                    },
                    EndDate: {
                        type: "timestamp"
                    },
                    EndDateType: {},
                    Accept: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    AdditionalInfo: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyCapacityReservationFleet: {
            input: {
                type: "structure",
                required: [ "CapacityReservationFleetId" ],
                members: {
                    CapacityReservationFleetId: {},
                    TotalTargetCapacity: {
                        type: "integer"
                    },
                    EndDate: {
                        type: "timestamp"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    RemoveEndDate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyClientVpnEndpoint: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    ServerCertificateArn: {},
                    ConnectionLogOptions: {
                        shape: "Saq"
                    },
                    DnsServers: {
                        type: "structure",
                        members: {
                            CustomDnsServers: {
                                shape: "So"
                            },
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    },
                    VpnPort: {
                        type: "integer"
                    },
                    Description: {},
                    SplitTunnel: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SecurityGroupIds: {
                        shape: "S2r",
                        locationName: "SecurityGroupId"
                    },
                    VpcId: {},
                    SelfServicePortal: {},
                    ClientConnectOptions: {
                        shape: "Sat"
                    },
                    SessionTimeoutHours: {
                        type: "integer"
                    },
                    ClientLoginBannerOptions: {
                        shape: "Sau"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyDefaultCreditSpecification: {
            input: {
                type: "structure",
                required: [ "InstanceFamily", "CpuCredits" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceFamily: {},
                    CpuCredits: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceFamilyCreditSpecification: {
                        shape: "S1yu",
                        locationName: "instanceFamilyCreditSpecification"
                    }
                }
            }
        },
        ModifyEbsDefaultKmsKeyId: {
            input: {
                type: "structure",
                required: [ "KmsKeyId" ],
                members: {
                    KmsKeyId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KmsKeyId: {
                        locationName: "kmsKeyId"
                    }
                }
            }
        },
        ModifyFleet: {
            input: {
                type: "structure",
                required: [ "FleetId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ExcessCapacityTerminationPolicy: {},
                    LaunchTemplateConfigs: {
                        shape: "Sck",
                        locationName: "LaunchTemplateConfig"
                    },
                    FleetId: {},
                    TargetCapacitySpecification: {
                        shape: "Sdn"
                    },
                    Context: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyFpgaImageAttribute: {
            input: {
                type: "structure",
                required: [ "FpgaImageId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FpgaImageId: {},
                    Attribute: {},
                    OperationType: {},
                    UserIds: {
                        shape: "S257",
                        locationName: "UserId"
                    },
                    UserGroups: {
                        shape: "S258",
                        locationName: "UserGroup"
                    },
                    ProductCodes: {
                        shape: "S259",
                        locationName: "ProductCode"
                    },
                    LoadPermission: {
                        type: "structure",
                        members: {
                            Add: {
                                shape: "S25b"
                            },
                            Remove: {
                                shape: "S25b"
                            }
                        }
                    },
                    Description: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FpgaImageAttribute: {
                        shape: "S16j",
                        locationName: "fpgaImageAttribute"
                    }
                }
            }
        },
        ModifyHosts: {
            input: {
                type: "structure",
                required: [ "HostIds" ],
                members: {
                    AutoPlacement: {
                        locationName: "autoPlacement"
                    },
                    HostIds: {
                        shape: "S17g",
                        locationName: "hostId"
                    },
                    HostRecovery: {},
                    InstanceType: {},
                    InstanceFamily: {},
                    HostMaintenance: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Successful: {
                        shape: "S2f",
                        locationName: "successful"
                    },
                    Unsuccessful: {
                        shape: "S25g",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        ModifyIdFormat: {
            input: {
                type: "structure",
                required: [ "Resource", "UseLongIds" ],
                members: {
                    Resource: {},
                    UseLongIds: {
                        type: "boolean"
                    }
                }
            }
        },
        ModifyIdentityIdFormat: {
            input: {
                type: "structure",
                required: [ "PrincipalArn", "Resource", "UseLongIds" ],
                members: {
                    PrincipalArn: {
                        locationName: "principalArn"
                    },
                    Resource: {
                        locationName: "resource"
                    },
                    UseLongIds: {
                        locationName: "useLongIds",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyImageAttribute: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    Attribute: {},
                    Description: {
                        shape: "Sc1"
                    },
                    ImageId: {},
                    LaunchPermission: {
                        type: "structure",
                        members: {
                            Add: {
                                shape: "S186"
                            },
                            Remove: {
                                shape: "S186"
                            }
                        }
                    },
                    OperationType: {},
                    ProductCodes: {
                        shape: "S259",
                        locationName: "ProductCode"
                    },
                    UserGroups: {
                        shape: "S258",
                        locationName: "UserGroup"
                    },
                    UserIds: {
                        shape: "S257",
                        locationName: "UserId"
                    },
                    Value: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    OrganizationArns: {
                        locationName: "OrganizationArn",
                        type: "list",
                        member: {
                            locationName: "OrganizationArn"
                        }
                    },
                    OrganizationalUnitArns: {
                        locationName: "OrganizationalUnitArn",
                        type: "list",
                        member: {
                            locationName: "OrganizationalUnitArn"
                        }
                    },
                    ImdsSupport: {
                        shape: "Sc1"
                    }
                }
            }
        },
        ModifyInstanceAttribute: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    SourceDestCheck: {
                        shape: "S19c"
                    },
                    Attribute: {
                        locationName: "attribute"
                    },
                    BlockDeviceMappings: {
                        locationName: "blockDeviceMapping",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                DeviceName: {
                                    locationName: "deviceName"
                                },
                                Ebs: {
                                    locationName: "ebs",
                                    type: "structure",
                                    members: {
                                        DeleteOnTermination: {
                                            locationName: "deleteOnTermination",
                                            type: "boolean"
                                        },
                                        VolumeId: {
                                            locationName: "volumeId"
                                        }
                                    }
                                },
                                NoDevice: {
                                    locationName: "noDevice"
                                },
                                VirtualName: {
                                    locationName: "virtualName"
                                }
                            }
                        }
                    },
                    DisableApiTermination: {
                        shape: "S19c",
                        locationName: "disableApiTermination"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    EbsOptimized: {
                        shape: "S19c",
                        locationName: "ebsOptimized"
                    },
                    EnaSupport: {
                        shape: "S19c",
                        locationName: "enaSupport"
                    },
                    Groups: {
                        shape: "S5v",
                        locationName: "GroupId"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    InstanceInitiatedShutdownBehavior: {
                        shape: "Sc1",
                        locationName: "instanceInitiatedShutdownBehavior"
                    },
                    InstanceType: {
                        shape: "Sc1",
                        locationName: "instanceType"
                    },
                    Kernel: {
                        shape: "Sc1",
                        locationName: "kernel"
                    },
                    Ramdisk: {
                        shape: "Sc1",
                        locationName: "ramdisk"
                    },
                    SriovNetSupport: {
                        shape: "Sc1",
                        locationName: "sriovNetSupport"
                    },
                    UserData: {
                        locationName: "userData",
                        type: "structure",
                        members: {
                            Value: {
                                locationName: "value",
                                type: "blob"
                            }
                        }
                    },
                    Value: {
                        locationName: "value"
                    },
                    DisableApiStop: {
                        shape: "S19c"
                    }
                }
            }
        },
        ModifyInstanceCapacityReservationAttributes: {
            input: {
                type: "structure",
                required: [ "InstanceId", "CapacityReservationSpecification" ],
                members: {
                    InstanceId: {},
                    CapacityReservationSpecification: {
                        shape: "S25t"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyInstanceCreditSpecification: {
            input: {
                type: "structure",
                required: [ "InstanceCreditSpecifications" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {},
                    InstanceCreditSpecifications: {
                        locationName: "InstanceCreditSpecification",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            required: [ "InstanceId" ],
                            members: {
                                InstanceId: {},
                                CpuCredits: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulInstanceCreditSpecifications: {
                        locationName: "successfulInstanceCreditSpecificationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceId: {
                                    locationName: "instanceId"
                                }
                            }
                        }
                    },
                    UnsuccessfulInstanceCreditSpecifications: {
                        locationName: "unsuccessfulInstanceCreditSpecificationSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceId: {
                                    locationName: "instanceId"
                                },
                                Error: {
                                    locationName: "error",
                                    type: "structure",
                                    members: {
                                        Code: {
                                            locationName: "code"
                                        },
                                        Message: {
                                            locationName: "message"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ModifyInstanceEventStartTime: {
            input: {
                type: "structure",
                required: [ "InstanceId", "InstanceEventId", "NotBefore" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceId: {},
                    InstanceEventId: {},
                    NotBefore: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Event: {
                        shape: "S19z",
                        locationName: "event"
                    }
                }
            }
        },
        ModifyInstanceEventWindow: {
            input: {
                type: "structure",
                required: [ "InstanceEventWindowId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Name: {},
                    InstanceEventWindowId: {},
                    TimeRanges: {
                        shape: "Sf6",
                        locationName: "TimeRange"
                    },
                    CronExpression: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceEventWindow: {
                        shape: "S47",
                        locationName: "instanceEventWindow"
                    }
                }
            }
        },
        ModifyInstanceMaintenanceOptions: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    AutoRecovery: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    AutoRecovery: {
                        locationName: "autoRecovery"
                    }
                }
            }
        },
        ModifyInstanceMetadataOptions: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    HttpTokens: {},
                    HttpPutResponseHopLimit: {
                        type: "integer"
                    },
                    HttpEndpoint: {},
                    DryRun: {
                        type: "boolean"
                    },
                    HttpProtocolIpv6: {},
                    InstanceMetadataTags: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    InstanceMetadataOptions: {
                        shape: "S1em",
                        locationName: "instanceMetadataOptions"
                    }
                }
            }
        },
        ModifyInstancePlacement: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    Affinity: {
                        locationName: "affinity"
                    },
                    GroupName: {},
                    HostId: {
                        locationName: "hostId"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    Tenancy: {
                        locationName: "tenancy"
                    },
                    PartitionNumber: {
                        type: "integer"
                    },
                    HostResourceGroupArn: {},
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyIpam: {
            input: {
                type: "structure",
                required: [ "IpamId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamId: {},
                    Description: {},
                    AddOperatingRegions: {
                        shape: "Sfn",
                        locationName: "AddOperatingRegion"
                    },
                    RemoveOperatingRegions: {
                        shape: "S26i",
                        locationName: "RemoveOperatingRegion"
                    },
                    Tier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Ipam: {
                        shape: "Sfr",
                        locationName: "ipam"
                    }
                }
            }
        },
        ModifyIpamPool: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Description: {},
                    AutoImport: {
                        type: "boolean"
                    },
                    AllocationMinNetmaskLength: {
                        type: "integer"
                    },
                    AllocationMaxNetmaskLength: {
                        type: "integer"
                    },
                    AllocationDefaultNetmaskLength: {
                        type: "integer"
                    },
                    ClearAllocationDefaultNetmaskLength: {
                        type: "boolean"
                    },
                    AddAllocationResourceTags: {
                        shape: "Sfz",
                        locationName: "AddAllocationResourceTag"
                    },
                    RemoveAllocationResourceTags: {
                        shape: "Sfz",
                        locationName: "RemoveAllocationResourceTag"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPool: {
                        shape: "Sg6",
                        locationName: "ipamPool"
                    }
                }
            }
        },
        ModifyIpamResourceCidr: {
            input: {
                type: "structure",
                required: [ "ResourceId", "ResourceCidr", "ResourceRegion", "CurrentIpamScopeId", "Monitored" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ResourceId: {},
                    ResourceCidr: {},
                    ResourceRegion: {},
                    CurrentIpamScopeId: {},
                    DestinationIpamScopeId: {},
                    Monitored: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceCidr: {
                        shape: "S20v",
                        locationName: "ipamResourceCidr"
                    }
                }
            }
        },
        ModifyIpamResourceDiscovery: {
            input: {
                type: "structure",
                required: [ "IpamResourceDiscoveryId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamResourceDiscoveryId: {},
                    Description: {},
                    AddOperatingRegions: {
                        shape: "Sfn",
                        locationName: "AddOperatingRegion"
                    },
                    RemoveOperatingRegions: {
                        shape: "S26i",
                        locationName: "RemoveOperatingRegion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamResourceDiscovery: {
                        shape: "Sge",
                        locationName: "ipamResourceDiscovery"
                    }
                }
            }
        },
        ModifyIpamScope: {
            input: {
                type: "structure",
                required: [ "IpamScopeId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamScopeId: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamScope: {
                        shape: "Sgi",
                        locationName: "ipamScope"
                    }
                }
            }
        },
        ModifyLaunchTemplate: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {},
                    LaunchTemplateId: {},
                    LaunchTemplateName: {},
                    DefaultVersion: {
                        locationName: "SetDefaultVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchTemplate: {
                        shape: "Sic",
                        locationName: "launchTemplate"
                    }
                }
            }
        },
        ModifyLocalGatewayRoute: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId" ],
                members: {
                    DestinationCidrBlock: {},
                    LocalGatewayRouteTableId: {},
                    LocalGatewayVirtualInterfaceGroupId: {},
                    NetworkInterfaceId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    DestinationPrefixListId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Route: {
                        shape: "Sjo",
                        locationName: "route"
                    }
                }
            }
        },
        ModifyManagedPrefixList: {
            input: {
                type: "structure",
                required: [ "PrefixListId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PrefixListId: {},
                    CurrentVersion: {
                        type: "long"
                    },
                    PrefixListName: {},
                    AddEntries: {
                        shape: "Sk6",
                        locationName: "AddEntry"
                    },
                    RemoveEntries: {
                        locationName: "RemoveEntry",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Cidr" ],
                            members: {
                                Cidr: {}
                            }
                        }
                    },
                    MaxEntries: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PrefixList: {
                        shape: "Sk9",
                        locationName: "prefixList"
                    }
                }
            }
        },
        ModifyNetworkInterfaceAttribute: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    Attachment: {
                        locationName: "attachment",
                        type: "structure",
                        members: {
                            AttachmentId: {
                                locationName: "attachmentId"
                            },
                            DeleteOnTermination: {
                                locationName: "deleteOnTermination",
                                type: "boolean"
                            }
                        }
                    },
                    Description: {
                        shape: "Sc1",
                        locationName: "description"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sgz",
                        locationName: "SecurityGroupId"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    SourceDestCheck: {
                        shape: "S19c",
                        locationName: "sourceDestCheck"
                    },
                    EnaSrdSpecification: {
                        shape: "S60"
                    },
                    EnablePrimaryIpv6: {
                        type: "boolean"
                    },
                    ConnectionTrackingSpecification: {
                        shape: "Sha"
                    }
                }
            }
        },
        ModifyPrivateDnsNameOptions: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceId: {},
                    PrivateDnsHostnameType: {},
                    EnableResourceNameDnsARecord: {
                        type: "boolean"
                    },
                    EnableResourceNameDnsAAAARecord: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyReservedInstances: {
            input: {
                type: "structure",
                required: [ "ReservedInstancesIds", "TargetConfigurations" ],
                members: {
                    ReservedInstancesIds: {
                        shape: "S1kq",
                        locationName: "ReservedInstancesId"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    TargetConfigurations: {
                        locationName: "ReservedInstancesConfigurationSetItemType",
                        type: "list",
                        member: {
                            shape: "S1lc",
                            locationName: "item"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstancesModificationId: {
                        locationName: "reservedInstancesModificationId"
                    }
                }
            }
        },
        ModifySecurityGroupRules: {
            input: {
                type: "structure",
                required: [ "GroupId", "SecurityGroupRules" ],
                members: {
                    GroupId: {},
                    SecurityGroupRules: {
                        locationName: "SecurityGroupRule",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            required: [ "SecurityGroupRuleId" ],
                            members: {
                                SecurityGroupRuleId: {},
                                SecurityGroupRule: {
                                    type: "structure",
                                    members: {
                                        IpProtocol: {},
                                        FromPort: {
                                            type: "integer"
                                        },
                                        ToPort: {
                                            type: "integer"
                                        },
                                        CidrIpv4: {},
                                        CidrIpv6: {},
                                        PrefixListId: {},
                                        ReferencedGroupId: {},
                                        Description: {}
                                    }
                                }
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifySnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    Attribute: {},
                    CreateVolumePermission: {
                        type: "structure",
                        members: {
                            Add: {
                                shape: "S1mq"
                            },
                            Remove: {
                                shape: "S1mq"
                            }
                        }
                    },
                    GroupNames: {
                        shape: "S1mi",
                        locationName: "UserGroup"
                    },
                    OperationType: {},
                    SnapshotId: {},
                    UserIds: {
                        shape: "S257",
                        locationName: "UserId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        ModifySnapshotTier: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {},
                    StorageTier: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {
                        locationName: "snapshotId"
                    },
                    TieringStartTime: {
                        locationName: "tieringStartTime",
                        type: "timestamp"
                    }
                }
            }
        },
        ModifySpotFleetRequest: {
            input: {
                type: "structure",
                required: [ "SpotFleetRequestId" ],
                members: {
                    ExcessCapacityTerminationPolicy: {
                        locationName: "excessCapacityTerminationPolicy"
                    },
                    LaunchTemplateConfigs: {
                        shape: "S1nx",
                        locationName: "LaunchTemplateConfig"
                    },
                    SpotFleetRequestId: {
                        locationName: "spotFleetRequestId"
                    },
                    TargetCapacity: {
                        locationName: "targetCapacity",
                        type: "integer"
                    },
                    OnDemandTargetCapacity: {
                        type: "integer"
                    },
                    Context: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifySubnetAttribute: {
            input: {
                type: "structure",
                required: [ "SubnetId" ],
                members: {
                    AssignIpv6AddressOnCreation: {
                        shape: "S19c"
                    },
                    MapPublicIpOnLaunch: {
                        shape: "S19c"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    },
                    MapCustomerOwnedIpOnLaunch: {
                        shape: "S19c"
                    },
                    CustomerOwnedIpv4Pool: {},
                    EnableDns64: {
                        shape: "S19c"
                    },
                    PrivateDnsHostnameTypeOnLaunch: {},
                    EnableResourceNameDnsARecordOnLaunch: {
                        shape: "S19c"
                    },
                    EnableResourceNameDnsAAAARecordOnLaunch: {
                        shape: "S19c"
                    },
                    EnableLniAtDeviceIndex: {
                        type: "integer"
                    },
                    DisableLniAtDeviceIndex: {
                        shape: "S19c"
                    }
                }
            }
        },
        ModifyTrafficMirrorFilterNetworkServices: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorFilterId" ],
                members: {
                    TrafficMirrorFilterId: {},
                    AddNetworkServices: {
                        shape: "Soj",
                        locationName: "AddNetworkService"
                    },
                    RemoveNetworkServices: {
                        shape: "Soj",
                        locationName: "RemoveNetworkService"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilter: {
                        shape: "Sod",
                        locationName: "trafficMirrorFilter"
                    }
                }
            }
        },
        ModifyTrafficMirrorFilterRule: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorFilterRuleId" ],
                members: {
                    TrafficMirrorFilterRuleId: {},
                    TrafficDirection: {},
                    RuleNumber: {
                        type: "integer"
                    },
                    RuleAction: {},
                    DestinationPortRange: {
                        shape: "Son"
                    },
                    SourcePortRange: {
                        shape: "Son"
                    },
                    Protocol: {
                        type: "integer"
                    },
                    DestinationCidrBlock: {},
                    SourceCidrBlock: {},
                    Description: {},
                    RemoveFields: {
                        locationName: "RemoveField",
                        type: "list",
                        member: {}
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorFilterRule: {
                        shape: "Sof",
                        locationName: "trafficMirrorFilterRule"
                    }
                }
            }
        },
        ModifyTrafficMirrorSession: {
            input: {
                type: "structure",
                required: [ "TrafficMirrorSessionId" ],
                members: {
                    TrafficMirrorSessionId: {},
                    TrafficMirrorTargetId: {},
                    TrafficMirrorFilterId: {},
                    PacketLength: {
                        type: "integer"
                    },
                    SessionNumber: {
                        type: "integer"
                    },
                    VirtualNetworkId: {
                        type: "integer"
                    },
                    Description: {},
                    RemoveFields: {
                        locationName: "RemoveField",
                        type: "list",
                        member: {}
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrafficMirrorSession: {
                        shape: "Sos",
                        locationName: "trafficMirrorSession"
                    }
                }
            }
        },
        ModifyTransitGateway: {
            input: {
                type: "structure",
                required: [ "TransitGatewayId" ],
                members: {
                    TransitGatewayId: {},
                    Description: {},
                    Options: {
                        type: "structure",
                        members: {
                            AddTransitGatewayCidrBlocks: {
                                shape: "Sp4"
                            },
                            RemoveTransitGatewayCidrBlocks: {
                                shape: "Sp4"
                            },
                            VpnEcmpSupport: {},
                            DnsSupport: {},
                            SecurityGroupReferencingSupport: {},
                            AutoAcceptSharedAttachments: {},
                            DefaultRouteTableAssociation: {},
                            AssociationDefaultRouteTableId: {},
                            DefaultRouteTablePropagation: {},
                            PropagationDefaultRouteTableId: {},
                            AmazonSideAsn: {
                                type: "long"
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGateway: {
                        shape: "Sp6",
                        locationName: "transitGateway"
                    }
                }
            }
        },
        ModifyTransitGatewayPrefixListReference: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "PrefixListId" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    PrefixListId: {},
                    TransitGatewayAttachmentId: {},
                    Blackhole: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPrefixListReference: {
                        shape: "Sq9",
                        locationName: "transitGatewayPrefixListReference"
                    }
                }
            }
        },
        ModifyTransitGatewayVpcAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    AddSubnetIds: {
                        shape: "S57"
                    },
                    RemoveSubnetIds: {
                        shape: "S57"
                    },
                    Options: {
                        type: "structure",
                        members: {
                            DnsSupport: {},
                            SecurityGroupReferencingSupport: {},
                            Ipv6Support: {},
                            ApplianceModeSupport: {}
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayVpcAttachment: {
                        shape: "S16",
                        locationName: "transitGatewayVpcAttachment"
                    }
                }
            }
        },
        ModifyVerifiedAccessEndpoint: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessEndpointId" ],
                members: {
                    VerifiedAccessEndpointId: {},
                    VerifiedAccessGroupId: {},
                    LoadBalancerOptions: {
                        type: "structure",
                        members: {
                            SubnetIds: {
                                locationName: "SubnetId",
                                type: "list",
                                member: {
                                    locationName: "item"
                                }
                            },
                            Protocol: {},
                            Port: {
                                type: "integer"
                            }
                        }
                    },
                    NetworkInterfaceOptions: {
                        type: "structure",
                        members: {
                            Protocol: {},
                            Port: {
                                type: "integer"
                            }
                        }
                    },
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessEndpoint: {
                        shape: "Sra",
                        locationName: "verifiedAccessEndpoint"
                    }
                }
            }
        },
        ModifyVerifiedAccessEndpointPolicy: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessEndpointId" ],
                members: {
                    VerifiedAccessEndpointId: {},
                    PolicyEnabled: {
                        type: "boolean"
                    },
                    PolicyDocument: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SseSpecification: {
                        shape: "Sr8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyEnabled: {
                        locationName: "policyEnabled",
                        type: "boolean"
                    },
                    PolicyDocument: {
                        locationName: "policyDocument"
                    },
                    SseSpecification: {
                        shape: "S6e",
                        locationName: "sseSpecification"
                    }
                }
            }
        },
        ModifyVerifiedAccessGroup: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessGroupId" ],
                members: {
                    VerifiedAccessGroupId: {},
                    VerifiedAccessInstanceId: {},
                    Description: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessGroup: {
                        shape: "Sri",
                        locationName: "verifiedAccessGroup"
                    }
                }
            }
        },
        ModifyVerifiedAccessGroupPolicy: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessGroupId" ],
                members: {
                    VerifiedAccessGroupId: {},
                    PolicyEnabled: {
                        type: "boolean"
                    },
                    PolicyDocument: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SseSpecification: {
                        shape: "Sr8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyEnabled: {
                        locationName: "policyEnabled",
                        type: "boolean"
                    },
                    PolicyDocument: {
                        locationName: "policyDocument"
                    },
                    SseSpecification: {
                        shape: "S6e",
                        locationName: "sseSpecification"
                    }
                }
            }
        },
        ModifyVerifiedAccessInstance: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessInstanceId" ],
                members: {
                    VerifiedAccessInstanceId: {},
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessInstance: {
                        shape: "S6g",
                        locationName: "verifiedAccessInstance"
                    }
                }
            }
        },
        ModifyVerifiedAccessInstanceLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessInstanceId", "AccessLogs" ],
                members: {
                    VerifiedAccessInstanceId: {},
                    AccessLogs: {
                        type: "structure",
                        members: {
                            S3: {
                                type: "structure",
                                required: [ "Enabled" ],
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    },
                                    BucketName: {},
                                    Prefix: {},
                                    BucketOwner: {}
                                }
                            },
                            CloudWatchLogs: {
                                type: "structure",
                                required: [ "Enabled" ],
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    },
                                    LogGroup: {}
                                }
                            },
                            KinesisDataFirehose: {
                                type: "structure",
                                required: [ "Enabled" ],
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    },
                                    DeliveryStream: {}
                                }
                            },
                            LogVersion: {},
                            IncludeTrustContext: {
                                type: "boolean"
                            }
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S1rd",
                        locationName: "loggingConfiguration"
                    }
                }
            }
        },
        ModifyVerifiedAccessTrustProvider: {
            input: {
                type: "structure",
                required: [ "VerifiedAccessTrustProviderId" ],
                members: {
                    VerifiedAccessTrustProviderId: {},
                    OidcOptions: {
                        type: "structure",
                        members: {
                            Issuer: {},
                            AuthorizationEndpoint: {},
                            TokenEndpoint: {},
                            UserInfoEndpoint: {},
                            ClientId: {},
                            ClientSecret: {
                                shape: "S6c"
                            },
                            Scope: {}
                        }
                    },
                    DeviceOptions: {
                        type: "structure",
                        members: {
                            PublicSigningKeyUrl: {}
                        }
                    },
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    SseSpecification: {
                        shape: "Sr8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VerifiedAccessTrustProvider: {
                        shape: "S67",
                        locationName: "verifiedAccessTrustProvider"
                    }
                }
            }
        },
        ModifyVolume: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    VolumeId: {},
                    Size: {
                        type: "integer"
                    },
                    VolumeType: {},
                    Iops: {
                        type: "integer"
                    },
                    Throughput: {
                        type: "integer"
                    },
                    MultiAttachEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeModification: {
                        shape: "S1sh",
                        locationName: "volumeModification"
                    }
                }
            }
        },
        ModifyVolumeAttribute: {
            input: {
                type: "structure",
                required: [ "VolumeId" ],
                members: {
                    AutoEnableIO: {
                        shape: "S19c"
                    },
                    VolumeId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpcAttribute: {
            input: {
                type: "structure",
                required: [ "VpcId" ],
                members: {
                    EnableDnsHostnames: {
                        shape: "S19c"
                    },
                    EnableDnsSupport: {
                        shape: "S19c"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    },
                    EnableNetworkAddressUsageMetrics: {
                        shape: "S19c"
                    }
                }
            }
        },
        ModifyVpcEndpoint: {
            input: {
                type: "structure",
                required: [ "VpcEndpointId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    VpcEndpointId: {},
                    ResetPolicy: {
                        type: "boolean"
                    },
                    PolicyDocument: {},
                    AddRouteTableIds: {
                        shape: "Srx",
                        locationName: "AddRouteTableId"
                    },
                    RemoveRouteTableIds: {
                        shape: "Srx",
                        locationName: "RemoveRouteTableId"
                    },
                    AddSubnetIds: {
                        shape: "Sry",
                        locationName: "AddSubnetId"
                    },
                    RemoveSubnetIds: {
                        shape: "Sry",
                        locationName: "RemoveSubnetId"
                    },
                    AddSecurityGroupIds: {
                        shape: "Srz",
                        locationName: "AddSecurityGroupId"
                    },
                    RemoveSecurityGroupIds: {
                        shape: "Srz",
                        locationName: "RemoveSecurityGroupId"
                    },
                    IpAddressType: {},
                    DnsOptions: {
                        shape: "Ss1"
                    },
                    PrivateDnsEnabled: {
                        type: "boolean"
                    },
                    SubnetConfigurations: {
                        shape: "Ss3",
                        locationName: "SubnetConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpcEndpointConnectionNotification: {
            input: {
                type: "structure",
                required: [ "ConnectionNotificationId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ConnectionNotificationId: {},
                    ConnectionNotificationArn: {},
                    ConnectionEvents: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpcEndpointServiceConfiguration: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    PrivateDnsName: {},
                    RemovePrivateDnsName: {
                        type: "boolean"
                    },
                    AcceptanceRequired: {
                        type: "boolean"
                    },
                    AddNetworkLoadBalancerArns: {
                        shape: "So",
                        locationName: "AddNetworkLoadBalancerArn"
                    },
                    RemoveNetworkLoadBalancerArns: {
                        shape: "So",
                        locationName: "RemoveNetworkLoadBalancerArn"
                    },
                    AddGatewayLoadBalancerArns: {
                        shape: "So",
                        locationName: "AddGatewayLoadBalancerArn"
                    },
                    RemoveGatewayLoadBalancerArns: {
                        shape: "So",
                        locationName: "RemoveGatewayLoadBalancerArn"
                    },
                    AddSupportedIpAddressTypes: {
                        shape: "So",
                        locationName: "AddSupportedIpAddressType"
                    },
                    RemoveSupportedIpAddressTypes: {
                        shape: "So",
                        locationName: "RemoveSupportedIpAddressType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpcEndpointServicePayerResponsibility: {
            input: {
                type: "structure",
                required: [ "ServiceId", "PayerResponsibility" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    PayerResponsibility: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpcEndpointServicePermissions: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    AddAllowedPrincipals: {
                        shape: "So"
                    },
                    RemoveAllowedPrincipals: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddedPrincipals: {
                        locationName: "addedPrincipalSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                PrincipalType: {
                                    locationName: "principalType"
                                },
                                Principal: {
                                    locationName: "principal"
                                },
                                ServicePermissionId: {
                                    locationName: "servicePermissionId"
                                },
                                ServiceId: {
                                    locationName: "serviceId"
                                }
                            }
                        }
                    },
                    ReturnValue: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpcPeeringConnectionOptions: {
            input: {
                type: "structure",
                required: [ "VpcPeeringConnectionId" ],
                members: {
                    AccepterPeeringConnectionOptions: {
                        shape: "S297"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    RequesterPeeringConnectionOptions: {
                        shape: "S297"
                    },
                    VpcPeeringConnectionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccepterPeeringConnectionOptions: {
                        shape: "S299",
                        locationName: "accepterPeeringConnectionOptions"
                    },
                    RequesterPeeringConnectionOptions: {
                        shape: "S299",
                        locationName: "requesterPeeringConnectionOptions"
                    }
                }
            }
        },
        ModifyVpcTenancy: {
            input: {
                type: "structure",
                required: [ "VpcId", "InstanceTenancy" ],
                members: {
                    VpcId: {},
                    InstanceTenancy: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ModifyVpnConnection: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId" ],
                members: {
                    VpnConnectionId: {},
                    TransitGatewayId: {},
                    CustomerGatewayId: {},
                    VpnGatewayId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnection: {
                        shape: "Stm",
                        locationName: "vpnConnection"
                    }
                }
            }
        },
        ModifyVpnConnectionOptions: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId" ],
                members: {
                    VpnConnectionId: {},
                    LocalIpv4NetworkCidr: {},
                    RemoteIpv4NetworkCidr: {},
                    LocalIpv6NetworkCidr: {},
                    RemoteIpv6NetworkCidr: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnection: {
                        shape: "Stm",
                        locationName: "vpnConnection"
                    }
                }
            }
        },
        ModifyVpnTunnelCertificate: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId", "VpnTunnelOutsideIpAddress" ],
                members: {
                    VpnConnectionId: {},
                    VpnTunnelOutsideIpAddress: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnection: {
                        shape: "Stm",
                        locationName: "vpnConnection"
                    }
                }
            }
        },
        ModifyVpnTunnelOptions: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId", "VpnTunnelOutsideIpAddress", "TunnelOptions" ],
                members: {
                    VpnConnectionId: {},
                    VpnTunnelOutsideIpAddress: {},
                    TunnelOptions: {
                        type: "structure",
                        members: {
                            TunnelInsideCidr: {},
                            TunnelInsideIpv6Cidr: {},
                            PreSharedKey: {
                                shape: "St3"
                            },
                            Phase1LifetimeSeconds: {
                                type: "integer"
                            },
                            Phase2LifetimeSeconds: {
                                type: "integer"
                            },
                            RekeyMarginTimeSeconds: {
                                type: "integer"
                            },
                            RekeyFuzzPercentage: {
                                type: "integer"
                            },
                            ReplayWindowSize: {
                                type: "integer"
                            },
                            DPDTimeoutSeconds: {
                                type: "integer"
                            },
                            DPDTimeoutAction: {},
                            Phase1EncryptionAlgorithms: {
                                shape: "St4",
                                locationName: "Phase1EncryptionAlgorithm"
                            },
                            Phase2EncryptionAlgorithms: {
                                shape: "St6",
                                locationName: "Phase2EncryptionAlgorithm"
                            },
                            Phase1IntegrityAlgorithms: {
                                shape: "St8",
                                locationName: "Phase1IntegrityAlgorithm"
                            },
                            Phase2IntegrityAlgorithms: {
                                shape: "Sta",
                                locationName: "Phase2IntegrityAlgorithm"
                            },
                            Phase1DHGroupNumbers: {
                                shape: "Stc",
                                locationName: "Phase1DHGroupNumber"
                            },
                            Phase2DHGroupNumbers: {
                                shape: "Ste",
                                locationName: "Phase2DHGroupNumber"
                            },
                            IKEVersions: {
                                shape: "Stg",
                                locationName: "IKEVersion"
                            },
                            StartupAction: {},
                            LogOptions: {
                                shape: "Sti"
                            },
                            EnableTunnelLifecycleControl: {
                                type: "boolean"
                            }
                        },
                        sensitive: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    SkipTunnelReplacement: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VpnConnection: {
                        shape: "Stm",
                        locationName: "vpnConnection"
                    }
                }
            }
        },
        MonitorInstances: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceMonitorings: {
                        shape: "S29o",
                        locationName: "instancesSet"
                    }
                }
            }
        },
        MoveAddressToVpc: {
            input: {
                type: "structure",
                required: [ "PublicIp" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    PublicIp: {
                        locationName: "publicIp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AllocationId: {
                        locationName: "allocationId"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        MoveByoipCidrToIpam: {
            input: {
                type: "structure",
                required: [ "Cidr", "IpamPoolId", "IpamPoolOwner" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    Cidr: {},
                    IpamPoolId: {},
                    IpamPoolOwner: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "S1y",
                        locationName: "byoipCidr"
                    }
                }
            }
        },
        ProvisionByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {},
                    CidrAuthorizationContext: {
                        type: "structure",
                        required: [ "Message", "Signature" ],
                        members: {
                            Message: {},
                            Signature: {}
                        }
                    },
                    PubliclyAdvertisable: {
                        type: "boolean"
                    },
                    Description: {},
                    DryRun: {
                        type: "boolean"
                    },
                    PoolTagSpecifications: {
                        shape: "S3",
                        locationName: "PoolTagSpecification"
                    },
                    MultiRegion: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "S1y",
                        locationName: "byoipCidr"
                    }
                }
            }
        },
        ProvisionIpamByoasn: {
            input: {
                type: "structure",
                required: [ "IpamId", "Asn", "AsnAuthorizationContext" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamId: {},
                    Asn: {},
                    AsnAuthorizationContext: {
                        type: "structure",
                        required: [ "Message", "Signature" ],
                        members: {
                            Message: {},
                            Signature: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Byoasn: {
                        shape: "Szb",
                        locationName: "byoasn"
                    }
                }
            }
        },
        ProvisionIpamPoolCidr: {
            input: {
                type: "structure",
                required: [ "IpamPoolId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Cidr: {},
                    CidrAuthorizationContext: {
                        type: "structure",
                        members: {
                            Message: {},
                            Signature: {}
                        }
                    },
                    NetmaskLength: {
                        type: "integer"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    IpamPoolCidr: {
                        shape: "Szf",
                        locationName: "ipamPoolCidr"
                    }
                }
            }
        },
        ProvisionPublicIpv4PoolCidr: {
            input: {
                type: "structure",
                required: [ "IpamPoolId", "PoolId", "NetmaskLength" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    PoolId: {},
                    NetmaskLength: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolId: {
                        locationName: "poolId"
                    },
                    PoolAddressRange: {
                        shape: "S1kd",
                        locationName: "poolAddressRange"
                    }
                }
            }
        },
        PurchaseCapacityBlock: {
            input: {
                type: "structure",
                required: [ "CapacityBlockOfferingId", "InstancePlatform" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    CapacityBlockOfferingId: {},
                    InstancePlatform: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CapacityReservation: {
                        shape: "S9x",
                        locationName: "capacityReservation"
                    }
                }
            }
        },
        PurchaseHostReservation: {
            input: {
                type: "structure",
                required: [ "HostIdSet", "OfferingId" ],
                members: {
                    ClientToken: {},
                    CurrencyCode: {},
                    HostIdSet: {
                        shape: "S1zb"
                    },
                    LimitPrice: {},
                    OfferingId: {},
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Purchase: {
                        shape: "S1zd",
                        locationName: "purchase"
                    },
                    TotalHourlyPrice: {
                        locationName: "totalHourlyPrice"
                    },
                    TotalUpfrontPrice: {
                        locationName: "totalUpfrontPrice"
                    }
                }
            }
        },
        PurchaseReservedInstancesOffering: {
            input: {
                type: "structure",
                required: [ "InstanceCount", "ReservedInstancesOfferingId" ],
                members: {
                    InstanceCount: {
                        type: "integer"
                    },
                    ReservedInstancesOfferingId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    LimitPrice: {
                        locationName: "limitPrice",
                        type: "structure",
                        members: {
                            Amount: {
                                locationName: "amount",
                                type: "double"
                            },
                            CurrencyCode: {
                                locationName: "currencyCode"
                            }
                        }
                    },
                    PurchaseTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ReservedInstancesId: {
                        locationName: "reservedInstancesId"
                    }
                }
            }
        },
        PurchaseScheduledInstances: {
            input: {
                type: "structure",
                required: [ "PurchaseRequests" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    PurchaseRequests: {
                        locationName: "PurchaseRequest",
                        type: "list",
                        member: {
                            locationName: "PurchaseRequest",
                            type: "structure",
                            required: [ "InstanceCount", "PurchaseToken" ],
                            members: {
                                InstanceCount: {
                                    type: "integer"
                                },
                                PurchaseToken: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduledInstanceSet: {
                        locationName: "scheduledInstanceSet",
                        type: "list",
                        member: {
                            shape: "S1m7",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        RebootInstances: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        RegisterImage: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    ImageLocation: {},
                    Architecture: {
                        locationName: "architecture"
                    },
                    BlockDeviceMappings: {
                        shape: "Ser",
                        locationName: "BlockDeviceMapping"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    EnaSupport: {
                        locationName: "enaSupport",
                        type: "boolean"
                    },
                    KernelId: {
                        locationName: "kernelId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    BillingProducts: {
                        locationName: "BillingProduct",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    RamdiskId: {
                        locationName: "ramdiskId"
                    },
                    RootDeviceName: {
                        locationName: "rootDeviceName"
                    },
                    SriovNetSupport: {
                        locationName: "sriovNetSupport"
                    },
                    VirtualizationType: {
                        locationName: "virtualizationType"
                    },
                    BootMode: {},
                    TpmSupport: {},
                    UefiData: {},
                    ImdsSupport: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {
                        locationName: "imageId"
                    }
                }
            }
        },
        RegisterInstanceEventNotificationAttributes: {
            input: {
                type: "structure",
                required: [ "InstanceTagAttribute" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceTagAttribute: {
                        type: "structure",
                        members: {
                            IncludeAllTagsOfInstance: {
                                type: "boolean"
                            },
                            InstanceTagKeys: {
                                shape: "Szq",
                                locationName: "InstanceTagKey"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceTagAttribute: {
                        shape: "Szs",
                        locationName: "instanceTagAttribute"
                    }
                }
            }
        },
        RegisterTransitGatewayMulticastGroupMembers: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId", "NetworkInterfaceIds" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    GroupIpAddress: {},
                    NetworkInterfaceIds: {
                        shape: "Szu"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegisteredMulticastGroupMembers: {
                        locationName: "registeredMulticastGroupMembers",
                        type: "structure",
                        members: {
                            TransitGatewayMulticastDomainId: {
                                locationName: "transitGatewayMulticastDomainId"
                            },
                            RegisteredNetworkInterfaceIds: {
                                shape: "So",
                                locationName: "registeredNetworkInterfaceIds"
                            },
                            GroupIpAddress: {
                                locationName: "groupIpAddress"
                            }
                        }
                    }
                }
            }
        },
        RegisterTransitGatewayMulticastGroupSources: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId", "NetworkInterfaceIds" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    GroupIpAddress: {},
                    NetworkInterfaceIds: {
                        shape: "Szu"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegisteredMulticastGroupSources: {
                        locationName: "registeredMulticastGroupSources",
                        type: "structure",
                        members: {
                            TransitGatewayMulticastDomainId: {
                                locationName: "transitGatewayMulticastDomainId"
                            },
                            RegisteredNetworkInterfaceIds: {
                                shape: "So",
                                locationName: "registeredNetworkInterfaceIds"
                            },
                            GroupIpAddress: {
                                locationName: "groupIpAddress"
                            }
                        }
                    }
                }
            }
        },
        RejectTransitGatewayMulticastDomainAssociations: {
            input: {
                type: "structure",
                members: {
                    TransitGatewayMulticastDomainId: {},
                    TransitGatewayAttachmentId: {},
                    SubnetIds: {
                        shape: "So"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        shape: "Sq",
                        locationName: "associations"
                    }
                }
            }
        },
        RejectTransitGatewayPeeringAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayPeeringAttachment: {
                        shape: "Sx",
                        locationName: "transitGatewayPeeringAttachment"
                    }
                }
            }
        },
        RejectTransitGatewayVpcAttachment: {
            input: {
                type: "structure",
                required: [ "TransitGatewayAttachmentId" ],
                members: {
                    TransitGatewayAttachmentId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransitGatewayVpcAttachment: {
                        shape: "S16",
                        locationName: "transitGatewayVpcAttachment"
                    }
                }
            }
        },
        RejectVpcEndpointConnections: {
            input: {
                type: "structure",
                required: [ "ServiceId", "VpcEndpointIds" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {},
                    VpcEndpointIds: {
                        shape: "S1e",
                        locationName: "VpcEndpointId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Unsuccessful: {
                        shape: "S1h",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        RejectVpcPeeringConnection: {
            input: {
                type: "structure",
                required: [ "VpcPeeringConnectionId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcPeeringConnectionId: {
                        locationName: "vpcPeeringConnectionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ReleaseAddress: {
            input: {
                type: "structure",
                members: {
                    AllocationId: {},
                    PublicIp: {},
                    NetworkBorderGroup: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        ReleaseHosts: {
            input: {
                type: "structure",
                required: [ "HostIds" ],
                members: {
                    HostIds: {
                        shape: "S17g",
                        locationName: "hostId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Successful: {
                        shape: "S2f",
                        locationName: "successful"
                    },
                    Unsuccessful: {
                        shape: "S25g",
                        locationName: "unsuccessful"
                    }
                }
            }
        },
        ReleaseIpamPoolAllocation: {
            input: {
                type: "structure",
                required: [ "IpamPoolId", "Cidr", "IpamPoolAllocationId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    IpamPoolId: {},
                    Cidr: {},
                    IpamPoolAllocationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Success: {
                        locationName: "success",
                        type: "boolean"
                    }
                }
            }
        },
        ReplaceIamInstanceProfileAssociation: {
            input: {
                type: "structure",
                required: [ "IamInstanceProfile", "AssociationId" ],
                members: {
                    IamInstanceProfile: {
                        shape: "S3v"
                    },
                    AssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IamInstanceProfileAssociation: {
                        shape: "S3x",
                        locationName: "iamInstanceProfileAssociation"
                    }
                }
            }
        },
        ReplaceNetworkAclAssociation: {
            input: {
                type: "structure",
                required: [ "AssociationId", "NetworkAclId" ],
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkAclId: {
                        locationName: "networkAclId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NewAssociationId: {
                        locationName: "newAssociationId"
                    }
                }
            }
        },
        ReplaceNetworkAclEntry: {
            input: {
                type: "structure",
                required: [ "Egress", "NetworkAclId", "Protocol", "RuleAction", "RuleNumber" ],
                members: {
                    CidrBlock: {
                        locationName: "cidrBlock"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Egress: {
                        locationName: "egress",
                        type: "boolean"
                    },
                    IcmpTypeCode: {
                        shape: "Sko",
                        locationName: "Icmp"
                    },
                    Ipv6CidrBlock: {
                        locationName: "ipv6CidrBlock"
                    },
                    NetworkAclId: {
                        locationName: "networkAclId"
                    },
                    PortRange: {
                        shape: "Skp",
                        locationName: "portRange"
                    },
                    Protocol: {
                        locationName: "protocol"
                    },
                    RuleAction: {
                        locationName: "ruleAction"
                    },
                    RuleNumber: {
                        locationName: "ruleNumber",
                        type: "integer"
                    }
                }
            }
        },
        ReplaceRoute: {
            input: {
                type: "structure",
                required: [ "RouteTableId" ],
                members: {
                    DestinationCidrBlock: {
                        locationName: "destinationCidrBlock"
                    },
                    DestinationIpv6CidrBlock: {
                        locationName: "destinationIpv6CidrBlock"
                    },
                    DestinationPrefixListId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    VpcEndpointId: {},
                    EgressOnlyInternetGatewayId: {
                        locationName: "egressOnlyInternetGatewayId"
                    },
                    GatewayId: {
                        locationName: "gatewayId"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    LocalTarget: {
                        type: "boolean"
                    },
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    },
                    TransitGatewayId: {},
                    LocalGatewayId: {},
                    CarrierGatewayId: {},
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    RouteTableId: {
                        locationName: "routeTableId"
                    },
                    VpcPeeringConnectionId: {
                        locationName: "vpcPeeringConnectionId"
                    },
                    CoreNetworkArn: {}
                }
            }
        },
        ReplaceRouteTableAssociation: {
            input: {
                type: "structure",
                required: [ "AssociationId", "RouteTableId" ],
                members: {
                    AssociationId: {
                        locationName: "associationId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    RouteTableId: {
                        locationName: "routeTableId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NewAssociationId: {
                        locationName: "newAssociationId"
                    },
                    AssociationState: {
                        shape: "S4x",
                        locationName: "associationState"
                    }
                }
            }
        },
        ReplaceTransitGatewayRoute: {
            input: {
                type: "structure",
                required: [ "DestinationCidrBlock", "TransitGatewayRouteTableId" ],
                members: {
                    DestinationCidrBlock: {},
                    TransitGatewayRouteTableId: {},
                    TransitGatewayAttachmentId: {},
                    Blackhole: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Route: {
                        shape: "Sqe",
                        locationName: "route"
                    }
                }
            }
        },
        ReplaceVpnTunnel: {
            input: {
                type: "structure",
                required: [ "VpnConnectionId", "VpnTunnelOutsideIpAddress" ],
                members: {
                    VpnConnectionId: {},
                    VpnTunnelOutsideIpAddress: {},
                    ApplyPendingMaintenance: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ReportInstanceStatus: {
            input: {
                type: "structure",
                required: [ "Instances", "ReasonCodes", "Status" ],
                members: {
                    Description: {
                        locationName: "description"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    EndTime: {
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    Instances: {
                        shape: "S128",
                        locationName: "instanceId"
                    },
                    ReasonCodes: {
                        locationName: "reasonCode",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    StartTime: {
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        RequestSpotFleet: {
            input: {
                type: "structure",
                required: [ "SpotFleetRequestConfig" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    SpotFleetRequestConfig: {
                        shape: "S1ni",
                        locationName: "spotFleetRequestConfig"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpotFleetRequestId: {
                        locationName: "spotFleetRequestId"
                    }
                }
            }
        },
        RequestSpotInstances: {
            input: {
                type: "structure",
                members: {
                    AvailabilityZoneGroup: {
                        locationName: "availabilityZoneGroup"
                    },
                    BlockDurationMinutes: {
                        locationName: "blockDurationMinutes",
                        type: "integer"
                    },
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceCount: {
                        locationName: "instanceCount",
                        type: "integer"
                    },
                    LaunchGroup: {
                        locationName: "launchGroup"
                    },
                    LaunchSpecification: {
                        type: "structure",
                        members: {
                            SecurityGroupIds: {
                                locationName: "SecurityGroupId",
                                type: "list",
                                member: {
                                    locationName: "item"
                                }
                            },
                            SecurityGroups: {
                                locationName: "SecurityGroup",
                                type: "list",
                                member: {
                                    locationName: "item"
                                }
                            },
                            AddressingType: {
                                locationName: "addressingType"
                            },
                            BlockDeviceMappings: {
                                shape: "S185",
                                locationName: "blockDeviceMapping"
                            },
                            EbsOptimized: {
                                locationName: "ebsOptimized",
                                type: "boolean"
                            },
                            IamInstanceProfile: {
                                shape: "S3v",
                                locationName: "iamInstanceProfile"
                            },
                            ImageId: {
                                locationName: "imageId"
                            },
                            InstanceType: {
                                locationName: "instanceType"
                            },
                            KernelId: {
                                locationName: "kernelId"
                            },
                            KeyName: {
                                locationName: "keyName"
                            },
                            Monitoring: {
                                shape: "S1od",
                                locationName: "monitoring"
                            },
                            NetworkInterfaces: {
                                shape: "S1ns",
                                locationName: "NetworkInterface"
                            },
                            Placement: {
                                shape: "S1nu",
                                locationName: "placement"
                            },
                            RamdiskId: {
                                locationName: "ramdiskId"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            UserData: {
                                shape: "Sgo",
                                locationName: "userData"
                            }
                        }
                    },
                    SpotPrice: {
                        locationName: "spotPrice"
                    },
                    Type: {
                        locationName: "type"
                    },
                    ValidFrom: {
                        locationName: "validFrom",
                        type: "timestamp"
                    },
                    ValidUntil: {
                        locationName: "validUntil",
                        type: "timestamp"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    InstanceInterruptionBehavior: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SpotInstanceRequests: {
                        shape: "S1oa",
                        locationName: "spotInstanceRequestSet"
                    }
                }
            }
        },
        ResetAddressAttribute: {
            input: {
                type: "structure",
                required: [ "AllocationId", "Attribute" ],
                members: {
                    AllocationId: {},
                    Attribute: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Address: {
                        shape: "S10q",
                        locationName: "address"
                    }
                }
            }
        },
        ResetEbsDefaultKmsKeyId: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KmsKeyId: {
                        locationName: "kmsKeyId"
                    }
                }
            }
        },
        ResetFpgaImageAttribute: {
            input: {
                type: "structure",
                required: [ "FpgaImageId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    FpgaImageId: {},
                    Attribute: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        ResetImageAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "ImageId" ],
                members: {
                    Attribute: {},
                    ImageId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        ResetInstanceAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "InstanceId" ],
                members: {
                    Attribute: {
                        locationName: "attribute"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    }
                }
            }
        },
        ResetNetworkInterfaceAttribute: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    SourceDestCheck: {
                        locationName: "sourceDestCheck"
                    }
                }
            }
        },
        ResetSnapshotAttribute: {
            input: {
                type: "structure",
                required: [ "Attribute", "SnapshotId" ],
                members: {
                    Attribute: {},
                    SnapshotId: {},
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            }
        },
        RestoreAddressToClassic: {
            input: {
                type: "structure",
                required: [ "PublicIp" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    PublicIp: {
                        locationName: "publicIp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PublicIp: {
                        locationName: "publicIp"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        RestoreImageFromRecycleBin: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        RestoreManagedPrefixListVersion: {
            input: {
                type: "structure",
                required: [ "PrefixListId", "PreviousVersion", "CurrentVersion" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    PrefixListId: {},
                    PreviousVersion: {
                        type: "long"
                    },
                    CurrentVersion: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PrefixList: {
                        shape: "Sk9",
                        locationName: "prefixList"
                    }
                }
            }
        },
        RestoreSnapshotFromRecycleBin: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {
                        locationName: "snapshotId"
                    },
                    OutpostArn: {
                        locationName: "outpostArn"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Encrypted: {
                        locationName: "encrypted",
                        type: "boolean"
                    },
                    OwnerId: {
                        locationName: "ownerId"
                    },
                    Progress: {
                        locationName: "progress"
                    },
                    StartTime: {
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    State: {
                        locationName: "status"
                    },
                    VolumeId: {
                        locationName: "volumeId"
                    },
                    VolumeSize: {
                        locationName: "volumeSize",
                        type: "integer"
                    },
                    SseType: {
                        locationName: "sseType"
                    }
                }
            }
        },
        RestoreSnapshotTier: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {},
                    TemporaryRestoreDays: {
                        type: "integer"
                    },
                    PermanentRestore: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {
                        locationName: "snapshotId"
                    },
                    RestoreStartTime: {
                        locationName: "restoreStartTime",
                        type: "timestamp"
                    },
                    RestoreDuration: {
                        locationName: "restoreDuration",
                        type: "integer"
                    },
                    IsPermanentRestore: {
                        locationName: "isPermanentRestore",
                        type: "boolean"
                    }
                }
            }
        },
        RevokeClientVpnIngress: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId", "TargetNetworkCidr" ],
                members: {
                    ClientVpnEndpointId: {},
                    TargetNetworkCidr: {},
                    AccessGroupId: {},
                    RevokeAllGroups: {
                        type: "boolean"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "S6u",
                        locationName: "status"
                    }
                }
            }
        },
        RevokeSecurityGroupEgress: {
            input: {
                type: "structure",
                required: [ "GroupId" ],
                members: {
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    GroupId: {
                        locationName: "groupId"
                    },
                    IpPermissions: {
                        shape: "S6x",
                        locationName: "ipPermissions"
                    },
                    SecurityGroupRuleIds: {
                        shape: "S1me",
                        locationName: "SecurityGroupRuleId"
                    },
                    CidrIp: {
                        locationName: "cidrIp"
                    },
                    FromPort: {
                        locationName: "fromPort",
                        type: "integer"
                    },
                    IpProtocol: {
                        locationName: "ipProtocol"
                    },
                    ToPort: {
                        locationName: "toPort",
                        type: "integer"
                    },
                    SourceSecurityGroupName: {
                        locationName: "sourceSecurityGroupName"
                    },
                    SourceSecurityGroupOwnerId: {
                        locationName: "sourceSecurityGroupOwnerId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    },
                    UnknownIpPermissions: {
                        shape: "S6x",
                        locationName: "unknownIpPermissionSet"
                    }
                }
            }
        },
        RevokeSecurityGroupIngress: {
            input: {
                type: "structure",
                members: {
                    CidrIp: {},
                    FromPort: {
                        type: "integer"
                    },
                    GroupId: {},
                    GroupName: {},
                    IpPermissions: {
                        shape: "S6x"
                    },
                    IpProtocol: {},
                    SourceSecurityGroupName: {},
                    SourceSecurityGroupOwnerId: {},
                    ToPort: {
                        type: "integer"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    SecurityGroupRuleIds: {
                        shape: "S1me",
                        locationName: "SecurityGroupRuleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    },
                    UnknownIpPermissions: {
                        shape: "S6x",
                        locationName: "unknownIpPermissionSet"
                    }
                }
            }
        },
        RunInstances: {
            input: {
                type: "structure",
                required: [ "MaxCount", "MinCount" ],
                members: {
                    BlockDeviceMappings: {
                        shape: "Ser",
                        locationName: "BlockDeviceMapping"
                    },
                    ImageId: {},
                    InstanceType: {},
                    Ipv6AddressCount: {
                        type: "integer"
                    },
                    Ipv6Addresses: {
                        shape: "Siq",
                        locationName: "Ipv6Address"
                    },
                    KernelId: {},
                    KeyName: {},
                    MaxCount: {
                        type: "integer"
                    },
                    MinCount: {
                        type: "integer"
                    },
                    Monitoring: {
                        shape: "S1od"
                    },
                    Placement: {
                        shape: "Scr"
                    },
                    RamdiskId: {},
                    SecurityGroupIds: {
                        shape: "Sgz",
                        locationName: "SecurityGroupId"
                    },
                    SecurityGroups: {
                        shape: "Shn",
                        locationName: "SecurityGroup"
                    },
                    SubnetId: {},
                    UserData: {
                        type: "string",
                        sensitive: true
                    },
                    AdditionalInfo: {
                        locationName: "additionalInfo"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    DisableApiTermination: {
                        locationName: "disableApiTermination",
                        type: "boolean"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    EbsOptimized: {
                        locationName: "ebsOptimized",
                        type: "boolean"
                    },
                    IamInstanceProfile: {
                        shape: "S3v",
                        locationName: "iamInstanceProfile"
                    },
                    InstanceInitiatedShutdownBehavior: {
                        locationName: "instanceInitiatedShutdownBehavior"
                    },
                    NetworkInterfaces: {
                        shape: "S1ns",
                        locationName: "networkInterface"
                    },
                    PrivateIpAddress: {
                        locationName: "privateIpAddress"
                    },
                    ElasticGpuSpecification: {
                        type: "list",
                        member: {
                            shape: "Shj",
                            locationName: "item"
                        }
                    },
                    ElasticInferenceAccelerators: {
                        locationName: "ElasticInferenceAccelerator",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            required: [ "Type" ],
                            members: {
                                Type: {},
                                Count: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    LaunchTemplate: {
                        type: "structure",
                        members: {
                            LaunchTemplateId: {},
                            LaunchTemplateName: {},
                            Version: {}
                        }
                    },
                    InstanceMarketOptions: {
                        type: "structure",
                        members: {
                            MarketType: {},
                            SpotOptions: {
                                type: "structure",
                                members: {
                                    MaxPrice: {},
                                    SpotInstanceType: {},
                                    BlockDurationMinutes: {
                                        type: "integer"
                                    },
                                    ValidUntil: {
                                        type: "timestamp"
                                    },
                                    InstanceInterruptionBehavior: {}
                                }
                            }
                        }
                    },
                    CreditSpecification: {
                        shape: "Sht"
                    },
                    CpuOptions: {
                        type: "structure",
                        members: {
                            CoreCount: {
                                type: "integer"
                            },
                            ThreadsPerCore: {
                                type: "integer"
                            },
                            AmdSevSnp: {}
                        }
                    },
                    CapacityReservationSpecification: {
                        shape: "S25t"
                    },
                    HibernationOptions: {
                        type: "structure",
                        members: {
                            Configured: {
                                type: "boolean"
                            }
                        }
                    },
                    LicenseSpecifications: {
                        locationName: "LicenseSpecification",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                LicenseConfigurationArn: {}
                            }
                        }
                    },
                    MetadataOptions: {
                        type: "structure",
                        members: {
                            HttpTokens: {},
                            HttpPutResponseHopLimit: {
                                type: "integer"
                            },
                            HttpEndpoint: {},
                            HttpProtocolIpv6: {},
                            InstanceMetadataTags: {}
                        }
                    },
                    EnclaveOptions: {
                        type: "structure",
                        members: {
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    },
                    PrivateDnsNameOptions: {
                        type: "structure",
                        members: {
                            HostnameType: {},
                            EnableResourceNameDnsARecord: {
                                type: "boolean"
                            },
                            EnableResourceNameDnsAAAARecord: {
                                type: "boolean"
                            }
                        }
                    },
                    MaintenanceOptions: {
                        type: "structure",
                        members: {
                            AutoRecovery: {}
                        }
                    },
                    DisableApiStop: {
                        type: "boolean"
                    },
                    EnablePrimaryIpv6: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1du"
            }
        },
        RunScheduledInstances: {
            input: {
                type: "structure",
                required: [ "LaunchSpecification", "ScheduledInstanceId" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    InstanceCount: {
                        type: "integer"
                    },
                    LaunchSpecification: {
                        type: "structure",
                        required: [ "ImageId" ],
                        members: {
                            BlockDeviceMappings: {
                                locationName: "BlockDeviceMapping",
                                type: "list",
                                member: {
                                    locationName: "BlockDeviceMapping",
                                    type: "structure",
                                    members: {
                                        DeviceName: {},
                                        Ebs: {
                                            type: "structure",
                                            members: {
                                                DeleteOnTermination: {
                                                    type: "boolean"
                                                },
                                                Encrypted: {
                                                    type: "boolean"
                                                },
                                                Iops: {
                                                    type: "integer"
                                                },
                                                SnapshotId: {},
                                                VolumeSize: {
                                                    type: "integer"
                                                },
                                                VolumeType: {}
                                            }
                                        },
                                        NoDevice: {},
                                        VirtualName: {}
                                    }
                                }
                            },
                            EbsOptimized: {
                                type: "boolean"
                            },
                            IamInstanceProfile: {
                                type: "structure",
                                members: {
                                    Arn: {},
                                    Name: {}
                                }
                            },
                            ImageId: {},
                            InstanceType: {},
                            KernelId: {},
                            KeyName: {},
                            Monitoring: {
                                type: "structure",
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            },
                            NetworkInterfaces: {
                                locationName: "NetworkInterface",
                                type: "list",
                                member: {
                                    locationName: "NetworkInterface",
                                    type: "structure",
                                    members: {
                                        AssociatePublicIpAddress: {
                                            type: "boolean"
                                        },
                                        DeleteOnTermination: {
                                            type: "boolean"
                                        },
                                        Description: {},
                                        DeviceIndex: {
                                            type: "integer"
                                        },
                                        Groups: {
                                            shape: "S2di",
                                            locationName: "Group"
                                        },
                                        Ipv6AddressCount: {
                                            type: "integer"
                                        },
                                        Ipv6Addresses: {
                                            locationName: "Ipv6Address",
                                            type: "list",
                                            member: {
                                                locationName: "Ipv6Address",
                                                type: "structure",
                                                members: {
                                                    Ipv6Address: {}
                                                }
                                            }
                                        },
                                        NetworkInterfaceId: {},
                                        PrivateIpAddress: {},
                                        PrivateIpAddressConfigs: {
                                            locationName: "PrivateIpAddressConfig",
                                            type: "list",
                                            member: {
                                                locationName: "PrivateIpAddressConfigSet",
                                                type: "structure",
                                                members: {
                                                    Primary: {
                                                        type: "boolean"
                                                    },
                                                    PrivateIpAddress: {}
                                                }
                                            }
                                        },
                                        SecondaryPrivateIpAddressCount: {
                                            type: "integer"
                                        },
                                        SubnetId: {}
                                    }
                                }
                            },
                            Placement: {
                                type: "structure",
                                members: {
                                    AvailabilityZone: {},
                                    GroupName: {}
                                }
                            },
                            RamdiskId: {},
                            SecurityGroupIds: {
                                shape: "S2di",
                                locationName: "SecurityGroupId"
                            },
                            SubnetId: {},
                            UserData: {}
                        },
                        sensitive: true
                    },
                    ScheduledInstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceIdSet: {
                        locationName: "instanceIdSet",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    }
                }
            }
        },
        SearchLocalGatewayRoutes: {
            input: {
                type: "structure",
                required: [ "LocalGatewayRouteTableId" ],
                members: {
                    LocalGatewayRouteTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Routes: {
                        locationName: "routeSet",
                        type: "list",
                        member: {
                            shape: "Sjo",
                            locationName: "item"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        SearchTransitGatewayMulticastGroups: {
            input: {
                type: "structure",
                required: [ "TransitGatewayMulticastDomainId" ],
                members: {
                    TransitGatewayMulticastDomainId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MulticastGroups: {
                        locationName: "multicastGroups",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                GroupIpAddress: {
                                    locationName: "groupIpAddress"
                                },
                                TransitGatewayAttachmentId: {
                                    locationName: "transitGatewayAttachmentId"
                                },
                                SubnetId: {
                                    locationName: "subnetId"
                                },
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                ResourceType: {
                                    locationName: "resourceType"
                                },
                                ResourceOwnerId: {
                                    locationName: "resourceOwnerId"
                                },
                                NetworkInterfaceId: {
                                    locationName: "networkInterfaceId"
                                },
                                GroupMember: {
                                    locationName: "groupMember",
                                    type: "boolean"
                                },
                                GroupSource: {
                                    locationName: "groupSource",
                                    type: "boolean"
                                },
                                MemberType: {
                                    locationName: "memberType"
                                },
                                SourceType: {
                                    locationName: "sourceType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        SearchTransitGatewayRoutes: {
            input: {
                type: "structure",
                required: [ "TransitGatewayRouteTableId", "Filters" ],
                members: {
                    TransitGatewayRouteTableId: {},
                    Filters: {
                        shape: "S10d",
                        locationName: "Filter"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Routes: {
                        locationName: "routeSet",
                        type: "list",
                        member: {
                            shape: "Sqe",
                            locationName: "item"
                        }
                    },
                    AdditionalRoutesAvailable: {
                        locationName: "additionalRoutesAvailable",
                        type: "boolean"
                    }
                }
            }
        },
        SendDiagnosticInterrupt: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            }
        },
        StartInstances: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    AdditionalInfo: {
                        locationName: "additionalInfo"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StartingInstances: {
                        shape: "S2e6",
                        locationName: "instancesSet"
                    }
                }
            }
        },
        StartNetworkInsightsAccessScopeAnalysis: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsAccessScopeId", "ClientToken" ],
                members: {
                    NetworkInsightsAccessScopeId: {},
                    DryRun: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAccessScopeAnalysis: {
                        shape: "S1hz",
                        locationName: "networkInsightsAccessScopeAnalysis"
                    }
                }
            }
        },
        StartNetworkInsightsAnalysis: {
            input: {
                type: "structure",
                required: [ "NetworkInsightsPathId", "ClientToken" ],
                members: {
                    NetworkInsightsPathId: {},
                    AdditionalAccounts: {
                        shape: "So",
                        locationName: "AdditionalAccount"
                    },
                    FilterInArns: {
                        shape: "S1ib",
                        locationName: "FilterInArn"
                    },
                    DryRun: {
                        type: "boolean"
                    },
                    TagSpecifications: {
                        shape: "S3",
                        locationName: "TagSpecification"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInsightsAnalysis: {
                        shape: "S1ia",
                        locationName: "networkInsightsAnalysis"
                    }
                }
            }
        },
        StartVpcEndpointServicePrivateDnsVerification: {
            input: {
                type: "structure",
                required: [ "ServiceId" ],
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    ServiceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ReturnValue: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        StopInstances: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    Hibernate: {
                        type: "boolean"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    },
                    Force: {
                        locationName: "force",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StoppingInstances: {
                        shape: "S2e6",
                        locationName: "instancesSet"
                    }
                }
            }
        },
        TerminateClientVpnConnections: {
            input: {
                type: "structure",
                required: [ "ClientVpnEndpointId" ],
                members: {
                    ClientVpnEndpointId: {},
                    ConnectionId: {},
                    Username: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientVpnEndpointId: {
                        locationName: "clientVpnEndpointId"
                    },
                    Username: {
                        locationName: "username"
                    },
                    ConnectionStatuses: {
                        locationName: "connectionStatuses",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ConnectionId: {
                                    locationName: "connectionId"
                                },
                                PreviousStatus: {
                                    shape: "S12n",
                                    locationName: "previousStatus"
                                },
                                CurrentStatus: {
                                    shape: "S12n",
                                    locationName: "currentStatus"
                                }
                            }
                        }
                    }
                }
            }
        },
        TerminateInstances: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TerminatingInstances: {
                        shape: "S2e6",
                        locationName: "instancesSet"
                    }
                }
            }
        },
        UnassignIpv6Addresses: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    Ipv6Addresses: {
                        shape: "S2v",
                        locationName: "ipv6Addresses"
                    },
                    Ipv6Prefixes: {
                        shape: "S2w",
                        locationName: "Ipv6Prefix"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    UnassignedIpv6Addresses: {
                        shape: "S2v",
                        locationName: "unassignedIpv6Addresses"
                    },
                    UnassignedIpv6Prefixes: {
                        shape: "S2w",
                        locationName: "unassignedIpv6PrefixSet"
                    }
                }
            }
        },
        UnassignPrivateIpAddresses: {
            input: {
                type: "structure",
                required: [ "NetworkInterfaceId" ],
                members: {
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    PrivateIpAddresses: {
                        shape: "S30",
                        locationName: "privateIpAddress"
                    },
                    Ipv4Prefixes: {
                        shape: "S2w",
                        locationName: "Ipv4Prefix"
                    }
                }
            }
        },
        UnassignPrivateNatGatewayAddress: {
            input: {
                type: "structure",
                required: [ "NatGatewayId", "PrivateIpAddresses" ],
                members: {
                    NatGatewayId: {},
                    PrivateIpAddresses: {
                        shape: "S38",
                        locationName: "PrivateIpAddress"
                    },
                    MaxDrainDurationSeconds: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NatGatewayId: {
                        locationName: "natGatewayId"
                    },
                    NatGatewayAddresses: {
                        shape: "S3b",
                        locationName: "natGatewayAddressSet"
                    }
                }
            }
        },
        UnlockSnapshot: {
            input: {
                type: "structure",
                required: [ "SnapshotId" ],
                members: {
                    SnapshotId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {
                        locationName: "snapshotId"
                    }
                }
            }
        },
        UnmonitorInstances: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "S128",
                        locationName: "InstanceId"
                    },
                    DryRun: {
                        locationName: "dryRun",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceMonitorings: {
                        shape: "S29o",
                        locationName: "instancesSet"
                    }
                }
            }
        },
        UpdateSecurityGroupRuleDescriptionsEgress: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    GroupId: {},
                    GroupName: {},
                    IpPermissions: {
                        shape: "S6x"
                    },
                    SecurityGroupRuleDescriptions: {
                        shape: "S2ew",
                        locationName: "SecurityGroupRuleDescription"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        UpdateSecurityGroupRuleDescriptionsIngress: {
            input: {
                type: "structure",
                members: {
                    DryRun: {
                        type: "boolean"
                    },
                    GroupId: {},
                    GroupName: {},
                    IpPermissions: {
                        shape: "S6x"
                    },
                    SecurityGroupRuleDescriptions: {
                        shape: "S2ew",
                        locationName: "SecurityGroupRuleDescription"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Return: {
                        locationName: "return",
                        type: "boolean"
                    }
                }
            }
        },
        WithdrawByoipCidr: {
            input: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ByoipCidr: {
                        shape: "S1y",
                        locationName: "byoipCidr"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    ResourceType: {
                        locationName: "resourceType"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "Tag"
                    }
                }
            }
        },
        S6: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Key: {
                        locationName: "key"
                    },
                    Value: {
                        locationName: "value"
                    }
                }
            }
        },
        Sa: {
            type: "structure",
            members: {
                PublicIp: {
                    locationName: "publicIp"
                },
                AllocationId: {
                    locationName: "allocationId"
                },
                TransferAccountId: {
                    locationName: "transferAccountId"
                },
                TransferOfferExpirationTimestamp: {
                    locationName: "transferOfferExpirationTimestamp",
                    type: "timestamp"
                },
                TransferOfferAcceptedTimestamp: {
                    locationName: "transferOfferAcceptedTimestamp",
                    type: "timestamp"
                },
                AddressTransferStatus: {
                    locationName: "addressTransferStatus"
                }
            }
        },
        Se: {
            type: "list",
            member: {
                locationName: "ReservedInstanceId"
            }
        },
        Sg: {
            type: "list",
            member: {
                locationName: "TargetConfigurationRequest",
                type: "structure",
                required: [ "OfferingId" ],
                members: {
                    InstanceCount: {
                        type: "integer"
                    },
                    OfferingId: {}
                }
            }
        },
        So: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sq: {
            type: "structure",
            members: {
                TransitGatewayMulticastDomainId: {
                    locationName: "transitGatewayMulticastDomainId"
                },
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                ResourceOwnerId: {
                    locationName: "resourceOwnerId"
                },
                Subnets: {
                    locationName: "subnets",
                    type: "list",
                    member: {
                        shape: "St",
                        locationName: "item"
                    }
                }
            }
        },
        St: {
            type: "structure",
            members: {
                SubnetId: {
                    locationName: "subnetId"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                AccepterTransitGatewayAttachmentId: {
                    locationName: "accepterTransitGatewayAttachmentId"
                },
                RequesterTgwInfo: {
                    shape: "Sy",
                    locationName: "requesterTgwInfo"
                },
                AccepterTgwInfo: {
                    shape: "Sy",
                    locationName: "accepterTgwInfo"
                },
                Options: {
                    locationName: "options",
                    type: "structure",
                    members: {
                        DynamicRouting: {
                            locationName: "dynamicRouting"
                        }
                    }
                },
                Status: {
                    locationName: "status",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                State: {
                    locationName: "state"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                CoreNetworkId: {
                    locationName: "coreNetworkId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Region: {
                    locationName: "region"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                VpcOwnerId: {
                    locationName: "vpcOwnerId"
                },
                State: {
                    locationName: "state"
                },
                SubnetIds: {
                    shape: "So",
                    locationName: "subnetIds"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Options: {
                    locationName: "options",
                    type: "structure",
                    members: {
                        DnsSupport: {
                            locationName: "dnsSupport"
                        },
                        SecurityGroupReferencingSupport: {
                            locationName: "securityGroupReferencingSupport"
                        },
                        Ipv6Support: {
                            locationName: "ipv6Support"
                        },
                        ApplianceModeSupport: {
                            locationName: "applianceModeSupport"
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S1e: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1h: {
            type: "list",
            member: {
                shape: "S1i",
                locationName: "item"
            }
        },
        S1i: {
            type: "structure",
            members: {
                Error: {
                    locationName: "error",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                ResourceId: {
                    locationName: "resourceId"
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                AccepterVpcInfo: {
                    shape: "S1o",
                    locationName: "accepterVpcInfo"
                },
                ExpirationTime: {
                    locationName: "expirationTime",
                    type: "timestamp"
                },
                RequesterVpcInfo: {
                    shape: "S1o",
                    locationName: "requesterVpcInfo"
                },
                Status: {
                    locationName: "status",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                VpcPeeringConnectionId: {
                    locationName: "vpcPeeringConnectionId"
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                CidrBlock: {
                    locationName: "cidrBlock"
                },
                Ipv6CidrBlockSet: {
                    locationName: "ipv6CidrBlockSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Ipv6CidrBlock: {
                                locationName: "ipv6CidrBlock"
                            }
                        }
                    }
                },
                CidrBlockSet: {
                    locationName: "cidrBlockSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            CidrBlock: {
                                locationName: "cidrBlock"
                            }
                        }
                    }
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                PeeringOptions: {
                    locationName: "peeringOptions",
                    type: "structure",
                    members: {
                        AllowDnsResolutionFromRemoteVpc: {
                            locationName: "allowDnsResolutionFromRemoteVpc",
                            type: "boolean"
                        },
                        AllowEgressFromLocalClassicLinkToRemoteVpc: {
                            locationName: "allowEgressFromLocalClassicLinkToRemoteVpc",
                            type: "boolean"
                        },
                        AllowEgressFromLocalVpcToRemoteClassicLink: {
                            locationName: "allowEgressFromLocalVpcToRemoteClassicLink",
                            type: "boolean"
                        }
                    }
                },
                VpcId: {
                    locationName: "vpcId"
                },
                Region: {
                    locationName: "region"
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                Cidr: {
                    locationName: "cidr"
                },
                Description: {
                    locationName: "description"
                },
                AsnAssociations: {
                    locationName: "asnAssociationSet",
                    type: "list",
                    member: {
                        shape: "S20",
                        locationName: "item"
                    }
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S20: {
            type: "structure",
            members: {
                Asn: {
                    locationName: "asn"
                },
                Cidr: {
                    locationName: "cidr"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S2f: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S2l: {
            type: "structure",
            members: {
                Cidr: {
                    locationName: "cidr"
                },
                IpamPoolAllocationId: {
                    locationName: "ipamPoolAllocationId"
                },
                Description: {
                    locationName: "description"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                ResourceRegion: {
                    locationName: "resourceRegion"
                },
                ResourceOwner: {
                    locationName: "resourceOwner"
                }
            }
        },
        S2r: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S2v: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S2w: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S30: {
            type: "list",
            member: {
                locationName: "PrivateIpAddress"
            }
        },
        S34: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Ipv4Prefix: {
                        locationName: "ipv4Prefix"
                    }
                }
            }
        },
        S38: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S3b: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    AllocationId: {
                        locationName: "allocationId"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    PrivateIp: {
                        locationName: "privateIp"
                    },
                    PublicIp: {
                        locationName: "publicIp"
                    },
                    AssociationId: {
                        locationName: "associationId"
                    },
                    IsPrimary: {
                        locationName: "isPrimary",
                        type: "boolean"
                    },
                    FailureMessage: {
                        locationName: "failureMessage"
                    },
                    Status: {
                        locationName: "status"
                    }
                }
            }
        },
        S3m: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        S3v: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Name: {
                    locationName: "name"
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                AssociationId: {
                    locationName: "associationId"
                },
                InstanceId: {
                    locationName: "instanceId"
                },
                IamInstanceProfile: {
                    shape: "S3y",
                    locationName: "iamInstanceProfile"
                },
                State: {
                    locationName: "state"
                },
                Timestamp: {
                    locationName: "timestamp",
                    type: "timestamp"
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Id: {
                    locationName: "id"
                }
            }
        },
        S43: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S44: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S47: {
            type: "structure",
            members: {
                InstanceEventWindowId: {
                    locationName: "instanceEventWindowId"
                },
                TimeRanges: {
                    locationName: "timeRangeSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            StartWeekDay: {
                                locationName: "startWeekDay"
                            },
                            StartHour: {
                                locationName: "startHour",
                                type: "integer"
                            },
                            EndWeekDay: {
                                locationName: "endWeekDay"
                            },
                            EndHour: {
                                locationName: "endHour",
                                type: "integer"
                            }
                        }
                    }
                },
                Name: {
                    locationName: "name"
                },
                CronExpression: {
                    locationName: "cronExpression"
                },
                AssociationTarget: {
                    locationName: "associationTarget",
                    type: "structure",
                    members: {
                        InstanceIds: {
                            shape: "S43",
                            locationName: "instanceIdSet"
                        },
                        Tags: {
                            shape: "S6",
                            locationName: "tagSet"
                        },
                        DedicatedHostIds: {
                            shape: "S44",
                            locationName: "dedicatedHostIdSet"
                        }
                    }
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S4l: {
            type: "structure",
            members: {
                OwnerId: {
                    locationName: "ownerId"
                },
                IpamResourceDiscoveryAssociationId: {
                    locationName: "ipamResourceDiscoveryAssociationId"
                },
                IpamResourceDiscoveryAssociationArn: {
                    locationName: "ipamResourceDiscoveryAssociationArn"
                },
                IpamResourceDiscoveryId: {
                    locationName: "ipamResourceDiscoveryId"
                },
                IpamId: {
                    locationName: "ipamId"
                },
                IpamArn: {
                    locationName: "ipamArn"
                },
                IpamRegion: {
                    locationName: "ipamRegion"
                },
                IsDefault: {
                    locationName: "isDefault",
                    type: "boolean"
                },
                ResourceDiscoveryStatus: {
                    locationName: "resourceDiscoveryStatus"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S4r: {
            type: "list",
            member: {
                locationName: "AllocationId"
            }
        },
        S4x: {
            type: "structure",
            members: {
                State: {
                    locationName: "state"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                }
            }
        },
        S52: {
            type: "structure",
            members: {
                AssociationId: {
                    locationName: "associationId"
                },
                Ipv6CidrBlock: {
                    locationName: "ipv6CidrBlock"
                },
                Ipv6CidrBlockState: {
                    locationName: "ipv6CidrBlockState",
                    type: "structure",
                    members: {
                        State: {
                            locationName: "state"
                        },
                        StatusMessage: {
                            locationName: "statusMessage"
                        }
                    }
                }
            }
        },
        S57: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S5c: {
            type: "structure",
            members: {
                TransitGatewayPolicyTableId: {
                    locationName: "transitGatewayPolicyTableId"
                },
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S5h: {
            type: "structure",
            members: {
                TransitGatewayRouteTableId: {
                    locationName: "transitGatewayRouteTableId"
                },
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        S5k: {
            type: "structure",
            members: {
                AssociationId: {
                    locationName: "associationId"
                },
                BranchInterfaceId: {
                    locationName: "branchInterfaceId"
                },
                TrunkInterfaceId: {
                    locationName: "trunkInterfaceId"
                },
                InterfaceProtocol: {
                    locationName: "interfaceProtocol"
                },
                VlanId: {
                    locationName: "vlanId",
                    type: "integer"
                },
                GreKey: {
                    locationName: "greKey",
                    type: "integer"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S5q: {
            type: "structure",
            members: {
                AssociationId: {
                    locationName: "associationId"
                },
                Ipv6CidrBlock: {
                    locationName: "ipv6CidrBlock"
                },
                Ipv6CidrBlockState: {
                    shape: "S5r",
                    locationName: "ipv6CidrBlockState"
                },
                NetworkBorderGroup: {
                    locationName: "networkBorderGroup"
                },
                Ipv6Pool: {
                    locationName: "ipv6Pool"
                }
            }
        },
        S5r: {
            type: "structure",
            members: {
                State: {
                    locationName: "state"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                }
            }
        },
        S5t: {
            type: "structure",
            members: {
                AssociationId: {
                    locationName: "associationId"
                },
                CidrBlock: {
                    locationName: "cidrBlock"
                },
                CidrBlockState: {
                    shape: "S5r",
                    locationName: "cidrBlockState"
                }
            }
        },
        S5v: {
            type: "list",
            member: {
                locationName: "groupId"
            }
        },
        S60: {
            type: "structure",
            members: {
                EnaSrdEnabled: {
                    type: "boolean"
                },
                EnaSrdUdpSpecification: {
                    type: "structure",
                    members: {
                        EnaSrdUdpEnabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S67: {
            type: "structure",
            members: {
                VerifiedAccessTrustProviderId: {
                    locationName: "verifiedAccessTrustProviderId"
                },
                Description: {
                    locationName: "description"
                },
                TrustProviderType: {
                    locationName: "trustProviderType"
                },
                UserTrustProviderType: {
                    locationName: "userTrustProviderType"
                },
                DeviceTrustProviderType: {
                    locationName: "deviceTrustProviderType"
                },
                OidcOptions: {
                    locationName: "oidcOptions",
                    type: "structure",
                    members: {
                        Issuer: {
                            locationName: "issuer"
                        },
                        AuthorizationEndpoint: {
                            locationName: "authorizationEndpoint"
                        },
                        TokenEndpoint: {
                            locationName: "tokenEndpoint"
                        },
                        UserInfoEndpoint: {
                            locationName: "userInfoEndpoint"
                        },
                        ClientId: {
                            locationName: "clientId"
                        },
                        ClientSecret: {
                            shape: "S6c",
                            locationName: "clientSecret"
                        },
                        Scope: {
                            locationName: "scope"
                        }
                    }
                },
                DeviceOptions: {
                    locationName: "deviceOptions",
                    type: "structure",
                    members: {
                        TenantId: {
                            locationName: "tenantId"
                        },
                        PublicSigningKeyUrl: {
                            locationName: "publicSigningKeyUrl"
                        }
                    }
                },
                PolicyReferenceName: {
                    locationName: "policyReferenceName"
                },
                CreationTime: {
                    locationName: "creationTime"
                },
                LastUpdatedTime: {
                    locationName: "lastUpdatedTime"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                SseSpecification: {
                    shape: "S6e",
                    locationName: "sseSpecification"
                }
            }
        },
        S6c: {
            type: "string",
            sensitive: true
        },
        S6e: {
            type: "structure",
            members: {
                CustomerManagedKeyEnabled: {
                    locationName: "customerManagedKeyEnabled",
                    type: "boolean"
                },
                KmsKeyArn: {
                    locationName: "kmsKeyArn"
                }
            }
        },
        S6g: {
            type: "structure",
            members: {
                VerifiedAccessInstanceId: {
                    locationName: "verifiedAccessInstanceId"
                },
                Description: {
                    locationName: "description"
                },
                VerifiedAccessTrustProviders: {
                    locationName: "verifiedAccessTrustProviderSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            VerifiedAccessTrustProviderId: {
                                locationName: "verifiedAccessTrustProviderId"
                            },
                            Description: {
                                locationName: "description"
                            },
                            TrustProviderType: {
                                locationName: "trustProviderType"
                            },
                            UserTrustProviderType: {
                                locationName: "userTrustProviderType"
                            },
                            DeviceTrustProviderType: {
                                locationName: "deviceTrustProviderType"
                            }
                        }
                    }
                },
                CreationTime: {
                    locationName: "creationTime"
                },
                LastUpdatedTime: {
                    locationName: "lastUpdatedTime"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                FipsEnabled: {
                    locationName: "fipsEnabled",
                    type: "boolean"
                }
            }
        },
        S6l: {
            type: "structure",
            members: {
                AttachTime: {
                    locationName: "attachTime",
                    type: "timestamp"
                },
                Device: {
                    locationName: "device"
                },
                InstanceId: {
                    locationName: "instanceId"
                },
                State: {
                    locationName: "status"
                },
                VolumeId: {
                    locationName: "volumeId"
                },
                DeleteOnTermination: {
                    locationName: "deleteOnTermination",
                    type: "boolean"
                }
            }
        },
        S6q: {
            type: "structure",
            members: {
                State: {
                    locationName: "state"
                },
                VpcId: {
                    locationName: "vpcId"
                }
            }
        },
        S6u: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        S6x: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    FromPort: {
                        locationName: "fromPort",
                        type: "integer"
                    },
                    IpProtocol: {
                        locationName: "ipProtocol"
                    },
                    IpRanges: {
                        locationName: "ipRanges",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CidrIp: {
                                    locationName: "cidrIp"
                                },
                                Description: {
                                    locationName: "description"
                                }
                            }
                        }
                    },
                    Ipv6Ranges: {
                        locationName: "ipv6Ranges",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                CidrIpv6: {
                                    locationName: "cidrIpv6"
                                },
                                Description: {
                                    locationName: "description"
                                }
                            }
                        }
                    },
                    PrefixListIds: {
                        locationName: "prefixListIds",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Description: {
                                    locationName: "description"
                                },
                                PrefixListId: {
                                    locationName: "prefixListId"
                                }
                            }
                        }
                    },
                    ToPort: {
                        locationName: "toPort",
                        type: "integer"
                    },
                    UserIdGroupPairs: {
                        locationName: "groups",
                        type: "list",
                        member: {
                            shape: "S76",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        S76: {
            type: "structure",
            members: {
                Description: {
                    locationName: "description"
                },
                GroupId: {
                    locationName: "groupId"
                },
                GroupName: {
                    locationName: "groupName"
                },
                PeeringStatus: {
                    locationName: "peeringStatus"
                },
                UserId: {
                    locationName: "userId"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                VpcPeeringConnectionId: {
                    locationName: "vpcPeeringConnectionId"
                }
            }
        },
        S78: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    SecurityGroupRuleId: {
                        locationName: "securityGroupRuleId"
                    },
                    GroupId: {
                        locationName: "groupId"
                    },
                    GroupOwnerId: {
                        locationName: "groupOwnerId"
                    },
                    IsEgress: {
                        locationName: "isEgress",
                        type: "boolean"
                    },
                    IpProtocol: {
                        locationName: "ipProtocol"
                    },
                    FromPort: {
                        locationName: "fromPort",
                        type: "integer"
                    },
                    ToPort: {
                        locationName: "toPort",
                        type: "integer"
                    },
                    CidrIpv4: {
                        locationName: "cidrIpv4"
                    },
                    CidrIpv6: {
                        locationName: "cidrIpv6"
                    },
                    PrefixListId: {
                        locationName: "prefixListId"
                    },
                    ReferencedGroupInfo: {
                        locationName: "referencedGroupInfo",
                        type: "structure",
                        members: {
                            GroupId: {
                                locationName: "groupId"
                            },
                            PeeringStatus: {
                                locationName: "peeringStatus"
                            },
                            UserId: {
                                locationName: "userId"
                            },
                            VpcId: {
                                locationName: "vpcId"
                            },
                            VpcPeeringConnectionId: {
                                locationName: "vpcPeeringConnectionId"
                            }
                        }
                    },
                    Description: {
                        locationName: "description"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    }
                }
            }
        },
        S7h: {
            type: "structure",
            members: {
                S3: {
                    type: "structure",
                    members: {
                        AWSAccessKeyId: {},
                        Bucket: {
                            locationName: "bucket"
                        },
                        Prefix: {
                            locationName: "prefix"
                        },
                        UploadPolicy: {
                            locationName: "uploadPolicy",
                            type: "blob"
                        },
                        UploadPolicySignature: {
                            locationName: "uploadPolicySignature",
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            }
        },
        S7m: {
            type: "structure",
            members: {
                BundleId: {
                    locationName: "bundleId"
                },
                BundleTaskError: {
                    locationName: "error",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                InstanceId: {
                    locationName: "instanceId"
                },
                Progress: {
                    locationName: "progress"
                },
                StartTime: {
                    locationName: "startTime",
                    type: "timestamp"
                },
                State: {
                    locationName: "state"
                },
                Storage: {
                    shape: "S7h",
                    locationName: "storage"
                },
                UpdateTime: {
                    locationName: "updateTime",
                    type: "timestamp"
                }
            }
        },
        S7w: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S8k: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    ClientToken: {
                        locationName: "clientToken"
                    },
                    CreateDate: {
                        locationName: "createDate",
                        type: "timestamp"
                    },
                    InstanceCounts: {
                        locationName: "instanceCounts",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceCount: {
                                    locationName: "instanceCount",
                                    type: "integer"
                                },
                                State: {
                                    locationName: "state"
                                }
                            }
                        }
                    },
                    PriceSchedules: {
                        locationName: "priceSchedules",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                Active: {
                                    locationName: "active",
                                    type: "boolean"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Price: {
                                    locationName: "price",
                                    type: "double"
                                },
                                Term: {
                                    locationName: "term",
                                    type: "long"
                                }
                            }
                        }
                    },
                    ReservedInstancesId: {
                        locationName: "reservedInstancesId"
                    },
                    ReservedInstancesListingId: {
                        locationName: "reservedInstancesListingId"
                    },
                    Status: {
                        locationName: "status"
                    },
                    StatusMessage: {
                        locationName: "statusMessage"
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    },
                    UpdateDate: {
                        locationName: "updateDate",
                        type: "timestamp"
                    }
                }
            }
        },
        S8w: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S97: {
            type: "list",
            member: {
                locationName: "SpotInstanceRequestId"
            }
        },
        S9x: {
            type: "structure",
            members: {
                CapacityReservationId: {
                    locationName: "capacityReservationId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                CapacityReservationArn: {
                    locationName: "capacityReservationArn"
                },
                AvailabilityZoneId: {
                    locationName: "availabilityZoneId"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                InstancePlatform: {
                    locationName: "instancePlatform"
                },
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                Tenancy: {
                    locationName: "tenancy"
                },
                TotalInstanceCount: {
                    locationName: "totalInstanceCount",
                    type: "integer"
                },
                AvailableInstanceCount: {
                    locationName: "availableInstanceCount",
                    type: "integer"
                },
                EbsOptimized: {
                    locationName: "ebsOptimized",
                    type: "boolean"
                },
                EphemeralStorage: {
                    locationName: "ephemeralStorage",
                    type: "boolean"
                },
                State: {
                    locationName: "state"
                },
                StartDate: {
                    locationName: "startDate",
                    type: "timestamp"
                },
                EndDate: {
                    locationName: "endDate",
                    type: "timestamp"
                },
                EndDateType: {
                    locationName: "endDateType"
                },
                InstanceMatchCriteria: {
                    locationName: "instanceMatchCriteria"
                },
                CreateDate: {
                    locationName: "createDate",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                OutpostArn: {
                    locationName: "outpostArn"
                },
                CapacityReservationFleetId: {
                    locationName: "capacityReservationFleetId"
                },
                PlacementGroupArn: {
                    locationName: "placementGroupArn"
                },
                CapacityAllocations: {
                    locationName: "capacityAllocationSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            AllocationType: {
                                locationName: "allocationType"
                            },
                            Count: {
                                locationName: "count",
                                type: "integer"
                            }
                        }
                    }
                },
                ReservationType: {
                    locationName: "reservationType"
                }
            }
        },
        Sac: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    CapacityReservationId: {
                        locationName: "capacityReservationId"
                    },
                    AvailabilityZoneId: {
                        locationName: "availabilityZoneId"
                    },
                    InstanceType: {
                        locationName: "instanceType"
                    },
                    InstancePlatform: {
                        locationName: "instancePlatform"
                    },
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    TotalInstanceCount: {
                        locationName: "totalInstanceCount",
                        type: "integer"
                    },
                    FulfilledCapacity: {
                        locationName: "fulfilledCapacity",
                        type: "double"
                    },
                    EbsOptimized: {
                        locationName: "ebsOptimized",
                        type: "boolean"
                    },
                    CreateDate: {
                        locationName: "createDate",
                        type: "timestamp"
                    },
                    Weight: {
                        locationName: "weight",
                        type: "double"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    }
                }
            }
        },
        Sag: {
            type: "structure",
            members: {
                CarrierGatewayId: {
                    locationName: "carrierGatewayId"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                State: {
                    locationName: "state"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Saq: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                CloudwatchLogGroup: {},
                CloudwatchLogStream: {}
            }
        },
        Sat: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                LambdaFunctionArn: {}
            }
        },
        Sau: {
            type: "structure",
            members: {
                Enabled: {
                    type: "boolean"
                },
                BannerText: {}
            }
        },
        Saw: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        Sb0: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        Sb5: {
            type: "structure",
            members: {
                Cidr: {
                    locationName: "cidr"
                },
                CoipPoolId: {
                    locationName: "coipPoolId"
                },
                LocalGatewayRouteTableId: {
                    locationName: "localGatewayRouteTableId"
                }
            }
        },
        Sb9: {
            type: "structure",
            members: {
                PoolId: {
                    locationName: "poolId"
                },
                PoolCidrs: {
                    shape: "So",
                    locationName: "poolCidrSet"
                },
                LocalGatewayRouteTableId: {
                    locationName: "localGatewayRouteTableId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                PoolArn: {
                    locationName: "poolArn"
                }
            }
        },
        Sbd: {
            type: "structure",
            members: {
                BgpAsn: {
                    locationName: "bgpAsn"
                },
                CustomerGatewayId: {
                    locationName: "customerGatewayId"
                },
                IpAddress: {
                    locationName: "ipAddress"
                },
                CertificateArn: {
                    locationName: "certificateArn"
                },
                State: {
                    locationName: "state"
                },
                Type: {
                    locationName: "type"
                },
                DeviceName: {
                    locationName: "deviceName"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sbg: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                AvailabilityZoneId: {
                    locationName: "availabilityZoneId"
                },
                AvailableIpAddressCount: {
                    locationName: "availableIpAddressCount",
                    type: "integer"
                },
                CidrBlock: {
                    locationName: "cidrBlock"
                },
                DefaultForAz: {
                    locationName: "defaultForAz",
                    type: "boolean"
                },
                EnableLniAtDeviceIndex: {
                    locationName: "enableLniAtDeviceIndex",
                    type: "integer"
                },
                MapPublicIpOnLaunch: {
                    locationName: "mapPublicIpOnLaunch",
                    type: "boolean"
                },
                MapCustomerOwnedIpOnLaunch: {
                    locationName: "mapCustomerOwnedIpOnLaunch",
                    type: "boolean"
                },
                CustomerOwnedIpv4Pool: {
                    locationName: "customerOwnedIpv4Pool"
                },
                State: {
                    locationName: "state"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                AssignIpv6AddressOnCreation: {
                    locationName: "assignIpv6AddressOnCreation",
                    type: "boolean"
                },
                Ipv6CidrBlockAssociationSet: {
                    locationName: "ipv6CidrBlockAssociationSet",
                    type: "list",
                    member: {
                        shape: "S52",
                        locationName: "item"
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                SubnetArn: {
                    locationName: "subnetArn"
                },
                OutpostArn: {
                    locationName: "outpostArn"
                },
                EnableDns64: {
                    locationName: "enableDns64",
                    type: "boolean"
                },
                Ipv6Native: {
                    locationName: "ipv6Native",
                    type: "boolean"
                },
                PrivateDnsNameOptionsOnLaunch: {
                    locationName: "privateDnsNameOptionsOnLaunch",
                    type: "structure",
                    members: {
                        HostnameType: {
                            locationName: "hostnameType"
                        },
                        EnableResourceNameDnsARecord: {
                            locationName: "enableResourceNameDnsARecord",
                            type: "boolean"
                        },
                        EnableResourceNameDnsAAAARecord: {
                            locationName: "enableResourceNameDnsAAAARecord",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sbo: {
            type: "structure",
            members: {
                CidrBlock: {
                    locationName: "cidrBlock"
                },
                DhcpOptionsId: {
                    locationName: "dhcpOptionsId"
                },
                State: {
                    locationName: "state"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                InstanceTenancy: {
                    locationName: "instanceTenancy"
                },
                Ipv6CidrBlockAssociationSet: {
                    locationName: "ipv6CidrBlockAssociationSet",
                    type: "list",
                    member: {
                        shape: "S5q",
                        locationName: "item"
                    }
                },
                CidrBlockAssociationSet: {
                    locationName: "cidrBlockAssociationSet",
                    type: "list",
                    member: {
                        shape: "S5t",
                        locationName: "item"
                    }
                },
                IsDefault: {
                    locationName: "isDefault",
                    type: "boolean"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sbx: {
            type: "structure",
            members: {
                DhcpConfigurations: {
                    locationName: "dhcpConfigurationSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Key: {
                                locationName: "key"
                            },
                            Values: {
                                locationName: "valueSet",
                                type: "list",
                                member: {
                                    shape: "Sc1",
                                    locationName: "item"
                                }
                            }
                        }
                    }
                },
                DhcpOptionsId: {
                    locationName: "dhcpOptionsId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sc1: {
            type: "structure",
            members: {
                Value: {
                    locationName: "value"
                }
            }
        },
        Sc4: {
            type: "structure",
            members: {
                Attachments: {
                    shape: "Sc5",
                    locationName: "attachmentSet"
                },
                EgressOnlyInternetGatewayId: {
                    locationName: "egressOnlyInternetGatewayId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sc5: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    State: {
                        locationName: "state"
                    },
                    VpcId: {
                        locationName: "vpcId"
                    }
                }
            }
        },
        Sck: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    LaunchTemplateSpecification: {
                        type: "structure",
                        members: {
                            LaunchTemplateId: {},
                            LaunchTemplateName: {},
                            Version: {}
                        }
                    },
                    Overrides: {
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceType: {},
                                MaxPrice: {},
                                SubnetId: {},
                                AvailabilityZone: {},
                                WeightedCapacity: {
                                    type: "double"
                                },
                                Priority: {
                                    type: "double"
                                },
                                Placement: {
                                    shape: "Scr"
                                },
                                InstanceRequirements: {
                                    shape: "Scu"
                                },
                                ImageId: {}
                            }
                        }
                    }
                }
            }
        },
        Scr: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                Affinity: {
                    locationName: "affinity"
                },
                GroupName: {
                    locationName: "groupName"
                },
                PartitionNumber: {
                    locationName: "partitionNumber",
                    type: "integer"
                },
                HostId: {
                    locationName: "hostId"
                },
                Tenancy: {
                    locationName: "tenancy"
                },
                SpreadDomain: {
                    locationName: "spreadDomain"
                },
                HostResourceGroupArn: {
                    locationName: "hostResourceGroupArn"
                },
                GroupId: {
                    locationName: "groupId"
                }
            }
        },
        Scu: {
            type: "structure",
            required: [ "VCpuCount", "MemoryMiB" ],
            members: {
                VCpuCount: {
                    type: "structure",
                    required: [ "Min" ],
                    members: {
                        Min: {
                            type: "integer"
                        },
                        Max: {
                            type: "integer"
                        }
                    }
                },
                MemoryMiB: {
                    type: "structure",
                    required: [ "Min" ],
                    members: {
                        Min: {
                            type: "integer"
                        },
                        Max: {
                            type: "integer"
                        }
                    }
                },
                CpuManufacturers: {
                    shape: "Scx",
                    locationName: "CpuManufacturer"
                },
                MemoryGiBPerVCpu: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "double"
                        },
                        Max: {
                            type: "double"
                        }
                    }
                },
                ExcludedInstanceTypes: {
                    shape: "Sd0",
                    locationName: "ExcludedInstanceType"
                },
                InstanceGenerations: {
                    shape: "Sd2",
                    locationName: "InstanceGeneration"
                },
                SpotMaxPricePercentageOverLowestPrice: {
                    type: "integer"
                },
                OnDemandMaxPricePercentageOverLowestPrice: {
                    type: "integer"
                },
                BareMetal: {},
                BurstablePerformance: {},
                RequireHibernateSupport: {
                    type: "boolean"
                },
                NetworkInterfaceCount: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "integer"
                        },
                        Max: {
                            type: "integer"
                        }
                    }
                },
                LocalStorage: {},
                LocalStorageTypes: {
                    shape: "Sd8",
                    locationName: "LocalStorageType"
                },
                TotalLocalStorageGB: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "double"
                        },
                        Max: {
                            type: "double"
                        }
                    }
                },
                BaselineEbsBandwidthMbps: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "integer"
                        },
                        Max: {
                            type: "integer"
                        }
                    }
                },
                AcceleratorTypes: {
                    shape: "Sdc",
                    locationName: "AcceleratorType"
                },
                AcceleratorCount: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "integer"
                        },
                        Max: {
                            type: "integer"
                        }
                    }
                },
                AcceleratorManufacturers: {
                    shape: "Sdf",
                    locationName: "AcceleratorManufacturer"
                },
                AcceleratorNames: {
                    shape: "Sdh",
                    locationName: "AcceleratorName"
                },
                AcceleratorTotalMemoryMiB: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "integer"
                        },
                        Max: {
                            type: "integer"
                        }
                    }
                },
                NetworkBandwidthGbps: {
                    type: "structure",
                    members: {
                        Min: {
                            type: "double"
                        },
                        Max: {
                            type: "double"
                        }
                    }
                },
                AllowedInstanceTypes: {
                    shape: "Sdl",
                    locationName: "AllowedInstanceType"
                }
            }
        },
        Scx: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sd0: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sd2: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sd8: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sdc: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sdf: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sdh: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sdl: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sdn: {
            type: "structure",
            required: [ "TotalTargetCapacity" ],
            members: {
                TotalTargetCapacity: {
                    type: "integer"
                },
                OnDemandTargetCapacity: {
                    type: "integer"
                },
                SpotTargetCapacity: {
                    type: "integer"
                },
                DefaultTargetCapacityType: {},
                TargetCapacityUnitType: {}
            }
        },
        Sdv: {
            type: "structure",
            members: {
                LaunchTemplateSpecification: {
                    shape: "Sdw",
                    locationName: "launchTemplateSpecification"
                },
                Overrides: {
                    shape: "Sdx",
                    locationName: "overrides"
                }
            }
        },
        Sdw: {
            type: "structure",
            members: {
                LaunchTemplateId: {
                    locationName: "launchTemplateId"
                },
                LaunchTemplateName: {
                    locationName: "launchTemplateName"
                },
                Version: {
                    locationName: "version"
                }
            }
        },
        Sdx: {
            type: "structure",
            members: {
                InstanceType: {
                    locationName: "instanceType"
                },
                MaxPrice: {
                    locationName: "maxPrice"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                WeightedCapacity: {
                    locationName: "weightedCapacity",
                    type: "double"
                },
                Priority: {
                    locationName: "priority",
                    type: "double"
                },
                Placement: {
                    locationName: "placement",
                    type: "structure",
                    members: {
                        GroupName: {
                            locationName: "groupName"
                        }
                    }
                },
                InstanceRequirements: {
                    shape: "Sdz",
                    locationName: "instanceRequirements"
                },
                ImageId: {
                    locationName: "imageId"
                }
            }
        },
        Sdz: {
            type: "structure",
            members: {
                VCpuCount: {
                    locationName: "vCpuCount",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "integer"
                        },
                        Max: {
                            locationName: "max",
                            type: "integer"
                        }
                    }
                },
                MemoryMiB: {
                    locationName: "memoryMiB",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "integer"
                        },
                        Max: {
                            locationName: "max",
                            type: "integer"
                        }
                    }
                },
                CpuManufacturers: {
                    shape: "Scx",
                    locationName: "cpuManufacturerSet"
                },
                MemoryGiBPerVCpu: {
                    locationName: "memoryGiBPerVCpu",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "double"
                        },
                        Max: {
                            locationName: "max",
                            type: "double"
                        }
                    }
                },
                ExcludedInstanceTypes: {
                    shape: "Sd0",
                    locationName: "excludedInstanceTypeSet"
                },
                InstanceGenerations: {
                    shape: "Sd2",
                    locationName: "instanceGenerationSet"
                },
                SpotMaxPricePercentageOverLowestPrice: {
                    locationName: "spotMaxPricePercentageOverLowestPrice",
                    type: "integer"
                },
                OnDemandMaxPricePercentageOverLowestPrice: {
                    locationName: "onDemandMaxPricePercentageOverLowestPrice",
                    type: "integer"
                },
                BareMetal: {
                    locationName: "bareMetal"
                },
                BurstablePerformance: {
                    locationName: "burstablePerformance"
                },
                RequireHibernateSupport: {
                    locationName: "requireHibernateSupport",
                    type: "boolean"
                },
                NetworkInterfaceCount: {
                    locationName: "networkInterfaceCount",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "integer"
                        },
                        Max: {
                            locationName: "max",
                            type: "integer"
                        }
                    }
                },
                LocalStorage: {
                    locationName: "localStorage"
                },
                LocalStorageTypes: {
                    shape: "Sd8",
                    locationName: "localStorageTypeSet"
                },
                TotalLocalStorageGB: {
                    locationName: "totalLocalStorageGB",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "double"
                        },
                        Max: {
                            locationName: "max",
                            type: "double"
                        }
                    }
                },
                BaselineEbsBandwidthMbps: {
                    locationName: "baselineEbsBandwidthMbps",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "integer"
                        },
                        Max: {
                            locationName: "max",
                            type: "integer"
                        }
                    }
                },
                AcceleratorTypes: {
                    shape: "Sdc",
                    locationName: "acceleratorTypeSet"
                },
                AcceleratorCount: {
                    locationName: "acceleratorCount",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "integer"
                        },
                        Max: {
                            locationName: "max",
                            type: "integer"
                        }
                    }
                },
                AcceleratorManufacturers: {
                    shape: "Sdf",
                    locationName: "acceleratorManufacturerSet"
                },
                AcceleratorNames: {
                    shape: "Sdh",
                    locationName: "acceleratorNameSet"
                },
                AcceleratorTotalMemoryMiB: {
                    locationName: "acceleratorTotalMemoryMiB",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "integer"
                        },
                        Max: {
                            locationName: "max",
                            type: "integer"
                        }
                    }
                },
                NetworkBandwidthGbps: {
                    locationName: "networkBandwidthGbps",
                    type: "structure",
                    members: {
                        Min: {
                            locationName: "min",
                            type: "double"
                        },
                        Max: {
                            locationName: "max",
                            type: "double"
                        }
                    }
                },
                AllowedInstanceTypes: {
                    shape: "Sdl",
                    locationName: "allowedInstanceTypeSet"
                }
            }
        },
        Sec: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Seo: {
            type: "structure",
            members: {
                Bucket: {},
                Key: {}
            }
        },
        Ser: {
            type: "list",
            member: {
                shape: "Ses",
                locationName: "BlockDeviceMapping"
            }
        },
        Ses: {
            type: "structure",
            members: {
                DeviceName: {
                    locationName: "deviceName"
                },
                VirtualName: {
                    locationName: "virtualName"
                },
                Ebs: {
                    locationName: "ebs",
                    type: "structure",
                    members: {
                        DeleteOnTermination: {
                            locationName: "deleteOnTermination",
                            type: "boolean"
                        },
                        Iops: {
                            locationName: "iops",
                            type: "integer"
                        },
                        SnapshotId: {
                            locationName: "snapshotId"
                        },
                        VolumeSize: {
                            locationName: "volumeSize",
                            type: "integer"
                        },
                        VolumeType: {
                            locationName: "volumeType"
                        },
                        KmsKeyId: {
                            locationName: "kmsKeyId"
                        },
                        Throughput: {
                            locationName: "throughput",
                            type: "integer"
                        },
                        OutpostArn: {
                            locationName: "outpostArn"
                        },
                        Encrypted: {
                            locationName: "encrypted",
                            type: "boolean"
                        }
                    }
                },
                NoDevice: {
                    locationName: "noDevice"
                }
            }
        },
        Sf0: {
            type: "structure",
            members: {
                OwnerId: {
                    locationName: "ownerId"
                },
                InstanceConnectEndpointId: {
                    locationName: "instanceConnectEndpointId"
                },
                InstanceConnectEndpointArn: {
                    locationName: "instanceConnectEndpointArn"
                },
                State: {
                    locationName: "state"
                },
                StateMessage: {
                    locationName: "stateMessage"
                },
                DnsName: {
                    locationName: "dnsName"
                },
                FipsDnsName: {
                    locationName: "fipsDnsName"
                },
                NetworkInterfaceIds: {
                    locationName: "networkInterfaceIdSet",
                    type: "list",
                    member: {
                        locationName: "item"
                    }
                },
                VpcId: {
                    locationName: "vpcId"
                },
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                CreatedAt: {
                    locationName: "createdAt",
                    type: "timestamp"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                PreserveClientIp: {
                    locationName: "preserveClientIp",
                    type: "boolean"
                },
                SecurityGroupIds: {
                    locationName: "securityGroupIdSet",
                    type: "list",
                    member: {
                        locationName: "item"
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sf6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StartWeekDay: {},
                    StartHour: {
                        type: "integer"
                    },
                    EndWeekDay: {},
                    EndHour: {
                        type: "integer"
                    }
                }
            }
        },
        Sff: {
            type: "structure",
            members: {
                Description: {
                    locationName: "description"
                },
                ExportTaskId: {
                    locationName: "exportTaskId"
                },
                ExportToS3Task: {
                    locationName: "exportToS3",
                    type: "structure",
                    members: {
                        ContainerFormat: {
                            locationName: "containerFormat"
                        },
                        DiskImageFormat: {
                            locationName: "diskImageFormat"
                        },
                        S3Bucket: {
                            locationName: "s3Bucket"
                        },
                        S3Key: {
                            locationName: "s3Key"
                        }
                    }
                },
                InstanceExportDetails: {
                    locationName: "instanceExport",
                    type: "structure",
                    members: {
                        InstanceId: {
                            locationName: "instanceId"
                        },
                        TargetEnvironment: {
                            locationName: "targetEnvironment"
                        }
                    }
                },
                State: {
                    locationName: "state"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sfl: {
            type: "structure",
            members: {
                Attachments: {
                    shape: "Sc5",
                    locationName: "attachmentSet"
                },
                InternetGatewayId: {
                    locationName: "internetGatewayId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sfn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RegionName: {}
                }
            }
        },
        Sfr: {
            type: "structure",
            members: {
                OwnerId: {
                    locationName: "ownerId"
                },
                IpamId: {
                    locationName: "ipamId"
                },
                IpamArn: {
                    locationName: "ipamArn"
                },
                IpamRegion: {
                    locationName: "ipamRegion"
                },
                PublicDefaultScopeId: {
                    locationName: "publicDefaultScopeId"
                },
                PrivateDefaultScopeId: {
                    locationName: "privateDefaultScopeId"
                },
                ScopeCount: {
                    locationName: "scopeCount",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                OperatingRegions: {
                    shape: "Sft",
                    locationName: "operatingRegionSet"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                DefaultResourceDiscoveryId: {
                    locationName: "defaultResourceDiscoveryId"
                },
                DefaultResourceDiscoveryAssociationId: {
                    locationName: "defaultResourceDiscoveryAssociationId"
                },
                ResourceDiscoveryAssociationCount: {
                    locationName: "resourceDiscoveryAssociationCount",
                    type: "integer"
                },
                StateMessage: {
                    locationName: "stateMessage"
                },
                Tier: {
                    locationName: "tier"
                }
            }
        },
        Sft: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    RegionName: {
                        locationName: "regionName"
                    }
                }
            }
        },
        Sfz: {
            type: "list",
            member: {
                shape: "Sg0",
                locationName: "item"
            }
        },
        Sg0: {
            type: "structure",
            members: {
                Key: {},
                Value: {}
            }
        },
        Sg6: {
            type: "structure",
            members: {
                OwnerId: {
                    locationName: "ownerId"
                },
                IpamPoolId: {
                    locationName: "ipamPoolId"
                },
                SourceIpamPoolId: {
                    locationName: "sourceIpamPoolId"
                },
                IpamPoolArn: {
                    locationName: "ipamPoolArn"
                },
                IpamScopeArn: {
                    locationName: "ipamScopeArn"
                },
                IpamScopeType: {
                    locationName: "ipamScopeType"
                },
                IpamArn: {
                    locationName: "ipamArn"
                },
                IpamRegion: {
                    locationName: "ipamRegion"
                },
                Locale: {
                    locationName: "locale"
                },
                PoolDepth: {
                    locationName: "poolDepth",
                    type: "integer"
                },
                State: {
                    locationName: "state"
                },
                StateMessage: {
                    locationName: "stateMessage"
                },
                Description: {
                    locationName: "description"
                },
                AutoImport: {
                    locationName: "autoImport",
                    type: "boolean"
                },
                PubliclyAdvertisable: {
                    locationName: "publiclyAdvertisable",
                    type: "boolean"
                },
                AddressFamily: {
                    locationName: "addressFamily"
                },
                AllocationMinNetmaskLength: {
                    locationName: "allocationMinNetmaskLength",
                    type: "integer"
                },
                AllocationMaxNetmaskLength: {
                    locationName: "allocationMaxNetmaskLength",
                    type: "integer"
                },
                AllocationDefaultNetmaskLength: {
                    locationName: "allocationDefaultNetmaskLength",
                    type: "integer"
                },
                AllocationResourceTags: {
                    shape: "Sg9",
                    locationName: "allocationResourceTagSet"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                AwsService: {
                    locationName: "awsService"
                },
                PublicIpSource: {
                    locationName: "publicIpSource"
                },
                SourceResource: {
                    locationName: "sourceResource",
                    type: "structure",
                    members: {
                        ResourceId: {
                            locationName: "resourceId"
                        },
                        ResourceType: {
                            locationName: "resourceType"
                        },
                        ResourceRegion: {
                            locationName: "resourceRegion"
                        },
                        ResourceOwner: {
                            locationName: "resourceOwner"
                        }
                    }
                }
            }
        },
        Sg9: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Key: {
                        locationName: "key"
                    },
                    Value: {
                        locationName: "value"
                    }
                }
            }
        },
        Sge: {
            type: "structure",
            members: {
                OwnerId: {
                    locationName: "ownerId"
                },
                IpamResourceDiscoveryId: {
                    locationName: "ipamResourceDiscoveryId"
                },
                IpamResourceDiscoveryArn: {
                    locationName: "ipamResourceDiscoveryArn"
                },
                IpamResourceDiscoveryRegion: {
                    locationName: "ipamResourceDiscoveryRegion"
                },
                Description: {
                    locationName: "description"
                },
                OperatingRegions: {
                    shape: "Sft",
                    locationName: "operatingRegionSet"
                },
                IsDefault: {
                    locationName: "isDefault",
                    type: "boolean"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sgi: {
            type: "structure",
            members: {
                OwnerId: {
                    locationName: "ownerId"
                },
                IpamScopeId: {
                    locationName: "ipamScopeId"
                },
                IpamScopeArn: {
                    locationName: "ipamScopeArn"
                },
                IpamArn: {
                    locationName: "ipamArn"
                },
                IpamRegion: {
                    locationName: "ipamRegion"
                },
                IpamScopeType: {
                    locationName: "ipamScopeType"
                },
                IsDefault: {
                    locationName: "isDefault",
                    type: "boolean"
                },
                Description: {
                    locationName: "description"
                },
                PoolCount: {
                    locationName: "poolCount",
                    type: "integer"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sgo: {
            type: "string",
            sensitive: true
        },
        Sgr: {
            type: "structure",
            members: {
                KernelId: {},
                EbsOptimized: {
                    type: "boolean"
                },
                IamInstanceProfile: {
                    type: "structure",
                    members: {
                        Arn: {},
                        Name: {}
                    }
                },
                BlockDeviceMappings: {
                    locationName: "BlockDeviceMapping",
                    type: "list",
                    member: {
                        locationName: "BlockDeviceMapping",
                        type: "structure",
                        members: {
                            DeviceName: {},
                            VirtualName: {},
                            Ebs: {
                                type: "structure",
                                members: {
                                    Encrypted: {
                                        type: "boolean"
                                    },
                                    DeleteOnTermination: {
                                        type: "boolean"
                                    },
                                    Iops: {
                                        type: "integer"
                                    },
                                    KmsKeyId: {},
                                    SnapshotId: {},
                                    VolumeSize: {
                                        type: "integer"
                                    },
                                    VolumeType: {},
                                    Throughput: {
                                        type: "integer"
                                    }
                                }
                            },
                            NoDevice: {}
                        }
                    }
                },
                NetworkInterfaces: {
                    locationName: "NetworkInterface",
                    type: "list",
                    member: {
                        locationName: "InstanceNetworkInterfaceSpecification",
                        type: "structure",
                        members: {
                            AssociateCarrierIpAddress: {
                                type: "boolean"
                            },
                            AssociatePublicIpAddress: {
                                type: "boolean"
                            },
                            DeleteOnTermination: {
                                type: "boolean"
                            },
                            Description: {},
                            DeviceIndex: {
                                type: "integer"
                            },
                            Groups: {
                                shape: "Sgz",
                                locationName: "SecurityGroupId"
                            },
                            InterfaceType: {},
                            Ipv6AddressCount: {
                                type: "integer"
                            },
                            Ipv6Addresses: {
                                type: "list",
                                member: {
                                    locationName: "InstanceIpv6Address",
                                    type: "structure",
                                    members: {
                                        Ipv6Address: {}
                                    }
                                }
                            },
                            NetworkInterfaceId: {},
                            PrivateIpAddress: {},
                            PrivateIpAddresses: {
                                shape: "Sh2"
                            },
                            SecondaryPrivateIpAddressCount: {
                                type: "integer"
                            },
                            SubnetId: {},
                            NetworkCardIndex: {
                                type: "integer"
                            },
                            Ipv4Prefixes: {
                                shape: "Sh4",
                                locationName: "Ipv4Prefix"
                            },
                            Ipv4PrefixCount: {
                                type: "integer"
                            },
                            Ipv6Prefixes: {
                                shape: "Sh6",
                                locationName: "Ipv6Prefix"
                            },
                            Ipv6PrefixCount: {
                                type: "integer"
                            },
                            PrimaryIpv6: {
                                type: "boolean"
                            },
                            EnaSrdSpecification: {
                                shape: "Sh8"
                            },
                            ConnectionTrackingSpecification: {
                                shape: "Sha"
                            }
                        }
                    }
                },
                ImageId: {},
                InstanceType: {},
                KeyName: {},
                Monitoring: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                },
                Placement: {
                    type: "structure",
                    members: {
                        AvailabilityZone: {},
                        Affinity: {},
                        GroupName: {},
                        HostId: {},
                        Tenancy: {},
                        SpreadDomain: {},
                        HostResourceGroupArn: {},
                        PartitionNumber: {
                            type: "integer"
                        },
                        GroupId: {}
                    }
                },
                RamDiskId: {},
                DisableApiTermination: {
                    type: "boolean"
                },
                InstanceInitiatedShutdownBehavior: {},
                UserData: {
                    shape: "Sgo"
                },
                TagSpecifications: {
                    locationName: "TagSpecification",
                    type: "list",
                    member: {
                        locationName: "LaunchTemplateTagSpecificationRequest",
                        type: "structure",
                        members: {
                            ResourceType: {},
                            Tags: {
                                shape: "S6",
                                locationName: "Tag"
                            }
                        }
                    }
                },
                ElasticGpuSpecifications: {
                    locationName: "ElasticGpuSpecification",
                    type: "list",
                    member: {
                        shape: "Shj",
                        locationName: "ElasticGpuSpecification"
                    }
                },
                ElasticInferenceAccelerators: {
                    locationName: "ElasticInferenceAccelerator",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            Count: {
                                type: "integer"
                            }
                        }
                    }
                },
                SecurityGroupIds: {
                    shape: "Sgz",
                    locationName: "SecurityGroupId"
                },
                SecurityGroups: {
                    shape: "Shn",
                    locationName: "SecurityGroup"
                },
                InstanceMarketOptions: {
                    type: "structure",
                    members: {
                        MarketType: {},
                        SpotOptions: {
                            type: "structure",
                            members: {
                                MaxPrice: {},
                                SpotInstanceType: {},
                                BlockDurationMinutes: {
                                    type: "integer"
                                },
                                ValidUntil: {
                                    type: "timestamp"
                                },
                                InstanceInterruptionBehavior: {}
                            }
                        }
                    }
                },
                CreditSpecification: {
                    shape: "Sht"
                },
                CpuOptions: {
                    type: "structure",
                    members: {
                        CoreCount: {
                            type: "integer"
                        },
                        ThreadsPerCore: {
                            type: "integer"
                        },
                        AmdSevSnp: {}
                    }
                },
                CapacityReservationSpecification: {
                    type: "structure",
                    members: {
                        CapacityReservationPreference: {},
                        CapacityReservationTarget: {
                            shape: "Shy"
                        }
                    }
                },
                LicenseSpecifications: {
                    locationName: "LicenseSpecification",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            LicenseConfigurationArn: {}
                        }
                    }
                },
                HibernationOptions: {
                    type: "structure",
                    members: {
                        Configured: {
                            type: "boolean"
                        }
                    }
                },
                MetadataOptions: {
                    type: "structure",
                    members: {
                        HttpTokens: {},
                        HttpPutResponseHopLimit: {
                            type: "integer"
                        },
                        HttpEndpoint: {},
                        HttpProtocolIpv6: {},
                        InstanceMetadataTags: {}
                    }
                },
                EnclaveOptions: {
                    type: "structure",
                    members: {
                        Enabled: {
                            type: "boolean"
                        }
                    }
                },
                InstanceRequirements: {
                    shape: "Scu"
                },
                PrivateDnsNameOptions: {
                    type: "structure",
                    members: {
                        HostnameType: {},
                        EnableResourceNameDnsARecord: {
                            type: "boolean"
                        },
                        EnableResourceNameDnsAAAARecord: {
                            type: "boolean"
                        }
                    }
                },
                MaintenanceOptions: {
                    type: "structure",
                    members: {
                        AutoRecovery: {}
                    }
                },
                DisableApiStop: {
                    type: "boolean"
                }
            }
        },
        Sgz: {
            type: "list",
            member: {
                locationName: "SecurityGroupId"
            }
        },
        Sh2: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Primary: {
                        locationName: "primary",
                        type: "boolean"
                    },
                    PrivateIpAddress: {
                        locationName: "privateIpAddress"
                    }
                }
            }
        },
        Sh4: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Ipv4Prefix: {}
                }
            }
        },
        Sh6: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Ipv6Prefix: {}
                }
            }
        },
        Sh8: {
            type: "structure",
            members: {
                EnaSrdEnabled: {
                    type: "boolean"
                },
                EnaSrdUdpSpecification: {
                    type: "structure",
                    members: {
                        EnaSrdUdpEnabled: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sha: {
            type: "structure",
            members: {
                TcpEstablishedTimeout: {
                    type: "integer"
                },
                UdpStreamTimeout: {
                    type: "integer"
                },
                UdpTimeout: {
                    type: "integer"
                }
            }
        },
        Shj: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {}
            }
        },
        Shn: {
            type: "list",
            member: {
                locationName: "SecurityGroup"
            }
        },
        Sht: {
            type: "structure",
            required: [ "CpuCredits" ],
            members: {
                CpuCredits: {}
            }
        },
        Shy: {
            type: "structure",
            members: {
                CapacityReservationId: {},
                CapacityReservationResourceGroupArn: {}
            }
        },
        Sic: {
            type: "structure",
            members: {
                LaunchTemplateId: {
                    locationName: "launchTemplateId"
                },
                LaunchTemplateName: {
                    locationName: "launchTemplateName"
                },
                CreateTime: {
                    locationName: "createTime",
                    type: "timestamp"
                },
                CreatedBy: {
                    locationName: "createdBy"
                },
                DefaultVersionNumber: {
                    locationName: "defaultVersionNumber",
                    type: "long"
                },
                LatestVersionNumber: {
                    locationName: "latestVersionNumber",
                    type: "long"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sid: {
            type: "structure",
            members: {
                Errors: {
                    locationName: "errorSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Code: {
                                locationName: "code"
                            },
                            Message: {
                                locationName: "message"
                            }
                        }
                    }
                }
            }
        },
        Sii: {
            type: "structure",
            members: {
                LaunchTemplateId: {
                    locationName: "launchTemplateId"
                },
                LaunchTemplateName: {
                    locationName: "launchTemplateName"
                },
                VersionNumber: {
                    locationName: "versionNumber",
                    type: "long"
                },
                VersionDescription: {
                    locationName: "versionDescription"
                },
                CreateTime: {
                    locationName: "createTime",
                    type: "timestamp"
                },
                CreatedBy: {
                    locationName: "createdBy"
                },
                DefaultVersion: {
                    locationName: "defaultVersion",
                    type: "boolean"
                },
                LaunchTemplateData: {
                    shape: "Sij",
                    locationName: "launchTemplateData"
                }
            }
        },
        Sij: {
            type: "structure",
            members: {
                KernelId: {
                    locationName: "kernelId"
                },
                EbsOptimized: {
                    locationName: "ebsOptimized",
                    type: "boolean"
                },
                IamInstanceProfile: {
                    locationName: "iamInstanceProfile",
                    type: "structure",
                    members: {
                        Arn: {
                            locationName: "arn"
                        },
                        Name: {
                            locationName: "name"
                        }
                    }
                },
                BlockDeviceMappings: {
                    locationName: "blockDeviceMappingSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            DeviceName: {
                                locationName: "deviceName"
                            },
                            VirtualName: {
                                locationName: "virtualName"
                            },
                            Ebs: {
                                locationName: "ebs",
                                type: "structure",
                                members: {
                                    Encrypted: {
                                        locationName: "encrypted",
                                        type: "boolean"
                                    },
                                    DeleteOnTermination: {
                                        locationName: "deleteOnTermination",
                                        type: "boolean"
                                    },
                                    Iops: {
                                        locationName: "iops",
                                        type: "integer"
                                    },
                                    KmsKeyId: {
                                        locationName: "kmsKeyId"
                                    },
                                    SnapshotId: {
                                        locationName: "snapshotId"
                                    },
                                    VolumeSize: {
                                        locationName: "volumeSize",
                                        type: "integer"
                                    },
                                    VolumeType: {
                                        locationName: "volumeType"
                                    },
                                    Throughput: {
                                        locationName: "throughput",
                                        type: "integer"
                                    }
                                }
                            },
                            NoDevice: {
                                locationName: "noDevice"
                            }
                        }
                    }
                },
                NetworkInterfaces: {
                    locationName: "networkInterfaceSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            AssociateCarrierIpAddress: {
                                locationName: "associateCarrierIpAddress",
                                type: "boolean"
                            },
                            AssociatePublicIpAddress: {
                                locationName: "associatePublicIpAddress",
                                type: "boolean"
                            },
                            DeleteOnTermination: {
                                locationName: "deleteOnTermination",
                                type: "boolean"
                            },
                            Description: {
                                locationName: "description"
                            },
                            DeviceIndex: {
                                locationName: "deviceIndex",
                                type: "integer"
                            },
                            Groups: {
                                shape: "S5v",
                                locationName: "groupSet"
                            },
                            InterfaceType: {
                                locationName: "interfaceType"
                            },
                            Ipv6AddressCount: {
                                locationName: "ipv6AddressCount",
                                type: "integer"
                            },
                            Ipv6Addresses: {
                                shape: "Siq",
                                locationName: "ipv6AddressesSet"
                            },
                            NetworkInterfaceId: {
                                locationName: "networkInterfaceId"
                            },
                            PrivateIpAddress: {
                                locationName: "privateIpAddress"
                            },
                            PrivateIpAddresses: {
                                shape: "Sh2",
                                locationName: "privateIpAddressesSet"
                            },
                            SecondaryPrivateIpAddressCount: {
                                locationName: "secondaryPrivateIpAddressCount",
                                type: "integer"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            NetworkCardIndex: {
                                locationName: "networkCardIndex",
                                type: "integer"
                            },
                            Ipv4Prefixes: {
                                locationName: "ipv4PrefixSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        Ipv4Prefix: {
                                            locationName: "ipv4Prefix"
                                        }
                                    }
                                }
                            },
                            Ipv4PrefixCount: {
                                locationName: "ipv4PrefixCount",
                                type: "integer"
                            },
                            Ipv6Prefixes: {
                                locationName: "ipv6PrefixSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        Ipv6Prefix: {
                                            locationName: "ipv6Prefix"
                                        }
                                    }
                                }
                            },
                            Ipv6PrefixCount: {
                                locationName: "ipv6PrefixCount",
                                type: "integer"
                            },
                            PrimaryIpv6: {
                                locationName: "primaryIpv6",
                                type: "boolean"
                            },
                            EnaSrdSpecification: {
                                locationName: "enaSrdSpecification",
                                type: "structure",
                                members: {
                                    EnaSrdEnabled: {
                                        locationName: "enaSrdEnabled",
                                        type: "boolean"
                                    },
                                    EnaSrdUdpSpecification: {
                                        locationName: "enaSrdUdpSpecification",
                                        type: "structure",
                                        members: {
                                            EnaSrdUdpEnabled: {
                                                locationName: "enaSrdUdpEnabled",
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            ConnectionTrackingSpecification: {
                                locationName: "connectionTrackingSpecification",
                                type: "structure",
                                members: {
                                    TcpEstablishedTimeout: {
                                        locationName: "tcpEstablishedTimeout",
                                        type: "integer"
                                    },
                                    UdpTimeout: {
                                        locationName: "udpTimeout",
                                        type: "integer"
                                    },
                                    UdpStreamTimeout: {
                                        locationName: "udpStreamTimeout",
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                ImageId: {
                    locationName: "imageId"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                KeyName: {
                    locationName: "keyName"
                },
                Monitoring: {
                    locationName: "monitoring",
                    type: "structure",
                    members: {
                        Enabled: {
                            locationName: "enabled",
                            type: "boolean"
                        }
                    }
                },
                Placement: {
                    locationName: "placement",
                    type: "structure",
                    members: {
                        AvailabilityZone: {
                            locationName: "availabilityZone"
                        },
                        Affinity: {
                            locationName: "affinity"
                        },
                        GroupName: {
                            locationName: "groupName"
                        },
                        HostId: {
                            locationName: "hostId"
                        },
                        Tenancy: {
                            locationName: "tenancy"
                        },
                        SpreadDomain: {
                            locationName: "spreadDomain"
                        },
                        HostResourceGroupArn: {
                            locationName: "hostResourceGroupArn"
                        },
                        PartitionNumber: {
                            locationName: "partitionNumber",
                            type: "integer"
                        },
                        GroupId: {
                            locationName: "groupId"
                        }
                    }
                },
                RamDiskId: {
                    locationName: "ramDiskId"
                },
                DisableApiTermination: {
                    locationName: "disableApiTermination",
                    type: "boolean"
                },
                InstanceInitiatedShutdownBehavior: {
                    locationName: "instanceInitiatedShutdownBehavior"
                },
                UserData: {
                    shape: "Sgo",
                    locationName: "userData"
                },
                TagSpecifications: {
                    locationName: "tagSpecificationSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            ResourceType: {
                                locationName: "resourceType"
                            },
                            Tags: {
                                shape: "S6",
                                locationName: "tagSet"
                            }
                        }
                    }
                },
                ElasticGpuSpecifications: {
                    locationName: "elasticGpuSpecificationSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Type: {
                                locationName: "type"
                            }
                        }
                    }
                },
                ElasticInferenceAccelerators: {
                    locationName: "elasticInferenceAcceleratorSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Type: {
                                locationName: "type"
                            },
                            Count: {
                                locationName: "count",
                                type: "integer"
                            }
                        }
                    }
                },
                SecurityGroupIds: {
                    shape: "So",
                    locationName: "securityGroupIdSet"
                },
                SecurityGroups: {
                    shape: "So",
                    locationName: "securityGroupSet"
                },
                InstanceMarketOptions: {
                    locationName: "instanceMarketOptions",
                    type: "structure",
                    members: {
                        MarketType: {
                            locationName: "marketType"
                        },
                        SpotOptions: {
                            locationName: "spotOptions",
                            type: "structure",
                            members: {
                                MaxPrice: {
                                    locationName: "maxPrice"
                                },
                                SpotInstanceType: {
                                    locationName: "spotInstanceType"
                                },
                                BlockDurationMinutes: {
                                    locationName: "blockDurationMinutes",
                                    type: "integer"
                                },
                                ValidUntil: {
                                    locationName: "validUntil",
                                    type: "timestamp"
                                },
                                InstanceInterruptionBehavior: {
                                    locationName: "instanceInterruptionBehavior"
                                }
                            }
                        }
                    }
                },
                CreditSpecification: {
                    locationName: "creditSpecification",
                    type: "structure",
                    members: {
                        CpuCredits: {
                            locationName: "cpuCredits"
                        }
                    }
                },
                CpuOptions: {
                    locationName: "cpuOptions",
                    type: "structure",
                    members: {
                        CoreCount: {
                            locationName: "coreCount",
                            type: "integer"
                        },
                        ThreadsPerCore: {
                            locationName: "threadsPerCore",
                            type: "integer"
                        },
                        AmdSevSnp: {
                            locationName: "amdSevSnp"
                        }
                    }
                },
                CapacityReservationSpecification: {
                    locationName: "capacityReservationSpecification",
                    type: "structure",
                    members: {
                        CapacityReservationPreference: {
                            locationName: "capacityReservationPreference"
                        },
                        CapacityReservationTarget: {
                            shape: "Sjc",
                            locationName: "capacityReservationTarget"
                        }
                    }
                },
                LicenseSpecifications: {
                    locationName: "licenseSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            LicenseConfigurationArn: {
                                locationName: "licenseConfigurationArn"
                            }
                        }
                    }
                },
                HibernationOptions: {
                    locationName: "hibernationOptions",
                    type: "structure",
                    members: {
                        Configured: {
                            locationName: "configured",
                            type: "boolean"
                        }
                    }
                },
                MetadataOptions: {
                    locationName: "metadataOptions",
                    type: "structure",
                    members: {
                        State: {
                            locationName: "state"
                        },
                        HttpTokens: {
                            locationName: "httpTokens"
                        },
                        HttpPutResponseHopLimit: {
                            locationName: "httpPutResponseHopLimit",
                            type: "integer"
                        },
                        HttpEndpoint: {
                            locationName: "httpEndpoint"
                        },
                        HttpProtocolIpv6: {
                            locationName: "httpProtocolIpv6"
                        },
                        InstanceMetadataTags: {
                            locationName: "instanceMetadataTags"
                        }
                    }
                },
                EnclaveOptions: {
                    locationName: "enclaveOptions",
                    type: "structure",
                    members: {
                        Enabled: {
                            locationName: "enabled",
                            type: "boolean"
                        }
                    }
                },
                InstanceRequirements: {
                    shape: "Sdz",
                    locationName: "instanceRequirements"
                },
                PrivateDnsNameOptions: {
                    locationName: "privateDnsNameOptions",
                    type: "structure",
                    members: {
                        HostnameType: {
                            locationName: "hostnameType"
                        },
                        EnableResourceNameDnsARecord: {
                            locationName: "enableResourceNameDnsARecord",
                            type: "boolean"
                        },
                        EnableResourceNameDnsAAAARecord: {
                            locationName: "enableResourceNameDnsAAAARecord",
                            type: "boolean"
                        }
                    }
                },
                MaintenanceOptions: {
                    locationName: "maintenanceOptions",
                    type: "structure",
                    members: {
                        AutoRecovery: {
                            locationName: "autoRecovery"
                        }
                    }
                },
                DisableApiStop: {
                    locationName: "disableApiStop",
                    type: "boolean"
                }
            }
        },
        Siq: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Ipv6Address: {
                        locationName: "ipv6Address"
                    },
                    IsPrimaryIpv6: {
                        locationName: "isPrimaryIpv6",
                        type: "boolean"
                    }
                }
            }
        },
        Sjc: {
            type: "structure",
            members: {
                CapacityReservationId: {
                    locationName: "capacityReservationId"
                },
                CapacityReservationResourceGroupArn: {
                    locationName: "capacityReservationResourceGroupArn"
                }
            }
        },
        Sjo: {
            type: "structure",
            members: {
                DestinationCidrBlock: {
                    locationName: "destinationCidrBlock"
                },
                LocalGatewayVirtualInterfaceGroupId: {
                    locationName: "localGatewayVirtualInterfaceGroupId"
                },
                Type: {
                    locationName: "type"
                },
                State: {
                    locationName: "state"
                },
                LocalGatewayRouteTableId: {
                    locationName: "localGatewayRouteTableId"
                },
                LocalGatewayRouteTableArn: {
                    locationName: "localGatewayRouteTableArn"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                CoipPoolId: {
                    locationName: "coipPoolId"
                },
                NetworkInterfaceId: {
                    locationName: "networkInterfaceId"
                },
                DestinationPrefixListId: {
                    locationName: "destinationPrefixListId"
                }
            }
        },
        Sjv: {
            type: "structure",
            members: {
                LocalGatewayRouteTableId: {
                    locationName: "localGatewayRouteTableId"
                },
                LocalGatewayRouteTableArn: {
                    locationName: "localGatewayRouteTableArn"
                },
                LocalGatewayId: {
                    locationName: "localGatewayId"
                },
                OutpostArn: {
                    locationName: "outpostArn"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                Mode: {
                    locationName: "mode"
                },
                StateReason: {
                    shape: "Sjw",
                    locationName: "stateReason"
                }
            }
        },
        Sjw: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        Sjz: {
            type: "structure",
            members: {
                LocalGatewayRouteTableVirtualInterfaceGroupAssociationId: {
                    locationName: "localGatewayRouteTableVirtualInterfaceGroupAssociationId"
                },
                LocalGatewayVirtualInterfaceGroupId: {
                    locationName: "localGatewayVirtualInterfaceGroupId"
                },
                LocalGatewayId: {
                    locationName: "localGatewayId"
                },
                LocalGatewayRouteTableId: {
                    locationName: "localGatewayRouteTableId"
                },
                LocalGatewayRouteTableArn: {
                    locationName: "localGatewayRouteTableArn"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sk3: {
            type: "structure",
            members: {
                LocalGatewayRouteTableVpcAssociationId: {
                    locationName: "localGatewayRouteTableVpcAssociationId"
                },
                LocalGatewayRouteTableId: {
                    locationName: "localGatewayRouteTableId"
                },
                LocalGatewayRouteTableArn: {
                    locationName: "localGatewayRouteTableArn"
                },
                LocalGatewayId: {
                    locationName: "localGatewayId"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sk6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Cidr" ],
                members: {
                    Cidr: {},
                    Description: {}
                }
            }
        },
        Sk9: {
            type: "structure",
            members: {
                PrefixListId: {
                    locationName: "prefixListId"
                },
                AddressFamily: {
                    locationName: "addressFamily"
                },
                State: {
                    locationName: "state"
                },
                StateMessage: {
                    locationName: "stateMessage"
                },
                PrefixListArn: {
                    locationName: "prefixListArn"
                },
                PrefixListName: {
                    locationName: "prefixListName"
                },
                MaxEntries: {
                    locationName: "maxEntries",
                    type: "integer"
                },
                Version: {
                    locationName: "version",
                    type: "long"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                OwnerId: {
                    locationName: "ownerId"
                }
            }
        },
        Ske: {
            type: "structure",
            members: {
                CreateTime: {
                    locationName: "createTime",
                    type: "timestamp"
                },
                DeleteTime: {
                    locationName: "deleteTime",
                    type: "timestamp"
                },
                FailureCode: {
                    locationName: "failureCode"
                },
                FailureMessage: {
                    locationName: "failureMessage"
                },
                NatGatewayAddresses: {
                    shape: "S3b",
                    locationName: "natGatewayAddressSet"
                },
                NatGatewayId: {
                    locationName: "natGatewayId"
                },
                ProvisionedBandwidth: {
                    locationName: "provisionedBandwidth",
                    type: "structure",
                    members: {
                        ProvisionTime: {
                            locationName: "provisionTime",
                            type: "timestamp"
                        },
                        Provisioned: {
                            locationName: "provisioned"
                        },
                        RequestTime: {
                            locationName: "requestTime",
                            type: "timestamp"
                        },
                        Requested: {
                            locationName: "requested"
                        },
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                State: {
                    locationName: "state"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                ConnectivityType: {
                    locationName: "connectivityType"
                }
            }
        },
        Skj: {
            type: "structure",
            members: {
                Associations: {
                    locationName: "associationSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            NetworkAclAssociationId: {
                                locationName: "networkAclAssociationId"
                            },
                            NetworkAclId: {
                                locationName: "networkAclId"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            }
                        }
                    }
                },
                Entries: {
                    locationName: "entrySet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            CidrBlock: {
                                locationName: "cidrBlock"
                            },
                            Egress: {
                                locationName: "egress",
                                type: "boolean"
                            },
                            IcmpTypeCode: {
                                shape: "Sko",
                                locationName: "icmpTypeCode"
                            },
                            Ipv6CidrBlock: {
                                locationName: "ipv6CidrBlock"
                            },
                            PortRange: {
                                shape: "Skp",
                                locationName: "portRange"
                            },
                            Protocol: {
                                locationName: "protocol"
                            },
                            RuleAction: {
                                locationName: "ruleAction"
                            },
                            RuleNumber: {
                                locationName: "ruleNumber",
                                type: "integer"
                            }
                        }
                    }
                },
                IsDefault: {
                    locationName: "default",
                    type: "boolean"
                },
                NetworkAclId: {
                    locationName: "networkAclId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                OwnerId: {
                    locationName: "ownerId"
                }
            }
        },
        Sko: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code",
                    type: "integer"
                },
                Type: {
                    locationName: "type",
                    type: "integer"
                }
            }
        },
        Skp: {
            type: "structure",
            members: {
                From: {
                    locationName: "from",
                    type: "integer"
                },
                To: {
                    locationName: "to",
                    type: "integer"
                }
            }
        },
        Sku: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Source: {
                        shape: "Skw"
                    },
                    Destination: {
                        shape: "Skw"
                    },
                    ThroughResources: {
                        locationName: "ThroughResource",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ResourceStatement: {
                                    shape: "Sl0"
                                }
                            }
                        }
                    }
                }
            }
        },
        Skw: {
            type: "structure",
            members: {
                PacketHeaderStatement: {
                    type: "structure",
                    members: {
                        SourceAddresses: {
                            shape: "So",
                            locationName: "SourceAddress"
                        },
                        DestinationAddresses: {
                            shape: "So",
                            locationName: "DestinationAddress"
                        },
                        SourcePorts: {
                            shape: "So",
                            locationName: "SourcePort"
                        },
                        DestinationPorts: {
                            shape: "So",
                            locationName: "DestinationPort"
                        },
                        SourcePrefixLists: {
                            shape: "So",
                            locationName: "SourcePrefixList"
                        },
                        DestinationPrefixLists: {
                            shape: "So",
                            locationName: "DestinationPrefixList"
                        },
                        Protocols: {
                            shape: "Sky",
                            locationName: "Protocol"
                        }
                    }
                },
                ResourceStatement: {
                    shape: "Sl0"
                }
            }
        },
        Sky: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sl0: {
            type: "structure",
            members: {
                Resources: {
                    shape: "So",
                    locationName: "Resource"
                },
                ResourceTypes: {
                    shape: "So",
                    locationName: "ResourceType"
                }
            }
        },
        Sl4: {
            type: "structure",
            members: {
                NetworkInsightsAccessScopeId: {
                    locationName: "networkInsightsAccessScopeId"
                },
                NetworkInsightsAccessScopeArn: {
                    locationName: "networkInsightsAccessScopeArn"
                },
                CreatedDate: {
                    locationName: "createdDate",
                    type: "timestamp"
                },
                UpdatedDate: {
                    locationName: "updatedDate",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sl6: {
            type: "structure",
            members: {
                NetworkInsightsAccessScopeId: {
                    locationName: "networkInsightsAccessScopeId"
                },
                MatchPaths: {
                    shape: "Sl7",
                    locationName: "matchPathSet"
                },
                ExcludePaths: {
                    shape: "Sl7",
                    locationName: "excludePathSet"
                }
            }
        },
        Sl7: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Source: {
                        shape: "Sl9",
                        locationName: "source"
                    },
                    Destination: {
                        shape: "Sl9",
                        locationName: "destination"
                    },
                    ThroughResources: {
                        locationName: "throughResourceSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                ResourceStatement: {
                                    shape: "Slb",
                                    locationName: "resourceStatement"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sl9: {
            type: "structure",
            members: {
                PacketHeaderStatement: {
                    locationName: "packetHeaderStatement",
                    type: "structure",
                    members: {
                        SourceAddresses: {
                            shape: "So",
                            locationName: "sourceAddressSet"
                        },
                        DestinationAddresses: {
                            shape: "So",
                            locationName: "destinationAddressSet"
                        },
                        SourcePorts: {
                            shape: "So",
                            locationName: "sourcePortSet"
                        },
                        DestinationPorts: {
                            shape: "So",
                            locationName: "destinationPortSet"
                        },
                        SourcePrefixLists: {
                            shape: "So",
                            locationName: "sourcePrefixListSet"
                        },
                        DestinationPrefixLists: {
                            shape: "So",
                            locationName: "destinationPrefixListSet"
                        },
                        Protocols: {
                            shape: "Sky",
                            locationName: "protocolSet"
                        }
                    }
                },
                ResourceStatement: {
                    shape: "Slb",
                    locationName: "resourceStatement"
                }
            }
        },
        Slb: {
            type: "structure",
            members: {
                Resources: {
                    shape: "So",
                    locationName: "resourceSet"
                },
                ResourceTypes: {
                    shape: "So",
                    locationName: "resourceTypeSet"
                }
            }
        },
        Sli: {
            type: "structure",
            members: {
                SourceAddress: {},
                SourcePortRange: {
                    shape: "Slj"
                },
                DestinationAddress: {},
                DestinationPortRange: {
                    shape: "Slj"
                }
            }
        },
        Slj: {
            type: "structure",
            members: {
                FromPort: {
                    type: "integer"
                },
                ToPort: {
                    type: "integer"
                }
            }
        },
        Sll: {
            type: "structure",
            members: {
                NetworkInsightsPathId: {
                    locationName: "networkInsightsPathId"
                },
                NetworkInsightsPathArn: {
                    locationName: "networkInsightsPathArn"
                },
                CreatedDate: {
                    locationName: "createdDate",
                    type: "timestamp"
                },
                Source: {
                    locationName: "source"
                },
                Destination: {
                    locationName: "destination"
                },
                SourceArn: {
                    locationName: "sourceArn"
                },
                DestinationArn: {
                    locationName: "destinationArn"
                },
                SourceIp: {
                    locationName: "sourceIp"
                },
                DestinationIp: {
                    locationName: "destinationIp"
                },
                Protocol: {
                    locationName: "protocol"
                },
                DestinationPort: {
                    locationName: "destinationPort",
                    type: "integer"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                FilterAtSource: {
                    shape: "Sln",
                    locationName: "filterAtSource"
                },
                FilterAtDestination: {
                    shape: "Sln",
                    locationName: "filterAtDestination"
                }
            }
        },
        Sln: {
            type: "structure",
            members: {
                SourceAddress: {
                    locationName: "sourceAddress"
                },
                SourcePortRange: {
                    shape: "Slo",
                    locationName: "sourcePortRange"
                },
                DestinationAddress: {
                    locationName: "destinationAddress"
                },
                DestinationPortRange: {
                    shape: "Slo",
                    locationName: "destinationPortRange"
                }
            }
        },
        Slo: {
            type: "structure",
            members: {
                FromPort: {
                    locationName: "fromPort",
                    type: "integer"
                },
                ToPort: {
                    locationName: "toPort",
                    type: "integer"
                }
            }
        },
        Sls: {
            type: "structure",
            members: {
                Association: {
                    shape: "Slt",
                    locationName: "association"
                },
                Attachment: {
                    shape: "Slu",
                    locationName: "attachment"
                },
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                ConnectionTrackingConfiguration: {
                    locationName: "connectionTrackingConfiguration",
                    type: "structure",
                    members: {
                        TcpEstablishedTimeout: {
                            locationName: "tcpEstablishedTimeout",
                            type: "integer"
                        },
                        UdpStreamTimeout: {
                            locationName: "udpStreamTimeout",
                            type: "integer"
                        },
                        UdpTimeout: {
                            locationName: "udpTimeout",
                            type: "integer"
                        }
                    }
                },
                Description: {
                    locationName: "description"
                },
                Groups: {
                    shape: "Sly",
                    locationName: "groupSet"
                },
                InterfaceType: {
                    locationName: "interfaceType"
                },
                Ipv6Addresses: {
                    locationName: "ipv6AddressesSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Ipv6Address: {
                                locationName: "ipv6Address"
                            },
                            IsPrimaryIpv6: {
                                locationName: "isPrimaryIpv6",
                                type: "boolean"
                            }
                        }
                    }
                },
                MacAddress: {
                    locationName: "macAddress"
                },
                NetworkInterfaceId: {
                    locationName: "networkInterfaceId"
                },
                OutpostArn: {
                    locationName: "outpostArn"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                PrivateDnsName: {
                    locationName: "privateDnsName"
                },
                PrivateIpAddress: {
                    locationName: "privateIpAddress"
                },
                PrivateIpAddresses: {
                    locationName: "privateIpAddressesSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Association: {
                                shape: "Slt",
                                locationName: "association"
                            },
                            Primary: {
                                locationName: "primary",
                                type: "boolean"
                            },
                            PrivateDnsName: {
                                locationName: "privateDnsName"
                            },
                            PrivateIpAddress: {
                                locationName: "privateIpAddress"
                            }
                        }
                    }
                },
                Ipv4Prefixes: {
                    shape: "S34",
                    locationName: "ipv4PrefixSet"
                },
                Ipv6Prefixes: {
                    locationName: "ipv6PrefixSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Ipv6Prefix: {
                                locationName: "ipv6Prefix"
                            }
                        }
                    }
                },
                RequesterId: {
                    locationName: "requesterId"
                },
                RequesterManaged: {
                    locationName: "requesterManaged",
                    type: "boolean"
                },
                SourceDestCheck: {
                    locationName: "sourceDestCheck",
                    type: "boolean"
                },
                Status: {
                    locationName: "status"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                TagSet: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                DenyAllIgwTraffic: {
                    locationName: "denyAllIgwTraffic",
                    type: "boolean"
                },
                Ipv6Native: {
                    locationName: "ipv6Native",
                    type: "boolean"
                },
                Ipv6Address: {
                    locationName: "ipv6Address"
                }
            }
        },
        Slt: {
            type: "structure",
            members: {
                AllocationId: {
                    locationName: "allocationId"
                },
                AssociationId: {
                    locationName: "associationId"
                },
                IpOwnerId: {
                    locationName: "ipOwnerId"
                },
                PublicDnsName: {
                    locationName: "publicDnsName"
                },
                PublicIp: {
                    locationName: "publicIp"
                },
                CustomerOwnedIp: {
                    locationName: "customerOwnedIp"
                },
                CarrierIp: {
                    locationName: "carrierIp"
                }
            }
        },
        Slu: {
            type: "structure",
            members: {
                AttachTime: {
                    locationName: "attachTime",
                    type: "timestamp"
                },
                AttachmentId: {
                    locationName: "attachmentId"
                },
                DeleteOnTermination: {
                    locationName: "deleteOnTermination",
                    type: "boolean"
                },
                DeviceIndex: {
                    locationName: "deviceIndex",
                    type: "integer"
                },
                NetworkCardIndex: {
                    locationName: "networkCardIndex",
                    type: "integer"
                },
                InstanceId: {
                    locationName: "instanceId"
                },
                InstanceOwnerId: {
                    locationName: "instanceOwnerId"
                },
                Status: {
                    locationName: "status"
                },
                EnaSrdSpecification: {
                    locationName: "enaSrdSpecification",
                    type: "structure",
                    members: {
                        EnaSrdEnabled: {
                            locationName: "enaSrdEnabled",
                            type: "boolean"
                        },
                        EnaSrdUdpSpecification: {
                            locationName: "enaSrdUdpSpecification",
                            type: "structure",
                            members: {
                                EnaSrdUdpEnabled: {
                                    locationName: "enaSrdUdpEnabled",
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sly: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    GroupName: {
                        locationName: "groupName"
                    },
                    GroupId: {
                        locationName: "groupId"
                    }
                }
            }
        },
        Smb: {
            type: "structure",
            members: {
                NetworkInterfacePermissionId: {
                    locationName: "networkInterfacePermissionId"
                },
                NetworkInterfaceId: {
                    locationName: "networkInterfaceId"
                },
                AwsAccountId: {
                    locationName: "awsAccountId"
                },
                AwsService: {
                    locationName: "awsService"
                },
                Permission: {
                    locationName: "permission"
                },
                PermissionState: {
                    locationName: "permissionState",
                    type: "structure",
                    members: {
                        State: {
                            locationName: "state"
                        },
                        StatusMessage: {
                            locationName: "statusMessage"
                        }
                    }
                }
            }
        },
        Smi: {
            type: "structure",
            members: {
                GroupName: {
                    locationName: "groupName"
                },
                State: {
                    locationName: "state"
                },
                Strategy: {
                    locationName: "strategy"
                },
                PartitionCount: {
                    locationName: "partitionCount",
                    type: "integer"
                },
                GroupId: {
                    locationName: "groupId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                GroupArn: {
                    locationName: "groupArn"
                },
                SpreadLevel: {
                    locationName: "spreadLevel"
                }
            }
        },
        Smo: {
            type: "structure",
            members: {
                ReplaceRootVolumeTaskId: {
                    locationName: "replaceRootVolumeTaskId"
                },
                InstanceId: {
                    locationName: "instanceId"
                },
                TaskState: {
                    locationName: "taskState"
                },
                StartTime: {
                    locationName: "startTime"
                },
                CompleteTime: {
                    locationName: "completeTime"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                ImageId: {
                    locationName: "imageId"
                },
                SnapshotId: {
                    locationName: "snapshotId"
                },
                DeleteReplacedRootVolume: {
                    locationName: "deleteReplacedRootVolume",
                    type: "boolean"
                }
            }
        },
        Sn4: {
            type: "structure",
            members: {
                Associations: {
                    locationName: "associationSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            Main: {
                                locationName: "main",
                                type: "boolean"
                            },
                            RouteTableAssociationId: {
                                locationName: "routeTableAssociationId"
                            },
                            RouteTableId: {
                                locationName: "routeTableId"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            GatewayId: {
                                locationName: "gatewayId"
                            },
                            AssociationState: {
                                shape: "S4x",
                                locationName: "associationState"
                            }
                        }
                    }
                },
                PropagatingVgws: {
                    locationName: "propagatingVgwSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            GatewayId: {
                                locationName: "gatewayId"
                            }
                        }
                    }
                },
                RouteTableId: {
                    locationName: "routeTableId"
                },
                Routes: {
                    locationName: "routeSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            DestinationCidrBlock: {
                                locationName: "destinationCidrBlock"
                            },
                            DestinationIpv6CidrBlock: {
                                locationName: "destinationIpv6CidrBlock"
                            },
                            DestinationPrefixListId: {
                                locationName: "destinationPrefixListId"
                            },
                            EgressOnlyInternetGatewayId: {
                                locationName: "egressOnlyInternetGatewayId"
                            },
                            GatewayId: {
                                locationName: "gatewayId"
                            },
                            InstanceId: {
                                locationName: "instanceId"
                            },
                            InstanceOwnerId: {
                                locationName: "instanceOwnerId"
                            },
                            NatGatewayId: {
                                locationName: "natGatewayId"
                            },
                            TransitGatewayId: {
                                locationName: "transitGatewayId"
                            },
                            LocalGatewayId: {
                                locationName: "localGatewayId"
                            },
                            CarrierGatewayId: {
                                locationName: "carrierGatewayId"
                            },
                            NetworkInterfaceId: {
                                locationName: "networkInterfaceId"
                            },
                            Origin: {
                                locationName: "origin"
                            },
                            State: {
                                locationName: "state"
                            },
                            VpcPeeringConnectionId: {
                                locationName: "vpcPeeringConnectionId"
                            },
                            CoreNetworkArn: {
                                locationName: "coreNetworkArn"
                            }
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                OwnerId: {
                    locationName: "ownerId"
                }
            }
        },
        Sng: {
            type: "structure",
            members: {
                DataEncryptionKeyId: {
                    locationName: "dataEncryptionKeyId"
                },
                Description: {
                    locationName: "description"
                },
                Encrypted: {
                    locationName: "encrypted",
                    type: "boolean"
                },
                KmsKeyId: {
                    locationName: "kmsKeyId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Progress: {
                    locationName: "progress"
                },
                SnapshotId: {
                    locationName: "snapshotId"
                },
                StartTime: {
                    locationName: "startTime",
                    type: "timestamp"
                },
                State: {
                    locationName: "status"
                },
                StateMessage: {
                    locationName: "statusMessage"
                },
                VolumeId: {
                    locationName: "volumeId"
                },
                VolumeSize: {
                    locationName: "volumeSize",
                    type: "integer"
                },
                OwnerAlias: {
                    locationName: "ownerAlias"
                },
                OutpostArn: {
                    locationName: "outpostArn"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                StorageTier: {
                    locationName: "storageTier"
                },
                RestoreExpiryTime: {
                    locationName: "restoreExpiryTime",
                    type: "timestamp"
                },
                SseType: {
                    locationName: "sseType"
                }
            }
        },
        Snn: {
            type: "list",
            member: {
                locationName: "VolumeId"
            }
        },
        Snu: {
            type: "structure",
            members: {
                Bucket: {
                    locationName: "bucket"
                },
                Fault: {
                    shape: "Snv",
                    locationName: "fault"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Prefix: {
                    locationName: "prefix"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        Snv: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        So6: {
            type: "structure",
            members: {
                SubnetCidrReservationId: {
                    locationName: "subnetCidrReservationId"
                },
                SubnetId: {
                    locationName: "subnetId"
                },
                Cidr: {
                    locationName: "cidr"
                },
                ReservationType: {
                    locationName: "reservationType"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Description: {
                    locationName: "description"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        So9: {
            type: "list",
            member: {}
        },
        Sod: {
            type: "structure",
            members: {
                TrafficMirrorFilterId: {
                    locationName: "trafficMirrorFilterId"
                },
                IngressFilterRules: {
                    shape: "Soe",
                    locationName: "ingressFilterRuleSet"
                },
                EgressFilterRules: {
                    shape: "Soe",
                    locationName: "egressFilterRuleSet"
                },
                NetworkServices: {
                    shape: "Soj",
                    locationName: "networkServiceSet"
                },
                Description: {
                    locationName: "description"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Soe: {
            type: "list",
            member: {
                shape: "Sof",
                locationName: "item"
            }
        },
        Sof: {
            type: "structure",
            members: {
                TrafficMirrorFilterRuleId: {
                    locationName: "trafficMirrorFilterRuleId"
                },
                TrafficMirrorFilterId: {
                    locationName: "trafficMirrorFilterId"
                },
                TrafficDirection: {
                    locationName: "trafficDirection"
                },
                RuleNumber: {
                    locationName: "ruleNumber",
                    type: "integer"
                },
                RuleAction: {
                    locationName: "ruleAction"
                },
                Protocol: {
                    locationName: "protocol",
                    type: "integer"
                },
                DestinationPortRange: {
                    shape: "Soi",
                    locationName: "destinationPortRange"
                },
                SourcePortRange: {
                    shape: "Soi",
                    locationName: "sourcePortRange"
                },
                DestinationCidrBlock: {
                    locationName: "destinationCidrBlock"
                },
                SourceCidrBlock: {
                    locationName: "sourceCidrBlock"
                },
                Description: {
                    locationName: "description"
                }
            }
        },
        Soi: {
            type: "structure",
            members: {
                FromPort: {
                    locationName: "fromPort",
                    type: "integer"
                },
                ToPort: {
                    locationName: "toPort",
                    type: "integer"
                }
            }
        },
        Soj: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Son: {
            type: "structure",
            members: {
                FromPort: {
                    type: "integer"
                },
                ToPort: {
                    type: "integer"
                }
            }
        },
        Sos: {
            type: "structure",
            members: {
                TrafficMirrorSessionId: {
                    locationName: "trafficMirrorSessionId"
                },
                TrafficMirrorTargetId: {
                    locationName: "trafficMirrorTargetId"
                },
                TrafficMirrorFilterId: {
                    locationName: "trafficMirrorFilterId"
                },
                NetworkInterfaceId: {
                    locationName: "networkInterfaceId"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                PacketLength: {
                    locationName: "packetLength",
                    type: "integer"
                },
                SessionNumber: {
                    locationName: "sessionNumber",
                    type: "integer"
                },
                VirtualNetworkId: {
                    locationName: "virtualNetworkId",
                    type: "integer"
                },
                Description: {
                    locationName: "description"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sov: {
            type: "structure",
            members: {
                TrafficMirrorTargetId: {
                    locationName: "trafficMirrorTargetId"
                },
                NetworkInterfaceId: {
                    locationName: "networkInterfaceId"
                },
                NetworkLoadBalancerArn: {
                    locationName: "networkLoadBalancerArn"
                },
                Type: {
                    locationName: "type"
                },
                Description: {
                    locationName: "description"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                GatewayLoadBalancerEndpointId: {
                    locationName: "gatewayLoadBalancerEndpointId"
                }
            }
        },
        Sp4: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sp6: {
            type: "structure",
            members: {
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                TransitGatewayArn: {
                    locationName: "transitGatewayArn"
                },
                State: {
                    locationName: "state"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Description: {
                    locationName: "description"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Options: {
                    locationName: "options",
                    type: "structure",
                    members: {
                        AmazonSideAsn: {
                            locationName: "amazonSideAsn",
                            type: "long"
                        },
                        TransitGatewayCidrBlocks: {
                            shape: "So",
                            locationName: "transitGatewayCidrBlocks"
                        },
                        AutoAcceptSharedAttachments: {
                            locationName: "autoAcceptSharedAttachments"
                        },
                        DefaultRouteTableAssociation: {
                            locationName: "defaultRouteTableAssociation"
                        },
                        AssociationDefaultRouteTableId: {
                            locationName: "associationDefaultRouteTableId"
                        },
                        DefaultRouteTablePropagation: {
                            locationName: "defaultRouteTablePropagation"
                        },
                        PropagationDefaultRouteTableId: {
                            locationName: "propagationDefaultRouteTableId"
                        },
                        VpnEcmpSupport: {
                            locationName: "vpnEcmpSupport"
                        },
                        DnsSupport: {
                            locationName: "dnsSupport"
                        },
                        SecurityGroupReferencingSupport: {
                            locationName: "securityGroupReferencingSupport"
                        },
                        MulticastSupport: {
                            locationName: "multicastSupport"
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Spd: {
            type: "structure",
            members: {
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                TransportTransitGatewayAttachmentId: {
                    locationName: "transportTransitGatewayAttachmentId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                State: {
                    locationName: "state"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Options: {
                    locationName: "options",
                    type: "structure",
                    members: {
                        Protocol: {
                            locationName: "protocol"
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sph: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Spj: {
            type: "structure",
            members: {
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                TransitGatewayConnectPeerId: {
                    locationName: "transitGatewayConnectPeerId"
                },
                State: {
                    locationName: "state"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                ConnectPeerConfiguration: {
                    locationName: "connectPeerConfiguration",
                    type: "structure",
                    members: {
                        TransitGatewayAddress: {
                            locationName: "transitGatewayAddress"
                        },
                        PeerAddress: {
                            locationName: "peerAddress"
                        },
                        InsideCidrBlocks: {
                            shape: "Sph",
                            locationName: "insideCidrBlocks"
                        },
                        Protocol: {
                            locationName: "protocol"
                        },
                        BgpConfigurations: {
                            locationName: "bgpConfigurations",
                            type: "list",
                            member: {
                                locationName: "item",
                                type: "structure",
                                members: {
                                    TransitGatewayAsn: {
                                        locationName: "transitGatewayAsn",
                                        type: "long"
                                    },
                                    PeerAsn: {
                                        locationName: "peerAsn",
                                        type: "long"
                                    },
                                    TransitGatewayAddress: {
                                        locationName: "transitGatewayAddress"
                                    },
                                    PeerAddress: {
                                        locationName: "peerAddress"
                                    },
                                    BgpStatus: {
                                        locationName: "bgpStatus"
                                    }
                                }
                            }
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Spw: {
            type: "structure",
            members: {
                TransitGatewayMulticastDomainId: {
                    locationName: "transitGatewayMulticastDomainId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                TransitGatewayMulticastDomainArn: {
                    locationName: "transitGatewayMulticastDomainArn"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                Options: {
                    locationName: "options",
                    type: "structure",
                    members: {
                        Igmpv2Support: {
                            locationName: "igmpv2Support"
                        },
                        StaticSourcesSupport: {
                            locationName: "staticSourcesSupport"
                        },
                        AutoAcceptSharedAssociations: {
                            locationName: "autoAcceptSharedAssociations"
                        }
                    }
                },
                State: {
                    locationName: "state"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sq5: {
            type: "structure",
            members: {
                TransitGatewayPolicyTableId: {
                    locationName: "transitGatewayPolicyTableId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                State: {
                    locationName: "state"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sq9: {
            type: "structure",
            members: {
                TransitGatewayRouteTableId: {
                    locationName: "transitGatewayRouteTableId"
                },
                PrefixListId: {
                    locationName: "prefixListId"
                },
                PrefixListOwnerId: {
                    locationName: "prefixListOwnerId"
                },
                State: {
                    locationName: "state"
                },
                Blackhole: {
                    locationName: "blackhole",
                    type: "boolean"
                },
                TransitGatewayAttachment: {
                    locationName: "transitGatewayAttachment",
                    type: "structure",
                    members: {
                        TransitGatewayAttachmentId: {
                            locationName: "transitGatewayAttachmentId"
                        },
                        ResourceType: {
                            locationName: "resourceType"
                        },
                        ResourceId: {
                            locationName: "resourceId"
                        }
                    }
                }
            }
        },
        Sqe: {
            type: "structure",
            members: {
                DestinationCidrBlock: {
                    locationName: "destinationCidrBlock"
                },
                PrefixListId: {
                    locationName: "prefixListId"
                },
                TransitGatewayRouteTableAnnouncementId: {
                    locationName: "transitGatewayRouteTableAnnouncementId"
                },
                TransitGatewayAttachments: {
                    locationName: "transitGatewayAttachments",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            ResourceId: {
                                locationName: "resourceId"
                            },
                            TransitGatewayAttachmentId: {
                                locationName: "transitGatewayAttachmentId"
                            },
                            ResourceType: {
                                locationName: "resourceType"
                            }
                        }
                    }
                },
                Type: {
                    locationName: "type"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        Sqm: {
            type: "structure",
            members: {
                TransitGatewayRouteTableId: {
                    locationName: "transitGatewayRouteTableId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                State: {
                    locationName: "state"
                },
                DefaultAssociationRouteTable: {
                    locationName: "defaultAssociationRouteTable",
                    type: "boolean"
                },
                DefaultPropagationRouteTable: {
                    locationName: "defaultPropagationRouteTable",
                    type: "boolean"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sqq: {
            type: "structure",
            members: {
                TransitGatewayRouteTableAnnouncementId: {
                    locationName: "transitGatewayRouteTableAnnouncementId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                CoreNetworkId: {
                    locationName: "coreNetworkId"
                },
                PeerTransitGatewayId: {
                    locationName: "peerTransitGatewayId"
                },
                PeerCoreNetworkId: {
                    locationName: "peerCoreNetworkId"
                },
                PeeringAttachmentId: {
                    locationName: "peeringAttachmentId"
                },
                AnnouncementDirection: {
                    locationName: "announcementDirection"
                },
                TransitGatewayRouteTableId: {
                    locationName: "transitGatewayRouteTableId"
                },
                State: {
                    locationName: "state"
                },
                CreationTime: {
                    locationName: "creationTime",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sr1: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sr8: {
            type: "structure",
            members: {
                CustomerManagedKeyEnabled: {
                    type: "boolean"
                },
                KmsKeyArn: {}
            }
        },
        Sra: {
            type: "structure",
            members: {
                VerifiedAccessInstanceId: {
                    locationName: "verifiedAccessInstanceId"
                },
                VerifiedAccessGroupId: {
                    locationName: "verifiedAccessGroupId"
                },
                VerifiedAccessEndpointId: {
                    locationName: "verifiedAccessEndpointId"
                },
                ApplicationDomain: {
                    locationName: "applicationDomain"
                },
                EndpointType: {
                    locationName: "endpointType"
                },
                AttachmentType: {
                    locationName: "attachmentType"
                },
                DomainCertificateArn: {
                    locationName: "domainCertificateArn"
                },
                EndpointDomain: {
                    locationName: "endpointDomain"
                },
                DeviceValidationDomain: {
                    locationName: "deviceValidationDomain"
                },
                SecurityGroupIds: {
                    shape: "Sr1",
                    locationName: "securityGroupIdSet"
                },
                LoadBalancerOptions: {
                    locationName: "loadBalancerOptions",
                    type: "structure",
                    members: {
                        Protocol: {
                            locationName: "protocol"
                        },
                        Port: {
                            locationName: "port",
                            type: "integer"
                        },
                        LoadBalancerArn: {
                            locationName: "loadBalancerArn"
                        },
                        SubnetIds: {
                            locationName: "subnetIdSet",
                            type: "list",
                            member: {
                                locationName: "item"
                            }
                        }
                    }
                },
                NetworkInterfaceOptions: {
                    locationName: "networkInterfaceOptions",
                    type: "structure",
                    members: {
                        NetworkInterfaceId: {
                            locationName: "networkInterfaceId"
                        },
                        Protocol: {
                            locationName: "protocol"
                        },
                        Port: {
                            locationName: "port",
                            type: "integer"
                        }
                    }
                },
                Status: {
                    locationName: "status",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                Description: {
                    locationName: "description"
                },
                CreationTime: {
                    locationName: "creationTime"
                },
                LastUpdatedTime: {
                    locationName: "lastUpdatedTime"
                },
                DeletionTime: {
                    locationName: "deletionTime"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                SseSpecification: {
                    shape: "S6e",
                    locationName: "sseSpecification"
                }
            }
        },
        Sri: {
            type: "structure",
            members: {
                VerifiedAccessGroupId: {
                    locationName: "verifiedAccessGroupId"
                },
                VerifiedAccessInstanceId: {
                    locationName: "verifiedAccessInstanceId"
                },
                Description: {
                    locationName: "description"
                },
                Owner: {
                    locationName: "owner"
                },
                VerifiedAccessGroupArn: {
                    locationName: "verifiedAccessGroupArn"
                },
                CreationTime: {
                    locationName: "creationTime"
                },
                LastUpdatedTime: {
                    locationName: "lastUpdatedTime"
                },
                DeletionTime: {
                    locationName: "deletionTime"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                SseSpecification: {
                    shape: "S6e",
                    locationName: "sseSpecification"
                }
            }
        },
        Srq: {
            type: "structure",
            members: {
                Attachments: {
                    locationName: "attachmentSet",
                    type: "list",
                    member: {
                        shape: "S6l",
                        locationName: "item"
                    }
                },
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                CreateTime: {
                    locationName: "createTime",
                    type: "timestamp"
                },
                Encrypted: {
                    locationName: "encrypted",
                    type: "boolean"
                },
                KmsKeyId: {
                    locationName: "kmsKeyId"
                },
                OutpostArn: {
                    locationName: "outpostArn"
                },
                Size: {
                    locationName: "size",
                    type: "integer"
                },
                SnapshotId: {
                    locationName: "snapshotId"
                },
                State: {
                    locationName: "status"
                },
                VolumeId: {
                    locationName: "volumeId"
                },
                Iops: {
                    locationName: "iops",
                    type: "integer"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                VolumeType: {
                    locationName: "volumeType"
                },
                FastRestored: {
                    locationName: "fastRestored",
                    type: "boolean"
                },
                MultiAttachEnabled: {
                    locationName: "multiAttachEnabled",
                    type: "boolean"
                },
                Throughput: {
                    locationName: "throughput",
                    type: "integer"
                },
                SseType: {
                    locationName: "sseType"
                }
            }
        },
        Srx: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sry: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Srz: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Ss1: {
            type: "structure",
            members: {
                DnsRecordIpType: {},
                PrivateDnsOnlyForInboundResolverEndpoint: {
                    type: "boolean"
                }
            }
        },
        Ss3: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    SubnetId: {},
                    Ipv4: {},
                    Ipv6: {}
                }
            }
        },
        Ss6: {
            type: "structure",
            members: {
                VpcEndpointId: {
                    locationName: "vpcEndpointId"
                },
                VpcEndpointType: {
                    locationName: "vpcEndpointType"
                },
                VpcId: {
                    locationName: "vpcId"
                },
                ServiceName: {
                    locationName: "serviceName"
                },
                State: {
                    locationName: "state"
                },
                PolicyDocument: {
                    locationName: "policyDocument"
                },
                RouteTableIds: {
                    shape: "So",
                    locationName: "routeTableIdSet"
                },
                SubnetIds: {
                    shape: "So",
                    locationName: "subnetIdSet"
                },
                Groups: {
                    locationName: "groupSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            GroupId: {
                                locationName: "groupId"
                            },
                            GroupName: {
                                locationName: "groupName"
                            }
                        }
                    }
                },
                IpAddressType: {
                    locationName: "ipAddressType"
                },
                DnsOptions: {
                    locationName: "dnsOptions",
                    type: "structure",
                    members: {
                        DnsRecordIpType: {
                            locationName: "dnsRecordIpType"
                        },
                        PrivateDnsOnlyForInboundResolverEndpoint: {
                            locationName: "privateDnsOnlyForInboundResolverEndpoint",
                            type: "boolean"
                        }
                    }
                },
                PrivateDnsEnabled: {
                    locationName: "privateDnsEnabled",
                    type: "boolean"
                },
                RequesterManaged: {
                    locationName: "requesterManaged",
                    type: "boolean"
                },
                NetworkInterfaceIds: {
                    shape: "So",
                    locationName: "networkInterfaceIdSet"
                },
                DnsEntries: {
                    shape: "Ssb",
                    locationName: "dnsEntrySet"
                },
                CreationTimestamp: {
                    locationName: "creationTimestamp",
                    type: "timestamp"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                LastError: {
                    locationName: "lastError",
                    type: "structure",
                    members: {
                        Message: {
                            locationName: "message"
                        },
                        Code: {
                            locationName: "code"
                        }
                    }
                }
            }
        },
        Ssb: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    DnsName: {
                        locationName: "dnsName"
                    },
                    HostedZoneId: {
                        locationName: "hostedZoneId"
                    }
                }
            }
        },
        Ssg: {
            type: "structure",
            members: {
                ConnectionNotificationId: {
                    locationName: "connectionNotificationId"
                },
                ServiceId: {
                    locationName: "serviceId"
                },
                VpcEndpointId: {
                    locationName: "vpcEndpointId"
                },
                ConnectionNotificationType: {
                    locationName: "connectionNotificationType"
                },
                ConnectionNotificationArn: {
                    locationName: "connectionNotificationArn"
                },
                ConnectionEvents: {
                    shape: "So",
                    locationName: "connectionEvents"
                },
                ConnectionNotificationState: {
                    locationName: "connectionNotificationState"
                }
            }
        },
        Ssl: {
            type: "structure",
            members: {
                ServiceType: {
                    shape: "Ssm",
                    locationName: "serviceType"
                },
                ServiceId: {
                    locationName: "serviceId"
                },
                ServiceName: {
                    locationName: "serviceName"
                },
                ServiceState: {
                    locationName: "serviceState"
                },
                AvailabilityZones: {
                    shape: "So",
                    locationName: "availabilityZoneSet"
                },
                AcceptanceRequired: {
                    locationName: "acceptanceRequired",
                    type: "boolean"
                },
                ManagesVpcEndpoints: {
                    locationName: "managesVpcEndpoints",
                    type: "boolean"
                },
                NetworkLoadBalancerArns: {
                    shape: "So",
                    locationName: "networkLoadBalancerArnSet"
                },
                GatewayLoadBalancerArns: {
                    shape: "So",
                    locationName: "gatewayLoadBalancerArnSet"
                },
                SupportedIpAddressTypes: {
                    shape: "Ssq",
                    locationName: "supportedIpAddressTypeSet"
                },
                BaseEndpointDnsNames: {
                    shape: "So",
                    locationName: "baseEndpointDnsNameSet"
                },
                PrivateDnsName: {
                    locationName: "privateDnsName"
                },
                PrivateDnsNameConfiguration: {
                    locationName: "privateDnsNameConfiguration",
                    type: "structure",
                    members: {
                        State: {
                            locationName: "state"
                        },
                        Type: {
                            locationName: "type"
                        },
                        Value: {
                            locationName: "value"
                        },
                        Name: {
                            locationName: "name"
                        }
                    }
                },
                PayerResponsibility: {
                    locationName: "payerResponsibility"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Ssm: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    ServiceType: {
                        locationName: "serviceType"
                    }
                }
            }
        },
        Ssq: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        St3: {
            type: "string",
            sensitive: true
        },
        St4: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        St6: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        St8: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        Sta: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        Stc: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {
                        type: "integer"
                    }
                }
            }
        },
        Ste: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {
                        type: "integer"
                    }
                }
            }
        },
        Stg: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        Sti: {
            type: "structure",
            members: {
                CloudWatchLogOptions: {
                    type: "structure",
                    members: {
                        LogEnabled: {
                            type: "boolean"
                        },
                        LogGroupArn: {},
                        LogOutputFormat: {}
                    }
                }
            }
        },
        Stm: {
            type: "structure",
            members: {
                CustomerGatewayConfiguration: {
                    locationName: "customerGatewayConfiguration",
                    type: "string",
                    sensitive: true
                },
                CustomerGatewayId: {
                    locationName: "customerGatewayId"
                },
                Category: {
                    locationName: "category"
                },
                State: {
                    locationName: "state"
                },
                Type: {
                    locationName: "type"
                },
                VpnConnectionId: {
                    locationName: "vpnConnectionId"
                },
                VpnGatewayId: {
                    locationName: "vpnGatewayId"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                CoreNetworkArn: {
                    locationName: "coreNetworkArn"
                },
                CoreNetworkAttachmentArn: {
                    locationName: "coreNetworkAttachmentArn"
                },
                GatewayAssociationState: {
                    locationName: "gatewayAssociationState"
                },
                Options: {
                    locationName: "options",
                    type: "structure",
                    members: {
                        EnableAcceleration: {
                            locationName: "enableAcceleration",
                            type: "boolean"
                        },
                        StaticRoutesOnly: {
                            locationName: "staticRoutesOnly",
                            type: "boolean"
                        },
                        LocalIpv4NetworkCidr: {
                            locationName: "localIpv4NetworkCidr"
                        },
                        RemoteIpv4NetworkCidr: {
                            locationName: "remoteIpv4NetworkCidr"
                        },
                        LocalIpv6NetworkCidr: {
                            locationName: "localIpv6NetworkCidr"
                        },
                        RemoteIpv6NetworkCidr: {
                            locationName: "remoteIpv6NetworkCidr"
                        },
                        OutsideIpAddressType: {
                            locationName: "outsideIpAddressType"
                        },
                        TransportTransitGatewayAttachmentId: {
                            locationName: "transportTransitGatewayAttachmentId"
                        },
                        TunnelInsideIpVersion: {
                            locationName: "tunnelInsideIpVersion"
                        },
                        TunnelOptions: {
                            locationName: "tunnelOptionSet",
                            type: "list",
                            member: {
                                locationName: "item",
                                type: "structure",
                                members: {
                                    OutsideIpAddress: {
                                        locationName: "outsideIpAddress"
                                    },
                                    TunnelInsideCidr: {
                                        locationName: "tunnelInsideCidr"
                                    },
                                    TunnelInsideIpv6Cidr: {
                                        locationName: "tunnelInsideIpv6Cidr"
                                    },
                                    PreSharedKey: {
                                        shape: "St3",
                                        locationName: "preSharedKey"
                                    },
                                    Phase1LifetimeSeconds: {
                                        locationName: "phase1LifetimeSeconds",
                                        type: "integer"
                                    },
                                    Phase2LifetimeSeconds: {
                                        locationName: "phase2LifetimeSeconds",
                                        type: "integer"
                                    },
                                    RekeyMarginTimeSeconds: {
                                        locationName: "rekeyMarginTimeSeconds",
                                        type: "integer"
                                    },
                                    RekeyFuzzPercentage: {
                                        locationName: "rekeyFuzzPercentage",
                                        type: "integer"
                                    },
                                    ReplayWindowSize: {
                                        locationName: "replayWindowSize",
                                        type: "integer"
                                    },
                                    DpdTimeoutSeconds: {
                                        locationName: "dpdTimeoutSeconds",
                                        type: "integer"
                                    },
                                    DpdTimeoutAction: {
                                        locationName: "dpdTimeoutAction"
                                    },
                                    Phase1EncryptionAlgorithms: {
                                        locationName: "phase1EncryptionAlgorithmSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    Phase2EncryptionAlgorithms: {
                                        locationName: "phase2EncryptionAlgorithmSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    Phase1IntegrityAlgorithms: {
                                        locationName: "phase1IntegrityAlgorithmSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    Phase2IntegrityAlgorithms: {
                                        locationName: "phase2IntegrityAlgorithmSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    Phase1DHGroupNumbers: {
                                        locationName: "phase1DHGroupNumberSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value",
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    },
                                    Phase2DHGroupNumbers: {
                                        locationName: "phase2DHGroupNumberSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value",
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    },
                                    IkeVersions: {
                                        locationName: "ikeVersionSet",
                                        type: "list",
                                        member: {
                                            locationName: "item",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value"
                                                }
                                            }
                                        }
                                    },
                                    StartupAction: {
                                        locationName: "startupAction"
                                    },
                                    LogOptions: {
                                        locationName: "logOptions",
                                        type: "structure",
                                        members: {
                                            CloudWatchLogOptions: {
                                                locationName: "cloudWatchLogOptions",
                                                type: "structure",
                                                members: {
                                                    LogEnabled: {
                                                        locationName: "logEnabled",
                                                        type: "boolean"
                                                    },
                                                    LogGroupArn: {
                                                        locationName: "logGroupArn"
                                                    },
                                                    LogOutputFormat: {
                                                        locationName: "logOutputFormat"
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    EnableTunnelLifecycleControl: {
                                        locationName: "enableTunnelLifecycleControl",
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                Routes: {
                    locationName: "routes",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            DestinationCidrBlock: {
                                locationName: "destinationCidrBlock"
                            },
                            Source: {
                                locationName: "source"
                            },
                            State: {
                                locationName: "state"
                            }
                        }
                    }
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                },
                VgwTelemetry: {
                    locationName: "vgwTelemetry",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            AcceptedRouteCount: {
                                locationName: "acceptedRouteCount",
                                type: "integer"
                            },
                            LastStatusChange: {
                                locationName: "lastStatusChange",
                                type: "timestamp"
                            },
                            OutsideIpAddress: {
                                locationName: "outsideIpAddress"
                            },
                            Status: {
                                locationName: "status"
                            },
                            StatusMessage: {
                                locationName: "statusMessage"
                            },
                            CertificateArn: {
                                locationName: "certificateArn"
                            }
                        }
                    }
                }
            }
        },
        Suj: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                State: {
                    locationName: "state"
                },
                Type: {
                    locationName: "type"
                },
                VpcAttachments: {
                    locationName: "attachments",
                    type: "list",
                    member: {
                        shape: "S6q",
                        locationName: "item"
                    }
                },
                VpnGatewayId: {
                    locationName: "vpnGatewayId"
                },
                AmazonSideAsn: {
                    locationName: "amazonSideAsn",
                    type: "long"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        Sv1: {
            type: "list",
            member: {}
        },
        Svb: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Sw1: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Syy: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Szb: {
            type: "structure",
            members: {
                Asn: {
                    locationName: "asn"
                },
                IpamId: {
                    locationName: "ipamId"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                State: {
                    locationName: "state"
                }
            }
        },
        Szf: {
            type: "structure",
            members: {
                Cidr: {
                    locationName: "cidr"
                },
                State: {
                    locationName: "state"
                },
                FailureReason: {
                    locationName: "failureReason",
                    type: "structure",
                    members: {
                        Code: {
                            locationName: "code"
                        },
                        Message: {
                            locationName: "message"
                        }
                    }
                },
                IpamPoolCidrId: {
                    locationName: "ipamPoolCidrId"
                },
                NetmaskLength: {
                    locationName: "netmaskLength",
                    type: "integer"
                }
            }
        },
        Szq: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        Szs: {
            type: "structure",
            members: {
                InstanceTagKeys: {
                    shape: "Szq",
                    locationName: "instanceTagKeySet"
                },
                IncludeAllTagsOfInstance: {
                    locationName: "includeAllTagsOfInstance",
                    type: "boolean"
                }
            }
        },
        Szu: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S10d: {
            type: "list",
            member: {
                locationName: "Filter",
                type: "structure",
                members: {
                    Name: {},
                    Values: {
                        shape: "So",
                        locationName: "Value"
                    }
                }
            }
        },
        S10q: {
            type: "structure",
            members: {
                PublicIp: {
                    locationName: "publicIp"
                },
                AllocationId: {
                    locationName: "allocationId"
                },
                PtrRecord: {
                    locationName: "ptrRecord"
                },
                PtrRecordUpdate: {
                    locationName: "ptrRecordUpdate",
                    type: "structure",
                    members: {
                        Value: {
                            locationName: "value"
                        },
                        Status: {
                            locationName: "status"
                        },
                        Reason: {
                            locationName: "reason"
                        }
                    }
                }
            }
        },
        S10u: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Deadline: {
                        locationName: "deadline",
                        type: "timestamp"
                    },
                    Resource: {
                        locationName: "resource"
                    },
                    UseLongIds: {
                        locationName: "useLongIds",
                        type: "boolean"
                    }
                }
            }
        },
        S128: {
            type: "list",
            member: {
                locationName: "InstanceId"
            }
        },
        S12n: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        S13s: {
            type: "structure",
            members: {
                ConversionTaskId: {
                    locationName: "conversionTaskId"
                },
                ExpirationTime: {
                    locationName: "expirationTime"
                },
                ImportInstance: {
                    locationName: "importInstance",
                    type: "structure",
                    members: {
                        Description: {
                            locationName: "description"
                        },
                        InstanceId: {
                            locationName: "instanceId"
                        },
                        Platform: {
                            locationName: "platform"
                        },
                        Volumes: {
                            locationName: "volumes",
                            type: "list",
                            member: {
                                locationName: "item",
                                type: "structure",
                                members: {
                                    AvailabilityZone: {
                                        locationName: "availabilityZone"
                                    },
                                    BytesConverted: {
                                        locationName: "bytesConverted",
                                        type: "long"
                                    },
                                    Description: {
                                        locationName: "description"
                                    },
                                    Image: {
                                        shape: "S13w",
                                        locationName: "image"
                                    },
                                    Status: {
                                        locationName: "status"
                                    },
                                    StatusMessage: {
                                        locationName: "statusMessage"
                                    },
                                    Volume: {
                                        shape: "S13y",
                                        locationName: "volume"
                                    }
                                }
                            }
                        }
                    }
                },
                ImportVolume: {
                    locationName: "importVolume",
                    type: "structure",
                    members: {
                        AvailabilityZone: {
                            locationName: "availabilityZone"
                        },
                        BytesConverted: {
                            locationName: "bytesConverted",
                            type: "long"
                        },
                        Description: {
                            locationName: "description"
                        },
                        Image: {
                            shape: "S13w",
                            locationName: "image"
                        },
                        Volume: {
                            shape: "S13y",
                            locationName: "volume"
                        }
                    }
                },
                State: {
                    locationName: "state"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S13w: {
            type: "structure",
            members: {
                Checksum: {
                    locationName: "checksum"
                },
                Format: {
                    locationName: "format"
                },
                ImportManifestUrl: {
                    shape: "S13x",
                    locationName: "importManifestUrl"
                },
                Size: {
                    locationName: "size",
                    type: "long"
                }
            }
        },
        S13x: {
            type: "string",
            sensitive: true
        },
        S13y: {
            type: "structure",
            members: {
                Id: {
                    locationName: "id"
                },
                Size: {
                    locationName: "size",
                    type: "long"
                }
            }
        },
        S14w: {
            type: "structure",
            members: {
                S3Bucket: {
                    locationName: "s3Bucket"
                },
                S3Prefix: {
                    locationName: "s3Prefix"
                }
            }
        },
        S159: {
            type: "structure",
            members: {
                TargetResourceCount: {
                    locationName: "targetResourceCount",
                    type: "integer"
                }
            }
        },
        S15a: {
            type: "structure",
            members: {
                LaunchTemplateId: {
                    locationName: "launchTemplateId"
                },
                LaunchTemplateName: {
                    locationName: "launchTemplateName"
                },
                Version: {
                    locationName: "version"
                }
            }
        },
        S15n: {
            type: "structure",
            members: {
                EventDescription: {
                    locationName: "eventDescription"
                },
                EventSubType: {
                    locationName: "eventSubType"
                },
                InstanceId: {
                    locationName: "instanceId"
                }
            }
        },
        S15q: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    InstanceType: {
                        locationName: "instanceType"
                    },
                    SpotInstanceRequestId: {
                        locationName: "spotInstanceRequestId"
                    },
                    InstanceHealth: {
                        locationName: "instanceHealth"
                    }
                }
            }
        },
        S16j: {
            type: "structure",
            members: {
                FpgaImageId: {
                    locationName: "fpgaImageId"
                },
                Name: {
                    locationName: "name"
                },
                Description: {
                    locationName: "description"
                },
                LoadPermissions: {
                    locationName: "loadPermissions",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            UserId: {
                                locationName: "userId"
                            },
                            Group: {
                                locationName: "group"
                            }
                        }
                    }
                },
                ProductCodes: {
                    shape: "S16n",
                    locationName: "productCodes"
                }
            }
        },
        S16n: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    ProductCodeId: {
                        locationName: "productCode"
                    },
                    ProductCodeType: {
                        locationName: "type"
                    }
                }
            }
        },
        S16s: {
            type: "list",
            member: {
                locationName: "Owner"
            }
        },
        S17d: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S17g: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S185: {
            type: "list",
            member: {
                shape: "Ses",
                locationName: "item"
            }
        },
        S186: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Group: {
                        locationName: "group"
                    },
                    UserId: {
                        locationName: "userId"
                    },
                    OrganizationArn: {
                        locationName: "organizationArn"
                    },
                    OrganizationalUnitArn: {
                        locationName: "organizationalUnitArn"
                    }
                }
            }
        },
        S18a: {
            type: "list",
            member: {
                locationName: "ImageId"
            }
        },
        S18t: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    DeviceName: {
                        locationName: "deviceName"
                    },
                    DiskImageSize: {
                        locationName: "diskImageSize",
                        type: "double"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Progress: {
                        locationName: "progress"
                    },
                    SnapshotId: {
                        locationName: "snapshotId"
                    },
                    Status: {
                        locationName: "status"
                    },
                    StatusMessage: {
                        locationName: "statusMessage"
                    },
                    Url: {
                        shape: "S18v",
                        locationName: "url"
                    },
                    UserBucket: {
                        shape: "S18w",
                        locationName: "userBucket"
                    }
                }
            }
        },
        S18v: {
            type: "string",
            sensitive: true
        },
        S18w: {
            type: "structure",
            members: {
                S3Bucket: {
                    locationName: "s3Bucket"
                },
                S3Key: {
                    locationName: "s3Key"
                }
            }
        },
        S18x: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    LicenseConfigurationArn: {
                        locationName: "licenseConfigurationArn"
                    }
                }
            }
        },
        S195: {
            type: "structure",
            members: {
                Description: {
                    locationName: "description"
                },
                DiskImageSize: {
                    locationName: "diskImageSize",
                    type: "double"
                },
                Encrypted: {
                    locationName: "encrypted",
                    type: "boolean"
                },
                Format: {
                    locationName: "format"
                },
                KmsKeyId: {
                    locationName: "kmsKeyId"
                },
                Progress: {
                    locationName: "progress"
                },
                SnapshotId: {
                    locationName: "snapshotId"
                },
                Status: {
                    locationName: "status"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                Url: {
                    shape: "S18v",
                    locationName: "url"
                },
                UserBucket: {
                    shape: "S18w",
                    locationName: "userBucket"
                }
            }
        },
        S199: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    DeviceName: {
                        locationName: "deviceName"
                    },
                    Ebs: {
                        locationName: "ebs",
                        type: "structure",
                        members: {
                            AttachTime: {
                                locationName: "attachTime",
                                type: "timestamp"
                            },
                            DeleteOnTermination: {
                                locationName: "deleteOnTermination",
                                type: "boolean"
                            },
                            Status: {
                                locationName: "status"
                            },
                            VolumeId: {
                                locationName: "volumeId"
                            }
                        }
                    }
                }
            }
        },
        S19c: {
            type: "structure",
            members: {
                Value: {
                    locationName: "value",
                    type: "boolean"
                }
            }
        },
        S19d: {
            type: "structure",
            members: {
                Enabled: {
                    locationName: "enabled",
                    type: "boolean"
                }
            }
        },
        S19z: {
            type: "structure",
            members: {
                InstanceEventId: {
                    locationName: "instanceEventId"
                },
                Code: {
                    locationName: "code"
                },
                Description: {
                    locationName: "description"
                },
                NotAfter: {
                    locationName: "notAfter",
                    type: "timestamp"
                },
                NotBefore: {
                    locationName: "notBefore",
                    type: "timestamp"
                },
                NotBeforeDeadline: {
                    locationName: "notBeforeDeadline",
                    type: "timestamp"
                }
            }
        },
        S1a2: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code",
                    type: "integer"
                },
                Name: {
                    locationName: "name"
                }
            }
        },
        S1a4: {
            type: "structure",
            members: {
                Details: {
                    locationName: "details",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            ImpairedSince: {
                                locationName: "impairedSince",
                                type: "timestamp"
                            },
                            Name: {
                                locationName: "name"
                            },
                            Status: {
                                locationName: "status"
                            }
                        }
                    }
                },
                Status: {
                    locationName: "status"
                }
            }
        },
        S1du: {
            type: "structure",
            members: {
                Groups: {
                    shape: "Sly",
                    locationName: "groupSet"
                },
                Instances: {
                    locationName: "instancesSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            AmiLaunchIndex: {
                                locationName: "amiLaunchIndex",
                                type: "integer"
                            },
                            ImageId: {
                                locationName: "imageId"
                            },
                            InstanceId: {
                                locationName: "instanceId"
                            },
                            InstanceType: {
                                locationName: "instanceType"
                            },
                            KernelId: {
                                locationName: "kernelId"
                            },
                            KeyName: {
                                locationName: "keyName"
                            },
                            LaunchTime: {
                                locationName: "launchTime",
                                type: "timestamp"
                            },
                            Monitoring: {
                                shape: "S1dx",
                                locationName: "monitoring"
                            },
                            Placement: {
                                shape: "Scr",
                                locationName: "placement"
                            },
                            Platform: {
                                locationName: "platform"
                            },
                            PrivateDnsName: {
                                locationName: "privateDnsName"
                            },
                            PrivateIpAddress: {
                                locationName: "privateIpAddress"
                            },
                            ProductCodes: {
                                shape: "S16n",
                                locationName: "productCodes"
                            },
                            PublicDnsName: {
                                locationName: "dnsName"
                            },
                            PublicIpAddress: {
                                locationName: "ipAddress"
                            },
                            RamdiskId: {
                                locationName: "ramdiskId"
                            },
                            State: {
                                shape: "S1a2",
                                locationName: "instanceState"
                            },
                            StateTransitionReason: {
                                locationName: "reason"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            VpcId: {
                                locationName: "vpcId"
                            },
                            Architecture: {
                                locationName: "architecture"
                            },
                            BlockDeviceMappings: {
                                shape: "S199",
                                locationName: "blockDeviceMapping"
                            },
                            ClientToken: {
                                locationName: "clientToken"
                            },
                            EbsOptimized: {
                                locationName: "ebsOptimized",
                                type: "boolean"
                            },
                            EnaSupport: {
                                locationName: "enaSupport",
                                type: "boolean"
                            },
                            Hypervisor: {
                                locationName: "hypervisor"
                            },
                            IamInstanceProfile: {
                                shape: "S3y",
                                locationName: "iamInstanceProfile"
                            },
                            InstanceLifecycle: {
                                locationName: "instanceLifecycle"
                            },
                            ElasticGpuAssociations: {
                                locationName: "elasticGpuAssociationSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        ElasticGpuId: {
                                            locationName: "elasticGpuId"
                                        },
                                        ElasticGpuAssociationId: {
                                            locationName: "elasticGpuAssociationId"
                                        },
                                        ElasticGpuAssociationState: {
                                            locationName: "elasticGpuAssociationState"
                                        },
                                        ElasticGpuAssociationTime: {
                                            locationName: "elasticGpuAssociationTime"
                                        }
                                    }
                                }
                            },
                            ElasticInferenceAcceleratorAssociations: {
                                locationName: "elasticInferenceAcceleratorAssociationSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        ElasticInferenceAcceleratorArn: {
                                            locationName: "elasticInferenceAcceleratorArn"
                                        },
                                        ElasticInferenceAcceleratorAssociationId: {
                                            locationName: "elasticInferenceAcceleratorAssociationId"
                                        },
                                        ElasticInferenceAcceleratorAssociationState: {
                                            locationName: "elasticInferenceAcceleratorAssociationState"
                                        },
                                        ElasticInferenceAcceleratorAssociationTime: {
                                            locationName: "elasticInferenceAcceleratorAssociationTime",
                                            type: "timestamp"
                                        }
                                    }
                                }
                            },
                            NetworkInterfaces: {
                                locationName: "networkInterfaceSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        Association: {
                                            shape: "S1e6",
                                            locationName: "association"
                                        },
                                        Attachment: {
                                            locationName: "attachment",
                                            type: "structure",
                                            members: {
                                                AttachTime: {
                                                    locationName: "attachTime",
                                                    type: "timestamp"
                                                },
                                                AttachmentId: {
                                                    locationName: "attachmentId"
                                                },
                                                DeleteOnTermination: {
                                                    locationName: "deleteOnTermination",
                                                    type: "boolean"
                                                },
                                                DeviceIndex: {
                                                    locationName: "deviceIndex",
                                                    type: "integer"
                                                },
                                                Status: {
                                                    locationName: "status"
                                                },
                                                NetworkCardIndex: {
                                                    locationName: "networkCardIndex",
                                                    type: "integer"
                                                },
                                                EnaSrdSpecification: {
                                                    locationName: "enaSrdSpecification",
                                                    type: "structure",
                                                    members: {
                                                        EnaSrdEnabled: {
                                                            locationName: "enaSrdEnabled",
                                                            type: "boolean"
                                                        },
                                                        EnaSrdUdpSpecification: {
                                                            locationName: "enaSrdUdpSpecification",
                                                            type: "structure",
                                                            members: {
                                                                EnaSrdUdpEnabled: {
                                                                    locationName: "enaSrdUdpEnabled",
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Description: {
                                            locationName: "description"
                                        },
                                        Groups: {
                                            shape: "Sly",
                                            locationName: "groupSet"
                                        },
                                        Ipv6Addresses: {
                                            shape: "Siq",
                                            locationName: "ipv6AddressesSet"
                                        },
                                        MacAddress: {
                                            locationName: "macAddress"
                                        },
                                        NetworkInterfaceId: {
                                            locationName: "networkInterfaceId"
                                        },
                                        OwnerId: {
                                            locationName: "ownerId"
                                        },
                                        PrivateDnsName: {
                                            locationName: "privateDnsName"
                                        },
                                        PrivateIpAddress: {
                                            locationName: "privateIpAddress"
                                        },
                                        PrivateIpAddresses: {
                                            locationName: "privateIpAddressesSet",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Association: {
                                                        shape: "S1e6",
                                                        locationName: "association"
                                                    },
                                                    Primary: {
                                                        locationName: "primary",
                                                        type: "boolean"
                                                    },
                                                    PrivateDnsName: {
                                                        locationName: "privateDnsName"
                                                    },
                                                    PrivateIpAddress: {
                                                        locationName: "privateIpAddress"
                                                    }
                                                }
                                            }
                                        },
                                        SourceDestCheck: {
                                            locationName: "sourceDestCheck",
                                            type: "boolean"
                                        },
                                        Status: {
                                            locationName: "status"
                                        },
                                        SubnetId: {
                                            locationName: "subnetId"
                                        },
                                        VpcId: {
                                            locationName: "vpcId"
                                        },
                                        InterfaceType: {
                                            locationName: "interfaceType"
                                        },
                                        Ipv4Prefixes: {
                                            locationName: "ipv4PrefixSet",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Ipv4Prefix: {
                                                        locationName: "ipv4Prefix"
                                                    }
                                                }
                                            }
                                        },
                                        Ipv6Prefixes: {
                                            locationName: "ipv6PrefixSet",
                                            type: "list",
                                            member: {
                                                locationName: "item",
                                                type: "structure",
                                                members: {
                                                    Ipv6Prefix: {
                                                        locationName: "ipv6Prefix"
                                                    }
                                                }
                                            }
                                        },
                                        ConnectionTrackingConfiguration: {
                                            locationName: "connectionTrackingConfiguration",
                                            type: "structure",
                                            members: {
                                                TcpEstablishedTimeout: {
                                                    locationName: "tcpEstablishedTimeout",
                                                    type: "integer"
                                                },
                                                UdpStreamTimeout: {
                                                    locationName: "udpStreamTimeout",
                                                    type: "integer"
                                                },
                                                UdpTimeout: {
                                                    locationName: "udpTimeout",
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            OutpostArn: {
                                locationName: "outpostArn"
                            },
                            RootDeviceName: {
                                locationName: "rootDeviceName"
                            },
                            RootDeviceType: {
                                locationName: "rootDeviceType"
                            },
                            SecurityGroups: {
                                shape: "Sly",
                                locationName: "groupSet"
                            },
                            SourceDestCheck: {
                                locationName: "sourceDestCheck",
                                type: "boolean"
                            },
                            SpotInstanceRequestId: {
                                locationName: "spotInstanceRequestId"
                            },
                            SriovNetSupport: {
                                locationName: "sriovNetSupport"
                            },
                            StateReason: {
                                shape: "Sjw",
                                locationName: "stateReason"
                            },
                            Tags: {
                                shape: "S6",
                                locationName: "tagSet"
                            },
                            VirtualizationType: {
                                locationName: "virtualizationType"
                            },
                            CpuOptions: {
                                locationName: "cpuOptions",
                                type: "structure",
                                members: {
                                    CoreCount: {
                                        locationName: "coreCount",
                                        type: "integer"
                                    },
                                    ThreadsPerCore: {
                                        locationName: "threadsPerCore",
                                        type: "integer"
                                    },
                                    AmdSevSnp: {
                                        locationName: "amdSevSnp"
                                    }
                                }
                            },
                            CapacityReservationId: {
                                locationName: "capacityReservationId"
                            },
                            CapacityReservationSpecification: {
                                locationName: "capacityReservationSpecification",
                                type: "structure",
                                members: {
                                    CapacityReservationPreference: {
                                        locationName: "capacityReservationPreference"
                                    },
                                    CapacityReservationTarget: {
                                        shape: "Sjc",
                                        locationName: "capacityReservationTarget"
                                    }
                                }
                            },
                            HibernationOptions: {
                                locationName: "hibernationOptions",
                                type: "structure",
                                members: {
                                    Configured: {
                                        locationName: "configured",
                                        type: "boolean"
                                    }
                                }
                            },
                            Licenses: {
                                locationName: "licenseSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        LicenseConfigurationArn: {
                                            locationName: "licenseConfigurationArn"
                                        }
                                    }
                                }
                            },
                            MetadataOptions: {
                                shape: "S1em",
                                locationName: "metadataOptions"
                            },
                            EnclaveOptions: {
                                shape: "S19d",
                                locationName: "enclaveOptions"
                            },
                            BootMode: {
                                locationName: "bootMode"
                            },
                            PlatformDetails: {
                                locationName: "platformDetails"
                            },
                            UsageOperation: {
                                locationName: "usageOperation"
                            },
                            UsageOperationUpdateTime: {
                                locationName: "usageOperationUpdateTime",
                                type: "timestamp"
                            },
                            PrivateDnsNameOptions: {
                                locationName: "privateDnsNameOptions",
                                type: "structure",
                                members: {
                                    HostnameType: {
                                        locationName: "hostnameType"
                                    },
                                    EnableResourceNameDnsARecord: {
                                        locationName: "enableResourceNameDnsARecord",
                                        type: "boolean"
                                    },
                                    EnableResourceNameDnsAAAARecord: {
                                        locationName: "enableResourceNameDnsAAAARecord",
                                        type: "boolean"
                                    }
                                }
                            },
                            Ipv6Address: {
                                locationName: "ipv6Address"
                            },
                            TpmSupport: {
                                locationName: "tpmSupport"
                            },
                            MaintenanceOptions: {
                                locationName: "maintenanceOptions",
                                type: "structure",
                                members: {
                                    AutoRecovery: {
                                        locationName: "autoRecovery"
                                    }
                                }
                            },
                            CurrentInstanceBootMode: {
                                locationName: "currentInstanceBootMode"
                            }
                        }
                    }
                },
                OwnerId: {
                    locationName: "ownerId"
                },
                RequesterId: {
                    locationName: "requesterId"
                },
                ReservationId: {
                    locationName: "reservationId"
                }
            }
        },
        S1dx: {
            type: "structure",
            members: {
                State: {
                    locationName: "state"
                }
            }
        },
        S1e6: {
            type: "structure",
            members: {
                CarrierIp: {
                    locationName: "carrierIp"
                },
                CustomerOwnedIp: {
                    locationName: "customerOwnedIp"
                },
                IpOwnerId: {
                    locationName: "ipOwnerId"
                },
                PublicDnsName: {
                    locationName: "publicDnsName"
                },
                PublicIp: {
                    locationName: "publicIp"
                }
            }
        },
        S1em: {
            type: "structure",
            members: {
                State: {
                    locationName: "state"
                },
                HttpTokens: {
                    locationName: "httpTokens"
                },
                HttpPutResponseHopLimit: {
                    locationName: "httpPutResponseHopLimit",
                    type: "integer"
                },
                HttpEndpoint: {
                    locationName: "httpEndpoint"
                },
                HttpProtocolIpv6: {
                    locationName: "httpProtocolIpv6"
                },
                InstanceMetadataTags: {
                    locationName: "instanceMetadataTags"
                }
            }
        },
        S1gq: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1h3: {
            type: "list",
            member: {
                locationName: "SnapshotId"
            }
        },
        S1hz: {
            type: "structure",
            members: {
                NetworkInsightsAccessScopeAnalysisId: {
                    locationName: "networkInsightsAccessScopeAnalysisId"
                },
                NetworkInsightsAccessScopeAnalysisArn: {
                    locationName: "networkInsightsAccessScopeAnalysisArn"
                },
                NetworkInsightsAccessScopeId: {
                    locationName: "networkInsightsAccessScopeId"
                },
                Status: {
                    locationName: "status"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                WarningMessage: {
                    locationName: "warningMessage"
                },
                StartDate: {
                    locationName: "startDate",
                    type: "timestamp"
                },
                EndDate: {
                    locationName: "endDate",
                    type: "timestamp"
                },
                FindingsFound: {
                    locationName: "findingsFound"
                },
                AnalyzedEniCount: {
                    locationName: "analyzedEniCount",
                    type: "integer"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S1ia: {
            type: "structure",
            members: {
                NetworkInsightsAnalysisId: {
                    locationName: "networkInsightsAnalysisId"
                },
                NetworkInsightsAnalysisArn: {
                    locationName: "networkInsightsAnalysisArn"
                },
                NetworkInsightsPathId: {
                    locationName: "networkInsightsPathId"
                },
                AdditionalAccounts: {
                    shape: "So",
                    locationName: "additionalAccountSet"
                },
                FilterInArns: {
                    shape: "S1ib",
                    locationName: "filterInArnSet"
                },
                StartDate: {
                    locationName: "startDate",
                    type: "timestamp"
                },
                Status: {
                    locationName: "status"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                WarningMessage: {
                    locationName: "warningMessage"
                },
                NetworkPathFound: {
                    locationName: "networkPathFound",
                    type: "boolean"
                },
                ForwardPathComponents: {
                    shape: "S1ic",
                    locationName: "forwardPathComponentSet"
                },
                ReturnPathComponents: {
                    shape: "S1ic",
                    locationName: "returnPathComponentSet"
                },
                Explanations: {
                    shape: "S1iw",
                    locationName: "explanationSet"
                },
                AlternatePathHints: {
                    locationName: "alternatePathHintSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            ComponentId: {
                                locationName: "componentId"
                            },
                            ComponentArn: {
                                locationName: "componentArn"
                            }
                        }
                    }
                },
                SuggestedAccounts: {
                    shape: "So",
                    locationName: "suggestedAccountSet"
                },
                Tags: {
                    shape: "S6",
                    locationName: "tagSet"
                }
            }
        },
        S1ib: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1ic: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    SequenceNumber: {
                        locationName: "sequenceNumber",
                        type: "integer"
                    },
                    AclRule: {
                        shape: "S1ie",
                        locationName: "aclRule"
                    },
                    AttachedTo: {
                        shape: "S1if",
                        locationName: "attachedTo"
                    },
                    Component: {
                        shape: "S1if",
                        locationName: "component"
                    },
                    DestinationVpc: {
                        shape: "S1if",
                        locationName: "destinationVpc"
                    },
                    OutboundHeader: {
                        shape: "S1ig",
                        locationName: "outboundHeader"
                    },
                    InboundHeader: {
                        shape: "S1ig",
                        locationName: "inboundHeader"
                    },
                    RouteTableRoute: {
                        shape: "S1ij",
                        locationName: "routeTableRoute"
                    },
                    SecurityGroupRule: {
                        shape: "S1ik",
                        locationName: "securityGroupRule"
                    },
                    SourceVpc: {
                        shape: "S1if",
                        locationName: "sourceVpc"
                    },
                    Subnet: {
                        shape: "S1if",
                        locationName: "subnet"
                    },
                    Vpc: {
                        shape: "S1if",
                        locationName: "vpc"
                    },
                    AdditionalDetails: {
                        locationName: "additionalDetailSet",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                AdditionalDetailType: {
                                    locationName: "additionalDetailType"
                                },
                                Component: {
                                    shape: "S1if",
                                    locationName: "component"
                                },
                                VpcEndpointService: {
                                    shape: "S1if",
                                    locationName: "vpcEndpointService"
                                },
                                RuleOptions: {
                                    shape: "S1in",
                                    locationName: "ruleOptionSet"
                                },
                                RuleGroupTypePairs: {
                                    locationName: "ruleGroupTypePairSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            RuleGroupArn: {
                                                locationName: "ruleGroupArn"
                                            },
                                            RuleGroupType: {
                                                locationName: "ruleGroupType"
                                            }
                                        }
                                    }
                                },
                                RuleGroupRuleOptionsPairs: {
                                    locationName: "ruleGroupRuleOptionsPairSet",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            RuleGroupArn: {
                                                locationName: "ruleGroupArn"
                                            },
                                            RuleOptions: {
                                                shape: "S1in",
                                                locationName: "ruleOptionSet"
                                            }
                                        }
                                    }
                                },
                                ServiceName: {
                                    locationName: "serviceName"
                                },
                                LoadBalancers: {
                                    shape: "S1iu",
                                    locationName: "loadBalancerSet"
                                }
                            }
                        }
                    },
                    TransitGateway: {
                        shape: "S1if",
                        locationName: "transitGateway"
                    },
                    TransitGatewayRouteTableRoute: {
                        shape: "S1iv",
                        locationName: "transitGatewayRouteTableRoute"
                    },
                    Explanations: {
                        shape: "S1iw",
                        locationName: "explanationSet"
                    },
                    ElasticLoadBalancerListener: {
                        shape: "S1if",
                        locationName: "elasticLoadBalancerListener"
                    },
                    FirewallStatelessRule: {
                        shape: "S1j2",
                        locationName: "firewallStatelessRule"
                    },
                    FirewallStatefulRule: {
                        shape: "S1j6",
                        locationName: "firewallStatefulRule"
                    },
                    ServiceName: {
                        locationName: "serviceName"
                    }
                }
            }
        },
        S1ie: {
            type: "structure",
            members: {
                Cidr: {
                    locationName: "cidr"
                },
                Egress: {
                    locationName: "egress",
                    type: "boolean"
                },
                PortRange: {
                    shape: "Skp",
                    locationName: "portRange"
                },
                Protocol: {
                    locationName: "protocol"
                },
                RuleAction: {
                    locationName: "ruleAction"
                },
                RuleNumber: {
                    locationName: "ruleNumber",
                    type: "integer"
                }
            }
        },
        S1if: {
            type: "structure",
            members: {
                Id: {
                    locationName: "id"
                },
                Arn: {
                    locationName: "arn"
                },
                Name: {
                    locationName: "name"
                }
            }
        },
        S1ig: {
            type: "structure",
            members: {
                DestinationAddresses: {
                    shape: "S1ih",
                    locationName: "destinationAddressSet"
                },
                DestinationPortRanges: {
                    shape: "S1ii",
                    locationName: "destinationPortRangeSet"
                },
                Protocol: {
                    locationName: "protocol"
                },
                SourceAddresses: {
                    shape: "S1ih",
                    locationName: "sourceAddressSet"
                },
                SourcePortRanges: {
                    shape: "S1ii",
                    locationName: "sourcePortRangeSet"
                }
            }
        },
        S1ih: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1ii: {
            type: "list",
            member: {
                shape: "Skp",
                locationName: "item"
            }
        },
        S1ij: {
            type: "structure",
            members: {
                DestinationCidr: {
                    locationName: "destinationCidr"
                },
                DestinationPrefixListId: {
                    locationName: "destinationPrefixListId"
                },
                EgressOnlyInternetGatewayId: {
                    locationName: "egressOnlyInternetGatewayId"
                },
                GatewayId: {
                    locationName: "gatewayId"
                },
                InstanceId: {
                    locationName: "instanceId"
                },
                NatGatewayId: {
                    locationName: "natGatewayId"
                },
                NetworkInterfaceId: {
                    locationName: "networkInterfaceId"
                },
                Origin: {
                    locationName: "origin"
                },
                TransitGatewayId: {
                    locationName: "transitGatewayId"
                },
                VpcPeeringConnectionId: {
                    locationName: "vpcPeeringConnectionId"
                },
                State: {
                    locationName: "state"
                },
                CarrierGatewayId: {
                    locationName: "carrierGatewayId"
                },
                CoreNetworkArn: {
                    locationName: "coreNetworkArn"
                },
                LocalGatewayId: {
                    locationName: "localGatewayId"
                }
            }
        },
        S1ik: {
            type: "structure",
            members: {
                Cidr: {
                    locationName: "cidr"
                },
                Direction: {
                    locationName: "direction"
                },
                SecurityGroupId: {
                    locationName: "securityGroupId"
                },
                PortRange: {
                    shape: "Skp",
                    locationName: "portRange"
                },
                PrefixListId: {
                    locationName: "prefixListId"
                },
                Protocol: {
                    locationName: "protocol"
                }
            }
        },
        S1in: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Keyword: {
                        locationName: "keyword"
                    },
                    Settings: {
                        shape: "S1ip",
                        locationName: "settingSet"
                    }
                }
            }
        },
        S1ip: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1iu: {
            type: "list",
            member: {
                shape: "S1if",
                locationName: "item"
            }
        },
        S1iv: {
            type: "structure",
            members: {
                DestinationCidr: {
                    locationName: "destinationCidr"
                },
                State: {
                    locationName: "state"
                },
                RouteOrigin: {
                    locationName: "routeOrigin"
                },
                PrefixListId: {
                    locationName: "prefixListId"
                },
                AttachmentId: {
                    locationName: "attachmentId"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceType: {
                    locationName: "resourceType"
                }
            }
        },
        S1iw: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Acl: {
                        shape: "S1if",
                        locationName: "acl"
                    },
                    AclRule: {
                        shape: "S1ie",
                        locationName: "aclRule"
                    },
                    Address: {
                        locationName: "address"
                    },
                    Addresses: {
                        shape: "S1ih",
                        locationName: "addressSet"
                    },
                    AttachedTo: {
                        shape: "S1if",
                        locationName: "attachedTo"
                    },
                    AvailabilityZones: {
                        shape: "So",
                        locationName: "availabilityZoneSet"
                    },
                    Cidrs: {
                        shape: "So",
                        locationName: "cidrSet"
                    },
                    Component: {
                        shape: "S1if",
                        locationName: "component"
                    },
                    CustomerGateway: {
                        shape: "S1if",
                        locationName: "customerGateway"
                    },
                    Destination: {
                        shape: "S1if",
                        locationName: "destination"
                    },
                    DestinationVpc: {
                        shape: "S1if",
                        locationName: "destinationVpc"
                    },
                    Direction: {
                        locationName: "direction"
                    },
                    ExplanationCode: {
                        locationName: "explanationCode"
                    },
                    IngressRouteTable: {
                        shape: "S1if",
                        locationName: "ingressRouteTable"
                    },
                    InternetGateway: {
                        shape: "S1if",
                        locationName: "internetGateway"
                    },
                    LoadBalancerArn: {
                        locationName: "loadBalancerArn"
                    },
                    ClassicLoadBalancerListener: {
                        locationName: "classicLoadBalancerListener",
                        type: "structure",
                        members: {
                            LoadBalancerPort: {
                                locationName: "loadBalancerPort",
                                type: "integer"
                            },
                            InstancePort: {
                                locationName: "instancePort",
                                type: "integer"
                            }
                        }
                    },
                    LoadBalancerListenerPort: {
                        locationName: "loadBalancerListenerPort",
                        type: "integer"
                    },
                    LoadBalancerTarget: {
                        locationName: "loadBalancerTarget",
                        type: "structure",
                        members: {
                            Address: {
                                locationName: "address"
                            },
                            AvailabilityZone: {
                                locationName: "availabilityZone"
                            },
                            Instance: {
                                shape: "S1if",
                                locationName: "instance"
                            },
                            Port: {
                                locationName: "port",
                                type: "integer"
                            }
                        }
                    },
                    LoadBalancerTargetGroup: {
                        shape: "S1if",
                        locationName: "loadBalancerTargetGroup"
                    },
                    LoadBalancerTargetGroups: {
                        shape: "S1iu",
                        locationName: "loadBalancerTargetGroupSet"
                    },
                    LoadBalancerTargetPort: {
                        locationName: "loadBalancerTargetPort",
                        type: "integer"
                    },
                    ElasticLoadBalancerListener: {
                        shape: "S1if",
                        locationName: "elasticLoadBalancerListener"
                    },
                    MissingComponent: {
                        locationName: "missingComponent"
                    },
                    NatGateway: {
                        shape: "S1if",
                        locationName: "natGateway"
                    },
                    NetworkInterface: {
                        shape: "S1if",
                        locationName: "networkInterface"
                    },
                    PacketField: {
                        locationName: "packetField"
                    },
                    VpcPeeringConnection: {
                        shape: "S1if",
                        locationName: "vpcPeeringConnection"
                    },
                    Port: {
                        locationName: "port",
                        type: "integer"
                    },
                    PortRanges: {
                        shape: "S1ii",
                        locationName: "portRangeSet"
                    },
                    PrefixList: {
                        shape: "S1if",
                        locationName: "prefixList"
                    },
                    Protocols: {
                        shape: "S1ip",
                        locationName: "protocolSet"
                    },
                    RouteTableRoute: {
                        shape: "S1ij",
                        locationName: "routeTableRoute"
                    },
                    RouteTable: {
                        shape: "S1if",
                        locationName: "routeTable"
                    },
                    SecurityGroup: {
                        shape: "S1if",
                        locationName: "securityGroup"
                    },
                    SecurityGroupRule: {
                        shape: "S1ik",
                        locationName: "securityGroupRule"
                    },
                    SecurityGroups: {
                        shape: "S1iu",
                        locationName: "securityGroupSet"
                    },
                    SourceVpc: {
                        shape: "S1if",
                        locationName: "sourceVpc"
                    },
                    State: {
                        locationName: "state"
                    },
                    Subnet: {
                        shape: "S1if",
                        locationName: "subnet"
                    },
                    SubnetRouteTable: {
                        shape: "S1if",
                        locationName: "subnetRouteTable"
                    },
                    Vpc: {
                        shape: "S1if",
                        locationName: "vpc"
                    },
                    VpcEndpoint: {
                        shape: "S1if",
                        locationName: "vpcEndpoint"
                    },
                    VpnConnection: {
                        shape: "S1if",
                        locationName: "vpnConnection"
                    },
                    VpnGateway: {
                        shape: "S1if",
                        locationName: "vpnGateway"
                    },
                    TransitGateway: {
                        shape: "S1if",
                        locationName: "transitGateway"
                    },
                    TransitGatewayRouteTable: {
                        shape: "S1if",
                        locationName: "transitGatewayRouteTable"
                    },
                    TransitGatewayRouteTableRoute: {
                        shape: "S1iv",
                        locationName: "transitGatewayRouteTableRoute"
                    },
                    TransitGatewayAttachment: {
                        shape: "S1if",
                        locationName: "transitGatewayAttachment"
                    },
                    ComponentAccount: {
                        locationName: "componentAccount"
                    },
                    ComponentRegion: {
                        locationName: "componentRegion"
                    },
                    FirewallStatelessRule: {
                        shape: "S1j2",
                        locationName: "firewallStatelessRule"
                    },
                    FirewallStatefulRule: {
                        shape: "S1j6",
                        locationName: "firewallStatefulRule"
                    }
                }
            }
        },
        S1j2: {
            type: "structure",
            members: {
                RuleGroupArn: {
                    locationName: "ruleGroupArn"
                },
                Sources: {
                    shape: "So",
                    locationName: "sourceSet"
                },
                Destinations: {
                    shape: "So",
                    locationName: "destinationSet"
                },
                SourcePorts: {
                    shape: "S1ii",
                    locationName: "sourcePortSet"
                },
                DestinationPorts: {
                    shape: "S1ii",
                    locationName: "destinationPortSet"
                },
                Protocols: {
                    locationName: "protocolSet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "integer"
                    }
                },
                RuleAction: {
                    locationName: "ruleAction"
                },
                Priority: {
                    locationName: "priority",
                    type: "integer"
                }
            }
        },
        S1j6: {
            type: "structure",
            members: {
                RuleGroupArn: {
                    locationName: "ruleGroupArn"
                },
                Sources: {
                    shape: "So",
                    locationName: "sourceSet"
                },
                Destinations: {
                    shape: "So",
                    locationName: "destinationSet"
                },
                SourcePorts: {
                    shape: "S1ii",
                    locationName: "sourcePortSet"
                },
                DestinationPorts: {
                    shape: "S1ii",
                    locationName: "destinationPortSet"
                },
                Protocol: {
                    locationName: "protocol"
                },
                RuleAction: {
                    locationName: "ruleAction"
                },
                Direction: {
                    locationName: "direction"
                }
            }
        },
        S1kd: {
            type: "structure",
            members: {
                FirstAddress: {
                    locationName: "firstAddress"
                },
                LastAddress: {
                    locationName: "lastAddress"
                },
                AddressCount: {
                    locationName: "addressCount",
                    type: "integer"
                },
                AvailableAddressCount: {
                    locationName: "availableAddressCount",
                    type: "integer"
                }
            }
        },
        S1kq: {
            type: "list",
            member: {
                locationName: "ReservedInstancesId"
            }
        },
        S1ky: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Amount: {
                        locationName: "amount",
                        type: "double"
                    },
                    Frequency: {
                        locationName: "frequency"
                    }
                }
            }
        },
        S1lc: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                InstanceCount: {
                    locationName: "instanceCount",
                    type: "integer"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                Platform: {
                    locationName: "platform"
                },
                Scope: {
                    locationName: "scope"
                }
            }
        },
        S1lz: {
            type: "structure",
            members: {
                Frequency: {
                    locationName: "frequency"
                },
                Interval: {
                    locationName: "interval",
                    type: "integer"
                },
                OccurrenceDaySet: {
                    locationName: "occurrenceDaySet",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "integer"
                    }
                },
                OccurrenceRelativeToEnd: {
                    locationName: "occurrenceRelativeToEnd",
                    type: "boolean"
                },
                OccurrenceUnit: {
                    locationName: "occurrenceUnit"
                }
            }
        },
        S1m7: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                CreateDate: {
                    locationName: "createDate",
                    type: "timestamp"
                },
                HourlyPrice: {
                    locationName: "hourlyPrice"
                },
                InstanceCount: {
                    locationName: "instanceCount",
                    type: "integer"
                },
                InstanceType: {
                    locationName: "instanceType"
                },
                NetworkPlatform: {
                    locationName: "networkPlatform"
                },
                NextSlotStartTime: {
                    locationName: "nextSlotStartTime",
                    type: "timestamp"
                },
                Platform: {
                    locationName: "platform"
                },
                PreviousSlotEndTime: {
                    locationName: "previousSlotEndTime",
                    type: "timestamp"
                },
                Recurrence: {
                    shape: "S1lz",
                    locationName: "recurrence"
                },
                ScheduledInstanceId: {
                    locationName: "scheduledInstanceId"
                },
                SlotDurationInHours: {
                    locationName: "slotDurationInHours",
                    type: "integer"
                },
                TermEndDate: {
                    locationName: "termEndDate",
                    type: "timestamp"
                },
                TermStartDate: {
                    locationName: "termStartDate",
                    type: "timestamp"
                },
                TotalScheduledInstanceHours: {
                    locationName: "totalScheduledInstanceHours",
                    type: "integer"
                }
            }
        },
        S1me: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1mi: {
            type: "list",
            member: {
                locationName: "GroupName"
            }
        },
        S1mq: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Group: {
                        locationName: "group"
                    },
                    UserId: {
                        locationName: "userId"
                    }
                }
            }
        },
        S1ni: {
            type: "structure",
            required: [ "IamFleetRole", "TargetCapacity" ],
            members: {
                AllocationStrategy: {
                    locationName: "allocationStrategy"
                },
                OnDemandAllocationStrategy: {
                    locationName: "onDemandAllocationStrategy"
                },
                SpotMaintenanceStrategies: {
                    locationName: "spotMaintenanceStrategies",
                    type: "structure",
                    members: {
                        CapacityRebalance: {
                            locationName: "capacityRebalance",
                            type: "structure",
                            members: {
                                ReplacementStrategy: {
                                    locationName: "replacementStrategy"
                                },
                                TerminationDelay: {
                                    locationName: "terminationDelay",
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                ClientToken: {
                    locationName: "clientToken"
                },
                ExcessCapacityTerminationPolicy: {
                    locationName: "excessCapacityTerminationPolicy"
                },
                FulfilledCapacity: {
                    locationName: "fulfilledCapacity",
                    type: "double"
                },
                OnDemandFulfilledCapacity: {
                    locationName: "onDemandFulfilledCapacity",
                    type: "double"
                },
                IamFleetRole: {
                    locationName: "iamFleetRole"
                },
                LaunchSpecifications: {
                    locationName: "launchSpecifications",
                    type: "list",
                    member: {
                        locationName: "item",
                        type: "structure",
                        members: {
                            SecurityGroups: {
                                shape: "Sly",
                                locationName: "groupSet"
                            },
                            AddressingType: {
                                locationName: "addressingType"
                            },
                            BlockDeviceMappings: {
                                shape: "S185",
                                locationName: "blockDeviceMapping"
                            },
                            EbsOptimized: {
                                locationName: "ebsOptimized",
                                type: "boolean"
                            },
                            IamInstanceProfile: {
                                shape: "S3v",
                                locationName: "iamInstanceProfile"
                            },
                            ImageId: {
                                locationName: "imageId"
                            },
                            InstanceType: {
                                locationName: "instanceType"
                            },
                            KernelId: {
                                locationName: "kernelId"
                            },
                            KeyName: {
                                locationName: "keyName"
                            },
                            Monitoring: {
                                locationName: "monitoring",
                                type: "structure",
                                members: {
                                    Enabled: {
                                        locationName: "enabled",
                                        type: "boolean"
                                    }
                                }
                            },
                            NetworkInterfaces: {
                                shape: "S1ns",
                                locationName: "networkInterfaceSet"
                            },
                            Placement: {
                                shape: "S1nu",
                                locationName: "placement"
                            },
                            RamdiskId: {
                                locationName: "ramdiskId"
                            },
                            SpotPrice: {
                                locationName: "spotPrice"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            UserData: {
                                shape: "Sgo",
                                locationName: "userData"
                            },
                            WeightedCapacity: {
                                locationName: "weightedCapacity",
                                type: "double"
                            },
                            TagSpecifications: {
                                locationName: "tagSpecificationSet",
                                type: "list",
                                member: {
                                    locationName: "item",
                                    type: "structure",
                                    members: {
                                        ResourceType: {
                                            locationName: "resourceType"
                                        },
                                        Tags: {
                                            shape: "S6",
                                            locationName: "tag"
                                        }
                                    }
                                }
                            },
                            InstanceRequirements: {
                                shape: "Sdz",
                                locationName: "instanceRequirements"
                            }
                        }
                    }
                },
                LaunchTemplateConfigs: {
                    shape: "S1nx",
                    locationName: "launchTemplateConfigs"
                },
                SpotPrice: {
                    locationName: "spotPrice"
                },
                TargetCapacity: {
                    locationName: "targetCapacity",
                    type: "integer"
                },
                OnDemandTargetCapacity: {
                    locationName: "onDemandTargetCapacity",
                    type: "integer"
                },
                OnDemandMaxTotalPrice: {
                    locationName: "onDemandMaxTotalPrice"
                },
                SpotMaxTotalPrice: {
                    locationName: "spotMaxTotalPrice"
                },
                TerminateInstancesWithExpiration: {
                    locationName: "terminateInstancesWithExpiration",
                    type: "boolean"
                },
                Type: {
                    locationName: "type"
                },
                ValidFrom: {
                    locationName: "validFrom",
                    type: "timestamp"
                },
                ValidUntil: {
                    locationName: "validUntil",
                    type: "timestamp"
                },
                ReplaceUnhealthyInstances: {
                    locationName: "replaceUnhealthyInstances",
                    type: "boolean"
                },
                InstanceInterruptionBehavior: {
                    locationName: "instanceInterruptionBehavior"
                },
                LoadBalancersConfig: {
                    locationName: "loadBalancersConfig",
                    type: "structure",
                    members: {
                        ClassicLoadBalancersConfig: {
                            locationName: "classicLoadBalancersConfig",
                            type: "structure",
                            members: {
                                ClassicLoadBalancers: {
                                    locationName: "classicLoadBalancers",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        TargetGroupsConfig: {
                            locationName: "targetGroupsConfig",
                            type: "structure",
                            members: {
                                TargetGroups: {
                                    locationName: "targetGroups",
                                    type: "list",
                                    member: {
                                        locationName: "item",
                                        type: "structure",
                                        members: {
                                            Arn: {
                                                locationName: "arn"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                InstancePoolsToUseCount: {
                    locationName: "instancePoolsToUseCount",
                    type: "integer"
                },
                Context: {
                    locationName: "context"
                },
                TargetCapacityUnitType: {
                    locationName: "targetCapacityUnitType"
                },
                TagSpecifications: {
                    shape: "S3",
                    locationName: "TagSpecification"
                }
            }
        },
        S1ns: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    AssociatePublicIpAddress: {
                        locationName: "associatePublicIpAddress",
                        type: "boolean"
                    },
                    DeleteOnTermination: {
                        locationName: "deleteOnTermination",
                        type: "boolean"
                    },
                    Description: {
                        locationName: "description"
                    },
                    DeviceIndex: {
                        locationName: "deviceIndex",
                        type: "integer"
                    },
                    Groups: {
                        shape: "Sgz",
                        locationName: "SecurityGroupId"
                    },
                    Ipv6AddressCount: {
                        locationName: "ipv6AddressCount",
                        type: "integer"
                    },
                    Ipv6Addresses: {
                        shape: "Siq",
                        locationName: "ipv6AddressesSet",
                        queryName: "Ipv6Addresses"
                    },
                    NetworkInterfaceId: {
                        locationName: "networkInterfaceId"
                    },
                    PrivateIpAddress: {
                        locationName: "privateIpAddress"
                    },
                    PrivateIpAddresses: {
                        shape: "Sh2",
                        locationName: "privateIpAddressesSet",
                        queryName: "PrivateIpAddresses"
                    },
                    SecondaryPrivateIpAddressCount: {
                        locationName: "secondaryPrivateIpAddressCount",
                        type: "integer"
                    },
                    SubnetId: {
                        locationName: "subnetId"
                    },
                    AssociateCarrierIpAddress: {
                        type: "boolean"
                    },
                    InterfaceType: {},
                    NetworkCardIndex: {
                        type: "integer"
                    },
                    Ipv4Prefixes: {
                        shape: "Sh4",
                        locationName: "Ipv4Prefix"
                    },
                    Ipv4PrefixCount: {
                        type: "integer"
                    },
                    Ipv6Prefixes: {
                        shape: "Sh6",
                        locationName: "Ipv6Prefix"
                    },
                    Ipv6PrefixCount: {
                        type: "integer"
                    },
                    PrimaryIpv6: {
                        type: "boolean"
                    },
                    EnaSrdSpecification: {
                        shape: "Sh8"
                    },
                    ConnectionTrackingSpecification: {
                        shape: "Sha"
                    }
                }
            }
        },
        S1nu: {
            type: "structure",
            members: {
                AvailabilityZone: {
                    locationName: "availabilityZone"
                },
                GroupName: {
                    locationName: "groupName"
                },
                Tenancy: {
                    locationName: "tenancy"
                }
            }
        },
        S1nx: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    LaunchTemplateSpecification: {
                        shape: "Sdw",
                        locationName: "launchTemplateSpecification"
                    },
                    Overrides: {
                        locationName: "overrides",
                        type: "list",
                        member: {
                            locationName: "item",
                            type: "structure",
                            members: {
                                InstanceType: {
                                    locationName: "instanceType"
                                },
                                SpotPrice: {
                                    locationName: "spotPrice"
                                },
                                SubnetId: {
                                    locationName: "subnetId"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                WeightedCapacity: {
                                    locationName: "weightedCapacity",
                                    type: "double"
                                },
                                Priority: {
                                    locationName: "priority",
                                    type: "double"
                                },
                                InstanceRequirements: {
                                    shape: "Sdz",
                                    locationName: "instanceRequirements"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1oa: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    ActualBlockHourlyPrice: {
                        locationName: "actualBlockHourlyPrice"
                    },
                    AvailabilityZoneGroup: {
                        locationName: "availabilityZoneGroup"
                    },
                    BlockDurationMinutes: {
                        locationName: "blockDurationMinutes",
                        type: "integer"
                    },
                    CreateTime: {
                        locationName: "createTime",
                        type: "timestamp"
                    },
                    Fault: {
                        shape: "Snv",
                        locationName: "fault"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    LaunchGroup: {
                        locationName: "launchGroup"
                    },
                    LaunchSpecification: {
                        locationName: "launchSpecification",
                        type: "structure",
                        members: {
                            UserData: {
                                shape: "Sgo",
                                locationName: "userData"
                            },
                            SecurityGroups: {
                                shape: "Sly",
                                locationName: "groupSet"
                            },
                            AddressingType: {
                                locationName: "addressingType"
                            },
                            BlockDeviceMappings: {
                                shape: "S185",
                                locationName: "blockDeviceMapping"
                            },
                            EbsOptimized: {
                                locationName: "ebsOptimized",
                                type: "boolean"
                            },
                            IamInstanceProfile: {
                                shape: "S3v",
                                locationName: "iamInstanceProfile"
                            },
                            ImageId: {
                                locationName: "imageId"
                            },
                            InstanceType: {
                                locationName: "instanceType"
                            },
                            KernelId: {
                                locationName: "kernelId"
                            },
                            KeyName: {
                                locationName: "keyName"
                            },
                            NetworkInterfaces: {
                                shape: "S1ns",
                                locationName: "networkInterfaceSet"
                            },
                            Placement: {
                                shape: "S1nu",
                                locationName: "placement"
                            },
                            RamdiskId: {
                                locationName: "ramdiskId"
                            },
                            SubnetId: {
                                locationName: "subnetId"
                            },
                            Monitoring: {
                                shape: "S1od",
                                locationName: "monitoring"
                            }
                        }
                    },
                    LaunchedAvailabilityZone: {
                        locationName: "launchedAvailabilityZone"
                    },
                    ProductDescription: {
                        locationName: "productDescription"
                    },
                    SpotInstanceRequestId: {
                        locationName: "spotInstanceRequestId"
                    },
                    SpotPrice: {
                        locationName: "spotPrice"
                    },
                    State: {
                        locationName: "state"
                    },
                    Status: {
                        locationName: "status",
                        type: "structure",
                        members: {
                            Code: {
                                locationName: "code"
                            },
                            Message: {
                                locationName: "message"
                            },
                            UpdateTime: {
                                locationName: "updateTime",
                                type: "timestamp"
                            }
                        }
                    },
                    Tags: {
                        shape: "S6",
                        locationName: "tagSet"
                    },
                    Type: {
                        locationName: "type"
                    },
                    ValidFrom: {
                        locationName: "validFrom",
                        type: "timestamp"
                    },
                    ValidUntil: {
                        locationName: "validUntil",
                        type: "timestamp"
                    },
                    InstanceInterruptionBehavior: {
                        locationName: "instanceInterruptionBehavior"
                    }
                }
            }
        },
        S1od: {
            type: "structure",
            required: [ "Enabled" ],
            members: {
                Enabled: {
                    locationName: "enabled",
                    type: "boolean"
                }
            }
        },
        S1os: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    FromPort: {
                        locationName: "fromPort",
                        type: "integer"
                    },
                    IpProtocol: {
                        locationName: "ipProtocol"
                    },
                    IpRanges: {
                        locationName: "ipRanges",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    PrefixListIds: {
                        locationName: "prefixListIds",
                        type: "list",
                        member: {
                            locationName: "item"
                        }
                    },
                    ToPort: {
                        locationName: "toPort",
                        type: "integer"
                    },
                    UserIdGroupPairs: {
                        locationName: "groups",
                        type: "list",
                        member: {
                            shape: "S76",
                            locationName: "item"
                        }
                    }
                }
            }
        },
        S1pq: {
            type: "list",
            member: {}
        },
        S1r9: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1rd: {
            type: "structure",
            members: {
                VerifiedAccessInstanceId: {
                    locationName: "verifiedAccessInstanceId"
                },
                AccessLogs: {
                    locationName: "accessLogs",
                    type: "structure",
                    members: {
                        S3: {
                            locationName: "s3",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                DeliveryStatus: {
                                    shape: "S1rg",
                                    locationName: "deliveryStatus"
                                },
                                BucketName: {
                                    locationName: "bucketName"
                                },
                                Prefix: {
                                    locationName: "prefix"
                                },
                                BucketOwner: {
                                    locationName: "bucketOwner"
                                }
                            }
                        },
                        CloudWatchLogs: {
                            locationName: "cloudWatchLogs",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                DeliveryStatus: {
                                    shape: "S1rg",
                                    locationName: "deliveryStatus"
                                },
                                LogGroup: {
                                    locationName: "logGroup"
                                }
                            }
                        },
                        KinesisDataFirehose: {
                            locationName: "kinesisDataFirehose",
                            type: "structure",
                            members: {
                                Enabled: {
                                    locationName: "enabled",
                                    type: "boolean"
                                },
                                DeliveryStatus: {
                                    shape: "S1rg",
                                    locationName: "deliveryStatus"
                                },
                                DeliveryStream: {
                                    locationName: "deliveryStream"
                                }
                            }
                        },
                        LogVersion: {
                            locationName: "logVersion"
                        },
                        IncludeTrustContext: {
                            locationName: "includeTrustContext",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S1rg: {
            type: "structure",
            members: {
                Code: {
                    locationName: "code"
                },
                Message: {
                    locationName: "message"
                }
            }
        },
        S1sh: {
            type: "structure",
            members: {
                VolumeId: {
                    locationName: "volumeId"
                },
                ModificationState: {
                    locationName: "modificationState"
                },
                StatusMessage: {
                    locationName: "statusMessage"
                },
                TargetSize: {
                    locationName: "targetSize",
                    type: "integer"
                },
                TargetIops: {
                    locationName: "targetIops",
                    type: "integer"
                },
                TargetVolumeType: {
                    locationName: "targetVolumeType"
                },
                TargetThroughput: {
                    locationName: "targetThroughput",
                    type: "integer"
                },
                TargetMultiAttachEnabled: {
                    locationName: "targetMultiAttachEnabled",
                    type: "boolean"
                },
                OriginalSize: {
                    locationName: "originalSize",
                    type: "integer"
                },
                OriginalIops: {
                    locationName: "originalIops",
                    type: "integer"
                },
                OriginalVolumeType: {
                    locationName: "originalVolumeType"
                },
                OriginalThroughput: {
                    locationName: "originalThroughput",
                    type: "integer"
                },
                OriginalMultiAttachEnabled: {
                    locationName: "originalMultiAttachEnabled",
                    type: "boolean"
                },
                Progress: {
                    locationName: "progress",
                    type: "long"
                },
                StartTime: {
                    locationName: "startTime",
                    type: "timestamp"
                },
                EndTime: {
                    locationName: "endTime",
                    type: "timestamp"
                }
            }
        },
        S1sn: {
            type: "list",
            member: {
                locationName: "VpcId"
            }
        },
        S1un: {
            type: "list",
            member: {
                locationName: "AvailabilityZone"
            }
        },
        S1vc: {
            type: "structure",
            members: {
                TransitGatewayAttachmentId: {
                    locationName: "transitGatewayAttachmentId"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                TransitGatewayRouteTableId: {
                    locationName: "transitGatewayRouteTableId"
                },
                State: {
                    locationName: "state"
                },
                TransitGatewayRouteTableAnnouncementId: {
                    locationName: "transitGatewayRouteTableAnnouncementId"
                }
            }
        },
        S1yu: {
            type: "structure",
            members: {
                InstanceFamily: {
                    locationName: "instanceFamily"
                },
                CpuCredits: {
                    locationName: "cpuCredits"
                }
            }
        },
        S1zb: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1zd: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    HostIdSet: {
                        shape: "S17d",
                        locationName: "hostIdSet"
                    },
                    HostReservationId: {
                        locationName: "hostReservationId"
                    },
                    HourlyPrice: {
                        locationName: "hourlyPrice"
                    },
                    InstanceFamily: {
                        locationName: "instanceFamily"
                    },
                    PaymentOption: {
                        locationName: "paymentOption"
                    },
                    UpfrontPrice: {
                        locationName: "upfrontPrice"
                    }
                }
            }
        },
        S1zi: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S1zj: {
            type: "list",
            member: {
                locationName: "item"
            }
        },
        S20v: {
            type: "structure",
            members: {
                IpamId: {
                    locationName: "ipamId"
                },
                IpamScopeId: {
                    locationName: "ipamScopeId"
                },
                IpamPoolId: {
                    locationName: "ipamPoolId"
                },
                ResourceRegion: {
                    locationName: "resourceRegion"
                },
                ResourceOwnerId: {
                    locationName: "resourceOwnerId"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                ResourceName: {
                    locationName: "resourceName"
                },
                ResourceCidr: {
                    locationName: "resourceCidr"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                ResourceTags: {
                    shape: "Sg9",
                    locationName: "resourceTagSet"
                },
                IpUsage: {
                    locationName: "ipUsage",
                    type: "double"
                },
                ComplianceStatus: {
                    locationName: "complianceStatus"
                },
                ManagementState: {
                    locationName: "managementState"
                },
                OverlapStatus: {
                    locationName: "overlapStatus"
                },
                VpcId: {
                    locationName: "vpcId"
                }
            }
        },
        S21j: {
            type: "structure",
            members: {
                HourlyPrice: {
                    locationName: "hourlyPrice"
                },
                RemainingTotalValue: {
                    locationName: "remainingTotalValue"
                },
                RemainingUpfrontValue: {
                    locationName: "remainingUpfrontValue"
                }
            }
        },
        S22a: {
            type: "list",
            member: {
                shape: "So6",
                locationName: "item"
            }
        },
        S23m: {
            type: "structure",
            members: {
                Comment: {},
                UploadEnd: {
                    type: "timestamp"
                },
                UploadSize: {
                    type: "double"
                },
                UploadStart: {
                    type: "timestamp"
                }
            }
        },
        S23p: {
            type: "structure",
            members: {
                S3Bucket: {},
                S3Key: {}
            }
        },
        S23w: {
            type: "structure",
            required: [ "Bytes", "Format", "ImportManifestUrl" ],
            members: {
                Bytes: {
                    locationName: "bytes",
                    type: "long"
                },
                Format: {
                    locationName: "format"
                },
                ImportManifestUrl: {
                    shape: "S13x",
                    locationName: "importManifestUrl"
                }
            }
        },
        S23x: {
            type: "structure",
            required: [ "Size" ],
            members: {
                Size: {
                    locationName: "size",
                    type: "long"
                }
            }
        },
        S257: {
            type: "list",
            member: {
                locationName: "UserId"
            }
        },
        S258: {
            type: "list",
            member: {
                locationName: "UserGroup"
            }
        },
        S259: {
            type: "list",
            member: {
                locationName: "ProductCode"
            }
        },
        S25b: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    Group: {},
                    UserId: {}
                }
            }
        },
        S25g: {
            type: "list",
            member: {
                shape: "S1i",
                locationName: "item"
            }
        },
        S25t: {
            type: "structure",
            members: {
                CapacityReservationPreference: {},
                CapacityReservationTarget: {
                    shape: "Shy"
                }
            }
        },
        S26i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RegionName: {}
                }
            }
        },
        S297: {
            type: "structure",
            members: {
                AllowDnsResolutionFromRemoteVpc: {
                    type: "boolean"
                },
                AllowEgressFromLocalClassicLinkToRemoteVpc: {
                    type: "boolean"
                },
                AllowEgressFromLocalVpcToRemoteClassicLink: {
                    type: "boolean"
                }
            }
        },
        S299: {
            type: "structure",
            members: {
                AllowDnsResolutionFromRemoteVpc: {
                    locationName: "allowDnsResolutionFromRemoteVpc",
                    type: "boolean"
                },
                AllowEgressFromLocalClassicLinkToRemoteVpc: {
                    locationName: "allowEgressFromLocalClassicLinkToRemoteVpc",
                    type: "boolean"
                },
                AllowEgressFromLocalVpcToRemoteClassicLink: {
                    locationName: "allowEgressFromLocalVpcToRemoteClassicLink",
                    type: "boolean"
                }
            }
        },
        S29o: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    Monitoring: {
                        shape: "S1dx",
                        locationName: "monitoring"
                    }
                }
            }
        },
        S2di: {
            type: "list",
            member: {
                locationName: "SecurityGroupId"
            }
        },
        S2e6: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    CurrentState: {
                        shape: "S1a2",
                        locationName: "currentState"
                    },
                    InstanceId: {
                        locationName: "instanceId"
                    },
                    PreviousState: {
                        shape: "S1a2",
                        locationName: "previousState"
                    }
                }
            }
        },
        S2ew: {
            type: "list",
            member: {
                locationName: "item",
                type: "structure",
                members: {
                    SecurityGroupRuleId: {},
                    Description: {}
                }
            }
        }
    },
    paginators: {
        DescribeAccountAttributes: {
            result_key: "AccountAttributes"
        },
        DescribeAddressTransfers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AddressTransfers"
        },
        DescribeAddresses: {
            result_key: "Addresses"
        },
        DescribeAddressesAttribute: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Addresses"
        },
        DescribeAvailabilityZones: {
            result_key: "AvailabilityZones"
        },
        DescribeAwsNetworkPerformanceMetricSubscriptions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Subscriptions"
        },
        DescribeBundleTasks: {
            result_key: "BundleTasks"
        },
        DescribeByoipCidrs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ByoipCidrs"
        },
        DescribeCapacityBlockOfferings: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CapacityBlockOfferings"
        },
        DescribeCapacityReservationFleets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CapacityReservationFleets"
        },
        DescribeCapacityReservations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CapacityReservations"
        },
        DescribeCarrierGateways: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CarrierGateways"
        },
        DescribeClassicLinkInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Instances"
        },
        DescribeClientVpnAuthorizationRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AuthorizationRules"
        },
        DescribeClientVpnConnections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Connections"
        },
        DescribeClientVpnEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ClientVpnEndpoints"
        },
        DescribeClientVpnRoutes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Routes"
        },
        DescribeClientVpnTargetNetworks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ClientVpnTargetNetworks"
        },
        DescribeCoipPools: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CoipPools"
        },
        DescribeConversionTasks: {
            result_key: "ConversionTasks"
        },
        DescribeCustomerGateways: {
            result_key: "CustomerGateways"
        },
        DescribeDhcpOptions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DhcpOptions"
        },
        DescribeEgressOnlyInternetGateways: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EgressOnlyInternetGateways"
        },
        DescribeExportImageTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ExportImageTasks"
        },
        DescribeExportTasks: {
            result_key: "ExportTasks"
        },
        DescribeFastLaunchImages: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "FastLaunchImages"
        },
        DescribeFastSnapshotRestores: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "FastSnapshotRestores"
        },
        DescribeFleets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Fleets"
        },
        DescribeFlowLogs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "FlowLogs"
        },
        DescribeFpgaImages: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "FpgaImages"
        },
        DescribeHostReservationOfferings: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "OfferingSet"
        },
        DescribeHostReservations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "HostReservationSet"
        },
        DescribeHosts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Hosts"
        },
        DescribeIamInstanceProfileAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IamInstanceProfileAssociations"
        },
        DescribeImages: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Images"
        },
        DescribeImportImageTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ImportImageTasks"
        },
        DescribeImportSnapshotTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ImportSnapshotTasks"
        },
        DescribeInstanceConnectEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceConnectEndpoints"
        },
        DescribeInstanceCreditSpecifications: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceCreditSpecifications"
        },
        DescribeInstanceEventWindows: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceEventWindows"
        },
        DescribeInstanceStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceStatuses"
        },
        DescribeInstanceTopology: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Instances"
        },
        DescribeInstanceTypeOfferings: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceTypeOfferings"
        },
        DescribeInstanceTypes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceTypes"
        },
        DescribeInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Reservations"
        },
        DescribeInternetGateways: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InternetGateways"
        },
        DescribeIpamPools: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamPools"
        },
        DescribeIpamResourceDiscoveries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamResourceDiscoveries"
        },
        DescribeIpamResourceDiscoveryAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamResourceDiscoveryAssociations"
        },
        DescribeIpamScopes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamScopes"
        },
        DescribeIpams: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Ipams"
        },
        DescribeIpv6Pools: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Ipv6Pools"
        },
        DescribeKeyPairs: {
            result_key: "KeyPairs"
        },
        DescribeLaunchTemplateVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LaunchTemplateVersions"
        },
        DescribeLaunchTemplates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LaunchTemplates"
        },
        DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LocalGatewayRouteTableVirtualInterfaceGroupAssociations"
        },
        DescribeLocalGatewayRouteTableVpcAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LocalGatewayRouteTableVpcAssociations"
        },
        DescribeLocalGatewayRouteTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LocalGatewayRouteTables"
        },
        DescribeLocalGatewayVirtualInterfaceGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LocalGatewayVirtualInterfaceGroups"
        },
        DescribeLocalGatewayVirtualInterfaces: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LocalGatewayVirtualInterfaces"
        },
        DescribeLocalGateways: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LocalGateways"
        },
        DescribeManagedPrefixLists: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PrefixLists"
        },
        DescribeMovingAddresses: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MovingAddressStatuses"
        },
        DescribeNatGateways: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NatGateways"
        },
        DescribeNetworkAcls: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkAcls"
        },
        DescribeNetworkInsightsAccessScopeAnalyses: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkInsightsAccessScopeAnalyses"
        },
        DescribeNetworkInsightsAccessScopes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkInsightsAccessScopes"
        },
        DescribeNetworkInsightsAnalyses: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkInsightsAnalyses"
        },
        DescribeNetworkInsightsPaths: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkInsightsPaths"
        },
        DescribeNetworkInterfacePermissions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkInterfacePermissions"
        },
        DescribeNetworkInterfaces: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "NetworkInterfaces"
        },
        DescribePlacementGroups: {
            result_key: "PlacementGroups"
        },
        DescribePrefixLists: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PrefixLists"
        },
        DescribePrincipalIdFormat: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Principals"
        },
        DescribePublicIpv4Pools: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PublicIpv4Pools"
        },
        DescribeRegions: {
            result_key: "Regions"
        },
        DescribeReplaceRootVolumeTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ReplaceRootVolumeTasks"
        },
        DescribeReservedInstances: {
            result_key: "ReservedInstances"
        },
        DescribeReservedInstancesListings: {
            result_key: "ReservedInstancesListings"
        },
        DescribeReservedInstancesModifications: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "ReservedInstancesModifications"
        },
        DescribeReservedInstancesOfferings: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ReservedInstancesOfferings"
        },
        DescribeRouteTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "RouteTables"
        },
        DescribeScheduledInstanceAvailability: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScheduledInstanceAvailabilitySet"
        },
        DescribeScheduledInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScheduledInstanceSet"
        },
        DescribeSecurityGroupRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityGroupRules"
        },
        DescribeSecurityGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityGroups"
        },
        DescribeSnapshotTierStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SnapshotTierStatuses"
        },
        DescribeSnapshots: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Snapshots"
        },
        DescribeSpotFleetRequests: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SpotFleetRequestConfigs"
        },
        DescribeSpotInstanceRequests: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SpotInstanceRequests"
        },
        DescribeSpotPriceHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SpotPriceHistory"
        },
        DescribeStaleSecurityGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StaleSecurityGroupSet"
        },
        DescribeStoreImageTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StoreImageTaskResults"
        },
        DescribeSubnets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Subnets"
        },
        DescribeTags: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        },
        DescribeTrafficMirrorFilters: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TrafficMirrorFilters"
        },
        DescribeTrafficMirrorSessions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TrafficMirrorSessions"
        },
        DescribeTrafficMirrorTargets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TrafficMirrorTargets"
        },
        DescribeTransitGatewayAttachments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayAttachments"
        },
        DescribeTransitGatewayConnectPeers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayConnectPeers"
        },
        DescribeTransitGatewayConnects: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayConnects"
        },
        DescribeTransitGatewayMulticastDomains: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayMulticastDomains"
        },
        DescribeTransitGatewayPeeringAttachments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayPeeringAttachments"
        },
        DescribeTransitGatewayPolicyTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayPolicyTables"
        },
        DescribeTransitGatewayRouteTableAnnouncements: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayRouteTableAnnouncements"
        },
        DescribeTransitGatewayRouteTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayRouteTables"
        },
        DescribeTransitGatewayVpcAttachments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayVpcAttachments"
        },
        DescribeTransitGateways: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGateways"
        },
        DescribeTrunkInterfaceAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InterfaceAssociations"
        },
        DescribeVerifiedAccessEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VerifiedAccessEndpoints"
        },
        DescribeVerifiedAccessGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VerifiedAccessGroups"
        },
        DescribeVerifiedAccessInstanceLoggingConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LoggingConfigurations"
        },
        DescribeVerifiedAccessInstances: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VerifiedAccessInstances"
        },
        DescribeVerifiedAccessTrustProviders: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VerifiedAccessTrustProviders"
        },
        DescribeVolumeStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VolumeStatuses"
        },
        DescribeVolumes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Volumes"
        },
        DescribeVolumesModifications: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VolumesModifications"
        },
        DescribeVpcClassicLinkDnsSupport: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Vpcs"
        },
        DescribeVpcEndpointConnectionNotifications: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ConnectionNotificationSet"
        },
        DescribeVpcEndpointConnections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VpcEndpointConnections"
        },
        DescribeVpcEndpointServiceConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ServiceConfigurations"
        },
        DescribeVpcEndpointServicePermissions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AllowedPrincipals"
        },
        DescribeVpcEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VpcEndpoints"
        },
        DescribeVpcPeeringConnections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VpcPeeringConnections"
        },
        DescribeVpcs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Vpcs"
        },
        DescribeVpnConnections: {
            result_key: "VpnConnections"
        },
        DescribeVpnGateways: {
            result_key: "VpnGateways"
        },
        GetAssociatedIpv6PoolCidrs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Ipv6CidrAssociations"
        },
        GetAwsNetworkPerformanceData: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DataResponses"
        },
        GetGroupsForCapacityReservation: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CapacityReservationGroups"
        },
        GetInstanceTypesFromInstanceRequirements: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceTypes"
        },
        GetIpamAddressHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "HistoryRecords"
        },
        GetIpamDiscoveredAccounts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamDiscoveredAccounts"
        },
        GetIpamDiscoveredResourceCidrs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamDiscoveredResourceCidrs"
        },
        GetIpamPoolAllocations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamPoolAllocations"
        },
        GetIpamPoolCidrs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamPoolCidrs"
        },
        GetIpamResourceCidrs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "IpamResourceCidrs"
        },
        GetManagedPrefixListAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PrefixListAssociations"
        },
        GetManagedPrefixListEntries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Entries"
        },
        GetNetworkInsightsAccessScopeAnalysisFindings: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AnalysisFindings"
        },
        GetSecurityGroupsForVpc: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityGroupForVpcs"
        },
        GetSpotPlacementScores: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SpotPlacementScores"
        },
        GetTransitGatewayAttachmentPropagations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayAttachmentPropagations"
        },
        GetTransitGatewayMulticastDomainAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MulticastDomainAssociations"
        },
        GetTransitGatewayPolicyTableAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Associations"
        },
        GetTransitGatewayPrefixListReferences: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayPrefixListReferences"
        },
        GetTransitGatewayRouteTableAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Associations"
        },
        GetTransitGatewayRouteTablePropagations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TransitGatewayRouteTablePropagations"
        },
        GetVpnConnectionDeviceTypes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "VpnConnectionDeviceTypes"
        },
        ListImagesInRecycleBin: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Images"
        },
        ListSnapshotsInRecycleBin: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Snapshots"
        },
        SearchLocalGatewayRoutes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Routes"
        },
        SearchTransitGatewayMulticastGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MulticastGroups"
        }
    },
    waiters: {
        InstanceExists: {
            delay: 5,
            maxAttempts: 40,
            operation: "DescribeInstances",
            acceptors: [ {
                matcher: "path",
                expected: true,
                argument: "length(Reservations[]) > `0`",
                state: "success"
            }, {
                matcher: "error",
                expected: "InvalidInstanceID.NotFound",
                state: "retry"
            } ]
        },
        BundleTaskComplete: {
            delay: 15,
            operation: "DescribeBundleTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "complete",
                matcher: "pathAll",
                state: "success",
                argument: "BundleTasks[].State"
            }, {
                expected: "failed",
                matcher: "pathAny",
                state: "failure",
                argument: "BundleTasks[].State"
            } ]
        },
        ConversionTaskCancelled: {
            delay: 15,
            operation: "DescribeConversionTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "cancelled",
                matcher: "pathAll",
                state: "success",
                argument: "ConversionTasks[].State"
            } ]
        },
        ConversionTaskCompleted: {
            delay: 15,
            operation: "DescribeConversionTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "completed",
                matcher: "pathAll",
                state: "success",
                argument: "ConversionTasks[].State"
            }, {
                expected: "cancelled",
                matcher: "pathAny",
                state: "failure",
                argument: "ConversionTasks[].State"
            }, {
                expected: "cancelling",
                matcher: "pathAny",
                state: "failure",
                argument: "ConversionTasks[].State"
            } ]
        },
        ConversionTaskDeleted: {
            delay: 15,
            operation: "DescribeConversionTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "ConversionTasks[].State"
            } ]
        },
        CustomerGatewayAvailable: {
            delay: 15,
            operation: "DescribeCustomerGateways",
            maxAttempts: 40,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "CustomerGateways[].State"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "CustomerGateways[].State"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "CustomerGateways[].State"
            } ]
        },
        ExportTaskCancelled: {
            delay: 15,
            operation: "DescribeExportTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "cancelled",
                matcher: "pathAll",
                state: "success",
                argument: "ExportTasks[].State"
            } ]
        },
        ExportTaskCompleted: {
            delay: 15,
            operation: "DescribeExportTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "completed",
                matcher: "pathAll",
                state: "success",
                argument: "ExportTasks[].State"
            } ]
        },
        ImageExists: {
            operation: "DescribeImages",
            maxAttempts: 40,
            delay: 15,
            acceptors: [ {
                matcher: "path",
                expected: true,
                argument: "length(Images[]) > `0`",
                state: "success"
            }, {
                matcher: "error",
                expected: "InvalidAMIID.NotFound",
                state: "retry"
            } ]
        },
        ImageAvailable: {
            operation: "DescribeImages",
            maxAttempts: 40,
            delay: 15,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "Images[].State",
                expected: "available"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "Images[].State",
                expected: "failed"
            } ]
        },
        InstanceRunning: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            acceptors: [ {
                expected: "running",
                matcher: "pathAll",
                state: "success",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "shutting-down",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "terminated",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "stopping",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                matcher: "error",
                expected: "InvalidInstanceID.NotFound",
                state: "retry"
            } ]
        },
        InstanceStatusOk: {
            operation: "DescribeInstanceStatus",
            maxAttempts: 40,
            delay: 15,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "InstanceStatuses[].InstanceStatus.Status",
                expected: "ok"
            }, {
                matcher: "error",
                expected: "InvalidInstanceID.NotFound",
                state: "retry"
            } ]
        },
        InstanceStopped: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            acceptors: [ {
                expected: "stopped",
                matcher: "pathAll",
                state: "success",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "pending",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "terminated",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            } ]
        },
        InstanceTerminated: {
            delay: 15,
            operation: "DescribeInstances",
            maxAttempts: 40,
            acceptors: [ {
                expected: "terminated",
                matcher: "pathAll",
                state: "success",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "pending",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            }, {
                expected: "stopping",
                matcher: "pathAny",
                state: "failure",
                argument: "Reservations[].Instances[].State.Name"
            } ]
        },
        InternetGatewayExists: {
            operation: "DescribeInternetGateways",
            delay: 5,
            maxAttempts: 6,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(InternetGateways[].InternetGatewayId) > `0`"
            }, {
                expected: "InvalidInternetGateway.NotFound",
                matcher: "error",
                state: "retry"
            } ]
        },
        KeyPairExists: {
            operation: "DescribeKeyPairs",
            delay: 5,
            maxAttempts: 6,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(KeyPairs[].KeyName) > `0`"
            }, {
                expected: "InvalidKeyPair.NotFound",
                matcher: "error",
                state: "retry"
            } ]
        },
        NatGatewayAvailable: {
            operation: "DescribeNatGateways",
            delay: 15,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "NatGateways[].State",
                expected: "available"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "NatGateways[].State",
                expected: "failed"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "NatGateways[].State",
                expected: "deleting"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "NatGateways[].State",
                expected: "deleted"
            }, {
                state: "retry",
                matcher: "error",
                expected: "NatGatewayNotFound"
            } ]
        },
        NatGatewayDeleted: {
            operation: "DescribeNatGateways",
            delay: 15,
            maxAttempts: 40,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "NatGateways[].State",
                expected: "deleted"
            }, {
                state: "success",
                matcher: "error",
                expected: "NatGatewayNotFound"
            } ]
        },
        NetworkInterfaceAvailable: {
            operation: "DescribeNetworkInterfaces",
            delay: 20,
            maxAttempts: 10,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "NetworkInterfaces[].Status"
            }, {
                expected: "InvalidNetworkInterfaceID.NotFound",
                matcher: "error",
                state: "failure"
            } ]
        },
        PasswordDataAvailable: {
            operation: "GetPasswordData",
            maxAttempts: 40,
            delay: 15,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "length(PasswordData) > `0`",
                expected: true
            } ]
        },
        SnapshotCompleted: {
            delay: 15,
            operation: "DescribeSnapshots",
            maxAttempts: 40,
            acceptors: [ {
                expected: "completed",
                matcher: "pathAll",
                state: "success",
                argument: "Snapshots[].State"
            }, {
                expected: "error",
                matcher: "pathAny",
                state: "failure",
                argument: "Snapshots[].State"
            } ]
        },
        SnapshotImported: {
            delay: 15,
            operation: "DescribeImportSnapshotTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "completed",
                matcher: "pathAll",
                state: "success",
                argument: "ImportSnapshotTasks[].SnapshotTaskDetail.Status"
            }, {
                expected: "error",
                matcher: "pathAny",
                state: "failure",
                argument: "ImportSnapshotTasks[].SnapshotTaskDetail.Status"
            } ]
        },
        SecurityGroupExists: {
            operation: "DescribeSecurityGroups",
            delay: 5,
            maxAttempts: 6,
            acceptors: [ {
                expected: true,
                matcher: "path",
                state: "success",
                argument: "length(SecurityGroups[].GroupId) > `0`"
            }, {
                expected: "InvalidGroup.NotFound",
                matcher: "error",
                state: "retry"
            } ]
        },
        SpotInstanceRequestFulfilled: {
            operation: "DescribeSpotInstanceRequests",
            maxAttempts: 40,
            delay: 15,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "SpotInstanceRequests[].Status.Code",
                expected: "fulfilled"
            }, {
                state: "success",
                matcher: "pathAll",
                argument: "SpotInstanceRequests[].Status.Code",
                expected: "request-canceled-and-instance-running"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "SpotInstanceRequests[].Status.Code",
                expected: "schedule-expired"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "SpotInstanceRequests[].Status.Code",
                expected: "canceled-before-fulfillment"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "SpotInstanceRequests[].Status.Code",
                expected: "bad-parameters"
            }, {
                state: "failure",
                matcher: "pathAny",
                argument: "SpotInstanceRequests[].Status.Code",
                expected: "system-error"
            }, {
                state: "retry",
                matcher: "error",
                expected: "InvalidSpotInstanceRequestID.NotFound"
            } ]
        },
        StoreImageTaskComplete: {
            delay: 5,
            operation: "DescribeStoreImageTasks",
            maxAttempts: 40,
            acceptors: [ {
                expected: "Completed",
                matcher: "pathAll",
                state: "success",
                argument: "StoreImageTaskResults[].StoreTaskState"
            }, {
                expected: "Failed",
                matcher: "pathAny",
                state: "failure",
                argument: "StoreImageTaskResults[].StoreTaskState"
            }, {
                expected: "InProgress",
                matcher: "pathAny",
                state: "retry",
                argument: "StoreImageTaskResults[].StoreTaskState"
            } ]
        },
        SubnetAvailable: {
            delay: 15,
            operation: "DescribeSubnets",
            maxAttempts: 40,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "Subnets[].State"
            } ]
        },
        SystemStatusOk: {
            operation: "DescribeInstanceStatus",
            maxAttempts: 40,
            delay: 15,
            acceptors: [ {
                state: "success",
                matcher: "pathAll",
                argument: "InstanceStatuses[].SystemStatus.Status",
                expected: "ok"
            } ]
        },
        VolumeAvailable: {
            delay: 15,
            operation: "DescribeVolumes",
            maxAttempts: 40,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "Volumes[].State"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "Volumes[].State"
            } ]
        },
        VolumeDeleted: {
            delay: 15,
            operation: "DescribeVolumes",
            maxAttempts: 40,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "Volumes[].State"
            }, {
                matcher: "error",
                expected: "InvalidVolume.NotFound",
                state: "success"
            } ]
        },
        VolumeInUse: {
            delay: 15,
            operation: "DescribeVolumes",
            maxAttempts: 40,
            acceptors: [ {
                expected: "in-use",
                matcher: "pathAll",
                state: "success",
                argument: "Volumes[].State"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "Volumes[].State"
            } ]
        },
        VpcAvailable: {
            delay: 15,
            operation: "DescribeVpcs",
            maxAttempts: 40,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "Vpcs[].State"
            } ]
        },
        VpcExists: {
            operation: "DescribeVpcs",
            delay: 1,
            maxAttempts: 5,
            acceptors: [ {
                matcher: "status",
                expected: 200,
                state: "success"
            }, {
                matcher: "error",
                expected: "InvalidVpcID.NotFound",
                state: "retry"
            } ]
        },
        VpnConnectionAvailable: {
            delay: 15,
            operation: "DescribeVpnConnections",
            maxAttempts: 40,
            acceptors: [ {
                expected: "available",
                matcher: "pathAll",
                state: "success",
                argument: "VpnConnections[].State"
            }, {
                expected: "deleting",
                matcher: "pathAny",
                state: "failure",
                argument: "VpnConnections[].State"
            }, {
                expected: "deleted",
                matcher: "pathAny",
                state: "failure",
                argument: "VpnConnections[].State"
            } ]
        },
        VpnConnectionDeleted: {
            delay: 15,
            operation: "DescribeVpnConnections",
            maxAttempts: 40,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "VpnConnections[].State"
            }, {
                expected: "pending",
                matcher: "pathAny",
                state: "failure",
                argument: "VpnConnections[].State"
            } ]
        },
        VpcPeeringConnectionExists: {
            delay: 15,
            operation: "DescribeVpcPeeringConnections",
            maxAttempts: 40,
            acceptors: [ {
                matcher: "status",
                expected: 200,
                state: "success"
            }, {
                matcher: "error",
                expected: "InvalidVpcPeeringConnectionID.NotFound",
                state: "retry"
            } ]
        },
        VpcPeeringConnectionDeleted: {
            delay: 15,
            operation: "DescribeVpcPeeringConnections",
            maxAttempts: 40,
            acceptors: [ {
                expected: "deleted",
                matcher: "pathAll",
                state: "success",
                argument: "VpcPeeringConnections[].Status.Code"
            }, {
                matcher: "error",
                expected: "InvalidVpcPeeringConnectionID.NotFound",
                state: "success"
            } ]
        }
    }
};

