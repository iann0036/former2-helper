AWS.apiLoader.services["servicecatalog"] = {};

AWS.ServiceCatalog = AWS.Service.defineService("servicecatalog", [ "2015-12-10" ]);

AWS.apiLoader.services["servicecatalog"]["2015-12-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-12-10",
        endpointPrefix: "servicecatalog",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Service Catalog",
        serviceId: "Service Catalog",
        signatureVersion: "v4",
        targetPrefix: "AWS242ServiceCatalogService",
        uid: "servicecatalog-2015-12-10"
    },
    operations: {
        AcceptPortfolioShare: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    PortfolioShareType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateBudgetWithResource: {
            input: {
                type: "structure",
                required: [ "BudgetName", "ResourceId" ],
                members: {
                    BudgetName: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociatePrincipalWithPortfolio: {
            input: {
                type: "structure",
                required: [ "PortfolioId", "PrincipalARN", "PrincipalType" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    PrincipalARN: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateProductWithPortfolio: {
            input: {
                type: "structure",
                required: [ "ProductId", "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    PortfolioId: {},
                    SourcePortfolioId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateServiceActionWithProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ProductId", "ProvisioningArtifactId", "ServiceActionId" ],
                members: {
                    ProductId: {},
                    ProvisioningArtifactId: {},
                    ServiceActionId: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateTagOptionWithResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagOptionId" ],
                members: {
                    ResourceId: {},
                    TagOptionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchAssociateServiceActionWithProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ServiceActionAssociations" ],
                members: {
                    ServiceActionAssociations: {
                        shape: "Sm"
                    },
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedServiceActionAssociations: {
                        shape: "Sp"
                    }
                }
            }
        },
        BatchDisassociateServiceActionFromProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ServiceActionAssociations" ],
                members: {
                    ServiceActionAssociations: {
                        shape: "Sm"
                    },
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedServiceActionAssociations: {
                        shape: "Sp"
                    }
                }
            }
        },
        CopyProduct: {
            input: {
                type: "structure",
                required: [ "SourceProductArn", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    SourceProductArn: {},
                    TargetProductId: {},
                    TargetProductName: {},
                    SourceProvisioningArtifactIdentifiers: {
                        type: "list",
                        member: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    },
                    CopyOptions: {
                        type: "list",
                        member: {}
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyProductToken: {}
                }
            }
        },
        CreateConstraint: {
            input: {
                type: "structure",
                required: [ "PortfolioId", "ProductId", "Parameters", "Type", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    ProductId: {},
                    Parameters: {},
                    Type: {},
                    Description: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConstraintDetail: {
                        shape: "S1b"
                    },
                    ConstraintParameters: {},
                    Status: {}
                }
            }
        },
        CreatePortfolio: {
            input: {
                type: "structure",
                required: [ "DisplayName", "ProviderName", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    DisplayName: {},
                    Description: {},
                    ProviderName: {},
                    Tags: {
                        shape: "S1i"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioDetail: {
                        shape: "S1n"
                    },
                    Tags: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreatePortfolioShare: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    AccountId: {},
                    OrganizationNode: {
                        shape: "S1s"
                    },
                    ShareTagOptions: {
                        type: "boolean"
                    },
                    SharePrincipals: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioShareToken: {}
                }
            }
        },
        CreateProduct: {
            input: {
                type: "structure",
                required: [ "Name", "Owner", "ProductType", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    Name: {},
                    Owner: {},
                    Description: {},
                    Distributor: {},
                    SupportDescription: {},
                    SupportEmail: {},
                    SupportUrl: {},
                    ProductType: {},
                    Tags: {
                        shape: "S1i"
                    },
                    ProvisioningArtifactParameters: {
                        shape: "S24"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    SourceConnection: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewDetail: {
                        shape: "S2l"
                    },
                    ProvisioningArtifactDetail: {
                        shape: "S2w"
                    },
                    Tags: {
                        shape: "S1q"
                    }
                }
            }
        },
        CreateProvisionedProductPlan: {
            input: {
                type: "structure",
                required: [ "PlanName", "PlanType", "ProductId", "ProvisionedProductName", "ProvisioningArtifactId", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    PlanName: {},
                    PlanType: {},
                    NotificationArns: {
                        shape: "S33"
                    },
                    PathId: {},
                    ProductId: {},
                    ProvisionedProductName: {},
                    ProvisioningArtifactId: {},
                    ProvisioningParameters: {
                        shape: "S36"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S1q"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PlanName: {},
                    PlanId: {},
                    ProvisionProductId: {},
                    ProvisionedProductName: {},
                    ProvisioningArtifactId: {}
                }
            }
        },
        CreateProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ProductId", "Parameters", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    Parameters: {
                        shape: "S24"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisioningArtifactDetail: {
                        shape: "S2w"
                    },
                    Info: {
                        shape: "S27"
                    },
                    Status: {}
                }
            }
        },
        CreateServiceAction: {
            input: {
                type: "structure",
                required: [ "Name", "DefinitionType", "Definition", "IdempotencyToken" ],
                members: {
                    Name: {},
                    DefinitionType: {},
                    Definition: {
                        shape: "S3h"
                    },
                    Description: {},
                    AcceptLanguage: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceActionDetail: {
                        shape: "S3m"
                    }
                }
            }
        },
        CreateTagOption: {
            input: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagOptionDetail: {
                        shape: "S3s"
                    }
                }
            }
        },
        DeleteConstraint: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePortfolio: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePortfolioShare: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    AccountId: {},
                    OrganizationNode: {
                        shape: "S1s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioShareToken: {}
                }
            }
        },
        DeleteProduct: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProvisionedProductPlan: {
            input: {
                type: "structure",
                required: [ "PlanId" ],
                members: {
                    AcceptLanguage: {},
                    PlanId: {},
                    IgnoreErrors: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ProductId", "ProvisioningArtifactId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    ProvisioningArtifactId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServiceAction: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTagOption: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeConstraint: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConstraintDetail: {
                        shape: "S1b"
                    },
                    ConstraintParameters: {},
                    Status: {}
                }
            }
        },
        DescribeCopyProductStatus: {
            input: {
                type: "structure",
                required: [ "CopyProductToken" ],
                members: {
                    AcceptLanguage: {},
                    CopyProductToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CopyProductStatus: {},
                    TargetProductId: {},
                    StatusDetail: {}
                }
            }
        },
        DescribePortfolio: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioDetail: {
                        shape: "S1n"
                    },
                    Tags: {
                        shape: "S1q"
                    },
                    TagOptions: {
                        shape: "S4k"
                    },
                    Budgets: {
                        shape: "S4l"
                    }
                }
            }
        },
        DescribePortfolioShareStatus: {
            input: {
                type: "structure",
                required: [ "PortfolioShareToken" ],
                members: {
                    PortfolioShareToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioShareToken: {},
                    PortfolioId: {},
                    OrganizationNodeValue: {},
                    Status: {},
                    ShareDetails: {
                        type: "structure",
                        members: {
                            SuccessfulShares: {
                                type: "list",
                                member: {}
                            },
                            ShareErrors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Accounts: {
                                            type: "list",
                                            member: {}
                                        },
                                        Message: {},
                                        Error: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribePortfolioShares: {
            input: {
                type: "structure",
                required: [ "PortfolioId", "Type" ],
                members: {
                    PortfolioId: {},
                    Type: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPageToken: {},
                    PortfolioShareDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PrincipalId: {},
                                Type: {},
                                Accepted: {
                                    type: "boolean"
                                },
                                ShareTagOptions: {
                                    type: "boolean"
                                },
                                SharePrincipals: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeProduct: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewSummary: {
                        shape: "S2m"
                    },
                    ProvisioningArtifacts: {
                        shape: "S56"
                    },
                    Budgets: {
                        shape: "S4l"
                    },
                    LaunchPaths: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeProductAsAdmin: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    Name: {},
                    SourcePortfolioId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewDetail: {
                        shape: "S2l"
                    },
                    ProvisioningArtifactSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Name: {},
                                Description: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                ProvisioningArtifactMetadata: {
                                    shape: "S27"
                                }
                            }
                        }
                    },
                    Tags: {
                        shape: "S1q"
                    },
                    TagOptions: {
                        shape: "S4k"
                    },
                    Budgets: {
                        shape: "S4l"
                    }
                }
            }
        },
        DescribeProductView: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewSummary: {
                        shape: "S2m"
                    },
                    ProvisioningArtifacts: {
                        shape: "S56"
                    }
                }
            }
        },
        DescribeProvisionedProduct: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedProductDetail: {
                        shape: "S5k"
                    },
                    CloudWatchDashboards: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeProvisionedProductPlan: {
            input: {
                type: "structure",
                required: [ "PlanId" ],
                members: {
                    AcceptLanguage: {},
                    PlanId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedProductPlanDetails: {
                        type: "structure",
                        members: {
                            CreatedTime: {
                                type: "timestamp"
                            },
                            PathId: {},
                            ProductId: {},
                            PlanName: {},
                            PlanId: {},
                            ProvisionProductId: {},
                            ProvisionProductName: {},
                            PlanType: {},
                            ProvisioningArtifactId: {},
                            Status: {},
                            UpdatedTime: {
                                type: "timestamp"
                            },
                            NotificationArns: {
                                shape: "S33"
                            },
                            ProvisioningParameters: {
                                shape: "S36"
                            },
                            Tags: {
                                shape: "S1q"
                            },
                            StatusMessage: {}
                        }
                    },
                    ResourceChanges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Action: {},
                                LogicalResourceId: {},
                                PhysicalResourceId: {},
                                ResourceType: {},
                                Replacement: {},
                                Scope: {
                                    type: "list",
                                    member: {}
                                },
                                Details: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Target: {
                                                type: "structure",
                                                members: {
                                                    Attribute: {},
                                                    Name: {},
                                                    RequiresRecreation: {}
                                                }
                                            },
                                            Evaluation: {},
                                            CausingEntity: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        DescribeProvisioningArtifact: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    ProvisioningArtifactId: {},
                    ProductId: {},
                    ProvisioningArtifactName: {},
                    ProductName: {},
                    Verbose: {
                        type: "boolean"
                    },
                    IncludeProvisioningArtifactParameters: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisioningArtifactDetail: {
                        shape: "S2w"
                    },
                    Info: {
                        shape: "S27"
                    },
                    Status: {},
                    ProvisioningArtifactParameters: {
                        shape: "S6l"
                    }
                }
            }
        },
        DescribeProvisioningParameters: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    ProductName: {},
                    ProvisioningArtifactId: {},
                    ProvisioningArtifactName: {},
                    PathId: {},
                    PathName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisioningArtifactParameters: {
                        shape: "S6l"
                    },
                    ConstraintSummaries: {
                        shape: "S6w"
                    },
                    UsageInstructions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                Value: {}
                            }
                        }
                    },
                    TagOptions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    ProvisioningArtifactPreferences: {
                        type: "structure",
                        members: {
                            StackSetAccounts: {
                                shape: "S76"
                            },
                            StackSetRegions: {
                                shape: "S77"
                            }
                        }
                    },
                    ProvisioningArtifactOutputs: {
                        shape: "S79",
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated and returns the Id and Description of the Provisioning Artifact. Use ProvisioningArtifactOutputKeys instead to get the Keys and Descriptions of the outputs."
                    },
                    ProvisioningArtifactOutputKeys: {
                        shape: "S79"
                    }
                }
            }
        },
        DescribeRecord: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    },
                    RecordOutputs: {
                        shape: "S7q"
                    },
                    NextPageToken: {}
                }
            }
        },
        DescribeServiceAction: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceActionDetail: {
                        shape: "S3m"
                    }
                }
            }
        },
        DescribeServiceActionExecutionParameters: {
            input: {
                type: "structure",
                required: [ "ProvisionedProductId", "ServiceActionId" ],
                members: {
                    ProvisionedProductId: {},
                    ServiceActionId: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceActionParameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {},
                                DefaultValues: {
                                    shape: "S82"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTagOption: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagOptionDetail: {
                        shape: "S3s"
                    }
                }
            }
        },
        DisableAWSOrganizationsAccess: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateBudgetFromResource: {
            input: {
                type: "structure",
                required: [ "BudgetName", "ResourceId" ],
                members: {
                    BudgetName: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociatePrincipalFromPortfolio: {
            input: {
                type: "structure",
                required: [ "PortfolioId", "PrincipalARN" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    PrincipalARN: {},
                    PrincipalType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateProductFromPortfolio: {
            input: {
                type: "structure",
                required: [ "ProductId", "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    PortfolioId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateServiceActionFromProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ProductId", "ProvisioningArtifactId", "ServiceActionId" ],
                members: {
                    ProductId: {},
                    ProvisioningArtifactId: {},
                    ServiceActionId: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateTagOptionFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagOptionId" ],
                members: {
                    ResourceId: {},
                    TagOptionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableAWSOrganizationsAccess: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ExecuteProvisionedProductPlan: {
            input: {
                type: "structure",
                required: [ "PlanId", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    PlanId: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    }
                }
            }
        },
        ExecuteProvisionedProductServiceAction: {
            input: {
                type: "structure",
                required: [ "ProvisionedProductId", "ServiceActionId", "ExecuteToken" ],
                members: {
                    ProvisionedProductId: {},
                    ServiceActionId: {},
                    ExecuteToken: {
                        idempotencyToken: true
                    },
                    AcceptLanguage: {},
                    Parameters: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S82"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    }
                }
            }
        },
        GetAWSOrganizationsAccessStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AccessStatus: {}
                }
            }
        },
        GetProvisionedProductOutputs: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    ProvisionedProductId: {},
                    ProvisionedProductName: {},
                    OutputKeys: {
                        type: "list",
                        member: {}
                    },
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Outputs: {
                        shape: "S7q"
                    },
                    NextPageToken: {}
                }
            }
        },
        ImportAsProvisionedProduct: {
            input: {
                type: "structure",
                required: [ "ProductId", "ProvisioningArtifactId", "ProvisionedProductName", "PhysicalId", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    ProvisioningArtifactId: {},
                    ProvisionedProductName: {},
                    PhysicalId: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    }
                }
            }
        },
        ListAcceptedPortfolioShares: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    },
                    PortfolioShareType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioDetails: {
                        shape: "S90"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListBudgetsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AcceptLanguage: {},
                    ResourceId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Budgets: {
                        shape: "S4l"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListConstraintsForPortfolio: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    ProductId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConstraintDetails: {
                        type: "list",
                        member: {
                            shape: "S1b"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListLaunchPaths: {
            input: {
                type: "structure",
                required: [ "ProductId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LaunchPathSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ConstraintSummaries: {
                                    shape: "S6w"
                                },
                                Tags: {
                                    shape: "S1q"
                                },
                                Name: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListOrganizationPortfolioAccess: {
            input: {
                type: "structure",
                required: [ "PortfolioId", "OrganizationNodeType" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    OrganizationNodeType: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OrganizationNodes: {
                        type: "list",
                        member: {
                            shape: "S1s"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListPortfolioAccess: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    OrganizationParentId: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountIds: {
                        type: "list",
                        member: {}
                    },
                    NextPageToken: {}
                }
            }
        },
        ListPortfolios: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioDetails: {
                        shape: "S90"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListPortfoliosForProduct: {
            input: {
                type: "structure",
                required: [ "ProductId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioDetails: {
                        shape: "S90"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListPrincipalsForPortfolio: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PrincipalARN: {},
                                PrincipalType: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListProvisionedProductPlans: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    ProvisionProductId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {},
                    AccessLevelFilter: {
                        shape: "S9p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedProductPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PlanName: {},
                                PlanId: {},
                                ProvisionProductId: {},
                                ProvisionProductName: {},
                                PlanType: {},
                                ProvisioningArtifactId: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListProvisioningArtifacts: {
            input: {
                type: "structure",
                required: [ "ProductId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisioningArtifactDetails: {
                        type: "list",
                        member: {
                            shape: "S2w"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListProvisioningArtifactsForServiceAction: {
            input: {
                type: "structure",
                required: [ "ServiceActionId" ],
                members: {
                    ServiceActionId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisioningArtifactViews: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProductViewSummary: {
                                    shape: "S2m"
                                },
                                ProvisioningArtifact: {
                                    shape: "S57"
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListRecordHistory: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    AccessLevelFilter: {
                        shape: "S9p"
                    },
                    SearchFilter: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {}
                        }
                    },
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetails: {
                        type: "list",
                        member: {
                            shape: "S7f"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListResourcesForTagOption: {
            input: {
                type: "structure",
                required: [ "TagOptionId" ],
                members: {
                    TagOptionId: {},
                    ResourceType: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ARN: {},
                                Name: {},
                                Description: {},
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    PageToken: {}
                }
            }
        },
        ListServiceActions: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceActionSummaries: {
                        shape: "Sak"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListServiceActionsForProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ProductId", "ProvisioningArtifactId" ],
                members: {
                    ProductId: {},
                    ProvisioningArtifactId: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceActionSummaries: {
                        shape: "Sak"
                    },
                    NextPageToken: {}
                }
            }
        },
        ListStackInstancesForProvisionedProduct: {
            input: {
                type: "structure",
                required: [ "ProvisionedProductId" ],
                members: {
                    AcceptLanguage: {},
                    ProvisionedProductId: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StackInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Account: {},
                                Region: {},
                                StackInstanceStatus: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListTagOptions: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {},
                            Active: {
                                type: "boolean"
                            }
                        }
                    },
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagOptionDetails: {
                        shape: "S4k"
                    },
                    PageToken: {}
                }
            }
        },
        NotifyProvisionProductEngineWorkflowResult: {
            input: {
                type: "structure",
                required: [ "WorkflowToken", "RecordId", "Status", "IdempotencyToken" ],
                members: {
                    WorkflowToken: {},
                    RecordId: {},
                    Status: {},
                    FailureReason: {},
                    ResourceIdentifier: {
                        type: "structure",
                        members: {
                            UniqueTag: {
                                type: "structure",
                                members: {
                                    Key: {},
                                    Value: {}
                                }
                            }
                        }
                    },
                    Outputs: {
                        shape: "S7q"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        NotifyTerminateProvisionedProductEngineWorkflowResult: {
            input: {
                type: "structure",
                required: [ "WorkflowToken", "RecordId", "Status", "IdempotencyToken" ],
                members: {
                    WorkflowToken: {},
                    RecordId: {},
                    Status: {},
                    FailureReason: {},
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        NotifyUpdateProvisionedProductEngineWorkflowResult: {
            input: {
                type: "structure",
                required: [ "WorkflowToken", "RecordId", "Status", "IdempotencyToken" ],
                members: {
                    WorkflowToken: {},
                    RecordId: {},
                    Status: {},
                    FailureReason: {},
                    Outputs: {
                        shape: "S7q"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ProvisionProduct: {
            input: {
                type: "structure",
                required: [ "ProvisionedProductName", "ProvisionToken" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    ProductName: {},
                    ProvisioningArtifactId: {},
                    ProvisioningArtifactName: {},
                    PathId: {},
                    PathName: {},
                    ProvisionedProductName: {},
                    ProvisioningParameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    },
                    ProvisioningPreferences: {
                        type: "structure",
                        members: {
                            StackSetAccounts: {
                                shape: "S76"
                            },
                            StackSetRegions: {
                                shape: "S77"
                            },
                            StackSetFailureToleranceCount: {
                                type: "integer"
                            },
                            StackSetFailureTolerancePercentage: {
                                type: "integer"
                            },
                            StackSetMaxConcurrencyCount: {
                                type: "integer"
                            },
                            StackSetMaxConcurrencyPercentage: {
                                type: "integer"
                            }
                        }
                    },
                    Tags: {
                        shape: "S1q"
                    },
                    NotificationArns: {
                        shape: "S33"
                    },
                    ProvisionToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    }
                }
            }
        },
        RejectPortfolioShare: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    PortfolioShareType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ScanProvisionedProducts: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    AccessLevelFilter: {
                        shape: "S9p"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedProducts: {
                        type: "list",
                        member: {
                            shape: "S5k"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        SearchProducts: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    Filters: {
                        shape: "Sbn"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewSummaries: {
                        type: "list",
                        member: {
                            shape: "S2m"
                        }
                    },
                    ProductViewAggregations: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Value: {},
                                    ApproximateCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        SearchProductsAsAdmin: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    Filters: {
                        shape: "Sbn"
                    },
                    SortBy: {},
                    SortOrder: {},
                    PageToken: {},
                    PageSize: {
                        type: "integer"
                    },
                    ProductSource: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewDetails: {
                        type: "list",
                        member: {
                            shape: "S2l"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        SearchProvisionedProducts: {
            input: {
                type: "structure",
                members: {
                    AcceptLanguage: {},
                    AccessLevelFilter: {
                        shape: "S9p"
                    },
                    Filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    SortBy: {},
                    SortOrder: {},
                    PageSize: {
                        type: "integer"
                    },
                    PageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedProducts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Arn: {},
                                Type: {},
                                Id: {},
                                Status: {},
                                StatusMessage: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                IdempotencyToken: {},
                                LastRecordId: {},
                                LastProvisioningRecordId: {},
                                LastSuccessfulProvisioningRecordId: {},
                                Tags: {
                                    shape: "S1q"
                                },
                                PhysicalId: {},
                                ProductId: {},
                                ProductName: {},
                                ProvisioningArtifactId: {},
                                ProvisioningArtifactName: {},
                                UserArn: {},
                                UserArnSession: {}
                            }
                        }
                    },
                    TotalResultsCount: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            }
        },
        TerminateProvisionedProduct: {
            input: {
                type: "structure",
                required: [ "TerminateToken" ],
                members: {
                    ProvisionedProductName: {},
                    ProvisionedProductId: {},
                    TerminateToken: {
                        idempotencyToken: true
                    },
                    IgnoreErrors: {
                        type: "boolean"
                    },
                    AcceptLanguage: {},
                    RetainPhysicalResources: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    }
                }
            }
        },
        UpdateConstraint: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    Description: {},
                    Parameters: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConstraintDetail: {
                        shape: "S1b"
                    },
                    ConstraintParameters: {},
                    Status: {}
                }
            }
        },
        UpdatePortfolio: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    DisplayName: {},
                    Description: {},
                    ProviderName: {},
                    AddTags: {
                        shape: "S1i"
                    },
                    RemoveTags: {
                        shape: "Sco"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioDetail: {
                        shape: "S1n"
                    },
                    Tags: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdatePortfolioShare: {
            input: {
                type: "structure",
                required: [ "PortfolioId" ],
                members: {
                    AcceptLanguage: {},
                    PortfolioId: {},
                    AccountId: {},
                    OrganizationNode: {
                        shape: "S1s"
                    },
                    ShareTagOptions: {
                        type: "boolean"
                    },
                    SharePrincipals: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PortfolioShareToken: {},
                    Status: {}
                }
            }
        },
        UpdateProduct: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    AcceptLanguage: {},
                    Id: {},
                    Name: {},
                    Owner: {},
                    Description: {},
                    Distributor: {},
                    SupportDescription: {},
                    SupportEmail: {},
                    SupportUrl: {},
                    AddTags: {
                        shape: "S1i"
                    },
                    RemoveTags: {
                        shape: "Sco"
                    },
                    SourceConnection: {
                        shape: "S2c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProductViewDetail: {
                        shape: "S2l"
                    },
                    Tags: {
                        shape: "S1q"
                    }
                }
            }
        },
        UpdateProvisionedProduct: {
            input: {
                type: "structure",
                required: [ "UpdateToken" ],
                members: {
                    AcceptLanguage: {},
                    ProvisionedProductName: {},
                    ProvisionedProductId: {},
                    ProductId: {},
                    ProductName: {},
                    ProvisioningArtifactId: {},
                    ProvisioningArtifactName: {},
                    PathId: {},
                    PathName: {},
                    ProvisioningParameters: {
                        shape: "S36"
                    },
                    ProvisioningPreferences: {
                        type: "structure",
                        members: {
                            StackSetAccounts: {
                                shape: "S76"
                            },
                            StackSetRegions: {
                                shape: "S77"
                            },
                            StackSetFailureToleranceCount: {
                                type: "integer"
                            },
                            StackSetFailureTolerancePercentage: {
                                type: "integer"
                            },
                            StackSetMaxConcurrencyCount: {
                                type: "integer"
                            },
                            StackSetMaxConcurrencyPercentage: {
                                type: "integer"
                            },
                            StackSetOperationType: {}
                        }
                    },
                    Tags: {
                        shape: "S1q"
                    },
                    UpdateToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RecordDetail: {
                        shape: "S7f"
                    }
                }
            }
        },
        UpdateProvisionedProductProperties: {
            input: {
                type: "structure",
                required: [ "ProvisionedProductId", "ProvisionedProductProperties", "IdempotencyToken" ],
                members: {
                    AcceptLanguage: {},
                    ProvisionedProductId: {},
                    ProvisionedProductProperties: {
                        shape: "Sd0"
                    },
                    IdempotencyToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisionedProductId: {},
                    ProvisionedProductProperties: {
                        shape: "Sd0"
                    },
                    RecordId: {},
                    Status: {}
                }
            }
        },
        UpdateProvisioningArtifact: {
            input: {
                type: "structure",
                required: [ "ProductId", "ProvisioningArtifactId" ],
                members: {
                    AcceptLanguage: {},
                    ProductId: {},
                    ProvisioningArtifactId: {},
                    Name: {},
                    Description: {},
                    Active: {
                        type: "boolean"
                    },
                    Guidance: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProvisioningArtifactDetail: {
                        shape: "S2w"
                    },
                    Info: {
                        shape: "S27"
                    },
                    Status: {}
                }
            }
        },
        UpdateServiceAction: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Name: {},
                    Definition: {
                        shape: "S3h"
                    },
                    Description: {},
                    AcceptLanguage: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceActionDetail: {
                        shape: "S3m"
                    }
                }
            }
        },
        UpdateTagOption: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    Value: {},
                    Active: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TagOptionDetail: {
                        shape: "S3s"
                    }
                }
            }
        }
    },
    shapes: {
        Sm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ServiceActionId", "ProductId", "ProvisioningArtifactId" ],
                members: {
                    ServiceActionId: {},
                    ProductId: {},
                    ProvisioningArtifactId: {}
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ServiceActionId: {},
                    ProductId: {},
                    ProvisioningArtifactId: {},
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                ConstraintId: {},
                Type: {},
                Description: {},
                Owner: {},
                ProductId: {},
                PortfolioId: {}
            }
        },
        S1i: {
            type: "list",
            member: {
                shape: "S1j"
            }
        },
        S1j: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        S1n: {
            type: "structure",
            members: {
                Id: {},
                ARN: {},
                DisplayName: {},
                Description: {},
                CreatedTime: {
                    type: "timestamp"
                },
                ProviderName: {}
            }
        },
        S1q: {
            type: "list",
            member: {
                shape: "S1j"
            }
        },
        S1s: {
            type: "structure",
            members: {
                Type: {},
                Value: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                Info: {
                    shape: "S27"
                },
                Type: {},
                DisableTemplateValidation: {
                    type: "boolean"
                }
            }
        },
        S27: {
            type: "map",
            key: {},
            value: {}
        },
        S2c: {
            type: "structure",
            required: [ "ConnectionParameters" ],
            members: {
                Type: {},
                ConnectionParameters: {
                    shape: "S2e"
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                CodeStar: {
                    type: "structure",
                    required: [ "ConnectionArn", "Repository", "Branch", "ArtifactPath" ],
                    members: {
                        ConnectionArn: {},
                        Repository: {},
                        Branch: {},
                        ArtifactPath: {}
                    }
                }
            }
        },
        S2l: {
            type: "structure",
            members: {
                ProductViewSummary: {
                    shape: "S2m"
                },
                Status: {},
                ProductARN: {},
                CreatedTime: {
                    type: "timestamp"
                },
                SourceConnection: {
                    type: "structure",
                    members: {
                        Type: {},
                        ConnectionParameters: {
                            shape: "S2e"
                        },
                        LastSync: {
                            type: "structure",
                            members: {
                                LastSyncTime: {
                                    type: "timestamp"
                                },
                                LastSyncStatus: {},
                                LastSyncStatusMessage: {},
                                LastSuccessfulSyncTime: {
                                    type: "timestamp"
                                },
                                LastSuccessfulSyncProvisioningArtifactId: {}
                            }
                        }
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            members: {
                Id: {},
                ProductId: {},
                Name: {},
                Owner: {},
                ShortDescription: {},
                Type: {},
                Distributor: {},
                HasDefaultPath: {
                    type: "boolean"
                },
                SupportEmail: {},
                SupportDescription: {},
                SupportUrl: {}
            }
        },
        S2w: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                Type: {},
                CreatedTime: {
                    type: "timestamp"
                },
                Active: {
                    type: "boolean"
                },
                Guidance: {},
                SourceRevision: {}
            }
        },
        S33: {
            type: "list",
            member: {}
        },
        S36: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {},
                    UsePreviousValue: {
                        type: "boolean"
                    }
                }
            }
        },
        S3h: {
            type: "map",
            key: {},
            value: {}
        },
        S3m: {
            type: "structure",
            members: {
                ServiceActionSummary: {
                    shape: "S3n"
                },
                Definition: {
                    shape: "S3h"
                }
            }
        },
        S3n: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                DefinitionType: {}
            }
        },
        S3s: {
            type: "structure",
            members: {
                Key: {},
                Value: {},
                Active: {
                    type: "boolean"
                },
                Id: {},
                Owner: {}
            }
        },
        S4k: {
            type: "list",
            member: {
                shape: "S3s"
            }
        },
        S4l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    BudgetName: {}
                }
            }
        },
        S56: {
            type: "list",
            member: {
                shape: "S57"
            }
        },
        S57: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                Description: {},
                CreatedTime: {
                    type: "timestamp"
                },
                Guidance: {}
            }
        },
        S5k: {
            type: "structure",
            members: {
                Name: {},
                Arn: {},
                Type: {},
                Id: {},
                Status: {},
                StatusMessage: {},
                CreatedTime: {
                    type: "timestamp"
                },
                IdempotencyToken: {},
                LastRecordId: {},
                LastProvisioningRecordId: {},
                LastSuccessfulProvisioningRecordId: {},
                ProductId: {},
                ProvisioningArtifactId: {},
                LaunchRoleArn: {}
            }
        },
        S6l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ParameterKey: {},
                    DefaultValue: {},
                    ParameterType: {},
                    IsNoEcho: {
                        type: "boolean"
                    },
                    Description: {},
                    ParameterConstraints: {
                        type: "structure",
                        members: {
                            AllowedValues: {
                                type: "list",
                                member: {}
                            },
                            AllowedPattern: {},
                            ConstraintDescription: {},
                            MaxLength: {},
                            MinLength: {},
                            MaxValue: {},
                            MinValue: {}
                        }
                    }
                }
            }
        },
        S6w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Description: {}
                }
            }
        },
        S76: {
            type: "list",
            member: {}
        },
        S77: {
            type: "list",
            member: {}
        },
        S79: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Description: {}
                }
            }
        },
        S7f: {
            type: "structure",
            members: {
                RecordId: {},
                ProvisionedProductName: {},
                Status: {},
                CreatedTime: {
                    type: "timestamp"
                },
                UpdatedTime: {
                    type: "timestamp"
                },
                ProvisionedProductType: {},
                RecordType: {},
                ProvisionedProductId: {},
                ProductId: {},
                ProvisioningArtifactId: {},
                PathId: {},
                RecordErrors: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Code: {},
                            Description: {}
                        }
                    }
                },
                RecordTags: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                },
                LaunchRoleArn: {}
            }
        },
        S7q: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    OutputKey: {},
                    OutputValue: {},
                    Description: {}
                }
            }
        },
        S82: {
            type: "list",
            member: {}
        },
        S90: {
            type: "list",
            member: {
                shape: "S1n"
            }
        },
        S9p: {
            type: "structure",
            members: {
                Key: {},
                Value: {}
            }
        },
        Sak: {
            type: "list",
            member: {
                shape: "S3n"
            }
        },
        Sbn: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        Sco: {
            type: "list",
            member: {}
        },
        Sd0: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribePortfolioShares: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        GetProvisionedProductOutputs: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListAcceptedPortfolioShares: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListBudgetsForResource: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListConstraintsForPortfolio: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListLaunchPaths: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListOrganizationPortfolioAccess: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListPortfolioAccess: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListPortfolios: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListPortfoliosForProduct: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListPrincipalsForPortfolio: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListProvisioningArtifactsForServiceAction: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListResourcesForTagOption: {
            input_token: "PageToken",
            output_token: "PageToken",
            limit_key: "PageSize"
        },
        ListServiceActions: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListServiceActionsForProvisioningArtifact: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        ListTagOptions: {
            input_token: "PageToken",
            output_token: "PageToken",
            limit_key: "PageSize"
        },
        SearchProducts: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        SearchProductsAsAdmin: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        },
        SearchProvisionedProducts: {
            input_token: "PageToken",
            output_token: "NextPageToken",
            limit_key: "PageSize"
        }
    }
};

AWS.apiLoader.services["ses"] = {};

AWS.SES = AWS.Service.defineService("ses", [ "2010-12-01" ]);

AWS.apiLoader.services["ses"]["2010-12-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2010-12-01",
        endpointPrefix: "email",
        protocol: "query",
        serviceAbbreviation: "Amazon SES",
        serviceFullName: "Amazon Simple Email Service",
        serviceId: "SES",
        signatureVersion: "v4",
        signingName: "ses",
        uid: "email-2010-12-01",
        xmlNamespace: "http://ses.amazonaws.com/doc/2010-12-01/"
    },
    operations: {
        CloneReceiptRuleSet: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "OriginalRuleSetName" ],
                members: {
                    RuleSetName: {},
                    OriginalRuleSetName: {}
                }
            },
            output: {
                resultWrapper: "CloneReceiptRuleSetResult",
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSet" ],
                members: {
                    ConfigurationSet: {
                        shape: "S5"
                    }
                }
            },
            output: {
                resultWrapper: "CreateConfigurationSetResult",
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "CreateConfigurationSetEventDestinationResult",
                type: "structure",
                members: {}
            }
        },
        CreateConfigurationSetTrackingOptions: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "TrackingOptions" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                resultWrapper: "CreateConfigurationSetTrackingOptionsResult",
                type: "structure",
                members: {}
            }
        },
        CreateCustomVerificationEmailTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName", "FromEmailAddress", "TemplateSubject", "TemplateContent", "SuccessRedirectionURL", "FailureRedirectionURL" ],
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            }
        },
        CreateReceiptFilter: {
            input: {
                type: "structure",
                required: [ "Filter" ],
                members: {
                    Filter: {
                        shape: "S10"
                    }
                }
            },
            output: {
                resultWrapper: "CreateReceiptFilterResult",
                type: "structure",
                members: {}
            }
        },
        CreateReceiptRule: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "Rule" ],
                members: {
                    RuleSetName: {},
                    After: {},
                    Rule: {
                        shape: "S18"
                    }
                }
            },
            output: {
                resultWrapper: "CreateReceiptRuleResult",
                type: "structure",
                members: {}
            }
        },
        CreateReceiptRuleSet: {
            input: {
                type: "structure",
                required: [ "RuleSetName" ],
                members: {
                    RuleSetName: {}
                }
            },
            output: {
                resultWrapper: "CreateReceiptRuleSetResult",
                type: "structure",
                members: {}
            }
        },
        CreateTemplate: {
            input: {
                type: "structure",
                required: [ "Template" ],
                members: {
                    Template: {
                        shape: "S20"
                    }
                }
            },
            output: {
                resultWrapper: "CreateTemplateResult",
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                resultWrapper: "DeleteConfigurationSetResult",
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {}
                }
            },
            output: {
                resultWrapper: "DeleteConfigurationSetEventDestinationResult",
                type: "structure",
                members: {}
            }
        },
        DeleteConfigurationSetTrackingOptions: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                resultWrapper: "DeleteConfigurationSetTrackingOptionsResult",
                type: "structure",
                members: {}
            }
        },
        DeleteCustomVerificationEmailTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {}
                }
            }
        },
        DeleteIdentity: {
            input: {
                type: "structure",
                required: [ "Identity" ],
                members: {
                    Identity: {}
                }
            },
            output: {
                resultWrapper: "DeleteIdentityResult",
                type: "structure",
                members: {}
            }
        },
        DeleteIdentityPolicy: {
            input: {
                type: "structure",
                required: [ "Identity", "PolicyName" ],
                members: {
                    Identity: {},
                    PolicyName: {}
                }
            },
            output: {
                resultWrapper: "DeleteIdentityPolicyResult",
                type: "structure",
                members: {}
            }
        },
        DeleteReceiptFilter: {
            input: {
                type: "structure",
                required: [ "FilterName" ],
                members: {
                    FilterName: {}
                }
            },
            output: {
                resultWrapper: "DeleteReceiptFilterResult",
                type: "structure",
                members: {}
            }
        },
        DeleteReceiptRule: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "RuleName" ],
                members: {
                    RuleSetName: {},
                    RuleName: {}
                }
            },
            output: {
                resultWrapper: "DeleteReceiptRuleResult",
                type: "structure",
                members: {}
            }
        },
        DeleteReceiptRuleSet: {
            input: {
                type: "structure",
                required: [ "RuleSetName" ],
                members: {
                    RuleSetName: {}
                }
            },
            output: {
                resultWrapper: "DeleteReceiptRuleSetResult",
                type: "structure",
                members: {}
            }
        },
        DeleteTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {}
                }
            },
            output: {
                resultWrapper: "DeleteTemplateResult",
                type: "structure",
                members: {}
            }
        },
        DeleteVerifiedEmailAddress: {
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {}
                }
            }
        },
        DescribeActiveReceiptRuleSet: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "DescribeActiveReceiptRuleSetResult",
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S2t"
                    },
                    Rules: {
                        shape: "S2v"
                    }
                }
            }
        },
        DescribeConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    ConfigurationSetAttributeNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "DescribeConfigurationSetResult",
                type: "structure",
                members: {
                    ConfigurationSet: {
                        shape: "S5"
                    },
                    EventDestinations: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    },
                    TrackingOptions: {
                        shape: "Sp"
                    },
                    DeliveryOptions: {
                        shape: "S31"
                    },
                    ReputationOptions: {
                        type: "structure",
                        members: {
                            SendingEnabled: {
                                type: "boolean"
                            },
                            ReputationMetricsEnabled: {
                                type: "boolean"
                            },
                            LastFreshStart: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        DescribeReceiptRule: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "RuleName" ],
                members: {
                    RuleSetName: {},
                    RuleName: {}
                }
            },
            output: {
                resultWrapper: "DescribeReceiptRuleResult",
                type: "structure",
                members: {
                    Rule: {
                        shape: "S18"
                    }
                }
            }
        },
        DescribeReceiptRuleSet: {
            input: {
                type: "structure",
                required: [ "RuleSetName" ],
                members: {
                    RuleSetName: {}
                }
            },
            output: {
                resultWrapper: "DescribeReceiptRuleSetResult",
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S2t"
                    },
                    Rules: {
                        shape: "S2v"
                    }
                }
            }
        },
        GetAccountSendingEnabled: {
            output: {
                resultWrapper: "GetAccountSendingEnabledResult",
                type: "structure",
                members: {
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        GetCustomVerificationEmailTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {}
                }
            },
            output: {
                resultWrapper: "GetCustomVerificationEmailTemplateResult",
                type: "structure",
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            }
        },
        GetIdentityDkimAttributes: {
            input: {
                type: "structure",
                required: [ "Identities" ],
                members: {
                    Identities: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                resultWrapper: "GetIdentityDkimAttributesResult",
                type: "structure",
                required: [ "DkimAttributes" ],
                members: {
                    DkimAttributes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "DkimEnabled", "DkimVerificationStatus" ],
                            members: {
                                DkimEnabled: {
                                    type: "boolean"
                                },
                                DkimVerificationStatus: {},
                                DkimTokens: {
                                    shape: "S3h"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetIdentityMailFromDomainAttributes: {
            input: {
                type: "structure",
                required: [ "Identities" ],
                members: {
                    Identities: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                resultWrapper: "GetIdentityMailFromDomainAttributesResult",
                type: "structure",
                required: [ "MailFromDomainAttributes" ],
                members: {
                    MailFromDomainAttributes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "MailFromDomain", "MailFromDomainStatus", "BehaviorOnMXFailure" ],
                            members: {
                                MailFromDomain: {},
                                MailFromDomainStatus: {},
                                BehaviorOnMXFailure: {}
                            }
                        }
                    }
                }
            }
        },
        GetIdentityNotificationAttributes: {
            input: {
                type: "structure",
                required: [ "Identities" ],
                members: {
                    Identities: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                resultWrapper: "GetIdentityNotificationAttributesResult",
                type: "structure",
                required: [ "NotificationAttributes" ],
                members: {
                    NotificationAttributes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "BounceTopic", "ComplaintTopic", "DeliveryTopic", "ForwardingEnabled" ],
                            members: {
                                BounceTopic: {},
                                ComplaintTopic: {},
                                DeliveryTopic: {},
                                ForwardingEnabled: {
                                    type: "boolean"
                                },
                                HeadersInBounceNotificationsEnabled: {
                                    type: "boolean"
                                },
                                HeadersInComplaintNotificationsEnabled: {
                                    type: "boolean"
                                },
                                HeadersInDeliveryNotificationsEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetIdentityPolicies: {
            input: {
                type: "structure",
                required: [ "Identity", "PolicyNames" ],
                members: {
                    Identity: {},
                    PolicyNames: {
                        shape: "S3w"
                    }
                }
            },
            output: {
                resultWrapper: "GetIdentityPoliciesResult",
                type: "structure",
                required: [ "Policies" ],
                members: {
                    Policies: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        GetIdentityVerificationAttributes: {
            input: {
                type: "structure",
                required: [ "Identities" ],
                members: {
                    Identities: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                resultWrapper: "GetIdentityVerificationAttributesResult",
                type: "structure",
                required: [ "VerificationAttributes" ],
                members: {
                    VerificationAttributes: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "VerificationStatus" ],
                            members: {
                                VerificationStatus: {},
                                VerificationToken: {}
                            }
                        }
                    }
                }
            }
        },
        GetSendQuota: {
            output: {
                resultWrapper: "GetSendQuotaResult",
                type: "structure",
                members: {
                    Max24HourSend: {
                        type: "double"
                    },
                    MaxSendRate: {
                        type: "double"
                    },
                    SentLast24Hours: {
                        type: "double"
                    }
                }
            }
        },
        GetSendStatistics: {
            output: {
                resultWrapper: "GetSendStatisticsResult",
                type: "structure",
                members: {
                    SendDataPoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                DeliveryAttempts: {
                                    type: "long"
                                },
                                Bounces: {
                                    type: "long"
                                },
                                Complaints: {
                                    type: "long"
                                },
                                Rejects: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {}
                }
            },
            output: {
                resultWrapper: "GetTemplateResult",
                type: "structure",
                members: {
                    Template: {
                        shape: "S20"
                    }
                }
            }
        },
        ListConfigurationSets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListConfigurationSetsResult",
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomVerificationEmailTemplates: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListCustomVerificationEmailTemplatesResult",
                type: "structure",
                members: {
                    CustomVerificationEmailTemplates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TemplateName: {},
                                FromEmailAddress: {},
                                TemplateSubject: {},
                                SuccessRedirectionURL: {},
                                FailureRedirectionURL: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListIdentities: {
            input: {
                type: "structure",
                members: {
                    IdentityType: {},
                    NextToken: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListIdentitiesResult",
                type: "structure",
                required: [ "Identities" ],
                members: {
                    Identities: {
                        shape: "S3c"
                    },
                    NextToken: {}
                }
            }
        },
        ListIdentityPolicies: {
            input: {
                type: "structure",
                required: [ "Identity" ],
                members: {
                    Identity: {}
                }
            },
            output: {
                resultWrapper: "ListIdentityPoliciesResult",
                type: "structure",
                required: [ "PolicyNames" ],
                members: {
                    PolicyNames: {
                        shape: "S3w"
                    }
                }
            }
        },
        ListReceiptFilters: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "ListReceiptFiltersResult",
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            shape: "S10"
                        }
                    }
                }
            }
        },
        ListReceiptRuleSets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListReceiptRuleSetsResult",
                type: "structure",
                members: {
                    RuleSets: {
                        type: "list",
                        member: {
                            shape: "S2t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTemplates: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxItems: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListTemplatesResult",
                type: "structure",
                members: {
                    TemplatesMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListVerifiedEmailAddresses: {
            output: {
                resultWrapper: "ListVerifiedEmailAddressesResult",
                type: "structure",
                members: {
                    VerifiedEmailAddresses: {
                        shape: "S54"
                    }
                }
            }
        },
        PutConfigurationSetDeliveryOptions: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    DeliveryOptions: {
                        shape: "S31"
                    }
                }
            },
            output: {
                resultWrapper: "PutConfigurationSetDeliveryOptionsResult",
                type: "structure",
                members: {}
            }
        },
        PutIdentityPolicy: {
            input: {
                type: "structure",
                required: [ "Identity", "PolicyName", "Policy" ],
                members: {
                    Identity: {},
                    PolicyName: {},
                    Policy: {}
                }
            },
            output: {
                resultWrapper: "PutIdentityPolicyResult",
                type: "structure",
                members: {}
            }
        },
        ReorderReceiptRuleSet: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "RuleNames" ],
                members: {
                    RuleSetName: {},
                    RuleNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "ReorderReceiptRuleSetResult",
                type: "structure",
                members: {}
            }
        },
        SendBounce: {
            input: {
                type: "structure",
                required: [ "OriginalMessageId", "BounceSender", "BouncedRecipientInfoList" ],
                members: {
                    OriginalMessageId: {},
                    BounceSender: {},
                    Explanation: {},
                    MessageDsn: {
                        type: "structure",
                        required: [ "ReportingMta" ],
                        members: {
                            ReportingMta: {},
                            ArrivalDate: {
                                type: "timestamp"
                            },
                            ExtensionFields: {
                                shape: "S5i"
                            }
                        }
                    },
                    BouncedRecipientInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Recipient" ],
                            members: {
                                Recipient: {},
                                RecipientArn: {},
                                BounceType: {},
                                RecipientDsnFields: {
                                    type: "structure",
                                    required: [ "Action", "Status" ],
                                    members: {
                                        FinalRecipient: {},
                                        Action: {},
                                        RemoteMta: {},
                                        Status: {},
                                        DiagnosticCode: {},
                                        LastAttemptDate: {
                                            type: "timestamp"
                                        },
                                        ExtensionFields: {
                                            shape: "S5i"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    BounceSenderArn: {}
                }
            },
            output: {
                resultWrapper: "SendBounceResult",
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendBulkTemplatedEmail: {
            input: {
                type: "structure",
                required: [ "Source", "Template", "Destinations" ],
                members: {
                    Source: {},
                    SourceArn: {},
                    ReplyToAddresses: {
                        shape: "S54"
                    },
                    ReturnPath: {},
                    ReturnPathArn: {},
                    ConfigurationSetName: {},
                    DefaultTags: {
                        shape: "S5x"
                    },
                    Template: {},
                    TemplateArn: {},
                    DefaultTemplateData: {},
                    Destinations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Destination" ],
                            members: {
                                Destination: {
                                    shape: "S64"
                                },
                                ReplacementTags: {
                                    shape: "S5x"
                                },
                                ReplacementTemplateData: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "SendBulkTemplatedEmailResult",
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Status: {},
                                Error: {},
                                MessageId: {}
                            }
                        }
                    }
                }
            }
        },
        SendCustomVerificationEmail: {
            input: {
                type: "structure",
                required: [ "EmailAddress", "TemplateName" ],
                members: {
                    EmailAddress: {},
                    TemplateName: {},
                    ConfigurationSetName: {}
                }
            },
            output: {
                resultWrapper: "SendCustomVerificationEmailResult",
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendEmail: {
            input: {
                type: "structure",
                required: [ "Source", "Destination", "Message" ],
                members: {
                    Source: {},
                    Destination: {
                        shape: "S64"
                    },
                    Message: {
                        type: "structure",
                        required: [ "Subject", "Body" ],
                        members: {
                            Subject: {
                                shape: "S6e"
                            },
                            Body: {
                                type: "structure",
                                members: {
                                    Text: {
                                        shape: "S6e"
                                    },
                                    Html: {
                                        shape: "S6e"
                                    }
                                }
                            }
                        }
                    },
                    ReplyToAddresses: {
                        shape: "S54"
                    },
                    ReturnPath: {},
                    SourceArn: {},
                    ReturnPathArn: {},
                    Tags: {
                        shape: "S5x"
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                resultWrapper: "SendEmailResult",
                type: "structure",
                required: [ "MessageId" ],
                members: {
                    MessageId: {}
                }
            }
        },
        SendRawEmail: {
            input: {
                type: "structure",
                required: [ "RawMessage" ],
                members: {
                    Source: {},
                    Destinations: {
                        shape: "S54"
                    },
                    RawMessage: {
                        type: "structure",
                        required: [ "Data" ],
                        members: {
                            Data: {
                                type: "blob"
                            }
                        }
                    },
                    FromArn: {},
                    SourceArn: {},
                    ReturnPathArn: {},
                    Tags: {
                        shape: "S5x"
                    },
                    ConfigurationSetName: {}
                }
            },
            output: {
                resultWrapper: "SendRawEmailResult",
                type: "structure",
                required: [ "MessageId" ],
                members: {
                    MessageId: {}
                }
            }
        },
        SendTemplatedEmail: {
            input: {
                type: "structure",
                required: [ "Source", "Destination", "Template", "TemplateData" ],
                members: {
                    Source: {},
                    Destination: {
                        shape: "S64"
                    },
                    ReplyToAddresses: {
                        shape: "S54"
                    },
                    ReturnPath: {},
                    SourceArn: {},
                    ReturnPathArn: {},
                    Tags: {
                        shape: "S5x"
                    },
                    ConfigurationSetName: {},
                    Template: {},
                    TemplateArn: {},
                    TemplateData: {}
                }
            },
            output: {
                resultWrapper: "SendTemplatedEmailResult",
                type: "structure",
                required: [ "MessageId" ],
                members: {
                    MessageId: {}
                }
            }
        },
        SetActiveReceiptRuleSet: {
            input: {
                type: "structure",
                members: {
                    RuleSetName: {}
                }
            },
            output: {
                resultWrapper: "SetActiveReceiptRuleSetResult",
                type: "structure",
                members: {}
            }
        },
        SetIdentityDkimEnabled: {
            input: {
                type: "structure",
                required: [ "Identity", "DkimEnabled" ],
                members: {
                    Identity: {},
                    DkimEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "SetIdentityDkimEnabledResult",
                type: "structure",
                members: {}
            }
        },
        SetIdentityFeedbackForwardingEnabled: {
            input: {
                type: "structure",
                required: [ "Identity", "ForwardingEnabled" ],
                members: {
                    Identity: {},
                    ForwardingEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "SetIdentityFeedbackForwardingEnabledResult",
                type: "structure",
                members: {}
            }
        },
        SetIdentityHeadersInNotificationsEnabled: {
            input: {
                type: "structure",
                required: [ "Identity", "NotificationType", "Enabled" ],
                members: {
                    Identity: {},
                    NotificationType: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "SetIdentityHeadersInNotificationsEnabledResult",
                type: "structure",
                members: {}
            }
        },
        SetIdentityMailFromDomain: {
            input: {
                type: "structure",
                required: [ "Identity" ],
                members: {
                    Identity: {},
                    MailFromDomain: {},
                    BehaviorOnMXFailure: {}
                }
            },
            output: {
                resultWrapper: "SetIdentityMailFromDomainResult",
                type: "structure",
                members: {}
            }
        },
        SetIdentityNotificationTopic: {
            input: {
                type: "structure",
                required: [ "Identity", "NotificationType" ],
                members: {
                    Identity: {},
                    NotificationType: {},
                    SnsTopic: {}
                }
            },
            output: {
                resultWrapper: "SetIdentityNotificationTopicResult",
                type: "structure",
                members: {}
            }
        },
        SetReceiptRulePosition: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "RuleName" ],
                members: {
                    RuleSetName: {},
                    RuleName: {},
                    After: {}
                }
            },
            output: {
                resultWrapper: "SetReceiptRulePositionResult",
                type: "structure",
                members: {}
            }
        },
        TestRenderTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName", "TemplateData" ],
                members: {
                    TemplateName: {},
                    TemplateData: {}
                }
            },
            output: {
                resultWrapper: "TestRenderTemplateResult",
                type: "structure",
                members: {
                    RenderedTemplate: {}
                }
            }
        },
        UpdateAccountSendingEnabled: {
            input: {
                type: "structure",
                members: {
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateConfigurationSetEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestination" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "S9"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateConfigurationSetEventDestinationResult",
                type: "structure",
                members: {}
            }
        },
        UpdateConfigurationSetReputationMetricsEnabled: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "Enabled" ],
                members: {
                    ConfigurationSetName: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateConfigurationSetSendingEnabled: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "Enabled" ],
                members: {
                    ConfigurationSetName: {},
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateConfigurationSetTrackingOptions: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "TrackingOptions" ],
                members: {
                    ConfigurationSetName: {},
                    TrackingOptions: {
                        shape: "Sp"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateConfigurationSetTrackingOptionsResult",
                type: "structure",
                members: {}
            }
        },
        UpdateCustomVerificationEmailTemplate: {
            input: {
                type: "structure",
                required: [ "TemplateName" ],
                members: {
                    TemplateName: {},
                    FromEmailAddress: {},
                    TemplateSubject: {},
                    TemplateContent: {},
                    SuccessRedirectionURL: {},
                    FailureRedirectionURL: {}
                }
            }
        },
        UpdateReceiptRule: {
            input: {
                type: "structure",
                required: [ "RuleSetName", "Rule" ],
                members: {
                    RuleSetName: {},
                    Rule: {
                        shape: "S18"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateReceiptRuleResult",
                type: "structure",
                members: {}
            }
        },
        UpdateTemplate: {
            input: {
                type: "structure",
                required: [ "Template" ],
                members: {
                    Template: {
                        shape: "S20"
                    }
                }
            },
            output: {
                resultWrapper: "UpdateTemplateResult",
                type: "structure",
                members: {}
            }
        },
        VerifyDomainDkim: {
            input: {
                type: "structure",
                required: [ "Domain" ],
                members: {
                    Domain: {}
                }
            },
            output: {
                resultWrapper: "VerifyDomainDkimResult",
                type: "structure",
                required: [ "DkimTokens" ],
                members: {
                    DkimTokens: {
                        shape: "S3h"
                    }
                }
            }
        },
        VerifyDomainIdentity: {
            input: {
                type: "structure",
                required: [ "Domain" ],
                members: {
                    Domain: {}
                }
            },
            output: {
                resultWrapper: "VerifyDomainIdentityResult",
                type: "structure",
                required: [ "VerificationToken" ],
                members: {
                    VerificationToken: {}
                }
            }
        },
        VerifyEmailAddress: {
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {}
                }
            }
        },
        VerifyEmailIdentity: {
            input: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {}
                }
            },
            output: {
                resultWrapper: "VerifyEmailIdentityResult",
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "Name", "MatchingEventTypes" ],
            members: {
                Name: {},
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    type: "list",
                    member: {}
                },
                KinesisFirehoseDestination: {
                    type: "structure",
                    required: [ "IAMRoleARN", "DeliveryStreamARN" ],
                    members: {
                        IAMRoleARN: {},
                        DeliveryStreamARN: {}
                    }
                },
                CloudWatchDestination: {
                    type: "structure",
                    required: [ "DimensionConfigurations" ],
                    members: {
                        DimensionConfigurations: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "DimensionName", "DimensionValueSource", "DefaultDimensionValue" ],
                                members: {
                                    DimensionName: {},
                                    DimensionValueSource: {},
                                    DefaultDimensionValue: {}
                                }
                            }
                        }
                    }
                },
                SNSDestination: {
                    type: "structure",
                    required: [ "TopicARN" ],
                    members: {
                        TopicARN: {}
                    }
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                CustomRedirectDomain: {}
            }
        },
        S10: {
            type: "structure",
            required: [ "Name", "IpFilter" ],
            members: {
                Name: {},
                IpFilter: {
                    type: "structure",
                    required: [ "Policy", "Cidr" ],
                    members: {
                        Policy: {},
                        Cidr: {}
                    }
                }
            }
        },
        S18: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Enabled: {
                    type: "boolean"
                },
                TlsPolicy: {},
                Recipients: {
                    type: "list",
                    member: {}
                },
                Actions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            S3Action: {
                                type: "structure",
                                required: [ "BucketName" ],
                                members: {
                                    TopicArn: {},
                                    BucketName: {},
                                    ObjectKeyPrefix: {},
                                    KmsKeyArn: {}
                                }
                            },
                            BounceAction: {
                                type: "structure",
                                required: [ "SmtpReplyCode", "Message", "Sender" ],
                                members: {
                                    TopicArn: {},
                                    SmtpReplyCode: {},
                                    StatusCode: {},
                                    Message: {},
                                    Sender: {}
                                }
                            },
                            WorkmailAction: {
                                type: "structure",
                                required: [ "OrganizationArn" ],
                                members: {
                                    TopicArn: {},
                                    OrganizationArn: {}
                                }
                            },
                            LambdaAction: {
                                type: "structure",
                                required: [ "FunctionArn" ],
                                members: {
                                    TopicArn: {},
                                    FunctionArn: {},
                                    InvocationType: {}
                                }
                            },
                            StopAction: {
                                type: "structure",
                                required: [ "Scope" ],
                                members: {
                                    Scope: {},
                                    TopicArn: {}
                                }
                            },
                            AddHeaderAction: {
                                type: "structure",
                                required: [ "HeaderName", "HeaderValue" ],
                                members: {
                                    HeaderName: {},
                                    HeaderValue: {}
                                }
                            },
                            SNSAction: {
                                type: "structure",
                                required: [ "TopicArn" ],
                                members: {
                                    TopicArn: {},
                                    Encoding: {}
                                }
                            }
                        }
                    }
                },
                ScanEnabled: {
                    type: "boolean"
                }
            }
        },
        S20: {
            type: "structure",
            required: [ "TemplateName" ],
            members: {
                TemplateName: {},
                SubjectPart: {},
                TextPart: {},
                HtmlPart: {}
            }
        },
        S2t: {
            type: "structure",
            members: {
                Name: {},
                CreatedTimestamp: {
                    type: "timestamp"
                }
            }
        },
        S2v: {
            type: "list",
            member: {
                shape: "S18"
            }
        },
        S31: {
            type: "structure",
            members: {
                TlsPolicy: {}
            }
        },
        S3c: {
            type: "list",
            member: {}
        },
        S3h: {
            type: "list",
            member: {}
        },
        S3w: {
            type: "list",
            member: {}
        },
        S54: {
            type: "list",
            member: {}
        },
        S5i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S5x: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S64: {
            type: "structure",
            members: {
                ToAddresses: {
                    shape: "S54"
                },
                CcAddresses: {
                    shape: "S54"
                },
                BccAddresses: {
                    shape: "S54"
                }
            }
        },
        S6e: {
            type: "structure",
            required: [ "Data" ],
            members: {
                Data: {},
                Charset: {}
            }
        }
    },
    paginators: {
        ListCustomVerificationEmailTemplates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListIdentities: {
            input_token: "NextToken",
            limit_key: "MaxItems",
            output_token: "NextToken",
            result_key: "Identities"
        },
        ListVerifiedEmailAddresses: {
            result_key: "VerifiedEmailAddresses"
        }
    },
    waiters: {
        IdentityExists: {
            delay: 3,
            operation: "GetIdentityVerificationAttributes",
            maxAttempts: 20,
            acceptors: [ {
                expected: "Success",
                matcher: "pathAll",
                state: "success",
                argument: "VerificationAttributes.*.VerificationStatus"
            } ]
        }
    }
};

AWS.apiLoader.services["shield"] = {};

AWS.Shield = AWS.Service.defineService("shield", [ "2016-06-02" ]);

AWS.apiLoader.services["shield"]["2016-06-02"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-06-02",
        endpointPrefix: "shield",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Shield",
        serviceFullName: "AWS Shield",
        serviceId: "Shield",
        signatureVersion: "v4",
        targetPrefix: "AWSShield_20160616",
        uid: "shield-2016-06-02"
    },
    operations: {
        AssociateDRTLogBucket: {
            input: {
                type: "structure",
                required: [ "LogBucket" ],
                members: {
                    LogBucket: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateDRTRole: {
            input: {
                type: "structure",
                required: [ "RoleArn" ],
                members: {
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateHealthCheck: {
            input: {
                type: "structure",
                required: [ "ProtectionId", "HealthCheckArn" ],
                members: {
                    ProtectionId: {},
                    HealthCheckArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateProactiveEngagementDetails: {
            input: {
                type: "structure",
                required: [ "EmergencyContactList" ],
                members: {
                    EmergencyContactList: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateProtection: {
            input: {
                type: "structure",
                required: [ "Name", "ResourceArn" ],
                members: {
                    Name: {},
                    ResourceArn: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProtectionId: {}
                }
            }
        },
        CreateProtectionGroup: {
            input: {
                type: "structure",
                required: [ "ProtectionGroupId", "Aggregation", "Pattern" ],
                members: {
                    ProtectionGroupId: {},
                    Aggregation: {},
                    Pattern: {},
                    ResourceType: {},
                    Members: {
                        shape: "Sv"
                    },
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateSubscription: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProtection: {
            input: {
                type: "structure",
                required: [ "ProtectionId" ],
                members: {
                    ProtectionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProtectionGroup: {
            input: {
                type: "structure",
                required: [ "ProtectionGroupId" ],
                members: {
                    ProtectionGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSubscription: {
            input: {
                type: "structure",
                members: {},
                deprecated: true
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true
            },
            deprecated: true
        },
        DescribeAttack: {
            input: {
                type: "structure",
                required: [ "AttackId" ],
                members: {
                    AttackId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Attack: {
                        type: "structure",
                        members: {
                            AttackId: {},
                            ResourceArn: {},
                            SubResources: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Type: {},
                                        Id: {},
                                        AttackVectors: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "VectorType" ],
                                                members: {
                                                    VectorType: {},
                                                    VectorCounters: {
                                                        shape: "S1f"
                                                    }
                                                }
                                            }
                                        },
                                        Counters: {
                                            shape: "S1f"
                                        }
                                    }
                                }
                            },
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            },
                            AttackCounters: {
                                shape: "S1f"
                            },
                            AttackProperties: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AttackLayer: {},
                                        AttackPropertyIdentifier: {},
                                        TopContributors: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Value: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        },
                                        Unit: {},
                                        Total: {
                                            type: "long"
                                        }
                                    }
                                }
                            },
                            Mitigations: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        MitigationName: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeAttackStatistics: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "TimeRange", "DataItems" ],
                members: {
                    TimeRange: {
                        shape: "S1w"
                    },
                    DataItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AttackCount" ],
                            members: {
                                AttackVolume: {
                                    type: "structure",
                                    members: {
                                        BitsPerSecond: {
                                            shape: "S21"
                                        },
                                        PacketsPerSecond: {
                                            shape: "S21"
                                        },
                                        RequestsPerSecond: {
                                            shape: "S21"
                                        }
                                    }
                                },
                                AttackCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeDRTAccess: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    RoleArn: {},
                    LogBucketList: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        DescribeEmergencyContactSettings: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    EmergencyContactList: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeProtection: {
            input: {
                type: "structure",
                members: {
                    ProtectionId: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Protection: {
                        shape: "S29"
                    }
                }
            }
        },
        DescribeProtectionGroup: {
            input: {
                type: "structure",
                required: [ "ProtectionGroupId" ],
                members: {
                    ProtectionGroupId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProtectionGroup" ],
                members: {
                    ProtectionGroup: {
                        shape: "S2j"
                    }
                }
            }
        },
        DescribeSubscription: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Subscription: {
                        type: "structure",
                        required: [ "SubscriptionLimits" ],
                        members: {
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            },
                            TimeCommitmentInSeconds: {
                                type: "long"
                            },
                            AutoRenew: {},
                            Limits: {
                                shape: "S2p"
                            },
                            ProactiveEngagementStatus: {},
                            SubscriptionLimits: {
                                type: "structure",
                                required: [ "ProtectionLimits", "ProtectionGroupLimits" ],
                                members: {
                                    ProtectionLimits: {
                                        type: "structure",
                                        required: [ "ProtectedResourceTypeLimits" ],
                                        members: {
                                            ProtectedResourceTypeLimits: {
                                                shape: "S2p"
                                            }
                                        }
                                    },
                                    ProtectionGroupLimits: {
                                        type: "structure",
                                        required: [ "MaxProtectionGroups", "PatternTypeLimits" ],
                                        members: {
                                            MaxProtectionGroups: {
                                                type: "long"
                                            },
                                            PatternTypeLimits: {
                                                type: "structure",
                                                required: [ "ArbitraryPatternLimits" ],
                                                members: {
                                                    ArbitraryPatternLimits: {
                                                        type: "structure",
                                                        required: [ "MaxMembers" ],
                                                        members: {
                                                            MaxMembers: {
                                                                type: "long"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            SubscriptionArn: {}
                        }
                    }
                }
            }
        },
        DisableApplicationLayerAutomaticResponse: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisableProactiveEngagement: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateDRTLogBucket: {
            input: {
                type: "structure",
                required: [ "LogBucket" ],
                members: {
                    LogBucket: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateDRTRole: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateHealthCheck: {
            input: {
                type: "structure",
                required: [ "ProtectionId", "HealthCheckArn" ],
                members: {
                    ProtectionId: {},
                    HealthCheckArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableApplicationLayerAutomaticResponse: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Action" ],
                members: {
                    ResourceArn: {},
                    Action: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        EnableProactiveEngagement: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetSubscriptionState: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "SubscriptionState" ],
                members: {
                    SubscriptionState: {}
                }
            }
        },
        ListAttacks: {
            input: {
                type: "structure",
                members: {
                    ResourceArns: {
                        type: "list",
                        member: {}
                    },
                    StartTime: {
                        shape: "S1w"
                    },
                    EndTime: {
                        shape: "S1w"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttackSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AttackId: {},
                                ResourceArn: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                AttackVectors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "VectorType" ],
                                        members: {
                                            VectorType: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProtectionGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InclusionFilters: {
                        type: "structure",
                        members: {
                            ProtectionGroupIds: {
                                type: "list",
                                member: {}
                            },
                            Patterns: {
                                type: "list",
                                member: {}
                            },
                            ResourceTypes: {
                                shape: "S3r"
                            },
                            Aggregations: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProtectionGroups" ],
                members: {
                    ProtectionGroups: {
                        type: "list",
                        member: {
                            shape: "S2j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProtections: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    InclusionFilters: {
                        type: "structure",
                        members: {
                            ResourceArns: {
                                type: "list",
                                member: {}
                            },
                            ProtectionNames: {
                                type: "list",
                                member: {}
                            },
                            ResourceTypes: {
                                shape: "S3r"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Protections: {
                        type: "list",
                        member: {
                            shape: "S29"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourcesInProtectionGroup: {
            input: {
                type: "structure",
                required: [ "ProtectionGroupId" ],
                members: {
                    ProtectionGroupId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceArns" ],
                members: {
                    ResourceArns: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sl"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplicationLayerAutomaticResponse: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Action" ],
                members: {
                    ResourceArn: {},
                    Action: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEmergencyContactSettings: {
            input: {
                type: "structure",
                members: {
                    EmergencyContactList: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProtectionGroup: {
            input: {
                type: "structure",
                required: [ "ProtectionGroupId", "Aggregation", "Pattern" ],
                members: {
                    ProtectionGroupId: {},
                    Aggregation: {},
                    Pattern: {},
                    ResourceType: {},
                    Members: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSubscription: {
            input: {
                type: "structure",
                members: {
                    AutoRenew: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "EmailAddress" ],
                members: {
                    EmailAddress: {},
                    PhoneNumber: {},
                    ContactNotes: {}
                }
            }
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sv: {
            type: "list",
            member: {}
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Max: {
                        type: "double"
                    },
                    Average: {
                        type: "double"
                    },
                    Sum: {
                        type: "double"
                    },
                    N: {
                        type: "integer"
                    },
                    Unit: {}
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                FromInclusive: {
                    type: "timestamp"
                },
                ToExclusive: {
                    type: "timestamp"
                }
            }
        },
        S21: {
            type: "structure",
            required: [ "Max" ],
            members: {
                Max: {
                    type: "double"
                }
            }
        },
        S29: {
            type: "structure",
            members: {
                Id: {},
                Name: {},
                ResourceArn: {},
                HealthCheckIds: {
                    type: "list",
                    member: {}
                },
                ProtectionArn: {},
                ApplicationLayerAutomaticResponseConfiguration: {
                    type: "structure",
                    required: [ "Status", "Action" ],
                    members: {
                        Status: {},
                        Action: {
                            shape: "S2e"
                        }
                    }
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                Block: {
                    type: "structure",
                    members: {}
                },
                Count: {
                    type: "structure",
                    members: {}
                }
            }
        },
        S2j: {
            type: "structure",
            required: [ "ProtectionGroupId", "Aggregation", "Pattern", "Members" ],
            members: {
                ProtectionGroupId: {},
                Aggregation: {},
                Pattern: {},
                ResourceType: {},
                Members: {
                    shape: "Sv"
                },
                ProtectionGroupArn: {}
            }
        },
        S2p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Max: {
                        type: "long"
                    }
                }
            }
        },
        S3r: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAttacks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AttackSummaries"
        },
        ListProtectionGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListProtections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Protections"
        },
        ListResourcesInProtectionGroup: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["simpledb"] = {};

AWS.SimpleDB = AWS.Service.defineService("simpledb", [ "2009-04-15" ]);

AWS.apiLoader.services["simpledb"]["2009-04-15"] = {
    metadata: {
        apiVersion: "2009-04-15",
        endpointPrefix: "sdb",
        serviceFullName: "Amazon SimpleDB",
        serviceId: "SimpleDB",
        signatureVersion: "v2",
        xmlNamespace: "http://sdb.amazonaws.com/doc/2009-04-15/",
        protocol: "query"
    },
    operations: {
        BatchDeleteAttributes: {
            input: {
                type: "structure",
                required: [ "DomainName", "Items" ],
                members: {
                    DomainName: {},
                    Items: {
                        type: "list",
                        member: {
                            locationName: "Item",
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                Name: {
                                    locationName: "ItemName"
                                },
                                Attributes: {
                                    shape: "S5"
                                }
                            }
                        },
                        flattened: true
                    }
                }
            }
        },
        BatchPutAttributes: {
            input: {
                type: "structure",
                required: [ "DomainName", "Items" ],
                members: {
                    DomainName: {},
                    Items: {
                        type: "list",
                        member: {
                            locationName: "Item",
                            type: "structure",
                            required: [ "Name", "Attributes" ],
                            members: {
                                Name: {
                                    locationName: "ItemName"
                                },
                                Attributes: {
                                    shape: "Sa"
                                }
                            }
                        },
                        flattened: true
                    }
                }
            }
        },
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            }
        },
        DeleteAttributes: {
            input: {
                type: "structure",
                required: [ "DomainName", "ItemName" ],
                members: {
                    DomainName: {},
                    ItemName: {},
                    Attributes: {
                        shape: "S5"
                    },
                    Expected: {
                        shape: "Sf"
                    }
                }
            }
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            }
        },
        DomainMetadata: {
            input: {
                type: "structure",
                required: [ "DomainName" ],
                members: {
                    DomainName: {}
                }
            },
            output: {
                resultWrapper: "DomainMetadataResult",
                type: "structure",
                members: {
                    ItemCount: {
                        type: "integer"
                    },
                    ItemNamesSizeBytes: {
                        type: "long"
                    },
                    AttributeNameCount: {
                        type: "integer"
                    },
                    AttributeNamesSizeBytes: {
                        type: "long"
                    },
                    AttributeValueCount: {
                        type: "integer"
                    },
                    AttributeValuesSizeBytes: {
                        type: "long"
                    },
                    Timestamp: {
                        type: "integer"
                    }
                }
            }
        },
        GetAttributes: {
            input: {
                type: "structure",
                required: [ "DomainName", "ItemName" ],
                members: {
                    DomainName: {},
                    ItemName: {},
                    AttributeNames: {
                        type: "list",
                        member: {
                            locationName: "AttributeName"
                        },
                        flattened: true
                    },
                    ConsistentRead: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "GetAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "So"
                    }
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    MaxNumberOfDomains: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListDomainsResult",
                type: "structure",
                members: {
                    DomainNames: {
                        type: "list",
                        member: {
                            locationName: "DomainName"
                        },
                        flattened: true
                    },
                    NextToken: {}
                }
            }
        },
        PutAttributes: {
            input: {
                type: "structure",
                required: [ "DomainName", "ItemName", "Attributes" ],
                members: {
                    DomainName: {},
                    ItemName: {},
                    Attributes: {
                        shape: "Sa"
                    },
                    Expected: {
                        shape: "Sf"
                    }
                }
            }
        },
        Select: {
            input: {
                type: "structure",
                required: [ "SelectExpression" ],
                members: {
                    SelectExpression: {},
                    NextToken: {},
                    ConsistentRead: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "SelectResult",
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            locationName: "Item",
                            type: "structure",
                            required: [ "Name", "Attributes" ],
                            members: {
                                Name: {},
                                AlternateNameEncoding: {},
                                Attributes: {
                                    shape: "So"
                                }
                            }
                        },
                        flattened: true
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {
                locationName: "Attribute",
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Value: {}
                }
            },
            flattened: true
        },
        Sa: {
            type: "list",
            member: {
                locationName: "Attribute",
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {},
                    Replace: {
                        type: "boolean"
                    }
                }
            },
            flattened: true
        },
        Sf: {
            type: "structure",
            members: {
                Name: {},
                Value: {},
                Exists: {
                    type: "boolean"
                }
            }
        },
        So: {
            type: "list",
            member: {
                locationName: "Attribute",
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    AlternateNameEncoding: {},
                    Value: {},
                    AlternateValueEncoding: {}
                }
            },
            flattened: true
        }
    },
    paginators: {
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxNumberOfDomains",
            result_key: "DomainNames"
        },
        Select: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["sms"] = {};

AWS.SMS = AWS.Service.defineService("sms", [ "2016-10-24" ]);

AWS.apiLoader.services["sms"]["2016-10-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-10-24",
        endpointPrefix: "sms",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SMS",
        serviceFullName: "AWS Server Migration Service",
        serviceId: "SMS",
        signatureVersion: "v4",
        targetPrefix: "AWSServerMigrationService_V2016_10_24",
        uid: "sms-2016-10-24"
    },
    operations: {
        CreateApp: {
            input: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    roleName: {},
                    clientToken: {},
                    serverGroups: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    appSummary: {
                        shape: "St"
                    },
                    serverGroups: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "So"
                    }
                }
            }
        },
        CreateReplicationJob: {
            input: {
                type: "structure",
                required: [ "serverId", "seedReplicationTime" ],
                members: {
                    serverId: {},
                    seedReplicationTime: {
                        type: "timestamp"
                    },
                    frequency: {
                        type: "integer"
                    },
                    runOnce: {
                        type: "boolean"
                    },
                    licenseType: {},
                    roleName: {},
                    description: {},
                    numberOfRecentAmisToKeep: {
                        type: "integer"
                    },
                    encrypted: {
                        type: "boolean"
                    },
                    kmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    replicationJobId: {}
                }
            }
        },
        DeleteApp: {
            input: {
                type: "structure",
                members: {
                    appId: {},
                    forceStopAppReplication: {
                        type: "boolean"
                    },
                    forceTerminateApp: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppLaunchConfiguration: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppReplicationConfiguration: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAppValidationConfiguration: {
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteReplicationJob: {
            input: {
                type: "structure",
                required: [ "replicationJobId" ],
                members: {
                    replicationJobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteServerCatalog: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateConnector: {
            input: {
                type: "structure",
                required: [ "connectorId" ],
                members: {
                    connectorId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GenerateChangeSet: {
            input: {
                type: "structure",
                members: {
                    appId: {},
                    changesetFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    s3Location: {
                        shape: "S24"
                    }
                }
            }
        },
        GenerateTemplate: {
            input: {
                type: "structure",
                members: {
                    appId: {},
                    templateFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    s3Location: {
                        shape: "S24"
                    }
                }
            }
        },
        GetApp: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    appSummary: {
                        shape: "St"
                    },
                    serverGroups: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "So"
                    }
                }
            }
        },
        GetAppLaunchConfiguration: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    appId: {},
                    roleName: {},
                    autoLaunch: {
                        type: "boolean"
                    },
                    serverGroupLaunchConfigurations: {
                        shape: "S2e"
                    }
                }
            }
        },
        GetAppReplicationConfiguration: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    serverGroupReplicationConfigurations: {
                        shape: "S2u"
                    }
                }
            }
        },
        GetAppValidationConfiguration: {
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    appValidationConfigurations: {
                        shape: "S31"
                    },
                    serverGroupValidationConfigurations: {
                        shape: "S3c"
                    }
                }
            }
        },
        GetAppValidationOutput: {
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    validationOutputList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                validationId: {},
                                name: {},
                                status: {},
                                statusMessage: {},
                                latestValidationTime: {
                                    type: "timestamp"
                                },
                                appValidationOutput: {
                                    type: "structure",
                                    members: {
                                        ssmOutput: {
                                            type: "structure",
                                            members: {
                                                s3Location: {
                                                    shape: "S24"
                                                }
                                            }
                                        }
                                    }
                                },
                                serverValidationOutput: {
                                    type: "structure",
                                    members: {
                                        server: {
                                            shape: "Sb"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetConnectors: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                connectorId: {},
                                version: {},
                                status: {},
                                capabilityList: {
                                    type: "list",
                                    member: {}
                                },
                                vmManagerName: {},
                                vmManagerType: {},
                                vmManagerId: {},
                                ipAddress: {},
                                macAddress: {},
                                associatedOn: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetReplicationJobs: {
            input: {
                type: "structure",
                members: {
                    replicationJobId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    replicationJobList: {
                        type: "list",
                        member: {
                            shape: "S46"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetReplicationRuns: {
            input: {
                type: "structure",
                required: [ "replicationJobId" ],
                members: {
                    replicationJobId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    replicationJob: {
                        shape: "S46"
                    },
                    replicationRunList: {
                        shape: "S4a"
                    },
                    nextToken: {}
                }
            }
        },
        GetServers: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    vmServerAddressList: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    lastModifiedOn: {
                        type: "timestamp"
                    },
                    serverCatalogStatus: {},
                    serverList: {
                        shape: "Sa"
                    },
                    nextToken: {}
                }
            }
        },
        ImportAppCatalog: {
            input: {
                type: "structure",
                members: {
                    roleName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ImportServerCatalog: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        LaunchApp: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListApps: {
            input: {
                type: "structure",
                members: {
                    appIds: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apps: {
                        type: "list",
                        member: {
                            shape: "St"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        NotifyAppValidationOutput: {
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {},
                    notificationContext: {
                        type: "structure",
                        members: {
                            validationId: {},
                            status: {},
                            statusMessage: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAppLaunchConfiguration: {
            input: {
                type: "structure",
                members: {
                    appId: {},
                    roleName: {},
                    autoLaunch: {
                        type: "boolean"
                    },
                    serverGroupLaunchConfigurations: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAppReplicationConfiguration: {
            input: {
                type: "structure",
                members: {
                    appId: {},
                    serverGroupReplicationConfigurations: {
                        shape: "S2u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutAppValidationConfiguration: {
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {},
                    appValidationConfigurations: {
                        shape: "S31"
                    },
                    serverGroupValidationConfigurations: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartAppReplication: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartOnDemandAppReplication: {
            input: {
                type: "structure",
                required: [ "appId" ],
                members: {
                    appId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartOnDemandReplicationRun: {
            input: {
                type: "structure",
                required: [ "replicationJobId" ],
                members: {
                    replicationJobId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    replicationRunId: {}
                }
            }
        },
        StopAppReplication: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TerminateApp: {
            input: {
                type: "structure",
                members: {
                    appId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApp: {
            input: {
                type: "structure",
                members: {
                    appId: {},
                    name: {},
                    description: {},
                    roleName: {},
                    serverGroups: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    appSummary: {
                        shape: "St"
                    },
                    serverGroups: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateReplicationJob: {
            input: {
                type: "structure",
                required: [ "replicationJobId" ],
                members: {
                    replicationJobId: {},
                    frequency: {
                        type: "integer"
                    },
                    nextReplicationRunStartTime: {
                        type: "timestamp"
                    },
                    licenseType: {},
                    roleName: {},
                    description: {},
                    numberOfRecentAmisToKeep: {
                        type: "integer"
                    },
                    encrypted: {
                        type: "boolean"
                    },
                    kmsKeyId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    serverGroupId: {},
                    name: {},
                    serverList: {
                        shape: "Sa"
                    }
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                shape: "Sb"
            }
        },
        Sb: {
            type: "structure",
            members: {
                serverId: {},
                serverType: {},
                vmServer: {
                    shape: "Se"
                },
                replicationJobId: {},
                replicationJobTerminated: {
                    type: "boolean"
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                vmServerAddress: {
                    shape: "Sf"
                },
                vmName: {},
                vmManagerName: {},
                vmManagerType: {},
                vmPath: {}
            }
        },
        Sf: {
            type: "structure",
            members: {
                vmManagerId: {},
                vmId: {}
            }
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        St: {
            type: "structure",
            members: {
                appId: {},
                importedAppId: {},
                name: {},
                description: {},
                status: {},
                statusMessage: {},
                replicationConfigurationStatus: {},
                replicationStatus: {},
                replicationStatusMessage: {},
                latestReplicationTime: {
                    type: "timestamp"
                },
                launchConfigurationStatus: {},
                launchStatus: {},
                launchStatusMessage: {},
                launchDetails: {
                    type: "structure",
                    members: {
                        latestLaunchTime: {
                            type: "timestamp"
                        },
                        stackName: {},
                        stackId: {}
                    }
                },
                creationTime: {
                    type: "timestamp"
                },
                lastModified: {
                    type: "timestamp"
                },
                roleName: {},
                totalServerGroups: {
                    type: "integer"
                },
                totalServers: {
                    type: "integer"
                }
            }
        },
        S24: {
            type: "structure",
            members: {
                bucket: {},
                key: {}
            }
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    serverGroupId: {},
                    launchOrder: {
                        type: "integer"
                    },
                    serverLaunchConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                server: {
                                    shape: "Sb"
                                },
                                logicalId: {},
                                vpc: {},
                                subnet: {},
                                securityGroup: {},
                                ec2KeyName: {},
                                userData: {
                                    type: "structure",
                                    members: {
                                        s3Location: {
                                            shape: "S24"
                                        }
                                    }
                                },
                                instanceType: {},
                                associatePublicIpAddress: {
                                    type: "boolean"
                                },
                                iamInstanceProfileName: {},
                                configureScript: {
                                    shape: "S24"
                                },
                                configureScriptType: {}
                            }
                        }
                    }
                }
            }
        },
        S2u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    serverGroupId: {},
                    serverReplicationConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                server: {
                                    shape: "Sb"
                                },
                                serverReplicationParameters: {
                                    type: "structure",
                                    members: {
                                        seedTime: {
                                            type: "timestamp"
                                        },
                                        frequency: {
                                            type: "integer"
                                        },
                                        runOnce: {
                                            type: "boolean"
                                        },
                                        licenseType: {},
                                        numberOfRecentAmisToKeep: {
                                            type: "integer"
                                        },
                                        encrypted: {
                                            type: "boolean"
                                        },
                                        kmsKeyId: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S31: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    validationId: {},
                    name: {},
                    appValidationStrategy: {},
                    ssmValidationParameters: {
                        type: "structure",
                        members: {
                            source: {
                                shape: "S37"
                            },
                            instanceId: {},
                            scriptType: {},
                            command: {},
                            executionTimeoutSeconds: {
                                type: "integer"
                            },
                            outputS3BucketName: {}
                        }
                    }
                }
            }
        },
        S37: {
            type: "structure",
            members: {
                s3Location: {
                    shape: "S24"
                }
            }
        },
        S3c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    serverGroupId: {},
                    serverValidationConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                server: {
                                    shape: "Sb"
                                },
                                validationId: {},
                                name: {},
                                serverValidationStrategy: {},
                                userDataValidationParameters: {
                                    type: "structure",
                                    members: {
                                        source: {
                                            shape: "S37"
                                        },
                                        scriptType: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S46: {
            type: "structure",
            members: {
                replicationJobId: {},
                serverId: {},
                serverType: {},
                vmServer: {
                    shape: "Se"
                },
                seedReplicationTime: {
                    type: "timestamp"
                },
                frequency: {
                    type: "integer"
                },
                runOnce: {
                    type: "boolean"
                },
                nextReplicationRunStartTime: {
                    type: "timestamp"
                },
                licenseType: {},
                roleName: {},
                latestAmiId: {},
                state: {},
                statusMessage: {},
                description: {},
                numberOfRecentAmisToKeep: {
                    type: "integer"
                },
                encrypted: {
                    type: "boolean"
                },
                kmsKeyId: {},
                replicationRunList: {
                    shape: "S4a"
                }
            }
        },
        S4a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    replicationRunId: {},
                    state: {},
                    type: {},
                    stageDetails: {
                        type: "structure",
                        members: {
                            stage: {},
                            stageProgress: {}
                        }
                    },
                    statusMessage: {},
                    amiId: {},
                    scheduledStartTime: {
                        type: "timestamp"
                    },
                    completedTime: {
                        type: "timestamp"
                    },
                    description: {},
                    encrypted: {
                        type: "boolean"
                    },
                    kmsKeyId: {}
                }
            }
        }
    },
    deprecated: true,
    deprecatedMessage: "AWS Server Migration Service is Deprecated.",
    paginators: {
        GetConnectors: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "connectorList"
        },
        GetReplicationJobs: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "replicationJobList"
        },
        GetReplicationRuns: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "replicationRunList"
        },
        GetServers: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "serverList"
        }
    }
};

AWS.apiLoader.services["snowball"] = {};

AWS.Snowball = AWS.Service.defineService("snowball", [ "2016-06-30" ]);

AWS.apiLoader.services["snowball"]["2016-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-06-30",
        endpointPrefix: "snowball",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon Snowball",
        serviceFullName: "Amazon Import/Export Snowball",
        serviceId: "Snowball",
        signatureVersion: "v4",
        targetPrefix: "AWSIESnowballJobManagementService",
        uid: "snowball-2016-06-30"
    },
    operations: {
        CancelCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateAddress: {
            input: {
                type: "structure",
                required: [ "Address" ],
                members: {
                    Address: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddressId: {}
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "JobType", "AddressId", "SnowballType", "ShippingOption" ],
                members: {
                    JobType: {},
                    Resources: {
                        shape: "Sg"
                    },
                    OnDeviceServiceConfiguration: {
                        shape: "Sw"
                    },
                    Description: {},
                    AddressId: {},
                    KmsKeyARN: {},
                    RoleARN: {},
                    SnowballType: {},
                    ShippingOption: {},
                    Notification: {
                        shape: "S1a"
                    },
                    ForwardingAddressId: {},
                    TaxDocuments: {
                        shape: "S1e"
                    },
                    RemoteManagement: {},
                    InitialClusterSize: {
                        type: "integer"
                    },
                    ForceCreateJobs: {
                        type: "boolean"
                    },
                    LongTermPricingIds: {
                        type: "list",
                        member: {}
                    },
                    SnowballCapacityPreference: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterId: {},
                    JobListEntries: {
                        shape: "S1n"
                    }
                }
            }
        },
        CreateJob: {
            input: {
                type: "structure",
                members: {
                    JobType: {},
                    Resources: {
                        shape: "Sg"
                    },
                    OnDeviceServiceConfiguration: {
                        shape: "Sw"
                    },
                    Description: {},
                    AddressId: {},
                    KmsKeyARN: {},
                    RoleARN: {},
                    SnowballCapacityPreference: {},
                    ShippingOption: {},
                    Notification: {
                        shape: "S1a"
                    },
                    ClusterId: {},
                    SnowballType: {},
                    ForwardingAddressId: {},
                    TaxDocuments: {
                        shape: "S1e"
                    },
                    DeviceConfiguration: {
                        shape: "S1r"
                    },
                    RemoteManagement: {},
                    LongTermPricingId: {},
                    ImpactLevel: {},
                    PickupDetails: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {}
                }
            }
        },
        CreateLongTermPricing: {
            input: {
                type: "structure",
                required: [ "LongTermPricingType", "SnowballType" ],
                members: {
                    LongTermPricingType: {},
                    IsLongTermPricingAutoRenew: {
                        type: "boolean"
                    },
                    SnowballType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LongTermPricingId: {}
                }
            }
        },
        CreateReturnShippingLabel: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    ShippingOption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        DescribeAddress: {
            input: {
                type: "structure",
                required: [ "AddressId" ],
                members: {
                    AddressId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Address: {
                        shape: "S8"
                    }
                }
            }
        },
        DescribeAddresses: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Addresses: {
                        shape: "S2c"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterMetadata: {
                        type: "structure",
                        members: {
                            ClusterId: {},
                            Description: {},
                            KmsKeyARN: {},
                            RoleARN: {},
                            ClusterState: {},
                            JobType: {},
                            SnowballType: {},
                            CreationDate: {
                                type: "timestamp"
                            },
                            Resources: {
                                shape: "Sg"
                            },
                            AddressId: {},
                            ShippingOption: {},
                            Notification: {
                                shape: "S1a"
                            },
                            ForwardingAddressId: {},
                            TaxDocuments: {
                                shape: "S1e"
                            },
                            OnDeviceServiceConfiguration: {
                                shape: "Sw"
                            }
                        }
                    }
                }
            }
        },
        DescribeJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobMetadata: {
                        shape: "S2j"
                    },
                    SubJobMetadata: {
                        type: "list",
                        member: {
                            shape: "S2j"
                        }
                    }
                }
            }
        },
        DescribeReturnShippingLabel: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {},
                    ExpirationDate: {
                        type: "timestamp"
                    },
                    ReturnShippingLabelURI: {}
                }
            }
        },
        GetJobManifest: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManifestURI: {}
                }
            }
        },
        GetJobUnlockCode: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UnlockCode: {}
                }
            }
        },
        GetSnowballUsage: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    SnowballLimit: {
                        type: "integer"
                    },
                    SnowballsInUse: {
                        type: "integer"
                    }
                }
            }
        },
        GetSoftwareUpdates: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdatesURI: {}
                }
            }
        },
        ListClusterJobs: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobListEntries: {
                        shape: "S1n"
                    },
                    NextToken: {}
                }
            }
        },
        ListClusters: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ClusterListEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ClusterId: {},
                                ClusterState: {},
                                CreationDate: {
                                    type: "timestamp"
                                },
                                Description: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCompatibleImages: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CompatibleImages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AmiId: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobListEntries: {
                        shape: "S1n"
                    },
                    NextToken: {}
                }
            }
        },
        ListLongTermPricing: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LongTermPricingEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LongTermPricingId: {},
                                LongTermPricingEndDate: {
                                    type: "timestamp"
                                },
                                LongTermPricingStartDate: {
                                    type: "timestamp"
                                },
                                LongTermPricingType: {},
                                CurrentActiveJob: {},
                                ReplacementJob: {},
                                IsLongTermPricingAutoRenew: {
                                    type: "boolean"
                                },
                                LongTermPricingStatus: {},
                                SnowballType: {},
                                JobIds: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPickupLocations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Addresses: {
                        shape: "S2c"
                    },
                    NextToken: {}
                }
            }
        },
        ListServiceVersions: {
            input: {
                type: "structure",
                required: [ "ServiceName" ],
                members: {
                    ServiceName: {},
                    DependentServices: {
                        shape: "S3m"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ServiceVersions", "ServiceName" ],
                members: {
                    ServiceVersions: {
                        type: "list",
                        member: {
                            shape: "S3o"
                        }
                    },
                    ServiceName: {},
                    DependentServices: {
                        shape: "S3m"
                    },
                    NextToken: {}
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    RoleARN: {},
                    Description: {},
                    Resources: {
                        shape: "Sg"
                    },
                    OnDeviceServiceConfiguration: {
                        shape: "Sw"
                    },
                    AddressId: {},
                    ShippingOption: {},
                    Notification: {
                        shape: "S1a"
                    },
                    ForwardingAddressId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {},
                    RoleARN: {},
                    Notification: {
                        shape: "S1a"
                    },
                    Resources: {
                        shape: "Sg"
                    },
                    OnDeviceServiceConfiguration: {
                        shape: "Sw"
                    },
                    AddressId: {},
                    ShippingOption: {},
                    Description: {},
                    SnowballCapacityPreference: {},
                    ForwardingAddressId: {},
                    PickupDetails: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJobShipmentState: {
            input: {
                type: "structure",
                required: [ "JobId", "ShipmentState" ],
                members: {
                    JobId: {},
                    ShipmentState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateLongTermPricing: {
            input: {
                type: "structure",
                required: [ "LongTermPricingId" ],
                members: {
                    LongTermPricingId: {},
                    ReplacementJob: {},
                    IsLongTermPricingAutoRenew: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "structure",
            members: {
                AddressId: {},
                Name: {},
                Company: {},
                Street1: {},
                Street2: {},
                Street3: {},
                City: {},
                StateOrProvince: {},
                PrefectureOrDistrict: {},
                Landmark: {},
                Country: {},
                PostalCode: {},
                PhoneNumber: {},
                IsRestricted: {
                    type: "boolean"
                },
                Type: {}
            }
        },
        Sg: {
            type: "structure",
            members: {
                S3Resources: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            BucketArn: {},
                            KeyRange: {
                                type: "structure",
                                members: {
                                    BeginMarker: {},
                                    EndMarker: {}
                                }
                            },
                            TargetOnDeviceServices: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ServiceName: {},
                                        TransferOption: {}
                                    }
                                }
                            }
                        }
                    }
                },
                LambdaResources: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LambdaArn: {},
                            EventTriggers: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        EventResourceARN: {}
                                    }
                                }
                            }
                        }
                    }
                },
                Ec2AmiResources: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AmiId" ],
                        members: {
                            AmiId: {},
                            SnowballAmiId: {}
                        }
                    }
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                NFSOnDeviceService: {
                    type: "structure",
                    members: {
                        StorageLimit: {
                            type: "integer"
                        },
                        StorageUnit: {}
                    }
                },
                TGWOnDeviceService: {
                    type: "structure",
                    members: {
                        StorageLimit: {
                            type: "integer"
                        },
                        StorageUnit: {}
                    }
                },
                EKSOnDeviceService: {
                    type: "structure",
                    members: {
                        KubernetesVersion: {},
                        EKSAnywhereVersion: {}
                    }
                },
                S3OnDeviceService: {
                    type: "structure",
                    members: {
                        StorageLimit: {
                            type: "double"
                        },
                        StorageUnit: {},
                        ServiceSize: {
                            type: "integer"
                        },
                        FaultTolerance: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                SnsTopicARN: {},
                JobStatesToNotify: {
                    type: "list",
                    member: {}
                },
                NotifyAll: {
                    type: "boolean"
                },
                DevicePickupSnsTopicARN: {}
            }
        },
        S1e: {
            type: "structure",
            members: {
                IND: {
                    type: "structure",
                    members: {
                        GSTIN: {}
                    }
                }
            }
        },
        S1n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    JobId: {},
                    JobState: {},
                    IsMaster: {
                        type: "boolean"
                    },
                    JobType: {},
                    SnowballType: {},
                    CreationDate: {
                        type: "timestamp"
                    },
                    Description: {}
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                SnowconeDeviceConfiguration: {
                    type: "structure",
                    members: {
                        WirelessConnection: {
                            type: "structure",
                            members: {
                                IsWifiEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                Name: {},
                PhoneNumber: {
                    type: "string",
                    sensitive: true
                },
                Email: {
                    type: "string",
                    sensitive: true
                },
                IdentificationNumber: {},
                IdentificationExpirationDate: {
                    type: "timestamp"
                },
                IdentificationIssuingOrg: {},
                DevicePickupId: {}
            }
        },
        S2c: {
            type: "list",
            member: {
                shape: "S8"
            }
        },
        S2j: {
            type: "structure",
            members: {
                JobId: {},
                JobState: {},
                JobType: {},
                SnowballType: {},
                CreationDate: {
                    type: "timestamp"
                },
                Resources: {
                    shape: "Sg"
                },
                Description: {},
                KmsKeyARN: {},
                RoleARN: {},
                AddressId: {},
                ShippingDetails: {
                    type: "structure",
                    members: {
                        ShippingOption: {},
                        InboundShipment: {
                            shape: "S2l"
                        },
                        OutboundShipment: {
                            shape: "S2l"
                        }
                    }
                },
                SnowballCapacityPreference: {},
                Notification: {
                    shape: "S1a"
                },
                DataTransferProgress: {
                    type: "structure",
                    members: {
                        BytesTransferred: {
                            type: "long"
                        },
                        ObjectsTransferred: {
                            type: "long"
                        },
                        TotalBytes: {
                            type: "long"
                        },
                        TotalObjects: {
                            type: "long"
                        }
                    }
                },
                JobLogInfo: {
                    type: "structure",
                    members: {
                        JobCompletionReportURI: {},
                        JobSuccessLogURI: {},
                        JobFailureLogURI: {}
                    }
                },
                ClusterId: {},
                ForwardingAddressId: {},
                TaxDocuments: {
                    shape: "S1e"
                },
                DeviceConfiguration: {
                    shape: "S1r"
                },
                RemoteManagement: {},
                LongTermPricingId: {},
                OnDeviceServiceConfiguration: {
                    shape: "Sw"
                },
                ImpactLevel: {},
                PickupDetails: {
                    shape: "S1v"
                },
                SnowballId: {}
            }
        },
        S2l: {
            type: "structure",
            members: {
                Status: {},
                TrackingNumber: {}
            }
        },
        S3m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ServiceName: {},
                    ServiceVersion: {
                        shape: "S3o"
                    }
                }
            }
        },
        S3o: {
            type: "structure",
            members: {
                Version: {}
            }
        }
    },
    paginators: {
        DescribeAddresses: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Addresses"
        },
        ListClusterJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "JobListEntries"
        },
        ListClusters: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ClusterListEntries"
        },
        ListCompatibleImages: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CompatibleImages"
        },
        ListJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "JobListEntries"
        },
        ListLongTermPricing: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "LongTermPricingEntries"
        },
        ListPickupLocations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["sns"] = {};

AWS.SNS = AWS.Service.defineService("sns", [ "2010-03-31" ]);

AWS.apiLoader.services["sns"]["2010-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2010-03-31",
        endpointPrefix: "sns",
        protocol: "query",
        serviceAbbreviation: "Amazon SNS",
        serviceFullName: "Amazon Simple Notification Service",
        serviceId: "SNS",
        signatureVersion: "v4",
        uid: "sns-2010-03-31",
        xmlNamespace: "http://sns.amazonaws.com/doc/2010-03-31/"
    },
    operations: {
        AddPermission: {
            input: {
                type: "structure",
                required: [ "TopicArn", "Label", "AWSAccountId", "ActionName" ],
                members: {
                    TopicArn: {},
                    Label: {},
                    AWSAccountId: {
                        type: "list",
                        member: {}
                    },
                    ActionName: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        CheckIfPhoneNumberIsOptedOut: {
            input: {
                type: "structure",
                required: [ "phoneNumber" ],
                members: {
                    phoneNumber: {}
                }
            },
            output: {
                resultWrapper: "CheckIfPhoneNumberIsOptedOutResult",
                type: "structure",
                members: {
                    isOptedOut: {
                        type: "boolean"
                    }
                }
            }
        },
        ConfirmSubscription: {
            input: {
                type: "structure",
                required: [ "TopicArn", "Token" ],
                members: {
                    TopicArn: {},
                    Token: {},
                    AuthenticateOnUnsubscribe: {}
                }
            },
            output: {
                resultWrapper: "ConfirmSubscriptionResult",
                type: "structure",
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        CreatePlatformApplication: {
            input: {
                type: "structure",
                required: [ "Name", "Platform", "Attributes" ],
                members: {
                    Name: {},
                    Platform: {},
                    Attributes: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                resultWrapper: "CreatePlatformApplicationResult",
                type: "structure",
                members: {
                    PlatformApplicationArn: {}
                }
            }
        },
        CreatePlatformEndpoint: {
            input: {
                type: "structure",
                required: [ "PlatformApplicationArn", "Token" ],
                members: {
                    PlatformApplicationArn: {},
                    Token: {},
                    CustomUserData: {},
                    Attributes: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                resultWrapper: "CreatePlatformEndpointResult",
                type: "structure",
                members: {
                    EndpointArn: {}
                }
            }
        },
        CreateSMSSandboxPhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumber" ],
                members: {
                    PhoneNumber: {},
                    LanguageCode: {}
                }
            },
            output: {
                resultWrapper: "CreateSMSSandboxPhoneNumberResult",
                type: "structure",
                members: {}
            }
        },
        CreateTopic: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Attributes: {
                        shape: "St"
                    },
                    Tags: {
                        shape: "Sw"
                    },
                    DataProtectionPolicy: {}
                }
            },
            output: {
                resultWrapper: "CreateTopicResult",
                type: "structure",
                members: {
                    TopicArn: {}
                }
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        DeletePlatformApplication: {
            input: {
                type: "structure",
                required: [ "PlatformApplicationArn" ],
                members: {
                    PlatformApplicationArn: {}
                }
            }
        },
        DeleteSMSSandboxPhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumber" ],
                members: {
                    PhoneNumber: {}
                }
            },
            output: {
                resultWrapper: "DeleteSMSSandboxPhoneNumberResult",
                type: "structure",
                members: {}
            }
        },
        DeleteTopic: {
            input: {
                type: "structure",
                required: [ "TopicArn" ],
                members: {
                    TopicArn: {}
                }
            }
        },
        GetDataProtectionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                resultWrapper: "GetDataProtectionPolicyResult",
                type: "structure",
                members: {
                    DataProtectionPolicy: {}
                }
            }
        },
        GetEndpointAttributes: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                resultWrapper: "GetEndpointAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetPlatformApplicationAttributes: {
            input: {
                type: "structure",
                required: [ "PlatformApplicationArn" ],
                members: {
                    PlatformApplicationArn: {}
                }
            },
            output: {
                resultWrapper: "GetPlatformApplicationAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetSMSAttributes: {
            input: {
                type: "structure",
                members: {
                    attributes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "GetSMSAttributesResult",
                type: "structure",
                members: {
                    attributes: {
                        shape: "Sj"
                    }
                }
            }
        },
        GetSMSSandboxAccountStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                resultWrapper: "GetSMSSandboxAccountStatusResult",
                type: "structure",
                required: [ "IsInSandbox" ],
                members: {
                    IsInSandbox: {
                        type: "boolean"
                    }
                }
            }
        },
        GetSubscriptionAttributes: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            },
            output: {
                resultWrapper: "GetSubscriptionAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetTopicAttributes: {
            input: {
                type: "structure",
                required: [ "TopicArn" ],
                members: {
                    TopicArn: {}
                }
            },
            output: {
                resultWrapper: "GetTopicAttributesResult",
                type: "structure",
                members: {
                    Attributes: {
                        shape: "St"
                    }
                }
            }
        },
        ListEndpointsByPlatformApplication: {
            input: {
                type: "structure",
                required: [ "PlatformApplicationArn" ],
                members: {
                    PlatformApplicationArn: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListEndpointsByPlatformApplicationResult",
                type: "structure",
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EndpointArn: {},
                                Attributes: {
                                    shape: "Sj"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListOriginationNumbers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListOriginationNumbersResult",
                type: "structure",
                members: {
                    NextToken: {},
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                PhoneNumber: {},
                                Status: {},
                                Iso2CountryCode: {},
                                RouteType: {},
                                NumberCapabilities: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPhoneNumbersOptedOut: {
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                resultWrapper: "ListPhoneNumbersOptedOutResult",
                type: "structure",
                members: {
                    phoneNumbers: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListPlatformApplications: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListPlatformApplicationsResult",
                type: "structure",
                members: {
                    PlatformApplications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PlatformApplicationArn: {},
                                Attributes: {
                                    shape: "Sj"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSMSSandboxPhoneNumbers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                resultWrapper: "ListSMSSandboxPhoneNumbersResult",
                type: "structure",
                required: [ "PhoneNumbers" ],
                members: {
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PhoneNumber: {},
                                Status: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSubscriptions: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListSubscriptionsResult",
                type: "structure",
                members: {
                    Subscriptions: {
                        shape: "S2h"
                    },
                    NextToken: {}
                }
            }
        },
        ListSubscriptionsByTopic: {
            input: {
                type: "structure",
                required: [ "TopicArn" ],
                members: {
                    TopicArn: {},
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListSubscriptionsByTopicResult",
                type: "structure",
                members: {
                    Subscriptions: {
                        shape: "S2h"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                resultWrapper: "ListTagsForResourceResult",
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListTopics: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                resultWrapper: "ListTopicsResult",
                type: "structure",
                members: {
                    Topics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TopicArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        OptInPhoneNumber: {
            input: {
                type: "structure",
                required: [ "phoneNumber" ],
                members: {
                    phoneNumber: {}
                }
            },
            output: {
                resultWrapper: "OptInPhoneNumberResult",
                type: "structure",
                members: {}
            }
        },
        Publish: {
            input: {
                type: "structure",
                required: [ "Message" ],
                members: {
                    TopicArn: {},
                    TargetArn: {},
                    PhoneNumber: {},
                    Message: {},
                    Subject: {},
                    MessageStructure: {},
                    MessageAttributes: {
                        shape: "S31"
                    },
                    MessageDeduplicationId: {},
                    MessageGroupId: {}
                }
            },
            output: {
                resultWrapper: "PublishResult",
                type: "structure",
                members: {
                    MessageId: {},
                    SequenceNumber: {}
                }
            }
        },
        PublishBatch: {
            input: {
                type: "structure",
                required: [ "TopicArn", "PublishBatchRequestEntries" ],
                members: {
                    TopicArn: {},
                    PublishBatchRequestEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Message" ],
                            members: {
                                Id: {},
                                Message: {},
                                Subject: {},
                                MessageStructure: {},
                                MessageAttributes: {
                                    shape: "S31"
                                },
                                MessageDeduplicationId: {},
                                MessageGroupId: {}
                            }
                        }
                    }
                }
            },
            output: {
                resultWrapper: "PublishBatchResult",
                type: "structure",
                members: {
                    Successful: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                MessageId: {},
                                SequenceNumber: {}
                            }
                        }
                    },
                    Failed: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Code", "SenderFault" ],
                            members: {
                                Id: {},
                                Code: {},
                                Message: {},
                                SenderFault: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        PutDataProtectionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "DataProtectionPolicy" ],
                members: {
                    ResourceArn: {},
                    DataProtectionPolicy: {}
                }
            }
        },
        RemovePermission: {
            input: {
                type: "structure",
                required: [ "TopicArn", "Label" ],
                members: {
                    TopicArn: {},
                    Label: {}
                }
            }
        },
        SetEndpointAttributes: {
            input: {
                type: "structure",
                required: [ "EndpointArn", "Attributes" ],
                members: {
                    EndpointArn: {},
                    Attributes: {
                        shape: "Sj"
                    }
                }
            }
        },
        SetPlatformApplicationAttributes: {
            input: {
                type: "structure",
                required: [ "PlatformApplicationArn", "Attributes" ],
                members: {
                    PlatformApplicationArn: {},
                    Attributes: {
                        shape: "Sj"
                    }
                }
            }
        },
        SetSMSAttributes: {
            input: {
                type: "structure",
                required: [ "attributes" ],
                members: {
                    attributes: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                resultWrapper: "SetSMSAttributesResult",
                type: "structure",
                members: {}
            }
        },
        SetSubscriptionAttributes: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn", "AttributeName" ],
                members: {
                    SubscriptionArn: {},
                    AttributeName: {},
                    AttributeValue: {}
                }
            }
        },
        SetTopicAttributes: {
            input: {
                type: "structure",
                required: [ "TopicArn", "AttributeName" ],
                members: {
                    TopicArn: {},
                    AttributeName: {},
                    AttributeValue: {}
                }
            }
        },
        Subscribe: {
            input: {
                type: "structure",
                required: [ "TopicArn", "Protocol" ],
                members: {
                    TopicArn: {},
                    Protocol: {},
                    Endpoint: {},
                    Attributes: {
                        shape: "S1j"
                    },
                    ReturnSubscriptionArn: {
                        type: "boolean"
                    }
                }
            },
            output: {
                resultWrapper: "SubscribeResult",
                type: "structure",
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                resultWrapper: "TagResourceResult",
                type: "structure",
                members: {}
            }
        },
        Unsubscribe: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                resultWrapper: "UntagResourceResult",
                type: "structure",
                members: {}
            }
        },
        VerifySMSSandboxPhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumber", "OneTimePassword" ],
                members: {
                    PhoneNumber: {},
                    OneTimePassword: {}
                }
            },
            output: {
                resultWrapper: "VerifySMSSandboxPhoneNumberResult",
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        Sj: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1j: {
            type: "map",
            key: {},
            value: {}
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SubscriptionArn: {},
                    Owner: {},
                    Protocol: {},
                    Endpoint: {},
                    TopicArn: {}
                }
            }
        },
        S31: {
            type: "map",
            key: {
                locationName: "Name"
            },
            value: {
                locationName: "Value",
                type: "structure",
                required: [ "DataType" ],
                members: {
                    DataType: {},
                    StringValue: {},
                    BinaryValue: {
                        type: "blob"
                    }
                }
            }
        }
    },
    paginators: {
        ListEndpointsByPlatformApplication: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Endpoints"
        },
        ListOriginationNumbers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PhoneNumbers"
        },
        ListPhoneNumbersOptedOut: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "phoneNumbers"
        },
        ListPlatformApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "PlatformApplications"
        },
        ListSMSSandboxPhoneNumbers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PhoneNumbers"
        },
        ListSubscriptions: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Subscriptions"
        },
        ListSubscriptionsByTopic: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Subscriptions"
        },
        ListTopics: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Topics"
        }
    }
};

AWS.apiLoader.services["sqs"] = {};

AWS.SQS = AWS.Service.defineService("sqs", [ "2012-11-05" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    118: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.update(AWS.SQS.prototype, {
            setupRequestListeners: function setupRequestListeners(request) {
                request.addListener("build", this.buildEndpoint);
                if (request.service.config.computeChecksums) {
                    if (request.operation === "sendMessage") {
                        request.addListener("extractData", this.verifySendMessageChecksum);
                    } else if (request.operation === "sendMessageBatch") {
                        request.addListener("extractData", this.verifySendMessageBatchChecksum);
                    } else if (request.operation === "receiveMessage") {
                        request.addListener("extractData", this.verifyReceiveMessageChecksum);
                    }
                }
            },
            verifySendMessageChecksum: function verifySendMessageChecksum(response) {
                if (!response.data) return;
                var md5 = response.data.MD5OfMessageBody;
                var body = this.params.MessageBody;
                var calculatedMd5 = this.service.calculateChecksum(body);
                if (calculatedMd5 !== md5) {
                    var msg = 'Got "' + response.data.MD5OfMessageBody + '", expecting "' + calculatedMd5 + '".';
                    this.service.throwInvalidChecksumError(response, [ response.data.MessageId ], msg);
                }
            },
            verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {
                if (!response.data) return;
                var service = this.service;
                var entries = {};
                var errors = [];
                var messageIds = [];
                AWS.util.arrayEach(response.data.Successful, function(entry) {
                    entries[entry.Id] = entry;
                });
                AWS.util.arrayEach(this.params.Entries, function(entry) {
                    if (entries[entry.Id]) {
                        var md5 = entries[entry.Id].MD5OfMessageBody;
                        var body = entry.MessageBody;
                        if (!service.isChecksumValid(md5, body)) {
                            errors.push(entry.Id);
                            messageIds.push(entries[entry.Id].MessageId);
                        }
                    }
                });
                if (errors.length > 0) {
                    service.throwInvalidChecksumError(response, messageIds, "Invalid messages: " + errors.join(", "));
                }
            },
            verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {
                if (!response.data) return;
                var service = this.service;
                var messageIds = [];
                AWS.util.arrayEach(response.data.Messages, function(message) {
                    var md5 = message.MD5OfBody;
                    var body = message.Body;
                    if (!service.isChecksumValid(md5, body)) {
                        messageIds.push(message.MessageId);
                    }
                });
                if (messageIds.length > 0) {
                    service.throwInvalidChecksumError(response, messageIds, "Invalid messages: " + messageIds.join(", "));
                }
            },
            throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {
                response.error = AWS.util.error(new Error(), {
                    retryable: true,
                    code: "InvalidChecksum",
                    messageIds: ids,
                    message: response.request.operation + " returned an invalid MD5 response. " + message
                });
            },
            isChecksumValid: function isChecksumValid(checksum, data) {
                return this.calculateChecksum(data) === checksum;
            },
            calculateChecksum: function calculateChecksum(data) {
                return AWS.util.crypto.md5(data, "hex");
            },
            buildEndpoint: function buildEndpoint(request) {
                var url = request.httpRequest.params.QueueUrl;
                if (url) {
                    request.httpRequest.endpoint = new AWS.Endpoint(url);
                    var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);
                    if (matches) request.httpRequest.region = matches[1];
                }
            }
        });
    }, {
        "../core": 44
    } ]
}, {}, [ 118 ]);

AWS.apiLoader.services["sqs"]["2012-11-05"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-11-05",
        awsQueryCompatible: {},
        endpointPrefix: "sqs",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Amazon SQS",
        serviceFullName: "Amazon Simple Queue Service",
        serviceId: "SQS",
        signatureVersion: "v4",
        targetPrefix: "AmazonSQS",
        uid: "sqs-2012-11-05"
    },
    operations: {
        AddPermission: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Label", "AWSAccountIds", "Actions" ],
                members: {
                    QueueUrl: {},
                    Label: {},
                    AWSAccountIds: {
                        type: "list",
                        member: {},
                        flattened: true
                    },
                    Actions: {
                        type: "list",
                        member: {},
                        flattened: true
                    }
                }
            }
        },
        CancelMessageMoveTask: {
            input: {
                type: "structure",
                required: [ "TaskHandle" ],
                members: {
                    TaskHandle: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApproximateNumberOfMessagesMoved: {
                        type: "long"
                    }
                }
            }
        },
        ChangeMessageVisibility: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "ReceiptHandle", "VisibilityTimeout" ],
                members: {
                    QueueUrl: {},
                    ReceiptHandle: {},
                    VisibilityTimeout: {
                        type: "integer"
                    }
                }
            }
        },
        ChangeMessageVisibilityBatch: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Entries" ],
                members: {
                    QueueUrl: {},
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "ReceiptHandle" ],
                            members: {
                                Id: {},
                                ReceiptHandle: {},
                                VisibilityTimeout: {
                                    type: "integer"
                                }
                            }
                        },
                        flattened: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Successful", "Failed" ],
                members: {
                    Successful: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                Id: {}
                            }
                        },
                        flattened: true
                    },
                    Failed: {
                        shape: "Sg"
                    }
                }
            }
        },
        CreateQueue: {
            input: {
                type: "structure",
                required: [ "QueueName" ],
                members: {
                    QueueName: {},
                    Attributes: {
                        shape: "Sk"
                    },
                    tags: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueUrl: {}
                }
            }
        },
        DeleteMessage: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "ReceiptHandle" ],
                members: {
                    QueueUrl: {},
                    ReceiptHandle: {}
                }
            }
        },
        DeleteMessageBatch: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Entries" ],
                members: {
                    QueueUrl: {},
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "ReceiptHandle" ],
                            members: {
                                Id: {},
                                ReceiptHandle: {}
                            }
                        },
                        flattened: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Successful", "Failed" ],
                members: {
                    Successful: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id" ],
                            members: {
                                Id: {}
                            }
                        },
                        flattened: true
                    },
                    Failed: {
                        shape: "Sg"
                    }
                }
            }
        },
        DeleteQueue: {
            input: {
                type: "structure",
                required: [ "QueueUrl" ],
                members: {
                    QueueUrl: {}
                }
            }
        },
        GetQueueAttributes: {
            input: {
                type: "structure",
                required: [ "QueueUrl" ],
                members: {
                    QueueUrl: {},
                    AttributeNames: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetQueueUrl: {
            input: {
                type: "structure",
                required: [ "QueueName" ],
                members: {
                    QueueName: {},
                    QueueOwnerAWSAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueUrl: {}
                }
            }
        },
        ListDeadLetterSourceQueues: {
            input: {
                type: "structure",
                required: [ "QueueUrl" ],
                members: {
                    QueueUrl: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "queueUrls" ],
                members: {
                    queueUrls: {
                        shape: "S17"
                    },
                    NextToken: {}
                }
            }
        },
        ListMessageMoveTasks: {
            input: {
                type: "structure",
                required: [ "SourceArn" ],
                members: {
                    SourceArn: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        flattened: true,
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TaskHandle: {},
                                Status: {},
                                SourceArn: {},
                                DestinationArn: {},
                                MaxNumberOfMessagesPerSecond: {
                                    type: "integer"
                                },
                                ApproximateNumberOfMessagesMoved: {
                                    type: "long"
                                },
                                ApproximateNumberOfMessagesToMove: {
                                    type: "long"
                                },
                                FailureReason: {},
                                StartedTimestamp: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListQueueTags: {
            input: {
                type: "structure",
                required: [ "QueueUrl" ],
                members: {
                    QueueUrl: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        ListQueues: {
            input: {
                type: "structure",
                members: {
                    QueueNamePrefix: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueueUrls: {
                        shape: "S17"
                    },
                    NextToken: {}
                }
            }
        },
        PurgeQueue: {
            input: {
                type: "structure",
                required: [ "QueueUrl" ],
                members: {
                    QueueUrl: {}
                }
            }
        },
        ReceiveMessage: {
            input: {
                type: "structure",
                required: [ "QueueUrl" ],
                members: {
                    QueueUrl: {},
                    AttributeNames: {
                        shape: "Sz"
                    },
                    MessageAttributeNames: {
                        type: "list",
                        member: {},
                        flattened: true
                    },
                    MaxNumberOfMessages: {
                        type: "integer"
                    },
                    VisibilityTimeout: {
                        type: "integer"
                    },
                    WaitTimeSeconds: {
                        type: "integer"
                    },
                    ReceiveRequestAttemptId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Messages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MessageId: {},
                                ReceiptHandle: {},
                                MD5OfBody: {},
                                Body: {},
                                Attributes: {
                                    type: "map",
                                    key: {},
                                    value: {},
                                    flattened: true
                                },
                                MD5OfMessageAttributes: {},
                                MessageAttributes: {
                                    shape: "S1q"
                                }
                            }
                        },
                        flattened: true
                    }
                }
            }
        },
        RemovePermission: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Label" ],
                members: {
                    QueueUrl: {},
                    Label: {}
                }
            }
        },
        SendMessage: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "MessageBody" ],
                members: {
                    QueueUrl: {},
                    MessageBody: {},
                    DelaySeconds: {
                        type: "integer"
                    },
                    MessageAttributes: {
                        shape: "S1q"
                    },
                    MessageSystemAttributes: {
                        shape: "S1x"
                    },
                    MessageDeduplicationId: {},
                    MessageGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MD5OfMessageBody: {},
                    MD5OfMessageAttributes: {},
                    MD5OfMessageSystemAttributes: {},
                    MessageId: {},
                    SequenceNumber: {}
                }
            }
        },
        SendMessageBatch: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Entries" ],
                members: {
                    QueueUrl: {},
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "MessageBody" ],
                            members: {
                                Id: {},
                                MessageBody: {},
                                DelaySeconds: {
                                    type: "integer"
                                },
                                MessageAttributes: {
                                    shape: "S1q"
                                },
                                MessageSystemAttributes: {
                                    shape: "S1x"
                                },
                                MessageDeduplicationId: {},
                                MessageGroupId: {}
                            }
                        },
                        flattened: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Successful", "Failed" ],
                members: {
                    Successful: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "MessageId", "MD5OfMessageBody" ],
                            members: {
                                Id: {},
                                MessageId: {},
                                MD5OfMessageBody: {},
                                MD5OfMessageAttributes: {},
                                MD5OfMessageSystemAttributes: {},
                                SequenceNumber: {}
                            }
                        },
                        flattened: true
                    },
                    Failed: {
                        shape: "Sg"
                    }
                }
            }
        },
        SetQueueAttributes: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Attributes" ],
                members: {
                    QueueUrl: {},
                    Attributes: {
                        shape: "Sk"
                    }
                }
            }
        },
        StartMessageMoveTask: {
            input: {
                type: "structure",
                required: [ "SourceArn" ],
                members: {
                    SourceArn: {},
                    DestinationArn: {},
                    MaxNumberOfMessagesPerSecond: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskHandle: {}
                }
            }
        },
        TagQueue: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "Tags" ],
                members: {
                    QueueUrl: {},
                    Tags: {
                        shape: "Sm"
                    }
                }
            }
        },
        UntagQueue: {
            input: {
                type: "structure",
                required: [ "QueueUrl", "TagKeys" ],
                members: {
                    QueueUrl: {},
                    TagKeys: {
                        type: "list",
                        member: {},
                        flattened: true
                    }
                }
            }
        }
    },
    shapes: {
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id", "SenderFault", "Code" ],
                members: {
                    Id: {},
                    SenderFault: {
                        type: "boolean"
                    },
                    Code: {},
                    Message: {}
                }
            },
            flattened: true
        },
        Sk: {
            type: "map",
            key: {},
            value: {},
            flattened: true
        },
        Sm: {
            type: "map",
            key: {},
            value: {},
            flattened: true
        },
        Sz: {
            type: "list",
            member: {},
            flattened: true
        },
        S17: {
            type: "list",
            member: {},
            flattened: true
        },
        S1q: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "DataType" ],
                members: {
                    StringValue: {},
                    BinaryValue: {
                        type: "blob"
                    },
                    StringListValues: {
                        shape: "S1t",
                        flattened: true
                    },
                    BinaryListValues: {
                        shape: "S1u",
                        flattened: true
                    },
                    DataType: {}
                }
            },
            flattened: true
        },
        S1t: {
            type: "list",
            member: {}
        },
        S1u: {
            type: "list",
            member: {
                type: "blob"
            }
        },
        S1x: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "DataType" ],
                members: {
                    StringValue: {},
                    BinaryValue: {
                        type: "blob"
                    },
                    StringListValues: {
                        shape: "S1t",
                        flattened: true
                    },
                    BinaryListValues: {
                        shape: "S1u",
                        flattened: true
                    },
                    DataType: {}
                }
            },
            flattened: true
        }
    },
    paginators: {
        ListDeadLetterSourceQueues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "queueUrls"
        },
        ListQueues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "QueueUrls"
        }
    }
};

AWS.apiLoader.services["ssm"] = {};

AWS.SSM = AWS.Service.defineService("ssm", [ "2014-11-06" ]);

AWS.apiLoader.services["ssm"]["2014-11-06"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2014-11-06",
        endpointPrefix: "ssm",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon SSM",
        serviceFullName: "Amazon Simple Systems Manager (SSM)",
        serviceId: "SSM",
        signatureVersion: "v4",
        targetPrefix: "AmazonSSM",
        uid: "ssm-2014-11-06"
    },
    operations: {
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceType", "ResourceId", "Tags" ],
                members: {
                    ResourceType: {},
                    ResourceId: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateOpsItemRelatedItem: {
            input: {
                type: "structure",
                required: [ "OpsItemId", "AssociationType", "ResourceType", "ResourceUri" ],
                members: {
                    OpsItemId: {},
                    AssociationType: {},
                    ResourceType: {},
                    ResourceUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationId: {}
                }
            }
        },
        CancelCommand: {
            input: {
                type: "structure",
                required: [ "CommandId" ],
                members: {
                    CommandId: {},
                    InstanceIds: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelMaintenanceWindowExecution: {
            input: {
                type: "structure",
                required: [ "WindowExecutionId" ],
                members: {
                    WindowExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutionId: {}
                }
            }
        },
        CreateActivation: {
            input: {
                type: "structure",
                required: [ "IamRole" ],
                members: {
                    Description: {},
                    DefaultInstanceName: {},
                    IamRole: {},
                    RegistrationLimit: {
                        type: "integer"
                    },
                    ExpirationDate: {
                        type: "timestamp"
                    },
                    Tags: {
                        shape: "S4"
                    },
                    RegistrationMetadata: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActivationId: {},
                    ActivationCode: {}
                }
            }
        },
        CreateAssociation: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    DocumentVersion: {},
                    InstanceId: {},
                    Parameters: {
                        shape: "S14"
                    },
                    Targets: {
                        shape: "S18"
                    },
                    ScheduleExpression: {},
                    OutputLocation: {
                        shape: "S1e"
                    },
                    AssociationName: {},
                    AutomationTargetParameterName: {},
                    MaxErrors: {},
                    MaxConcurrency: {},
                    ComplianceSeverity: {},
                    SyncCompliance: {},
                    ApplyOnlyAtCronInterval: {
                        type: "boolean"
                    },
                    CalendarNames: {
                        shape: "S1q"
                    },
                    TargetLocations: {
                        shape: "S1s"
                    },
                    ScheduleOffset: {
                        type: "integer"
                    },
                    TargetMaps: {
                        shape: "S25"
                    },
                    Tags: {
                        shape: "S4"
                    },
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationDescription: {
                        shape: "S2b"
                    }
                }
            }
        },
        CreateAssociationBatch: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            shape: "S2s"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Successful: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    },
                    Failed: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Entry: {
                                    shape: "S2s"
                                },
                                Message: {},
                                Fault: {}
                            }
                        }
                    }
                }
            }
        },
        CreateDocument: {
            input: {
                type: "structure",
                required: [ "Content", "Name" ],
                members: {
                    Content: {},
                    Requires: {
                        shape: "S31"
                    },
                    Attachments: {
                        shape: "S35"
                    },
                    Name: {},
                    DisplayName: {},
                    VersionName: {},
                    DocumentType: {},
                    DocumentFormat: {},
                    TargetType: {},
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentDescription: {
                        shape: "S3h"
                    }
                }
            }
        },
        CreateMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "Name", "Schedule", "Duration", "Cutoff", "AllowUnassociatedTargets" ],
                members: {
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    StartDate: {},
                    EndDate: {},
                    Schedule: {},
                    ScheduleTimezone: {},
                    ScheduleOffset: {
                        type: "integer"
                    },
                    Duration: {
                        type: "integer"
                    },
                    Cutoff: {
                        type: "integer"
                    },
                    AllowUnassociatedTargets: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {}
                }
            }
        },
        CreateOpsItem: {
            input: {
                type: "structure",
                required: [ "Description", "Source", "Title" ],
                members: {
                    Description: {},
                    OpsItemType: {},
                    OperationalData: {
                        shape: "S4p"
                    },
                    Notifications: {
                        shape: "S4u"
                    },
                    Priority: {
                        type: "integer"
                    },
                    RelatedOpsItems: {
                        shape: "S4y"
                    },
                    Source: {},
                    Title: {},
                    Tags: {
                        shape: "S4"
                    },
                    Category: {},
                    Severity: {},
                    ActualStartTime: {
                        type: "timestamp"
                    },
                    ActualEndTime: {
                        type: "timestamp"
                    },
                    PlannedStartTime: {
                        type: "timestamp"
                    },
                    PlannedEndTime: {
                        type: "timestamp"
                    },
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OpsItemId: {},
                    OpsItemArn: {}
                }
            }
        },
        CreateOpsMetadata: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    Metadata: {
                        shape: "S59"
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OpsMetadataArn: {}
                }
            }
        },
        CreatePatchBaseline: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    OperatingSystem: {},
                    Name: {},
                    GlobalFilters: {
                        shape: "S5i"
                    },
                    ApprovalRules: {
                        shape: "S5o"
                    },
                    ApprovedPatches: {
                        shape: "S5u"
                    },
                    ApprovedPatchesComplianceLevel: {},
                    ApprovedPatchesEnableNonSecurity: {
                        type: "boolean"
                    },
                    RejectedPatches: {
                        shape: "S5u"
                    },
                    RejectedPatchesAction: {},
                    Description: {},
                    Sources: {
                        shape: "S5y"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {}
                }
            }
        },
        CreateResourceDataSync: {
            input: {
                type: "structure",
                required: [ "SyncName" ],
                members: {
                    SyncName: {},
                    S3Destination: {
                        shape: "S68"
                    },
                    SyncType: {},
                    SyncSource: {
                        shape: "S6h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteActivation: {
            input: {
                type: "structure",
                required: [ "ActivationId" ],
                members: {
                    ActivationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAssociation: {
            input: {
                type: "structure",
                members: {
                    Name: {},
                    InstanceId: {},
                    AssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDocument: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    DocumentVersion: {},
                    VersionName: {},
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInventory: {
            input: {
                type: "structure",
                required: [ "TypeName" ],
                members: {
                    TypeName: {},
                    SchemaDeleteOption: {},
                    DryRun: {
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletionId: {},
                    TypeName: {},
                    DeletionSummary: {
                        shape: "S75"
                    }
                }
            }
        },
        DeleteMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId" ],
                members: {
                    WindowId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {}
                }
            }
        },
        DeleteOpsItem: {
            input: {
                type: "structure",
                required: [ "OpsItemId" ],
                members: {
                    OpsItemId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteOpsMetadata: {
            input: {
                type: "structure",
                required: [ "OpsMetadataArn" ],
                members: {
                    OpsMetadataArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteParameter: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteParameters: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "S7m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletedParameters: {
                        shape: "S7m"
                    },
                    InvalidParameters: {
                        shape: "S7m"
                    }
                }
            }
        },
        DeletePatchBaseline: {
            input: {
                type: "structure",
                required: [ "BaselineId" ],
                members: {
                    BaselineId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {}
                }
            }
        },
        DeleteResourceDataSync: {
            input: {
                type: "structure",
                required: [ "SyncName" ],
                members: {
                    SyncName: {},
                    SyncType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "PolicyId", "PolicyHash" ],
                members: {
                    ResourceArn: {},
                    PolicyId: {},
                    PolicyHash: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterManagedInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterPatchBaselineForPatchGroup: {
            input: {
                type: "structure",
                required: [ "BaselineId", "PatchGroup" ],
                members: {
                    BaselineId: {},
                    PatchGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {},
                    PatchGroup: {}
                }
            }
        },
        DeregisterTargetFromMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId", "WindowTargetId" ],
                members: {
                    WindowId: {},
                    WindowTargetId: {},
                    Safe: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    WindowTargetId: {}
                }
            }
        },
        DeregisterTaskFromMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId", "WindowTaskId" ],
                members: {
                    WindowId: {},
                    WindowTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    WindowTaskId: {}
                }
            }
        },
        DescribeActivations: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FilterKey: {},
                                FilterValues: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ActivationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActivationId: {},
                                Description: {},
                                DefaultInstanceName: {},
                                IamRole: {},
                                RegistrationLimit: {
                                    type: "integer"
                                },
                                RegistrationsCount: {
                                    type: "integer"
                                },
                                ExpirationDate: {
                                    type: "timestamp"
                                },
                                Expired: {
                                    type: "boolean"
                                },
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                Tags: {
                                    shape: "S4"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAssociation: {
            input: {
                type: "structure",
                members: {
                    Name: {},
                    InstanceId: {},
                    AssociationId: {},
                    AssociationVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationDescription: {
                        shape: "S2b"
                    }
                }
            }
        },
        DescribeAssociationExecutionTargets: {
            input: {
                type: "structure",
                required: [ "AssociationId", "ExecutionId" ],
                members: {
                    AssociationId: {},
                    ExecutionId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value" ],
                            members: {
                                Key: {},
                                Value: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationExecutionTargets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                AssociationVersion: {},
                                ExecutionId: {},
                                ResourceId: {},
                                ResourceType: {},
                                Status: {},
                                DetailedStatus: {},
                                LastExecutionDate: {
                                    type: "timestamp"
                                },
                                OutputSource: {
                                    type: "structure",
                                    members: {
                                        OutputSourceId: {},
                                        OutputSourceType: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAssociationExecutions: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Value", "Type" ],
                            members: {
                                Key: {},
                                Value: {},
                                Type: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                AssociationVersion: {},
                                ExecutionId: {},
                                Status: {},
                                DetailedStatus: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastExecutionDate: {
                                    type: "timestamp"
                                },
                                ResourceCountByStatus: {},
                                AlarmConfiguration: {
                                    shape: "S1z"
                                },
                                TriggeredAlarms: {
                                    shape: "S2n"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAutomationExecutions: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutomationExecutionMetadataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutomationExecutionId: {},
                                DocumentName: {},
                                DocumentVersion: {},
                                AutomationExecutionStatus: {},
                                ExecutionStartTime: {
                                    type: "timestamp"
                                },
                                ExecutionEndTime: {
                                    type: "timestamp"
                                },
                                ExecutedBy: {},
                                LogFile: {},
                                Outputs: {
                                    shape: "S9m"
                                },
                                Mode: {},
                                ParentAutomationExecutionId: {},
                                CurrentStepName: {},
                                CurrentAction: {},
                                FailureMessage: {},
                                TargetParameterName: {},
                                Targets: {
                                    shape: "S18"
                                },
                                TargetMaps: {
                                    shape: "S25"
                                },
                                ResolvedTargets: {
                                    shape: "S9r"
                                },
                                MaxConcurrency: {},
                                MaxErrors: {},
                                Target: {},
                                AutomationType: {},
                                AlarmConfiguration: {
                                    shape: "S1z"
                                },
                                TriggeredAlarms: {
                                    shape: "S2n"
                                },
                                AutomationSubtype: {},
                                ScheduledTime: {
                                    type: "timestamp"
                                },
                                Runbooks: {
                                    shape: "S9v"
                                },
                                OpsItemId: {},
                                AssociationId: {},
                                ChangeRequestName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAutomationStepExecutions: {
            input: {
                type: "structure",
                required: [ "AutomationExecutionId" ],
                members: {
                    AutomationExecutionId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ReverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StepExecutions: {
                        shape: "Sa5"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAvailablePatches: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sag"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Patches: {
                        type: "list",
                        member: {
                            shape: "Sao"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeDocument: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    DocumentVersion: {},
                    VersionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Document: {
                        shape: "S3h"
                    }
                }
            }
        },
        DescribeDocumentPermission: {
            input: {
                type: "structure",
                required: [ "Name", "PermissionType" ],
                members: {
                    Name: {},
                    PermissionType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountIds: {
                        shape: "Sbj"
                    },
                    AccountSharingInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                SharedDocumentVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEffectiveInstanceAssociations: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                InstanceId: {},
                                Content: {},
                                AssociationVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeEffectivePatchesForPatchBaseline: {
            input: {
                type: "structure",
                required: [ "BaselineId" ],
                members: {
                    BaselineId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EffectivePatches: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Patch: {
                                    shape: "Sao"
                                },
                                PatchStatus: {
                                    type: "structure",
                                    members: {
                                        DeploymentStatus: {},
                                        ComplianceLevel: {},
                                        ApprovalDate: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstanceAssociationsStatus: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceAssociationStatusInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                Name: {},
                                DocumentVersion: {},
                                AssociationVersion: {},
                                InstanceId: {},
                                ExecutionDate: {
                                    type: "timestamp"
                                },
                                Status: {},
                                DetailedStatus: {},
                                ExecutionSummary: {},
                                ErrorCode: {},
                                OutputUrl: {
                                    type: "structure",
                                    members: {
                                        S3OutputUrl: {
                                            type: "structure",
                                            members: {
                                                OutputUrl: {}
                                            }
                                        }
                                    }
                                },
                                AssociationName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstanceInformation: {
            input: {
                type: "structure",
                members: {
                    InstanceInformationFilterList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "valueSet" ],
                            members: {
                                key: {},
                                valueSet: {
                                    shape: "Scc"
                                }
                            }
                        }
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values" ],
                            members: {
                                Key: {},
                                Values: {
                                    shape: "Scc"
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceInformationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InstanceId: {},
                                PingStatus: {},
                                LastPingDateTime: {
                                    type: "timestamp"
                                },
                                AgentVersion: {},
                                IsLatestVersion: {
                                    type: "boolean"
                                },
                                PlatformType: {},
                                PlatformName: {},
                                PlatformVersion: {},
                                ActivationId: {},
                                IamRole: {},
                                RegistrationDate: {
                                    type: "timestamp"
                                },
                                ResourceType: {},
                                Name: {},
                                IPAddress: {},
                                ComputerName: {},
                                AssociationStatus: {},
                                LastAssociationExecutionDate: {
                                    type: "timestamp"
                                },
                                LastSuccessfulAssociationExecutionDate: {
                                    type: "timestamp"
                                },
                                AssociationOverview: {
                                    type: "structure",
                                    members: {
                                        DetailedStatus: {},
                                        InstanceAssociationStatusAggregatedCount: {
                                            type: "map",
                                            key: {},
                                            value: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                },
                                SourceId: {},
                                SourceType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstancePatchStates: {
            input: {
                type: "structure",
                required: [ "InstanceIds" ],
                members: {
                    InstanceIds: {
                        shape: "Si"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstancePatchStates: {
                        type: "list",
                        member: {
                            shape: "Scy"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstancePatchStatesForPatchGroup: {
            input: {
                type: "structure",
                required: [ "PatchGroup" ],
                members: {
                    PatchGroup: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values", "Type" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                },
                                Type: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstancePatchStates: {
                        type: "list",
                        member: {
                            shape: "Scy"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInstancePatches: {
            input: {
                type: "structure",
                required: [ "InstanceId" ],
                members: {
                    InstanceId: {},
                    Filters: {
                        shape: "Sag"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Patches: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Title", "KBId", "Classification", "Severity", "State", "InstalledTime" ],
                            members: {
                                Title: {},
                                KBId: {},
                                Classification: {},
                                Severity: {},
                                State: {},
                                InstalledTime: {
                                    type: "timestamp"
                                },
                                CVEIds: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeInventoryDeletions: {
            input: {
                type: "structure",
                members: {
                    DeletionId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InventoryDeletions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeletionId: {},
                                TypeName: {},
                                DeletionStartTime: {
                                    type: "timestamp"
                                },
                                LastStatus: {},
                                LastStatusMessage: {},
                                DeletionSummary: {
                                    shape: "S75"
                                },
                                LastStatusUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowExecutionTaskInvocations: {
            input: {
                type: "structure",
                required: [ "WindowExecutionId", "TaskId" ],
                members: {
                    WindowExecutionId: {},
                    TaskId: {},
                    Filters: {
                        shape: "Se4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutionTaskInvocationIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowExecutionId: {},
                                TaskExecutionId: {},
                                InvocationId: {},
                                ExecutionId: {},
                                TaskType: {},
                                Parameters: {
                                    shape: "Seg"
                                },
                                Status: {},
                                StatusDetails: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                OwnerInformation: {
                                    shape: "Sd1"
                                },
                                WindowTargetId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowExecutionTasks: {
            input: {
                type: "structure",
                required: [ "WindowExecutionId" ],
                members: {
                    WindowExecutionId: {},
                    Filters: {
                        shape: "Se4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutionTaskIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowExecutionId: {},
                                TaskExecutionId: {},
                                Status: {},
                                StatusDetails: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                TaskArn: {},
                                TaskType: {},
                                AlarmConfiguration: {
                                    shape: "S1z"
                                },
                                TriggeredAlarms: {
                                    shape: "S2n"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowExecutions: {
            input: {
                type: "structure",
                required: [ "WindowId" ],
                members: {
                    WindowId: {},
                    Filters: {
                        shape: "Se4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowId: {},
                                WindowExecutionId: {},
                                Status: {},
                                StatusDetails: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowSchedule: {
            input: {
                type: "structure",
                members: {
                    WindowId: {},
                    Targets: {
                        shape: "S18"
                    },
                    ResourceType: {},
                    Filters: {
                        shape: "Sag"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ScheduledWindowExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowId: {},
                                Name: {},
                                ExecutionTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowTargets: {
            input: {
                type: "structure",
                required: [ "WindowId" ],
                members: {
                    WindowId: {},
                    Filters: {
                        shape: "Se4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Targets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowId: {},
                                WindowTargetId: {},
                                ResourceType: {},
                                Targets: {
                                    shape: "S18"
                                },
                                OwnerInformation: {
                                    shape: "Sd1"
                                },
                                Name: {},
                                Description: {
                                    shape: "S4b"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowTasks: {
            input: {
                type: "structure",
                required: [ "WindowId" ],
                members: {
                    WindowId: {},
                    Filters: {
                        shape: "Se4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowId: {},
                                WindowTaskId: {},
                                TaskArn: {},
                                Type: {},
                                Targets: {
                                    shape: "S18"
                                },
                                TaskParameters: {
                                    shape: "Sf7"
                                },
                                Priority: {
                                    type: "integer"
                                },
                                LoggingInfo: {
                                    shape: "Sfd"
                                },
                                ServiceRoleArn: {},
                                MaxConcurrency: {},
                                MaxErrors: {},
                                Name: {},
                                Description: {
                                    shape: "S4b"
                                },
                                CutoffBehavior: {},
                                AlarmConfiguration: {
                                    shape: "S1z"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindows: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Se4"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowId: {},
                                Name: {},
                                Description: {
                                    shape: "S4b"
                                },
                                Enabled: {
                                    type: "boolean"
                                },
                                Duration: {
                                    type: "integer"
                                },
                                Cutoff: {
                                    type: "integer"
                                },
                                Schedule: {},
                                ScheduleTimezone: {},
                                ScheduleOffset: {
                                    type: "integer"
                                },
                                EndDate: {},
                                StartDate: {},
                                NextExecutionTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMaintenanceWindowsForTarget: {
            input: {
                type: "structure",
                required: [ "Targets", "ResourceType" ],
                members: {
                    Targets: {
                        shape: "S18"
                    },
                    ResourceType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WindowId: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOpsItems: {
            input: {
                type: "structure",
                members: {
                    OpsItemFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values", "Operator" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                },
                                Operator: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    OpsItemSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedBy: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                Priority: {
                                    type: "integer"
                                },
                                Source: {},
                                Status: {},
                                OpsItemId: {},
                                Title: {},
                                OperationalData: {
                                    shape: "S4p"
                                },
                                Category: {},
                                Severity: {},
                                OpsItemType: {},
                                ActualStartTime: {
                                    type: "timestamp"
                                },
                                ActualEndTime: {
                                    type: "timestamp"
                                },
                                PlannedStartTime: {
                                    type: "timestamp"
                                },
                                PlannedEndTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeParameters: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    ParameterFilters: {
                        shape: "Sg7"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {},
                                KeyId: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedUser: {},
                                Description: {},
                                AllowedPattern: {},
                                Version: {
                                    type: "long"
                                },
                                Tier: {},
                                Policies: {
                                    shape: "Sgm"
                                },
                                DataType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePatchBaselines: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sag"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineIdentities: {
                        type: "list",
                        member: {
                            shape: "Sgs"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePatchGroupState: {
            input: {
                type: "structure",
                required: [ "PatchGroup" ],
                members: {
                    PatchGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Instances: {
                        type: "integer"
                    },
                    InstancesWithInstalledPatches: {
                        type: "integer"
                    },
                    InstancesWithInstalledOtherPatches: {
                        type: "integer"
                    },
                    InstancesWithInstalledPendingRebootPatches: {
                        type: "integer"
                    },
                    InstancesWithInstalledRejectedPatches: {
                        type: "integer"
                    },
                    InstancesWithMissingPatches: {
                        type: "integer"
                    },
                    InstancesWithFailedPatches: {
                        type: "integer"
                    },
                    InstancesWithNotApplicablePatches: {
                        type: "integer"
                    },
                    InstancesWithUnreportedNotApplicablePatches: {
                        type: "integer"
                    },
                    InstancesWithCriticalNonCompliantPatches: {
                        type: "integer"
                    },
                    InstancesWithSecurityNonCompliantPatches: {
                        type: "integer"
                    },
                    InstancesWithOtherNonCompliantPatches: {
                        type: "integer"
                    }
                }
            }
        },
        DescribePatchGroups: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "Sag"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Mappings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PatchGroup: {},
                                BaselineIdentity: {
                                    shape: "Sgs"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePatchProperties: {
            input: {
                type: "structure",
                required: [ "OperatingSystem", "Property" ],
                members: {
                    OperatingSystem: {},
                    Property: {},
                    PatchSet: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Properties: {
                        type: "list",
                        member: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSessions: {
            input: {
                type: "structure",
                required: [ "State" ],
                members: {
                    State: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "value" ],
                            members: {
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Sessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SessionId: {},
                                Target: {},
                                Status: {},
                                StartDate: {
                                    type: "timestamp"
                                },
                                EndDate: {
                                    type: "timestamp"
                                },
                                DocumentName: {},
                                Owner: {},
                                Reason: {},
                                Details: {},
                                OutputUrl: {
                                    type: "structure",
                                    members: {
                                        S3OutputUrl: {},
                                        CloudWatchOutputUrl: {}
                                    }
                                },
                                MaxSessionDuration: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateOpsItemRelatedItem: {
            input: {
                type: "structure",
                required: [ "OpsItemId", "AssociationId" ],
                members: {
                    OpsItemId: {},
                    AssociationId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAutomationExecution: {
            input: {
                type: "structure",
                required: [ "AutomationExecutionId" ],
                members: {
                    AutomationExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutomationExecution: {
                        type: "structure",
                        members: {
                            AutomationExecutionId: {},
                            DocumentName: {},
                            DocumentVersion: {},
                            ExecutionStartTime: {
                                type: "timestamp"
                            },
                            ExecutionEndTime: {
                                type: "timestamp"
                            },
                            AutomationExecutionStatus: {},
                            StepExecutions: {
                                shape: "Sa5"
                            },
                            StepExecutionsTruncated: {
                                type: "boolean"
                            },
                            Parameters: {
                                shape: "S9m"
                            },
                            Outputs: {
                                shape: "S9m"
                            },
                            FailureMessage: {},
                            Mode: {},
                            ParentAutomationExecutionId: {},
                            ExecutedBy: {},
                            CurrentStepName: {},
                            CurrentAction: {},
                            TargetParameterName: {},
                            Targets: {
                                shape: "S18"
                            },
                            TargetMaps: {
                                shape: "S25"
                            },
                            ResolvedTargets: {
                                shape: "S9r"
                            },
                            MaxConcurrency: {},
                            MaxErrors: {},
                            Target: {},
                            TargetLocations: {
                                shape: "S1s"
                            },
                            ProgressCounters: {
                                type: "structure",
                                members: {
                                    TotalSteps: {
                                        type: "integer"
                                    },
                                    SuccessSteps: {
                                        type: "integer"
                                    },
                                    FailedSteps: {
                                        type: "integer"
                                    },
                                    CancelledSteps: {
                                        type: "integer"
                                    },
                                    TimedOutSteps: {
                                        type: "integer"
                                    }
                                }
                            },
                            AlarmConfiguration: {
                                shape: "S1z"
                            },
                            TriggeredAlarms: {
                                shape: "S2n"
                            },
                            AutomationSubtype: {},
                            ScheduledTime: {
                                type: "timestamp"
                            },
                            Runbooks: {
                                shape: "S9v"
                            },
                            OpsItemId: {},
                            AssociationId: {},
                            ChangeRequestName: {},
                            Variables: {
                                shape: "S9m"
                            }
                        }
                    }
                }
            }
        },
        GetCalendarState: {
            input: {
                type: "structure",
                required: [ "CalendarNames" ],
                members: {
                    CalendarNames: {
                        shape: "S1q"
                    },
                    AtTime: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {},
                    AtTime: {},
                    NextTransitionTime: {}
                }
            }
        },
        GetCommandInvocation: {
            input: {
                type: "structure",
                required: [ "CommandId", "InstanceId" ],
                members: {
                    CommandId: {},
                    InstanceId: {},
                    PluginName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CommandId: {},
                    InstanceId: {},
                    Comment: {},
                    DocumentName: {},
                    DocumentVersion: {},
                    PluginName: {},
                    ResponseCode: {
                        type: "integer"
                    },
                    ExecutionStartDateTime: {},
                    ExecutionElapsedTime: {},
                    ExecutionEndDateTime: {},
                    Status: {},
                    StatusDetails: {},
                    StandardOutputContent: {},
                    StandardOutputUrl: {},
                    StandardErrorContent: {},
                    StandardErrorUrl: {},
                    CloudWatchOutputConfig: {
                        shape: "Sid"
                    }
                }
            }
        },
        GetConnectionStatus: {
            input: {
                type: "structure",
                required: [ "Target" ],
                members: {
                    Target: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Target: {},
                    Status: {}
                }
            }
        },
        GetDefaultPatchBaseline: {
            input: {
                type: "structure",
                members: {
                    OperatingSystem: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {},
                    OperatingSystem: {}
                }
            }
        },
        GetDeployablePatchSnapshotForInstance: {
            input: {
                type: "structure",
                required: [ "InstanceId", "SnapshotId" ],
                members: {
                    InstanceId: {},
                    SnapshotId: {},
                    BaselineOverride: {
                        type: "structure",
                        members: {
                            OperatingSystem: {},
                            GlobalFilters: {
                                shape: "S5i"
                            },
                            ApprovalRules: {
                                shape: "S5o"
                            },
                            ApprovedPatches: {
                                shape: "S5u"
                            },
                            ApprovedPatchesComplianceLevel: {},
                            RejectedPatches: {
                                shape: "S5u"
                            },
                            RejectedPatchesAction: {},
                            ApprovedPatchesEnableNonSecurity: {
                                type: "boolean"
                            },
                            Sources: {
                                shape: "S5y"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceId: {},
                    SnapshotId: {},
                    SnapshotDownloadUrl: {},
                    Product: {}
                }
            }
        },
        GetDocument: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    VersionName: {},
                    DocumentVersion: {},
                    DocumentFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    CreatedDate: {
                        type: "timestamp"
                    },
                    DisplayName: {},
                    VersionName: {},
                    DocumentVersion: {},
                    Status: {},
                    StatusInformation: {},
                    Content: {},
                    DocumentType: {},
                    DocumentFormat: {},
                    Requires: {
                        shape: "S31"
                    },
                    AttachmentsContent: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Size: {
                                    type: "long"
                                },
                                Hash: {},
                                HashType: {},
                                Url: {}
                            }
                        }
                    },
                    ReviewStatus: {}
                }
            }
        },
        GetInventory: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Siz"
                    },
                    Aggregators: {
                        shape: "Sj5"
                    },
                    ResultAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TypeName" ],
                            members: {
                                TypeName: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Data: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "structure",
                                        required: [ "TypeName", "SchemaVersion", "Content" ],
                                        members: {
                                            TypeName: {},
                                            SchemaVersion: {},
                                            CaptureTime: {},
                                            ContentHash: {},
                                            Content: {
                                                shape: "Sjm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInventorySchema: {
            input: {
                type: "structure",
                members: {
                    TypeName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Aggregator: {
                        type: "boolean"
                    },
                    SubType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TypeName", "Attributes" ],
                            members: {
                                TypeName: {},
                                Version: {},
                                Attributes: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "DataType" ],
                                        members: {
                                            Name: {},
                                            DataType: {}
                                        }
                                    }
                                },
                                DisplayName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId" ],
                members: {
                    WindowId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    StartDate: {},
                    EndDate: {},
                    Schedule: {},
                    ScheduleTimezone: {},
                    ScheduleOffset: {
                        type: "integer"
                    },
                    NextExecutionTime: {},
                    Duration: {
                        type: "integer"
                    },
                    Cutoff: {
                        type: "integer"
                    },
                    AllowUnassociatedTargets: {
                        type: "boolean"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    CreatedDate: {
                        type: "timestamp"
                    },
                    ModifiedDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetMaintenanceWindowExecution: {
            input: {
                type: "structure",
                required: [ "WindowExecutionId" ],
                members: {
                    WindowExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutionId: {},
                    TaskIds: {
                        type: "list",
                        member: {}
                    },
                    Status: {},
                    StatusDetails: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetMaintenanceWindowExecutionTask: {
            input: {
                type: "structure",
                required: [ "WindowExecutionId", "TaskId" ],
                members: {
                    WindowExecutionId: {},
                    TaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutionId: {},
                    TaskExecutionId: {},
                    TaskArn: {},
                    ServiceRole: {},
                    Type: {},
                    TaskParameters: {
                        type: "list",
                        member: {
                            shape: "Sf7"
                        },
                        sensitive: true
                    },
                    Priority: {
                        type: "integer"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    Status: {},
                    StatusDetails: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    AlarmConfiguration: {
                        shape: "S1z"
                    },
                    TriggeredAlarms: {
                        shape: "S2n"
                    }
                }
            }
        },
        GetMaintenanceWindowExecutionTaskInvocation: {
            input: {
                type: "structure",
                required: [ "WindowExecutionId", "TaskId", "InvocationId" ],
                members: {
                    WindowExecutionId: {},
                    TaskId: {},
                    InvocationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowExecutionId: {},
                    TaskExecutionId: {},
                    InvocationId: {},
                    ExecutionId: {},
                    TaskType: {},
                    Parameters: {
                        shape: "Seg"
                    },
                    Status: {},
                    StatusDetails: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    OwnerInformation: {
                        shape: "Sd1"
                    },
                    WindowTargetId: {}
                }
            }
        },
        GetMaintenanceWindowTask: {
            input: {
                type: "structure",
                required: [ "WindowId", "WindowTaskId" ],
                members: {
                    WindowId: {},
                    WindowTaskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    WindowTaskId: {},
                    Targets: {
                        shape: "S18"
                    },
                    TaskArn: {},
                    ServiceRoleArn: {},
                    TaskType: {},
                    TaskParameters: {
                        shape: "Sf7"
                    },
                    TaskInvocationParameters: {
                        shape: "Skd"
                    },
                    Priority: {
                        type: "integer"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    LoggingInfo: {
                        shape: "Sfd"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    CutoffBehavior: {},
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetOpsItem: {
            input: {
                type: "structure",
                required: [ "OpsItemId" ],
                members: {
                    OpsItemId: {},
                    OpsItemArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OpsItem: {
                        type: "structure",
                        members: {
                            CreatedBy: {},
                            OpsItemType: {},
                            CreatedTime: {
                                type: "timestamp"
                            },
                            Description: {},
                            LastModifiedBy: {},
                            LastModifiedTime: {
                                type: "timestamp"
                            },
                            Notifications: {
                                shape: "S4u"
                            },
                            Priority: {
                                type: "integer"
                            },
                            RelatedOpsItems: {
                                shape: "S4y"
                            },
                            Status: {},
                            OpsItemId: {},
                            Version: {},
                            Title: {},
                            Source: {},
                            OperationalData: {
                                shape: "S4p"
                            },
                            Category: {},
                            Severity: {},
                            ActualStartTime: {
                                type: "timestamp"
                            },
                            ActualEndTime: {
                                type: "timestamp"
                            },
                            PlannedStartTime: {
                                type: "timestamp"
                            },
                            PlannedEndTime: {
                                type: "timestamp"
                            },
                            OpsItemArn: {}
                        }
                    }
                }
            }
        },
        GetOpsMetadata: {
            input: {
                type: "structure",
                required: [ "OpsMetadataArn" ],
                members: {
                    OpsMetadataArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceId: {},
                    Metadata: {
                        shape: "S59"
                    },
                    NextToken: {}
                }
            }
        },
        GetOpsSummary: {
            input: {
                type: "structure",
                members: {
                    SyncName: {},
                    Filters: {
                        shape: "Sl0"
                    },
                    Aggregators: {
                        shape: "Sl6"
                    },
                    ResultAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TypeName" ],
                            members: {
                                TypeName: {}
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Data: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "structure",
                                        members: {
                                            CaptureTime: {},
                                            Content: {
                                                type: "list",
                                                member: {
                                                    type: "map",
                                                    key: {},
                                                    value: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetParameter: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    WithDecryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Parameter: {
                        shape: "Sls"
                    }
                }
            }
        },
        GetParameterHistory: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    WithDecryption: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {},
                                KeyId: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedUser: {},
                                Description: {},
                                Value: {
                                    shape: "Slt"
                                },
                                AllowedPattern: {},
                                Version: {
                                    type: "long"
                                },
                                Labels: {
                                    shape: "Slz"
                                },
                                Tier: {},
                                Policies: {
                                    shape: "Sgm"
                                },
                                DataType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetParameters: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "S7m"
                    },
                    WithDecryption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Parameters: {
                        shape: "Sm3"
                    },
                    InvalidParameters: {
                        shape: "S7m"
                    }
                }
            }
        },
        GetParametersByPath: {
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {},
                    Recursive: {
                        type: "boolean"
                    },
                    ParameterFilters: {
                        shape: "Sg7"
                    },
                    WithDecryption: {
                        type: "boolean"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Parameters: {
                        shape: "Sm3"
                    },
                    NextToken: {}
                }
            }
        },
        GetPatchBaseline: {
            input: {
                type: "structure",
                required: [ "BaselineId" ],
                members: {
                    BaselineId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {},
                    Name: {},
                    OperatingSystem: {},
                    GlobalFilters: {
                        shape: "S5i"
                    },
                    ApprovalRules: {
                        shape: "S5o"
                    },
                    ApprovedPatches: {
                        shape: "S5u"
                    },
                    ApprovedPatchesComplianceLevel: {},
                    ApprovedPatchesEnableNonSecurity: {
                        type: "boolean"
                    },
                    RejectedPatches: {
                        shape: "S5u"
                    },
                    RejectedPatchesAction: {},
                    PatchGroups: {
                        type: "list",
                        member: {}
                    },
                    CreatedDate: {
                        type: "timestamp"
                    },
                    ModifiedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Sources: {
                        shape: "S5y"
                    }
                }
            }
        },
        GetPatchBaselineForPatchGroup: {
            input: {
                type: "structure",
                required: [ "PatchGroup" ],
                members: {
                    PatchGroup: {},
                    OperatingSystem: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {},
                    PatchGroup: {},
                    OperatingSystem: {}
                }
            }
        },
        GetResourcePolicies: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Policies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyId: {},
                                PolicyHash: {},
                                Policy: {}
                            }
                        }
                    }
                }
            }
        },
        GetServiceSetting: {
            input: {
                type: "structure",
                required: [ "SettingId" ],
                members: {
                    SettingId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSetting: {
                        shape: "Sml"
                    }
                }
            }
        },
        LabelParameterVersion: {
            input: {
                type: "structure",
                required: [ "Name", "Labels" ],
                members: {
                    Name: {},
                    ParameterVersion: {
                        type: "long"
                    },
                    Labels: {
                        shape: "Slz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InvalidLabels: {
                        shape: "Slz"
                    },
                    ParameterVersion: {
                        type: "long"
                    }
                }
            }
        },
        ListAssociationVersions: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociationId: {},
                                AssociationVersion: {},
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                DocumentVersion: {},
                                Parameters: {
                                    shape: "S14"
                                },
                                Targets: {
                                    shape: "S18"
                                },
                                ScheduleExpression: {},
                                OutputLocation: {
                                    shape: "S1e"
                                },
                                AssociationName: {},
                                MaxErrors: {},
                                MaxConcurrency: {},
                                ComplianceSeverity: {},
                                SyncCompliance: {},
                                ApplyOnlyAtCronInterval: {
                                    type: "boolean"
                                },
                                CalendarNames: {
                                    shape: "S1q"
                                },
                                TargetLocations: {
                                    shape: "S1s"
                                },
                                ScheduleOffset: {
                                    type: "integer"
                                },
                                TargetMaps: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAssociations: {
            input: {
                type: "structure",
                members: {
                    AssociationFilterList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "value" ],
                            members: {
                                key: {},
                                value: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                InstanceId: {},
                                AssociationId: {},
                                AssociationVersion: {},
                                DocumentVersion: {},
                                Targets: {
                                    shape: "S18"
                                },
                                LastExecutionDate: {
                                    type: "timestamp"
                                },
                                Overview: {
                                    shape: "S2i"
                                },
                                ScheduleExpression: {},
                                AssociationName: {},
                                ScheduleOffset: {
                                    type: "integer"
                                },
                                TargetMaps: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCommandInvocations: {
            input: {
                type: "structure",
                members: {
                    CommandId: {},
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "Sn3"
                    },
                    Details: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CommandInvocations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CommandId: {},
                                InstanceId: {},
                                InstanceName: {},
                                Comment: {},
                                DocumentName: {},
                                DocumentVersion: {},
                                RequestedDateTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                StatusDetails: {},
                                TraceOutput: {},
                                StandardOutputUrl: {},
                                StandardErrorUrl: {},
                                CommandPlugins: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Status: {},
                                            StatusDetails: {},
                                            ResponseCode: {
                                                type: "integer"
                                            },
                                            ResponseStartDateTime: {
                                                type: "timestamp"
                                            },
                                            ResponseFinishDateTime: {
                                                type: "timestamp"
                                            },
                                            Output: {},
                                            StandardOutputUrl: {},
                                            StandardErrorUrl: {},
                                            OutputS3Region: {},
                                            OutputS3BucketName: {},
                                            OutputS3KeyPrefix: {}
                                        }
                                    }
                                },
                                ServiceRole: {},
                                NotificationConfig: {
                                    shape: "Skf"
                                },
                                CloudWatchOutputConfig: {
                                    shape: "Sid"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCommands: {
            input: {
                type: "structure",
                members: {
                    CommandId: {},
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        shape: "Sn3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Commands: {
                        type: "list",
                        member: {
                            shape: "Snj"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComplianceItems: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Snq"
                    },
                    ResourceIds: {
                        type: "list",
                        member: {}
                    },
                    ResourceTypes: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComplianceItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComplianceType: {},
                                ResourceType: {},
                                ResourceId: {},
                                Id: {},
                                Title: {},
                                Status: {},
                                Severity: {},
                                ExecutionSummary: {
                                    shape: "So8"
                                },
                                Details: {
                                    shape: "Sob"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListComplianceSummaries: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Snq"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ComplianceSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComplianceType: {},
                                CompliantSummary: {
                                    shape: "Sog"
                                },
                                NonCompliantSummary: {
                                    shape: "Soj"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocumentMetadataHistory: {
            input: {
                type: "structure",
                required: [ "Name", "Metadata" ],
                members: {
                    Name: {},
                    DocumentVersion: {},
                    Metadata: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    DocumentVersion: {},
                    Author: {},
                    Metadata: {
                        type: "structure",
                        members: {
                            ReviewerResponse: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CreateTime: {
                                            type: "timestamp"
                                        },
                                        UpdatedTime: {
                                            type: "timestamp"
                                        },
                                        ReviewStatus: {},
                                        Comment: {
                                            shape: "Soq"
                                        },
                                        Reviewer: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocumentVersions: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                DisplayName: {},
                                DocumentVersion: {},
                                VersionName: {},
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                IsDefaultVersion: {
                                    type: "boolean"
                                },
                                DocumentFormat: {},
                                Status: {},
                                StatusInformation: {},
                                ReviewStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocuments: {
            input: {
                type: "structure",
                members: {
                    DocumentFilterList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "key", "value" ],
                            members: {
                                key: {},
                                value: {}
                            }
                        }
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentIdentifiers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                DisplayName: {},
                                Owner: {},
                                VersionName: {},
                                PlatformTypes: {
                                    shape: "S3v"
                                },
                                DocumentVersion: {},
                                DocumentType: {},
                                SchemaVersion: {},
                                DocumentFormat: {},
                                TargetType: {},
                                Tags: {
                                    shape: "S4"
                                },
                                Requires: {
                                    shape: "S31"
                                },
                                ReviewStatus: {},
                                Author: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInventoryEntries: {
            input: {
                type: "structure",
                required: [ "InstanceId", "TypeName" ],
                members: {
                    InstanceId: {},
                    TypeName: {},
                    Filters: {
                        shape: "Siz"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    InstanceId: {},
                    SchemaVersion: {},
                    CaptureTime: {},
                    Entries: {
                        shape: "Sjm"
                    },
                    NextToken: {}
                }
            }
        },
        ListOpsItemEvents: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values", "Operator" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                },
                                Operator: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OpsItemId: {},
                                EventId: {},
                                Source: {},
                                DetailType: {},
                                Detail: {},
                                CreatedBy: {
                                    shape: "Spo"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListOpsItemRelatedItems: {
            input: {
                type: "structure",
                members: {
                    OpsItemId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values", "Operator" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                },
                                Operator: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                OpsItemId: {},
                                AssociationId: {},
                                ResourceType: {},
                                AssociationType: {},
                                ResourceUri: {},
                                CreatedBy: {
                                    shape: "Spo"
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {
                                    shape: "Spo"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListOpsMetadata: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key", "Values" ],
                            members: {
                                Key: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OpsMetadataList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {},
                                OpsMetadataArn: {},
                                LastModifiedDate: {
                                    type: "timestamp"
                                },
                                LastModifiedUser: {},
                                CreationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceComplianceSummaries: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Snq"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceComplianceSummaryItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ComplianceType: {},
                                ResourceType: {},
                                ResourceId: {},
                                Status: {},
                                OverallSeverity: {},
                                ExecutionSummary: {
                                    shape: "So8"
                                },
                                CompliantSummary: {
                                    shape: "Sog"
                                },
                                NonCompliantSummary: {
                                    shape: "Soj"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceDataSync: {
            input: {
                type: "structure",
                members: {
                    SyncType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceDataSyncItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SyncName: {},
                                SyncType: {},
                                SyncSource: {
                                    type: "structure",
                                    members: {
                                        SourceType: {},
                                        AwsOrganizationsSource: {
                                            shape: "S6j"
                                        },
                                        SourceRegions: {
                                            shape: "S6o"
                                        },
                                        IncludeFutureRegions: {
                                            type: "boolean"
                                        },
                                        State: {},
                                        EnableAllOpsDataSources: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                S3Destination: {
                                    shape: "S68"
                                },
                                LastSyncTime: {
                                    type: "timestamp"
                                },
                                LastSuccessfulSyncTime: {
                                    type: "timestamp"
                                },
                                SyncLastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastStatus: {},
                                SyncCreatedTime: {
                                    type: "timestamp"
                                },
                                LastSyncStatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceType", "ResourceId" ],
                members: {
                    ResourceType: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "S4"
                    }
                }
            }
        },
        ModifyDocumentPermission: {
            input: {
                type: "structure",
                required: [ "Name", "PermissionType" ],
                members: {
                    Name: {},
                    PermissionType: {},
                    AccountIdsToAdd: {
                        shape: "Sbj"
                    },
                    AccountIdsToRemove: {
                        shape: "Sbj"
                    },
                    SharedDocumentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutComplianceItems: {
            input: {
                type: "structure",
                required: [ "ResourceId", "ResourceType", "ComplianceType", "ExecutionSummary", "Items" ],
                members: {
                    ResourceId: {},
                    ResourceType: {},
                    ComplianceType: {},
                    ExecutionSummary: {
                        shape: "So8"
                    },
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Severity", "Status" ],
                            members: {
                                Id: {},
                                Title: {},
                                Severity: {},
                                Status: {},
                                Details: {
                                    shape: "Sob"
                                }
                            }
                        }
                    },
                    ItemContentHash: {},
                    UploadType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutInventory: {
            input: {
                type: "structure",
                required: [ "InstanceId", "Items" ],
                members: {
                    InstanceId: {},
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TypeName", "SchemaVersion", "CaptureTime" ],
                            members: {
                                TypeName: {},
                                SchemaVersion: {},
                                CaptureTime: {},
                                ContentHash: {},
                                Content: {
                                    shape: "Sjm"
                                },
                                Context: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Message: {}
                }
            }
        },
        PutParameter: {
            input: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Description: {},
                    Value: {
                        shape: "Slt"
                    },
                    Type: {},
                    KeyId: {},
                    Overwrite: {
                        type: "boolean"
                    },
                    AllowedPattern: {},
                    Tags: {
                        shape: "S4"
                    },
                    Tier: {},
                    Policies: {},
                    DataType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Version: {
                        type: "long"
                    },
                    Tier: {}
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {},
                    PolicyId: {},
                    PolicyHash: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyId: {},
                    PolicyHash: {}
                }
            }
        },
        RegisterDefaultPatchBaseline: {
            input: {
                type: "structure",
                required: [ "BaselineId" ],
                members: {
                    BaselineId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {}
                }
            }
        },
        RegisterPatchBaselineForPatchGroup: {
            input: {
                type: "structure",
                required: [ "BaselineId", "PatchGroup" ],
                members: {
                    BaselineId: {},
                    PatchGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {},
                    PatchGroup: {}
                }
            }
        },
        RegisterTargetWithMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId", "ResourceType", "Targets" ],
                members: {
                    WindowId: {},
                    ResourceType: {},
                    Targets: {
                        shape: "S18"
                    },
                    OwnerInformation: {
                        shape: "Sd1"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowTargetId: {}
                }
            }
        },
        RegisterTaskWithMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId", "TaskArn", "TaskType" ],
                members: {
                    WindowId: {},
                    Targets: {
                        shape: "S18"
                    },
                    TaskArn: {},
                    ServiceRoleArn: {},
                    TaskType: {},
                    TaskParameters: {
                        shape: "Sf7"
                    },
                    TaskInvocationParameters: {
                        shape: "Skd"
                    },
                    Priority: {
                        type: "integer"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    LoggingInfo: {
                        shape: "Sfd"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    CutoffBehavior: {},
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowTaskId: {}
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceType", "ResourceId", "TagKeys" ],
                members: {
                    ResourceType: {},
                    ResourceId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ResetServiceSetting: {
            input: {
                type: "structure",
                required: [ "SettingId" ],
                members: {
                    SettingId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ServiceSetting: {
                        shape: "Sml"
                    }
                }
            }
        },
        ResumeSession: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {},
                    TokenValue: {},
                    StreamUrl: {}
                }
            }
        },
        SendAutomationSignal: {
            input: {
                type: "structure",
                required: [ "AutomationExecutionId", "SignalType" ],
                members: {
                    AutomationExecutionId: {},
                    SignalType: {},
                    Payload: {
                        shape: "S9m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendCommand: {
            input: {
                type: "structure",
                required: [ "DocumentName" ],
                members: {
                    InstanceIds: {
                        shape: "Si"
                    },
                    Targets: {
                        shape: "S18"
                    },
                    DocumentName: {},
                    DocumentVersion: {},
                    DocumentHash: {},
                    DocumentHashType: {},
                    TimeoutSeconds: {
                        type: "integer"
                    },
                    Comment: {},
                    Parameters: {
                        shape: "S14"
                    },
                    OutputS3Region: {},
                    OutputS3BucketName: {},
                    OutputS3KeyPrefix: {},
                    MaxConcurrency: {},
                    MaxErrors: {},
                    ServiceRoleArn: {},
                    NotificationConfig: {
                        shape: "Skf"
                    },
                    CloudWatchOutputConfig: {
                        shape: "Sid"
                    },
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Command: {
                        shape: "Snj"
                    }
                }
            }
        },
        StartAssociationsOnce: {
            input: {
                type: "structure",
                required: [ "AssociationIds" ],
                members: {
                    AssociationIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartAutomationExecution: {
            input: {
                type: "structure",
                required: [ "DocumentName" ],
                members: {
                    DocumentName: {},
                    DocumentVersion: {},
                    Parameters: {
                        shape: "S9m"
                    },
                    ClientToken: {},
                    Mode: {},
                    TargetParameterName: {},
                    Targets: {
                        shape: "S18"
                    },
                    TargetMaps: {
                        shape: "S25"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    TargetLocations: {
                        shape: "S1s"
                    },
                    Tags: {
                        shape: "S4"
                    },
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AutomationExecutionId: {}
                }
            }
        },
        StartChangeRequestExecution: {
            input: {
                type: "structure",
                required: [ "DocumentName", "Runbooks" ],
                members: {
                    ScheduledTime: {
                        type: "timestamp"
                    },
                    DocumentName: {},
                    DocumentVersion: {},
                    Parameters: {
                        shape: "S9m"
                    },
                    ChangeRequestName: {},
                    ClientToken: {},
                    AutoApprove: {
                        type: "boolean"
                    },
                    Runbooks: {
                        shape: "S9v"
                    },
                    Tags: {
                        shape: "S4"
                    },
                    ScheduledEndTime: {
                        type: "timestamp"
                    },
                    ChangeDetails: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutomationExecutionId: {}
                }
            }
        },
        StartSession: {
            input: {
                type: "structure",
                required: [ "Target" ],
                members: {
                    Target: {},
                    DocumentName: {},
                    Reason: {},
                    Parameters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {},
                    TokenValue: {},
                    StreamUrl: {}
                }
            }
        },
        StopAutomationExecution: {
            input: {
                type: "structure",
                required: [ "AutomationExecutionId" ],
                members: {
                    AutomationExecutionId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TerminateSession: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {}
                }
            }
        },
        UnlabelParameterVersion: {
            input: {
                type: "structure",
                required: [ "Name", "ParameterVersion", "Labels" ],
                members: {
                    Name: {},
                    ParameterVersion: {
                        type: "long"
                    },
                    Labels: {
                        shape: "Slz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RemovedLabels: {
                        shape: "Slz"
                    },
                    InvalidLabels: {
                        shape: "Slz"
                    }
                }
            }
        },
        UpdateAssociation: {
            input: {
                type: "structure",
                required: [ "AssociationId" ],
                members: {
                    AssociationId: {},
                    Parameters: {
                        shape: "S14"
                    },
                    DocumentVersion: {},
                    ScheduleExpression: {},
                    OutputLocation: {
                        shape: "S1e"
                    },
                    Name: {},
                    Targets: {
                        shape: "S18"
                    },
                    AssociationName: {},
                    AssociationVersion: {},
                    AutomationTargetParameterName: {},
                    MaxErrors: {},
                    MaxConcurrency: {},
                    ComplianceSeverity: {},
                    SyncCompliance: {},
                    ApplyOnlyAtCronInterval: {
                        type: "boolean"
                    },
                    CalendarNames: {
                        shape: "S1q"
                    },
                    TargetLocations: {
                        shape: "S1s"
                    },
                    ScheduleOffset: {
                        type: "integer"
                    },
                    TargetMaps: {
                        shape: "S25"
                    },
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationDescription: {
                        shape: "S2b"
                    }
                }
            }
        },
        UpdateAssociationStatus: {
            input: {
                type: "structure",
                required: [ "Name", "InstanceId", "AssociationStatus" ],
                members: {
                    Name: {},
                    InstanceId: {},
                    AssociationStatus: {
                        shape: "S2e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationDescription: {
                        shape: "S2b"
                    }
                }
            }
        },
        UpdateDocument: {
            input: {
                type: "structure",
                required: [ "Content", "Name" ],
                members: {
                    Content: {},
                    Attachments: {
                        shape: "S35"
                    },
                    Name: {},
                    DisplayName: {},
                    VersionName: {},
                    DocumentVersion: {},
                    DocumentFormat: {},
                    TargetType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentDescription: {
                        shape: "S3h"
                    }
                }
            }
        },
        UpdateDocumentDefaultVersion: {
            input: {
                type: "structure",
                required: [ "Name", "DocumentVersion" ],
                members: {
                    Name: {},
                    DocumentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Description: {
                        type: "structure",
                        members: {
                            Name: {},
                            DefaultVersion: {},
                            DefaultVersionName: {}
                        }
                    }
                }
            }
        },
        UpdateDocumentMetadata: {
            input: {
                type: "structure",
                required: [ "Name", "DocumentReviews" ],
                members: {
                    Name: {},
                    DocumentVersion: {},
                    DocumentReviews: {
                        type: "structure",
                        required: [ "Action" ],
                        members: {
                            Action: {},
                            Comment: {
                                shape: "Soq"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMaintenanceWindow: {
            input: {
                type: "structure",
                required: [ "WindowId" ],
                members: {
                    WindowId: {},
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    StartDate: {},
                    EndDate: {},
                    Schedule: {},
                    ScheduleTimezone: {},
                    ScheduleOffset: {
                        type: "integer"
                    },
                    Duration: {
                        type: "integer"
                    },
                    Cutoff: {
                        type: "integer"
                    },
                    AllowUnassociatedTargets: {
                        type: "boolean"
                    },
                    Enabled: {
                        type: "boolean"
                    },
                    Replace: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    StartDate: {},
                    EndDate: {},
                    Schedule: {},
                    ScheduleTimezone: {},
                    ScheduleOffset: {
                        type: "integer"
                    },
                    Duration: {
                        type: "integer"
                    },
                    Cutoff: {
                        type: "integer"
                    },
                    AllowUnassociatedTargets: {
                        type: "boolean"
                    },
                    Enabled: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateMaintenanceWindowTarget: {
            input: {
                type: "structure",
                required: [ "WindowId", "WindowTargetId" ],
                members: {
                    WindowId: {},
                    WindowTargetId: {},
                    Targets: {
                        shape: "S18"
                    },
                    OwnerInformation: {
                        shape: "Sd1"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    Replace: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    WindowTargetId: {},
                    Targets: {
                        shape: "S18"
                    },
                    OwnerInformation: {
                        shape: "Sd1"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    }
                }
            }
        },
        UpdateMaintenanceWindowTask: {
            input: {
                type: "structure",
                required: [ "WindowId", "WindowTaskId" ],
                members: {
                    WindowId: {},
                    WindowTaskId: {},
                    Targets: {
                        shape: "S18"
                    },
                    TaskArn: {},
                    ServiceRoleArn: {},
                    TaskParameters: {
                        shape: "Sf7"
                    },
                    TaskInvocationParameters: {
                        shape: "Skd"
                    },
                    Priority: {
                        type: "integer"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    LoggingInfo: {
                        shape: "Sfd"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    Replace: {
                        type: "boolean"
                    },
                    CutoffBehavior: {},
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WindowId: {},
                    WindowTaskId: {},
                    Targets: {
                        shape: "S18"
                    },
                    TaskArn: {},
                    ServiceRoleArn: {},
                    TaskParameters: {
                        shape: "Sf7"
                    },
                    TaskInvocationParameters: {
                        shape: "Skd"
                    },
                    Priority: {
                        type: "integer"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    LoggingInfo: {
                        shape: "Sfd"
                    },
                    Name: {},
                    Description: {
                        shape: "S4b"
                    },
                    CutoffBehavior: {},
                    AlarmConfiguration: {
                        shape: "S1z"
                    }
                }
            }
        },
        UpdateManagedInstanceRole: {
            input: {
                type: "structure",
                required: [ "InstanceId", "IamRole" ],
                members: {
                    InstanceId: {},
                    IamRole: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOpsItem: {
            input: {
                type: "structure",
                required: [ "OpsItemId" ],
                members: {
                    Description: {},
                    OperationalData: {
                        shape: "S4p"
                    },
                    OperationalDataToDelete: {
                        type: "list",
                        member: {}
                    },
                    Notifications: {
                        shape: "S4u"
                    },
                    Priority: {
                        type: "integer"
                    },
                    RelatedOpsItems: {
                        shape: "S4y"
                    },
                    Status: {},
                    OpsItemId: {},
                    Title: {},
                    Category: {},
                    Severity: {},
                    ActualStartTime: {
                        type: "timestamp"
                    },
                    ActualEndTime: {
                        type: "timestamp"
                    },
                    PlannedStartTime: {
                        type: "timestamp"
                    },
                    PlannedEndTime: {
                        type: "timestamp"
                    },
                    OpsItemArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateOpsMetadata: {
            input: {
                type: "structure",
                required: [ "OpsMetadataArn" ],
                members: {
                    OpsMetadataArn: {},
                    MetadataToUpdate: {
                        shape: "S59"
                    },
                    KeysToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OpsMetadataArn: {}
                }
            }
        },
        UpdatePatchBaseline: {
            input: {
                type: "structure",
                required: [ "BaselineId" ],
                members: {
                    BaselineId: {},
                    Name: {},
                    GlobalFilters: {
                        shape: "S5i"
                    },
                    ApprovalRules: {
                        shape: "S5o"
                    },
                    ApprovedPatches: {
                        shape: "S5u"
                    },
                    ApprovedPatchesComplianceLevel: {},
                    ApprovedPatchesEnableNonSecurity: {
                        type: "boolean"
                    },
                    RejectedPatches: {
                        shape: "S5u"
                    },
                    RejectedPatchesAction: {},
                    Description: {},
                    Sources: {
                        shape: "S5y"
                    },
                    Replace: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BaselineId: {},
                    Name: {},
                    OperatingSystem: {},
                    GlobalFilters: {
                        shape: "S5i"
                    },
                    ApprovalRules: {
                        shape: "S5o"
                    },
                    ApprovedPatches: {
                        shape: "S5u"
                    },
                    ApprovedPatchesComplianceLevel: {},
                    ApprovedPatchesEnableNonSecurity: {
                        type: "boolean"
                    },
                    RejectedPatches: {
                        shape: "S5u"
                    },
                    RejectedPatchesAction: {},
                    CreatedDate: {
                        type: "timestamp"
                    },
                    ModifiedDate: {
                        type: "timestamp"
                    },
                    Description: {},
                    Sources: {
                        shape: "S5y"
                    }
                }
            }
        },
        UpdateResourceDataSync: {
            input: {
                type: "structure",
                required: [ "SyncName", "SyncType", "SyncSource" ],
                members: {
                    SyncName: {},
                    SyncType: {},
                    SyncSource: {
                        shape: "S6h"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServiceSetting: {
            input: {
                type: "structure",
                required: [ "SettingId", "SettingValue" ],
                members: {
                    SettingId: {},
                    SettingValue: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Si: {
            type: "list",
            member: {}
        },
        S14: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            },
            sensitive: true
        },
        S18: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            members: {
                S3Location: {
                    type: "structure",
                    members: {
                        OutputS3Region: {},
                        OutputS3BucketName: {},
                        OutputS3KeyPrefix: {}
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {}
        },
        S1s: {
            type: "list",
            member: {
                shape: "S1t"
            }
        },
        S1t: {
            type: "structure",
            members: {
                Accounts: {
                    type: "list",
                    member: {}
                },
                Regions: {
                    type: "list",
                    member: {}
                },
                TargetLocationMaxConcurrency: {},
                TargetLocationMaxErrors: {},
                ExecutionRoleName: {},
                TargetLocationAlarmConfiguration: {
                    shape: "S1z"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "Alarms" ],
            members: {
                IgnorePollAlarmFailure: {
                    type: "boolean"
                },
                Alarms: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {}
                        }
                    }
                }
            }
        },
        S25: {
            type: "list",
            member: {
                type: "map",
                key: {},
                value: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                Name: {},
                InstanceId: {},
                AssociationVersion: {},
                Date: {
                    type: "timestamp"
                },
                LastUpdateAssociationDate: {
                    type: "timestamp"
                },
                Status: {
                    shape: "S2e"
                },
                Overview: {
                    shape: "S2i"
                },
                DocumentVersion: {},
                AutomationTargetParameterName: {},
                Parameters: {
                    shape: "S14"
                },
                AssociationId: {},
                Targets: {
                    shape: "S18"
                },
                ScheduleExpression: {},
                OutputLocation: {
                    shape: "S1e"
                },
                LastExecutionDate: {
                    type: "timestamp"
                },
                LastSuccessfulExecutionDate: {
                    type: "timestamp"
                },
                AssociationName: {},
                MaxErrors: {},
                MaxConcurrency: {},
                ComplianceSeverity: {},
                SyncCompliance: {},
                ApplyOnlyAtCronInterval: {
                    type: "boolean"
                },
                CalendarNames: {
                    shape: "S1q"
                },
                TargetLocations: {
                    shape: "S1s"
                },
                ScheduleOffset: {
                    type: "integer"
                },
                TargetMaps: {
                    shape: "S25"
                },
                AlarmConfiguration: {
                    shape: "S1z"
                },
                TriggeredAlarms: {
                    shape: "S2n"
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "Date", "Name", "Message" ],
            members: {
                Date: {
                    type: "timestamp"
                },
                Name: {},
                Message: {},
                AdditionalInfo: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                Status: {},
                DetailedStatus: {},
                AssociationStatusAggregatedCount: {
                    type: "map",
                    key: {},
                    value: {
                        type: "integer"
                    }
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "State" ],
                members: {
                    Name: {},
                    State: {}
                }
            }
        },
        S2s: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                InstanceId: {},
                Parameters: {
                    shape: "S14"
                },
                AutomationTargetParameterName: {},
                DocumentVersion: {},
                Targets: {
                    shape: "S18"
                },
                ScheduleExpression: {},
                OutputLocation: {
                    shape: "S1e"
                },
                AssociationName: {},
                MaxErrors: {},
                MaxConcurrency: {},
                ComplianceSeverity: {},
                SyncCompliance: {},
                ApplyOnlyAtCronInterval: {
                    type: "boolean"
                },
                CalendarNames: {
                    shape: "S1q"
                },
                TargetLocations: {
                    shape: "S1s"
                },
                ScheduleOffset: {
                    type: "integer"
                },
                TargetMaps: {
                    shape: "S25"
                },
                AlarmConfiguration: {
                    shape: "S1z"
                }
            }
        },
        S31: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Version: {},
                    RequireType: {},
                    VersionName: {}
                }
            }
        },
        S35: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    },
                    Name: {}
                }
            }
        },
        S3h: {
            type: "structure",
            members: {
                Sha1: {},
                Hash: {},
                HashType: {},
                Name: {},
                DisplayName: {},
                VersionName: {},
                Owner: {},
                CreatedDate: {
                    type: "timestamp"
                },
                Status: {},
                StatusInformation: {},
                DocumentVersion: {},
                Description: {},
                Parameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {},
                            Type: {},
                            Description: {},
                            DefaultValue: {}
                        }
                    }
                },
                PlatformTypes: {
                    shape: "S3v"
                },
                DocumentType: {},
                SchemaVersion: {},
                LatestVersion: {},
                DefaultVersion: {},
                DocumentFormat: {},
                TargetType: {},
                Tags: {
                    shape: "S4"
                },
                AttachmentsInformation: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    }
                },
                Requires: {
                    shape: "S31"
                },
                Author: {},
                ReviewInformation: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ReviewedTime: {
                                type: "timestamp"
                            },
                            Status: {},
                            Reviewer: {}
                        }
                    }
                },
                ApprovedVersion: {},
                PendingReviewVersion: {},
                ReviewStatus: {},
                Category: {
                    type: "list",
                    member: {}
                },
                CategoryEnum: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3v: {
            type: "list",
            member: {}
        },
        S4b: {
            type: "string",
            sensitive: true
        },
        S4p: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Value: {},
                    Type: {}
                }
            }
        },
        S4u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        S4y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "OpsItemId" ],
                members: {
                    OpsItemId: {}
                }
            }
        },
        S59: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Value: {}
                }
            }
        },
        S5i: {
            type: "structure",
            required: [ "PatchFilters" ],
            members: {
                PatchFilters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key", "Values" ],
                        members: {
                            Key: {},
                            Values: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S5o: {
            type: "structure",
            required: [ "PatchRules" ],
            members: {
                PatchRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "PatchFilterGroup" ],
                        members: {
                            PatchFilterGroup: {
                                shape: "S5i"
                            },
                            ComplianceLevel: {},
                            ApproveAfterDays: {
                                type: "integer"
                            },
                            ApproveUntilDate: {},
                            EnableNonSecurity: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S5u: {
            type: "list",
            member: {}
        },
        S5y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Products", "Configuration" ],
                members: {
                    Name: {},
                    Products: {
                        type: "list",
                        member: {}
                    },
                    Configuration: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S68: {
            type: "structure",
            required: [ "BucketName", "SyncFormat", "Region" ],
            members: {
                BucketName: {},
                Prefix: {},
                SyncFormat: {},
                Region: {},
                AWSKMSKeyARN: {},
                DestinationDataSharing: {
                    type: "structure",
                    members: {
                        DestinationDataSharingType: {}
                    }
                }
            }
        },
        S6h: {
            type: "structure",
            required: [ "SourceType", "SourceRegions" ],
            members: {
                SourceType: {},
                AwsOrganizationsSource: {
                    shape: "S6j"
                },
                SourceRegions: {
                    shape: "S6o"
                },
                IncludeFutureRegions: {
                    type: "boolean"
                },
                EnableAllOpsDataSources: {
                    type: "boolean"
                }
            }
        },
        S6j: {
            type: "structure",
            required: [ "OrganizationSourceType" ],
            members: {
                OrganizationSourceType: {},
                OrganizationalUnits: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            OrganizationalUnitId: {}
                        }
                    }
                }
            }
        },
        S6o: {
            type: "list",
            member: {}
        },
        S75: {
            type: "structure",
            members: {
                TotalCount: {
                    type: "integer"
                },
                RemainingCount: {
                    type: "integer"
                },
                SummaryItems: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Version: {},
                            Count: {
                                type: "integer"
                            },
                            RemainingCount: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S7m: {
            type: "list",
            member: {}
        },
        S9m: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        },
        S9r: {
            type: "structure",
            members: {
                ParameterValues: {
                    type: "list",
                    member: {}
                },
                Truncated: {
                    type: "boolean"
                }
            }
        },
        S9v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DocumentName" ],
                members: {
                    DocumentName: {},
                    DocumentVersion: {},
                    Parameters: {
                        shape: "S9m"
                    },
                    TargetParameterName: {},
                    Targets: {
                        shape: "S18"
                    },
                    TargetMaps: {
                        shape: "S25"
                    },
                    MaxConcurrency: {},
                    MaxErrors: {},
                    TargetLocations: {
                        shape: "S1s"
                    }
                }
            }
        },
        Sa5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StepName: {},
                    Action: {},
                    TimeoutSeconds: {
                        type: "long"
                    },
                    OnFailure: {},
                    MaxAttempts: {
                        type: "integer"
                    },
                    ExecutionStartTime: {
                        type: "timestamp"
                    },
                    ExecutionEndTime: {
                        type: "timestamp"
                    },
                    StepStatus: {},
                    ResponseCode: {},
                    Inputs: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    Outputs: {
                        shape: "S9m"
                    },
                    Response: {},
                    FailureMessage: {},
                    FailureDetails: {
                        type: "structure",
                        members: {
                            FailureStage: {},
                            FailureType: {},
                            Details: {
                                shape: "S9m"
                            }
                        }
                    },
                    StepExecutionId: {},
                    OverriddenParameters: {
                        shape: "S9m"
                    },
                    IsEnd: {
                        type: "boolean"
                    },
                    NextStep: {},
                    IsCritical: {
                        type: "boolean"
                    },
                    ValidNextSteps: {
                        type: "list",
                        member: {}
                    },
                    Targets: {
                        shape: "S18"
                    },
                    TargetLocation: {
                        shape: "S1t"
                    },
                    TriggeredAlarms: {
                        shape: "S2n"
                    },
                    ParentStepDetails: {
                        type: "structure",
                        members: {
                            StepExecutionId: {},
                            StepName: {},
                            Action: {},
                            Iteration: {
                                type: "integer"
                            },
                            IteratorValue: {}
                        }
                    }
                }
            }
        },
        Sag: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sao: {
            type: "structure",
            members: {
                Id: {},
                ReleaseDate: {
                    type: "timestamp"
                },
                Title: {},
                Description: {},
                ContentUrl: {},
                Vendor: {},
                ProductFamily: {},
                Product: {},
                Classification: {},
                MsrcSeverity: {},
                KbNumber: {},
                MsrcNumber: {},
                Language: {},
                AdvisoryIds: {
                    type: "list",
                    member: {}
                },
                BugzillaIds: {
                    type: "list",
                    member: {}
                },
                CVEIds: {
                    type: "list",
                    member: {}
                },
                Name: {},
                Epoch: {
                    type: "integer"
                },
                Version: {},
                Release: {},
                Arch: {},
                Severity: {},
                Repository: {}
            }
        },
        Sbj: {
            type: "list",
            member: {}
        },
        Scc: {
            type: "list",
            member: {}
        },
        Scy: {
            type: "structure",
            required: [ "InstanceId", "PatchGroup", "BaselineId", "OperationStartTime", "OperationEndTime", "Operation" ],
            members: {
                InstanceId: {},
                PatchGroup: {},
                BaselineId: {},
                SnapshotId: {},
                InstallOverrideList: {},
                OwnerInformation: {
                    shape: "Sd1"
                },
                InstalledCount: {
                    type: "integer"
                },
                InstalledOtherCount: {
                    type: "integer"
                },
                InstalledPendingRebootCount: {
                    type: "integer"
                },
                InstalledRejectedCount: {
                    type: "integer"
                },
                MissingCount: {
                    type: "integer"
                },
                FailedCount: {
                    type: "integer"
                },
                UnreportedNotApplicableCount: {
                    type: "integer"
                },
                NotApplicableCount: {
                    type: "integer"
                },
                OperationStartTime: {
                    type: "timestamp"
                },
                OperationEndTime: {
                    type: "timestamp"
                },
                Operation: {},
                LastNoRebootInstallOperationTime: {
                    type: "timestamp"
                },
                RebootOption: {},
                CriticalNonCompliantCount: {
                    type: "integer"
                },
                SecurityNonCompliantCount: {
                    type: "integer"
                },
                OtherNonCompliantCount: {
                    type: "integer"
                }
            }
        },
        Sd1: {
            type: "string",
            sensitive: true
        },
        Se4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Seg: {
            type: "string",
            sensitive: true
        },
        Sf7: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Values: {
                        type: "list",
                        member: {
                            type: "string",
                            sensitive: true
                        },
                        sensitive: true
                    }
                },
                sensitive: true
            },
            sensitive: true
        },
        Sfd: {
            type: "structure",
            required: [ "S3BucketName", "S3Region" ],
            members: {
                S3BucketName: {},
                S3KeyPrefix: {},
                S3Region: {}
            }
        },
        Sg7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Option: {},
                    Values: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sgm: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PolicyText: {},
                    PolicyType: {},
                    PolicyStatus: {}
                }
            }
        },
        Sgs: {
            type: "structure",
            members: {
                BaselineId: {},
                BaselineName: {},
                OperatingSystem: {},
                BaselineDescription: {},
                DefaultBaseline: {
                    type: "boolean"
                }
            }
        },
        Sid: {
            type: "structure",
            members: {
                CloudWatchLogGroupName: {},
                CloudWatchOutputEnabled: {
                    type: "boolean"
                }
            }
        },
        Siz: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Values" ],
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    },
                    Type: {}
                }
            }
        },
        Sj5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Expression: {},
                    Aggregators: {
                        shape: "Sj5"
                    },
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Filters" ],
                            members: {
                                Name: {},
                                Filters: {
                                    shape: "Siz"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sjm: {
            type: "list",
            member: {
                type: "map",
                key: {},
                value: {}
            }
        },
        Skd: {
            type: "structure",
            members: {
                RunCommand: {
                    type: "structure",
                    members: {
                        Comment: {},
                        CloudWatchOutputConfig: {
                            shape: "Sid"
                        },
                        DocumentHash: {},
                        DocumentHashType: {},
                        DocumentVersion: {},
                        NotificationConfig: {
                            shape: "Skf"
                        },
                        OutputS3BucketName: {},
                        OutputS3KeyPrefix: {},
                        Parameters: {
                            shape: "S14"
                        },
                        ServiceRoleArn: {},
                        TimeoutSeconds: {
                            type: "integer"
                        }
                    }
                },
                Automation: {
                    type: "structure",
                    members: {
                        DocumentVersion: {},
                        Parameters: {
                            shape: "S9m"
                        }
                    }
                },
                StepFunctions: {
                    type: "structure",
                    members: {
                        Input: {
                            type: "string",
                            sensitive: true
                        },
                        Name: {}
                    }
                },
                Lambda: {
                    type: "structure",
                    members: {
                        ClientContext: {},
                        Qualifier: {},
                        Payload: {
                            type: "blob",
                            sensitive: true
                        }
                    }
                }
            }
        },
        Skf: {
            type: "structure",
            members: {
                NotificationArn: {},
                NotificationEvents: {
                    type: "list",
                    member: {}
                },
                NotificationType: {}
            }
        },
        Sl0: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Values" ],
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    },
                    Type: {}
                }
            }
        },
        Sl6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AggregatorType: {},
                    TypeName: {},
                    AttributeName: {},
                    Values: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    Filters: {
                        shape: "Sl0"
                    },
                    Aggregators: {
                        shape: "Sl6"
                    }
                }
            }
        },
        Sls: {
            type: "structure",
            members: {
                Name: {},
                Type: {},
                Value: {
                    shape: "Slt"
                },
                Version: {
                    type: "long"
                },
                Selector: {},
                SourceResult: {},
                LastModifiedDate: {
                    type: "timestamp"
                },
                ARN: {},
                DataType: {}
            }
        },
        Slt: {
            type: "string",
            sensitive: true
        },
        Slz: {
            type: "list",
            member: {}
        },
        Sm3: {
            type: "list",
            member: {
                shape: "Sls"
            }
        },
        Sml: {
            type: "structure",
            members: {
                SettingId: {},
                SettingValue: {},
                LastModifiedDate: {
                    type: "timestamp"
                },
                LastModifiedUser: {},
                ARN: {},
                Status: {}
            }
        },
        Sn3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Snj: {
            type: "structure",
            members: {
                CommandId: {},
                DocumentName: {},
                DocumentVersion: {},
                Comment: {},
                ExpiresAfter: {
                    type: "timestamp"
                },
                Parameters: {
                    shape: "S14"
                },
                InstanceIds: {
                    shape: "Si"
                },
                Targets: {
                    shape: "S18"
                },
                RequestedDateTime: {
                    type: "timestamp"
                },
                Status: {},
                StatusDetails: {},
                OutputS3Region: {},
                OutputS3BucketName: {},
                OutputS3KeyPrefix: {},
                MaxConcurrency: {},
                MaxErrors: {},
                TargetCount: {
                    type: "integer"
                },
                CompletedCount: {
                    type: "integer"
                },
                ErrorCount: {
                    type: "integer"
                },
                DeliveryTimedOutCount: {
                    type: "integer"
                },
                ServiceRole: {},
                NotificationConfig: {
                    shape: "Skf"
                },
                CloudWatchOutputConfig: {
                    shape: "Sid"
                },
                TimeoutSeconds: {
                    type: "integer"
                },
                AlarmConfiguration: {
                    shape: "S1z"
                },
                TriggeredAlarms: {
                    shape: "S2n"
                }
            }
        },
        Snq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Values: {
                        type: "list",
                        member: {}
                    },
                    Type: {}
                }
            }
        },
        So8: {
            type: "structure",
            required: [ "ExecutionTime" ],
            members: {
                ExecutionTime: {
                    type: "timestamp"
                },
                ExecutionId: {},
                ExecutionType: {}
            }
        },
        Sob: {
            type: "map",
            key: {},
            value: {}
        },
        Sog: {
            type: "structure",
            members: {
                CompliantCount: {
                    type: "integer"
                },
                SeveritySummary: {
                    shape: "Soi"
                }
            }
        },
        Soi: {
            type: "structure",
            members: {
                CriticalCount: {
                    type: "integer"
                },
                HighCount: {
                    type: "integer"
                },
                MediumCount: {
                    type: "integer"
                },
                LowCount: {
                    type: "integer"
                },
                InformationalCount: {
                    type: "integer"
                },
                UnspecifiedCount: {
                    type: "integer"
                }
            }
        },
        Soj: {
            type: "structure",
            members: {
                NonCompliantCount: {
                    type: "integer"
                },
                SeveritySummary: {
                    shape: "Soi"
                }
            }
        },
        Soq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Content: {}
                }
            }
        },
        Spo: {
            type: "structure",
            members: {
                Arn: {}
            }
        }
    },
    paginators: {
        DescribeActivations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ActivationList"
        },
        DescribeAssociationExecutionTargets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AssociationExecutionTargets"
        },
        DescribeAssociationExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AssociationExecutions"
        },
        DescribeAutomationExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AutomationExecutionMetadataList"
        },
        DescribeAutomationStepExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StepExecutions"
        },
        DescribeAvailablePatches: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Patches"
        },
        DescribeEffectiveInstanceAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Associations"
        },
        DescribeEffectivePatchesForPatchBaseline: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EffectivePatches"
        },
        DescribeInstanceAssociationsStatus: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceAssociationStatusInfos"
        },
        DescribeInstanceInformation: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstanceInformationList"
        },
        DescribeInstancePatchStates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstancePatchStates"
        },
        DescribeInstancePatchStatesForPatchGroup: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InstancePatchStates"
        },
        DescribeInstancePatches: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Patches"
        },
        DescribeInventoryDeletions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "InventoryDeletions"
        },
        DescribeMaintenanceWindowExecutionTaskInvocations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WindowExecutionTaskInvocationIdentities"
        },
        DescribeMaintenanceWindowExecutionTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WindowExecutionTaskIdentities"
        },
        DescribeMaintenanceWindowExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WindowExecutions"
        },
        DescribeMaintenanceWindowSchedule: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ScheduledWindowExecutions"
        },
        DescribeMaintenanceWindowTargets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Targets"
        },
        DescribeMaintenanceWindowTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tasks"
        },
        DescribeMaintenanceWindows: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WindowIdentities"
        },
        DescribeMaintenanceWindowsForTarget: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "WindowIdentities"
        },
        DescribeOpsItems: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "OpsItemSummaries"
        },
        DescribeParameters: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribePatchBaselines: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BaselineIdentities"
        },
        DescribePatchGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Mappings"
        },
        DescribePatchProperties: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Properties"
        },
        DescribeSessions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Sessions"
        },
        GetInventory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Entities"
        },
        GetInventorySchema: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schemas"
        },
        GetOpsSummary: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Entities"
        },
        GetParameterHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetParametersByPath: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetResourcePolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Policies"
        },
        ListAssociationVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "AssociationVersions"
        },
        ListAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Associations"
        },
        ListCommandInvocations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CommandInvocations"
        },
        ListCommands: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Commands"
        },
        ListComplianceItems: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ComplianceItems"
        },
        ListComplianceSummaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ComplianceSummaryItems"
        },
        ListDocumentVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DocumentVersions"
        },
        ListDocuments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DocumentIdentifiers"
        },
        ListOpsItemEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListOpsItemRelatedItems: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Summaries"
        },
        ListOpsMetadata: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "OpsMetadataList"
        },
        ListResourceComplianceSummaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ResourceComplianceSummaryItems"
        },
        ListResourceDataSync: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ResourceDataSyncItems"
        }
    },
    waiters: {
        CommandExecuted: {
            delay: 5,
            operation: "GetCommandInvocation",
            maxAttempts: 20,
            acceptors: [ {
                expected: "Pending",
                matcher: "path",
                state: "retry",
                argument: "Status"
            }, {
                expected: "InProgress",
                matcher: "path",
                state: "retry",
                argument: "Status"
            }, {
                expected: "Delayed",
                matcher: "path",
                state: "retry",
                argument: "Status"
            }, {
                expected: "Success",
                matcher: "path",
                state: "success",
                argument: "Status"
            }, {
                expected: "Cancelled",
                matcher: "path",
                state: "failure",
                argument: "Status"
            }, {
                expected: "TimedOut",
                matcher: "path",
                state: "failure",
                argument: "Status"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "Status"
            }, {
                expected: "Cancelling",
                matcher: "path",
                state: "failure",
                argument: "Status"
            }, {
                state: "retry",
                matcher: "error",
                expected: "InvocationDoesNotExist"
            } ]
        }
    }
};

AWS.apiLoader.services["storagegateway"] = {};

AWS.StorageGateway = AWS.Service.defineService("storagegateway", [ "2013-06-30" ]);

AWS.apiLoader.services["storagegateway"]["2013-06-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-06-30",
        endpointPrefix: "storagegateway",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Storage Gateway",
        serviceId: "Storage Gateway",
        signatureVersion: "v4",
        targetPrefix: "StorageGateway_20130630",
        uid: "storagegateway-2013-06-30"
    },
    operations: {
        ActivateGateway: {
            input: {
                type: "structure",
                required: [ "ActivationKey", "GatewayName", "GatewayTimezone", "GatewayRegion" ],
                members: {
                    ActivationKey: {},
                    GatewayName: {},
                    GatewayTimezone: {},
                    GatewayRegion: {},
                    GatewayType: {},
                    TapeDriveType: {},
                    MediumChangerType: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        AddCache: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "DiskIds" ],
                members: {
                    GatewayARN: {},
                    DiskIds: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        AddTagsToResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {}
                }
            }
        },
        AddUploadBuffer: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "DiskIds" ],
                members: {
                    GatewayARN: {},
                    DiskIds: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        AddWorkingStorage: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "DiskIds" ],
                members: {
                    GatewayARN: {},
                    DiskIds: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        AssignTapePool: {
            input: {
                type: "structure",
                required: [ "TapeARN", "PoolId" ],
                members: {
                    TapeARN: {},
                    PoolId: {},
                    BypassGovernanceRetention: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        AssociateFileSystem: {
            input: {
                type: "structure",
                required: [ "UserName", "Password", "ClientToken", "GatewayARN", "LocationARN" ],
                members: {
                    UserName: {},
                    Password: {
                        shape: "Sx"
                    },
                    ClientToken: {},
                    GatewayARN: {},
                    LocationARN: {},
                    Tags: {
                        shape: "S9"
                    },
                    AuditDestinationARN: {},
                    CacheAttributes: {
                        shape: "S11"
                    },
                    EndpointNetworkConfiguration: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystemAssociationARN: {}
                }
            }
        },
        AttachVolume: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "VolumeARN", "NetworkInterfaceId" ],
                members: {
                    GatewayARN: {},
                    TargetName: {},
                    VolumeARN: {},
                    NetworkInterfaceId: {},
                    DiskId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {},
                    TargetARN: {}
                }
            }
        },
        CancelArchival: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "TapeARN" ],
                members: {
                    GatewayARN: {},
                    TapeARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        CancelRetrieval: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "TapeARN" ],
                members: {
                    GatewayARN: {},
                    TapeARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        CreateCachediSCSIVolume: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "VolumeSizeInBytes", "TargetName", "NetworkInterfaceId", "ClientToken" ],
                members: {
                    GatewayARN: {},
                    VolumeSizeInBytes: {
                        type: "long"
                    },
                    SnapshotId: {},
                    TargetName: {},
                    SourceVolumeARN: {},
                    NetworkInterfaceId: {},
                    ClientToken: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {},
                    TargetARN: {}
                }
            }
        },
        CreateNFSFileShare: {
            input: {
                type: "structure",
                required: [ "ClientToken", "GatewayARN", "Role", "LocationARN" ],
                members: {
                    ClientToken: {},
                    NFSFileShareDefaults: {
                        shape: "S1p"
                    },
                    GatewayARN: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    Role: {},
                    LocationARN: {},
                    DefaultStorageClass: {},
                    ObjectACL: {},
                    ClientList: {
                        shape: "S1w"
                    },
                    Squash: {},
                    ReadOnly: {
                        type: "boolean"
                    },
                    GuessMIMETypeEnabled: {
                        type: "boolean"
                    },
                    RequesterPays: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    FileShareName: {},
                    CacheAttributes: {
                        shape: "S11"
                    },
                    NotificationPolicy: {},
                    VPCEndpointDNSName: {},
                    BucketRegion: {},
                    AuditDestinationARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {}
                }
            }
        },
        CreateSMBFileShare: {
            input: {
                type: "structure",
                required: [ "ClientToken", "GatewayARN", "Role", "LocationARN" ],
                members: {
                    ClientToken: {},
                    GatewayARN: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    Role: {},
                    LocationARN: {},
                    DefaultStorageClass: {},
                    ObjectACL: {},
                    ReadOnly: {
                        type: "boolean"
                    },
                    GuessMIMETypeEnabled: {
                        type: "boolean"
                    },
                    RequesterPays: {
                        type: "boolean"
                    },
                    SMBACLEnabled: {
                        type: "boolean"
                    },
                    AccessBasedEnumeration: {
                        type: "boolean"
                    },
                    AdminUserList: {
                        shape: "S25"
                    },
                    ValidUserList: {
                        shape: "S25"
                    },
                    InvalidUserList: {
                        shape: "S25"
                    },
                    AuditDestinationARN: {},
                    Authentication: {},
                    CaseSensitivity: {},
                    Tags: {
                        shape: "S9"
                    },
                    FileShareName: {},
                    CacheAttributes: {
                        shape: "S11"
                    },
                    NotificationPolicy: {},
                    VPCEndpointDNSName: {},
                    BucketRegion: {},
                    OplocksEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {}
                }
            }
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "VolumeARN", "SnapshotDescription" ],
                members: {
                    VolumeARN: {},
                    SnapshotDescription: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {},
                    SnapshotId: {}
                }
            }
        },
        CreateSnapshotFromVolumeRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "VolumeARN", "SnapshotDescription" ],
                members: {
                    VolumeARN: {},
                    SnapshotDescription: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SnapshotId: {},
                    VolumeARN: {},
                    VolumeRecoveryPointTime: {}
                }
            }
        },
        CreateStorediSCSIVolume: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "DiskId", "PreserveExistingData", "TargetName", "NetworkInterfaceId" ],
                members: {
                    GatewayARN: {},
                    DiskId: {},
                    SnapshotId: {},
                    PreserveExistingData: {
                        type: "boolean"
                    },
                    TargetName: {},
                    NetworkInterfaceId: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {},
                    VolumeSizeInBytes: {
                        type: "long"
                    },
                    TargetARN: {}
                }
            }
        },
        CreateTapePool: {
            input: {
                type: "structure",
                required: [ "PoolName", "StorageClass" ],
                members: {
                    PoolName: {},
                    StorageClass: {},
                    RetentionLockType: {},
                    RetentionLockTimeInDays: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolARN: {}
                }
            }
        },
        CreateTapeWithBarcode: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "TapeSizeInBytes", "TapeBarcode" ],
                members: {
                    GatewayARN: {},
                    TapeSizeInBytes: {
                        type: "long"
                    },
                    TapeBarcode: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    PoolId: {},
                    Worm: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        CreateTapes: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "TapeSizeInBytes", "ClientToken", "NumTapesToCreate", "TapeBarcodePrefix" ],
                members: {
                    GatewayARN: {},
                    TapeSizeInBytes: {
                        type: "long"
                    },
                    ClientToken: {},
                    NumTapesToCreate: {
                        type: "integer"
                    },
                    TapeBarcodePrefix: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    PoolId: {},
                    Worm: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARNs: {
                        shape: "S2x"
                    }
                }
            }
        },
        DeleteAutomaticTapeCreationPolicy: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        DeleteBandwidthRateLimit: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "BandwidthType" ],
                members: {
                    GatewayARN: {},
                    BandwidthType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        DeleteChapCredentials: {
            input: {
                type: "structure",
                required: [ "TargetARN", "InitiatorName" ],
                members: {
                    TargetARN: {},
                    InitiatorName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TargetARN: {},
                    InitiatorName: {}
                }
            }
        },
        DeleteFileShare: {
            input: {
                type: "structure",
                required: [ "FileShareARN" ],
                members: {
                    FileShareARN: {},
                    ForceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {}
                }
            }
        },
        DeleteGateway: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        DeleteSnapshotSchedule: {
            input: {
                type: "structure",
                required: [ "VolumeARN" ],
                members: {
                    VolumeARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {}
                }
            }
        },
        DeleteTape: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "TapeARN" ],
                members: {
                    GatewayARN: {},
                    TapeARN: {},
                    BypassGovernanceRetention: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        DeleteTapeArchive: {
            input: {
                type: "structure",
                required: [ "TapeARN" ],
                members: {
                    TapeARN: {},
                    BypassGovernanceRetention: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        DeleteTapePool: {
            input: {
                type: "structure",
                required: [ "PoolARN" ],
                members: {
                    PoolARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolARN: {}
                }
            }
        },
        DeleteVolume: {
            input: {
                type: "structure",
                required: [ "VolumeARN" ],
                members: {
                    VolumeARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {}
                }
            }
        },
        DescribeAvailabilityMonitorTest: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeBandwidthRateLimit: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    AverageUploadRateLimitInBitsPerSec: {
                        type: "long"
                    },
                    AverageDownloadRateLimitInBitsPerSec: {
                        type: "long"
                    }
                }
            }
        },
        DescribeBandwidthRateLimitSchedule: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    BandwidthRateLimitIntervals: {
                        shape: "S3u"
                    }
                }
            }
        },
        DescribeCache: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    DiskIds: {
                        shape: "Sg"
                    },
                    CacheAllocatedInBytes: {
                        type: "long"
                    },
                    CacheUsedPercentage: {
                        type: "double"
                    },
                    CacheDirtyPercentage: {
                        type: "double"
                    },
                    CacheHitPercentage: {
                        type: "double"
                    },
                    CacheMissPercentage: {
                        type: "double"
                    }
                }
            }
        },
        DescribeCachediSCSIVolumes: {
            input: {
                type: "structure",
                required: [ "VolumeARNs" ],
                members: {
                    VolumeARNs: {
                        shape: "S44"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CachediSCSIVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VolumeARN: {},
                                VolumeId: {},
                                VolumeType: {},
                                VolumeStatus: {},
                                VolumeAttachmentStatus: {},
                                VolumeSizeInBytes: {
                                    type: "long"
                                },
                                VolumeProgress: {
                                    type: "double"
                                },
                                SourceSnapshotId: {},
                                VolumeiSCSIAttributes: {
                                    shape: "S4d"
                                },
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                VolumeUsedInBytes: {
                                    type: "long"
                                },
                                KMSKey: {},
                                TargetName: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeChapCredentials: {
            input: {
                type: "structure",
                required: [ "TargetARN" ],
                members: {
                    TargetARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChapCredentials: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TargetARN: {},
                                SecretToAuthenticateInitiator: {
                                    shape: "S4m"
                                },
                                InitiatorName: {},
                                SecretToAuthenticateTarget: {
                                    shape: "S4m"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeFileSystemAssociations: {
            input: {
                type: "structure",
                required: [ "FileSystemAssociationARNList" ],
                members: {
                    FileSystemAssociationARNList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystemAssociationInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FileSystemAssociationARN: {},
                                LocationARN: {},
                                FileSystemAssociationStatus: {},
                                AuditDestinationARN: {},
                                GatewayARN: {},
                                Tags: {
                                    shape: "S9"
                                },
                                CacheAttributes: {
                                    shape: "S11"
                                },
                                EndpointNetworkConfiguration: {
                                    shape: "S13"
                                },
                                FileSystemAssociationStatusDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeGatewayInformation: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    GatewayId: {},
                    GatewayName: {},
                    GatewayTimezone: {},
                    GatewayState: {},
                    GatewayNetworkInterfaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Ipv4Address: {},
                                MacAddress: {},
                                Ipv6Address: {}
                            },
                            sensitive: true
                        }
                    },
                    GatewayType: {},
                    NextUpdateAvailabilityDate: {},
                    LastSoftwareUpdate: {},
                    Ec2InstanceId: {},
                    Ec2InstanceRegion: {},
                    Tags: {
                        shape: "S9"
                    },
                    VPCEndpoint: {},
                    CloudWatchLogGroupARN: {},
                    HostEnvironment: {},
                    EndpointType: {},
                    SoftwareUpdatesEndDate: {},
                    DeprecationDate: {},
                    GatewayCapacity: {},
                    SupportedGatewayCapacities: {
                        type: "list",
                        member: {}
                    },
                    HostEnvironmentId: {},
                    SoftwareVersion: {}
                }
            }
        },
        DescribeMaintenanceStartTime: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    HourOfDay: {
                        type: "integer"
                    },
                    MinuteOfHour: {
                        type: "integer"
                    },
                    DayOfWeek: {
                        type: "integer"
                    },
                    DayOfMonth: {
                        type: "integer"
                    },
                    Timezone: {}
                }
            }
        },
        DescribeNFSFileShares: {
            input: {
                type: "structure",
                required: [ "FileShareARNList" ],
                members: {
                    FileShareARNList: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NFSFileShareInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NFSFileShareDefaults: {
                                    shape: "S1p"
                                },
                                FileShareARN: {},
                                FileShareId: {},
                                FileShareStatus: {},
                                GatewayARN: {},
                                KMSEncrypted: {
                                    type: "boolean"
                                },
                                KMSKey: {},
                                Path: {},
                                Role: {},
                                LocationARN: {},
                                DefaultStorageClass: {},
                                ObjectACL: {},
                                ClientList: {
                                    shape: "S1w"
                                },
                                Squash: {},
                                ReadOnly: {
                                    type: "boolean"
                                },
                                GuessMIMETypeEnabled: {
                                    type: "boolean"
                                },
                                RequesterPays: {
                                    type: "boolean"
                                },
                                Tags: {
                                    shape: "S9"
                                },
                                FileShareName: {},
                                CacheAttributes: {
                                    shape: "S11"
                                },
                                NotificationPolicy: {},
                                VPCEndpointDNSName: {},
                                BucketRegion: {},
                                AuditDestinationARN: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeSMBFileShares: {
            input: {
                type: "structure",
                required: [ "FileShareARNList" ],
                members: {
                    FileShareARNList: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SMBFileShareInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FileShareARN: {},
                                FileShareId: {},
                                FileShareStatus: {},
                                GatewayARN: {},
                                KMSEncrypted: {
                                    type: "boolean"
                                },
                                KMSKey: {},
                                Path: {},
                                Role: {},
                                LocationARN: {},
                                DefaultStorageClass: {},
                                ObjectACL: {},
                                ReadOnly: {
                                    type: "boolean"
                                },
                                GuessMIMETypeEnabled: {
                                    type: "boolean"
                                },
                                RequesterPays: {
                                    type: "boolean"
                                },
                                SMBACLEnabled: {
                                    type: "boolean"
                                },
                                AccessBasedEnumeration: {
                                    type: "boolean"
                                },
                                AdminUserList: {
                                    shape: "S25"
                                },
                                ValidUserList: {
                                    shape: "S25"
                                },
                                InvalidUserList: {
                                    shape: "S25"
                                },
                                AuditDestinationARN: {},
                                Authentication: {},
                                CaseSensitivity: {},
                                Tags: {
                                    shape: "S9"
                                },
                                FileShareName: {},
                                CacheAttributes: {
                                    shape: "S11"
                                },
                                NotificationPolicy: {},
                                VPCEndpointDNSName: {},
                                BucketRegion: {},
                                OplocksEnabled: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSMBSettings: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    DomainName: {},
                    ActiveDirectoryStatus: {},
                    SMBGuestPasswordSet: {
                        type: "boolean"
                    },
                    SMBSecurityStrategy: {},
                    FileSharesVisible: {
                        type: "boolean"
                    },
                    SMBLocalGroups: {
                        shape: "S5z"
                    }
                }
            }
        },
        DescribeSnapshotSchedule: {
            input: {
                type: "structure",
                required: [ "VolumeARN" ],
                members: {
                    VolumeARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {},
                    StartAt: {
                        type: "integer"
                    },
                    RecurrenceInHours: {
                        type: "integer"
                    },
                    Description: {},
                    Timezone: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        DescribeStorediSCSIVolumes: {
            input: {
                type: "structure",
                required: [ "VolumeARNs" ],
                members: {
                    VolumeARNs: {
                        shape: "S44"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StorediSCSIVolumes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VolumeARN: {},
                                VolumeId: {},
                                VolumeType: {},
                                VolumeStatus: {},
                                VolumeAttachmentStatus: {},
                                VolumeSizeInBytes: {
                                    type: "long"
                                },
                                VolumeProgress: {
                                    type: "double"
                                },
                                VolumeDiskId: {},
                                SourceSnapshotId: {},
                                PreservedExistingData: {
                                    type: "boolean"
                                },
                                VolumeiSCSIAttributes: {
                                    shape: "S4d"
                                },
                                CreatedDate: {
                                    type: "timestamp"
                                },
                                VolumeUsedInBytes: {
                                    type: "long"
                                },
                                KMSKey: {},
                                TargetName: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeTapeArchives: {
            input: {
                type: "structure",
                members: {
                    TapeARNs: {
                        shape: "S2x"
                    },
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeArchives: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TapeARN: {},
                                TapeBarcode: {},
                                TapeCreatedDate: {
                                    type: "timestamp"
                                },
                                TapeSizeInBytes: {
                                    type: "long"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                RetrievedTo: {},
                                TapeStatus: {},
                                TapeUsedInBytes: {
                                    type: "long"
                                },
                                KMSKey: {},
                                PoolId: {},
                                Worm: {
                                    type: "boolean"
                                },
                                RetentionStartDate: {
                                    type: "timestamp"
                                },
                                PoolEntryDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeTapeRecoveryPoints: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {},
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    TapeRecoveryPointInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TapeARN: {},
                                TapeRecoveryPointTime: {
                                    type: "timestamp"
                                },
                                TapeSizeInBytes: {
                                    type: "long"
                                },
                                TapeStatus: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeTapes: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {},
                    TapeARNs: {
                        shape: "S2x"
                    },
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tapes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TapeARN: {},
                                TapeBarcode: {},
                                TapeCreatedDate: {
                                    type: "timestamp"
                                },
                                TapeSizeInBytes: {
                                    type: "long"
                                },
                                TapeStatus: {},
                                VTLDevice: {},
                                Progress: {
                                    type: "double"
                                },
                                TapeUsedInBytes: {
                                    type: "long"
                                },
                                KMSKey: {},
                                PoolId: {},
                                Worm: {
                                    type: "boolean"
                                },
                                RetentionStartDate: {
                                    type: "timestamp"
                                },
                                PoolEntryDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeUploadBuffer: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    DiskIds: {
                        shape: "Sg"
                    },
                    UploadBufferUsedInBytes: {
                        type: "long"
                    },
                    UploadBufferAllocatedInBytes: {
                        type: "long"
                    }
                }
            }
        },
        DescribeVTLDevices: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {},
                    VTLDeviceARNs: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    VTLDevices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VTLDeviceARN: {},
                                VTLDeviceType: {},
                                VTLDeviceVendor: {},
                                VTLDeviceProductIdentifier: {},
                                DeviceiSCSIAttributes: {
                                    type: "structure",
                                    members: {
                                        TargetARN: {},
                                        NetworkInterfaceId: {},
                                        NetworkInterfacePort: {
                                            type: "integer"
                                        },
                                        ChapEnabled: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeWorkingStorage: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    DiskIds: {
                        shape: "Sg"
                    },
                    WorkingStorageUsedInBytes: {
                        type: "long"
                    },
                    WorkingStorageAllocatedInBytes: {
                        type: "long"
                    }
                }
            }
        },
        DetachVolume: {
            input: {
                type: "structure",
                required: [ "VolumeARN" ],
                members: {
                    VolumeARN: {},
                    ForceDetach: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {}
                }
            }
        },
        DisableGateway: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        DisassociateFileSystem: {
            input: {
                type: "structure",
                required: [ "FileSystemAssociationARN" ],
                members: {
                    FileSystemAssociationARN: {},
                    ForceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystemAssociationARN: {}
                }
            }
        },
        JoinDomain: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "DomainName", "UserName", "Password" ],
                members: {
                    GatewayARN: {},
                    DomainName: {},
                    OrganizationalUnit: {},
                    DomainControllers: {
                        type: "list",
                        member: {}
                    },
                    TimeoutInSeconds: {
                        type: "integer"
                    },
                    UserName: {},
                    Password: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    ActiveDirectoryStatus: {}
                }
            }
        },
        ListAutomaticTapeCreationPolicies: {
            input: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AutomaticTapeCreationPolicyInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AutomaticTapeCreationRules: {
                                    shape: "S7j"
                                },
                                GatewayARN: {}
                            }
                        }
                    }
                }
            }
        },
        ListFileShares: {
            input: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    NextMarker: {},
                    FileShareInfoList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FileShareType: {},
                                FileShareARN: {},
                                FileShareId: {},
                                FileShareStatus: {},
                                GatewayARN: {}
                            }
                        }
                    }
                }
            }
        },
        ListFileSystemAssociations: {
            input: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Marker: {},
                    NextMarker: {},
                    FileSystemAssociationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FileSystemAssociationId: {},
                                FileSystemAssociationARN: {},
                                FileSystemAssociationStatus: {},
                                GatewayARN: {}
                            }
                        }
                    }
                }
            }
        },
        ListGateways: {
            input: {
                type: "structure",
                members: {
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GatewayId: {},
                                GatewayARN: {},
                                GatewayType: {},
                                GatewayOperationalState: {},
                                GatewayName: {},
                                Ec2InstanceId: {},
                                Ec2InstanceRegion: {},
                                HostEnvironment: {},
                                HostEnvironmentId: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListLocalDisks: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    Disks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DiskId: {},
                                DiskPath: {},
                                DiskNode: {},
                                DiskStatus: {},
                                DiskSizeInBytes: {
                                    type: "long"
                                },
                                DiskAllocationType: {},
                                DiskAllocationResource: {},
                                DiskAttributeList: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {},
                    Marker: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        ListTapePools: {
            input: {
                type: "structure",
                members: {
                    PoolARNs: {
                        type: "list",
                        member: {}
                    },
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PoolARN: {},
                                PoolName: {},
                                StorageClass: {},
                                RetentionLockType: {},
                                RetentionLockTimeInDays: {
                                    type: "integer"
                                },
                                PoolStatus: {}
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListTapes: {
            input: {
                type: "structure",
                members: {
                    TapeARNs: {
                        shape: "S2x"
                    },
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TapeARN: {},
                                TapeBarcode: {},
                                TapeSizeInBytes: {
                                    type: "long"
                                },
                                TapeStatus: {},
                                GatewayARN: {},
                                PoolId: {},
                                RetentionStartDate: {
                                    type: "timestamp"
                                },
                                PoolEntryDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        ListVolumeInitiators: {
            input: {
                type: "structure",
                required: [ "VolumeARN" ],
                members: {
                    VolumeARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Initiators: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListVolumeRecoveryPoints: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    VolumeRecoveryPointInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VolumeARN: {},
                                VolumeSizeInBytes: {
                                    type: "long"
                                },
                                VolumeUsageInBytes: {
                                    type: "long"
                                },
                                VolumeRecoveryPointTime: {}
                            }
                        }
                    }
                }
            }
        },
        ListVolumes: {
            input: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    Marker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    Marker: {},
                    VolumeInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VolumeARN: {},
                                VolumeId: {},
                                GatewayARN: {},
                                GatewayId: {},
                                VolumeType: {},
                                VolumeSizeInBytes: {
                                    type: "long"
                                },
                                VolumeAttachmentStatus: {}
                            }
                        }
                    }
                }
            }
        },
        NotifyWhenUploaded: {
            input: {
                type: "structure",
                required: [ "FileShareARN" ],
                members: {
                    FileShareARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {},
                    NotificationId: {}
                }
            }
        },
        RefreshCache: {
            input: {
                type: "structure",
                required: [ "FileShareARN" ],
                members: {
                    FileShareARN: {},
                    FolderList: {
                        type: "list",
                        member: {}
                    },
                    Recursive: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {},
                    NotificationId: {}
                }
            }
        },
        RemoveTagsFromResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {}
                }
            }
        },
        ResetCache: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        RetrieveTapeArchive: {
            input: {
                type: "structure",
                required: [ "TapeARN", "GatewayARN" ],
                members: {
                    TapeARN: {},
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        RetrieveTapeRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "TapeARN", "GatewayARN" ],
                members: {
                    TapeARN: {},
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TapeARN: {}
                }
            }
        },
        SetLocalConsolePassword: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "LocalConsolePassword" ],
                members: {
                    GatewayARN: {},
                    LocalConsolePassword: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        SetSMBGuestPassword: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "Password" ],
                members: {
                    GatewayARN: {},
                    Password: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        ShutdownGateway: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        StartAvailabilityMonitorTest: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        StartGateway: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateAutomaticTapeCreationPolicy: {
            input: {
                type: "structure",
                required: [ "AutomaticTapeCreationRules", "GatewayARN" ],
                members: {
                    AutomaticTapeCreationRules: {
                        shape: "S7j"
                    },
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateBandwidthRateLimit: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {},
                    AverageUploadRateLimitInBitsPerSec: {
                        type: "long"
                    },
                    AverageDownloadRateLimitInBitsPerSec: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateBandwidthRateLimitSchedule: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "BandwidthRateLimitIntervals" ],
                members: {
                    GatewayARN: {},
                    BandwidthRateLimitIntervals: {
                        shape: "S3u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateChapCredentials: {
            input: {
                type: "structure",
                required: [ "TargetARN", "SecretToAuthenticateInitiator", "InitiatorName" ],
                members: {
                    TargetARN: {},
                    SecretToAuthenticateInitiator: {
                        shape: "S4m"
                    },
                    InitiatorName: {},
                    SecretToAuthenticateTarget: {
                        shape: "S4m"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TargetARN: {},
                    InitiatorName: {}
                }
            }
        },
        UpdateFileSystemAssociation: {
            input: {
                type: "structure",
                required: [ "FileSystemAssociationARN" ],
                members: {
                    FileSystemAssociationARN: {},
                    UserName: {},
                    Password: {
                        shape: "Sx"
                    },
                    AuditDestinationARN: {},
                    CacheAttributes: {
                        shape: "S11"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileSystemAssociationARN: {}
                }
            }
        },
        UpdateGatewayInformation: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {},
                    GatewayName: {},
                    GatewayTimezone: {},
                    CloudWatchLogGroupARN: {},
                    GatewayCapacity: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {},
                    GatewayName: {}
                }
            }
        },
        UpdateGatewaySoftwareNow: {
            input: {
                type: "structure",
                required: [ "GatewayARN" ],
                members: {
                    GatewayARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateMaintenanceStartTime: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "HourOfDay", "MinuteOfHour" ],
                members: {
                    GatewayARN: {},
                    HourOfDay: {
                        type: "integer"
                    },
                    MinuteOfHour: {
                        type: "integer"
                    },
                    DayOfWeek: {
                        type: "integer"
                    },
                    DayOfMonth: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateNFSFileShare: {
            input: {
                type: "structure",
                required: [ "FileShareARN" ],
                members: {
                    FileShareARN: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    NFSFileShareDefaults: {
                        shape: "S1p"
                    },
                    DefaultStorageClass: {},
                    ObjectACL: {},
                    ClientList: {
                        shape: "S1w"
                    },
                    Squash: {},
                    ReadOnly: {
                        type: "boolean"
                    },
                    GuessMIMETypeEnabled: {
                        type: "boolean"
                    },
                    RequesterPays: {
                        type: "boolean"
                    },
                    FileShareName: {},
                    CacheAttributes: {
                        shape: "S11"
                    },
                    NotificationPolicy: {},
                    AuditDestinationARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {}
                }
            }
        },
        UpdateSMBFileShare: {
            input: {
                type: "structure",
                required: [ "FileShareARN" ],
                members: {
                    FileShareARN: {},
                    KMSEncrypted: {
                        type: "boolean"
                    },
                    KMSKey: {},
                    DefaultStorageClass: {},
                    ObjectACL: {},
                    ReadOnly: {
                        type: "boolean"
                    },
                    GuessMIMETypeEnabled: {
                        type: "boolean"
                    },
                    RequesterPays: {
                        type: "boolean"
                    },
                    SMBACLEnabled: {
                        type: "boolean"
                    },
                    AccessBasedEnumeration: {
                        type: "boolean"
                    },
                    AdminUserList: {
                        shape: "S25"
                    },
                    ValidUserList: {
                        shape: "S25"
                    },
                    InvalidUserList: {
                        shape: "S25"
                    },
                    AuditDestinationARN: {},
                    CaseSensitivity: {},
                    FileShareName: {},
                    CacheAttributes: {
                        shape: "S11"
                    },
                    NotificationPolicy: {},
                    OplocksEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FileShareARN: {}
                }
            }
        },
        UpdateSMBFileShareVisibility: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "FileSharesVisible" ],
                members: {
                    GatewayARN: {},
                    FileSharesVisible: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateSMBLocalGroups: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "SMBLocalGroups" ],
                members: {
                    GatewayARN: {},
                    SMBLocalGroups: {
                        shape: "S5z"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateSMBSecurityStrategy: {
            input: {
                type: "structure",
                required: [ "GatewayARN", "SMBSecurityStrategy" ],
                members: {
                    GatewayARN: {},
                    SMBSecurityStrategy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayARN: {}
                }
            }
        },
        UpdateSnapshotSchedule: {
            input: {
                type: "structure",
                required: [ "VolumeARN", "StartAt", "RecurrenceInHours" ],
                members: {
                    VolumeARN: {},
                    StartAt: {
                        type: "integer"
                    },
                    RecurrenceInHours: {
                        type: "integer"
                    },
                    Description: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    VolumeARN: {}
                }
            }
        },
        UpdateVTLDeviceType: {
            input: {
                type: "structure",
                required: [ "VTLDeviceARN", "DeviceType" ],
                members: {
                    VTLDeviceARN: {},
                    DeviceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VTLDeviceARN: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sg: {
            type: "list",
            member: {}
        },
        Sx: {
            type: "string",
            sensitive: true
        },
        S11: {
            type: "structure",
            members: {
                CacheStaleTimeoutInSeconds: {
                    type: "integer"
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                IpAddresses: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                FileMode: {},
                DirectoryMode: {},
                GroupId: {
                    type: "long"
                },
                OwnerId: {
                    type: "long"
                }
            }
        },
        S1w: {
            type: "list",
            member: {}
        },
        S25: {
            type: "list",
            member: {}
        },
        S2x: {
            type: "list",
            member: {}
        },
        S3u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "StartHourOfDay", "StartMinuteOfHour", "EndHourOfDay", "EndMinuteOfHour", "DaysOfWeek" ],
                members: {
                    StartHourOfDay: {
                        type: "integer"
                    },
                    StartMinuteOfHour: {
                        type: "integer"
                    },
                    EndHourOfDay: {
                        type: "integer"
                    },
                    EndMinuteOfHour: {
                        type: "integer"
                    },
                    DaysOfWeek: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    },
                    AverageUploadRateLimitInBitsPerSec: {
                        type: "long"
                    },
                    AverageDownloadRateLimitInBitsPerSec: {
                        type: "long"
                    }
                }
            }
        },
        S44: {
            type: "list",
            member: {}
        },
        S4d: {
            type: "structure",
            members: {
                TargetARN: {},
                NetworkInterfaceId: {},
                NetworkInterfacePort: {
                    type: "integer"
                },
                LunNumber: {
                    type: "integer"
                },
                ChapEnabled: {
                    type: "boolean"
                }
            }
        },
        S4m: {
            type: "string",
            sensitive: true
        },
        S5j: {
            type: "list",
            member: {}
        },
        S5z: {
            type: "structure",
            members: {
                GatewayAdmins: {
                    shape: "S25"
                }
            }
        },
        S7j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "TapeBarcodePrefix", "PoolId", "TapeSizeInBytes", "MinimumNumTapes" ],
                members: {
                    TapeBarcodePrefix: {},
                    PoolId: {},
                    TapeSizeInBytes: {
                        type: "long"
                    },
                    MinimumNumTapes: {
                        type: "integer"
                    },
                    Worm: {
                        type: "boolean"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeCachediSCSIVolumes: {
            result_key: "CachediSCSIVolumes"
        },
        DescribeStorediSCSIVolumes: {
            result_key: "StorediSCSIVolumes"
        },
        DescribeTapeArchives: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "TapeArchives"
        },
        DescribeTapeRecoveryPoints: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "TapeRecoveryPointInfos"
        },
        DescribeTapes: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Tapes"
        },
        DescribeVTLDevices: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "VTLDevices"
        },
        ListFileShares: {
            input_token: "Marker",
            limit_key: "Limit",
            non_aggregate_keys: [ "Marker" ],
            output_token: "NextMarker",
            result_key: "FileShareInfoList"
        },
        ListFileSystemAssociations: {
            input_token: "Marker",
            limit_key: "Limit",
            non_aggregate_keys: [ "Marker" ],
            output_token: "NextMarker",
            result_key: "FileSystemAssociationSummaryList"
        },
        ListGateways: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Gateways"
        },
        ListLocalDisks: {
            result_key: "Disks"
        },
        ListTagsForResource: {
            input_token: "Marker",
            limit_key: "Limit",
            non_aggregate_keys: [ "ResourceARN" ],
            output_token: "Marker",
            result_key: "Tags"
        },
        ListTapePools: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "PoolInfos"
        },
        ListTapes: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "TapeInfos"
        },
        ListVolumeRecoveryPoints: {
            result_key: "VolumeRecoveryPointInfos"
        },
        ListVolumes: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "VolumeInfos"
        }
    }
};

AWS.apiLoader.services["stepfunctions"] = {};

AWS.StepFunctions = AWS.Service.defineService("stepfunctions", [ "2016-11-23" ]);

AWS.apiLoader.services["stepfunctions"]["2016-11-23"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-23",
        endpointPrefix: "states",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "AWS SFN",
        serviceFullName: "AWS Step Functions",
        serviceId: "SFN",
        signatureVersion: "v4",
        targetPrefix: "AWSStepFunctions",
        uid: "states-2016-11-23"
    },
    operations: {
        CreateActivity: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "activityArn", "creationDate" ],
                members: {
                    activityArn: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        CreateStateMachine: {
            input: {
                type: "structure",
                required: [ "name", "definition", "roleArn" ],
                members: {
                    name: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    type: {},
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tags: {
                        shape: "S3"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    },
                    publish: {
                        type: "boolean"
                    },
                    versionDescription: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineArn", "creationDate" ],
                members: {
                    stateMachineArn: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    stateMachineVersionArn: {}
                }
            },
            idempotent: true
        },
        CreateStateMachineAlias: {
            input: {
                type: "structure",
                required: [ "name", "routingConfiguration" ],
                members: {
                    description: {
                        shape: "Sp"
                    },
                    name: {},
                    routingConfiguration: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineAliasArn", "creationDate" ],
                members: {
                    stateMachineAliasArn: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteActivity: {
            input: {
                type: "structure",
                required: [ "activityArn" ],
                members: {
                    activityArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStateMachine: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStateMachineAlias: {
            input: {
                type: "structure",
                required: [ "stateMachineAliasArn" ],
                members: {
                    stateMachineAliasArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStateMachineVersion: {
            input: {
                type: "structure",
                required: [ "stateMachineVersionArn" ],
                members: {
                    stateMachineVersionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeActivity: {
            input: {
                type: "structure",
                required: [ "activityArn" ],
                members: {
                    activityArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "activityArn", "name", "creationDate" ],
                members: {
                    activityArn: {},
                    name: {},
                    creationDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executionArn", "stateMachineArn", "status", "startDate" ],
                members: {
                    executionArn: {},
                    stateMachineArn: {},
                    name: {},
                    status: {},
                    startDate: {
                        type: "timestamp"
                    },
                    stopDate: {
                        type: "timestamp"
                    },
                    input: {
                        shape: "S19"
                    },
                    inputDetails: {
                        shape: "S1a"
                    },
                    output: {
                        shape: "S19"
                    },
                    outputDetails: {
                        shape: "S1a"
                    },
                    traceHeader: {},
                    mapRunArn: {},
                    error: {
                        shape: "S1d"
                    },
                    cause: {
                        shape: "S1e"
                    },
                    stateMachineVersionArn: {},
                    stateMachineAliasArn: {},
                    redriveCount: {
                        type: "integer"
                    },
                    redriveDate: {
                        type: "timestamp"
                    },
                    redriveStatus: {},
                    redriveStatusReason: {
                        shape: "S19"
                    }
                }
            }
        },
        DescribeMapRun: {
            input: {
                type: "structure",
                required: [ "mapRunArn" ],
                members: {
                    mapRunArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "mapRunArn", "executionArn", "status", "startDate", "maxConcurrency", "toleratedFailurePercentage", "toleratedFailureCount", "itemCounts", "executionCounts" ],
                members: {
                    mapRunArn: {},
                    executionArn: {},
                    status: {},
                    startDate: {
                        type: "timestamp"
                    },
                    stopDate: {
                        type: "timestamp"
                    },
                    maxConcurrency: {
                        type: "integer"
                    },
                    toleratedFailurePercentage: {
                        type: "float"
                    },
                    toleratedFailureCount: {
                        type: "long"
                    },
                    itemCounts: {
                        type: "structure",
                        required: [ "pending", "running", "succeeded", "failed", "timedOut", "aborted", "total", "resultsWritten" ],
                        members: {
                            pending: {
                                type: "long"
                            },
                            running: {
                                type: "long"
                            },
                            succeeded: {
                                type: "long"
                            },
                            failed: {
                                type: "long"
                            },
                            timedOut: {
                                type: "long"
                            },
                            aborted: {
                                type: "long"
                            },
                            total: {
                                type: "long"
                            },
                            resultsWritten: {
                                type: "long"
                            },
                            failuresNotRedrivable: {
                                type: "long"
                            },
                            pendingRedrive: {
                                type: "long"
                            }
                        }
                    },
                    executionCounts: {
                        type: "structure",
                        required: [ "pending", "running", "succeeded", "failed", "timedOut", "aborted", "total", "resultsWritten" ],
                        members: {
                            pending: {
                                type: "long"
                            },
                            running: {
                                type: "long"
                            },
                            succeeded: {
                                type: "long"
                            },
                            failed: {
                                type: "long"
                            },
                            timedOut: {
                                type: "long"
                            },
                            aborted: {
                                type: "long"
                            },
                            total: {
                                type: "long"
                            },
                            resultsWritten: {
                                type: "long"
                            },
                            failuresNotRedrivable: {
                                type: "long"
                            },
                            pendingRedrive: {
                                type: "long"
                            }
                        }
                    },
                    redriveCount: {
                        type: "integer"
                    },
                    redriveDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeStateMachine: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineArn", "name", "definition", "roleArn", "type", "creationDate" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    status: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    type: {},
                    creationDate: {
                        type: "timestamp"
                    },
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    },
                    label: {},
                    revisionId: {},
                    description: {
                        shape: "Sm"
                    }
                }
            }
        },
        DescribeStateMachineAlias: {
            input: {
                type: "structure",
                required: [ "stateMachineAliasArn" ],
                members: {
                    stateMachineAliasArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    stateMachineAliasArn: {},
                    name: {},
                    description: {
                        shape: "Sp"
                    },
                    routingConfiguration: {
                        shape: "Sr"
                    },
                    creationDate: {
                        type: "timestamp"
                    },
                    updateDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeStateMachineForExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineArn", "name", "definition", "roleArn", "updateDate" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    updateDate: {
                        type: "timestamp"
                    },
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    },
                    mapRunArn: {},
                    label: {},
                    revisionId: {}
                }
            }
        },
        GetActivityTask: {
            input: {
                type: "structure",
                required: [ "activityArn" ],
                members: {
                    activityArn: {},
                    workerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    taskToken: {},
                    input: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        GetExecutionHistory: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    },
                    nextToken: {},
                    includeExecutionData: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "events" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "timestamp", "type", "id" ],
                            members: {
                                timestamp: {
                                    type: "timestamp"
                                },
                                type: {},
                                id: {
                                    type: "long"
                                },
                                previousEventId: {
                                    type: "long"
                                },
                                activityFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                activityScheduleFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                activityScheduledEventDetails: {
                                    type: "structure",
                                    required: [ "resource" ],
                                    members: {
                                        resource: {},
                                        input: {
                                            shape: "S19"
                                        },
                                        inputDetails: {
                                            shape: "S2h"
                                        },
                                        timeoutInSeconds: {
                                            type: "long"
                                        },
                                        heartbeatInSeconds: {
                                            type: "long"
                                        }
                                    }
                                },
                                activityStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        workerName: {}
                                    }
                                },
                                activitySucceededEventDetails: {
                                    type: "structure",
                                    members: {
                                        output: {
                                            shape: "S19"
                                        },
                                        outputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                activityTimedOutEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                taskFailedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                taskScheduledEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource", "region", "parameters" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        region: {},
                                        parameters: {
                                            type: "string",
                                            sensitive: true
                                        },
                                        timeoutInSeconds: {
                                            type: "long"
                                        },
                                        heartbeatInSeconds: {
                                            type: "long"
                                        },
                                        taskCredentials: {
                                            shape: "S2r"
                                        }
                                    }
                                },
                                taskStartFailedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                taskStartedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {}
                                    }
                                },
                                taskSubmitFailedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                taskSubmittedEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        output: {
                                            shape: "S19"
                                        },
                                        outputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                taskSucceededEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        output: {
                                            shape: "S19"
                                        },
                                        outputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                taskTimedOutEventDetails: {
                                    type: "structure",
                                    required: [ "resourceType", "resource" ],
                                    members: {
                                        resourceType: {},
                                        resource: {},
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                executionFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                executionStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        input: {
                                            shape: "S19"
                                        },
                                        inputDetails: {
                                            shape: "S2h"
                                        },
                                        roleArn: {},
                                        stateMachineAliasArn: {},
                                        stateMachineVersionArn: {}
                                    }
                                },
                                executionSucceededEventDetails: {
                                    type: "structure",
                                    members: {
                                        output: {
                                            shape: "S19"
                                        },
                                        outputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                executionAbortedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                executionTimedOutEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                executionRedrivenEventDetails: {
                                    type: "structure",
                                    members: {
                                        redriveCount: {
                                            type: "integer"
                                        }
                                    }
                                },
                                mapStateStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        length: {
                                            type: "integer"
                                        }
                                    }
                                },
                                mapIterationStartedEventDetails: {
                                    shape: "S36"
                                },
                                mapIterationSucceededEventDetails: {
                                    shape: "S36"
                                },
                                mapIterationFailedEventDetails: {
                                    shape: "S36"
                                },
                                mapIterationAbortedEventDetails: {
                                    shape: "S36"
                                },
                                lambdaFunctionFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                lambdaFunctionScheduleFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                lambdaFunctionScheduledEventDetails: {
                                    type: "structure",
                                    required: [ "resource" ],
                                    members: {
                                        resource: {},
                                        input: {
                                            shape: "S19"
                                        },
                                        inputDetails: {
                                            shape: "S2h"
                                        },
                                        timeoutInSeconds: {
                                            type: "long"
                                        },
                                        taskCredentials: {
                                            shape: "S2r"
                                        }
                                    }
                                },
                                lambdaFunctionStartFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                lambdaFunctionSucceededEventDetails: {
                                    type: "structure",
                                    members: {
                                        output: {
                                            shape: "S19"
                                        },
                                        outputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                lambdaFunctionTimedOutEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                stateEnteredEventDetails: {
                                    type: "structure",
                                    required: [ "name" ],
                                    members: {
                                        name: {},
                                        input: {
                                            shape: "S19"
                                        },
                                        inputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                stateExitedEventDetails: {
                                    type: "structure",
                                    required: [ "name" ],
                                    members: {
                                        name: {},
                                        output: {
                                            shape: "S19"
                                        },
                                        outputDetails: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                mapRunStartedEventDetails: {
                                    type: "structure",
                                    members: {
                                        mapRunArn: {}
                                    }
                                },
                                mapRunFailedEventDetails: {
                                    type: "structure",
                                    members: {
                                        error: {
                                            shape: "S1d"
                                        },
                                        cause: {
                                            shape: "S1e"
                                        }
                                    }
                                },
                                mapRunRedrivenEventDetails: {
                                    type: "structure",
                                    members: {
                                        mapRunArn: {},
                                        redriveCount: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListActivities: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "activities" ],
                members: {
                    activities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "activityArn", "name", "creationDate" ],
                            members: {
                                activityArn: {},
                                name: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListExecutions: {
            input: {
                type: "structure",
                members: {
                    stateMachineArn: {},
                    statusFilter: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    mapRunArn: {},
                    redriveFilter: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executions" ],
                members: {
                    executions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "executionArn", "stateMachineArn", "name", "status", "startDate" ],
                            members: {
                                executionArn: {},
                                stateMachineArn: {},
                                name: {},
                                status: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                stopDate: {
                                    type: "timestamp"
                                },
                                mapRunArn: {},
                                itemCount: {
                                    type: "integer"
                                },
                                stateMachineVersionArn: {},
                                stateMachineAliasArn: {},
                                redriveCount: {
                                    type: "integer"
                                },
                                redriveDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMapRuns: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "mapRuns" ],
                members: {
                    mapRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "executionArn", "mapRunArn", "stateMachineArn", "startDate" ],
                            members: {
                                executionArn: {},
                                mapRunArn: {},
                                stateMachineArn: {},
                                startDate: {
                                    type: "timestamp"
                                },
                                stopDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStateMachineAliases: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineAliases" ],
                members: {
                    stateMachineAliases: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "stateMachineAliasArn", "creationDate" ],
                            members: {
                                stateMachineAliasArn: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStateMachineVersions: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachineVersions" ],
                members: {
                    stateMachineVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "stateMachineVersionArn", "creationDate" ],
                            members: {
                                stateMachineVersionArn: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStateMachines: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "stateMachines" ],
                members: {
                    stateMachines: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "stateMachineArn", "name", "type", "creationDate" ],
                            members: {
                                stateMachineArn: {},
                                name: {},
                                type: {},
                                creationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        PublishStateMachineVersion: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    revisionId: {},
                    description: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "creationDate", "stateMachineVersionArn" ],
                members: {
                    creationDate: {
                        type: "timestamp"
                    },
                    stateMachineVersionArn: {}
                }
            },
            idempotent: true
        },
        RedriveExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "redriveDate" ],
                members: {
                    redriveDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        SendTaskFailure: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    error: {
                        shape: "S1d"
                    },
                    cause: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendTaskHeartbeat: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SendTaskSuccess: {
            input: {
                type: "structure",
                required: [ "taskToken", "output" ],
                members: {
                    taskToken: {},
                    output: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartExecution: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    input: {
                        shape: "S19"
                    },
                    traceHeader: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executionArn", "startDate" ],
                members: {
                    executionArn: {},
                    startDate: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        },
        StartSyncExecution: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    name: {},
                    input: {
                        shape: "S19"
                    },
                    traceHeader: {}
                }
            },
            output: {
                type: "structure",
                required: [ "executionArn", "startDate", "stopDate", "status" ],
                members: {
                    executionArn: {},
                    stateMachineArn: {},
                    name: {},
                    startDate: {
                        type: "timestamp"
                    },
                    stopDate: {
                        type: "timestamp"
                    },
                    status: {},
                    error: {
                        shape: "S1d"
                    },
                    cause: {
                        shape: "S1e"
                    },
                    input: {
                        shape: "S19"
                    },
                    inputDetails: {
                        shape: "S1a"
                    },
                    output: {
                        shape: "S19"
                    },
                    outputDetails: {
                        shape: "S1a"
                    },
                    traceHeader: {},
                    billingDetails: {
                        type: "structure",
                        members: {
                            billedMemoryUsedInMB: {
                                type: "long"
                            },
                            billedDurationInMilliseconds: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "sync-"
            }
        },
        StopExecution: {
            input: {
                type: "structure",
                required: [ "executionArn" ],
                members: {
                    executionArn: {},
                    error: {
                        shape: "S1d"
                    },
                    cause: {
                        shape: "S1e"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "stopDate" ],
                members: {
                    stopDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TestState: {
            input: {
                type: "structure",
                required: [ "definition", "roleArn" ],
                members: {
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    input: {
                        shape: "S19"
                    },
                    inspectionLevel: {},
                    revealSecrets: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    output: {
                        shape: "S19"
                    },
                    error: {
                        shape: "S1d"
                    },
                    cause: {
                        shape: "S1e"
                    },
                    inspectionData: {
                        type: "structure",
                        members: {
                            input: {
                                shape: "S19"
                            },
                            afterInputPath: {
                                shape: "S19"
                            },
                            afterParameters: {
                                shape: "S19"
                            },
                            result: {
                                shape: "S19"
                            },
                            afterResultSelector: {
                                shape: "S19"
                            },
                            afterResultPath: {
                                shape: "S19"
                            },
                            request: {
                                type: "structure",
                                members: {
                                    protocol: {},
                                    method: {},
                                    url: {},
                                    headers: {},
                                    body: {}
                                }
                            },
                            response: {
                                type: "structure",
                                members: {
                                    protocol: {},
                                    statusCode: {},
                                    statusMessage: {},
                                    headers: {},
                                    body: {}
                                }
                            }
                        },
                        sensitive: true
                    },
                    nextState: {},
                    status: {}
                }
            },
            endpoint: {
                hostPrefix: "sync-"
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMapRun: {
            input: {
                type: "structure",
                required: [ "mapRunArn" ],
                members: {
                    mapRunArn: {},
                    maxConcurrency: {
                        type: "integer"
                    },
                    toleratedFailurePercentage: {
                        type: "float"
                    },
                    toleratedFailureCount: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStateMachine: {
            input: {
                type: "structure",
                required: [ "stateMachineArn" ],
                members: {
                    stateMachineArn: {},
                    definition: {
                        shape: "Sb"
                    },
                    roleArn: {},
                    loggingConfiguration: {
                        shape: "Sd"
                    },
                    tracingConfiguration: {
                        shape: "Sj"
                    },
                    publish: {
                        type: "boolean"
                    },
                    versionDescription: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDate" ],
                members: {
                    updateDate: {
                        type: "timestamp"
                    },
                    revisionId: {},
                    stateMachineVersionArn: {}
                }
            },
            idempotent: true
        },
        UpdateStateMachineAlias: {
            input: {
                type: "structure",
                required: [ "stateMachineAliasArn" ],
                members: {
                    stateMachineAliasArn: {},
                    description: {
                        shape: "Sp"
                    },
                    routingConfiguration: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDate" ],
                members: {
                    updateDate: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sb: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "structure",
            members: {
                level: {},
                includeExecutionData: {
                    type: "boolean"
                },
                destinations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            cloudWatchLogsLogGroup: {
                                type: "structure",
                                members: {
                                    logGroupArn: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                }
            }
        },
        Sm: {
            type: "string",
            sensitive: true
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "stateMachineVersionArn", "weight" ],
                members: {
                    stateMachineVersionArn: {},
                    weight: {
                        type: "integer"
                    }
                }
            }
        },
        S19: {
            type: "string",
            sensitive: true
        },
        S1a: {
            type: "structure",
            members: {
                included: {
                    type: "boolean"
                }
            }
        },
        S1d: {
            type: "string",
            sensitive: true
        },
        S1e: {
            type: "string",
            sensitive: true
        },
        S2h: {
            type: "structure",
            members: {
                truncated: {
                    type: "boolean"
                }
            }
        },
        S2r: {
            type: "structure",
            members: {
                roleArn: {}
            }
        },
        S36: {
            type: "structure",
            members: {
                name: {},
                index: {
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        GetExecutionHistory: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "events"
        },
        ListActivities: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "activities"
        },
        ListExecutions: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "executions"
        },
        ListMapRuns: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "mapRuns"
        },
        ListStateMachines: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "stateMachines"
        }
    }
};

AWS.apiLoader.services["support"] = {};

AWS.Support = AWS.Service.defineService("support", [ "2013-04-15" ]);

AWS.apiLoader.services["support"]["2013-04-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2013-04-15",
        endpointPrefix: "support",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Support",
        serviceId: "Support",
        signatureVersion: "v4",
        targetPrefix: "AWSSupport_20130415",
        uid: "support-2013-04-15"
    },
    operations: {
        AddAttachmentsToSet: {
            input: {
                type: "structure",
                required: [ "attachments" ],
                members: {
                    attachmentSetId: {},
                    attachments: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    attachmentSetId: {},
                    expiryTime: {}
                }
            }
        },
        AddCommunicationToCase: {
            input: {
                type: "structure",
                required: [ "communicationBody" ],
                members: {
                    caseId: {},
                    communicationBody: {},
                    ccEmailAddresses: {
                        shape: "Sc"
                    },
                    attachmentSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    result: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateCase: {
            input: {
                type: "structure",
                required: [ "subject", "communicationBody" ],
                members: {
                    subject: {},
                    serviceCode: {},
                    severityCode: {},
                    categoryCode: {},
                    communicationBody: {},
                    ccEmailAddresses: {
                        shape: "Sc"
                    },
                    language: {},
                    issueType: {},
                    attachmentSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    caseId: {}
                }
            }
        },
        DescribeAttachment: {
            input: {
                type: "structure",
                required: [ "attachmentId" ],
                members: {
                    attachmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    attachment: {
                        shape: "S4"
                    }
                }
            }
        },
        DescribeCases: {
            input: {
                type: "structure",
                members: {
                    caseIdList: {
                        type: "list",
                        member: {}
                    },
                    displayId: {},
                    afterTime: {},
                    beforeTime: {},
                    includeResolvedCases: {
                        type: "boolean"
                    },
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    language: {},
                    includeCommunications: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    cases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                caseId: {},
                                displayId: {},
                                subject: {},
                                status: {},
                                serviceCode: {},
                                categoryCode: {},
                                severityCode: {},
                                submittedBy: {},
                                timeCreated: {},
                                recentCommunications: {
                                    type: "structure",
                                    members: {
                                        communications: {
                                            shape: "S17"
                                        },
                                        nextToken: {}
                                    }
                                },
                                ccEmailAddresses: {
                                    shape: "Sc"
                                },
                                language: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeCommunications: {
            input: {
                type: "structure",
                required: [ "caseId" ],
                members: {
                    caseId: {},
                    beforeTime: {},
                    afterTime: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    communications: {
                        shape: "S17"
                    },
                    nextToken: {}
                }
            }
        },
        DescribeCreateCaseOptions: {
            input: {
                type: "structure",
                required: [ "issueType", "serviceCode", "language", "categoryCode" ],
                members: {
                    issueType: {},
                    serviceCode: {},
                    language: {},
                    categoryCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    languageAvailability: {},
                    communicationTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                type: {},
                                supportedHours: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            startTime: {},
                                            endTime: {}
                                        }
                                    }
                                },
                                datesWithoutSupport: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            startDateTime: {},
                                            endDateTime: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeServices: {
            input: {
                type: "structure",
                members: {
                    serviceCodeList: {
                        type: "list",
                        member: {}
                    },
                    language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                code: {},
                                name: {},
                                categories: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            code: {},
                                            name: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeSeverityLevels: {
            input: {
                type: "structure",
                members: {
                    language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    severityLevels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                code: {},
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeSupportedLanguages: {
            input: {
                type: "structure",
                required: [ "issueType", "serviceCode", "categoryCode" ],
                members: {
                    issueType: {},
                    serviceCode: {},
                    categoryCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    supportedLanguages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                code: {},
                                language: {},
                                display: {}
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorCheckRefreshStatuses: {
            input: {
                type: "structure",
                required: [ "checkIds" ],
                members: {
                    checkIds: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "statuses" ],
                members: {
                    statuses: {
                        type: "list",
                        member: {
                            shape: "S2k"
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorCheckResult: {
            input: {
                type: "structure",
                required: [ "checkId" ],
                members: {
                    checkId: {},
                    language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    result: {
                        type: "structure",
                        required: [ "checkId", "timestamp", "status", "resourcesSummary", "categorySpecificSummary", "flaggedResources" ],
                        members: {
                            checkId: {},
                            timestamp: {},
                            status: {},
                            resourcesSummary: {
                                shape: "S2p"
                            },
                            categorySpecificSummary: {
                                shape: "S2q"
                            },
                            flaggedResources: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "status", "resourceId", "metadata" ],
                                    members: {
                                        status: {},
                                        region: {},
                                        resourceId: {},
                                        isSuppressed: {
                                            type: "boolean"
                                        },
                                        metadata: {
                                            shape: "S2g"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorCheckSummaries: {
            input: {
                type: "structure",
                required: [ "checkIds" ],
                members: {
                    checkIds: {
                        shape: "S2g"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "summaries" ],
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "checkId", "timestamp", "status", "resourcesSummary", "categorySpecificSummary" ],
                            members: {
                                checkId: {},
                                timestamp: {},
                                status: {},
                                hasFlaggedResources: {
                                    type: "boolean"
                                },
                                resourcesSummary: {
                                    shape: "S2p"
                                },
                                categorySpecificSummary: {
                                    shape: "S2q"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeTrustedAdvisorChecks: {
            input: {
                type: "structure",
                required: [ "language" ],
                members: {
                    language: {}
                }
            },
            output: {
                type: "structure",
                required: [ "checks" ],
                members: {
                    checks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "name", "description", "category", "metadata" ],
                            members: {
                                id: {},
                                name: {},
                                description: {},
                                category: {},
                                metadata: {
                                    shape: "S2g"
                                }
                            }
                        }
                    }
                }
            }
        },
        RefreshTrustedAdvisorCheck: {
            input: {
                type: "structure",
                required: [ "checkId" ],
                members: {
                    checkId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "status" ],
                members: {
                    status: {
                        shape: "S2k"
                    }
                }
            }
        },
        ResolveCase: {
            input: {
                type: "structure",
                members: {
                    caseId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    initialCaseStatus: {},
                    finalCaseStatus: {}
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                fileName: {},
                data: {
                    type: "blob"
                }
            }
        },
        Sc: {
            type: "list",
            member: {}
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    caseId: {},
                    body: {},
                    submittedBy: {},
                    timeCreated: {},
                    attachmentSet: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                attachmentId: {},
                                fileName: {}
                            }
                        }
                    }
                }
            }
        },
        S2g: {
            type: "list",
            member: {}
        },
        S2k: {
            type: "structure",
            required: [ "checkId", "status", "millisUntilNextRefreshable" ],
            members: {
                checkId: {},
                status: {},
                millisUntilNextRefreshable: {
                    type: "long"
                }
            }
        },
        S2p: {
            type: "structure",
            required: [ "resourcesProcessed", "resourcesFlagged", "resourcesIgnored", "resourcesSuppressed" ],
            members: {
                resourcesProcessed: {
                    type: "long"
                },
                resourcesFlagged: {
                    type: "long"
                },
                resourcesIgnored: {
                    type: "long"
                },
                resourcesSuppressed: {
                    type: "long"
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                costOptimizing: {
                    type: "structure",
                    required: [ "estimatedMonthlySavings", "estimatedPercentMonthlySavings" ],
                    members: {
                        estimatedMonthlySavings: {
                            type: "double"
                        },
                        estimatedPercentMonthlySavings: {
                            type: "double"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeCases: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "cases"
        },
        DescribeCommunications: {
            input_token: "nextToken",
            limit_key: "maxResults",
            output_token: "nextToken",
            result_key: "communications"
        },
        DescribeServices: {
            result_key: "services"
        },
        DescribeTrustedAdvisorCheckRefreshStatuses: {
            result_key: "statuses"
        },
        DescribeTrustedAdvisorCheckSummaries: {
            result_key: "summaries"
        }
    }
};

AWS.apiLoader.services["swf"] = {};

AWS.SWF = AWS.Service.defineService("swf", [ "2012-01-25" ]);

_xamzrequire = function e(t, n, r) {
    function s(o, u) {
        if (!n[o]) {
            if (!t[o]) {
                var a = typeof _xamzrequire == "function" && _xamzrequire;
                if (!u && a) return a(o, !0);
                if (i) return i(o, !0);
                var f = new Error("Cannot find module '" + o + "'");
                throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {
                exports: {}
            };
            t[o][0].call(l.exports, function(e) {
                var n = t[o][1][e];
                return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
        }
        return n[o].exports;
    }
    var i = typeof _xamzrequire == "function" && _xamzrequire;
    for (var o = 0; o < r.length; o++) s(r[o]);
    return s;
}({
    120: [ function(require, module, exports) {
        var AWS = require("../core");
        AWS.util.hideProperties(AWS, [ "SimpleWorkflow" ]);
        AWS.SimpleWorkflow = AWS.SWF;
    }, {
        "../core": 44
    } ]
}, {}, [ 120 ]);

AWS.apiLoader.services["swf"]["2012-01-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2012-01-25",
        endpointPrefix: "swf",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "Amazon SWF",
        serviceFullName: "Amazon Simple Workflow Service",
        serviceId: "SWF",
        signatureVersion: "v4",
        targetPrefix: "SimpleWorkflowService",
        uid: "swf-2012-01-25"
    },
    operations: {
        CountClosedWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    closeTimeFilter: {
                        shape: "S3"
                    },
                    executionFilter: {
                        shape: "S5"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    closeStatusFilter: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                shape: "Se"
            }
        },
        CountOpenWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain", "startTimeFilter" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    executionFilter: {
                        shape: "S5"
                    }
                }
            },
            output: {
                shape: "Se"
            }
        },
        CountPendingActivityTasks: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                shape: "Sk"
            }
        },
        CountPendingDecisionTasks: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                shape: "Sk"
            }
        },
        DeprecateActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "activityType" ],
                members: {
                    domain: {},
                    activityType: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeprecateDomain: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        DeprecateWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "workflowType" ],
                members: {
                    domain: {},
                    workflowType: {
                        shape: "Sr"
                    }
                }
            }
        },
        DescribeActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "activityType" ],
                members: {
                    domain: {},
                    activityType: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfo", "configuration" ],
                members: {
                    typeInfo: {
                        shape: "Su"
                    },
                    configuration: {
                        type: "structure",
                        members: {
                            defaultTaskStartToCloseTimeout: {},
                            defaultTaskHeartbeatTimeout: {},
                            defaultTaskList: {
                                shape: "Sj"
                            },
                            defaultTaskPriority: {},
                            defaultTaskScheduleToStartTimeout: {},
                            defaultTaskScheduleToCloseTimeout: {}
                        }
                    }
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainInfo", "configuration" ],
                members: {
                    domainInfo: {
                        shape: "S12"
                    },
                    configuration: {
                        type: "structure",
                        required: [ "workflowExecutionRetentionPeriodInDays" ],
                        members: {
                            workflowExecutionRetentionPeriodInDays: {}
                        }
                    }
                }
            }
        },
        DescribeWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "execution" ],
                members: {
                    domain: {},
                    execution: {
                        shape: "S17"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "executionInfo", "executionConfiguration", "openCounts" ],
                members: {
                    executionInfo: {
                        shape: "S1a"
                    },
                    executionConfiguration: {
                        type: "structure",
                        required: [ "taskStartToCloseTimeout", "executionStartToCloseTimeout", "taskList", "childPolicy" ],
                        members: {
                            taskStartToCloseTimeout: {},
                            executionStartToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            childPolicy: {},
                            lambdaRole: {}
                        }
                    },
                    openCounts: {
                        type: "structure",
                        required: [ "openActivityTasks", "openDecisionTasks", "openTimers", "openChildWorkflowExecutions" ],
                        members: {
                            openActivityTasks: {
                                type: "integer"
                            },
                            openDecisionTasks: {
                                type: "integer"
                            },
                            openTimers: {
                                type: "integer"
                            },
                            openChildWorkflowExecutions: {
                                type: "integer"
                            },
                            openLambdaFunctions: {
                                type: "integer"
                            }
                        }
                    },
                    latestActivityTaskTimestamp: {
                        type: "timestamp"
                    },
                    latestExecutionContext: {}
                }
            }
        },
        DescribeWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "workflowType" ],
                members: {
                    domain: {},
                    workflowType: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfo", "configuration" ],
                members: {
                    typeInfo: {
                        shape: "S1m"
                    },
                    configuration: {
                        type: "structure",
                        members: {
                            defaultTaskStartToCloseTimeout: {},
                            defaultExecutionStartToCloseTimeout: {},
                            defaultTaskList: {
                                shape: "Sj"
                            },
                            defaultTaskPriority: {},
                            defaultChildPolicy: {},
                            defaultLambdaRole: {}
                        }
                    }
                }
            }
        },
        GetWorkflowExecutionHistory: {
            input: {
                type: "structure",
                required: [ "domain", "execution" ],
                members: {
                    domain: {},
                    execution: {
                        shape: "S17"
                    },
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "events" ],
                members: {
                    events: {
                        shape: "S1t"
                    },
                    nextPageToken: {}
                }
            }
        },
        ListActivityTypes: {
            input: {
                type: "structure",
                required: [ "domain", "registrationStatus" ],
                members: {
                    domain: {},
                    name: {},
                    registrationStatus: {},
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfos" ],
                members: {
                    typeInfos: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        ListClosedWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    closeTimeFilter: {
                        shape: "S3"
                    },
                    executionFilter: {
                        shape: "S5"
                    },
                    closeStatusFilter: {
                        shape: "Sc"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S4g"
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                required: [ "registrationStatus" ],
                members: {
                    nextPageToken: {},
                    registrationStatus: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domainInfos" ],
                members: {
                    domainInfos: {
                        type: "list",
                        member: {
                            shape: "S12"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        ListOpenWorkflowExecutions: {
            input: {
                type: "structure",
                required: [ "domain", "startTimeFilter" ],
                members: {
                    domain: {},
                    startTimeFilter: {
                        shape: "S3"
                    },
                    typeFilter: {
                        shape: "S7"
                    },
                    tagFilter: {
                        shape: "Sa"
                    },
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    },
                    executionFilter: {
                        shape: "S5"
                    }
                }
            },
            output: {
                shape: "S4g"
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S4o"
                    }
                }
            }
        },
        ListWorkflowTypes: {
            input: {
                type: "structure",
                required: [ "domain", "registrationStatus" ],
                members: {
                    domain: {},
                    name: {},
                    registrationStatus: {},
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "typeInfos" ],
                members: {
                    typeInfos: {
                        type: "list",
                        member: {
                            shape: "S1m"
                        }
                    },
                    nextPageToken: {}
                }
            }
        },
        PollForActivityTask: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    },
                    identity: {}
                }
            },
            output: {
                type: "structure",
                required: [ "taskToken", "activityId", "startedEventId", "workflowExecution", "activityType" ],
                members: {
                    taskToken: {},
                    activityId: {},
                    startedEventId: {
                        type: "long"
                    },
                    workflowExecution: {
                        shape: "S17"
                    },
                    activityType: {
                        shape: "Sn"
                    },
                    input: {}
                }
            }
        },
        PollForDecisionTask: {
            input: {
                type: "structure",
                required: [ "domain", "taskList" ],
                members: {
                    domain: {},
                    taskList: {
                        shape: "Sj"
                    },
                    identity: {},
                    nextPageToken: {},
                    maximumPageSize: {
                        type: "integer"
                    },
                    reverseOrder: {
                        type: "boolean"
                    },
                    startAtPreviousStartedEvent: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "taskToken", "startedEventId", "workflowExecution", "workflowType", "events" ],
                members: {
                    taskToken: {},
                    startedEventId: {
                        type: "long"
                    },
                    workflowExecution: {
                        shape: "S17"
                    },
                    workflowType: {
                        shape: "Sr"
                    },
                    events: {
                        shape: "S1t"
                    },
                    nextPageToken: {},
                    previousStartedEventId: {
                        type: "long"
                    }
                }
            }
        },
        RecordActivityTaskHeartbeat: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    details: {}
                }
            },
            output: {
                type: "structure",
                required: [ "cancelRequested" ],
                members: {
                    cancelRequested: {
                        type: "boolean"
                    }
                }
            }
        },
        RegisterActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "name", "version" ],
                members: {
                    domain: {},
                    name: {},
                    version: {},
                    description: {},
                    defaultTaskStartToCloseTimeout: {},
                    defaultTaskHeartbeatTimeout: {},
                    defaultTaskList: {
                        shape: "Sj"
                    },
                    defaultTaskPriority: {},
                    defaultTaskScheduleToStartTimeout: {},
                    defaultTaskScheduleToCloseTimeout: {}
                }
            }
        },
        RegisterDomain: {
            input: {
                type: "structure",
                required: [ "name", "workflowExecutionRetentionPeriodInDays" ],
                members: {
                    name: {},
                    description: {},
                    workflowExecutionRetentionPeriodInDays: {},
                    tags: {
                        shape: "S4o"
                    }
                }
            }
        },
        RegisterWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "name", "version" ],
                members: {
                    domain: {},
                    name: {},
                    version: {},
                    description: {},
                    defaultTaskStartToCloseTimeout: {},
                    defaultExecutionStartToCloseTimeout: {},
                    defaultTaskList: {
                        shape: "Sj"
                    },
                    defaultTaskPriority: {},
                    defaultChildPolicy: {},
                    defaultLambdaRole: {}
                }
            }
        },
        RequestCancelWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId" ],
                members: {
                    domain: {},
                    workflowId: {},
                    runId: {}
                }
            }
        },
        RespondActivityTaskCanceled: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    details: {}
                }
            }
        },
        RespondActivityTaskCompleted: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    result: {}
                }
            }
        },
        RespondActivityTaskFailed: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    reason: {},
                    details: {}
                }
            }
        },
        RespondDecisionTaskCompleted: {
            input: {
                type: "structure",
                required: [ "taskToken" ],
                members: {
                    taskToken: {},
                    decisions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "decisionType" ],
                            members: {
                                decisionType: {},
                                scheduleActivityTaskDecisionAttributes: {
                                    type: "structure",
                                    required: [ "activityType", "activityId" ],
                                    members: {
                                        activityType: {
                                            shape: "Sn"
                                        },
                                        activityId: {},
                                        control: {},
                                        input: {},
                                        scheduleToCloseTimeout: {},
                                        taskList: {
                                            shape: "Sj"
                                        },
                                        taskPriority: {},
                                        scheduleToStartTimeout: {},
                                        startToCloseTimeout: {},
                                        heartbeatTimeout: {}
                                    }
                                },
                                requestCancelActivityTaskDecisionAttributes: {
                                    type: "structure",
                                    required: [ "activityId" ],
                                    members: {
                                        activityId: {}
                                    }
                                },
                                completeWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        result: {}
                                    }
                                },
                                failWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        reason: {},
                                        details: {}
                                    }
                                },
                                cancelWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        details: {}
                                    }
                                },
                                continueAsNewWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    members: {
                                        input: {},
                                        executionStartToCloseTimeout: {},
                                        taskList: {
                                            shape: "Sj"
                                        },
                                        taskPriority: {},
                                        taskStartToCloseTimeout: {},
                                        childPolicy: {},
                                        tagList: {
                                            shape: "S1c"
                                        },
                                        workflowTypeVersion: {},
                                        lambdaRole: {}
                                    }
                                },
                                recordMarkerDecisionAttributes: {
                                    type: "structure",
                                    required: [ "markerName" ],
                                    members: {
                                        markerName: {},
                                        details: {}
                                    }
                                },
                                startTimerDecisionAttributes: {
                                    type: "structure",
                                    required: [ "timerId", "startToFireTimeout" ],
                                    members: {
                                        timerId: {},
                                        control: {},
                                        startToFireTimeout: {}
                                    }
                                },
                                cancelTimerDecisionAttributes: {
                                    type: "structure",
                                    required: [ "timerId" ],
                                    members: {
                                        timerId: {}
                                    }
                                },
                                signalExternalWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "workflowId", "signalName" ],
                                    members: {
                                        workflowId: {},
                                        runId: {},
                                        signalName: {},
                                        input: {},
                                        control: {}
                                    }
                                },
                                requestCancelExternalWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "workflowId" ],
                                    members: {
                                        workflowId: {},
                                        runId: {},
                                        control: {}
                                    }
                                },
                                startChildWorkflowExecutionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "workflowType", "workflowId" ],
                                    members: {
                                        workflowType: {
                                            shape: "Sr"
                                        },
                                        workflowId: {},
                                        control: {},
                                        input: {},
                                        executionStartToCloseTimeout: {},
                                        taskList: {
                                            shape: "Sj"
                                        },
                                        taskPriority: {},
                                        taskStartToCloseTimeout: {},
                                        childPolicy: {},
                                        tagList: {
                                            shape: "S1c"
                                        },
                                        lambdaRole: {}
                                    }
                                },
                                scheduleLambdaFunctionDecisionAttributes: {
                                    type: "structure",
                                    required: [ "id", "name" ],
                                    members: {
                                        id: {},
                                        name: {},
                                        control: {},
                                        input: {},
                                        startToCloseTimeout: {}
                                    }
                                }
                            }
                        }
                    },
                    executionContext: {},
                    taskList: {
                        shape: "Sj"
                    },
                    taskListScheduleToStartTimeout: {}
                }
            }
        },
        SignalWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId", "signalName" ],
                members: {
                    domain: {},
                    workflowId: {},
                    runId: {},
                    signalName: {},
                    input: {}
                }
            }
        },
        StartWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId", "workflowType" ],
                members: {
                    domain: {},
                    workflowId: {},
                    workflowType: {
                        shape: "Sr"
                    },
                    taskList: {
                        shape: "Sj"
                    },
                    taskPriority: {},
                    input: {},
                    executionStartToCloseTimeout: {},
                    tagList: {
                        shape: "S1c"
                    },
                    taskStartToCloseTimeout: {},
                    childPolicy: {},
                    lambdaRole: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    runId: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S4o"
                    }
                }
            }
        },
        TerminateWorkflowExecution: {
            input: {
                type: "structure",
                required: [ "domain", "workflowId" ],
                members: {
                    domain: {},
                    workflowId: {},
                    runId: {},
                    reason: {},
                    details: {},
                    childPolicy: {}
                }
            }
        },
        UndeprecateActivityType: {
            input: {
                type: "structure",
                required: [ "domain", "activityType" ],
                members: {
                    domain: {},
                    activityType: {
                        shape: "Sn"
                    }
                }
            }
        },
        UndeprecateDomain: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        UndeprecateWorkflowType: {
            input: {
                type: "structure",
                required: [ "domain", "workflowType" ],
                members: {
                    domain: {},
                    workflowType: {
                        shape: "Sr"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "oldestDate" ],
            members: {
                oldestDate: {
                    type: "timestamp"
                },
                latestDate: {
                    type: "timestamp"
                }
            }
        },
        S5: {
            type: "structure",
            required: [ "workflowId" ],
            members: {
                workflowId: {}
            }
        },
        S7: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                version: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "tag" ],
            members: {
                tag: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        },
        Se: {
            type: "structure",
            required: [ "count" ],
            members: {
                count: {
                    type: "integer"
                },
                truncated: {
                    type: "boolean"
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "count" ],
            members: {
                count: {
                    type: "integer"
                },
                truncated: {
                    type: "boolean"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "name", "version" ],
            members: {
                name: {},
                version: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "name", "version" ],
            members: {
                name: {},
                version: {}
            }
        },
        Su: {
            type: "structure",
            required: [ "activityType", "status", "creationDate" ],
            members: {
                activityType: {
                    shape: "Sn"
                },
                status: {},
                description: {},
                creationDate: {
                    type: "timestamp"
                },
                deprecationDate: {
                    type: "timestamp"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "name", "status" ],
            members: {
                name: {},
                status: {},
                description: {},
                arn: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "workflowId", "runId" ],
            members: {
                workflowId: {},
                runId: {}
            }
        },
        S1a: {
            type: "structure",
            required: [ "execution", "workflowType", "startTimestamp", "executionStatus" ],
            members: {
                execution: {
                    shape: "S17"
                },
                workflowType: {
                    shape: "Sr"
                },
                startTimestamp: {
                    type: "timestamp"
                },
                closeTimestamp: {
                    type: "timestamp"
                },
                executionStatus: {},
                closeStatus: {},
                parent: {
                    shape: "S17"
                },
                tagList: {
                    shape: "S1c"
                },
                cancelRequested: {
                    type: "boolean"
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "structure",
            required: [ "workflowType", "status", "creationDate" ],
            members: {
                workflowType: {
                    shape: "Sr"
                },
                status: {},
                description: {},
                creationDate: {
                    type: "timestamp"
                },
                deprecationDate: {
                    type: "timestamp"
                }
            }
        },
        S1t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "eventTimestamp", "eventType", "eventId" ],
                members: {
                    eventTimestamp: {
                        type: "timestamp"
                    },
                    eventType: {},
                    eventId: {
                        type: "long"
                    },
                    workflowExecutionStartedEventAttributes: {
                        type: "structure",
                        required: [ "childPolicy", "taskList", "workflowType" ],
                        members: {
                            input: {},
                            executionStartToCloseTimeout: {},
                            taskStartToCloseTimeout: {},
                            childPolicy: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            workflowType: {
                                shape: "Sr"
                            },
                            tagList: {
                                shape: "S1c"
                            },
                            continuedExecutionRunId: {},
                            parentWorkflowExecution: {
                                shape: "S17"
                            },
                            parentInitiatedEventId: {
                                type: "long"
                            },
                            lambdaRole: {}
                        }
                    },
                    workflowExecutionCompletedEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId" ],
                        members: {
                            result: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    completeWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId" ],
                        members: {
                            reason: {},
                            details: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    failWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "timeoutType", "childPolicy" ],
                        members: {
                            timeoutType: {},
                            childPolicy: {}
                        }
                    },
                    workflowExecutionCanceledEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId" ],
                        members: {
                            details: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    cancelWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionContinuedAsNewEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId", "newExecutionRunId", "taskList", "childPolicy", "workflowType" ],
                        members: {
                            input: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            newExecutionRunId: {},
                            executionStartToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            taskStartToCloseTimeout: {},
                            childPolicy: {},
                            tagList: {
                                shape: "S1c"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            lambdaRole: {}
                        }
                    },
                    continueAsNewWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    workflowExecutionTerminatedEventAttributes: {
                        type: "structure",
                        required: [ "childPolicy" ],
                        members: {
                            reason: {},
                            details: {},
                            childPolicy: {},
                            cause: {}
                        }
                    },
                    workflowExecutionCancelRequestedEventAttributes: {
                        type: "structure",
                        members: {
                            externalWorkflowExecution: {
                                shape: "S17"
                            },
                            externalInitiatedEventId: {
                                type: "long"
                            },
                            cause: {}
                        }
                    },
                    decisionTaskScheduledEventAttributes: {
                        type: "structure",
                        required: [ "taskList" ],
                        members: {
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            startToCloseTimeout: {},
                            scheduleToStartTimeout: {}
                        }
                    },
                    decisionTaskStartedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId" ],
                        members: {
                            identity: {},
                            scheduledEventId: {
                                type: "long"
                            }
                        }
                    },
                    decisionTaskCompletedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            executionContext: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            taskList: {
                                shape: "Sj"
                            },
                            taskListScheduleToStartTimeout: {}
                        }
                    },
                    decisionTaskTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "timeoutType", "scheduledEventId", "startedEventId" ],
                        members: {
                            timeoutType: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskScheduledEventAttributes: {
                        type: "structure",
                        required: [ "activityType", "activityId", "taskList", "decisionTaskCompletedEventId" ],
                        members: {
                            activityType: {
                                shape: "Sn"
                            },
                            activityId: {},
                            input: {},
                            control: {},
                            scheduleToStartTimeout: {},
                            scheduleToCloseTimeout: {},
                            startToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            heartbeatTimeout: {}
                        }
                    },
                    activityTaskStartedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId" ],
                        members: {
                            identity: {},
                            scheduledEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskCompletedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            result: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskFailedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            reason: {},
                            details: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "timeoutType", "scheduledEventId", "startedEventId" ],
                        members: {
                            timeoutType: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            details: {}
                        }
                    },
                    activityTaskCanceledEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            details: {},
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            latestCancelRequestedEventId: {
                                type: "long"
                            }
                        }
                    },
                    activityTaskCancelRequestedEventAttributes: {
                        type: "structure",
                        required: [ "decisionTaskCompletedEventId", "activityId" ],
                        members: {
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            activityId: {}
                        }
                    },
                    workflowExecutionSignaledEventAttributes: {
                        type: "structure",
                        required: [ "signalName" ],
                        members: {
                            signalName: {},
                            input: {},
                            externalWorkflowExecution: {
                                shape: "S17"
                            },
                            externalInitiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    markerRecordedEventAttributes: {
                        type: "structure",
                        required: [ "markerName", "decisionTaskCompletedEventId" ],
                        members: {
                            markerName: {},
                            details: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    recordMarkerFailedEventAttributes: {
                        type: "structure",
                        required: [ "markerName", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            markerName: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    timerStartedEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "startToFireTimeout", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            control: {},
                            startToFireTimeout: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    timerFiredEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "startedEventId" ],
                        members: {
                            timerId: {},
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    timerCanceledEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "startedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            startedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startChildWorkflowExecutionInitiatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "workflowType", "taskList", "decisionTaskCompletedEventId", "childPolicy" ],
                        members: {
                            workflowId: {},
                            workflowType: {
                                shape: "Sr"
                            },
                            control: {},
                            input: {},
                            executionStartToCloseTimeout: {},
                            taskList: {
                                shape: "Sj"
                            },
                            taskPriority: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            childPolicy: {},
                            taskStartToCloseTimeout: {},
                            tagList: {
                                shape: "S1c"
                            },
                            lambdaRole: {}
                        }
                    },
                    childWorkflowExecutionStartedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            initiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionCompletedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            result: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            reason: {},
                            details: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "timeoutType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            timeoutType: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionCanceledEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            details: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    childWorkflowExecutionTerminatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "workflowType", "initiatedEventId", "startedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            workflowType: {
                                shape: "Sr"
                            },
                            initiatedEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            }
                        }
                    },
                    signalExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "signalName", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            signalName: {},
                            input: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    externalWorkflowExecutionSignaledEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "initiatedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            initiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    signalExternalWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "cause", "initiatedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            cause: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    externalWorkflowExecutionCancelRequestedEventAttributes: {
                        type: "structure",
                        required: [ "workflowExecution", "initiatedEventId" ],
                        members: {
                            workflowExecution: {
                                shape: "S17"
                            },
                            initiatedEventId: {
                                type: "long"
                            }
                        }
                    },
                    requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowId", "cause", "initiatedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowId: {},
                            runId: {},
                            cause: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    scheduleActivityTaskFailedEventAttributes: {
                        type: "structure",
                        required: [ "activityType", "activityId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            activityType: {
                                shape: "Sn"
                            },
                            activityId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    requestCancelActivityTaskFailedEventAttributes: {
                        type: "structure",
                        required: [ "activityId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            activityId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startTimerFailedEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    cancelTimerFailedEventAttributes: {
                        type: "structure",
                        required: [ "timerId", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            timerId: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startChildWorkflowExecutionFailedEventAttributes: {
                        type: "structure",
                        required: [ "workflowType", "cause", "workflowId", "initiatedEventId", "decisionTaskCompletedEventId" ],
                        members: {
                            workflowType: {
                                shape: "Sr"
                            },
                            cause: {},
                            workflowId: {},
                            initiatedEventId: {
                                type: "long"
                            },
                            decisionTaskCompletedEventId: {
                                type: "long"
                            },
                            control: {}
                        }
                    },
                    lambdaFunctionScheduledEventAttributes: {
                        type: "structure",
                        required: [ "id", "name", "decisionTaskCompletedEventId" ],
                        members: {
                            id: {},
                            name: {},
                            control: {},
                            input: {},
                            startToCloseTimeout: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    lambdaFunctionStartedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            }
                        }
                    },
                    lambdaFunctionCompletedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            result: {}
                        }
                    },
                    lambdaFunctionFailedEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            reason: {},
                            details: {}
                        }
                    },
                    lambdaFunctionTimedOutEventAttributes: {
                        type: "structure",
                        required: [ "scheduledEventId", "startedEventId" ],
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            startedEventId: {
                                type: "long"
                            },
                            timeoutType: {}
                        }
                    },
                    scheduleLambdaFunctionFailedEventAttributes: {
                        type: "structure",
                        required: [ "id", "name", "cause", "decisionTaskCompletedEventId" ],
                        members: {
                            id: {},
                            name: {},
                            cause: {},
                            decisionTaskCompletedEventId: {
                                type: "long"
                            }
                        }
                    },
                    startLambdaFunctionFailedEventAttributes: {
                        type: "structure",
                        members: {
                            scheduledEventId: {
                                type: "long"
                            },
                            cause: {},
                            message: {}
                        }
                    }
                }
            }
        },
        S4g: {
            type: "structure",
            required: [ "executionInfos" ],
            members: {
                executionInfos: {
                    type: "list",
                    member: {
                        shape: "S1a"
                    }
                },
                nextPageToken: {}
            }
        },
        S4o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        GetWorkflowExecutionHistory: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "events"
        },
        ListActivityTypes: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "typeInfos"
        },
        ListClosedWorkflowExecutions: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "executionInfos"
        },
        ListDomains: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "domainInfos"
        },
        ListOpenWorkflowExecutions: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "executionInfos"
        },
        ListWorkflowTypes: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "typeInfos"
        },
        PollForDecisionTask: {
            input_token: "nextPageToken",
            limit_key: "maximumPageSize",
            output_token: "nextPageToken",
            result_key: "events"
        }
    }
};

AWS.apiLoader.services["xray"] = {};

AWS.XRay = AWS.Service.defineService("xray", [ "2016-04-12" ]);

AWS.apiLoader.services["xray"]["2016-04-12"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-04-12",
        endpointPrefix: "xray",
        protocol: "rest-json",
        serviceFullName: "AWS X-Ray",
        serviceId: "XRay",
        signatureVersion: "v4",
        uid: "xray-2016-04-12"
    },
    operations: {
        BatchGetTraces: {
            http: {
                requestUri: "/Traces"
            },
            input: {
                type: "structure",
                required: [ "TraceIds" ],
                members: {
                    TraceIds: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Traces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Duration: {
                                    type: "double"
                                },
                                LimitExceeded: {
                                    type: "boolean"
                                },
                                Segments: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Id: {},
                                            Document: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    UnprocessedTraceIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/CreateGroup"
            },
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    FilterExpression: {},
                    InsightsConfiguration: {
                        shape: "Si"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "So"
                    }
                }
            }
        },
        CreateSamplingRule: {
            http: {
                requestUri: "/CreateSamplingRule"
            },
            input: {
                type: "structure",
                required: [ "SamplingRule" ],
                members: {
                    SamplingRule: {
                        shape: "Sq"
                    },
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecord: {
                        shape: "S16"
                    }
                }
            }
        },
        DeleteGroup: {
            http: {
                requestUri: "/DeleteGroup"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {},
                    GroupARN: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            http: {
                requestUri: "/DeleteResourcePolicy"
            },
            input: {
                type: "structure",
                required: [ "PolicyName" ],
                members: {
                    PolicyName: {},
                    PolicyRevisionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSamplingRule: {
            http: {
                requestUri: "/DeleteSamplingRule"
            },
            input: {
                type: "structure",
                members: {
                    RuleName: {},
                    RuleARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecord: {
                        shape: "S16"
                    }
                }
            }
        },
        GetEncryptionConfig: {
            http: {
                requestUri: "/EncryptionConfig"
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    EncryptionConfig: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetGroup: {
            http: {
                requestUri: "/GetGroup"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {},
                    GroupARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "So"
                    }
                }
            }
        },
        GetGroups: {
            http: {
                requestUri: "/Groups"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupName: {},
                                GroupARN: {},
                                FilterExpression: {},
                                InsightsConfiguration: {
                                    shape: "Si"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsight: {
            http: {
                requestUri: "/Insight"
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Insight: {
                        type: "structure",
                        members: {
                            InsightId: {},
                            GroupARN: {},
                            GroupName: {},
                            RootCauseServiceId: {
                                shape: "S1x"
                            },
                            Categories: {
                                shape: "S1z"
                            },
                            State: {},
                            StartTime: {
                                type: "timestamp"
                            },
                            EndTime: {
                                type: "timestamp"
                            },
                            Summary: {},
                            ClientRequestImpactStatistics: {
                                shape: "S23"
                            },
                            RootCauseServiceRequestImpactStatistics: {
                                shape: "S23"
                            },
                            TopAnomalousServices: {
                                shape: "S25"
                            }
                        }
                    }
                }
            }
        },
        GetInsightEvents: {
            http: {
                requestUri: "/InsightEvents"
            },
            input: {
                type: "structure",
                required: [ "InsightId" ],
                members: {
                    InsightId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Summary: {},
                                EventTime: {
                                    type: "timestamp"
                                },
                                ClientRequestImpactStatistics: {
                                    shape: "S23"
                                },
                                RootCauseServiceRequestImpactStatistics: {
                                    shape: "S23"
                                },
                                TopAnomalousServices: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsightImpactGraph: {
            http: {
                requestUri: "/InsightImpactGraph"
            },
            input: {
                type: "structure",
                required: [ "InsightId", "StartTime", "EndTime" ],
                members: {
                    InsightId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightId: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    ServiceGraphStartTime: {
                        type: "timestamp"
                    },
                    ServiceGraphEndTime: {
                        type: "timestamp"
                    },
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReferenceId: {
                                    type: "integer"
                                },
                                Type: {},
                                Name: {},
                                Names: {
                                    shape: "S1y"
                                },
                                AccountId: {},
                                Edges: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ReferenceId: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetInsightSummaries: {
            http: {
                requestUri: "/InsightSummaries"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    States: {
                        type: "list",
                        member: {}
                    },
                    GroupARN: {},
                    GroupName: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InsightSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                InsightId: {},
                                GroupARN: {},
                                GroupName: {},
                                RootCauseServiceId: {
                                    shape: "S1x"
                                },
                                Categories: {
                                    shape: "S1z"
                                },
                                State: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Summary: {},
                                ClientRequestImpactStatistics: {
                                    shape: "S23"
                                },
                                RootCauseServiceRequestImpactStatistics: {
                                    shape: "S23"
                                },
                                TopAnomalousServices: {
                                    shape: "S25"
                                },
                                LastUpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSamplingRules: {
            http: {
                requestUri: "/GetSamplingRules"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecords: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSamplingStatisticSummaries: {
            http: {
                requestUri: "/SamplingStatisticSummaries"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingStatisticSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleName: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                RequestCount: {
                                    type: "integer"
                                },
                                BorrowCount: {
                                    type: "integer"
                                },
                                SampledCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSamplingTargets: {
            http: {
                requestUri: "/SamplingTargets"
            },
            input: {
                type: "structure",
                required: [ "SamplingStatisticsDocuments" ],
                members: {
                    SamplingStatisticsDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleName", "ClientID", "Timestamp", "RequestCount", "SampledCount" ],
                            members: {
                                RuleName: {},
                                ClientID: {},
                                Timestamp: {
                                    type: "timestamp"
                                },
                                RequestCount: {
                                    type: "integer"
                                },
                                SampledCount: {
                                    type: "integer"
                                },
                                BorrowCount: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingTargetDocuments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleName: {},
                                FixedRate: {
                                    type: "double"
                                },
                                ReservoirQuota: {
                                    type: "integer"
                                },
                                ReservoirQuotaTTL: {
                                    type: "timestamp"
                                },
                                Interval: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    LastRuleModification: {
                        type: "timestamp"
                    },
                    UnprocessedStatistics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleName: {},
                                ErrorCode: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        GetServiceGraph: {
            http: {
                requestUri: "/ServiceGraph"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    GroupName: {},
                    GroupARN: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Services: {
                        shape: "S3e"
                    },
                    ContainsOldGroupVersions: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            }
        },
        GetTimeSeriesServiceStatistics: {
            http: {
                requestUri: "/TimeSeriesServiceStatistics"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    GroupName: {},
                    GroupARN: {},
                    EntitySelectorExpression: {},
                    Period: {
                        type: "integer"
                    },
                    ForecastStatistics: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TimeSeriesServiceStatistics: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                EdgeSummaryStatistics: {
                                    shape: "S3i"
                                },
                                ServiceSummaryStatistics: {
                                    shape: "S3q"
                                },
                                ServiceForecastStatistics: {
                                    type: "structure",
                                    members: {
                                        FaultCountHigh: {
                                            type: "long"
                                        },
                                        FaultCountLow: {
                                            type: "long"
                                        }
                                    }
                                },
                                ResponseTimeHistogram: {
                                    shape: "S3l"
                                }
                            }
                        }
                    },
                    ContainsOldGroupVersions: {
                        type: "boolean"
                    },
                    NextToken: {}
                }
            }
        },
        GetTraceGraph: {
            http: {
                requestUri: "/TraceGraph"
            },
            input: {
                type: "structure",
                required: [ "TraceIds" ],
                members: {
                    TraceIds: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        shape: "S3e"
                    },
                    NextToken: {}
                }
            }
        },
        GetTraceSummaries: {
            http: {
                requestUri: "/TraceSummaries"
            },
            input: {
                type: "structure",
                required: [ "StartTime", "EndTime" ],
                members: {
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    TimeRangeType: {},
                    Sampling: {
                        type: "boolean"
                    },
                    SamplingStrategy: {
                        type: "structure",
                        members: {
                            Name: {},
                            Value: {
                                type: "double"
                            }
                        }
                    },
                    FilterExpression: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TraceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                Duration: {
                                    type: "double"
                                },
                                ResponseTime: {
                                    type: "double"
                                },
                                HasFault: {
                                    type: "boolean"
                                },
                                HasError: {
                                    type: "boolean"
                                },
                                HasThrottle: {
                                    type: "boolean"
                                },
                                IsPartial: {
                                    type: "boolean"
                                },
                                Http: {
                                    type: "structure",
                                    members: {
                                        HttpURL: {},
                                        HttpStatus: {
                                            type: "integer"
                                        },
                                        HttpMethod: {},
                                        UserAgent: {},
                                        ClientIp: {}
                                    }
                                },
                                Annotations: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                AnnotationValue: {
                                                    type: "structure",
                                                    members: {
                                                        NumberValue: {
                                                            type: "double"
                                                        },
                                                        BooleanValue: {
                                                            type: "boolean"
                                                        },
                                                        StringValue: {}
                                                    }
                                                },
                                                ServiceIds: {
                                                    shape: "S4d"
                                                }
                                            }
                                        }
                                    }
                                },
                                Users: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            UserName: {},
                                            ServiceIds: {
                                                shape: "S4d"
                                            }
                                        }
                                    }
                                },
                                ServiceIds: {
                                    shape: "S4d"
                                },
                                ResourceARNs: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ARN: {}
                                        }
                                    }
                                },
                                InstanceIds: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Id: {}
                                        }
                                    }
                                },
                                AvailabilityZones: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {}
                                        }
                                    }
                                },
                                EntryPoint: {
                                    shape: "S1x"
                                },
                                FaultRootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Services: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Names: {
                                                            shape: "S1y"
                                                        },
                                                        Type: {},
                                                        AccountId: {},
                                                        EntityPath: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Exceptions: {
                                                                        shape: "S4s"
                                                                    },
                                                                    Remote: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Inferred: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            ClientImpacting: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                ErrorRootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Services: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Names: {
                                                            shape: "S1y"
                                                        },
                                                        Type: {},
                                                        AccountId: {},
                                                        EntityPath: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Exceptions: {
                                                                        shape: "S4s"
                                                                    },
                                                                    Remote: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Inferred: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            ClientImpacting: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                ResponseTimeRootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Services: {
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {},
                                                        Names: {
                                                            shape: "S1y"
                                                        },
                                                        Type: {},
                                                        AccountId: {},
                                                        EntityPath: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Name: {},
                                                                    Coverage: {
                                                                        type: "double"
                                                                    },
                                                                    Remote: {
                                                                        type: "boolean"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Inferred: {
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            },
                                            ClientImpacting: {
                                                type: "boolean"
                                            }
                                        }
                                    }
                                },
                                Revision: {
                                    type: "integer"
                                },
                                MatchedEventTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    ApproximateTime: {
                        type: "timestamp"
                    },
                    TracesProcessedCount: {
                        type: "long"
                    },
                    NextToken: {}
                }
            }
        },
        ListResourcePolicies: {
            http: {
                requestUri: "/ListResourcePolicies"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourcePolicies: {
                        type: "list",
                        member: {
                            shape: "S5a"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sj"
                    },
                    NextToken: {}
                }
            }
        },
        PutEncryptionConfig: {
            http: {
                requestUri: "/PutEncryptionConfig"
            },
            input: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    KeyId: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EncryptionConfig: {
                        shape: "S1j"
                    }
                }
            }
        },
        PutResourcePolicy: {
            http: {
                requestUri: "/PutResourcePolicy"
            },
            input: {
                type: "structure",
                required: [ "PolicyName", "PolicyDocument" ],
                members: {
                    PolicyName: {},
                    PolicyDocument: {},
                    PolicyRevisionId: {},
                    BypassPolicyLockoutCheck: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourcePolicy: {
                        shape: "S5a"
                    }
                }
            }
        },
        PutTelemetryRecords: {
            http: {
                requestUri: "/TelemetryRecords"
            },
            input: {
                type: "structure",
                required: [ "TelemetryRecords" ],
                members: {
                    TelemetryRecords: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Timestamp" ],
                            members: {
                                Timestamp: {
                                    type: "timestamp"
                                },
                                SegmentsReceivedCount: {
                                    type: "integer"
                                },
                                SegmentsSentCount: {
                                    type: "integer"
                                },
                                SegmentsSpilloverCount: {
                                    type: "integer"
                                },
                                SegmentsRejectedCount: {
                                    type: "integer"
                                },
                                BackendConnectionErrors: {
                                    type: "structure",
                                    members: {
                                        TimeoutCount: {
                                            type: "integer"
                                        },
                                        ConnectionRefusedCount: {
                                            type: "integer"
                                        },
                                        HTTPCode4XXCount: {
                                            type: "integer"
                                        },
                                        HTTPCode5XXCount: {
                                            type: "integer"
                                        },
                                        UnknownHostCount: {
                                            type: "integer"
                                        },
                                        OtherCount: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    EC2InstanceId: {},
                    Hostname: {},
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutTraceSegments: {
            http: {
                requestUri: "/TraceSegments"
            },
            input: {
                type: "structure",
                required: [ "TraceSegmentDocuments" ],
                members: {
                    TraceSegmentDocuments: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnprocessedTraceSegments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                ErrorCode: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGroup: {
            http: {
                requestUri: "/UpdateGroup"
            },
            input: {
                type: "structure",
                members: {
                    GroupName: {},
                    GroupARN: {},
                    FilterExpression: {},
                    InsightsConfiguration: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Group: {
                        shape: "So"
                    }
                }
            }
        },
        UpdateSamplingRule: {
            http: {
                requestUri: "/UpdateSamplingRule"
            },
            input: {
                type: "structure",
                required: [ "SamplingRuleUpdate" ],
                members: {
                    SamplingRuleUpdate: {
                        type: "structure",
                        members: {
                            RuleName: {},
                            RuleARN: {},
                            ResourceARN: {},
                            Priority: {
                                type: "integer"
                            },
                            FixedRate: {
                                type: "double"
                            },
                            ReservoirSize: {
                                type: "integer"
                            },
                            Host: {},
                            ServiceName: {},
                            ServiceType: {},
                            HTTPMethod: {},
                            URLPath: {},
                            Attributes: {
                                shape: "S12"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SamplingRuleRecord: {
                        shape: "S16"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        Si: {
            type: "structure",
            members: {
                InsightsEnabled: {
                    type: "boolean"
                },
                NotificationsEnabled: {
                    type: "boolean"
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        So: {
            type: "structure",
            members: {
                GroupName: {},
                GroupARN: {},
                FilterExpression: {},
                InsightsConfiguration: {
                    shape: "Si"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "ResourceARN", "Priority", "FixedRate", "ReservoirSize", "ServiceName", "ServiceType", "Host", "HTTPMethod", "URLPath", "Version" ],
            members: {
                RuleName: {},
                RuleARN: {},
                ResourceARN: {},
                Priority: {
                    type: "integer"
                },
                FixedRate: {
                    type: "double"
                },
                ReservoirSize: {
                    type: "integer"
                },
                ServiceName: {},
                ServiceType: {},
                Host: {},
                HTTPMethod: {},
                URLPath: {},
                Version: {
                    type: "integer"
                },
                Attributes: {
                    shape: "S12"
                }
            }
        },
        S12: {
            type: "map",
            key: {},
            value: {}
        },
        S16: {
            type: "structure",
            members: {
                SamplingRule: {
                    shape: "Sq"
                },
                CreatedAt: {
                    type: "timestamp"
                },
                ModifiedAt: {
                    type: "timestamp"
                }
            }
        },
        S1j: {
            type: "structure",
            members: {
                KeyId: {},
                Status: {},
                Type: {}
            }
        },
        S1x: {
            type: "structure",
            members: {
                Name: {},
                Names: {
                    shape: "S1y"
                },
                AccountId: {},
                Type: {}
            }
        },
        S1y: {
            type: "list",
            member: {}
        },
        S1z: {
            type: "list",
            member: {}
        },
        S23: {
            type: "structure",
            members: {
                FaultCount: {
                    type: "long"
                },
                OkCount: {
                    type: "long"
                },
                TotalCount: {
                    type: "long"
                }
            }
        },
        S25: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ServiceId: {
                        shape: "S1x"
                    }
                }
            }
        },
        S3e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ReferenceId: {
                        type: "integer"
                    },
                    Name: {},
                    Names: {
                        shape: "S1y"
                    },
                    Root: {
                        type: "boolean"
                    },
                    AccountId: {},
                    Type: {},
                    State: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Edges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ReferenceId: {
                                    type: "integer"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                SummaryStatistics: {
                                    shape: "S3i"
                                },
                                ResponseTimeHistogram: {
                                    shape: "S3l"
                                },
                                Aliases: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Names: {
                                                type: "list",
                                                member: {}
                                            },
                                            Type: {}
                                        }
                                    }
                                },
                                EdgeType: {},
                                ReceivedEventAgeHistogram: {
                                    shape: "S3l"
                                }
                            }
                        }
                    },
                    SummaryStatistics: {
                        shape: "S3q"
                    },
                    DurationHistogram: {
                        shape: "S3l"
                    },
                    ResponseTimeHistogram: {
                        shape: "S3l"
                    }
                }
            }
        },
        S3i: {
            type: "structure",
            members: {
                OkCount: {
                    type: "long"
                },
                ErrorStatistics: {
                    shape: "S3j"
                },
                FaultStatistics: {
                    shape: "S3k"
                },
                TotalCount: {
                    type: "long"
                },
                TotalResponseTime: {
                    type: "double"
                }
            }
        },
        S3j: {
            type: "structure",
            members: {
                ThrottleCount: {
                    type: "long"
                },
                OtherCount: {
                    type: "long"
                },
                TotalCount: {
                    type: "long"
                }
            }
        },
        S3k: {
            type: "structure",
            members: {
                OtherCount: {
                    type: "long"
                },
                TotalCount: {
                    type: "long"
                }
            }
        },
        S3l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {
                        type: "double"
                    },
                    Count: {
                        type: "integer"
                    }
                }
            }
        },
        S3q: {
            type: "structure",
            members: {
                OkCount: {
                    type: "long"
                },
                ErrorStatistics: {
                    shape: "S3j"
                },
                FaultStatistics: {
                    shape: "S3k"
                },
                TotalCount: {
                    type: "long"
                },
                TotalResponseTime: {
                    type: "double"
                }
            }
        },
        S4d: {
            type: "list",
            member: {
                shape: "S1x"
            }
        },
        S4s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Message: {}
                }
            }
        },
        S5a: {
            type: "structure",
            members: {
                PolicyName: {},
                PolicyDocument: {},
                PolicyRevisionId: {},
                LastUpdatedTime: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        BatchGetTraces: {
            input_token: "NextToken",
            non_aggregate_keys: [ "UnprocessedTraceIds" ],
            output_token: "NextToken",
            result_key: "Traces"
        },
        GetGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Groups"
        },
        GetInsightEvents: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetInsightSummaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetSamplingRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "SamplingRuleRecords"
        },
        GetSamplingStatisticSummaries: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "SamplingStatisticSummaries"
        },
        GetServiceGraph: {
            input_token: "NextToken",
            non_aggregate_keys: [ "StartTime", "EndTime", "ContainsOldGroupVersions" ],
            output_token: "NextToken",
            result_key: "Services"
        },
        GetTimeSeriesServiceStatistics: {
            input_token: "NextToken",
            non_aggregate_keys: [ "ContainsOldGroupVersions" ],
            output_token: "NextToken",
            result_key: "TimeSeriesServiceStatistics"
        },
        GetTraceGraph: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Services"
        },
        GetTraceSummaries: {
            input_token: "NextToken",
            non_aggregate_keys: [ "TracesProcessedCount", "ApproximateTime" ],
            output_token: "NextToken",
            result_key: "TraceSummaries"
        },
        ListResourcePolicies: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "ResourcePolicies"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Tags"
        }
    }
};

AWS.apiLoader.services["waf"] = {};

AWS.WAF = AWS.Service.defineService("waf", [ "2015-08-24" ]);

AWS.apiLoader.services["waf"]["2015-08-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-08-24",
        endpointPrefix: "waf",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "WAF",
        serviceFullName: "AWS WAF",
        serviceId: "WAF",
        signatureVersion: "v4",
        targetPrefix: "AWSWAF_20150824",
        uid: "waf-2015-08-24"
    },
    operations: {
        CreateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S5"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sh"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "So"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "RateKey", "RateLimit", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    RateKey: {},
                    RateLimit: {
                        type: "long"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S12"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S19"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1e"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1j"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1m"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1p"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1w"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "DefaultAction", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    DefaultAction: {
                        shape: "S20"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S23"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACLMigrationStack: {
            input: {
                type: "structure",
                required: [ "WebACLId", "S3BucketName", "IgnoreUnsupportedType" ],
                members: {
                    WebACLId: {},
                    S3BucketName: {},
                    IgnoreUnsupportedType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "S3ObjectUrl" ],
                members: {
                    S3ObjectUrl: {}
                }
            }
        },
        CreateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2k"
                    },
                    ChangeToken: {}
                }
            }
        },
        DeleteByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        GetByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId" ],
                members: {
                    ByteMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S5"
                    }
                }
            }
        },
        GetChangeToken: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        GetChangeTokenStatus: {
            input: {
                type: "structure",
                required: [ "ChangeToken" ],
                members: {
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeTokenStatus: {}
                }
            }
        },
        GetGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId" ],
                members: {
                    GeoMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sh"
                    }
                }
            }
        },
        GetIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId" ],
                members: {
                    IPSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "So"
                    }
                }
            }
        },
        GetLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3s"
                    }
                }
            }
        },
        GetPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S12"
                    }
                }
            }
        },
        GetRateBasedRuleManagedKeys: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {},
                    NextMarker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedKeys: {
                        type: "list",
                        member: {}
                    },
                    NextMarker: {}
                }
            }
        },
        GetRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId" ],
                members: {
                    RegexMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S19"
                    }
                }
            }
        },
        GetRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId" ],
                members: {
                    RegexPatternSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1e"
                    }
                }
            }
        },
        GetRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1j"
                    }
                }
            }
        },
        GetRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId" ],
                members: {
                    RuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetSampledRequests: {
            input: {
                type: "structure",
                required: [ "WebAclId", "RuleId", "TimeWindow", "MaxItems" ],
                members: {
                    WebAclId: {},
                    RuleId: {},
                    TimeWindow: {
                        shape: "S4e"
                    },
                    MaxItems: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SampledRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Request", "Weight" ],
                            members: {
                                Request: {
                                    type: "structure",
                                    members: {
                                        ClientIP: {},
                                        Country: {},
                                        URI: {},
                                        Method: {},
                                        HTTPVersion: {},
                                        Headers: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Value: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                Weight: {
                                    type: "long"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Action: {},
                                RuleWithinRuleGroup: {}
                            }
                        }
                    },
                    PopulationSize: {
                        type: "long"
                    },
                    TimeWindow: {
                        shape: "S4e"
                    }
                }
            }
        },
        GetSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId" ],
                members: {
                    SizeConstraintSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId" ],
                members: {
                    SqlInjectionMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    WebACLId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S23"
                    }
                }
            }
        },
        GetXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId" ],
                members: {
                    XssMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2k"
                    }
                }
            }
        },
        ListActivatedRulesInRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupId: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ActivatedRules: {
                        shape: "S24"
                    }
                }
            }
        },
        ListByteMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ByteMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ByteMatchSetId", "Name" ],
                            members: {
                                ByteMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListGeoMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    GeoMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GeoMatchSetId", "Name" ],
                            members: {
                                GeoMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListIPSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    IPSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IPSetId", "Name" ],
                            members: {
                                IPSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        type: "list",
                        member: {
                            shape: "S3s"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListRateBasedRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5p"
                    }
                }
            }
        },
        ListRegexMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexMatchSetId", "Name" ],
                            members: {
                                RegexMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRegexPatternSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexPatternSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexPatternSetId", "Name" ],
                            members: {
                                RegexPatternSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name" ],
                            members: {
                                RuleGroupId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5p"
                    }
                }
            }
        },
        ListSizeConstraintSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SizeConstraintSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SizeConstraintSetId", "Name" ],
                            members: {
                                SizeConstraintSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSqlInjectionMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SqlInjectionMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SqlInjectionMatchSetId", "Name" ],
                            members: {
                                SqlInjectionMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSubscribedRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name", "MetricName" ],
                            members: {
                                RuleGroupId: {},
                                Name: {},
                                MetricName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    },
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    TagInfoForResource: {
                        type: "structure",
                        members: {
                            ResourceARN: {},
                            TagList: {
                                shape: "Sx"
                            }
                        }
                    }
                }
            }
        },
        ListWebACLs: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    WebACLs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WebACLId", "Name" ],
                            members: {
                                WebACLId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListXssMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    XssMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "XssMatchSetId", "Name" ],
                            members: {
                                XssMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        PutLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "LoggingConfiguration" ],
                members: {
                    LoggingConfiguration: {
                        shape: "S3s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3s"
                    }
                }
            }
        },
        PutPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ByteMatchTuple" ],
                            members: {
                                Action: {},
                                ByteMatchTuple: {
                                    shape: "S8"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "GeoMatchConstraint" ],
                            members: {
                                Action: {},
                                GeoMatchConstraint: {
                                    shape: "Sj"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken", "Updates" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "IPSetDescriptor" ],
                            members: {
                                Action: {},
                                IPSetDescriptor: {
                                    shape: "Sq"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates", "RateLimit" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7f"
                    },
                    RateLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexMatchTuple" ],
                            members: {
                                Action: {},
                                RegexMatchTuple: {
                                    shape: "S1b"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexPatternString" ],
                            members: {
                                Action: {},
                                RegexPatternString: {}
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "Updates", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken", "Updates" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SizeConstraint" ],
                            members: {
                                Action: {},
                                SizeConstraint: {
                                    shape: "S1r"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SqlInjectionMatchTuple" ],
                            members: {
                                Action: {},
                                SqlInjectionMatchTuple: {
                                    shape: "S1y"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S25"
                                }
                            }
                        }
                    },
                    DefaultAction: {
                        shape: "S20"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "XssMatchTuple" ],
                            members: {
                                Action: {},
                                XssMatchTuple: {
                                    shape: "S2m"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "ByteMatchSetId", "ByteMatchTuples" ],
            members: {
                ByteMatchSetId: {},
                Name: {},
                ByteMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S8"
                    }
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "FieldToMatch", "TargetString", "TextTransformation", "PositionalConstraint" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TargetString: {
                    type: "blob"
                },
                TextTransformation: {},
                PositionalConstraint: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Data: {}
            }
        },
        Sh: {
            type: "structure",
            required: [ "GeoMatchSetId", "GeoMatchConstraints" ],
            members: {
                GeoMatchSetId: {},
                Name: {},
                GeoMatchConstraints: {
                    type: "list",
                    member: {
                        shape: "Sj"
                    }
                }
            }
        },
        Sj: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        So: {
            type: "structure",
            required: [ "IPSetId", "IPSetDescriptors" ],
            members: {
                IPSetId: {},
                Name: {},
                IPSetDescriptors: {
                    type: "list",
                    member: {
                        shape: "Sq"
                    }
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "RuleId", "MatchPredicates", "RateKey", "RateLimit" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                MatchPredicates: {
                    shape: "S13"
                },
                RateKey: {},
                RateLimit: {
                    type: "long"
                }
            }
        },
        S13: {
            type: "list",
            member: {
                shape: "S14"
            }
        },
        S14: {
            type: "structure",
            required: [ "Negated", "Type", "DataId" ],
            members: {
                Negated: {
                    type: "boolean"
                },
                Type: {},
                DataId: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                RegexMatchSetId: {},
                Name: {},
                RegexMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S1b"
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "RegexPatternSetId" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {},
                RegexPatternSetId: {}
            }
        },
        S1e: {
            type: "structure",
            required: [ "RegexPatternSetId", "RegexPatternStrings" ],
            members: {
                RegexPatternSetId: {},
                Name: {},
                RegexPatternStrings: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1j: {
            type: "structure",
            required: [ "RuleId", "Predicates" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                Predicates: {
                    shape: "S13"
                }
            }
        },
        S1m: {
            type: "structure",
            required: [ "RuleGroupId" ],
            members: {
                RuleGroupId: {},
                Name: {},
                MetricName: {}
            }
        },
        S1p: {
            type: "structure",
            required: [ "SizeConstraintSetId", "SizeConstraints" ],
            members: {
                SizeConstraintSetId: {},
                Name: {},
                SizeConstraints: {
                    type: "list",
                    member: {
                        shape: "S1r"
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "ComparisonOperator", "Size" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {},
                ComparisonOperator: {},
                Size: {
                    type: "long"
                }
            }
        },
        S1w: {
            type: "structure",
            required: [ "SqlInjectionMatchSetId", "SqlInjectionMatchTuples" ],
            members: {
                SqlInjectionMatchSetId: {},
                Name: {},
                SqlInjectionMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S1y"
                    }
                }
            }
        },
        S1y: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {}
            }
        },
        S20: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {}
            }
        },
        S23: {
            type: "structure",
            required: [ "WebACLId", "DefaultAction", "Rules" ],
            members: {
                WebACLId: {},
                Name: {},
                MetricName: {},
                DefaultAction: {
                    shape: "S20"
                },
                Rules: {
                    shape: "S24"
                },
                WebACLArn: {}
            }
        },
        S24: {
            type: "list",
            member: {
                shape: "S25"
            }
        },
        S25: {
            type: "structure",
            required: [ "Priority", "RuleId" ],
            members: {
                Priority: {
                    type: "integer"
                },
                RuleId: {},
                Action: {
                    shape: "S20"
                },
                OverrideAction: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {}
                    }
                },
                Type: {},
                ExcludedRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleId" ],
                        members: {
                            RuleId: {}
                        }
                    }
                }
            }
        },
        S2k: {
            type: "structure",
            required: [ "XssMatchSetId", "XssMatchTuples" ],
            members: {
                XssMatchSetId: {},
                Name: {},
                XssMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S2m"
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "S9"
                },
                TextTransformation: {}
            }
        },
        S3s: {
            type: "structure",
            required: [ "ResourceArn", "LogDestinationConfigs" ],
            members: {
                ResourceArn: {},
                LogDestinationConfigs: {
                    type: "list",
                    member: {}
                },
                RedactedFields: {
                    type: "list",
                    member: {
                        shape: "S9"
                    }
                }
            }
        },
        S4e: {
            type: "structure",
            required: [ "StartTime", "EndTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S5p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleId", "Name" ],
                members: {
                    RuleId: {},
                    Name: {}
                }
            }
        },
        S7f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Action", "Predicate" ],
                members: {
                    Action: {},
                    Predicate: {
                        shape: "S14"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["wafregional"] = {};

AWS.WAFRegional = AWS.Service.defineService("wafregional", [ "2016-11-28" ]);

AWS.apiLoader.services["wafregional"]["2016-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-11-28",
        endpointPrefix: "waf-regional",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "WAF Regional",
        serviceFullName: "AWS WAF Regional",
        serviceId: "WAF Regional",
        signatureVersion: "v4",
        targetPrefix: "AWSWAF_Regional_20161128",
        uid: "waf-regional-2016-11-28"
    },
    operations: {
        AssociateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ResourceArn" ],
                members: {
                    WebACLId: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S9"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sk"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateIPSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "Sr"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "RateKey", "RateLimit", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    RateKey: {},
                    RateLimit: {
                        type: "long"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S15"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S1c"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1h"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRule: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1m"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateRuleGroup: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1p"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1s"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1z"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACL: {
            input: {
                type: "structure",
                required: [ "Name", "MetricName", "DefaultAction", "ChangeToken" ],
                members: {
                    Name: {},
                    MetricName: {},
                    DefaultAction: {
                        shape: "S23"
                    },
                    ChangeToken: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S26"
                    },
                    ChangeToken: {}
                }
            }
        },
        CreateWebACLMigrationStack: {
            input: {
                type: "structure",
                required: [ "WebACLId", "S3BucketName", "IgnoreUnsupportedType" ],
                members: {
                    WebACLId: {},
                    S3BucketName: {},
                    IgnoreUnsupportedType: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "S3ObjectUrl" ],
                members: {
                    S3ObjectUrl: {}
                }
            }
        },
        CreateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "Name", "ChangeToken" ],
                members: {
                    Name: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2m"
                    },
                    ChangeToken: {}
                }
            }
        },
        DeleteByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken" ],
                members: {
                    RuleId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DeleteXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        DisassociateWebACL: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId" ],
                members: {
                    ByteMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ByteMatchSet: {
                        shape: "S9"
                    }
                }
            }
        },
        GetChangeToken: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        GetChangeTokenStatus: {
            input: {
                type: "structure",
                required: [ "ChangeToken" ],
                members: {
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeTokenStatus: {}
                }
            }
        },
        GetGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId" ],
                members: {
                    GeoMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GeoMatchSet: {
                        shape: "Sk"
                    }
                }
            }
        },
        GetIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId" ],
                members: {
                    IPSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    IPSet: {
                        shape: "Sr"
                    }
                }
            }
        },
        GetLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3w"
                    }
                }
            }
        },
        GetPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S15"
                    }
                }
            }
        },
        GetRateBasedRuleManagedKeys: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {},
                    NextMarker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagedKeys: {
                        type: "list",
                        member: {}
                    },
                    NextMarker: {}
                }
            }
        },
        GetRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId" ],
                members: {
                    RegexMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexMatchSet: {
                        shape: "S1c"
                    }
                }
            }
        },
        GetRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId" ],
                members: {
                    RegexPatternSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegexPatternSet: {
                        shape: "S1h"
                    }
                }
            }
        },
        GetRule: {
            input: {
                type: "structure",
                required: [ "RuleId" ],
                members: {
                    RuleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Rule: {
                        shape: "S1m"
                    }
                }
            }
        },
        GetRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId" ],
                members: {
                    RuleGroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RuleGroup: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetSampledRequests: {
            input: {
                type: "structure",
                required: [ "WebAclId", "RuleId", "TimeWindow", "MaxItems" ],
                members: {
                    WebAclId: {},
                    RuleId: {},
                    TimeWindow: {
                        shape: "S4i"
                    },
                    MaxItems: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SampledRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Request", "Weight" ],
                            members: {
                                Request: {
                                    type: "structure",
                                    members: {
                                        ClientIP: {},
                                        Country: {},
                                        URI: {},
                                        Method: {},
                                        HTTPVersion: {},
                                        Headers: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Name: {},
                                                    Value: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                Weight: {
                                    type: "long"
                                },
                                Timestamp: {
                                    type: "timestamp"
                                },
                                Action: {},
                                RuleWithinRuleGroup: {}
                            }
                        }
                    },
                    PopulationSize: {
                        type: "long"
                    },
                    TimeWindow: {
                        shape: "S4i"
                    }
                }
            }
        },
        GetSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId" ],
                members: {
                    SizeConstraintSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SizeConstraintSet: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId" ],
                members: {
                    SqlInjectionMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SqlInjectionMatchSet: {
                        shape: "S1z"
                    }
                }
            }
        },
        GetWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    WebACLId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACL: {
                        shape: "S26"
                    }
                }
            }
        },
        GetWebACLForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WebACLSummary: {
                        shape: "S59"
                    }
                }
            }
        },
        GetXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId" ],
                members: {
                    XssMatchSetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    XssMatchSet: {
                        shape: "S2m"
                    }
                }
            }
        },
        ListActivatedRulesInRuleGroup: {
            input: {
                type: "structure",
                members: {
                    RuleGroupId: {},
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ActivatedRules: {
                        shape: "S27"
                    }
                }
            }
        },
        ListByteMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    ByteMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ByteMatchSetId", "Name" ],
                            members: {
                                ByteMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListGeoMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    GeoMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "GeoMatchSetId", "Name" ],
                            members: {
                                GeoMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListIPSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    IPSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IPSetId", "Name" ],
                            members: {
                                IPSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListLoggingConfigurations: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfigurations: {
                        type: "list",
                        member: {
                            shape: "S3w"
                        }
                    },
                    NextMarker: {}
                }
            }
        },
        ListRateBasedRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5w"
                    }
                }
            }
        },
        ListRegexMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexMatchSetId", "Name" ],
                            members: {
                                RegexMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRegexPatternSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RegexPatternSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RegexPatternSetId", "Name" ],
                            members: {
                                RegexPatternSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListResourcesForWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId" ],
                members: {
                    WebACLId: {},
                    ResourceType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArns: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        ListRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name" ],
                            members: {
                                RuleGroupId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListRules: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Rules: {
                        shape: "S5w"
                    }
                }
            }
        },
        ListSizeConstraintSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SizeConstraintSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SizeConstraintSetId", "Name" ],
                            members: {
                                SizeConstraintSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSqlInjectionMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    SqlInjectionMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SqlInjectionMatchSetId", "Name" ],
                            members: {
                                SqlInjectionMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        ListSubscribedRuleGroups: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    RuleGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "RuleGroupId", "Name", "MetricName" ],
                            members: {
                                RuleGroupId: {},
                                Name: {},
                                MetricName: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    },
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    TagInfoForResource: {
                        type: "structure",
                        members: {
                            ResourceARN: {},
                            TagList: {
                                shape: "S10"
                            }
                        }
                    }
                }
            }
        },
        ListWebACLs: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    WebACLs: {
                        type: "list",
                        member: {
                            shape: "S59"
                        }
                    }
                }
            }
        },
        ListXssMatchSets: {
            input: {
                type: "structure",
                members: {
                    NextMarker: {},
                    Limit: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextMarker: {},
                    XssMatchSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "XssMatchSetId", "Name" ],
                            members: {
                                XssMatchSetId: {},
                                Name: {}
                            }
                        }
                    }
                }
            }
        },
        PutLoggingConfiguration: {
            input: {
                type: "structure",
                required: [ "LoggingConfiguration" ],
                members: {
                    LoggingConfiguration: {
                        shape: "S3w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LoggingConfiguration: {
                        shape: "S3w"
                    }
                }
            }
        },
        PutPermissionPolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Policy" ],
                members: {
                    ResourceArn: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S10"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateByteMatchSet: {
            input: {
                type: "structure",
                required: [ "ByteMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    ByteMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ByteMatchTuple" ],
                            members: {
                                Action: {},
                                ByteMatchTuple: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateGeoMatchSet: {
            input: {
                type: "structure",
                required: [ "GeoMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    GeoMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "GeoMatchConstraint" ],
                            members: {
                                Action: {},
                                GeoMatchConstraint: {
                                    shape: "Sm"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateIPSet: {
            input: {
                type: "structure",
                required: [ "IPSetId", "ChangeToken", "Updates" ],
                members: {
                    IPSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "IPSetDescriptor" ],
                            members: {
                                Action: {},
                                IPSetDescriptor: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRateBasedRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates", "RateLimit" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7p"
                    },
                    RateLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexMatchSet: {
            input: {
                type: "structure",
                required: [ "RegexMatchSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexMatchSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexMatchTuple" ],
                            members: {
                                Action: {},
                                RegexMatchTuple: {
                                    shape: "S1e"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRegexPatternSet: {
            input: {
                type: "structure",
                required: [ "RegexPatternSetId", "Updates", "ChangeToken" ],
                members: {
                    RegexPatternSetId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "RegexPatternString" ],
                            members: {
                                Action: {},
                                RegexPatternString: {}
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRule: {
            input: {
                type: "structure",
                required: [ "RuleId", "ChangeToken", "Updates" ],
                members: {
                    RuleId: {},
                    ChangeToken: {},
                    Updates: {
                        shape: "S7p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateRuleGroup: {
            input: {
                type: "structure",
                required: [ "RuleGroupId", "Updates", "ChangeToken" ],
                members: {
                    RuleGroupId: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S28"
                                }
                            }
                        }
                    },
                    ChangeToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSizeConstraintSet: {
            input: {
                type: "structure",
                required: [ "SizeConstraintSetId", "ChangeToken", "Updates" ],
                members: {
                    SizeConstraintSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SizeConstraint" ],
                            members: {
                                Action: {},
                                SizeConstraint: {
                                    shape: "S1u"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateSqlInjectionMatchSet: {
            input: {
                type: "structure",
                required: [ "SqlInjectionMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    SqlInjectionMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "SqlInjectionMatchTuple" ],
                            members: {
                                Action: {},
                                SqlInjectionMatchTuple: {
                                    shape: "S21"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateWebACL: {
            input: {
                type: "structure",
                required: [ "WebACLId", "ChangeToken" ],
                members: {
                    WebACLId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "ActivatedRule" ],
                            members: {
                                Action: {},
                                ActivatedRule: {
                                    shape: "S28"
                                }
                            }
                        }
                    },
                    DefaultAction: {
                        shape: "S23"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        },
        UpdateXssMatchSet: {
            input: {
                type: "structure",
                required: [ "XssMatchSetId", "ChangeToken", "Updates" ],
                members: {
                    XssMatchSetId: {},
                    ChangeToken: {},
                    Updates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Action", "XssMatchTuple" ],
                            members: {
                                Action: {},
                                XssMatchTuple: {
                                    shape: "S2o"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChangeToken: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "structure",
            required: [ "ByteMatchSetId", "ByteMatchTuples" ],
            members: {
                ByteMatchSetId: {},
                Name: {},
                ByteMatchTuples: {
                    type: "list",
                    member: {
                        shape: "Sb"
                    }
                }
            }
        },
        Sb: {
            type: "structure",
            required: [ "FieldToMatch", "TargetString", "TextTransformation", "PositionalConstraint" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TargetString: {
                    type: "blob"
                },
                TextTransformation: {},
                PositionalConstraint: {}
            }
        },
        Sc: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {},
                Data: {}
            }
        },
        Sk: {
            type: "structure",
            required: [ "GeoMatchSetId", "GeoMatchConstraints" ],
            members: {
                GeoMatchSetId: {},
                Name: {},
                GeoMatchConstraints: {
                    type: "list",
                    member: {
                        shape: "Sm"
                    }
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        Sr: {
            type: "structure",
            required: [ "IPSetId", "IPSetDescriptors" ],
            members: {
                IPSetId: {},
                Name: {},
                IPSetDescriptors: {
                    type: "list",
                    member: {
                        shape: "St"
                    }
                }
            }
        },
        St: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "RuleId", "MatchPredicates", "RateKey", "RateLimit" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                MatchPredicates: {
                    shape: "S16"
                },
                RateKey: {},
                RateLimit: {
                    type: "long"
                }
            }
        },
        S16: {
            type: "list",
            member: {
                shape: "S17"
            }
        },
        S17: {
            type: "structure",
            required: [ "Negated", "Type", "DataId" ],
            members: {
                Negated: {
                    type: "boolean"
                },
                Type: {},
                DataId: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                RegexMatchSetId: {},
                Name: {},
                RegexMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S1e"
                    }
                }
            }
        },
        S1e: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "RegexPatternSetId" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {},
                RegexPatternSetId: {}
            }
        },
        S1h: {
            type: "structure",
            required: [ "RegexPatternSetId", "RegexPatternStrings" ],
            members: {
                RegexPatternSetId: {},
                Name: {},
                RegexPatternStrings: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1m: {
            type: "structure",
            required: [ "RuleId", "Predicates" ],
            members: {
                RuleId: {},
                Name: {},
                MetricName: {},
                Predicates: {
                    shape: "S16"
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "RuleGroupId" ],
            members: {
                RuleGroupId: {},
                Name: {},
                MetricName: {}
            }
        },
        S1s: {
            type: "structure",
            required: [ "SizeConstraintSetId", "SizeConstraints" ],
            members: {
                SizeConstraintSetId: {},
                Name: {},
                SizeConstraints: {
                    type: "list",
                    member: {
                        shape: "S1u"
                    }
                }
            }
        },
        S1u: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation", "ComparisonOperator", "Size" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {},
                ComparisonOperator: {},
                Size: {
                    type: "long"
                }
            }
        },
        S1z: {
            type: "structure",
            required: [ "SqlInjectionMatchSetId", "SqlInjectionMatchTuples" ],
            members: {
                SqlInjectionMatchSetId: {},
                Name: {},
                SqlInjectionMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S21"
                    }
                }
            }
        },
        S21: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {}
            }
        },
        S23: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Type: {}
            }
        },
        S26: {
            type: "structure",
            required: [ "WebACLId", "DefaultAction", "Rules" ],
            members: {
                WebACLId: {},
                Name: {},
                MetricName: {},
                DefaultAction: {
                    shape: "S23"
                },
                Rules: {
                    shape: "S27"
                },
                WebACLArn: {}
            }
        },
        S27: {
            type: "list",
            member: {
                shape: "S28"
            }
        },
        S28: {
            type: "structure",
            required: [ "Priority", "RuleId" ],
            members: {
                Priority: {
                    type: "integer"
                },
                RuleId: {},
                Action: {
                    shape: "S23"
                },
                OverrideAction: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {}
                    }
                },
                Type: {},
                ExcludedRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RuleId" ],
                        members: {
                            RuleId: {}
                        }
                    }
                }
            }
        },
        S2m: {
            type: "structure",
            required: [ "XssMatchSetId", "XssMatchTuples" ],
            members: {
                XssMatchSetId: {},
                Name: {},
                XssMatchTuples: {
                    type: "list",
                    member: {
                        shape: "S2o"
                    }
                }
            }
        },
        S2o: {
            type: "structure",
            required: [ "FieldToMatch", "TextTransformation" ],
            members: {
                FieldToMatch: {
                    shape: "Sc"
                },
                TextTransformation: {}
            }
        },
        S3w: {
            type: "structure",
            required: [ "ResourceArn", "LogDestinationConfigs" ],
            members: {
                ResourceArn: {},
                LogDestinationConfigs: {
                    type: "list",
                    member: {}
                },
                RedactedFields: {
                    type: "list",
                    member: {
                        shape: "Sc"
                    }
                }
            }
        },
        S4i: {
            type: "structure",
            required: [ "StartTime", "EndTime" ],
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S59: {
            type: "structure",
            required: [ "WebACLId", "Name" ],
            members: {
                WebACLId: {},
                Name: {}
            }
        },
        S5w: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleId", "Name" ],
                members: {
                    RuleId: {},
                    Name: {}
                }
            }
        },
        S7p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Action", "Predicate" ],
                members: {
                    Action: {},
                    Predicate: {
                        shape: "S17"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["workdocs"] = {};

AWS.WorkDocs = AWS.Service.defineService("workdocs", [ "2016-05-01" ]);

AWS.apiLoader.services["workdocs"]["2016-05-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2016-05-01",
        endpointPrefix: "workdocs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkDocs",
        serviceId: "WorkDocs",
        signatureVersion: "v4",
        uid: "workdocs-2016-05-01"
    },
    operations: {
        AbortDocumentVersionUpload: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    }
                }
            }
        },
        ActivateUser: {
            http: {
                requestUri: "/api/v1/users/{UserId}/activation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        },
        AddResourcePermissions: {
            http: {
                requestUri: "/api/v1/resources/{ResourceId}/permissions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "Principals" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    Principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Id", "Type", "Role" ],
                            members: {
                                Id: {},
                                Type: {},
                                Role: {}
                            }
                        }
                    },
                    NotificationOptions: {
                        type: "structure",
                        members: {
                            SendEmail: {
                                type: "boolean"
                            },
                            EmailMessage: {
                                shape: "St"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ShareResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PrincipalId: {},
                                InviteePrincipalId: {},
                                Role: {},
                                Status: {},
                                ShareId: {},
                                StatusMessage: {
                                    shape: "St"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateComment: {
            http: {
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId", "Text" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    ParentId: {},
                    ThreadId: {},
                    Text: {
                        shape: "S10"
                    },
                    Visibility: {},
                    NotifyCollaborators: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Comment: {
                        shape: "S13"
                    }
                }
            }
        },
        CreateCustomMetadata: {
            http: {
                method: "PUT",
                requestUri: "/api/v1/resources/{ResourceId}/customMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "CustomMetadata" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionid"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateFolder: {
            http: {
                requestUri: "/api/v1/folders",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ParentFolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Name: {
                        shape: "S1b"
                    },
                    ParentFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S1d"
                    }
                }
            }
        },
        CreateLabels: {
            http: {
                method: "PUT",
                requestUri: "/api/v1/resources/{ResourceId}/labels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "Labels" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    Labels: {
                        shape: "S1g"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateNotificationSubscription: {
            http: {
                requestUri: "/api/v1/organizations/{OrganizationId}/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OrganizationId", "Endpoint", "Protocol", "SubscriptionType" ],
                members: {
                    OrganizationId: {
                        location: "uri",
                        locationName: "OrganizationId"
                    },
                    Endpoint: {},
                    Protocol: {},
                    SubscriptionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Subscription: {
                        shape: "S1p"
                    }
                }
            }
        },
        CreateUser: {
            http: {
                requestUri: "/api/v1/users",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Username", "GivenName", "Surname", "Password" ],
                members: {
                    OrganizationId: {},
                    Username: {
                        shape: "S9"
                    },
                    EmailAddress: {
                        shape: "Sa"
                    },
                    GivenName: {
                        shape: "Sb"
                    },
                    Surname: {
                        shape: "Sb"
                    },
                    Password: {
                        type: "string",
                        sensitive: true
                    },
                    TimeZoneId: {},
                    StorageRule: {
                        shape: "Sj"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        },
        DeactivateUser: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/users/{UserId}/activation",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            }
        },
        DeleteComment: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId", "CommentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    CommentId: {
                        location: "uri",
                        locationName: "CommentId"
                    }
                }
            }
        },
        DeleteCustomMetadata: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/customMetadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    VersionId: {
                        location: "querystring",
                        locationName: "versionId"
                    },
                    Keys: {
                        location: "querystring",
                        locationName: "keys",
                        type: "list",
                        member: {}
                    },
                    DeleteAll: {
                        location: "querystring",
                        locationName: "deleteAll",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDocument: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documents/{DocumentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    }
                }
            }
        },
        DeleteDocumentVersion: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/documentVersions/{DocumentId}/versions/{VersionId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId", "DeletePriorVersions" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    DeletePriorVersions: {
                        location: "querystring",
                        locationName: "deletePriorVersions",
                        type: "boolean"
                    }
                }
            }
        },
        DeleteFolder: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/folders/{FolderId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            }
        },
        DeleteFolderContents: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/folders/{FolderId}/contents",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    }
                }
            }
        },
        DeleteLabels: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/labels",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Labels: {
                        shape: "S1g",
                        location: "querystring",
                        locationName: "labels"
                    },
                    DeleteAll: {
                        location: "querystring",
                        locationName: "deleteAll",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNotificationSubscription: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SubscriptionId", "OrganizationId" ],
                members: {
                    SubscriptionId: {
                        location: "uri",
                        locationName: "SubscriptionId"
                    },
                    OrganizationId: {
                        location: "uri",
                        locationName: "OrganizationId"
                    }
                }
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/users/{UserId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    }
                }
            }
        },
        DescribeActivities: {
            http: {
                method: "GET",
                requestUri: "/api/v1/activities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    StartTime: {
                        location: "querystring",
                        locationName: "startTime",
                        type: "timestamp"
                    },
                    EndTime: {
                        location: "querystring",
                        locationName: "endTime",
                        type: "timestamp"
                    },
                    OrganizationId: {
                        location: "querystring",
                        locationName: "organizationId"
                    },
                    ActivityTypes: {
                        location: "querystring",
                        locationName: "activityTypes"
                    },
                    ResourceId: {
                        location: "querystring",
                        locationName: "resourceId"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    IncludeIndirectActivities: {
                        location: "querystring",
                        locationName: "includeIndirectActivities",
                        type: "boolean"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserActivities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                TimeStamp: {
                                    type: "timestamp"
                                },
                                IsIndirectActivity: {
                                    type: "boolean"
                                },
                                OrganizationId: {},
                                Initiator: {
                                    shape: "S2e"
                                },
                                Participants: {
                                    type: "structure",
                                    members: {
                                        Users: {
                                            type: "list",
                                            member: {
                                                shape: "S2e"
                                            }
                                        },
                                        Groups: {
                                            shape: "S2h"
                                        }
                                    }
                                },
                                ResourceMetadata: {
                                    shape: "S2k"
                                },
                                OriginalParent: {
                                    shape: "S2k"
                                },
                                CommentMetadata: {
                                    shape: "S2m"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeComments: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}/comments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Comments: {
                        type: "list",
                        member: {
                            shape: "S13"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeDocumentVersions: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Include: {
                        location: "querystring",
                        locationName: "include"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentVersions: {
                        type: "list",
                        member: {
                            shape: "S2w"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeFolderContents: {
            http: {
                method: "GET",
                requestUri: "/api/v1/folders/{FolderId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Sort: {
                        location: "querystring",
                        locationName: "sort"
                    },
                    Order: {
                        location: "querystring",
                        locationName: "order"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Type: {
                        location: "querystring",
                        locationName: "type"
                    },
                    Include: {
                        location: "querystring",
                        locationName: "include"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Folders: {
                        shape: "S39"
                    },
                    Documents: {
                        shape: "S3a"
                    },
                    Marker: {}
                }
            }
        },
        DescribeGroups: {
            http: {
                method: "GET",
                requestUri: "/api/v1/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "SearchQuery" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    SearchQuery: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "searchQuery"
                    },
                    OrganizationId: {
                        location: "querystring",
                        locationName: "organizationId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        shape: "S2h"
                    },
                    Marker: {}
                }
            }
        },
        DescribeNotificationSubscriptions: {
            http: {
                method: "GET",
                requestUri: "/api/v1/organizations/{OrganizationId}/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "OrganizationId" ],
                members: {
                    OrganizationId: {
                        location: "uri",
                        locationName: "OrganizationId"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Subscriptions: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeResourcePermissions: {
            http: {
                method: "GET",
                requestUri: "/api/v1/resources/{ResourceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    PrincipalId: {
                        location: "querystring",
                        locationName: "principalId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Principals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                Type: {},
                                Roles: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Role: {},
                                            Type: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        DescribeRootFolders: {
            http: {
                method: "GET",
                requestUri: "/api/v1/me/root",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AuthenticationToken" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Folders: {
                        shape: "S39"
                    },
                    Marker: {}
                }
            }
        },
        DescribeUsers: {
            http: {
                method: "GET",
                requestUri: "/api/v1/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    OrganizationId: {
                        location: "querystring",
                        locationName: "organizationId"
                    },
                    UserIds: {
                        location: "querystring",
                        locationName: "userIds"
                    },
                    Query: {
                        shape: "S3d",
                        location: "querystring",
                        locationName: "query"
                    },
                    Include: {
                        location: "querystring",
                        locationName: "include"
                    },
                    Order: {
                        location: "querystring",
                        locationName: "order"
                    },
                    Sort: {
                        location: "querystring",
                        locationName: "sort"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Users: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    TotalNumberOfUsers: {
                        deprecated: true,
                        type: "long"
                    },
                    Marker: {}
                }
            }
        },
        GetCurrentUser: {
            http: {
                method: "GET",
                requestUri: "/api/v1/me",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AuthenticationToken" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        },
        GetDocument: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    IncludeCustomMetadata: {
                        location: "querystring",
                        locationName: "includeCustomMetadata",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S3b"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            }
        },
        GetDocumentPath: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/path",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Path: {
                        shape: "S44"
                    }
                }
            }
        },
        GetDocumentVersion: {
            http: {
                method: "GET",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    },
                    IncludeCustomMetadata: {
                        location: "querystring",
                        locationName: "includeCustomMetadata",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S2w"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            }
        },
        GetFolder: {
            http: {
                method: "GET",
                requestUri: "/api/v1/folders/{FolderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    IncludeCustomMetadata: {
                        location: "querystring",
                        locationName: "includeCustomMetadata",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S1d"
                    },
                    CustomMetadata: {
                        shape: "S16"
                    }
                }
            }
        },
        GetFolderPath: {
            http: {
                method: "GET",
                requestUri: "/api/v1/folders/{FolderId}/path",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Fields: {
                        location: "querystring",
                        locationName: "fields"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Path: {
                        shape: "S44"
                    }
                }
            }
        },
        GetResources: {
            http: {
                method: "GET",
                requestUri: "/api/v1/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    UserId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    CollectionType: {
                        location: "querystring",
                        locationName: "collectionType"
                    },
                    Limit: {
                        location: "querystring",
                        locationName: "limit",
                        type: "integer"
                    },
                    Marker: {
                        location: "querystring",
                        locationName: "marker"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Folders: {
                        shape: "S39"
                    },
                    Documents: {
                        shape: "S3a"
                    },
                    Marker: {}
                }
            }
        },
        InitiateDocumentVersionUpload: {
            http: {
                requestUri: "/api/v1/documents",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    Id: {},
                    Name: {
                        shape: "S1b"
                    },
                    ContentCreatedTimestamp: {
                        type: "timestamp"
                    },
                    ContentModifiedTimestamp: {
                        type: "timestamp"
                    },
                    ContentType: {},
                    DocumentSizeInBytes: {
                        type: "long"
                    },
                    ParentFolderId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        shape: "S3b"
                    },
                    UploadMetadata: {
                        type: "structure",
                        members: {
                            UploadUrl: {
                                shape: "S31"
                            },
                            SignedHeaders: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        RemoveAllResourcePermissions: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/permissions",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    }
                }
            }
        },
        RemoveResourcePermission: {
            http: {
                method: "DELETE",
                requestUri: "/api/v1/resources/{ResourceId}/permissions/{PrincipalId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceId", "PrincipalId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    ResourceId: {
                        location: "uri",
                        locationName: "ResourceId"
                    },
                    PrincipalId: {
                        location: "uri",
                        locationName: "PrincipalId"
                    },
                    PrincipalType: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            }
        },
        RestoreDocumentVersions: {
            http: {
                requestUri: "/api/v1/documentVersions/restore/{DocumentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    }
                }
            }
        },
        SearchResources: {
            http: {
                requestUri: "/api/v1/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    QueryText: {
                        shape: "S3d"
                    },
                    QueryScopes: {
                        type: "list",
                        member: {}
                    },
                    OrganizationId: {},
                    AdditionalResponseFields: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            TextLocales: {
                                type: "list",
                                member: {}
                            },
                            ContentCategories: {
                                type: "list",
                                member: {}
                            },
                            ResourceTypes: {
                                type: "list",
                                member: {}
                            },
                            Labels: {
                                type: "list",
                                member: {}
                            },
                            Principals: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Id" ],
                                    members: {
                                        Id: {},
                                        Roles: {
                                            type: "list",
                                            member: {}
                                        }
                                    }
                                }
                            },
                            AncestorIds: {
                                type: "list",
                                member: {}
                            },
                            SearchCollectionTypes: {
                                type: "list",
                                member: {}
                            },
                            SizeRange: {
                                type: "structure",
                                members: {
                                    StartValue: {
                                        type: "long"
                                    },
                                    EndValue: {
                                        type: "long"
                                    }
                                }
                            },
                            CreatedRange: {
                                shape: "S5d"
                            },
                            ModifiedRange: {
                                shape: "S5d"
                            }
                        }
                    },
                    OrderBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Field: {},
                                Order: {}
                            }
                        }
                    },
                    Limit: {
                        type: "integer"
                    },
                    Marker: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceType: {},
                                WebUrl: {
                                    type: "string",
                                    sensitive: true
                                },
                                DocumentMetadata: {
                                    shape: "S3b"
                                },
                                FolderMetadata: {
                                    shape: "S1d"
                                },
                                CommentMetadata: {
                                    shape: "S2m"
                                },
                                DocumentVersionMetadata: {
                                    shape: "S2w"
                                }
                            }
                        }
                    },
                    Marker: {}
                }
            }
        },
        UpdateDocument: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/documents/{DocumentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    Name: {
                        shape: "S1b"
                    },
                    ParentFolderId: {},
                    ResourceState: {}
                }
            }
        },
        UpdateDocumentVersion: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/documents/{DocumentId}/versions/{VersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DocumentId", "VersionId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    DocumentId: {
                        location: "uri",
                        locationName: "DocumentId"
                    },
                    VersionId: {
                        location: "uri",
                        locationName: "VersionId"
                    },
                    VersionStatus: {}
                }
            }
        },
        UpdateFolder: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/folders/{FolderId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "FolderId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    FolderId: {
                        location: "uri",
                        locationName: "FolderId"
                    },
                    Name: {
                        shape: "S1b"
                    },
                    ParentFolderId: {},
                    ResourceState: {}
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PATCH",
                requestUri: "/api/v1/users/{UserId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "UserId" ],
                members: {
                    AuthenticationToken: {
                        shape: "S2",
                        location: "header",
                        locationName: "Authentication"
                    },
                    UserId: {
                        location: "uri",
                        locationName: "UserId"
                    },
                    GivenName: {
                        shape: "Sb"
                    },
                    Surname: {
                        shape: "Sb"
                    },
                    Type: {},
                    StorageRule: {
                        shape: "Sj"
                    },
                    TimeZoneId: {},
                    Locale: {},
                    GrantPoweruserPrivileges: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    User: {
                        shape: "S8"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "structure",
            members: {
                Id: {},
                Username: {
                    shape: "S9"
                },
                EmailAddress: {
                    shape: "Sa"
                },
                GivenName: {
                    shape: "Sb"
                },
                Surname: {
                    shape: "Sb"
                },
                OrganizationId: {},
                RootFolderId: {},
                RecycleBinFolderId: {},
                Status: {},
                Type: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                TimeZoneId: {},
                Locale: {},
                Storage: {
                    type: "structure",
                    members: {
                        StorageUtilizedInBytes: {
                            type: "long"
                        },
                        StorageRule: {
                            shape: "Sj"
                        }
                    }
                }
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Sb: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "structure",
            members: {
                StorageAllocatedInBytes: {
                    type: "long"
                },
                StorageType: {}
            }
        },
        St: {
            type: "string",
            sensitive: true
        },
        S10: {
            type: "string",
            sensitive: true
        },
        S13: {
            type: "structure",
            required: [ "CommentId" ],
            members: {
                CommentId: {},
                ParentId: {},
                ThreadId: {},
                Text: {
                    shape: "S10"
                },
                Contributor: {
                    shape: "S8"
                },
                CreatedTimestamp: {
                    type: "timestamp"
                },
                Status: {},
                Visibility: {},
                RecipientId: {}
            }
        },
        S16: {
            type: "map",
            key: {},
            value: {}
        },
        S1b: {
            type: "string",
            sensitive: true
        },
        S1d: {
            type: "structure",
            members: {
                Id: {},
                Name: {
                    shape: "S1b"
                },
                CreatorId: {},
                ParentFolderId: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                ResourceState: {},
                Signature: {},
                Labels: {
                    shape: "S1g"
                },
                Size: {
                    type: "long"
                },
                LatestVersionSize: {
                    type: "long"
                }
            }
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            members: {
                SubscriptionId: {},
                EndPoint: {},
                Protocol: {}
            }
        },
        S2e: {
            type: "structure",
            members: {
                Id: {},
                Username: {
                    shape: "S9"
                },
                GivenName: {
                    shape: "Sb"
                },
                Surname: {
                    shape: "Sb"
                },
                EmailAddress: {
                    shape: "Sa"
                }
            }
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {}
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                Type: {},
                Name: {
                    shape: "S1b"
                },
                OriginalName: {
                    shape: "S1b"
                },
                Id: {},
                VersionId: {},
                Owner: {
                    shape: "S2e"
                },
                ParentId: {}
            }
        },
        S2m: {
            type: "structure",
            members: {
                CommentId: {},
                Contributor: {
                    shape: "S8"
                },
                CreatedTimestamp: {
                    type: "timestamp"
                },
                CommentStatus: {},
                RecipientId: {},
                ContributorId: {}
            }
        },
        S2w: {
            type: "structure",
            members: {
                Id: {},
                Name: {
                    shape: "S1b"
                },
                ContentType: {},
                Size: {
                    type: "long"
                },
                Signature: {},
                Status: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                ContentCreatedTimestamp: {
                    type: "timestamp"
                },
                ContentModifiedTimestamp: {
                    type: "timestamp"
                },
                CreatorId: {},
                Thumbnail: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S31"
                    }
                },
                Source: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "S31"
                    }
                }
            }
        },
        S31: {
            type: "string",
            sensitive: true
        },
        S39: {
            type: "list",
            member: {
                shape: "S1d"
            }
        },
        S3a: {
            type: "list",
            member: {
                shape: "S3b"
            }
        },
        S3b: {
            type: "structure",
            members: {
                Id: {},
                CreatorId: {},
                ParentFolderId: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                ModifiedTimestamp: {
                    type: "timestamp"
                },
                LatestVersionMetadata: {
                    shape: "S2w"
                },
                ResourceState: {},
                Labels: {
                    shape: "S1g"
                }
            }
        },
        S3d: {
            type: "string",
            sensitive: true
        },
        S44: {
            type: "structure",
            members: {
                Components: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id: {},
                            Name: {
                                shape: "S1b"
                            }
                        }
                    }
                }
            }
        },
        S5d: {
            type: "structure",
            members: {
                StartValue: {
                    type: "timestamp"
                },
                EndValue: {
                    type: "timestamp"
                }
            }
        }
    },
    paginators: {
        DescribeActivities: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "UserActivities"
        },
        DescribeComments: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Comments"
        },
        DescribeDocumentVersions: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "DocumentVersions"
        },
        DescribeFolderContents: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: [ "Folders", "Documents" ]
        },
        DescribeGroups: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Groups"
        },
        DescribeNotificationSubscriptions: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Subscriptions"
        },
        DescribeResourcePermissions: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Principals"
        },
        DescribeRootFolders: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Folders"
        },
        DescribeUsers: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Users"
        },
        SearchResources: {
            input_token: "Marker",
            limit_key: "Limit",
            output_token: "Marker",
            result_key: "Items"
        }
    }
};

AWS.apiLoader.services["workspaces"] = {};

AWS.WorkSpaces = AWS.Service.defineService("workspaces", [ "2015-04-08" ]);

AWS.apiLoader.services["workspaces"]["2015-04-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2015-04-08",
        endpointPrefix: "workspaces",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon WorkSpaces",
        serviceId: "WorkSpaces",
        signatureVersion: "v4",
        targetPrefix: "WorkspacesService",
        uid: "workspaces-2015-04-08"
    },
    operations: {
        AssociateConnectionAlias: {
            input: {
                type: "structure",
                required: [ "AliasId", "ResourceId" ],
                members: {
                    AliasId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionIdentifier: {}
                }
            }
        },
        AssociateIpGroups: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "GroupIds" ],
                members: {
                    DirectoryId: {},
                    GroupIds: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateWorkspaceApplication: {
            input: {
                type: "structure",
                required: [ "WorkspaceId", "ApplicationId" ],
                members: {
                    WorkspaceId: {},
                    ApplicationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "Sf"
                    }
                }
            }
        },
        AuthorizeIpRules: {
            input: {
                type: "structure",
                required: [ "GroupId", "UserRules" ],
                members: {
                    GroupId: {},
                    UserRules: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CopyWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "Name", "SourceImageId", "SourceRegion" ],
                members: {
                    Name: {},
                    Description: {},
                    SourceImageId: {},
                    SourceRegion: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {}
                }
            }
        },
        CreateConnectClientAddIn: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Name", "URL" ],
                members: {
                    ResourceId: {},
                    Name: {},
                    URL: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AddInId: {}
                }
            }
        },
        CreateConnectionAlias: {
            input: {
                type: "structure",
                required: [ "ConnectionString" ],
                members: {
                    ConnectionString: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasId: {}
                }
            }
        },
        CreateIpGroup: {
            input: {
                type: "structure",
                required: [ "GroupName" ],
                members: {
                    GroupName: {},
                    GroupDesc: {},
                    UserRules: {
                        shape: "Sn"
                    },
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GroupId: {}
                }
            }
        },
        CreateStandbyWorkspaces: {
            input: {
                type: "structure",
                required: [ "PrimaryRegion", "StandbyWorkspaces" ],
                members: {
                    PrimaryRegion: {},
                    StandbyWorkspaces: {
                        type: "list",
                        member: {
                            shape: "S1g"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedStandbyRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StandbyWorkspaceRequest: {
                                    shape: "S1g"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    PendingStandbyRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                UserName: {},
                                DirectoryId: {},
                                State: {},
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            }
        },
        CreateTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Tags" ],
                members: {
                    ResourceId: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateUpdatedWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "Name", "Description", "SourceImageId" ],
                members: {
                    Name: {},
                    Description: {},
                    SourceImageId: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {}
                }
            }
        },
        CreateWorkspaceBundle: {
            input: {
                type: "structure",
                required: [ "BundleName", "BundleDescription", "ImageId", "ComputeType", "UserStorage" ],
                members: {
                    BundleName: {},
                    BundleDescription: {},
                    ImageId: {},
                    ComputeType: {
                        shape: "S1z"
                    },
                    UserStorage: {
                        shape: "S21"
                    },
                    RootStorage: {
                        shape: "S22"
                    },
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkspaceBundle: {
                        shape: "S24"
                    }
                }
            }
        },
        CreateWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "Name", "Description", "WorkspaceId" ],
                members: {
                    Name: {},
                    Description: {},
                    WorkspaceId: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {},
                    Name: {},
                    Description: {},
                    OperatingSystem: {
                        shape: "S2b"
                    },
                    State: {},
                    RequiredTenancy: {},
                    Created: {
                        type: "timestamp"
                    },
                    OwnerAccountId: {}
                }
            }
        },
        CreateWorkspaces: {
            input: {
                type: "structure",
                required: [ "Workspaces" ],
                members: {
                    Workspaces: {
                        type: "list",
                        member: {
                            shape: "S2i"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceRequest: {
                                    shape: "S2i"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    PendingRequests: {
                        shape: "S2w"
                    }
                }
            }
        },
        DeleteClientBranding: {
            input: {
                type: "structure",
                required: [ "ResourceId", "Platforms" ],
                members: {
                    ResourceId: {},
                    Platforms: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnectClientAddIn: {
            input: {
                type: "structure",
                required: [ "AddInId", "ResourceId" ],
                members: {
                    AddInId: {},
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnectionAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteIpGroup: {
            input: {
                type: "structure",
                required: [ "GroupId" ],
                members: {
                    GroupId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeys" ],
                members: {
                    ResourceId: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkspaceBundle: {
            input: {
                type: "structure",
                members: {
                    BundleId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeployWorkspaceApplications: {
            input: {
                type: "structure",
                required: [ "WorkspaceId" ],
                members: {
                    WorkspaceId: {},
                    Force: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Deployment: {
                        type: "structure",
                        members: {
                            Associations: {
                                shape: "S3v"
                            }
                        }
                    }
                }
            }
        },
        DeregisterWorkspaceDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId" ],
                members: {
                    DirectoryId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeAccount: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DedicatedTenancySupport: {},
                    DedicatedTenancyManagementCidrRange: {}
                }
            }
        },
        DescribeAccountModifications: {
            input: {
                type: "structure",
                members: {
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountModifications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ModificationState: {},
                                DedicatedTenancySupport: {},
                                DedicatedTenancyManagementCidrRange: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeApplicationAssociations: {
            input: {
                type: "structure",
                required: [ "ApplicationId", "AssociatedResourceTypes" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ApplicationId: {},
                    AssociatedResourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                AssociatedResourceId: {},
                                AssociatedResourceType: {},
                                Created: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                State: {},
                                StateReason: {
                                    shape: "Sj"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeApplications: {
            input: {
                type: "structure",
                members: {
                    ApplicationIds: {
                        type: "list",
                        member: {}
                    },
                    ComputeTypeNames: {
                        shape: "S4h"
                    },
                    LicenseType: {},
                    OperatingSystemNames: {
                        shape: "S4j"
                    },
                    Owner: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                Created: {
                                    type: "timestamp"
                                },
                                Description: {},
                                LicenseType: {},
                                Name: {},
                                Owner: {},
                                State: {},
                                SupportedComputeTypeNames: {
                                    shape: "S4h"
                                },
                                SupportedOperatingSystemNames: {
                                    shape: "S4j"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeBundleAssociations: {
            input: {
                type: "structure",
                required: [ "BundleId", "AssociatedResourceTypes" ],
                members: {
                    BundleId: {},
                    AssociatedResourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociatedResourceId: {},
                                AssociatedResourceType: {},
                                BundleId: {},
                                Created: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                State: {},
                                StateReason: {
                                    shape: "Sj"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeClientBranding: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceTypeWindows: {
                        shape: "S4x"
                    },
                    DeviceTypeOsx: {
                        shape: "S4x"
                    },
                    DeviceTypeAndroid: {
                        shape: "S4x"
                    },
                    DeviceTypeIos: {
                        shape: "S53"
                    },
                    DeviceTypeLinux: {
                        shape: "S4x"
                    },
                    DeviceTypeWeb: {
                        shape: "S4x"
                    }
                }
            }
        },
        DescribeClientProperties: {
            input: {
                type: "structure",
                required: [ "ResourceIds" ],
                members: {
                    ResourceIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ClientPropertiesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {},
                                ClientProperties: {
                                    shape: "S59"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeConnectClientAddIns: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AddIns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AddInId: {},
                                ResourceId: {},
                                Name: {},
                                URL: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConnectionAliasPermissions: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AliasId: {},
                    ConnectionAliasPermissions: {
                        type: "list",
                        member: {
                            shape: "S5j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConnectionAliases: {
            input: {
                type: "structure",
                members: {
                    AliasIds: {
                        type: "list",
                        member: {}
                    },
                    ResourceId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionAliases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConnectionString: {},
                                AliasId: {},
                                State: {},
                                OwnerAccountId: {},
                                Associations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AssociationStatus: {},
                                            AssociatedAccountId: {},
                                            ResourceId: {},
                                            ConnectionIdentifier: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeImageAssociations: {
            input: {
                type: "structure",
                required: [ "ImageId", "AssociatedResourceTypes" ],
                members: {
                    ImageId: {},
                    AssociatedResourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AssociatedResourceId: {},
                                AssociatedResourceType: {},
                                Created: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                ImageId: {},
                                State: {},
                                StateReason: {
                                    shape: "Sj"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeIpGroups: {
            input: {
                type: "structure",
                members: {
                    GroupIds: {
                        shape: "S8"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Result: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                groupId: {},
                                groupName: {},
                                groupDesc: {},
                                userRules: {
                                    shape: "Sn"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeTags: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TagList: {
                        shape: "Sx"
                    }
                }
            }
        },
        DescribeWorkspaceAssociations: {
            input: {
                type: "structure",
                required: [ "WorkspaceId", "AssociatedResourceTypes" ],
                members: {
                    WorkspaceId: {},
                    AssociatedResourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Associations: {
                        shape: "S3v"
                    }
                }
            }
        },
        DescribeWorkspaceBundles: {
            input: {
                type: "structure",
                members: {
                    BundleIds: {
                        type: "list",
                        member: {}
                    },
                    Owner: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Bundles: {
                        type: "list",
                        member: {
                            shape: "S24"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceDirectories: {
            input: {
                type: "structure",
                members: {
                    DirectoryIds: {
                        type: "list",
                        member: {}
                    },
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Directories: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DirectoryId: {},
                                Alias: {},
                                DirectoryName: {},
                                RegistrationCode: {},
                                SubnetIds: {
                                    shape: "S6k"
                                },
                                DnsIpAddresses: {
                                    type: "list",
                                    member: {}
                                },
                                CustomerUserName: {},
                                IamRoleId: {},
                                DirectoryType: {},
                                WorkspaceSecurityGroupId: {},
                                State: {},
                                WorkspaceCreationProperties: {
                                    type: "structure",
                                    members: {
                                        EnableWorkDocs: {
                                            type: "boolean"
                                        },
                                        EnableInternetAccess: {
                                            type: "boolean"
                                        },
                                        DefaultOu: {},
                                        CustomSecurityGroupId: {},
                                        UserEnabledAsLocalAdministrator: {
                                            type: "boolean"
                                        },
                                        EnableMaintenanceMode: {
                                            type: "boolean"
                                        }
                                    }
                                },
                                ipGroupIds: {
                                    shape: "S8"
                                },
                                WorkspaceAccessProperties: {
                                    shape: "S6s"
                                },
                                Tenancy: {},
                                SelfservicePermissions: {
                                    shape: "S6v"
                                },
                                SamlProperties: {
                                    shape: "S6w"
                                },
                                CertificateBasedAuthProperties: {
                                    shape: "S6z"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceImagePermissions: {
            input: {
                type: "structure",
                required: [ "ImageId" ],
                members: {
                    ImageId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {},
                    ImagePermissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SharedAccountId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceImages: {
            input: {
                type: "structure",
                members: {
                    ImageIds: {
                        type: "list",
                        member: {}
                    },
                    ImageType: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ImageId: {},
                                Name: {},
                                Description: {},
                                OperatingSystem: {
                                    shape: "S2b"
                                },
                                State: {},
                                RequiredTenancy: {},
                                ErrorCode: {},
                                ErrorMessage: {},
                                Created: {
                                    type: "timestamp"
                                },
                                OwnerAccountId: {},
                                Updates: {
                                    type: "structure",
                                    members: {
                                        UpdateAvailable: {
                                            type: "boolean"
                                        },
                                        Description: {}
                                    }
                                },
                                ErrorDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ErrorCode: {},
                                            ErrorMessage: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspaceSnapshots: {
            input: {
                type: "structure",
                required: [ "WorkspaceId" ],
                members: {
                    WorkspaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RebuildSnapshots: {
                        shape: "S7k"
                    },
                    RestoreSnapshots: {
                        shape: "S7k"
                    }
                }
            }
        },
        DescribeWorkspaces: {
            input: {
                type: "structure",
                members: {
                    WorkspaceIds: {
                        shape: "S7n"
                    },
                    DirectoryId: {},
                    UserName: {},
                    BundleId: {},
                    Limit: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Workspaces: {
                        shape: "S2w"
                    },
                    NextToken: {}
                }
            }
        },
        DescribeWorkspacesConnectionStatus: {
            input: {
                type: "structure",
                members: {
                    WorkspaceIds: {
                        shape: "S7n"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkspacesConnectionStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {},
                                ConnectionState: {},
                                ConnectionStateCheckTimestamp: {
                                    type: "timestamp"
                                },
                                LastKnownUserConnectionTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateConnectionAlias: {
            input: {
                type: "structure",
                required: [ "AliasId" ],
                members: {
                    AliasId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateIpGroups: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "GroupIds" ],
                members: {
                    DirectoryId: {},
                    GroupIds: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateWorkspaceApplication: {
            input: {
                type: "structure",
                required: [ "WorkspaceId", "ApplicationId" ],
                members: {
                    WorkspaceId: {},
                    ApplicationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Association: {
                        shape: "Sf"
                    }
                }
            }
        },
        ImportClientBranding: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    DeviceTypeWindows: {
                        shape: "S81"
                    },
                    DeviceTypeOsx: {
                        shape: "S81"
                    },
                    DeviceTypeAndroid: {
                        shape: "S81"
                    },
                    DeviceTypeIos: {
                        type: "structure",
                        members: {
                            Logo: {
                                type: "blob"
                            },
                            Logo2x: {
                                type: "blob"
                            },
                            Logo3x: {
                                type: "blob"
                            },
                            SupportEmail: {},
                            SupportLink: {},
                            ForgotPasswordLink: {},
                            LoginMessage: {
                                shape: "S50"
                            }
                        }
                    },
                    DeviceTypeLinux: {
                        shape: "S81"
                    },
                    DeviceTypeWeb: {
                        shape: "S81"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceTypeWindows: {
                        shape: "S4x"
                    },
                    DeviceTypeOsx: {
                        shape: "S4x"
                    },
                    DeviceTypeAndroid: {
                        shape: "S4x"
                    },
                    DeviceTypeIos: {
                        shape: "S53"
                    },
                    DeviceTypeLinux: {
                        shape: "S4x"
                    },
                    DeviceTypeWeb: {
                        shape: "S4x"
                    }
                }
            }
        },
        ImportWorkspaceImage: {
            input: {
                type: "structure",
                required: [ "Ec2ImageId", "IngestionProcess", "ImageName", "ImageDescription" ],
                members: {
                    Ec2ImageId: {},
                    IngestionProcess: {},
                    ImageName: {},
                    ImageDescription: {},
                    Tags: {
                        shape: "Sx"
                    },
                    Applications: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageId: {}
                }
            }
        },
        ListAvailableManagementCidrRanges: {
            input: {
                type: "structure",
                required: [ "ManagementCidrRangeConstraint" ],
                members: {
                    ManagementCidrRangeConstraint: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ManagementCidrRanges: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        MigrateWorkspace: {
            input: {
                type: "structure",
                required: [ "SourceWorkspaceId", "BundleId" ],
                members: {
                    SourceWorkspaceId: {},
                    BundleId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceWorkspaceId: {},
                    TargetWorkspaceId: {}
                }
            }
        },
        ModifyAccount: {
            input: {
                type: "structure",
                members: {
                    DedicatedTenancySupport: {},
                    DedicatedTenancyManagementCidrRange: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyCertificateBasedAuthProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    CertificateBasedAuthProperties: {
                        shape: "S6z"
                    },
                    PropertiesToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyClientProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId", "ClientProperties" ],
                members: {
                    ResourceId: {},
                    ClientProperties: {
                        shape: "S59"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifySamlProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    SamlProperties: {
                        shape: "S6w"
                    },
                    PropertiesToDelete: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifySelfservicePermissions: {
            input: {
                type: "structure",
                required: [ "ResourceId", "SelfservicePermissions" ],
                members: {
                    ResourceId: {},
                    SelfservicePermissions: {
                        shape: "S6v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceAccessProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId", "WorkspaceAccessProperties" ],
                members: {
                    ResourceId: {},
                    WorkspaceAccessProperties: {
                        shape: "S6s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceCreationProperties: {
            input: {
                type: "structure",
                required: [ "ResourceId", "WorkspaceCreationProperties" ],
                members: {
                    ResourceId: {},
                    WorkspaceCreationProperties: {
                        type: "structure",
                        members: {
                            EnableWorkDocs: {
                                type: "boolean"
                            },
                            EnableInternetAccess: {
                                type: "boolean"
                            },
                            DefaultOu: {},
                            CustomSecurityGroupId: {},
                            UserEnabledAsLocalAdministrator: {
                                type: "boolean"
                            },
                            EnableMaintenanceMode: {
                                type: "boolean"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceProperties: {
            input: {
                type: "structure",
                required: [ "WorkspaceId" ],
                members: {
                    WorkspaceId: {},
                    WorkspaceProperties: {
                        shape: "S2k"
                    },
                    DataReplication: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ModifyWorkspaceState: {
            input: {
                type: "structure",
                required: [ "WorkspaceId", "WorkspaceState" ],
                members: {
                    WorkspaceId: {},
                    WorkspaceState: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RebootWorkspaces: {
            input: {
                type: "structure",
                required: [ "RebootWorkspaceRequests" ],
                members: {
                    RebootWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkspaceId" ],
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S9f"
                        }
                    }
                }
            }
        },
        RebuildWorkspaces: {
            input: {
                type: "structure",
                required: [ "RebuildWorkspaceRequests" ],
                members: {
                    RebuildWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkspaceId" ],
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S9f"
                        }
                    }
                }
            }
        },
        RegisterWorkspaceDirectory: {
            input: {
                type: "structure",
                required: [ "DirectoryId", "EnableWorkDocs" ],
                members: {
                    DirectoryId: {},
                    SubnetIds: {
                        shape: "S6k"
                    },
                    EnableWorkDocs: {
                        type: "boolean"
                    },
                    EnableSelfService: {
                        type: "boolean"
                    },
                    Tenancy: {},
                    Tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RestoreWorkspace: {
            input: {
                type: "structure",
                required: [ "WorkspaceId" ],
                members: {
                    WorkspaceId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RevokeIpRules: {
            input: {
                type: "structure",
                required: [ "GroupId", "UserRules" ],
                members: {
                    GroupId: {},
                    UserRules: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartWorkspaces: {
            input: {
                type: "structure",
                required: [ "StartWorkspaceRequests" ],
                members: {
                    StartWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S9f"
                        }
                    }
                }
            }
        },
        StopWorkspaces: {
            input: {
                type: "structure",
                required: [ "StopWorkspaceRequests" ],
                members: {
                    StopWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S9f"
                        }
                    }
                }
            }
        },
        TerminateWorkspaces: {
            input: {
                type: "structure",
                required: [ "TerminateWorkspaceRequests" ],
                members: {
                    TerminateWorkspaceRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "WorkspaceId" ],
                            members: {
                                WorkspaceId: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FailedRequests: {
                        type: "list",
                        member: {
                            shape: "S9f"
                        }
                    }
                }
            }
        },
        UpdateConnectClientAddIn: {
            input: {
                type: "structure",
                required: [ "AddInId", "ResourceId" ],
                members: {
                    AddInId: {},
                    ResourceId: {},
                    Name: {},
                    URL: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConnectionAliasPermission: {
            input: {
                type: "structure",
                required: [ "AliasId", "ConnectionAliasPermission" ],
                members: {
                    AliasId: {},
                    ConnectionAliasPermission: {
                        shape: "S5j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRulesOfIpGroup: {
            input: {
                type: "structure",
                required: [ "GroupId", "UserRules" ],
                members: {
                    GroupId: {},
                    UserRules: {
                        shape: "Sn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkspaceBundle: {
            input: {
                type: "structure",
                members: {
                    BundleId: {},
                    ImageId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkspaceImagePermission: {
            input: {
                type: "structure",
                required: [ "ImageId", "AllowCopyImage", "SharedAccountId" ],
                members: {
                    ImageId: {},
                    AllowCopyImage: {
                        type: "boolean"
                    },
                    SharedAccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            members: {
                AssociatedResourceId: {},
                AssociatedResourceType: {},
                Created: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                State: {},
                StateReason: {
                    shape: "Sj"
                },
                WorkspaceId: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                ErrorCode: {},
                ErrorMessage: {}
            }
        },
        Sn: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ipRule: {},
                    ruleDesc: {}
                }
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S1g: {
            type: "structure",
            required: [ "PrimaryWorkspaceId", "DirectoryId" ],
            members: {
                PrimaryWorkspaceId: {},
                VolumeEncryptionKey: {},
                DirectoryId: {},
                Tags: {
                    shape: "Sx"
                },
                DataReplication: {}
            }
        },
        S1z: {
            type: "structure",
            members: {
                Name: {}
            }
        },
        S21: {
            type: "structure",
            members: {
                Capacity: {}
            }
        },
        S22: {
            type: "structure",
            members: {
                Capacity: {}
            }
        },
        S24: {
            type: "structure",
            members: {
                BundleId: {},
                Name: {},
                Owner: {},
                Description: {},
                ImageId: {},
                RootStorage: {
                    shape: "S22"
                },
                UserStorage: {
                    shape: "S21"
                },
                ComputeType: {
                    shape: "S1z"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                State: {},
                BundleType: {}
            }
        },
        S2b: {
            type: "structure",
            members: {
                Type: {}
            }
        },
        S2i: {
            type: "structure",
            required: [ "DirectoryId", "UserName", "BundleId" ],
            members: {
                DirectoryId: {},
                UserName: {},
                BundleId: {},
                VolumeEncryptionKey: {},
                UserVolumeEncryptionEnabled: {
                    type: "boolean"
                },
                RootVolumeEncryptionEnabled: {
                    type: "boolean"
                },
                WorkspaceProperties: {
                    shape: "S2k"
                },
                Tags: {
                    shape: "Sx"
                }
            }
        },
        S2k: {
            type: "structure",
            members: {
                RunningMode: {},
                RunningModeAutoStopTimeoutInMinutes: {
                    type: "integer"
                },
                RootVolumeSizeGib: {
                    type: "integer"
                },
                UserVolumeSizeGib: {
                    type: "integer"
                },
                ComputeTypeName: {},
                Protocols: {
                    type: "list",
                    member: {}
                },
                OperatingSystemName: {}
            }
        },
        S2w: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    WorkspaceId: {},
                    DirectoryId: {},
                    UserName: {},
                    IpAddress: {},
                    State: {},
                    BundleId: {},
                    SubnetId: {},
                    ErrorMessage: {},
                    ErrorCode: {},
                    ComputerName: {},
                    VolumeEncryptionKey: {},
                    UserVolumeEncryptionEnabled: {
                        type: "boolean"
                    },
                    RootVolumeEncryptionEnabled: {
                        type: "boolean"
                    },
                    WorkspaceProperties: {
                        shape: "S2k"
                    },
                    ModificationStates: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Resource: {},
                                State: {}
                            }
                        }
                    },
                    RelatedWorkspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                WorkspaceId: {},
                                Region: {},
                                State: {},
                                Type: {}
                            }
                        }
                    },
                    DataReplicationSettings: {
                        type: "structure",
                        members: {
                            DataReplication: {},
                            RecoverySnapshotTime: {
                                type: "timestamp"
                            }
                        }
                    },
                    StandbyWorkspacesProperties: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StandbyWorkspaceId: {},
                                DataReplication: {},
                                RecoverySnapshotTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3v: {
            type: "list",
            member: {
                shape: "Sf"
            }
        },
        S4h: {
            type: "list",
            member: {}
        },
        S4j: {
            type: "list",
            member: {}
        },
        S4x: {
            type: "structure",
            members: {
                LogoUrl: {},
                SupportEmail: {},
                SupportLink: {},
                ForgotPasswordLink: {},
                LoginMessage: {
                    shape: "S50"
                }
            }
        },
        S50: {
            type: "map",
            key: {},
            value: {}
        },
        S53: {
            type: "structure",
            members: {
                LogoUrl: {},
                Logo2xUrl: {},
                Logo3xUrl: {},
                SupportEmail: {},
                SupportLink: {},
                ForgotPasswordLink: {},
                LoginMessage: {
                    shape: "S50"
                }
            }
        },
        S59: {
            type: "structure",
            members: {
                ReconnectEnabled: {},
                LogUploadEnabled: {}
            }
        },
        S5j: {
            type: "structure",
            required: [ "SharedAccountId", "AllowAssociation" ],
            members: {
                SharedAccountId: {},
                AllowAssociation: {
                    type: "boolean"
                }
            }
        },
        S6k: {
            type: "list",
            member: {}
        },
        S6s: {
            type: "structure",
            members: {
                DeviceTypeWindows: {},
                DeviceTypeOsx: {},
                DeviceTypeWeb: {},
                DeviceTypeIos: {},
                DeviceTypeAndroid: {},
                DeviceTypeChromeOs: {},
                DeviceTypeZeroClient: {},
                DeviceTypeLinux: {}
            }
        },
        S6v: {
            type: "structure",
            members: {
                RestartWorkspace: {},
                IncreaseVolumeSize: {},
                ChangeComputeType: {},
                SwitchRunningMode: {},
                RebuildWorkspace: {}
            }
        },
        S6w: {
            type: "structure",
            members: {
                Status: {},
                UserAccessUrl: {},
                RelayStateParameterName: {}
            }
        },
        S6z: {
            type: "structure",
            members: {
                Status: {},
                CertificateAuthorityArn: {}
            }
        },
        S7k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SnapshotTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S7n: {
            type: "list",
            member: {}
        },
        S81: {
            type: "structure",
            members: {
                Logo: {
                    type: "blob"
                },
                SupportEmail: {},
                SupportLink: {},
                ForgotPasswordLink: {},
                LoginMessage: {
                    shape: "S50"
                }
            }
        },
        S9f: {
            type: "structure",
            members: {
                WorkspaceId: {},
                ErrorCode: {},
                ErrorMessage: {}
            }
        }
    },
    paginators: {
        DescribeApplicationAssociations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeApplications: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        DescribeWorkspaceBundles: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Bundles"
        },
        DescribeWorkspaceDirectories: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "Directories"
        },
        DescribeWorkspaces: {
            input_token: "NextToken",
            limit_key: "Limit",
            output_token: "NextToken",
            result_key: "Workspaces"
        }
    }
};

AWS.apiLoader.services["codestar"] = {};

AWS.CodeStar = AWS.Service.defineService("codestar", [ "2017-04-19" ]);

AWS.apiLoader.services["codestar"]["2017-04-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-19",
        endpointPrefix: "codestar",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CodeStar",
        serviceFullName: "AWS CodeStar",
        serviceId: "CodeStar",
        signatureVersion: "v4",
        targetPrefix: "CodeStar_20170419",
        uid: "codestar-2017-04-19"
    },
    operations: {
        AssociateTeamMember: {
            input: {
                type: "structure",
                required: [ "projectId", "userArn", "projectRole" ],
                members: {
                    projectId: {},
                    clientRequestToken: {},
                    userArn: {},
                    projectRole: {},
                    remoteAccessAllowed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    clientRequestToken: {}
                }
            }
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "name", "id" ],
                members: {
                    name: {
                        shape: "S9"
                    },
                    id: {},
                    description: {
                        shape: "Sa"
                    },
                    clientRequestToken: {},
                    sourceCode: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "source", "destination" ],
                            members: {
                                source: {
                                    type: "structure",
                                    required: [ "s3" ],
                                    members: {
                                        s3: {
                                            shape: "Se"
                                        }
                                    }
                                },
                                destination: {
                                    type: "structure",
                                    members: {
                                        codeCommit: {
                                            type: "structure",
                                            required: [ "name" ],
                                            members: {
                                                name: {}
                                            }
                                        },
                                        gitHub: {
                                            type: "structure",
                                            required: [ "name", "type", "owner", "privateRepository", "issuesEnabled", "token" ],
                                            members: {
                                                name: {},
                                                description: {},
                                                type: {},
                                                owner: {},
                                                privateRepository: {
                                                    type: "boolean"
                                                },
                                                issuesEnabled: {
                                                    type: "boolean"
                                                },
                                                token: {
                                                    type: "string",
                                                    sensitive: true
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    toolchain: {
                        type: "structure",
                        required: [ "source" ],
                        members: {
                            source: {
                                type: "structure",
                                required: [ "s3" ],
                                members: {
                                    s3: {
                                        shape: "Se"
                                    }
                                }
                            },
                            roleArn: {},
                            stackParameters: {
                                type: "map",
                                key: {},
                                value: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    },
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn" ],
                members: {
                    id: {},
                    arn: {},
                    clientRequestToken: {},
                    projectTemplateId: {}
                }
            }
        },
        CreateUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn", "displayName", "emailAddress" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    clientRequestToken: {},
                    deleteStack: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stackId: {},
                    projectArn: {}
                }
            }
        },
        DeleteUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {}
                }
            }
        },
        DescribeProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {
                        shape: "S9"
                    },
                    id: {},
                    arn: {},
                    description: {
                        shape: "Sa"
                    },
                    clientRequestToken: {},
                    createdTimeStamp: {
                        type: "timestamp"
                    },
                    stackId: {},
                    projectTemplateId: {},
                    status: {
                        type: "structure",
                        required: [ "state" ],
                        members: {
                            state: {},
                            reason: {}
                        }
                    }
                }
            }
        },
        DescribeUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn", "createdTimestamp", "lastModifiedTimestamp" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DisassociateTeamMember: {
            input: {
                type: "structure",
                required: [ "projectId", "userArn" ],
                members: {
                    projectId: {},
                    userArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListProjects: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "projects" ],
                members: {
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                projectId: {},
                                projectArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id" ],
                            members: {
                                id: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sx"
                    },
                    nextToken: {}
                }
            }
        },
        ListTeamMembers: {
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "teamMembers" ],
                members: {
                    teamMembers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "userArn", "projectRole" ],
                            members: {
                                userArn: {},
                                projectRole: {},
                                remoteAccessAllowed: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListUserProfiles: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userProfiles" ],
                members: {
                    userProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                userArn: {},
                                displayName: {
                                    shape: "S14"
                                },
                                emailAddress: {
                                    shape: "S15"
                                },
                                sshPublicKey: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        TagProject: {
            input: {
                type: "structure",
                required: [ "id", "tags" ],
                members: {
                    id: {},
                    tags: {
                        shape: "Sx"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sx"
                    }
                }
            }
        },
        UntagProject: {
            input: {
                type: "structure",
                required: [ "id", "tags" ],
                members: {
                    id: {},
                    tags: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateProject: {
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {},
                    name: {
                        shape: "S9"
                    },
                    description: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTeamMember: {
            input: {
                type: "structure",
                required: [ "projectId", "userArn" ],
                members: {
                    projectId: {},
                    userArn: {},
                    projectRole: {},
                    remoteAccessAllowed: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userArn: {},
                    projectRole: {},
                    remoteAccessAllowed: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateUserProfile: {
            input: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userArn" ],
                members: {
                    userArn: {},
                    displayName: {
                        shape: "S14"
                    },
                    emailAddress: {
                        shape: "S15"
                    },
                    sshPublicKey: {},
                    createdTimestamp: {
                        type: "timestamp"
                    },
                    lastModifiedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Se: {
            type: "structure",
            members: {
                bucketName: {},
                bucketKey: {}
            }
        },
        Sx: {
            type: "map",
            key: {},
            value: {}
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["lexmodelbuildingservice"] = {};

AWS.LexModelBuildingService = AWS.Service.defineService("lexmodelbuildingservice", [ "2017-04-19" ]);

AWS.apiLoader.services["lexmodelbuildingservice"]["2017-04-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-19",
        endpointPrefix: "models.lex",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Lex Model Building Service",
        serviceId: "Lex Model Building Service",
        signatureVersion: "v4",
        signingName: "lex",
        uid: "lex-models-2017-04-19"
    },
    operations: {
        CreateBotVersion: {
            http: {
                requestUri: "/bots/{name}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    checksum: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    status: {},
                    failureReason: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    version: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateIntentVersion: {
            http: {
                requestUri: "/intents/{name}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    checksum: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            }
        },
        CreateSlotTypeVersion: {
            http: {
                requestUri: "/slottypes/{name}/versions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    checksum: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    valueSelectionStrategy: {},
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            }
        },
        DeleteBot: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DeleteBotAlias: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botName}/aliases/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "botName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    }
                }
            }
        },
        DeleteBotChannelAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botName}/aliases/{aliasName}/channels/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "botName", "botAlias" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "aliasName"
                    }
                }
            }
        },
        DeleteBotVersion: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{name}/versions/{version}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            }
        },
        DeleteIntent: {
            http: {
                method: "DELETE",
                requestUri: "/intents/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DeleteIntentVersion: {
            http: {
                method: "DELETE",
                requestUri: "/intents/{name}/versions/{version}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            }
        },
        DeleteSlotType: {
            http: {
                method: "DELETE",
                requestUri: "/slottypes/{name}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            }
        },
        DeleteSlotTypeVersion: {
            http: {
                method: "DELETE",
                requestUri: "/slottypes/{name}/version/{version}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            }
        },
        DeleteUtterances: {
            http: {
                method: "DELETE",
                requestUri: "/bots/{botName}/utterances/{userId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "botName", "userId" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    userId: {
                        location: "uri",
                        locationName: "userId"
                    }
                }
            }
        },
        GetBot: {
            http: {
                method: "GET",
                requestUri: "/bots/{name}/versions/{versionoralias}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "versionOrAlias" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    versionOrAlias: {
                        location: "uri",
                        locationName: "versionoralias"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    status: {},
                    failureReason: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    version: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    }
                }
            }
        },
        GetBotAlias: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "botName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    botVersion: {},
                    botName: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    checksum: {},
                    conversationLogs: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetBotAliases: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botName" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BotAliases: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                botVersion: {},
                                botName: {},
                                lastUpdatedDate: {
                                    type: "timestamp"
                                },
                                createdDate: {
                                    type: "timestamp"
                                },
                                checksum: {},
                                conversationLogs: {
                                    shape: "S2h"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBotChannelAssociation: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/{aliasName}/channels/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "botName", "botAlias" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "aliasName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    botAlias: {},
                    botName: {},
                    createdDate: {
                        type: "timestamp"
                    },
                    type: {},
                    botConfiguration: {
                        shape: "S2z"
                    },
                    status: {},
                    failureReason: {}
                }
            }
        },
        GetBotChannelAssociations: {
            http: {
                method: "GET",
                requestUri: "/bots/{botName}/aliases/{aliasName}/channels/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botName", "botAlias" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    botAlias: {
                        location: "uri",
                        locationName: "aliasName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botChannelAssociations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                description: {},
                                botAlias: {},
                                botName: {},
                                createdDate: {
                                    type: "timestamp"
                                },
                                type: {},
                                botConfiguration: {
                                    shape: "S2z"
                                },
                                status: {},
                                failureReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBotVersions: {
            http: {
                method: "GET",
                requestUri: "/bots/{name}/versions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bots: {
                        shape: "S38"
                    },
                    nextToken: {}
                }
            }
        },
        GetBots: {
            http: {
                method: "GET",
                requestUri: "/bots/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bots: {
                        shape: "S38"
                    },
                    nextToken: {}
                }
            }
        },
        GetBuiltinIntent: {
            http: {
                method: "GET",
                requestUri: "/builtins/intents/{signature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "signature" ],
                members: {
                    signature: {
                        location: "uri",
                        locationName: "signature"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    signature: {},
                    supportedLocales: {
                        shape: "S3e"
                    },
                    slots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {}
                            }
                        }
                    }
                }
            }
        },
        GetBuiltinIntents: {
            http: {
                method: "GET",
                requestUri: "/builtins/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    locale: {
                        location: "querystring",
                        locationName: "locale"
                    },
                    signatureContains: {
                        location: "querystring",
                        locationName: "signatureContains"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intents: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                signature: {},
                                supportedLocales: {
                                    shape: "S3e"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetBuiltinSlotTypes: {
            http: {
                method: "GET",
                requestUri: "/builtins/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    locale: {
                        location: "querystring",
                        locationName: "locale"
                    },
                    signatureContains: {
                        location: "querystring",
                        locationName: "signatureContains"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                signature: {},
                                supportedLocales: {
                                    shape: "S3e"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetExport: {
            http: {
                method: "GET",
                requestUri: "/exports/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "version", "resourceType", "exportType" ],
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    version: {
                        location: "querystring",
                        locationName: "version"
                    },
                    resourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    exportType: {
                        location: "querystring",
                        locationName: "exportType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    version: {},
                    resourceType: {},
                    exportType: {},
                    exportStatus: {},
                    failureReason: {},
                    url: {}
                }
            }
        },
        GetImport: {
            http: {
                method: "GET",
                requestUri: "/imports/{importId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "importId" ],
                members: {
                    importId: {
                        location: "uri",
                        locationName: "importId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    resourceType: {},
                    mergeStrategy: {},
                    importId: {},
                    importStatus: {},
                    failureReason: {
                        type: "list",
                        member: {}
                    },
                    createdDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetIntent: {
            http: {
                method: "GET",
                requestUri: "/intents/{name}/versions/{version}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetIntentVersions: {
            http: {
                method: "GET",
                requestUri: "/intents/{name}/versions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intents: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        GetIntents: {
            http: {
                method: "GET",
                requestUri: "/intents/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    intents: {
                        shape: "S45"
                    },
                    nextToken: {}
                }
            }
        },
        GetMigration: {
            http: {
                method: "GET",
                requestUri: "/migrations/{migrationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "migrationId" ],
                members: {
                    migrationId: {
                        location: "uri",
                        locationName: "migrationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    migrationId: {},
                    v1BotName: {},
                    v1BotVersion: {},
                    v1BotLocale: {},
                    v2BotId: {},
                    v2BotRole: {},
                    migrationStatus: {},
                    migrationStrategy: {},
                    migrationTimestamp: {
                        type: "timestamp"
                    },
                    alerts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                type: {},
                                message: {},
                                details: {
                                    type: "list",
                                    member: {}
                                },
                                referenceURLs: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        GetMigrations: {
            http: {
                method: "GET",
                requestUri: "/migrations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    sortByAttribute: {
                        location: "querystring",
                        locationName: "sortByAttribute"
                    },
                    sortByOrder: {
                        location: "querystring",
                        locationName: "sortByOrder"
                    },
                    v1BotNameContains: {
                        location: "querystring",
                        locationName: "v1BotNameContains"
                    },
                    migrationStatusEquals: {
                        location: "querystring",
                        locationName: "migrationStatusEquals"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    migrationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                migrationId: {},
                                v1BotName: {},
                                v1BotVersion: {},
                                v1BotLocale: {},
                                v2BotId: {},
                                v2BotRole: {},
                                migrationStatus: {},
                                migrationStrategy: {},
                                migrationTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetSlotType: {
            http: {
                method: "GET",
                requestUri: "/slottypes/{name}/versions/{version}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "version" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    version: {
                        location: "uri",
                        locationName: "version"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    valueSelectionStrategy: {},
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            }
        },
        GetSlotTypeVersions: {
            http: {
                method: "GET",
                requestUri: "/slottypes/{name}/versions/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypes: {
                        shape: "S4x"
                    },
                    nextToken: {}
                }
            }
        },
        GetSlotTypes: {
            http: {
                method: "GET",
                requestUri: "/slottypes/",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nameContains: {
                        location: "querystring",
                        locationName: "nameContains"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    slotTypes: {
                        shape: "S4x"
                    },
                    nextToken: {}
                }
            }
        },
        GetUtterancesView: {
            http: {
                method: "GET",
                requestUri: "/bots/{botname}/utterances?view=aggregation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "botName", "botVersions", "statusType" ],
                members: {
                    botName: {
                        location: "uri",
                        locationName: "botname"
                    },
                    botVersions: {
                        location: "querystring",
                        locationName: "bot_versions",
                        type: "list",
                        member: {}
                    },
                    statusType: {
                        location: "querystring",
                        locationName: "status_type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    botName: {},
                    utterances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                botVersion: {},
                                utterances: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            utteranceString: {},
                                            count: {
                                                type: "integer"
                                            },
                                            distinctUsers: {
                                                type: "integer"
                                            },
                                            firstUtteredDate: {
                                                type: "timestamp"
                                            },
                                            lastUtteredDate: {
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5e"
                    }
                }
            }
        },
        PutBot: {
            http: {
                method: "PUT",
                requestUri: "/bots/{name}/versions/$LATEST",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "locale", "childDirected" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    processBehavior: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    },
                    createVersion: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S5e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    intents: {
                        shape: "S6"
                    },
                    enableModelImprovements: {
                        type: "boolean"
                    },
                    nluIntentConfidenceThreshold: {
                        type: "double"
                    },
                    clarificationPrompt: {
                        shape: "Sa"
                    },
                    abortStatement: {
                        shape: "Si"
                    },
                    status: {},
                    failureReason: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    idleSessionTTLInSeconds: {
                        type: "integer"
                    },
                    voiceId: {},
                    checksum: {},
                    version: {},
                    locale: {},
                    childDirected: {
                        type: "boolean"
                    },
                    createVersion: {
                        type: "boolean"
                    },
                    detectSentiment: {
                        type: "boolean"
                    },
                    tags: {
                        shape: "S5e"
                    }
                }
            }
        },
        PutBotAlias: {
            http: {
                method: "PUT",
                requestUri: "/bots/{botName}/aliases/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "botVersion", "botName" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    botVersion: {},
                    botName: {
                        location: "uri",
                        locationName: "botName"
                    },
                    checksum: {},
                    conversationLogs: {
                        type: "structure",
                        required: [ "logSettings", "iamRoleArn" ],
                        members: {
                            logSettings: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "logType", "destination", "resourceArn" ],
                                    members: {
                                        logType: {},
                                        destination: {},
                                        kmsKeyArn: {},
                                        resourceArn: {}
                                    }
                                }
                            },
                            iamRoleArn: {}
                        }
                    },
                    tags: {
                        shape: "S5e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    botVersion: {},
                    botName: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    checksum: {},
                    conversationLogs: {
                        shape: "S2h"
                    },
                    tags: {
                        shape: "S5e"
                    }
                }
            }
        },
        PutIntent: {
            http: {
                method: "PUT",
                requestUri: "/intents/{name}/versions/$LATEST",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    checksum: {},
                    createVersion: {
                        type: "boolean"
                    },
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    slots: {
                        shape: "Sq"
                    },
                    sampleUtterances: {
                        shape: "S13"
                    },
                    confirmationPrompt: {
                        shape: "Sa"
                    },
                    rejectionStatement: {
                        shape: "Si"
                    },
                    followUpPrompt: {
                        shape: "S14"
                    },
                    conclusionStatement: {
                        shape: "Si"
                    },
                    dialogCodeHook: {
                        shape: "S15"
                    },
                    fulfillmentActivity: {
                        shape: "S18"
                    },
                    parentIntentSignature: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    createVersion: {
                        type: "boolean"
                    },
                    kendraConfiguration: {
                        shape: "S1b"
                    },
                    inputContexts: {
                        shape: "S1f"
                    },
                    outputContexts: {
                        shape: "S1i"
                    }
                }
            }
        },
        PutSlotType: {
            http: {
                method: "PUT",
                requestUri: "/slottypes/{name}/versions/$LATEST",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    checksum: {},
                    valueSelectionStrategy: {},
                    createVersion: {
                        type: "boolean"
                    },
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    enumerationValues: {
                        shape: "S1q"
                    },
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {},
                    checksum: {},
                    valueSelectionStrategy: {},
                    createVersion: {
                        type: "boolean"
                    },
                    parentSlotTypeSignature: {},
                    slotTypeConfigurations: {
                        shape: "S1v"
                    }
                }
            }
        },
        StartImport: {
            http: {
                requestUri: "/imports/",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "payload", "resourceType", "mergeStrategy" ],
                members: {
                    payload: {
                        type: "blob"
                    },
                    resourceType: {},
                    mergeStrategy: {},
                    tags: {
                        shape: "S5e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    resourceType: {},
                    mergeStrategy: {},
                    importId: {},
                    importStatus: {},
                    tags: {
                        shape: "S5e"
                    },
                    createdDate: {
                        type: "timestamp"
                    }
                }
            }
        },
        StartMigration: {
            http: {
                requestUri: "/migrations",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "v1BotName", "v1BotVersion", "v2BotName", "v2BotRole", "migrationStrategy" ],
                members: {
                    v1BotName: {},
                    v1BotVersion: {},
                    v2BotName: {},
                    v2BotRole: {},
                    migrationStrategy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    v1BotName: {},
                    v1BotVersion: {},
                    v1BotLocale: {},
                    v2BotId: {},
                    v2BotRole: {},
                    migrationId: {},
                    migrationStrategy: {},
                    migrationTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S5e"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "intentName", "intentVersion" ],
                members: {
                    intentName: {},
                    intentVersion: {}
                }
            }
        },
        Sa: {
            type: "structure",
            required: [ "messages", "maxAttempts" ],
            members: {
                messages: {
                    shape: "Sb"
                },
                maxAttempts: {
                    type: "integer"
                },
                responseCard: {}
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "contentType", "content" ],
                members: {
                    contentType: {},
                    content: {},
                    groupNumber: {
                        type: "integer"
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "messages" ],
            members: {
                messages: {
                    shape: "Sb"
                },
                responseCard: {}
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "slotConstraint" ],
                members: {
                    name: {},
                    description: {},
                    slotConstraint: {},
                    slotType: {},
                    slotTypeVersion: {},
                    valueElicitationPrompt: {
                        shape: "Sa"
                    },
                    priority: {
                        type: "integer"
                    },
                    sampleUtterances: {
                        type: "list",
                        member: {}
                    },
                    responseCard: {},
                    obfuscationSetting: {},
                    defaultValueSpec: {
                        type: "structure",
                        required: [ "defaultValueList" ],
                        members: {
                            defaultValueList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "defaultValue" ],
                                    members: {
                                        defaultValue: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S13: {
            type: "list",
            member: {}
        },
        S14: {
            type: "structure",
            required: [ "prompt", "rejectionStatement" ],
            members: {
                prompt: {
                    shape: "Sa"
                },
                rejectionStatement: {
                    shape: "Si"
                }
            }
        },
        S15: {
            type: "structure",
            required: [ "uri", "messageVersion" ],
            members: {
                uri: {},
                messageVersion: {}
            }
        },
        S18: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                codeHook: {
                    shape: "S15"
                }
            }
        },
        S1b: {
            type: "structure",
            required: [ "kendraIndex", "role" ],
            members: {
                kendraIndex: {},
                queryFilterString: {},
                role: {}
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            }
        },
        S1i: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "timeToLiveInSeconds", "turnsToLive" ],
                members: {
                    name: {},
                    timeToLiveInSeconds: {
                        type: "integer"
                    },
                    turnsToLive: {
                        type: "integer"
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {
                type: "structure",
                required: [ "value" ],
                members: {
                    value: {},
                    synonyms: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    regexConfiguration: {
                        type: "structure",
                        required: [ "pattern" ],
                        members: {
                            pattern: {}
                        }
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                logSettings: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            logType: {},
                            destination: {},
                            kmsKeyArn: {},
                            resourceArn: {},
                            resourcePrefix: {}
                        }
                    }
                },
                iamRoleArn: {}
            }
        },
        S2z: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S38: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    status: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {}
                }
            }
        },
        S3e: {
            type: "list",
            member: {}
        },
        S45: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {}
                }
            }
        },
        S4x: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    description: {},
                    lastUpdatedDate: {
                        type: "timestamp"
                    },
                    createdDate: {
                        type: "timestamp"
                    },
                    version: {}
                }
            }
        },
        S5e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        }
    },
    paginators: {
        GetBotAliases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBotChannelAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBotVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBuiltinIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetBuiltinSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetIntentVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetIntents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetMigrations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetSlotTypeVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        GetSlotTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["marketplaceentitlementservice"] = {};

AWS.MarketplaceEntitlementService = AWS.Service.defineService("marketplaceentitlementservice", [ "2017-01-11" ]);

AWS.apiLoader.services["marketplaceentitlementservice"]["2017-01-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-01-11",
        endpointPrefix: "entitlement.marketplace",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Marketplace Entitlement Service",
        serviceId: "Marketplace Entitlement Service",
        signatureVersion: "v4",
        signingName: "aws-marketplace",
        targetPrefix: "AWSMPEntitlementService",
        uid: "entitlement.marketplace-2017-01-11"
    },
    operations: {
        GetEntitlements: {
            input: {
                type: "structure",
                required: [ "ProductCode" ],
                members: {
                    ProductCode: {},
                    Filter: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entitlements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProductCode: {},
                                Dimension: {},
                                CustomerIdentifier: {},
                                Value: {
                                    type: "structure",
                                    members: {
                                        IntegerValue: {
                                            type: "integer"
                                        },
                                        DoubleValue: {
                                            type: "double"
                                        },
                                        BooleanValue: {
                                            type: "boolean"
                                        },
                                        StringValue: {}
                                    }
                                },
                                ExpirationDate: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        GetEntitlements: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["athena"] = {};

AWS.Athena = AWS.Service.defineService("athena", [ "2017-05-18" ]);

AWS.apiLoader.services["athena"]["2017-05-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-05-18",
        endpointPrefix: "athena",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Athena",
        serviceId: "Athena",
        signatureVersion: "v4",
        targetPrefix: "AmazonAthena",
        uid: "athena-2017-05-18"
    },
    operations: {
        BatchGetNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryIds" ],
                members: {
                    NamedQueryIds: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQueries: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    UnprocessedNamedQueryIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NamedQueryId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetPreparedStatement: {
            input: {
                type: "structure",
                required: [ "PreparedStatementNames", "WorkGroup" ],
                members: {
                    PreparedStatementNames: {
                        type: "list",
                        member: {}
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PreparedStatements: {
                        type: "list",
                        member: {
                            shape: "Sl"
                        }
                    },
                    UnprocessedPreparedStatementNames: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StatementName: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryExecutionIds" ],
                members: {
                    QueryExecutionIds: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecutions: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    UnprocessedQueryExecutionIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                QueryExecutionId: {},
                                ErrorCode: {},
                                ErrorMessage: {}
                            }
                        }
                    }
                }
            }
        },
        CancelCapacityReservation: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateCapacityReservation: {
            input: {
                type: "structure",
                required: [ "TargetDpus", "Name" ],
                members: {
                    TargetDpus: {
                        type: "integer"
                    },
                    Name: {},
                    Tags: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        CreateDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    Description: {},
                    Parameters: {
                        shape: "S22"
                    },
                    Tags: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateNamedQuery: {
            input: {
                type: "structure",
                required: [ "Name", "Database", "QueryString" ],
                members: {
                    Name: {},
                    Description: {},
                    Database: {},
                    QueryString: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQueryId: {}
                }
            },
            idempotent: true
        },
        CreateNotebook: {
            input: {
                type: "structure",
                required: [ "WorkGroup", "Name" ],
                members: {
                    WorkGroup: {},
                    Name: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookId: {}
                }
            }
        },
        CreatePreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup", "QueryStatement" ],
                members: {
                    StatementName: {},
                    WorkGroup: {},
                    QueryStatement: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePresignedNotebookUrl: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "NotebookUrl", "AuthToken", "AuthTokenExpirationTime" ],
                members: {
                    NotebookUrl: {},
                    AuthToken: {},
                    AuthTokenExpirationTime: {
                        type: "long"
                    }
                }
            }
        },
        CreateWorkGroup: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Configuration: {
                        shape: "S2l"
                    },
                    Description: {},
                    Tags: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCapacityReservation: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryId" ],
                members: {
                    NamedQueryId: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteNotebook: {
            input: {
                type: "structure",
                required: [ "NotebookId" ],
                members: {
                    NotebookId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup" ],
                members: {
                    StatementName: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkGroup: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    RecursiveDeleteOption: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        ExportNotebook: {
            input: {
                type: "structure",
                required: [ "NotebookId" ],
                members: {
                    NotebookId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookMetadata: {
                        shape: "S38"
                    },
                    Payload: {}
                }
            }
        },
        GetCalculationExecution: {
            input: {
                type: "structure",
                required: [ "CalculationExecutionId" ],
                members: {
                    CalculationExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CalculationExecutionId: {},
                    SessionId: {},
                    Description: {},
                    WorkingDirectory: {},
                    Status: {
                        shape: "S3f"
                    },
                    Statistics: {
                        shape: "S3h"
                    },
                    Result: {
                        type: "structure",
                        members: {
                            StdOutS3Uri: {},
                            StdErrorS3Uri: {},
                            ResultS3Uri: {},
                            ResultType: {}
                        }
                    }
                }
            }
        },
        GetCalculationExecutionCode: {
            input: {
                type: "structure",
                required: [ "CalculationExecutionId" ],
                members: {
                    CalculationExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CodeBlock: {}
                }
            }
        },
        GetCalculationExecutionStatus: {
            input: {
                type: "structure",
                required: [ "CalculationExecutionId" ],
                members: {
                    CalculationExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Status: {
                        shape: "S3f"
                    },
                    Statistics: {
                        shape: "S3h"
                    }
                }
            }
        },
        GetCapacityAssignmentConfiguration: {
            input: {
                type: "structure",
                required: [ "CapacityReservationName" ],
                members: {
                    CapacityReservationName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CapacityAssignmentConfiguration" ],
                members: {
                    CapacityAssignmentConfiguration: {
                        type: "structure",
                        members: {
                            CapacityReservationName: {},
                            CapacityAssignments: {
                                shape: "S3s"
                            }
                        }
                    }
                }
            }
        },
        GetCapacityReservation: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CapacityReservation" ],
                members: {
                    CapacityReservation: {
                        shape: "S3x"
                    }
                }
            }
        },
        GetDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCatalog: {
                        type: "structure",
                        required: [ "Name", "Type" ],
                        members: {
                            Name: {},
                            Description: {},
                            Type: {},
                            Parameters: {
                                shape: "S22"
                            }
                        }
                    }
                }
            }
        },
        GetDatabase: {
            input: {
                type: "structure",
                required: [ "CatalogName", "DatabaseName" ],
                members: {
                    CatalogName: {},
                    DatabaseName: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "S48"
                    }
                }
            }
        },
        GetNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryId" ],
                members: {
                    NamedQueryId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQuery: {
                        shape: "S6"
                    }
                }
            }
        },
        GetNotebookMetadata: {
            input: {
                type: "structure",
                required: [ "NotebookId" ],
                members: {
                    NotebookId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookMetadata: {
                        shape: "S38"
                    }
                }
            }
        },
        GetPreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup" ],
                members: {
                    StatementName: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PreparedStatement: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecution: {
                        shape: "Su"
                    }
                }
            }
        },
        GetQueryResults: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UpdateCount: {
                        type: "long"
                    },
                    ResultSet: {
                        type: "structure",
                        members: {
                            Rows: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Data: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    VarCharValue: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ResultSetMetadata: {
                                type: "structure",
                                members: {
                                    ColumnInfo: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Name", "Type" ],
                                            members: {
                                                CatalogName: {},
                                                SchemaName: {},
                                                TableName: {},
                                                Name: {},
                                                Label: {},
                                                Type: {},
                                                Precision: {
                                                    type: "integer"
                                                },
                                                Scale: {
                                                    type: "integer"
                                                },
                                                Nullable: {},
                                                CaseSensitive: {
                                                    type: "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetQueryRuntimeStatistics: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryRuntimeStatistics: {
                        type: "structure",
                        members: {
                            Timeline: {
                                type: "structure",
                                members: {
                                    QueryQueueTimeInMillis: {
                                        type: "long"
                                    },
                                    ServicePreProcessingTimeInMillis: {
                                        type: "long"
                                    },
                                    QueryPlanningTimeInMillis: {
                                        type: "long"
                                    },
                                    EngineExecutionTimeInMillis: {
                                        type: "long"
                                    },
                                    ServiceProcessingTimeInMillis: {
                                        type: "long"
                                    },
                                    TotalExecutionTimeInMillis: {
                                        type: "long"
                                    }
                                }
                            },
                            Rows: {
                                type: "structure",
                                members: {
                                    InputRows: {
                                        type: "long"
                                    },
                                    InputBytes: {
                                        type: "long"
                                    },
                                    OutputBytes: {
                                        type: "long"
                                    },
                                    OutputRows: {
                                        type: "long"
                                    }
                                }
                            },
                            OutputStage: {
                                shape: "S51"
                            }
                        }
                    }
                }
            }
        },
        GetSession: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {},
                    Description: {},
                    WorkGroup: {},
                    EngineVersion: {},
                    EngineConfiguration: {
                        shape: "S58"
                    },
                    NotebookVersion: {},
                    SessionConfiguration: {
                        type: "structure",
                        members: {
                            ExecutionRole: {},
                            WorkingDirectory: {},
                            IdleTimeoutSeconds: {
                                type: "long"
                            },
                            EncryptionConfiguration: {
                                shape: "Sy"
                            }
                        }
                    },
                    Status: {
                        shape: "S5d"
                    },
                    Statistics: {
                        type: "structure",
                        members: {
                            DpuExecutionInMillis: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        GetSessionStatus: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {},
                    Status: {
                        shape: "S5d"
                    }
                }
            }
        },
        GetTableMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogName", "DatabaseName", "TableName" ],
                members: {
                    CatalogName: {},
                    DatabaseName: {},
                    TableName: {},
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableMetadata: {
                        shape: "S5k"
                    }
                }
            }
        },
        GetWorkGroup: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkGroup: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            State: {},
                            Configuration: {
                                shape: "S2l"
                            },
                            Description: {},
                            CreationTime: {
                                type: "timestamp"
                            },
                            IdentityCenterApplicationArn: {}
                        }
                    }
                }
            }
        },
        ImportNotebook: {
            input: {
                type: "structure",
                required: [ "WorkGroup", "Name", "Payload", "Type" ],
                members: {
                    WorkGroup: {},
                    Name: {},
                    Payload: {},
                    Type: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookId: {}
                }
            }
        },
        ListApplicationDPUSizes: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationDPUSizes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationRuntimeId: {},
                                SupportedDPUSizes: {
                                    type: "list",
                                    member: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCalculationExecutions: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {},
                    StateFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Calculations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CalculationExecutionId: {},
                                Description: {},
                                Status: {
                                    shape: "S3f"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListCapacityReservations: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CapacityReservations" ],
                members: {
                    NextToken: {},
                    CapacityReservations: {
                        type: "list",
                        member: {
                            shape: "S3x"
                        }
                    }
                }
            }
        },
        ListDataCatalogs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCatalogsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CatalogName: {},
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDatabases: {
            input: {
                type: "structure",
                required: [ "CatalogName" ],
                members: {
                    CatalogName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatabaseList: {
                        type: "list",
                        member: {
                            shape: "S48"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEngineVersions: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EngineVersions: {
                        type: "list",
                        member: {
                            shape: "S1i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExecutors: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {},
                    ExecutorStateFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {},
                    NextToken: {},
                    ExecutorsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ExecutorId" ],
                            members: {
                                ExecutorId: {},
                                ExecutorType: {},
                                StartDateTime: {
                                    type: "long"
                                },
                                TerminationDateTime: {
                                    type: "long"
                                },
                                ExecutorState: {},
                                ExecutorSize: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListNamedQueries: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NamedQueryIds: {
                        shape: "S2"
                    },
                    NextToken: {}
                }
            }
        },
        ListNotebookMetadata: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    Filters: {
                        type: "structure",
                        members: {
                            Name: {}
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotebookMetadataList: {
                        type: "list",
                        member: {
                            shape: "S38"
                        }
                    }
                }
            }
        },
        ListNotebookSessions: {
            input: {
                type: "structure",
                required: [ "NotebookId" ],
                members: {
                    NotebookId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "NotebookSessionsList" ],
                members: {
                    NotebookSessionsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SessionId: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPreparedStatements: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PreparedStatements: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StatementName: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListQueryExecutions: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecutionIds: {
                        shape: "Sq"
                    },
                    NextToken: {}
                }
            }
        },
        ListSessions: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    StateFilter: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Sessions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SessionId: {},
                                Description: {},
                                EngineVersion: {
                                    shape: "S1i"
                                },
                                NotebookVersion: {},
                                Status: {
                                    shape: "S5d"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTableMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogName", "DatabaseName" ],
                members: {
                    CatalogName: {},
                    DatabaseName: {},
                    Expression: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    WorkGroup: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableMetadataList: {
                        type: "list",
                        member: {
                            shape: "S5k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S1v"
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkGroups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                State: {},
                                Description: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                EngineVersion: {
                                    shape: "S1i"
                                },
                                IdentityCenterApplicationArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutCapacityAssignmentConfiguration: {
            input: {
                type: "structure",
                required: [ "CapacityReservationName", "CapacityAssignments" ],
                members: {
                    CapacityReservationName: {},
                    CapacityAssignments: {
                        shape: "S3s"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartCalculationExecution: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {},
                    Description: {},
                    CalculationConfiguration: {
                        deprecated: true,
                        deprecatedMessage: "Kepler Post GA Tasks : https://sim.amazon.com/issues/ATHENA-39828",
                        type: "structure",
                        members: {
                            CodeBlock: {}
                        }
                    },
                    CodeBlock: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CalculationExecutionId: {},
                    State: {}
                }
            }
        },
        StartQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryString" ],
                members: {
                    QueryString: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    QueryExecutionContext: {
                        shape: "S18"
                    },
                    ResultConfiguration: {
                        shape: "Sw"
                    },
                    WorkGroup: {},
                    ExecutionParameters: {
                        shape: "S1j"
                    },
                    ResultReuseConfiguration: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    QueryExecutionId: {}
                }
            },
            idempotent: true
        },
        StartSession: {
            input: {
                type: "structure",
                required: [ "WorkGroup", "EngineConfiguration" ],
                members: {
                    Description: {},
                    WorkGroup: {},
                    EngineConfiguration: {
                        shape: "S58"
                    },
                    NotebookVersion: {},
                    SessionIdleTimeoutInMinutes: {
                        type: "integer"
                    },
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SessionId: {},
                    State: {}
                }
            }
        },
        StopCalculationExecution: {
            input: {
                type: "structure",
                required: [ "CalculationExecutionId" ],
                members: {
                    CalculationExecutionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {}
                }
            }
        },
        StopQueryExecution: {
            input: {
                type: "structure",
                required: [ "QueryExecutionId" ],
                members: {
                    QueryExecutionId: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S1v"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TerminateSession: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {}
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCapacityReservation: {
            input: {
                type: "structure",
                required: [ "TargetDpus", "Name" ],
                members: {
                    TargetDpus: {
                        type: "integer"
                    },
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataCatalog: {
            input: {
                type: "structure",
                required: [ "Name", "Type" ],
                members: {
                    Name: {},
                    Type: {},
                    Description: {},
                    Parameters: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNamedQuery: {
            input: {
                type: "structure",
                required: [ "NamedQueryId", "Name", "QueryString" ],
                members: {
                    NamedQueryId: {},
                    Name: {},
                    Description: {},
                    QueryString: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateNotebook: {
            input: {
                type: "structure",
                required: [ "NotebookId", "Payload", "Type" ],
                members: {
                    NotebookId: {},
                    Payload: {},
                    Type: {},
                    SessionId: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNotebookMetadata: {
            input: {
                type: "structure",
                required: [ "NotebookId", "Name" ],
                members: {
                    NotebookId: {},
                    ClientRequestToken: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePreparedStatement: {
            input: {
                type: "structure",
                required: [ "StatementName", "WorkGroup", "QueryStatement" ],
                members: {
                    StatementName: {},
                    WorkGroup: {},
                    QueryStatement: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkGroup: {
            input: {
                type: "structure",
                required: [ "WorkGroup" ],
                members: {
                    WorkGroup: {},
                    Description: {},
                    ConfigurationUpdates: {
                        type: "structure",
                        members: {
                            EnforceWorkGroupConfiguration: {
                                type: "boolean"
                            },
                            ResultConfigurationUpdates: {
                                type: "structure",
                                members: {
                                    OutputLocation: {},
                                    RemoveOutputLocation: {
                                        type: "boolean"
                                    },
                                    EncryptionConfiguration: {
                                        shape: "Sy"
                                    },
                                    RemoveEncryptionConfiguration: {
                                        type: "boolean"
                                    },
                                    ExpectedBucketOwner: {},
                                    RemoveExpectedBucketOwner: {
                                        type: "boolean"
                                    },
                                    AclConfiguration: {
                                        shape: "S12"
                                    },
                                    RemoveAclConfiguration: {
                                        type: "boolean"
                                    }
                                }
                            },
                            PublishCloudWatchMetricsEnabled: {
                                type: "boolean"
                            },
                            BytesScannedCutoffPerQuery: {
                                type: "long"
                            },
                            RemoveBytesScannedCutoffPerQuery: {
                                type: "boolean"
                            },
                            RequesterPaysEnabled: {
                                type: "boolean"
                            },
                            EngineVersion: {
                                shape: "S1i"
                            },
                            RemoveCustomerContentEncryptionConfiguration: {
                                type: "boolean"
                            },
                            AdditionalConfiguration: {},
                            ExecutionRole: {},
                            CustomerContentEncryptionConfiguration: {
                                shape: "S2o"
                            },
                            EnableMinimumEncryptionConfiguration: {
                                type: "boolean"
                            },
                            QueryResultsS3AccessGrantsConfiguration: {
                                shape: "S1l"
                            }
                        }
                    },
                    State: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {}
        },
        S6: {
            type: "structure",
            required: [ "Name", "Database", "QueryString" ],
            members: {
                Name: {},
                Description: {},
                Database: {},
                QueryString: {},
                NamedQueryId: {},
                WorkGroup: {}
            }
        },
        Sl: {
            type: "structure",
            members: {
                StatementName: {},
                QueryStatement: {},
                WorkGroupName: {},
                Description: {},
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        Sq: {
            type: "list",
            member: {}
        },
        Su: {
            type: "structure",
            members: {
                QueryExecutionId: {},
                Query: {},
                StatementType: {},
                ResultConfiguration: {
                    shape: "Sw"
                },
                ResultReuseConfiguration: {
                    shape: "S14"
                },
                QueryExecutionContext: {
                    shape: "S18"
                },
                Status: {
                    type: "structure",
                    members: {
                        State: {},
                        StateChangeReason: {},
                        SubmissionDateTime: {
                            type: "timestamp"
                        },
                        CompletionDateTime: {
                            type: "timestamp"
                        },
                        AthenaError: {
                            type: "structure",
                            members: {
                                ErrorCategory: {
                                    type: "integer"
                                },
                                ErrorType: {
                                    type: "integer"
                                },
                                Retryable: {
                                    type: "boolean"
                                },
                                ErrorMessage: {}
                            }
                        }
                    }
                },
                Statistics: {
                    type: "structure",
                    members: {
                        EngineExecutionTimeInMillis: {
                            type: "long"
                        },
                        DataScannedInBytes: {
                            type: "long"
                        },
                        DataManifestLocation: {},
                        TotalExecutionTimeInMillis: {
                            type: "long"
                        },
                        QueryQueueTimeInMillis: {
                            type: "long"
                        },
                        ServicePreProcessingTimeInMillis: {
                            type: "long"
                        },
                        QueryPlanningTimeInMillis: {
                            type: "long"
                        },
                        ServiceProcessingTimeInMillis: {
                            type: "long"
                        },
                        ResultReuseInformation: {
                            type: "structure",
                            required: [ "ReusedPreviousResult" ],
                            members: {
                                ReusedPreviousResult: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                WorkGroup: {},
                EngineVersion: {
                    shape: "S1i"
                },
                ExecutionParameters: {
                    shape: "S1j"
                },
                SubstatementType: {},
                QueryResultsS3AccessGrantsConfiguration: {
                    shape: "S1l"
                }
            }
        },
        Sw: {
            type: "structure",
            members: {
                OutputLocation: {},
                EncryptionConfiguration: {
                    shape: "Sy"
                },
                ExpectedBucketOwner: {},
                AclConfiguration: {
                    shape: "S12"
                }
            }
        },
        Sy: {
            type: "structure",
            required: [ "EncryptionOption" ],
            members: {
                EncryptionOption: {},
                KmsKey: {}
            }
        },
        S12: {
            type: "structure",
            required: [ "S3AclOption" ],
            members: {
                S3AclOption: {}
            }
        },
        S14: {
            type: "structure",
            members: {
                ResultReuseByAgeConfiguration: {
                    type: "structure",
                    required: [ "Enabled" ],
                    members: {
                        Enabled: {
                            type: "boolean"
                        },
                        MaxAgeInMinutes: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                Database: {},
                Catalog: {}
            }
        },
        S1i: {
            type: "structure",
            members: {
                SelectedEngineVersion: {},
                EffectiveEngineVersion: {}
            }
        },
        S1j: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "structure",
            required: [ "EnableS3AccessGrants", "AuthenticationType" ],
            members: {
                EnableS3AccessGrants: {
                    type: "boolean"
                },
                CreateUserLevelPrefix: {
                    type: "boolean"
                },
                AuthenticationType: {}
            }
        },
        S1v: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S22: {
            type: "map",
            key: {},
            value: {}
        },
        S2l: {
            type: "structure",
            members: {
                ResultConfiguration: {
                    shape: "Sw"
                },
                EnforceWorkGroupConfiguration: {
                    type: "boolean"
                },
                PublishCloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                BytesScannedCutoffPerQuery: {
                    type: "long"
                },
                RequesterPaysEnabled: {
                    type: "boolean"
                },
                EngineVersion: {
                    shape: "S1i"
                },
                AdditionalConfiguration: {},
                ExecutionRole: {},
                CustomerContentEncryptionConfiguration: {
                    shape: "S2o"
                },
                EnableMinimumEncryptionConfiguration: {
                    type: "boolean"
                },
                IdentityCenterConfiguration: {
                    type: "structure",
                    members: {
                        EnableIdentityCenter: {
                            type: "boolean"
                        },
                        IdentityCenterInstanceArn: {}
                    }
                },
                QueryResultsS3AccessGrantsConfiguration: {
                    shape: "S1l"
                }
            }
        },
        S2o: {
            type: "structure",
            required: [ "KmsKey" ],
            members: {
                KmsKey: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                NotebookId: {},
                Name: {},
                WorkGroup: {},
                CreationTime: {
                    type: "timestamp"
                },
                Type: {},
                LastModifiedTime: {
                    type: "timestamp"
                }
            }
        },
        S3f: {
            type: "structure",
            members: {
                SubmissionDateTime: {
                    type: "timestamp"
                },
                CompletionDateTime: {
                    type: "timestamp"
                },
                State: {},
                StateChangeReason: {}
            }
        },
        S3h: {
            type: "structure",
            members: {
                DpuExecutionInMillis: {
                    type: "long"
                },
                Progress: {}
            }
        },
        S3s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    WorkGroupNames: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S3x: {
            type: "structure",
            required: [ "Name", "Status", "TargetDpus", "AllocatedDpus", "CreationTime" ],
            members: {
                Name: {},
                Status: {},
                TargetDpus: {
                    type: "integer"
                },
                AllocatedDpus: {
                    type: "integer"
                },
                LastAllocation: {
                    type: "structure",
                    required: [ "Status", "RequestTime" ],
                    members: {
                        Status: {},
                        StatusMessage: {},
                        RequestTime: {
                            type: "timestamp"
                        },
                        RequestCompletionTime: {
                            type: "timestamp"
                        }
                    }
                },
                LastSuccessfulAllocationTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                }
            }
        },
        S48: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                Parameters: {
                    shape: "S22"
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                StageId: {
                    type: "long"
                },
                State: {},
                OutputBytes: {
                    type: "long"
                },
                OutputRows: {
                    type: "long"
                },
                InputBytes: {
                    type: "long"
                },
                InputRows: {
                    type: "long"
                },
                ExecutionTime: {
                    type: "long"
                },
                QueryStagePlan: {
                    shape: "S52"
                },
                SubStages: {
                    type: "list",
                    member: {
                        shape: "S51"
                    }
                }
            }
        },
        S52: {
            type: "structure",
            members: {
                Name: {},
                Identifier: {},
                Children: {
                    type: "list",
                    member: {
                        shape: "S52"
                    }
                },
                RemoteSources: {
                    type: "list",
                    member: {}
                }
            }
        },
        S58: {
            type: "structure",
            required: [ "MaxConcurrentDpus" ],
            members: {
                CoordinatorDpuSize: {
                    type: "integer"
                },
                MaxConcurrentDpus: {
                    type: "integer"
                },
                DefaultExecutorDpuSize: {
                    type: "integer"
                },
                AdditionalConfigs: {
                    shape: "S22"
                },
                SparkProperties: {
                    shape: "S22"
                }
            }
        },
        S5d: {
            type: "structure",
            members: {
                StartDateTime: {
                    type: "timestamp"
                },
                LastModifiedDateTime: {
                    type: "timestamp"
                },
                EndDateTime: {
                    type: "timestamp"
                },
                IdleSinceDateTime: {
                    type: "timestamp"
                },
                State: {},
                StateChangeReason: {}
            }
        },
        S5k: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                CreateTime: {
                    type: "timestamp"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                TableType: {},
                Columns: {
                    shape: "S5m"
                },
                PartitionKeys: {
                    shape: "S5m"
                },
                Parameters: {
                    shape: "S22"
                }
            }
        },
        S5m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Type: {},
                    Comment: {}
                }
            }
        }
    },
    paginators: {
        GetQueryResults: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListApplicationDPUSizes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCalculationExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCapacityReservations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDataCatalogs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DataCatalogsSummary"
        },
        ListDatabases: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DatabaseList"
        },
        ListEngineVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListExecutors: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListNamedQueries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListPreparedStatements: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListQueryExecutions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListSessions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTableMetadata: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "TableMetadataList"
        },
        ListTagsForResource: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Tags"
        },
        ListWorkGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["greengrass"] = {};

AWS.Greengrass = AWS.Service.defineService("greengrass", [ "2017-06-07" ]);

AWS.apiLoader.services["greengrass"]["2017-06-07"] = {
    metadata: {
        apiVersion: "2017-06-07",
        endpointPrefix: "greengrass",
        signingName: "greengrass",
        serviceFullName: "AWS Greengrass",
        serviceId: "Greengrass",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "greengrass-2017-06-07",
        signatureVersion: "v4"
    },
    operations: {
        AssociateRoleToGroup: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/groups/{GroupId}/role",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    RoleArn: {}
                },
                required: [ "GroupId", "RoleArn" ]
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {}
                }
            }
        },
        AssociateServiceRoleToAccount: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    RoleArn: {}
                },
                required: [ "RoleArn" ]
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {}
                }
            }
        },
        CreateConnectorDefinition: {
            http: {
                requestUri: "/greengrass/definition/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S7"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateConnectorDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    Connectors: {
                        shape: "S8"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateCoreDefinition: {
            http: {
                requestUri: "/greengrass/definition/cores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "Sg"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateCoreDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    Cores: {
                        shape: "Sh"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateDeployment: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    DeploymentId: {},
                    DeploymentType: {},
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    GroupVersionId: {}
                },
                required: [ "GroupId", "DeploymentType" ]
            },
            output: {
                type: "structure",
                members: {
                    DeploymentArn: {},
                    DeploymentId: {}
                }
            }
        },
        CreateDeviceDefinition: {
            http: {
                requestUri: "/greengrass/definition/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "Sr"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateDeviceDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    Devices: {
                        shape: "Ss"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateFunctionDefinition: {
            http: {
                requestUri: "/greengrass/definition/functions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "Sy"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateFunctionDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    DefaultConfig: {
                        shape: "Sz"
                    },
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    Functions: {
                        shape: "S14"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateGroup: {
            http: {
                requestUri: "/greengrass/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S1h"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateGroupCertificateAuthority: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    GroupCertificateAuthorityArn: {}
                }
            }
        },
        CreateGroupVersion: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ConnectorDefinitionVersionArn: {},
                    CoreDefinitionVersionArn: {},
                    DeviceDefinitionVersionArn: {},
                    FunctionDefinitionVersionArn: {},
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    LoggerDefinitionVersionArn: {},
                    ResourceDefinitionVersionArn: {},
                    SubscriptionDefinitionVersionArn: {}
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateLoggerDefinition: {
            http: {
                requestUri: "/greengrass/definition/loggers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S1o"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateLoggerDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    Loggers: {
                        shape: "S1p"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateResourceDefinition: {
            http: {
                requestUri: "/greengrass/definition/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S1y"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateResourceDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    },
                    Resources: {
                        shape: "S1z"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        CreateSoftwareUpdateJob: {
            http: {
                requestUri: "/greengrass/updates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    S3UrlSignerRole: {},
                    SoftwareToUpdate: {},
                    UpdateAgentLogLevel: {},
                    UpdateTargets: {
                        type: "list",
                        member: {}
                    },
                    UpdateTargetsArchitecture: {},
                    UpdateTargetsOperatingSystem: {}
                },
                required: [ "S3UrlSignerRole", "UpdateTargetsArchitecture", "SoftwareToUpdate", "UpdateTargets", "UpdateTargetsOperatingSystem" ]
            },
            output: {
                type: "structure",
                members: {
                    IotJobArn: {},
                    IotJobId: {},
                    PlatformSoftwareVersion: {}
                }
            }
        },
        CreateSubscriptionDefinition: {
            http: {
                requestUri: "/greengrass/definition/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    InitialVersion: {
                        shape: "S2m"
                    },
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {}
                }
            }
        },
        CreateSubscriptionDefinitionVersion: {
            http: {
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    },
                    Subscriptions: {
                        shape: "S2n"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        DeleteConnectorDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCoreDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDeviceDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFunctionDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGroup: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/groups/{GroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLoggerDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourceDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSubscriptionDefinition: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateRoleFromGroup: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/groups/{GroupId}/role",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    DisassociatedAt: {}
                }
            }
        },
        DisassociateServiceRoleFromAccount: {
            http: {
                method: "DELETE",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    DisassociatedAt: {}
                }
            }
        },
        GetAssociatedRole: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/role",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {},
                    RoleArn: {}
                }
            }
        },
        GetBulkDeploymentStatus: {
            http: {
                method: "GET",
                requestUri: "/greengrass/bulk/deployments/{BulkDeploymentId}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BulkDeploymentId: {
                        location: "uri",
                        locationName: "BulkDeploymentId"
                    }
                },
                required: [ "BulkDeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    BulkDeploymentMetrics: {
                        type: "structure",
                        members: {
                            InvalidInputRecords: {
                                type: "integer"
                            },
                            RecordsProcessed: {
                                type: "integer"
                            },
                            RetryAttempts: {
                                type: "integer"
                            }
                        }
                    },
                    BulkDeploymentStatus: {},
                    CreatedAt: {},
                    ErrorDetails: {
                        shape: "S3i"
                    },
                    ErrorMessage: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetConnectivityInfo: {
            http: {
                method: "GET",
                requestUri: "/greengrass/things/{ThingName}/connectivityInfo",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {
                    ConnectivityInfo: {
                        shape: "S3m"
                    },
                    Message: {
                        locationName: "message"
                    }
                }
            }
        },
        GetConnectorDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetConnectorDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions/{ConnectorDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    ConnectorDefinitionVersionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ConnectorDefinitionId", "ConnectorDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S7"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetCoreDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetCoreDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    CoreDefinitionVersionId: {
                        location: "uri",
                        locationName: "CoreDefinitionVersionId"
                    }
                },
                required: [ "CoreDefinitionId", "CoreDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "Sg"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetDeploymentStatus: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeploymentId: {
                        location: "uri",
                        locationName: "DeploymentId"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId", "DeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeploymentStatus: {},
                    DeploymentType: {},
                    ErrorDetails: {
                        shape: "S3i"
                    },
                    ErrorMessage: {},
                    UpdatedAt: {}
                }
            }
        },
        GetDeviceDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetDeviceDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    DeviceDefinitionVersionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "DeviceDefinitionVersionId", "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "Sr"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetFunctionDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetFunctionDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    FunctionDefinitionVersionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "FunctionDefinitionId", "FunctionDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "Sy"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetGroup: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetGroupCertificateAuthority: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CertificateAuthorityId: {
                        location: "uri",
                        locationName: "CertificateAuthorityId"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "CertificateAuthorityId", "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    GroupCertificateAuthorityArn: {},
                    GroupCertificateAuthorityId: {},
                    PemEncodedCertificate: {}
                }
            }
        },
        GetGroupCertificateConfiguration: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorityExpiryInMilliseconds: {},
                    CertificateExpiryInMilliseconds: {},
                    GroupId: {}
                }
            }
        },
        GetGroupVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/versions/{GroupVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    GroupVersionId: {
                        location: "uri",
                        locationName: "GroupVersionId"
                    }
                },
                required: [ "GroupVersionId", "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S1h"
                    },
                    Id: {},
                    Version: {}
                }
            }
        },
        GetLoggerDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetLoggerDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    LoggerDefinitionVersionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionVersionId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "LoggerDefinitionVersionId", "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S1o"
                    },
                    Id: {},
                    Version: {}
                }
            }
        },
        GetResourceDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetResourceDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}/versions/{ResourceDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    },
                    ResourceDefinitionVersionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionVersionId"
                    }
                },
                required: [ "ResourceDefinitionVersionId", "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S1y"
                    },
                    Id: {},
                    Version: {}
                }
            }
        },
        GetServiceRoleForAccount: {
            http: {
                method: "GET",
                requestUri: "/greengrass/servicerole",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AssociatedAt: {},
                    RoleArn: {}
                }
            }
        },
        GetSubscriptionDefinition: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetSubscriptionDefinitionVersion: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    },
                    SubscriptionDefinitionVersionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionVersionId"
                    }
                },
                required: [ "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Definition: {
                        shape: "S2m"
                    },
                    Id: {},
                    NextToken: {},
                    Version: {}
                }
            }
        },
        GetThingRuntimeConfiguration: {
            http: {
                method: "GET",
                requestUri: "/greengrass/things/{ThingName}/runtimeconfig",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {
                    RuntimeConfiguration: {
                        type: "structure",
                        members: {
                            TelemetryConfiguration: {
                                type: "structure",
                                members: {
                                    ConfigurationSyncStatus: {},
                                    Telemetry: {}
                                },
                                required: [ "Telemetry" ]
                            }
                        }
                    }
                }
            }
        },
        ListBulkDeploymentDetailedReports: {
            http: {
                method: "GET",
                requestUri: "/greengrass/bulk/deployments/{BulkDeploymentId}/detailed-reports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BulkDeploymentId: {
                        location: "uri",
                        locationName: "BulkDeploymentId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "BulkDeploymentId" ]
            },
            output: {
                type: "structure",
                members: {
                    Deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {},
                                DeploymentArn: {},
                                DeploymentId: {},
                                DeploymentStatus: {},
                                DeploymentType: {},
                                ErrorDetails: {
                                    shape: "S3i"
                                },
                                ErrorMessage: {},
                                GroupArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBulkDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/bulk/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BulkDeployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BulkDeploymentArn: {},
                                BulkDeploymentId: {},
                                CreatedAt: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListConnectorDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListConnectorDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListCoreDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListCoreDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/cores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {},
                                DeploymentArn: {},
                                DeploymentId: {},
                                DeploymentType: {},
                                GroupArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDeviceDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListDeviceDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListFunctionDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListFunctionDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/functions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListGroupCertificateAuthorities: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    GroupCertificateAuthorities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GroupCertificateAuthorityArn: {},
                                GroupCertificateAuthorityId: {}
                            }
                        }
                    }
                }
            }
        },
        ListGroupVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups/{GroupId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListGroups: {
            http: {
                method: "GET",
                requestUri: "/greengrass/groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreationTimestamp: {},
                                Id: {},
                                LastUpdatedTimestamp: {},
                                LatestVersion: {},
                                LatestVersionArn: {},
                                Name: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLoggerDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListLoggerDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/loggers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListResourceDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListSubscriptionDefinitionVersions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Versions: {
                        shape: "S58"
                    }
                }
            }
        },
        ListSubscriptionDefinitions: {
            http: {
                method: "GET",
                requestUri: "/greengrass/definition/subscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Definitions: {
                        shape: "S5c"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ResetDeployments: {
            http: {
                requestUri: "/greengrass/groups/{GroupId}/deployments/$reset",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Force: {
                        type: "boolean"
                    },
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    DeploymentArn: {},
                    DeploymentId: {}
                }
            }
        },
        StartBulkDeployment: {
            http: {
                requestUri: "/greengrass/bulk/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AmznClientToken: {
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    ExecutionRoleArn: {},
                    InputFileUri: {},
                    tags: {
                        shape: "Sb"
                    }
                },
                required: [ "ExecutionRoleArn", "InputFileUri" ]
            },
            output: {
                type: "structure",
                members: {
                    BulkDeploymentArn: {},
                    BulkDeploymentId: {}
                }
            }
        },
        StopBulkDeployment: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/bulk/deployments/{BulkDeploymentId}/$stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BulkDeploymentId: {
                        location: "uri",
                        locationName: "BulkDeploymentId"
                    }
                },
                required: [ "BulkDeploymentId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    tags: {
                        shape: "Sb"
                    }
                },
                required: [ "ResourceArn" ]
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S29",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        UpdateConnectivityInfo: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/things/{ThingName}/connectivityInfo",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectivityInfo: {
                        shape: "S3m"
                    },
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {
                    Message: {
                        locationName: "message"
                    },
                    Version: {}
                }
            }
        },
        UpdateConnectorDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/connectors/{ConnectorDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConnectorDefinitionId: {
                        location: "uri",
                        locationName: "ConnectorDefinitionId"
                    },
                    Name: {}
                },
                required: [ "ConnectorDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCoreDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/cores/{CoreDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CoreDefinitionId: {
                        location: "uri",
                        locationName: "CoreDefinitionId"
                    },
                    Name: {}
                },
                required: [ "CoreDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDeviceDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/devices/{DeviceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceDefinitionId: {
                        location: "uri",
                        locationName: "DeviceDefinitionId"
                    },
                    Name: {}
                },
                required: [ "DeviceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFunctionDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/functions/{FunctionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    FunctionDefinitionId: {
                        location: "uri",
                        locationName: "FunctionDefinitionId"
                    },
                    Name: {}
                },
                required: [ "FunctionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGroup: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/groups/{GroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    },
                    Name: {}
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateGroupCertificateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CertificateExpiryInMilliseconds: {},
                    GroupId: {
                        location: "uri",
                        locationName: "GroupId"
                    }
                },
                required: [ "GroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    CertificateAuthorityExpiryInMilliseconds: {},
                    CertificateExpiryInMilliseconds: {},
                    GroupId: {}
                }
            }
        },
        UpdateLoggerDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/loggers/{LoggerDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    LoggerDefinitionId: {
                        location: "uri",
                        locationName: "LoggerDefinitionId"
                    },
                    Name: {}
                },
                required: [ "LoggerDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateResourceDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/resources/{ResourceDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    ResourceDefinitionId: {
                        location: "uri",
                        locationName: "ResourceDefinitionId"
                    }
                },
                required: [ "ResourceDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSubscriptionDefinition: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {},
                    SubscriptionDefinitionId: {
                        location: "uri",
                        locationName: "SubscriptionDefinitionId"
                    }
                },
                required: [ "SubscriptionDefinitionId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateThingRuntimeConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/greengrass/things/{ThingName}/runtimeconfig",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    TelemetryConfiguration: {
                        type: "structure",
                        members: {
                            Telemetry: {}
                        },
                        required: [ "Telemetry" ]
                    },
                    ThingName: {
                        location: "uri",
                        locationName: "ThingName"
                    }
                },
                required: [ "ThingName" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                Connectors: {
                    shape: "S8"
                }
            }
        },
        S8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ConnectorArn: {},
                    Id: {},
                    Parameters: {
                        shape: "Sa"
                    }
                },
                required: [ "ConnectorArn", "Id" ]
            }
        },
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sg: {
            type: "structure",
            members: {
                Cores: {
                    shape: "Sh"
                }
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CertificateArn: {},
                    Id: {},
                    SyncShadow: {
                        type: "boolean"
                    },
                    ThingArn: {}
                },
                required: [ "ThingArn", "Id", "CertificateArn" ]
            }
        },
        Sr: {
            type: "structure",
            members: {
                Devices: {
                    shape: "Ss"
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CertificateArn: {},
                    Id: {},
                    SyncShadow: {
                        type: "boolean"
                    },
                    ThingArn: {}
                },
                required: [ "ThingArn", "Id", "CertificateArn" ]
            }
        },
        Sy: {
            type: "structure",
            members: {
                DefaultConfig: {
                    shape: "Sz"
                },
                Functions: {
                    shape: "S14"
                }
            }
        },
        Sz: {
            type: "structure",
            members: {
                Execution: {
                    type: "structure",
                    members: {
                        IsolationMode: {},
                        RunAs: {
                            shape: "S12"
                        }
                    }
                }
            }
        },
        S12: {
            type: "structure",
            members: {
                Gid: {
                    type: "integer"
                },
                Uid: {
                    type: "integer"
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FunctionArn: {},
                    FunctionConfiguration: {
                        type: "structure",
                        members: {
                            EncodingType: {},
                            Environment: {
                                type: "structure",
                                members: {
                                    AccessSysfs: {
                                        type: "boolean"
                                    },
                                    Execution: {
                                        type: "structure",
                                        members: {
                                            IsolationMode: {},
                                            RunAs: {
                                                shape: "S12"
                                            }
                                        }
                                    },
                                    ResourceAccessPolicies: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Permission: {},
                                                ResourceId: {}
                                            },
                                            required: [ "ResourceId" ]
                                        }
                                    },
                                    Variables: {
                                        shape: "Sa"
                                    }
                                }
                            },
                            ExecArgs: {},
                            Executable: {},
                            MemorySize: {
                                type: "integer"
                            },
                            Pinned: {
                                type: "boolean"
                            },
                            Timeout: {
                                type: "integer"
                            },
                            FunctionRuntimeOverride: {}
                        }
                    },
                    Id: {}
                },
                required: [ "Id" ]
            }
        },
        S1h: {
            type: "structure",
            members: {
                ConnectorDefinitionVersionArn: {},
                CoreDefinitionVersionArn: {},
                DeviceDefinitionVersionArn: {},
                FunctionDefinitionVersionArn: {},
                LoggerDefinitionVersionArn: {},
                ResourceDefinitionVersionArn: {},
                SubscriptionDefinitionVersionArn: {}
            }
        },
        S1o: {
            type: "structure",
            members: {
                Loggers: {
                    shape: "S1p"
                }
            }
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Component: {},
                    Id: {},
                    Level: {},
                    Space: {
                        type: "integer"
                    },
                    Type: {}
                },
                required: [ "Type", "Level", "Id", "Component" ]
            }
        },
        S1y: {
            type: "structure",
            members: {
                Resources: {
                    shape: "S1z"
                }
            }
        },
        S1z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Name: {},
                    ResourceDataContainer: {
                        type: "structure",
                        members: {
                            LocalDeviceResourceData: {
                                type: "structure",
                                members: {
                                    GroupOwnerSetting: {
                                        shape: "S23"
                                    },
                                    SourcePath: {}
                                }
                            },
                            LocalVolumeResourceData: {
                                type: "structure",
                                members: {
                                    DestinationPath: {},
                                    GroupOwnerSetting: {
                                        shape: "S23"
                                    },
                                    SourcePath: {}
                                }
                            },
                            S3MachineLearningModelResourceData: {
                                type: "structure",
                                members: {
                                    DestinationPath: {},
                                    OwnerSetting: {
                                        shape: "S26"
                                    },
                                    S3Uri: {}
                                }
                            },
                            SageMakerMachineLearningModelResourceData: {
                                type: "structure",
                                members: {
                                    DestinationPath: {},
                                    OwnerSetting: {
                                        shape: "S26"
                                    },
                                    SageMakerJobArn: {}
                                }
                            },
                            SecretsManagerSecretResourceData: {
                                type: "structure",
                                members: {
                                    ARN: {},
                                    AdditionalStagingLabelsToDownload: {
                                        shape: "S29"
                                    }
                                }
                            }
                        }
                    }
                },
                required: [ "ResourceDataContainer", "Id", "Name" ]
            }
        },
        S23: {
            type: "structure",
            members: {
                AutoAddGroupOwner: {
                    type: "boolean"
                },
                GroupOwner: {}
            }
        },
        S26: {
            type: "structure",
            members: {
                GroupOwner: {},
                GroupPermission: {}
            },
            required: [ "GroupOwner", "GroupPermission" ]
        },
        S29: {
            type: "list",
            member: {}
        },
        S2m: {
            type: "structure",
            members: {
                Subscriptions: {
                    shape: "S2n"
                }
            }
        },
        S2n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {},
                    Source: {},
                    Subject: {},
                    Target: {}
                },
                required: [ "Target", "Id", "Subject", "Source" ]
            }
        },
        S3i: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DetailedErrorCode: {},
                    DetailedErrorMessage: {}
                }
            }
        },
        S3m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    HostAddress: {},
                    Id: {},
                    Metadata: {},
                    PortNumber: {
                        type: "integer"
                    }
                }
            }
        },
        S58: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    Version: {}
                }
            }
        },
        S5c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    CreationTimestamp: {},
                    Id: {},
                    LastUpdatedTimestamp: {},
                    LatestVersion: {},
                    LatestVersionArn: {},
                    Name: {},
                    Tags: {
                        shape: "Sb",
                        locationName: "tags"
                    }
                }
            }
        }
    }
};

AWS.apiLoader.services["dax"] = {};

AWS.DAX = AWS.Service.defineService("dax", [ "2017-04-19" ]);

AWS.apiLoader.services["dax"]["2017-04-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-19",
        endpointPrefix: "dax",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "Amazon DAX",
        serviceFullName: "Amazon DynamoDB Accelerator (DAX)",
        serviceId: "DAX",
        signatureVersion: "v4",
        targetPrefix: "AmazonDAXV3",
        uid: "dax-2017-04-19"
    },
    operations: {
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeType", "ReplicationFactor", "IamRoleArn" ],
                members: {
                    ClusterName: {},
                    NodeType: {},
                    Description: {},
                    ReplicationFactor: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S4"
                    },
                    SubnetGroupName: {},
                    SecurityGroupIds: {
                        shape: "S5"
                    },
                    PreferredMaintenanceWindow: {},
                    NotificationTopicArn: {},
                    IamRoleArn: {},
                    ParameterGroupName: {},
                    Tags: {
                        shape: "S6"
                    },
                    SSESpecification: {
                        type: "structure",
                        required: [ "Enabled" ],
                        members: {
                            Enabled: {
                                type: "boolean"
                            }
                        }
                    },
                    ClusterEndpointEncryptionType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sc"
                    }
                }
            }
        },
        CreateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "Sr"
                    }
                }
            }
        },
        CreateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName", "SubnetIds" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "Sv"
                    }
                }
            }
        },
        DecreaseReplicationFactor: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NewReplicationFactor" ],
                members: {
                    ClusterName: {},
                    NewReplicationFactor: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S4"
                    },
                    NodeIdsToRemove: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sc"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sc"
                    }
                }
            }
        },
        DeleteParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletionMessage: {}
                }
            }
        },
        DeleteSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DeletionMessage: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    ClusterNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    }
                }
            }
        },
        DescribeDefaultParameters: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Parameters: {
                        shape: "S1c"
                    }
                }
            }
        },
        DescribeEvents: {
            input: {
                type: "structure",
                members: {
                    SourceName: {},
                    SourceType: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Duration: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Events: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceName: {},
                                SourceType: {},
                                Message: {},
                                Date: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeParameterGroups: {
            input: {
                type: "structure",
                members: {
                    ParameterGroupNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ParameterGroups: {
                        type: "list",
                        member: {
                            shape: "Sr"
                        }
                    }
                }
            }
        },
        DescribeParameters: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName" ],
                members: {
                    ParameterGroupName: {},
                    Source: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Parameters: {
                        shape: "S1c"
                    }
                }
            }
        },
        DescribeSubnetGroups: {
            input: {
                type: "structure",
                members: {
                    SubnetGroupNames: {
                        type: "list",
                        member: {}
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SubnetGroups: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    }
                }
            }
        },
        IncreaseReplicationFactor: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NewReplicationFactor" ],
                members: {
                    ClusterName: {},
                    NewReplicationFactor: {
                        type: "integer"
                    },
                    AvailabilityZones: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sc"
                    }
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceName" ],
                members: {
                    ResourceName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    },
                    NextToken: {}
                }
            }
        },
        RebootNode: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeId" ],
                members: {
                    ClusterName: {},
                    NodeId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sc"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "Tags" ],
                members: {
                    ResourceName: {},
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceName", "TagKeys" ],
                members: {
                    ResourceName: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    Description: {},
                    PreferredMaintenanceWindow: {},
                    NotificationTopicArn: {},
                    NotificationTopicStatus: {},
                    ParameterGroupName: {},
                    SecurityGroupIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sc"
                    }
                }
            }
        },
        UpdateParameterGroup: {
            input: {
                type: "structure",
                required: [ "ParameterGroupName", "ParameterNameValues" ],
                members: {
                    ParameterGroupName: {},
                    ParameterNameValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ParameterName: {},
                                ParameterValue: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ParameterGroup: {
                        shape: "Sr"
                    }
                }
            }
        },
        UpdateSubnetGroup: {
            input: {
                type: "structure",
                required: [ "SubnetGroupName" ],
                members: {
                    SubnetGroupName: {},
                    Description: {},
                    SubnetIds: {
                        shape: "St"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SubnetGroup: {
                        shape: "Sv"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S5: {
            type: "list",
            member: {}
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sc: {
            type: "structure",
            members: {
                ClusterName: {},
                Description: {},
                ClusterArn: {},
                TotalNodes: {
                    type: "integer"
                },
                ActiveNodes: {
                    type: "integer"
                },
                NodeType: {},
                Status: {},
                ClusterDiscoveryEndpoint: {
                    shape: "Se"
                },
                NodeIdsToRemove: {
                    shape: "Sf"
                },
                Nodes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            NodeId: {},
                            Endpoint: {
                                shape: "Se"
                            },
                            NodeCreateTime: {
                                type: "timestamp"
                            },
                            AvailabilityZone: {},
                            NodeStatus: {},
                            ParameterGroupStatus: {}
                        }
                    }
                },
                PreferredMaintenanceWindow: {},
                NotificationConfiguration: {
                    type: "structure",
                    members: {
                        TopicArn: {},
                        TopicStatus: {}
                    }
                },
                SubnetGroup: {},
                SecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SecurityGroupIdentifier: {},
                            Status: {}
                        }
                    }
                },
                IamRoleArn: {},
                ParameterGroup: {
                    type: "structure",
                    members: {
                        ParameterGroupName: {},
                        ParameterApplyStatus: {},
                        NodeIdsToReboot: {
                            shape: "Sf"
                        }
                    }
                },
                SSEDescription: {
                    type: "structure",
                    members: {
                        Status: {}
                    }
                },
                ClusterEndpointEncryptionType: {}
            }
        },
        Se: {
            type: "structure",
            members: {
                Address: {},
                Port: {
                    type: "integer"
                },
                URL: {}
            }
        },
        Sf: {
            type: "list",
            member: {}
        },
        Sr: {
            type: "structure",
            members: {
                ParameterGroupName: {},
                Description: {}
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "structure",
            members: {
                SubnetGroupName: {},
                Description: {},
                VpcId: {},
                Subnets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SubnetIdentifier: {},
                            SubnetAvailabilityZone: {}
                        }
                    }
                }
            }
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ParameterName: {},
                    ParameterType: {},
                    ParameterValue: {},
                    NodeTypeSpecificValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                NodeType: {},
                                Value: {}
                            }
                        }
                    },
                    Description: {},
                    Source: {},
                    DataType: {},
                    AllowedValues: {},
                    IsModifiable: {},
                    ChangeType: {}
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["migrationhub"] = {};

AWS.MigrationHub = AWS.Service.defineService("migrationhub", [ "2017-05-31" ]);

AWS.apiLoader.services["migrationhub"]["2017-05-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-05-31",
        endpointPrefix: "mgh",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Migration Hub",
        serviceId: "Migration Hub",
        signatureVersion: "v4",
        targetPrefix: "AWSMigrationHub",
        uid: "AWSMigrationHub-2017-05-31"
    },
    operations: {
        AssociateCreatedArtifact: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "CreatedArtifact" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    CreatedArtifact: {
                        shape: "S4"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AssociateDiscoveredResource: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "DiscoveredResource" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    DiscoveredResource: {
                        shape: "Sa"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateProgressUpdateStream: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStreamName" ],
                members: {
                    ProgressUpdateStreamName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteProgressUpdateStream: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStreamName" ],
                members: {
                    ProgressUpdateStreamName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplicationState: {
            input: {
                type: "structure",
                required: [ "ApplicationId" ],
                members: {
                    ApplicationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationStatus: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeMigrationTask: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MigrationTask: {
                        type: "structure",
                        members: {
                            ProgressUpdateStream: {},
                            MigrationTaskName: {},
                            Task: {
                                shape: "Sq"
                            },
                            UpdateDateTime: {
                                type: "timestamp"
                            },
                            ResourceAttributeList: {
                                type: "list",
                                member: {
                                    shape: "Sv"
                                }
                            }
                        }
                    }
                }
            }
        },
        DisassociateCreatedArtifact: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "CreatedArtifactName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    CreatedArtifactName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateDiscoveredResource: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "ConfigurationId" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    ConfigurationId: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ImportMigrationTask: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListApplicationStates: {
            input: {
                type: "structure",
                members: {
                    ApplicationIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationStateList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                ApplicationStatus: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCreatedArtifacts: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    CreatedArtifactList: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            }
        },
        ListDiscoveredResources: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    DiscoveredResourceList: {
                        type: "list",
                        member: {
                            shape: "Sa"
                        }
                    }
                }
            }
        },
        ListMigrationTasks: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    MigrationTaskSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProgressUpdateStream: {},
                                MigrationTaskName: {},
                                Status: {},
                                ProgressPercent: {
                                    type: "integer"
                                },
                                StatusDetail: {},
                                UpdateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListProgressUpdateStreams: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressUpdateStreamSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ProgressUpdateStreamName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        NotifyApplicationState: {
            input: {
                type: "structure",
                required: [ "ApplicationId", "Status" ],
                members: {
                    ApplicationId: {},
                    Status: {},
                    UpdateDateTime: {
                        type: "timestamp"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        NotifyMigrationTaskState: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "Task", "UpdateDateTime", "NextUpdateSeconds" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    Task: {
                        shape: "Sq"
                    },
                    UpdateDateTime: {
                        type: "timestamp"
                    },
                    NextUpdateSeconds: {
                        type: "integer"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutResourceAttributes: {
            input: {
                type: "structure",
                required: [ "ProgressUpdateStream", "MigrationTaskName", "ResourceAttributeList" ],
                members: {
                    ProgressUpdateStream: {},
                    MigrationTaskName: {},
                    ResourceAttributeList: {
                        type: "list",
                        member: {
                            shape: "Sv"
                        }
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "ConfigurationId" ],
            members: {
                ConfigurationId: {},
                Description: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                StatusDetail: {},
                ProgressPercent: {
                    type: "integer"
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {}
            }
        }
    },
    paginators: {
        ListApplicationStates: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ApplicationStateList"
        },
        ListCreatedArtifacts: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CreatedArtifactList"
        },
        ListDiscoveredResources: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "DiscoveredResourceList"
        },
        ListMigrationTasks: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MigrationTaskSummaryList"
        },
        ListProgressUpdateStreams: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ProgressUpdateStreamSummaryList"
        }
    }
};

AWS.apiLoader.services["cloudhsmv2"] = {};

AWS.CloudHSMV2 = AWS.Service.defineService("cloudhsmv2", [ "2017-04-28" ]);

AWS.apiLoader.services["cloudhsmv2"]["2017-04-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-04-28",
        endpointPrefix: "cloudhsmv2",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "CloudHSM V2",
        serviceFullName: "AWS CloudHSM V2",
        serviceId: "CloudHSM V2",
        signatureVersion: "v4",
        signingName: "cloudhsm",
        targetPrefix: "BaldrApiService",
        uid: "cloudhsmv2-2017-04-28"
    },
    operations: {
        CopyBackupToRegion: {
            input: {
                type: "structure",
                required: [ "DestinationRegion", "BackupId" ],
                members: {
                    DestinationRegion: {},
                    BackupId: {},
                    TagList: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DestinationBackup: {
                        type: "structure",
                        members: {
                            CreateTimestamp: {
                                type: "timestamp"
                            },
                            SourceRegion: {},
                            SourceBackup: {},
                            SourceCluster: {}
                        }
                    }
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "HsmType", "SubnetIds" ],
                members: {
                    BackupRetentionPolicy: {
                        shape: "Sd"
                    },
                    HsmType: {},
                    SourceBackupId: {},
                    SubnetIds: {
                        type: "list",
                        member: {}
                    },
                    TagList: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sk"
                    }
                }
            }
        },
        CreateHsm: {
            input: {
                type: "structure",
                required: [ "ClusterId", "AvailabilityZone" ],
                members: {
                    ClusterId: {},
                    AvailabilityZone: {},
                    IpAddress: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hsm: {
                        shape: "Sn"
                    }
                }
            }
        },
        DeleteBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "S16"
                    }
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sk"
                    }
                }
            }
        },
        DeleteHsm: {
            input: {
                type: "structure",
                required: [ "ClusterId" ],
                members: {
                    ClusterId: {},
                    HsmId: {},
                    EniId: {},
                    EniIp: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HsmId: {}
                }
            }
        },
        DescribeBackups: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        shape: "S1g"
                    },
                    SortAscending: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backups: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeClusters: {
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "S1g"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Clusters: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        InitializeCluster: {
            input: {
                type: "structure",
                required: [ "ClusterId", "SignedCert", "TrustAnchor" ],
                members: {
                    ClusterId: {},
                    SignedCert: {},
                    TrustAnchor: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    State: {},
                    StateMessage: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceId" ],
                members: {
                    ResourceId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TagList" ],
                members: {
                    TagList: {
                        shape: "S4"
                    },
                    NextToken: {}
                }
            }
        },
        ModifyBackupAttributes: {
            input: {
                type: "structure",
                required: [ "BackupId", "NeverExpires" ],
                members: {
                    BackupId: {},
                    NeverExpires: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "S16"
                    }
                }
            }
        },
        ModifyCluster: {
            input: {
                type: "structure",
                required: [ "BackupRetentionPolicy", "ClusterId" ],
                members: {
                    BackupRetentionPolicy: {
                        shape: "Sd"
                    },
                    ClusterId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Cluster: {
                        shape: "Sk"
                    }
                }
            }
        },
        RestoreBackup: {
            input: {
                type: "structure",
                required: [ "BackupId" ],
                members: {
                    BackupId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Backup: {
                        shape: "S16"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagList" ],
                members: {
                    ResourceId: {},
                    TagList: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceId", "TagKeyList" ],
                members: {
                    ResourceId: {},
                    TagKeyList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                Type: {},
                Value: {}
            }
        },
        Sk: {
            type: "structure",
            members: {
                BackupPolicy: {},
                BackupRetentionPolicy: {
                    shape: "Sd"
                },
                ClusterId: {},
                CreateTimestamp: {
                    type: "timestamp"
                },
                Hsms: {
                    type: "list",
                    member: {
                        shape: "Sn"
                    }
                },
                HsmType: {},
                PreCoPassword: {},
                SecurityGroup: {},
                SourceBackupId: {},
                State: {},
                StateMessage: {},
                SubnetMapping: {
                    type: "map",
                    key: {},
                    value: {}
                },
                VpcId: {},
                Certificates: {
                    type: "structure",
                    members: {
                        ClusterCsr: {},
                        HsmCertificate: {},
                        AwsHardwareCertificate: {},
                        ManufacturerHardwareCertificate: {},
                        ClusterCertificate: {}
                    }
                },
                TagList: {
                    shape: "S4"
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "HsmId" ],
            members: {
                AvailabilityZone: {},
                ClusterId: {},
                SubnetId: {},
                EniId: {},
                EniIp: {},
                HsmId: {},
                State: {},
                StateMessage: {}
            }
        },
        S16: {
            type: "structure",
            required: [ "BackupId" ],
            members: {
                BackupId: {},
                BackupState: {},
                ClusterId: {},
                CreateTimestamp: {
                    type: "timestamp"
                },
                CopyTimestamp: {
                    type: "timestamp"
                },
                NeverExpires: {
                    type: "boolean"
                },
                SourceRegion: {},
                SourceBackup: {},
                SourceCluster: {},
                DeleteTimestamp: {
                    type: "timestamp"
                },
                TagList: {
                    shape: "S4"
                }
            }
        },
        S1g: {
            type: "map",
            key: {},
            value: {
                type: "list",
                member: {}
            }
        }
    },
    paginators: {
        DescribeBackups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        DescribeClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["glue"] = {};

AWS.Glue = AWS.Service.defineService("glue", [ "2017-03-31" ]);

AWS.apiLoader.services["glue"]["2017-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-03-31",
        endpointPrefix: "glue",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "AWS Glue",
        serviceId: "Glue",
        signatureVersion: "v4",
        targetPrefix: "AWSGlue",
        uid: "glue-2017-03-31"
    },
    operations: {
        BatchCreatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionInputList" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionInputList: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "S12"
                    }
                }
            }
        },
        BatchDeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionNameList" ],
                members: {
                    CatalogId: {},
                    ConnectionNameList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Succeeded: {
                        shape: "Sn"
                    },
                    Errors: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S14"
                        }
                    }
                }
            }
        },
        BatchDeletePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionsToDelete" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionsToDelete: {
                        type: "list",
                        member: {
                            shape: "S1c"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "S12"
                    }
                }
            }
        },
        BatchDeleteTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TablesToDelete" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TablesToDelete: {
                        type: "list",
                        member: {}
                    },
                    TransactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableName: {},
                                ErrorDetail: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchDeleteTableVersion: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "VersionIds" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    VersionIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TableName: {},
                                VersionId: {},
                                ErrorDetail: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchGetBlueprints: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        type: "list",
                        member: {}
                    },
                    IncludeBlueprint: {
                        type: "boolean"
                    },
                    IncludeParameterSpec: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blueprints: {
                        type: "list",
                        member: {
                            shape: "S1w"
                        }
                    },
                    MissingBlueprints: {
                        shape: "S24"
                    }
                }
            }
        },
        BatchGetCrawlers: {
            input: {
                type: "structure",
                required: [ "CrawlerNames" ],
                members: {
                    CrawlerNames: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawlers: {
                        shape: "S28"
                    },
                    CrawlersNotFound: {
                        shape: "S26"
                    }
                }
            }
        },
        BatchGetCustomEntityTypes: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "S3r"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomEntityTypes: {
                        shape: "S3t"
                    },
                    CustomEntityTypesNotFound: {
                        shape: "S3r"
                    }
                }
            }
        },
        BatchGetDataQualityResult: {
            input: {
                type: "structure",
                required: [ "ResultIds" ],
                members: {
                    ResultIds: {
                        shape: "S3x"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResultId: {},
                                Score: {
                                    type: "double"
                                },
                                DataSource: {
                                    shape: "S43"
                                },
                                RulesetName: {},
                                EvaluationContext: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                CompletedOn: {
                                    type: "timestamp"
                                },
                                JobName: {},
                                JobRunId: {},
                                RulesetEvaluationRunId: {},
                                RuleResults: {
                                    shape: "S46"
                                },
                                AnalyzerResults: {
                                    shape: "S4b"
                                },
                                Observations: {
                                    shape: "S4d"
                                }
                            }
                        }
                    },
                    ResultsNotFound: {
                        shape: "S3x"
                    }
                }
            }
        },
        BatchGetDevEndpoints: {
            input: {
                type: "structure",
                required: [ "DevEndpointNames" ],
                members: {
                    DevEndpointNames: {
                        shape: "S4k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpoints: {
                        shape: "S4m"
                    },
                    DevEndpointsNotFound: {
                        shape: "S4k"
                    }
                }
            }
        },
        BatchGetJobs: {
            input: {
                type: "structure",
                required: [ "JobNames" ],
                members: {
                    JobNames: {
                        shape: "S4w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        shape: "S4y"
                    },
                    JobsNotFound: {
                        shape: "S4w"
                    }
                }
            }
        },
        BatchGetPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionsToGet" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionsToGet: {
                        shape: "Sad"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partitions: {
                        shape: "Saf"
                    },
                    UnprocessedKeys: {
                        shape: "Sad"
                    }
                }
            }
        },
        BatchGetTableOptimizer: {
            input: {
                type: "structure",
                required: [ "Entries" ],
                members: {
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                catalogId: {},
                                databaseName: {},
                                tableName: {},
                                type: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableOptimizers: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                catalogId: {},
                                databaseName: {},
                                tableName: {},
                                tableOptimizer: {
                                    shape: "Saq"
                                }
                            }
                        }
                    },
                    Failures: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                error: {
                                    shape: "S14"
                                },
                                catalogId: {},
                                databaseName: {},
                                tableName: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        BatchGetTriggers: {
            input: {
                type: "structure",
                required: [ "TriggerNames" ],
                members: {
                    TriggerNames: {
                        shape: "Sb1"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Triggers: {
                        shape: "Sb3"
                    },
                    TriggersNotFound: {
                        shape: "Sb1"
                    }
                }
            }
        },
        BatchGetWorkflows: {
            input: {
                type: "structure",
                required: [ "Names" ],
                members: {
                    Names: {
                        shape: "Sbl"
                    },
                    IncludeGraph: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workflows: {
                        type: "list",
                        member: {
                            shape: "Sbo"
                        }
                    },
                    MissingWorkflows: {
                        shape: "Sbl"
                    }
                }
            }
        },
        BatchStopJobRun: {
            input: {
                type: "structure",
                required: [ "JobName", "JobRunIds" ],
                members: {
                    JobName: {},
                    JobRunIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfulSubmissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobName: {},
                                JobRunId: {}
                            }
                        }
                    },
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                JobName: {},
                                JobRunId: {},
                                ErrorDetail: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                }
            }
        },
        BatchUpdatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "Entries" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Entries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PartitionValueList", "PartitionInput" ],
                            members: {
                                PartitionValueList: {
                                    shape: "Scm"
                                },
                                PartitionInput: {
                                    shape: "S5"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PartitionValueList: {
                                    shape: "Scm"
                                },
                                ErrorDetail: {
                                    shape: "S14"
                                }
                            }
                        }
                    }
                }
            }
        },
        CancelDataQualityRuleRecommendationRun: {
            input: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelDataQualityRulesetEvaluationRun: {
            input: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelMLTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "TaskRunId" ],
                members: {
                    TransformId: {},
                    TaskRunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {},
                    TaskRunId: {},
                    Status: {}
                }
            }
        },
        CancelStatement: {
            input: {
                type: "structure",
                required: [ "SessionId", "Id" ],
                members: {
                    SessionId: {},
                    Id: {
                        type: "integer"
                    },
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CheckSchemaVersionValidity: {
            input: {
                type: "structure",
                required: [ "DataFormat", "SchemaDefinition" ],
                members: {
                    DataFormat: {},
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Valid: {
                        type: "boolean"
                    },
                    Error: {}
                }
            }
        },
        CreateBlueprint: {
            input: {
                type: "structure",
                required: [ "Name", "BlueprintLocation" ],
                members: {
                    Name: {},
                    Description: {},
                    BlueprintLocation: {},
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        CreateClassifier: {
            input: {
                type: "structure",
                members: {
                    GrokClassifier: {
                        type: "structure",
                        required: [ "Classification", "Name", "GrokPattern" ],
                        members: {
                            Classification: {},
                            Name: {},
                            GrokPattern: {},
                            CustomPatterns: {}
                        }
                    },
                    XMLClassifier: {
                        type: "structure",
                        required: [ "Classification", "Name" ],
                        members: {
                            Classification: {},
                            Name: {},
                            RowTag: {}
                        }
                    },
                    JsonClassifier: {
                        type: "structure",
                        required: [ "Name", "JsonPath" ],
                        members: {
                            Name: {},
                            JsonPath: {}
                        }
                    },
                    CsvClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Delimiter: {},
                            QuoteSymbol: {},
                            ContainsHeader: {},
                            Header: {
                                shape: "Sdo"
                            },
                            DisableValueTrimming: {
                                type: "boolean"
                            },
                            AllowSingleColumn: {
                                type: "boolean"
                            },
                            CustomDatatypeConfigured: {
                                type: "boolean"
                            },
                            CustomDatatypes: {
                                shape: "Sdp"
                            },
                            Serde: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionInput" ],
                members: {
                    CatalogId: {},
                    ConnectionInput: {
                        shape: "Sdt"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCrawler: {
            input: {
                type: "structure",
                required: [ "Name", "Role", "Targets" ],
                members: {
                    Name: {},
                    Role: {},
                    DatabaseName: {},
                    Description: {},
                    Targets: {
                        shape: "S2b"
                    },
                    Schedule: {},
                    Classifiers: {
                        shape: "S32"
                    },
                    TablePrefix: {},
                    SchemaChangePolicy: {
                        shape: "S35"
                    },
                    RecrawlPolicy: {
                        shape: "S33"
                    },
                    LineageConfiguration: {
                        shape: "S38"
                    },
                    LakeFormationConfiguration: {
                        shape: "S3o"
                    },
                    Configuration: {},
                    CrawlerSecurityConfiguration: {},
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateCustomEntityType: {
            input: {
                type: "structure",
                required: [ "Name", "RegexString" ],
                members: {
                    Name: {},
                    RegexString: {},
                    ContextWords: {
                        shape: "S3v"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        CreateDataQualityRuleset: {
            input: {
                type: "structure",
                required: [ "Name", "Ruleset" ],
                members: {
                    Name: {},
                    Description: {},
                    Ruleset: {},
                    Tags: {
                        shape: "Sd7"
                    },
                    TargetTable: {
                        shape: "Se7"
                    },
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            },
            idempotent: true
        },
        CreateDatabase: {
            input: {
                type: "structure",
                required: [ "DatabaseInput" ],
                members: {
                    CatalogId: {},
                    DatabaseInput: {
                        shape: "Sea"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "RoleArn" ],
                members: {
                    EndpointName: {},
                    RoleArn: {},
                    SecurityGroupIds: {
                        shape: "S4p"
                    },
                    SubnetId: {},
                    PublicKey: {},
                    PublicKeys: {
                        shape: "S4t"
                    },
                    NumberOfNodes: {
                        type: "integer"
                    },
                    WorkerType: {},
                    GlueVersion: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    ExtraPythonLibsS3Path: {},
                    ExtraJarsS3Path: {},
                    SecurityConfiguration: {},
                    Tags: {
                        shape: "Sd7"
                    },
                    Arguments: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointName: {},
                    Status: {},
                    SecurityGroupIds: {
                        shape: "S4p"
                    },
                    SubnetId: {},
                    RoleArn: {},
                    YarnEndpointAddress: {},
                    ZeppelinRemoteSparkInterpreterPort: {
                        type: "integer"
                    },
                    NumberOfNodes: {
                        type: "integer"
                    },
                    WorkerType: {},
                    GlueVersion: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    AvailabilityZone: {},
                    VpcId: {},
                    ExtraPythonLibsS3Path: {},
                    ExtraJarsS3Path: {},
                    FailureReason: {},
                    SecurityConfiguration: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    },
                    Arguments: {
                        shape: "S4u"
                    }
                }
            }
        },
        CreateJob: {
            input: {
                type: "structure",
                required: [ "Name", "Role", "Command" ],
                members: {
                    Name: {},
                    Description: {},
                    LogUri: {},
                    Role: {},
                    ExecutionProperty: {
                        shape: "S52"
                    },
                    Command: {
                        shape: "S54"
                    },
                    DefaultArguments: {
                        shape: "S58"
                    },
                    NonOverridableArguments: {
                        shape: "S58"
                    },
                    Connections: {
                        shape: "S59"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    AllocatedCapacity: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "double"
                    },
                    SecurityConfiguration: {},
                    Tags: {
                        shape: "Sd7"
                    },
                    NotificationProperty: {
                        shape: "S5d"
                    },
                    GlueVersion: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    WorkerType: {},
                    CodeGenConfigurationNodes: {
                        shape: "S5f"
                    },
                    ExecutionClass: {},
                    SourceControlDetails: {
                        shape: "Sa9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        CreateMLTransform: {
            input: {
                type: "structure",
                required: [ "Name", "InputRecordTables", "Parameters", "Role" ],
                members: {
                    Name: {},
                    Description: {},
                    InputRecordTables: {
                        shape: "Ser"
                    },
                    Parameters: {
                        shape: "Ses"
                    },
                    Role: {},
                    GlueVersion: {},
                    MaxCapacity: {
                        type: "double"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    },
                    TransformEncryption: {
                        shape: "Sew"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {}
                }
            }
        },
        CreatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionInput: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreatePartitionIndex: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionIndex" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionIndex: {
                        shape: "Sf3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryName" ],
                members: {
                    RegistryName: {},
                    Description: {},
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryArn: {},
                    RegistryName: {},
                    Description: {},
                    Tags: {
                        shape: "Sd7"
                    }
                }
            }
        },
        CreateSchema: {
            input: {
                type: "structure",
                required: [ "SchemaName", "DataFormat" ],
                members: {
                    RegistryId: {
                        shape: "Sf9"
                    },
                    SchemaName: {},
                    DataFormat: {},
                    Compatibility: {},
                    Description: {},
                    Tags: {
                        shape: "Sd7"
                    },
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    SchemaName: {},
                    SchemaArn: {},
                    Description: {},
                    DataFormat: {},
                    Compatibility: {},
                    SchemaCheckpoint: {
                        type: "long"
                    },
                    LatestSchemaVersion: {
                        type: "long"
                    },
                    NextSchemaVersion: {
                        type: "long"
                    },
                    SchemaStatus: {},
                    Tags: {
                        shape: "Sd7"
                    },
                    SchemaVersionId: {},
                    SchemaVersionStatus: {}
                }
            }
        },
        CreateScript: {
            input: {
                type: "structure",
                members: {
                    DagNodes: {
                        shape: "Sfg"
                    },
                    DagEdges: {
                        shape: "Sfo"
                    },
                    Language: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PythonScript: {},
                    ScalaCode: {}
                }
            }
        },
        CreateSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name", "EncryptionConfiguration" ],
                members: {
                    Name: {},
                    EncryptionConfiguration: {
                        shape: "Sfv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateSession: {
            input: {
                type: "structure",
                required: [ "Id", "Role", "Command" ],
                members: {
                    Id: {},
                    Description: {},
                    Role: {},
                    Command: {
                        shape: "Sg7"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    IdleTimeout: {
                        type: "integer"
                    },
                    DefaultArguments: {
                        shape: "Sg8"
                    },
                    Connections: {
                        shape: "S59"
                    },
                    MaxCapacity: {
                        type: "double"
                    },
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    WorkerType: {},
                    SecurityConfiguration: {},
                    GlueVersion: {},
                    Tags: {
                        shape: "Sd7"
                    },
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Session: {
                        shape: "Sgb"
                    }
                }
            }
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableInput: {
                        shape: "Sgg"
                    },
                    PartitionIndexes: {
                        type: "list",
                        member: {
                            shape: "Sf3"
                        }
                    },
                    TransactionId: {},
                    OpenTableFormatInput: {
                        type: "structure",
                        members: {
                            IcebergInput: {
                                type: "structure",
                                required: [ "MetadataOperation" ],
                                members: {
                                    MetadataOperation: {},
                                    Version: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateTableOptimizer: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "Type", "TableOptimizerConfiguration" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Type: {},
                    TableOptimizerConfiguration: {
                        shape: "Sar"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateTrigger: {
            input: {
                type: "structure",
                required: [ "Name", "Type", "Actions" ],
                members: {
                    Name: {},
                    WorkflowName: {},
                    Type: {},
                    Schedule: {},
                    Predicate: {
                        shape: "Sba"
                    },
                    Actions: {
                        shape: "Sb8"
                    },
                    Description: {},
                    StartOnCreation: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sd7"
                    },
                    EventBatchingCondition: {
                        shape: "Sbh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        CreateUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionInput: {
                        shape: "Sgv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    DefaultRunProperties: {
                        shape: "Sbp"
                    },
                    Tags: {
                        shape: "Sd7"
                    },
                    MaxConcurrentRuns: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        DeleteBlueprint: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        DeleteClassifier: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteColumnStatisticsForPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues", "ColumnName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    ColumnName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteColumnStatisticsForTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "ColumnName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    ColumnName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteConnection: {
            input: {
                type: "structure",
                required: [ "ConnectionName" ],
                members: {
                    CatalogId: {},
                    ConnectionName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCustomEntityType: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        DeleteDataQualityRuleset: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDatabase: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CatalogId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteJob: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        DeleteMLTransform: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {}
                }
            }
        },
        DeletePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePartitionIndex: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "IndexName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    IndexName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryId" ],
                members: {
                    RegistryId: {
                        shape: "Sf9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    Status: {}
                }
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                members: {
                    PolicyHashCondition: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSchema: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    Status: {}
                }
            }
        },
        DeleteSchemaVersions: {
            input: {
                type: "structure",
                required: [ "SchemaId", "Versions" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    Versions: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionErrors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                VersionNumber: {
                                    type: "long"
                                },
                                ErrorDetails: {
                                    type: "structure",
                                    members: {
                                        ErrorCode: {},
                                        ErrorMessage: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        DeleteSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSession: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "Name" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Name: {},
                    TransactionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTableOptimizer: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "Type" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTableVersion: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "VersionId" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    VersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        DeleteUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        GetBlueprint: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    IncludeBlueprint: {
                        type: "boolean"
                    },
                    IncludeParameterSpec: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blueprint: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetBlueprintRun: {
            input: {
                type: "structure",
                required: [ "BlueprintName", "RunId" ],
                members: {
                    BlueprintName: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BlueprintRun: {
                        shape: "Siu"
                    }
                }
            }
        },
        GetBlueprintRuns: {
            input: {
                type: "structure",
                required: [ "BlueprintName" ],
                members: {
                    BlueprintName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BlueprintRuns: {
                        type: "list",
                        member: {
                            shape: "Siu"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCatalogImportStatus: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImportStatus: {
                        type: "structure",
                        members: {
                            ImportCompleted: {
                                type: "boolean"
                            },
                            ImportTime: {
                                type: "timestamp"
                            },
                            ImportedBy: {}
                        }
                    }
                }
            }
        },
        GetClassifier: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Classifier: {
                        shape: "Sj7"
                    }
                }
            }
        },
        GetClassifiers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Classifiers: {
                        type: "list",
                        member: {
                            shape: "Sj7"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetColumnStatisticsForPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues", "ColumnNames" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    ColumnNames: {
                        shape: "Sjh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsList: {
                        shape: "Sjj"
                    },
                    Errors: {
                        shape: "Sk1"
                    }
                }
            }
        },
        GetColumnStatisticsForTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "ColumnNames" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    ColumnNames: {
                        shape: "Sjh"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsList: {
                        shape: "Sjj"
                    },
                    Errors: {
                        shape: "Sk1"
                    }
                }
            }
        },
        GetColumnStatisticsTaskRun: {
            input: {
                type: "structure",
                required: [ "ColumnStatisticsTaskRunId" ],
                members: {
                    ColumnStatisticsTaskRunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsTaskRun: {
                        shape: "Sk7"
                    }
                }
            }
        },
        GetColumnStatisticsTaskRuns: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsTaskRuns: {
                        type: "list",
                        member: {
                            shape: "Sk7"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetConnection: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CatalogId: {},
                    Name: {},
                    HidePassword: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connection: {
                        shape: "Ski"
                    }
                }
            }
        },
        GetConnections: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    Filter: {
                        type: "structure",
                        members: {
                            MatchCriteria: {
                                shape: "Sdv"
                            },
                            ConnectionType: {}
                        }
                    },
                    HidePassword: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConnectionList: {
                        type: "list",
                        member: {
                            shape: "Ski"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawler: {
                        shape: "S29"
                    }
                }
            }
        },
        GetCrawlerMetrics: {
            input: {
                type: "structure",
                members: {
                    CrawlerNameList: {
                        shape: "S26"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CrawlerMetricsList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CrawlerName: {},
                                TimeLeftSeconds: {
                                    type: "double"
                                },
                                StillEstimating: {
                                    type: "boolean"
                                },
                                LastRuntimeSeconds: {
                                    type: "double"
                                },
                                MedianRuntimeSeconds: {
                                    type: "double"
                                },
                                TablesCreated: {
                                    type: "integer"
                                },
                                TablesUpdated: {
                                    type: "integer"
                                },
                                TablesDeleted: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetCrawlers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawlers: {
                        shape: "S28"
                    },
                    NextToken: {}
                }
            }
        },
        GetCustomEntityType: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    RegexString: {},
                    ContextWords: {
                        shape: "S3v"
                    }
                }
            }
        },
        GetDataCatalogEncryptionSettings: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataCatalogEncryptionSettings: {
                        shape: "Skz"
                    }
                }
            }
        },
        GetDataQualityResult: {
            input: {
                type: "structure",
                required: [ "ResultId" ],
                members: {
                    ResultId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResultId: {},
                    Score: {
                        type: "double"
                    },
                    DataSource: {
                        shape: "S43"
                    },
                    RulesetName: {},
                    EvaluationContext: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    JobName: {},
                    JobRunId: {},
                    RulesetEvaluationRunId: {},
                    RuleResults: {
                        shape: "S46"
                    },
                    AnalyzerResults: {
                        shape: "S4b"
                    },
                    Observations: {
                        shape: "S4d"
                    }
                }
            }
        },
        GetDataQualityRuleRecommendationRun: {
            input: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {},
                    DataSource: {
                        shape: "S43"
                    },
                    Role: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    Status: {},
                    ErrorString: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    ExecutionTime: {
                        type: "integer"
                    },
                    RecommendedRuleset: {},
                    CreatedRulesetName: {}
                }
            }
        },
        GetDataQualityRuleset: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    Ruleset: {},
                    TargetTable: {
                        shape: "Se7"
                    },
                    CreatedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    RecommendationRunId: {}
                }
            }
        },
        GetDataQualityRulesetEvaluationRun: {
            input: {
                type: "structure",
                required: [ "RunId" ],
                members: {
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {},
                    DataSource: {
                        shape: "S43"
                    },
                    Role: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    AdditionalRunOptions: {
                        shape: "Slb"
                    },
                    Status: {},
                    ErrorString: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    ExecutionTime: {
                        type: "integer"
                    },
                    RulesetNames: {
                        shape: "Slc"
                    },
                    ResultIds: {
                        type: "list",
                        member: {}
                    },
                    AdditionalDataSources: {
                        shape: "Sle"
                    }
                }
            }
        },
        GetDatabase: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    CatalogId: {},
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Database: {
                        shape: "Slh"
                    }
                }
            }
        },
        GetDatabases: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceShareType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DatabaseList" ],
                members: {
                    DatabaseList: {
                        type: "list",
                        member: {
                            shape: "Slh"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetDataflowGraph: {
            input: {
                type: "structure",
                members: {
                    PythonScript: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DagNodes: {
                        shape: "Sfg"
                    },
                    DagEdges: {
                        shape: "Sfo"
                    }
                }
            }
        },
        GetDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpoint: {
                        shape: "S4n"
                    }
                }
            }
        },
        GetDevEndpoints: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpoints: {
                        shape: "S4m"
                    },
                    NextToken: {}
                }
            }
        },
        GetJob: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S4z"
                    }
                }
            }
        },
        GetJobBookmark: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobBookmarkEntry: {
                        shape: "Slz"
                    }
                }
            }
        },
        GetJobRun: {
            input: {
                type: "structure",
                required: [ "JobName", "RunId" ],
                members: {
                    JobName: {},
                    RunId: {},
                    PredecessorsIncluded: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobRun: {
                        shape: "Sc0"
                    }
                }
            }
        },
        GetJobRuns: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobRuns: {
                        shape: "Sbz"
                    },
                    NextToken: {}
                }
            }
        },
        GetJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        shape: "S4y"
                    },
                    NextToken: {}
                }
            }
        },
        GetMLTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "TaskRunId" ],
                members: {
                    TransformId: {},
                    TaskRunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {},
                    TaskRunId: {},
                    Status: {},
                    LogGroupName: {},
                    Properties: {
                        shape: "Sm9"
                    },
                    ErrorString: {},
                    StartedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    CompletedOn: {
                        type: "timestamp"
                    },
                    ExecutionTime: {
                        type: "integer"
                    }
                }
            }
        },
        GetMLTaskRuns: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        type: "structure",
                        members: {
                            TaskRunType: {},
                            Status: {},
                            StartedBefore: {
                                type: "timestamp"
                            },
                            StartedAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    Sort: {
                        type: "structure",
                        required: [ "Column", "SortDirection" ],
                        members: {
                            Column: {},
                            SortDirection: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TransformId: {},
                                TaskRunId: {},
                                Status: {},
                                LogGroupName: {},
                                Properties: {
                                    shape: "Sm9"
                                },
                                ErrorString: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                LastModifiedOn: {
                                    type: "timestamp"
                                },
                                CompletedOn: {
                                    type: "timestamp"
                                },
                                ExecutionTime: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetMLTransform: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {},
                    Name: {},
                    Description: {},
                    Status: {},
                    CreatedOn: {
                        type: "timestamp"
                    },
                    LastModifiedOn: {
                        type: "timestamp"
                    },
                    InputRecordTables: {
                        shape: "Ser"
                    },
                    Parameters: {
                        shape: "Ses"
                    },
                    EvaluationMetrics: {
                        shape: "Sms"
                    },
                    LabelCount: {
                        type: "integer"
                    },
                    Schema: {
                        shape: "Smz"
                    },
                    Role: {},
                    GlueVersion: {},
                    MaxCapacity: {
                        type: "double"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    },
                    TransformEncryption: {
                        shape: "Sew"
                    }
                }
            }
        },
        GetMLTransforms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        shape: "Sn2"
                    },
                    Sort: {
                        shape: "Sn3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Transforms" ],
                members: {
                    Transforms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TransformId: {},
                                Name: {},
                                Description: {},
                                Status: {},
                                CreatedOn: {
                                    type: "timestamp"
                                },
                                LastModifiedOn: {
                                    type: "timestamp"
                                },
                                InputRecordTables: {
                                    shape: "Ser"
                                },
                                Parameters: {
                                    shape: "Ses"
                                },
                                EvaluationMetrics: {
                                    shape: "Sms"
                                },
                                LabelCount: {
                                    type: "integer"
                                },
                                Schema: {
                                    shape: "Smz"
                                },
                                Role: {},
                                GlueVersion: {},
                                MaxCapacity: {
                                    type: "double"
                                },
                                WorkerType: {},
                                NumberOfWorkers: {
                                    type: "integer"
                                },
                                Timeout: {
                                    type: "integer"
                                },
                                MaxRetries: {
                                    type: "integer"
                                },
                                TransformEncryption: {
                                    shape: "Sew"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetMapping: {
            input: {
                type: "structure",
                required: [ "Source" ],
                members: {
                    Source: {
                        shape: "Sn9"
                    },
                    Sinks: {
                        shape: "Sna"
                    },
                    Location: {
                        shape: "Snb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Mapping" ],
                members: {
                    Mapping: {
                        shape: "Snd"
                    }
                }
            }
        },
        GetPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partition: {
                        shape: "Sag"
                    }
                }
            }
        },
        GetPartitionIndexes: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PartitionIndexDescriptorList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "IndexName", "Keys", "IndexStatus" ],
                            members: {
                                IndexName: {},
                                Keys: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "Name", "Type" ],
                                        members: {
                                            Name: {},
                                            Type: {}
                                        }
                                    }
                                },
                                IndexStatus: {},
                                BackfillErrors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Code: {},
                                            Partitions: {
                                                type: "list",
                                                member: {
                                                    shape: "S1c"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetPartitions: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Expression: {},
                    NextToken: {},
                    Segment: {
                        shape: "Snw"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    ExcludeColumnSchema: {
                        type: "boolean"
                    },
                    TransactionId: {},
                    QueryAsOfTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partitions: {
                        shape: "Saf"
                    },
                    NextToken: {}
                }
            }
        },
        GetPlan: {
            input: {
                type: "structure",
                required: [ "Mapping", "Source" ],
                members: {
                    Mapping: {
                        shape: "Snd"
                    },
                    Source: {
                        shape: "Sn9"
                    },
                    Sinks: {
                        shape: "Sna"
                    },
                    Location: {
                        shape: "Snb"
                    },
                    Language: {},
                    AdditionalPlanOptionsMap: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PythonScript: {},
                    ScalaCode: {}
                }
            }
        },
        GetRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryId" ],
                members: {
                    RegistryId: {
                        shape: "Sf9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    Description: {},
                    Status: {},
                    CreatedTime: {},
                    UpdatedTime: {}
                }
            }
        },
        GetResourcePolicies: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GetResourcePoliciesResponseList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PolicyInJson: {},
                                PolicyHash: {},
                                CreateTime: {
                                    type: "timestamp"
                                },
                                UpdateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyInJson: {},
                    PolicyHash: {},
                    CreateTime: {
                        type: "timestamp"
                    },
                    UpdateTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetSchema: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {},
                    SchemaName: {},
                    SchemaArn: {},
                    Description: {},
                    DataFormat: {},
                    Compatibility: {},
                    SchemaCheckpoint: {
                        type: "long"
                    },
                    LatestSchemaVersion: {
                        type: "long"
                    },
                    NextSchemaVersion: {
                        type: "long"
                    },
                    SchemaStatus: {},
                    CreatedTime: {},
                    UpdatedTime: {}
                }
            }
        },
        GetSchemaByDefinition: {
            input: {
                type: "structure",
                required: [ "SchemaId", "SchemaDefinition" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionId: {},
                    SchemaArn: {},
                    DataFormat: {},
                    Status: {},
                    CreatedTime: {}
                }
            }
        },
        GetSchemaVersion: {
            input: {
                type: "structure",
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaVersionId: {},
                    SchemaVersionNumber: {
                        shape: "Soj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionId: {},
                    SchemaDefinition: {},
                    DataFormat: {},
                    SchemaArn: {},
                    VersionNumber: {
                        type: "long"
                    },
                    Status: {},
                    CreatedTime: {}
                }
            }
        },
        GetSchemaVersionsDiff: {
            input: {
                type: "structure",
                required: [ "SchemaId", "FirstSchemaVersionNumber", "SecondSchemaVersionNumber", "SchemaDiffType" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    FirstSchemaVersionNumber: {
                        shape: "Soj"
                    },
                    SecondSchemaVersionNumber: {
                        shape: "Soj"
                    },
                    SchemaDiffType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Diff: {}
                }
            }
        },
        GetSecurityConfiguration: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityConfiguration: {
                        shape: "Sos"
                    }
                }
            }
        },
        GetSecurityConfigurations: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityConfigurations: {
                        type: "list",
                        member: {
                            shape: "Sos"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSession: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Session: {
                        shape: "Sgb"
                    }
                }
            }
        },
        GetStatement: {
            input: {
                type: "structure",
                required: [ "SessionId", "Id" ],
                members: {
                    SessionId: {},
                    Id: {
                        type: "integer"
                    },
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Statement: {
                        shape: "Sp0"
                    }
                }
            }
        },
        GetTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "Name" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Name: {},
                    TransactionId: {},
                    QueryAsOfTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "Sp7"
                    }
                }
            }
        },
        GetTableOptimizer: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "Type" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    TableOptimizer: {
                        shape: "Saq"
                    }
                }
            }
        },
        GetTableVersion: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    VersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TableVersion: {
                        shape: "Spd"
                    }
                }
            }
        },
        GetTableVersions: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableVersions: {
                        type: "list",
                        member: {
                            shape: "Spd"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetTables: {
            input: {
                type: "structure",
                required: [ "DatabaseName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Expression: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    TransactionId: {},
                    QueryAsOfTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TableList: {
                        shape: "Spk"
                    },
                    NextToken: {}
                }
            }
        },
        GetTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sd7"
                    }
                }
            }
        },
        GetTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Trigger: {
                        shape: "Sb4"
                    }
                }
            }
        },
        GetTriggers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    DependentJobName: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Triggers: {
                        shape: "Sb3"
                    },
                    NextToken: {}
                }
            }
        },
        GetUnfilteredPartitionMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "PartitionValues", "SupportedPermissionTypes" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    AuditContext: {
                        shape: "Sps"
                    },
                    SupportedPermissionTypes: {
                        shape: "Spv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Partition: {
                        shape: "Sag"
                    },
                    AuthorizedColumns: {
                        shape: "Sn"
                    },
                    IsRegisteredWithLakeFormation: {
                        type: "boolean"
                    }
                }
            }
        },
        GetUnfilteredPartitionsMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "SupportedPermissionTypes" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Expression: {},
                    AuditContext: {
                        shape: "Sps"
                    },
                    SupportedPermissionTypes: {
                        shape: "Spv"
                    },
                    NextToken: {},
                    Segment: {
                        shape: "Snw"
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UnfilteredPartitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Partition: {
                                    shape: "Sag"
                                },
                                AuthorizedColumns: {
                                    shape: "Sn"
                                },
                                IsRegisteredWithLakeFormation: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetUnfilteredTableMetadata: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "Name", "SupportedPermissionTypes" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Name: {},
                    AuditContext: {
                        shape: "Sps"
                    },
                    SupportedPermissionTypes: {
                        shape: "Spv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Table: {
                        shape: "Sp7"
                    },
                    AuthorizedColumns: {
                        shape: "Sn"
                    },
                    IsRegisteredWithLakeFormation: {
                        type: "boolean"
                    },
                    CellFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ColumnName: {},
                                RowFilterExpression: {}
                            }
                        }
                    }
                }
            }
        },
        GetUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionName" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserDefinedFunction: {
                        shape: "Sq8"
                    }
                }
            }
        },
        GetUserDefinedFunctions: {
            input: {
                type: "structure",
                required: [ "Pattern" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    Pattern: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserDefinedFunctions: {
                        type: "list",
                        member: {
                            shape: "Sq8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    IncludeGraph: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workflow: {
                        shape: "Sbo"
                    }
                }
            }
        },
        GetWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {},
                    RunId: {},
                    IncludeGraph: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Run: {
                        shape: "Sbq"
                    }
                }
            }
        },
        GetWorkflowRunProperties: {
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunProperties: {
                        shape: "Sbp"
                    }
                }
            }
        },
        GetWorkflowRuns: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    IncludeGraph: {
                        type: "boolean"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Runs: {
                        type: "list",
                        member: {
                            shape: "Sbq"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ImportCatalogToGlue: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListBlueprints: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Blueprints: {
                        shape: "S24"
                    },
                    NextToken: {}
                }
            }
        },
        ListColumnStatisticsTaskRuns: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsTaskRunIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListCrawlers: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CrawlerNames: {
                        shape: "S26"
                    },
                    NextToken: {}
                }
            }
        },
        ListCrawls: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FieldName: {},
                                FilterOperator: {},
                                FieldValue: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Crawls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CrawlId: {},
                                State: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                Summary: {},
                                ErrorMessage: {},
                                LogGroup: {},
                                LogStream: {},
                                MessagePrefix: {},
                                DPUHour: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomEntityTypes: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomEntityTypes: {
                        shape: "S3t"
                    },
                    NextToken: {}
                }
            }
        },
        ListDataQualityResults: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            DataSource: {
                                shape: "S43"
                            },
                            JobName: {},
                            JobRunId: {},
                            StartedAfter: {
                                type: "timestamp"
                            },
                            StartedBefore: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Results" ],
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResultId: {},
                                DataSource: {
                                    shape: "S43"
                                },
                                JobName: {},
                                JobRunId: {},
                                StartedOn: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataQualityRuleRecommendationRuns: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        required: [ "DataSource" ],
                        members: {
                            DataSource: {
                                shape: "S43"
                            },
                            StartedBefore: {
                                type: "timestamp"
                            },
                            StartedAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Runs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RunId: {},
                                Status: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                DataSource: {
                                    shape: "S43"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataQualityRulesetEvaluationRuns: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        required: [ "DataSource" ],
                        members: {
                            DataSource: {
                                shape: "S43"
                            },
                            StartedBefore: {
                                type: "timestamp"
                            },
                            StartedAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Runs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RunId: {},
                                Status: {},
                                StartedOn: {
                                    type: "timestamp"
                                },
                                DataSource: {
                                    shape: "S43"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataQualityRulesets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        type: "structure",
                        members: {
                            Name: {},
                            Description: {},
                            CreatedBefore: {
                                type: "timestamp"
                            },
                            CreatedAfter: {
                                type: "timestamp"
                            },
                            LastModifiedBefore: {
                                type: "timestamp"
                            },
                            LastModifiedAfter: {
                                type: "timestamp"
                            },
                            TargetTable: {
                                shape: "Se7"
                            }
                        }
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rulesets: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Description: {},
                                CreatedOn: {
                                    type: "timestamp"
                                },
                                LastModifiedOn: {
                                    type: "timestamp"
                                },
                                TargetTable: {
                                    shape: "Se7"
                                },
                                RecommendationRunId: {},
                                RuleCount: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevEndpoints: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DevEndpointNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobNames: {
                        shape: "S4w"
                    },
                    NextToken: {}
                }
            }
        },
        ListMLTransforms: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Filter: {
                        shape: "Sn2"
                    },
                    Sort: {
                        shape: "Sn3"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TransformIds" ],
                members: {
                    TransformIds: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListRegistries: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Registries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryName: {},
                                RegistryArn: {},
                                Description: {},
                                Status: {},
                                CreatedTime: {},
                                UpdatedTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemaVersions: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SchemaArn: {},
                                SchemaVersionId: {},
                                VersionNumber: {
                                    type: "long"
                                },
                                Status: {},
                                CreatedTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSchemas: {
            input: {
                type: "structure",
                members: {
                    RegistryId: {
                        shape: "Sf9"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Schemas: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RegistryName: {},
                                SchemaName: {},
                                SchemaArn: {},
                                Description: {},
                                SchemaStatus: {},
                                CreatedTime: {},
                                UpdatedTime: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSessions: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    },
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Ids: {
                        type: "list",
                        member: {}
                    },
                    Sessions: {
                        type: "list",
                        member: {
                            shape: "Sgb"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStatements: {
            input: {
                type: "structure",
                required: [ "SessionId" ],
                members: {
                    SessionId: {},
                    RequestOrigin: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Statements: {
                        type: "list",
                        member: {
                            shape: "Sp0"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTableOptimizerRuns: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "Type" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Type: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    NextToken: {},
                    TableOptimizerRuns: {
                        type: "list",
                        member: {
                            shape: "Sat"
                        }
                    }
                }
            }
        },
        ListTriggers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    DependentJobName: {},
                    MaxResults: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TriggerNames: {
                        shape: "Sb1"
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkflows: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Workflows: {
                        shape: "Sbl"
                    },
                    NextToken: {}
                }
            }
        },
        PutDataCatalogEncryptionSettings: {
            input: {
                type: "structure",
                required: [ "DataCatalogEncryptionSettings" ],
                members: {
                    CatalogId: {},
                    DataCatalogEncryptionSettings: {
                        shape: "Skz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "PolicyInJson" ],
                members: {
                    PolicyInJson: {},
                    ResourceArn: {},
                    PolicyHashCondition: {},
                    PolicyExistsCondition: {},
                    EnableHybrid: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyHash: {}
                }
            }
        },
        PutSchemaVersionMetadata: {
            input: {
                type: "structure",
                required: [ "MetadataKeyValue" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaVersionNumber: {
                        shape: "Soj"
                    },
                    SchemaVersionId: {},
                    MetadataKeyValue: {
                        shape: "St0"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    RegistryName: {},
                    LatestVersion: {
                        type: "boolean"
                    },
                    VersionNumber: {
                        type: "long"
                    },
                    SchemaVersionId: {},
                    MetadataKey: {},
                    MetadataValue: {}
                }
            }
        },
        PutWorkflowRunProperties: {
            input: {
                type: "structure",
                required: [ "Name", "RunId", "RunProperties" ],
                members: {
                    Name: {},
                    RunId: {},
                    RunProperties: {
                        shape: "Sbp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        QuerySchemaVersionMetadata: {
            input: {
                type: "structure",
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaVersionNumber: {
                        shape: "Soj"
                    },
                    SchemaVersionId: {},
                    MetadataList: {
                        type: "list",
                        member: {
                            shape: "St0"
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MetadataInfoMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                MetadataValue: {},
                                CreatedTime: {},
                                OtherMetadataValueList: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            MetadataValue: {},
                                            CreatedTime: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SchemaVersionId: {},
                    NextToken: {}
                }
            }
        },
        RegisterSchemaVersion: {
            input: {
                type: "structure",
                required: [ "SchemaId", "SchemaDefinition" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaDefinition: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaVersionId: {},
                    VersionNumber: {
                        type: "long"
                    },
                    Status: {}
                }
            }
        },
        RemoveSchemaVersionMetadata: {
            input: {
                type: "structure",
                required: [ "MetadataKeyValue" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaVersionNumber: {
                        shape: "Soj"
                    },
                    SchemaVersionId: {},
                    MetadataKeyValue: {
                        shape: "St0"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    RegistryName: {},
                    LatestVersion: {
                        type: "boolean"
                    },
                    VersionNumber: {
                        type: "long"
                    },
                    SchemaVersionId: {},
                    MetadataKey: {},
                    MetadataValue: {}
                }
            }
        },
        ResetJobBookmark: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobBookmarkEntry: {
                        shape: "Slz"
                    }
                }
            }
        },
        ResumeWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name", "RunId", "NodeIds" ],
                members: {
                    Name: {},
                    RunId: {},
                    NodeIds: {
                        shape: "Stl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {},
                    NodeIds: {
                        shape: "Stl"
                    }
                }
            }
        },
        RunStatement: {
            input: {
                type: "structure",
                required: [ "SessionId", "Code" ],
                members: {
                    SessionId: {},
                    Code: {},
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {
                        type: "integer"
                    }
                }
            }
        },
        SearchTables: {
            input: {
                type: "structure",
                members: {
                    CatalogId: {},
                    NextToken: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Key: {},
                                Value: {},
                                Comparator: {}
                            }
                        }
                    },
                    SearchText: {},
                    SortCriteria: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FieldName: {},
                                Sort: {}
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceShareType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    TableList: {
                        shape: "Spk"
                    }
                }
            }
        },
        StartBlueprintRun: {
            input: {
                type: "structure",
                required: [ "BlueprintName", "RoleArn" ],
                members: {
                    BlueprintName: {},
                    Parameters: {},
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {}
                }
            }
        },
        StartColumnStatisticsTaskRun: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "Role" ],
                members: {
                    DatabaseName: {},
                    TableName: {},
                    ColumnNameList: {
                        shape: "Sk9"
                    },
                    Role: {},
                    SampleSize: {
                        type: "double"
                    },
                    CatalogID: {},
                    SecurityConfiguration: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ColumnStatisticsTaskRunId: {}
                }
            }
        },
        StartCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartCrawlerSchedule: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartDataQualityRuleRecommendationRun: {
            input: {
                type: "structure",
                required: [ "DataSource", "Role" ],
                members: {
                    DataSource: {
                        shape: "S43"
                    },
                    Role: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    CreatedRulesetName: {},
                    ClientToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {}
                }
            },
            idempotent: true
        },
        StartDataQualityRulesetEvaluationRun: {
            input: {
                type: "structure",
                required: [ "DataSource", "Role", "RulesetNames" ],
                members: {
                    DataSource: {
                        shape: "S43"
                    },
                    Role: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    ClientToken: {},
                    AdditionalRunOptions: {
                        shape: "Slb"
                    },
                    RulesetNames: {
                        shape: "Slc"
                    },
                    AdditionalDataSources: {
                        shape: "Sle"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {}
                }
            },
            idempotent: true
        },
        StartExportLabelsTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "OutputS3Path" ],
                members: {
                    TransformId: {},
                    OutputS3Path: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartImportLabelsTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "InputS3Path" ],
                members: {
                    TransformId: {},
                    InputS3Path: {},
                    ReplaceAllLabels: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartJobRun: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    JobRunId: {},
                    Arguments: {
                        shape: "S58"
                    },
                    AllocatedCapacity: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxCapacity: {
                        type: "double"
                    },
                    SecurityConfiguration: {},
                    NotificationProperty: {
                        shape: "S5d"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    ExecutionClass: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobRunId: {}
                }
            }
        },
        StartMLEvaluationTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartMLLabelingSetGenerationTaskRun: {
            input: {
                type: "structure",
                required: [ "TransformId", "OutputS3Path" ],
                members: {
                    TransformId: {},
                    OutputS3Path: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TaskRunId: {}
                }
            }
        },
        StartTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        StartWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    RunProperties: {
                        shape: "Sbp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    RunId: {}
                }
            }
        },
        StopColumnStatisticsTaskRun: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName" ],
                members: {
                    DatabaseName: {},
                    TableName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopCrawlerSchedule: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopSession: {
            input: {
                type: "structure",
                required: [ "Id" ],
                members: {
                    Id: {},
                    RequestOrigin: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            }
        },
        StopTrigger: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        StopWorkflowRun: {
            input: {
                type: "structure",
                required: [ "Name", "RunId" ],
                members: {
                    Name: {},
                    RunId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagsToAdd" ],
                members: {
                    ResourceArn: {},
                    TagsToAdd: {
                        shape: "Sd7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagsToRemove" ],
                members: {
                    ResourceArn: {},
                    TagsToRemove: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBlueprint: {
            input: {
                type: "structure",
                required: [ "Name", "BlueprintLocation" ],
                members: {
                    Name: {},
                    Description: {},
                    BlueprintLocation: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        },
        UpdateClassifier: {
            input: {
                type: "structure",
                members: {
                    GrokClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Classification: {},
                            GrokPattern: {},
                            CustomPatterns: {}
                        }
                    },
                    XMLClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Classification: {},
                            RowTag: {}
                        }
                    },
                    JsonClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            JsonPath: {}
                        }
                    },
                    CsvClassifier: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            Delimiter: {},
                            QuoteSymbol: {},
                            ContainsHeader: {},
                            Header: {
                                shape: "Sdo"
                            },
                            DisableValueTrimming: {
                                type: "boolean"
                            },
                            AllowSingleColumn: {
                                type: "boolean"
                            },
                            CustomDatatypeConfigured: {
                                type: "boolean"
                            },
                            CustomDatatypes: {
                                shape: "Sdp"
                            },
                            Serde: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateColumnStatisticsForPartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValues", "ColumnStatisticsList" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValues: {
                        shape: "S6"
                    },
                    ColumnStatisticsList: {
                        shape: "Sve"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "Svg"
                    }
                }
            }
        },
        UpdateColumnStatisticsForTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "ColumnStatisticsList" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    ColumnStatisticsList: {
                        shape: "Sve"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        shape: "Svg"
                    }
                }
            }
        },
        UpdateConnection: {
            input: {
                type: "structure",
                required: [ "Name", "ConnectionInput" ],
                members: {
                    CatalogId: {},
                    Name: {},
                    ConnectionInput: {
                        shape: "Sdt"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCrawler: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Role: {},
                    DatabaseName: {},
                    Description: {},
                    Targets: {
                        shape: "S2b"
                    },
                    Schedule: {},
                    Classifiers: {
                        shape: "S32"
                    },
                    TablePrefix: {},
                    SchemaChangePolicy: {
                        shape: "S35"
                    },
                    RecrawlPolicy: {
                        shape: "S33"
                    },
                    LineageConfiguration: {
                        shape: "S38"
                    },
                    LakeFormationConfiguration: {
                        shape: "S3o"
                    },
                    Configuration: {},
                    CrawlerSecurityConfiguration: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCrawlerSchedule: {
            input: {
                type: "structure",
                required: [ "CrawlerName" ],
                members: {
                    CrawlerName: {},
                    Schedule: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataQualityRuleset: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    Ruleset: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    Ruleset: {}
                }
            }
        },
        UpdateDatabase: {
            input: {
                type: "structure",
                required: [ "Name", "DatabaseInput" ],
                members: {
                    CatalogId: {},
                    Name: {},
                    DatabaseInput: {
                        shape: "Sea"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDevEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {},
                    PublicKey: {},
                    AddPublicKeys: {
                        shape: "S4t"
                    },
                    DeletePublicKeys: {
                        shape: "S4t"
                    },
                    CustomLibraries: {
                        type: "structure",
                        members: {
                            ExtraPythonLibsS3Path: {},
                            ExtraJarsS3Path: {}
                        }
                    },
                    UpdateEtlLibraries: {
                        type: "boolean"
                    },
                    DeleteArguments: {
                        shape: "S4p"
                    },
                    AddArguments: {
                        shape: "S4u"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJob: {
            input: {
                type: "structure",
                required: [ "JobName", "JobUpdate" ],
                members: {
                    JobName: {},
                    JobUpdate: {
                        type: "structure",
                        members: {
                            Description: {},
                            LogUri: {},
                            Role: {},
                            ExecutionProperty: {
                                shape: "S52"
                            },
                            Command: {
                                shape: "S54"
                            },
                            DefaultArguments: {
                                shape: "S58"
                            },
                            NonOverridableArguments: {
                                shape: "S58"
                            },
                            Connections: {
                                shape: "S59"
                            },
                            MaxRetries: {
                                type: "integer"
                            },
                            AllocatedCapacity: {
                                deprecated: true,
                                deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                                type: "integer"
                            },
                            Timeout: {
                                type: "integer"
                            },
                            MaxCapacity: {
                                type: "double"
                            },
                            WorkerType: {},
                            NumberOfWorkers: {
                                type: "integer"
                            },
                            SecurityConfiguration: {},
                            NotificationProperty: {
                                shape: "S5d"
                            },
                            GlueVersion: {},
                            CodeGenConfigurationNodes: {
                                shape: "S5f"
                            },
                            ExecutionClass: {},
                            SourceControlDetails: {
                                shape: "Sa9"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        UpdateJobFromSourceControl: {
            input: {
                type: "structure",
                members: {
                    JobName: {},
                    Provider: {},
                    RepositoryName: {},
                    RepositoryOwner: {},
                    BranchName: {},
                    Folder: {},
                    CommitId: {},
                    AuthStrategy: {},
                    AuthToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        UpdateMLTransform: {
            input: {
                type: "structure",
                required: [ "TransformId" ],
                members: {
                    TransformId: {},
                    Name: {},
                    Description: {},
                    Parameters: {
                        shape: "Ses"
                    },
                    Role: {},
                    GlueVersion: {},
                    MaxCapacity: {
                        type: "double"
                    },
                    WorkerType: {},
                    NumberOfWorkers: {
                        type: "integer"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    MaxRetries: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TransformId: {}
                }
            }
        },
        UpdatePartition: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableName", "PartitionValueList", "PartitionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    PartitionValueList: {
                        shape: "Scm"
                    },
                    PartitionInput: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRegistry: {
            input: {
                type: "structure",
                required: [ "RegistryId", "Description" ],
                members: {
                    RegistryId: {
                        shape: "Sf9"
                    },
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RegistryName: {},
                    RegistryArn: {}
                }
            }
        },
        UpdateSchema: {
            input: {
                type: "structure",
                required: [ "SchemaId" ],
                members: {
                    SchemaId: {
                        shape: "Sw"
                    },
                    SchemaVersionNumber: {
                        shape: "Soj"
                    },
                    Compatibility: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SchemaArn: {},
                    SchemaName: {},
                    RegistryName: {}
                }
            }
        },
        UpdateSourceControlFromJob: {
            input: {
                type: "structure",
                members: {
                    JobName: {},
                    Provider: {},
                    RepositoryName: {},
                    RepositoryOwner: {},
                    BranchName: {},
                    Folder: {},
                    CommitId: {},
                    AuthStrategy: {},
                    AuthToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobName: {}
                }
            }
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "TableInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableInput: {
                        shape: "Sgg"
                    },
                    SkipArchive: {
                        type: "boolean"
                    },
                    TransactionId: {},
                    VersionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTableOptimizer: {
            input: {
                type: "structure",
                required: [ "CatalogId", "DatabaseName", "TableName", "Type", "TableOptimizerConfiguration" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    TableName: {},
                    Type: {},
                    TableOptimizerConfiguration: {
                        shape: "Sar"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTrigger: {
            input: {
                type: "structure",
                required: [ "Name", "TriggerUpdate" ],
                members: {
                    Name: {},
                    TriggerUpdate: {
                        type: "structure",
                        members: {
                            Name: {},
                            Description: {},
                            Schedule: {},
                            Actions: {
                                shape: "Sb8"
                            },
                            Predicate: {
                                shape: "Sba"
                            },
                            EventBatchingCondition: {
                                shape: "Sbh"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Trigger: {
                        shape: "Sb4"
                    }
                }
            }
        },
        UpdateUserDefinedFunction: {
            input: {
                type: "structure",
                required: [ "DatabaseName", "FunctionName", "FunctionInput" ],
                members: {
                    CatalogId: {},
                    DatabaseName: {},
                    FunctionName: {},
                    FunctionInput: {
                        shape: "Sgv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateWorkflow: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Description: {},
                    DefaultRunProperties: {
                        shape: "Sbp"
                    },
                    MaxConcurrentRuns: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Name: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                Values: {
                    shape: "S6"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                Parameters: {
                    shape: "Se"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                }
            }
        },
        S6: {
            type: "list",
            member: {}
        },
        S9: {
            type: "structure",
            members: {
                Columns: {
                    shape: "Sa"
                },
                Location: {},
                AdditionalLocations: {
                    type: "list",
                    member: {}
                },
                InputFormat: {},
                OutputFormat: {},
                Compressed: {
                    type: "boolean"
                },
                NumberOfBuckets: {
                    type: "integer"
                },
                SerdeInfo: {
                    type: "structure",
                    members: {
                        Name: {},
                        SerializationLibrary: {},
                        Parameters: {
                            shape: "Se"
                        }
                    }
                },
                BucketColumns: {
                    shape: "Sn"
                },
                SortColumns: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Column", "SortOrder" ],
                        members: {
                            Column: {},
                            SortOrder: {
                                type: "integer"
                            }
                        }
                    }
                },
                Parameters: {
                    shape: "Se"
                },
                SkewedInfo: {
                    type: "structure",
                    members: {
                        SkewedColumnNames: {
                            shape: "Sn"
                        },
                        SkewedColumnValues: {
                            type: "list",
                            member: {}
                        },
                        SkewedColumnValueLocationMaps: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                },
                StoredAsSubDirectories: {
                    type: "boolean"
                },
                SchemaReference: {
                    type: "structure",
                    members: {
                        SchemaId: {
                            shape: "Sw"
                        },
                        SchemaVersionId: {},
                        SchemaVersionNumber: {
                            type: "long"
                        }
                    }
                }
            }
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Type: {},
                    Comment: {},
                    Parameters: {
                        shape: "Se"
                    }
                }
            }
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        Sn: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "structure",
            members: {
                SchemaArn: {},
                SchemaName: {},
                RegistryName: {}
            }
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PartitionValues: {
                        shape: "S6"
                    },
                    ErrorDetail: {
                        shape: "S14"
                    }
                }
            }
        },
        S14: {
            type: "structure",
            members: {
                ErrorCode: {},
                ErrorMessage: {}
            }
        },
        S1c: {
            type: "structure",
            required: [ "Values" ],
            members: {
                Values: {
                    shape: "S6"
                }
            }
        },
        S1w: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                CreatedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                ParameterSpec: {},
                BlueprintLocation: {},
                BlueprintServiceLocation: {},
                Status: {},
                ErrorMessage: {},
                LastActiveDefinition: {
                    type: "structure",
                    members: {
                        Description: {},
                        LastModifiedOn: {
                            type: "timestamp"
                        },
                        ParameterSpec: {},
                        BlueprintLocation: {},
                        BlueprintServiceLocation: {}
                    }
                }
            }
        },
        S24: {
            type: "list",
            member: {}
        },
        S26: {
            type: "list",
            member: {}
        },
        S28: {
            type: "list",
            member: {
                shape: "S29"
            }
        },
        S29: {
            type: "structure",
            members: {
                Name: {},
                Role: {},
                Targets: {
                    shape: "S2b"
                },
                DatabaseName: {},
                Description: {},
                Classifiers: {
                    shape: "S32"
                },
                RecrawlPolicy: {
                    shape: "S33"
                },
                SchemaChangePolicy: {
                    shape: "S35"
                },
                LineageConfiguration: {
                    shape: "S38"
                },
                State: {},
                TablePrefix: {},
                Schedule: {
                    type: "structure",
                    members: {
                        ScheduleExpression: {},
                        State: {}
                    }
                },
                CrawlElapsedTime: {
                    type: "long"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdated: {
                    type: "timestamp"
                },
                LastCrawl: {
                    type: "structure",
                    members: {
                        Status: {},
                        ErrorMessage: {},
                        LogGroup: {},
                        LogStream: {},
                        MessagePrefix: {},
                        StartTime: {
                            type: "timestamp"
                        }
                    }
                },
                Version: {
                    type: "long"
                },
                Configuration: {},
                CrawlerSecurityConfiguration: {},
                LakeFormationConfiguration: {
                    shape: "S3o"
                }
            }
        },
        S2b: {
            type: "structure",
            members: {
                S3Targets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Path: {},
                            Exclusions: {
                                shape: "S2f"
                            },
                            ConnectionName: {},
                            SampleSize: {
                                type: "integer"
                            },
                            EventQueueArn: {},
                            DlqEventQueueArn: {}
                        }
                    }
                },
                JdbcTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ConnectionName: {},
                            Path: {},
                            Exclusions: {
                                shape: "S2f"
                            },
                            EnableAdditionalMetadata: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                MongoDBTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            ConnectionName: {},
                            Path: {},
                            ScanAll: {
                                type: "boolean"
                            }
                        }
                    }
                },
                DynamoDBTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Path: {},
                            scanAll: {
                                type: "boolean"
                            },
                            scanRate: {
                                type: "double"
                            }
                        }
                    }
                },
                CatalogTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "DatabaseName", "Tables" ],
                        members: {
                            DatabaseName: {},
                            Tables: {
                                type: "list",
                                member: {}
                            },
                            ConnectionName: {},
                            EventQueueArn: {},
                            DlqEventQueueArn: {}
                        }
                    }
                },
                DeltaTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            DeltaTables: {
                                shape: "S2f"
                            },
                            ConnectionName: {},
                            WriteManifest: {
                                type: "boolean"
                            },
                            CreateNativeDeltaTable: {
                                type: "boolean"
                            }
                        }
                    }
                },
                IcebergTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Paths: {
                                shape: "S2f"
                            },
                            ConnectionName: {},
                            Exclusions: {
                                shape: "S2f"
                            },
                            MaximumTraversalDepth: {
                                type: "integer"
                            }
                        }
                    }
                },
                HudiTargets: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Paths: {
                                shape: "S2f"
                            },
                            ConnectionName: {},
                            Exclusions: {
                                shape: "S2f"
                            },
                            MaximumTraversalDepth: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S2f: {
            type: "list",
            member: {}
        },
        S32: {
            type: "list",
            member: {}
        },
        S33: {
            type: "structure",
            members: {
                RecrawlBehavior: {}
            }
        },
        S35: {
            type: "structure",
            members: {
                UpdateBehavior: {},
                DeleteBehavior: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                CrawlerLineageSettings: {}
            }
        },
        S3o: {
            type: "structure",
            members: {
                UseLakeFormationCredentials: {
                    type: "boolean"
                },
                AccountId: {}
            }
        },
        S3r: {
            type: "list",
            member: {}
        },
        S3t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "RegexString" ],
                members: {
                    Name: {},
                    RegexString: {},
                    ContextWords: {
                        shape: "S3v"
                    }
                }
            }
        },
        S3v: {
            type: "list",
            member: {}
        },
        S3x: {
            type: "list",
            member: {}
        },
        S43: {
            type: "structure",
            required: [ "GlueTable" ],
            members: {
                GlueTable: {
                    shape: "S44"
                }
            }
        },
        S44: {
            type: "structure",
            required: [ "DatabaseName", "TableName" ],
            members: {
                DatabaseName: {},
                TableName: {},
                CatalogId: {},
                ConnectionName: {},
                AdditionalOptions: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        S46: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    EvaluationMessage: {},
                    Result: {},
                    EvaluatedMetrics: {
                        shape: "S4a"
                    }
                }
            }
        },
        S4a: {
            type: "map",
            key: {},
            value: {
                type: "double"
            }
        },
        S4b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    Description: {},
                    EvaluationMessage: {},
                    EvaluatedMetrics: {
                        shape: "S4a"
                    }
                }
            }
        },
        S4d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Description: {},
                    MetricBasedObservation: {
                        type: "structure",
                        members: {
                            MetricName: {},
                            MetricValues: {
                                type: "structure",
                                members: {
                                    ActualValue: {
                                        type: "double"
                                    },
                                    ExpectedValue: {
                                        type: "double"
                                    },
                                    LowerLimit: {
                                        type: "double"
                                    },
                                    UpperLimit: {
                                        type: "double"
                                    }
                                }
                            },
                            NewRules: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        S4k: {
            type: "list",
            member: {}
        },
        S4m: {
            type: "list",
            member: {
                shape: "S4n"
            }
        },
        S4n: {
            type: "structure",
            members: {
                EndpointName: {},
                RoleArn: {},
                SecurityGroupIds: {
                    shape: "S4p"
                },
                SubnetId: {},
                YarnEndpointAddress: {},
                PrivateAddress: {},
                ZeppelinRemoteSparkInterpreterPort: {
                    type: "integer"
                },
                PublicAddress: {},
                Status: {},
                WorkerType: {},
                GlueVersion: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                NumberOfNodes: {
                    type: "integer"
                },
                AvailabilityZone: {},
                VpcId: {},
                ExtraPythonLibsS3Path: {},
                ExtraJarsS3Path: {},
                FailureReason: {},
                LastUpdateStatus: {},
                CreatedTimestamp: {
                    type: "timestamp"
                },
                LastModifiedTimestamp: {
                    type: "timestamp"
                },
                PublicKey: {},
                PublicKeys: {
                    shape: "S4t"
                },
                SecurityConfiguration: {},
                Arguments: {
                    shape: "S4u"
                }
            }
        },
        S4p: {
            type: "list",
            member: {}
        },
        S4t: {
            type: "list",
            member: {}
        },
        S4u: {
            type: "map",
            key: {},
            value: {}
        },
        S4w: {
            type: "list",
            member: {}
        },
        S4y: {
            type: "list",
            member: {
                shape: "S4z"
            }
        },
        S4z: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                LogUri: {},
                Role: {},
                CreatedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                ExecutionProperty: {
                    shape: "S52"
                },
                Command: {
                    shape: "S54"
                },
                DefaultArguments: {
                    shape: "S58"
                },
                NonOverridableArguments: {
                    shape: "S58"
                },
                Connections: {
                    shape: "S59"
                },
                MaxRetries: {
                    type: "integer"
                },
                AllocatedCapacity: {
                    deprecated: true,
                    deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "double"
                },
                WorkerType: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                SecurityConfiguration: {},
                NotificationProperty: {
                    shape: "S5d"
                },
                GlueVersion: {},
                CodeGenConfigurationNodes: {
                    shape: "S5f"
                },
                ExecutionClass: {},
                SourceControlDetails: {
                    shape: "Sa9"
                }
            }
        },
        S52: {
            type: "structure",
            members: {
                MaxConcurrentRuns: {
                    type: "integer"
                }
            }
        },
        S54: {
            type: "structure",
            members: {
                Name: {},
                ScriptLocation: {},
                PythonVersion: {},
                Runtime: {}
            }
        },
        S58: {
            type: "map",
            key: {},
            value: {}
        },
        S59: {
            type: "structure",
            members: {
                Connections: {
                    shape: "S5a"
                }
            }
        },
        S5a: {
            type: "list",
            member: {}
        },
        S5d: {
            type: "structure",
            members: {
                NotifyDelayAfter: {
                    type: "integer"
                }
            }
        },
        S5f: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    AthenaConnectorSource: {
                        type: "structure",
                        required: [ "Name", "ConnectionName", "ConnectorName", "ConnectionType", "SchemaName" ],
                        members: {
                            Name: {},
                            ConnectionName: {},
                            ConnectorName: {},
                            ConnectionType: {},
                            ConnectionTable: {},
                            SchemaName: {},
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    JDBCConnectorSource: {
                        type: "structure",
                        required: [ "Name", "ConnectionName", "ConnectorName", "ConnectionType" ],
                        members: {
                            Name: {},
                            ConnectionName: {},
                            ConnectorName: {},
                            ConnectionType: {},
                            AdditionalOptions: {
                                type: "structure",
                                members: {
                                    FilterPredicate: {},
                                    PartitionColumn: {},
                                    LowerBound: {
                                        type: "long"
                                    },
                                    UpperBound: {
                                        type: "long"
                                    },
                                    NumPartitions: {
                                        type: "long"
                                    },
                                    JobBookmarkKeys: {
                                        shape: "S5u"
                                    },
                                    JobBookmarkKeysSortOrder: {},
                                    DataTypeMapping: {
                                        type: "map",
                                        key: {},
                                        value: {}
                                    }
                                }
                            },
                            ConnectionTable: {},
                            Query: {},
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    SparkConnectorSource: {
                        type: "structure",
                        required: [ "Name", "ConnectionName", "ConnectorName", "ConnectionType" ],
                        members: {
                            Name: {},
                            ConnectionName: {},
                            ConnectorName: {},
                            ConnectionType: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    CatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    RedshiftSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            RedshiftTmpDir: {},
                            TmpDirIAMRole: {}
                        }
                    },
                    S3CatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            PartitionPredicate: {},
                            AdditionalOptions: {
                                shape: "S64"
                            }
                        }
                    },
                    S3CsvSource: {
                        type: "structure",
                        required: [ "Name", "Paths", "Separator", "QuoteChar" ],
                        members: {
                            Name: {},
                            Paths: {
                                shape: "S5u"
                            },
                            CompressionType: {},
                            Exclusions: {
                                shape: "S5u"
                            },
                            GroupSize: {},
                            GroupFiles: {},
                            Recurse: {
                                type: "boolean"
                            },
                            MaxBand: {
                                type: "integer"
                            },
                            MaxFilesInBand: {
                                type: "integer"
                            },
                            AdditionalOptions: {
                                shape: "S6a"
                            },
                            Separator: {},
                            Escaper: {},
                            QuoteChar: {},
                            Multiline: {
                                type: "boolean"
                            },
                            WithHeader: {
                                type: "boolean"
                            },
                            WriteHeader: {
                                type: "boolean"
                            },
                            SkipFirst: {
                                type: "boolean"
                            },
                            OptimizePerformance: {
                                type: "boolean"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    S3JsonSource: {
                        type: "structure",
                        required: [ "Name", "Paths" ],
                        members: {
                            Name: {},
                            Paths: {
                                shape: "S5u"
                            },
                            CompressionType: {},
                            Exclusions: {
                                shape: "S5u"
                            },
                            GroupSize: {},
                            GroupFiles: {},
                            Recurse: {
                                type: "boolean"
                            },
                            MaxBand: {
                                type: "integer"
                            },
                            MaxFilesInBand: {
                                type: "integer"
                            },
                            AdditionalOptions: {
                                shape: "S6a"
                            },
                            JsonPath: {},
                            Multiline: {
                                type: "boolean"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    S3ParquetSource: {
                        type: "structure",
                        required: [ "Name", "Paths" ],
                        members: {
                            Name: {},
                            Paths: {
                                shape: "S5u"
                            },
                            CompressionType: {},
                            Exclusions: {
                                shape: "S5u"
                            },
                            GroupSize: {},
                            GroupFiles: {},
                            Recurse: {
                                type: "boolean"
                            },
                            MaxBand: {
                                type: "integer"
                            },
                            MaxFilesInBand: {
                                type: "integer"
                            },
                            AdditionalOptions: {
                                shape: "S6a"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    RelationalCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    DynamoDBCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    JDBCConnectorTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "ConnectionName", "ConnectionTable", "ConnectorName", "ConnectionType" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            ConnectionName: {},
                            ConnectionTable: {},
                            ConnectorName: {},
                            ConnectionType: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    SparkConnectorTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "ConnectionName", "ConnectorName", "ConnectionType" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            ConnectionName: {},
                            ConnectorName: {},
                            ConnectionType: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    CatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Database", "Table" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Database: {},
                            Table: {}
                        }
                    },
                    RedshiftTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Database", "Table" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Database: {},
                            Table: {},
                            RedshiftTmpDir: {},
                            TmpDirIAMRole: {},
                            UpsertRedshiftOptions: {
                                type: "structure",
                                members: {
                                    TableLocation: {},
                                    ConnectionName: {},
                                    UpsertKeys: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            }
                        }
                    },
                    S3CatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Table", "Database" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Table: {},
                            Database: {},
                            SchemaChangePolicy: {
                                shape: "S6s"
                            }
                        }
                    },
                    S3GlueParquetTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Path" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Path: {},
                            Compression: {},
                            SchemaChangePolicy: {
                                shape: "S6v"
                            }
                        }
                    },
                    S3DirectTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Path", "Format" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Path: {},
                            Compression: {},
                            Format: {},
                            SchemaChangePolicy: {
                                shape: "S6v"
                            }
                        }
                    },
                    ApplyMapping: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Mapping" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Mapping: {
                                shape: "S6z"
                            }
                        }
                    },
                    SelectFields: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Paths" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Paths: {
                                shape: "S6r"
                            }
                        }
                    },
                    DropFields: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Paths" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Paths: {
                                shape: "S6r"
                            }
                        }
                    },
                    RenameField: {
                        type: "structure",
                        required: [ "Name", "Inputs", "SourcePath", "TargetPath" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            SourcePath: {
                                shape: "S5u"
                            },
                            TargetPath: {
                                shape: "S5u"
                            }
                        }
                    },
                    Spigot: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Path" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Path: {},
                            Topk: {
                                type: "integer"
                            },
                            Prob: {
                                type: "double"
                            }
                        }
                    },
                    Join: {
                        type: "structure",
                        required: [ "Name", "Inputs", "JoinType", "Columns" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S78"
                            },
                            JoinType: {},
                            Columns: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "From", "Keys" ],
                                    members: {
                                        From: {},
                                        Keys: {
                                            shape: "S6r"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SplitFields: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Paths" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Paths: {
                                shape: "S6r"
                            }
                        }
                    },
                    SelectFromCollection: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Index" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Index: {
                                type: "integer"
                            }
                        }
                    },
                    FillMissingValues: {
                        type: "structure",
                        required: [ "Name", "Inputs", "ImputedPath" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            ImputedPath: {},
                            FilledPath: {}
                        }
                    },
                    Filter: {
                        type: "structure",
                        required: [ "Name", "Inputs", "LogicalOperator", "Filters" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            LogicalOperator: {},
                            Filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Operation", "Values" ],
                                    members: {
                                        Operation: {},
                                        Negated: {
                                            type: "boolean"
                                        },
                                        Values: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "Type", "Value" ],
                                                members: {
                                                    Type: {},
                                                    Value: {
                                                        shape: "S5u"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    CustomCode: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Code", "ClassName" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S7p"
                            },
                            Code: {},
                            ClassName: {},
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    SparkSQL: {
                        type: "structure",
                        required: [ "Name", "Inputs", "SqlQuery", "SqlAliases" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S7p"
                            },
                            SqlQuery: {},
                            SqlAliases: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "From", "Alias" ],
                                    members: {
                                        From: {},
                                        Alias: {}
                                    }
                                }
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    DirectKinesisSource: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            WindowSize: {
                                type: "integer"
                            },
                            DetectSchema: {
                                type: "boolean"
                            },
                            StreamingOptions: {
                                shape: "S7w"
                            },
                            DataPreviewOptions: {
                                shape: "S7z"
                            }
                        }
                    },
                    DirectKafkaSource: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            StreamingOptions: {
                                shape: "S83"
                            },
                            WindowSize: {
                                type: "integer"
                            },
                            DetectSchema: {
                                type: "boolean"
                            },
                            DataPreviewOptions: {
                                shape: "S7z"
                            }
                        }
                    },
                    CatalogKinesisSource: {
                        type: "structure",
                        required: [ "Name", "Table", "Database" ],
                        members: {
                            Name: {},
                            WindowSize: {
                                type: "integer"
                            },
                            DetectSchema: {
                                type: "boolean"
                            },
                            Table: {},
                            Database: {},
                            StreamingOptions: {
                                shape: "S7w"
                            },
                            DataPreviewOptions: {
                                shape: "S7z"
                            }
                        }
                    },
                    CatalogKafkaSource: {
                        type: "structure",
                        required: [ "Name", "Table", "Database" ],
                        members: {
                            Name: {},
                            WindowSize: {
                                type: "integer"
                            },
                            DetectSchema: {
                                type: "boolean"
                            },
                            Table: {},
                            Database: {},
                            StreamingOptions: {
                                shape: "S83"
                            },
                            DataPreviewOptions: {
                                shape: "S7z"
                            }
                        }
                    },
                    DropNullFields: {
                        type: "structure",
                        required: [ "Name", "Inputs" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            NullCheckBoxList: {
                                type: "structure",
                                members: {
                                    IsEmpty: {
                                        type: "boolean"
                                    },
                                    IsNullString: {
                                        type: "boolean"
                                    },
                                    IsNegOne: {
                                        type: "boolean"
                                    }
                                }
                            },
                            NullTextList: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Value", "Datatype" ],
                                    members: {
                                        Value: {},
                                        Datatype: {
                                            type: "structure",
                                            required: [ "Id", "Label" ],
                                            members: {
                                                Id: {},
                                                Label: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Merge: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Source", "PrimaryKeys" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S78"
                            },
                            Source: {},
                            PrimaryKeys: {
                                shape: "S6r"
                            }
                        }
                    },
                    Union: {
                        type: "structure",
                        required: [ "Name", "Inputs", "UnionType" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S78"
                            },
                            UnionType: {}
                        }
                    },
                    PIIDetection: {
                        type: "structure",
                        required: [ "Name", "Inputs", "PiiType", "EntityTypesToDetect" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PiiType: {},
                            EntityTypesToDetect: {
                                shape: "S5u"
                            },
                            OutputColumnName: {},
                            SampleFraction: {
                                type: "double"
                            },
                            ThresholdFraction: {
                                type: "double"
                            },
                            MaskValue: {}
                        }
                    },
                    Aggregate: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Groups", "Aggs" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Groups: {
                                shape: "S6r"
                            },
                            Aggs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Column", "AggFunc" ],
                                    members: {
                                        Column: {
                                            shape: "S5u"
                                        },
                                        AggFunc: {}
                                    }
                                }
                            }
                        }
                    },
                    DropDuplicates: {
                        type: "structure",
                        required: [ "Name", "Inputs" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Columns: {
                                type: "list",
                                member: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    GovernedCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Table", "Database" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Table: {},
                            Database: {},
                            SchemaChangePolicy: {
                                shape: "S6s"
                            }
                        }
                    },
                    GovernedCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            PartitionPredicate: {},
                            AdditionalOptions: {
                                shape: "S64"
                            }
                        }
                    },
                    MicrosoftSQLServerCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    MySQLCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    OracleSQLCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    PostgreSQLCatalogSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {}
                        }
                    },
                    MicrosoftSQLServerCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Database", "Table" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Database: {},
                            Table: {}
                        }
                    },
                    MySQLCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Database", "Table" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Database: {},
                            Table: {}
                        }
                    },
                    OracleSQLCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Database", "Table" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Database: {},
                            Table: {}
                        }
                    },
                    PostgreSQLCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Database", "Table" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Database: {},
                            Table: {}
                        }
                    },
                    DynamicTransform: {
                        type: "structure",
                        required: [ "Name", "TransformName", "Inputs", "FunctionName", "Path" ],
                        members: {
                            Name: {},
                            TransformName: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Parameters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "Type" ],
                                    members: {
                                        Name: {},
                                        Type: {},
                                        ValidationRule: {},
                                        ValidationMessage: {},
                                        Value: {
                                            shape: "S5u"
                                        },
                                        ListType: {},
                                        IsOptional: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            },
                            FunctionName: {},
                            Path: {},
                            Version: {},
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    EvaluateDataQuality: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Ruleset" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Ruleset: {},
                            Output: {},
                            PublishingOptions: {
                                shape: "S97"
                            },
                            StopJobOnFailureOptions: {
                                shape: "S98"
                            }
                        }
                    },
                    S3CatalogHudiSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            AdditionalHudiOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    CatalogHudiSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            AdditionalHudiOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    S3HudiSource: {
                        type: "structure",
                        required: [ "Name", "Paths" ],
                        members: {
                            Name: {},
                            Paths: {
                                shape: "S5u"
                            },
                            AdditionalHudiOptions: {
                                shape: "S60"
                            },
                            AdditionalOptions: {
                                shape: "S6a"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    S3HudiCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Table", "Database", "AdditionalOptions" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Table: {},
                            Database: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            SchemaChangePolicy: {
                                shape: "S6s"
                            }
                        }
                    },
                    S3HudiDirectTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Path", "Compression", "Format", "AdditionalOptions" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            Path: {},
                            Compression: {},
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Format: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            SchemaChangePolicy: {
                                shape: "S6v"
                            }
                        }
                    },
                    DirectJDBCSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table", "ConnectionName", "ConnectionType" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            ConnectionName: {},
                            ConnectionType: {},
                            RedshiftTmpDir: {}
                        }
                    },
                    S3CatalogDeltaSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            AdditionalDeltaOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    CatalogDeltaSource: {
                        type: "structure",
                        required: [ "Name", "Database", "Table" ],
                        members: {
                            Name: {},
                            Database: {},
                            Table: {},
                            AdditionalDeltaOptions: {
                                shape: "S60"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    S3DeltaSource: {
                        type: "structure",
                        required: [ "Name", "Paths" ],
                        members: {
                            Name: {},
                            Paths: {
                                shape: "S5u"
                            },
                            AdditionalDeltaOptions: {
                                shape: "S60"
                            },
                            AdditionalOptions: {
                                shape: "S6a"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    S3DeltaCatalogTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Table", "Database" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Table: {},
                            Database: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            SchemaChangePolicy: {
                                shape: "S6s"
                            }
                        }
                    },
                    S3DeltaDirectTarget: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Path", "Compression", "Format" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            PartitionKeys: {
                                shape: "S6r"
                            },
                            Path: {},
                            Compression: {},
                            Format: {},
                            AdditionalOptions: {
                                shape: "S60"
                            },
                            SchemaChangePolicy: {
                                shape: "S6v"
                            }
                        }
                    },
                    AmazonRedshiftSource: {
                        type: "structure",
                        members: {
                            Name: {},
                            Data: {
                                shape: "S9p"
                            }
                        }
                    },
                    AmazonRedshiftTarget: {
                        type: "structure",
                        members: {
                            Name: {},
                            Data: {
                                shape: "S9p"
                            },
                            Inputs: {
                                shape: "S6k"
                            }
                        }
                    },
                    EvaluateDataQualityMultiFrame: {
                        type: "structure",
                        required: [ "Name", "Inputs", "Ruleset" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S7p"
                            },
                            AdditionalDataSources: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            Ruleset: {},
                            PublishingOptions: {
                                shape: "S97"
                            },
                            AdditionalOptions: {
                                type: "map",
                                key: {},
                                value: {}
                            },
                            StopJobOnFailureOptions: {
                                shape: "S98"
                            }
                        }
                    },
                    Recipe: {
                        type: "structure",
                        required: [ "Name", "Inputs", "RecipeReference" ],
                        members: {
                            Name: {},
                            Inputs: {
                                shape: "S6k"
                            },
                            RecipeReference: {
                                type: "structure",
                                required: [ "RecipeArn", "RecipeVersion" ],
                                members: {
                                    RecipeArn: {},
                                    RecipeVersion: {}
                                }
                            }
                        }
                    },
                    SnowflakeSource: {
                        type: "structure",
                        required: [ "Name", "Data" ],
                        members: {
                            Name: {},
                            Data: {
                                shape: "Sa3"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    SnowflakeTarget: {
                        type: "structure",
                        required: [ "Name", "Data" ],
                        members: {
                            Name: {},
                            Data: {
                                shape: "Sa3"
                            },
                            Inputs: {
                                shape: "S6k"
                            }
                        }
                    },
                    ConnectorDataSource: {
                        type: "structure",
                        required: [ "Name", "ConnectionType", "Data" ],
                        members: {
                            Name: {},
                            ConnectionType: {},
                            Data: {
                                shape: "Sa6"
                            },
                            OutputSchemas: {
                                shape: "S5m"
                            }
                        }
                    },
                    ConnectorDataTarget: {
                        type: "structure",
                        required: [ "Name", "ConnectionType", "Data" ],
                        members: {
                            Name: {},
                            ConnectionType: {},
                            Data: {
                                shape: "Sa6"
                            },
                            Inputs: {
                                shape: "S6k"
                            }
                        }
                    }
                }
            },
            sensitive: true
        },
        S5m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Columns: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name" ],
                            members: {
                                Name: {},
                                Type: {}
                            }
                        }
                    }
                }
            }
        },
        S5u: {
            type: "list",
            member: {}
        },
        S60: {
            type: "map",
            key: {},
            value: {}
        },
        S64: {
            type: "structure",
            members: {
                BoundedSize: {
                    type: "long"
                },
                BoundedFiles: {
                    type: "long"
                }
            }
        },
        S6a: {
            type: "structure",
            members: {
                BoundedSize: {
                    type: "long"
                },
                BoundedFiles: {
                    type: "long"
                },
                EnableSamplePath: {
                    type: "boolean"
                },
                SamplePath: {}
            }
        },
        S6k: {
            type: "list",
            member: {}
        },
        S6r: {
            type: "list",
            member: {
                shape: "S5u"
            }
        },
        S6s: {
            type: "structure",
            members: {
                EnableUpdateCatalog: {
                    type: "boolean"
                },
                UpdateBehavior: {}
            }
        },
        S6v: {
            type: "structure",
            members: {
                EnableUpdateCatalog: {
                    type: "boolean"
                },
                UpdateBehavior: {},
                Table: {},
                Database: {}
            }
        },
        S6z: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ToKey: {},
                    FromPath: {
                        shape: "S5u"
                    },
                    FromType: {},
                    ToType: {},
                    Dropped: {
                        type: "boolean"
                    },
                    Children: {
                        shape: "S6z"
                    }
                }
            }
        },
        S78: {
            type: "list",
            member: {}
        },
        S7p: {
            type: "list",
            member: {}
        },
        S7w: {
            type: "structure",
            members: {
                EndpointUrl: {},
                StreamName: {},
                Classification: {},
                Delimiter: {},
                StartingPosition: {},
                MaxFetchTimeInMs: {
                    type: "long"
                },
                MaxFetchRecordsPerShard: {
                    type: "long"
                },
                MaxRecordPerRead: {
                    type: "long"
                },
                AddIdleTimeBetweenReads: {
                    type: "boolean"
                },
                IdleTimeBetweenReadsInMs: {
                    type: "long"
                },
                DescribeShardInterval: {
                    type: "long"
                },
                NumRetries: {
                    type: "integer"
                },
                RetryIntervalMs: {
                    type: "long"
                },
                MaxRetryIntervalMs: {
                    type: "long"
                },
                AvoidEmptyBatches: {
                    type: "boolean"
                },
                StreamArn: {},
                RoleArn: {},
                RoleSessionName: {},
                AddRecordTimestamp: {},
                EmitConsumerLagMetrics: {},
                StartingTimestamp: {
                    shape: "S7y"
                }
            }
        },
        S7y: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S7z: {
            type: "structure",
            members: {
                PollingTime: {
                    type: "long"
                },
                RecordPollingLimit: {
                    type: "long"
                }
            }
        },
        S83: {
            type: "structure",
            members: {
                BootstrapServers: {},
                SecurityProtocol: {},
                ConnectionName: {},
                TopicName: {},
                Assign: {},
                SubscribePattern: {},
                Classification: {},
                Delimiter: {},
                StartingOffsets: {},
                EndingOffsets: {},
                PollTimeoutMs: {
                    type: "long"
                },
                NumRetries: {
                    type: "integer"
                },
                RetryIntervalMs: {
                    type: "long"
                },
                MaxOffsetsPerTrigger: {
                    type: "long"
                },
                MinPartitions: {
                    type: "integer"
                },
                IncludeHeaders: {
                    type: "boolean"
                },
                AddRecordTimestamp: {},
                EmitConsumerLagMetrics: {},
                StartingTimestamp: {
                    shape: "S7y"
                }
            }
        },
        S97: {
            type: "structure",
            members: {
                EvaluationContext: {},
                ResultsS3Prefix: {},
                CloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                ResultsPublishingEnabled: {
                    type: "boolean"
                }
            }
        },
        S98: {
            type: "structure",
            members: {
                StopJobOnFailureTiming: {}
            }
        },
        S9p: {
            type: "structure",
            members: {
                AccessType: {},
                SourceType: {},
                Connection: {
                    shape: "S9q"
                },
                Schema: {
                    shape: "S9q"
                },
                Table: {
                    shape: "S9q"
                },
                CatalogDatabase: {
                    shape: "S9q"
                },
                CatalogTable: {
                    shape: "S9q"
                },
                CatalogRedshiftSchema: {},
                CatalogRedshiftTable: {},
                TempDir: {},
                IamRole: {
                    shape: "S9q"
                },
                AdvancedOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Key: {},
                            Value: {}
                        }
                    }
                },
                SampleQuery: {},
                PreAction: {},
                PostAction: {},
                Action: {},
                TablePrefix: {},
                Upsert: {
                    type: "boolean"
                },
                MergeAction: {},
                MergeWhenMatched: {},
                MergeWhenNotMatched: {},
                MergeClause: {},
                CrawlerConnection: {},
                TableSchema: {
                    shape: "S9t"
                },
                StagingTable: {},
                SelectedColumns: {
                    shape: "S9t"
                }
            }
        },
        S9q: {
            type: "structure",
            members: {
                Value: {},
                Label: {},
                Description: {}
            }
        },
        S9t: {
            type: "list",
            member: {
                shape: "S9q"
            }
        },
        Sa3: {
            type: "structure",
            members: {
                SourceType: {},
                Connection: {
                    shape: "S9q"
                },
                Schema: {},
                Table: {},
                Database: {},
                TempDir: {},
                IamRole: {
                    shape: "S9q"
                },
                AdditionalOptions: {
                    shape: "S60"
                },
                SampleQuery: {},
                PreAction: {},
                PostAction: {},
                Action: {},
                Upsert: {
                    type: "boolean"
                },
                MergeAction: {},
                MergeWhenMatched: {},
                MergeWhenNotMatched: {},
                MergeClause: {},
                StagingTable: {},
                SelectedColumns: {
                    shape: "S9t"
                },
                AutoPushdown: {
                    type: "boolean"
                },
                TableSchema: {
                    shape: "S9t"
                }
            }
        },
        Sa6: {
            type: "map",
            key: {},
            value: {}
        },
        Sa9: {
            type: "structure",
            members: {
                Provider: {},
                Repository: {},
                Owner: {},
                Branch: {},
                Folder: {},
                LastCommitId: {},
                AuthStrategy: {},
                AuthToken: {}
            }
        },
        Sad: {
            type: "list",
            member: {
                shape: "S1c"
            }
        },
        Saf: {
            type: "list",
            member: {
                shape: "Sag"
            }
        },
        Sag: {
            type: "structure",
            members: {
                Values: {
                    shape: "S6"
                },
                DatabaseName: {},
                TableName: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                Parameters: {
                    shape: "Se"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                },
                CatalogId: {}
            }
        },
        Saq: {
            type: "structure",
            members: {
                type: {},
                configuration: {
                    shape: "Sar"
                },
                lastRun: {
                    shape: "Sat"
                }
            }
        },
        Sar: {
            type: "structure",
            members: {
                roleArn: {},
                enabled: {
                    type: "boolean"
                }
            }
        },
        Sat: {
            type: "structure",
            members: {
                eventType: {},
                startTimestamp: {
                    type: "timestamp"
                },
                endTimestamp: {
                    type: "timestamp"
                },
                metrics: {
                    type: "structure",
                    members: {
                        NumberOfBytesCompacted: {},
                        NumberOfFilesCompacted: {},
                        NumberOfDpus: {},
                        JobDurationInHour: {}
                    }
                },
                error: {}
            }
        },
        Sb1: {
            type: "list",
            member: {}
        },
        Sb3: {
            type: "list",
            member: {
                shape: "Sb4"
            }
        },
        Sb4: {
            type: "structure",
            members: {
                Name: {},
                WorkflowName: {},
                Id: {},
                Type: {},
                State: {},
                Description: {},
                Schedule: {},
                Actions: {
                    shape: "Sb8"
                },
                Predicate: {
                    shape: "Sba"
                },
                EventBatchingCondition: {
                    shape: "Sbh"
                }
            }
        },
        Sb8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    JobName: {},
                    Arguments: {
                        shape: "S58"
                    },
                    Timeout: {
                        type: "integer"
                    },
                    SecurityConfiguration: {},
                    NotificationProperty: {
                        shape: "S5d"
                    },
                    CrawlerName: {}
                }
            }
        },
        Sba: {
            type: "structure",
            members: {
                Logical: {},
                Conditions: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            LogicalOperator: {},
                            JobName: {},
                            State: {},
                            CrawlerName: {},
                            CrawlState: {}
                        }
                    }
                }
            }
        },
        Sbh: {
            type: "structure",
            required: [ "BatchSize" ],
            members: {
                BatchSize: {
                    type: "integer"
                },
                BatchWindow: {
                    type: "integer"
                }
            }
        },
        Sbl: {
            type: "list",
            member: {}
        },
        Sbo: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                DefaultRunProperties: {
                    shape: "Sbp"
                },
                CreatedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                LastRun: {
                    shape: "Sbq"
                },
                Graph: {
                    shape: "Sbt"
                },
                MaxConcurrentRuns: {
                    type: "integer"
                },
                BlueprintDetails: {
                    type: "structure",
                    members: {
                        BlueprintName: {},
                        RunId: {}
                    }
                }
            }
        },
        Sbp: {
            type: "map",
            key: {},
            value: {}
        },
        Sbq: {
            type: "structure",
            members: {
                Name: {},
                WorkflowRunId: {},
                PreviousRunId: {},
                WorkflowRunProperties: {
                    shape: "Sbp"
                },
                StartedOn: {
                    type: "timestamp"
                },
                CompletedOn: {
                    type: "timestamp"
                },
                Status: {},
                ErrorMessage: {},
                Statistics: {
                    type: "structure",
                    members: {
                        TotalActions: {
                            type: "integer"
                        },
                        TimeoutActions: {
                            type: "integer"
                        },
                        FailedActions: {
                            type: "integer"
                        },
                        StoppedActions: {
                            type: "integer"
                        },
                        SucceededActions: {
                            type: "integer"
                        },
                        RunningActions: {
                            type: "integer"
                        },
                        ErroredActions: {
                            type: "integer"
                        },
                        WaitingActions: {
                            type: "integer"
                        }
                    }
                },
                Graph: {
                    shape: "Sbt"
                },
                StartingEventBatchCondition: {
                    type: "structure",
                    members: {
                        BatchSize: {
                            type: "integer"
                        },
                        BatchWindow: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Sbt: {
            type: "structure",
            members: {
                Nodes: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Type: {},
                            Name: {},
                            UniqueId: {},
                            TriggerDetails: {
                                type: "structure",
                                members: {
                                    Trigger: {
                                        shape: "Sb4"
                                    }
                                }
                            },
                            JobDetails: {
                                type: "structure",
                                members: {
                                    JobRuns: {
                                        shape: "Sbz"
                                    }
                                }
                            },
                            CrawlerDetails: {
                                type: "structure",
                                members: {
                                    Crawls: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                State: {},
                                                StartedOn: {
                                                    type: "timestamp"
                                                },
                                                CompletedOn: {
                                                    type: "timestamp"
                                                },
                                                ErrorMessage: {},
                                                LogGroup: {},
                                                LogStream: {}
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Edges: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            SourceId: {},
                            DestinationId: {}
                        }
                    }
                }
            }
        },
        Sbz: {
            type: "list",
            member: {
                shape: "Sc0"
            }
        },
        Sc0: {
            type: "structure",
            members: {
                Id: {},
                Attempt: {
                    type: "integer"
                },
                PreviousRunId: {},
                TriggerName: {},
                JobName: {},
                StartedOn: {
                    type: "timestamp"
                },
                LastModifiedOn: {
                    type: "timestamp"
                },
                CompletedOn: {
                    type: "timestamp"
                },
                JobRunState: {},
                Arguments: {
                    shape: "S58"
                },
                ErrorMessage: {},
                PredecessorRuns: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            JobName: {},
                            RunId: {}
                        }
                    }
                },
                AllocatedCapacity: {
                    deprecated: true,
                    deprecatedMessage: "This property is deprecated, use MaxCapacity instead.",
                    type: "integer"
                },
                ExecutionTime: {
                    type: "integer"
                },
                Timeout: {
                    type: "integer"
                },
                MaxCapacity: {
                    type: "double"
                },
                WorkerType: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                SecurityConfiguration: {},
                LogGroupName: {},
                NotificationProperty: {
                    shape: "S5d"
                },
                GlueVersion: {},
                DPUSeconds: {
                    type: "double"
                },
                ExecutionClass: {}
            }
        },
        Scm: {
            type: "list",
            member: {}
        },
        Sd7: {
            type: "map",
            key: {},
            value: {}
        },
        Sdo: {
            type: "list",
            member: {}
        },
        Sdp: {
            type: "list",
            member: {}
        },
        Sdt: {
            type: "structure",
            required: [ "Name", "ConnectionType", "ConnectionProperties" ],
            members: {
                Name: {},
                Description: {},
                ConnectionType: {},
                MatchCriteria: {
                    shape: "Sdv"
                },
                ConnectionProperties: {
                    shape: "Sdw"
                },
                PhysicalConnectionRequirements: {
                    shape: "Sdy"
                }
            }
        },
        Sdv: {
            type: "list",
            member: {}
        },
        Sdw: {
            type: "map",
            key: {},
            value: {}
        },
        Sdy: {
            type: "structure",
            members: {
                SubnetId: {},
                SecurityGroupIdList: {
                    type: "list",
                    member: {}
                },
                AvailabilityZone: {}
            }
        },
        Se7: {
            type: "structure",
            required: [ "TableName", "DatabaseName" ],
            members: {
                TableName: {},
                DatabaseName: {},
                CatalogId: {}
            }
        },
        Sea: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                LocationUri: {},
                Parameters: {
                    shape: "Se"
                },
                CreateTableDefaultPermissions: {
                    shape: "Sec"
                },
                TargetDatabase: {
                    shape: "Sei"
                },
                FederatedDatabase: {
                    shape: "Sej"
                }
            }
        },
        Sec: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Principal: {
                        type: "structure",
                        members: {
                            DataLakePrincipalIdentifier: {}
                        }
                    },
                    Permissions: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        Sei: {
            type: "structure",
            members: {
                CatalogId: {},
                DatabaseName: {},
                Region: {}
            }
        },
        Sej: {
            type: "structure",
            members: {
                Identifier: {},
                ConnectionName: {}
            }
        },
        Ser: {
            type: "list",
            member: {
                shape: "S44"
            }
        },
        Ses: {
            type: "structure",
            required: [ "TransformType" ],
            members: {
                TransformType: {},
                FindMatchesParameters: {
                    type: "structure",
                    members: {
                        PrimaryKeyColumnName: {},
                        PrecisionRecallTradeoff: {
                            type: "double"
                        },
                        AccuracyCostTradeoff: {
                            type: "double"
                        },
                        EnforceProvidedLabels: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        Sew: {
            type: "structure",
            members: {
                MlUserDataEncryption: {
                    type: "structure",
                    required: [ "MlUserDataEncryptionMode" ],
                    members: {
                        MlUserDataEncryptionMode: {},
                        KmsKeyId: {}
                    }
                },
                TaskRunSecurityConfigurationName: {}
            }
        },
        Sf3: {
            type: "structure",
            required: [ "Keys", "IndexName" ],
            members: {
                Keys: {
                    type: "list",
                    member: {}
                },
                IndexName: {}
            }
        },
        Sf9: {
            type: "structure",
            members: {
                RegistryName: {},
                RegistryArn: {}
            }
        },
        Sfg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Id", "NodeType", "Args" ],
                members: {
                    Id: {},
                    NodeType: {},
                    Args: {
                        shape: "Sfk"
                    },
                    LineNumber: {
                        type: "integer"
                    }
                }
            }
        },
        Sfk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {},
                    Param: {
                        type: "boolean"
                    }
                }
            }
        },
        Sfo: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Source", "Target" ],
                members: {
                    Source: {},
                    Target: {},
                    TargetParameter: {}
                }
            }
        },
        Sfv: {
            type: "structure",
            members: {
                S3Encryption: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            S3EncryptionMode: {},
                            KmsKeyArn: {}
                        }
                    }
                },
                CloudWatchEncryption: {
                    type: "structure",
                    members: {
                        CloudWatchEncryptionMode: {},
                        KmsKeyArn: {}
                    }
                },
                JobBookmarksEncryption: {
                    type: "structure",
                    members: {
                        JobBookmarksEncryptionMode: {},
                        KmsKeyArn: {}
                    }
                }
            }
        },
        Sg7: {
            type: "structure",
            members: {
                Name: {},
                PythonVersion: {}
            }
        },
        Sg8: {
            type: "map",
            key: {},
            value: {}
        },
        Sgb: {
            type: "structure",
            members: {
                Id: {},
                CreatedOn: {
                    type: "timestamp"
                },
                Status: {},
                ErrorMessage: {},
                Description: {},
                Role: {},
                Command: {
                    shape: "Sg7"
                },
                DefaultArguments: {
                    shape: "Sg8"
                },
                Connections: {
                    shape: "S59"
                },
                Progress: {
                    type: "double"
                },
                MaxCapacity: {
                    type: "double"
                },
                SecurityConfiguration: {},
                GlueVersion: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                WorkerType: {},
                CompletedOn: {
                    type: "timestamp"
                },
                ExecutionTime: {
                    type: "double"
                },
                DPUSeconds: {
                    type: "double"
                },
                IdleTimeout: {
                    type: "integer"
                }
            }
        },
        Sgg: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                Owner: {},
                LastAccessTime: {
                    type: "timestamp"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                },
                Retention: {
                    type: "integer"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                PartitionKeys: {
                    shape: "Sa"
                },
                ViewOriginalText: {},
                ViewExpandedText: {},
                TableType: {},
                Parameters: {
                    shape: "Se"
                },
                TargetTable: {
                    shape: "Sgk"
                }
            }
        },
        Sgk: {
            type: "structure",
            members: {
                CatalogId: {},
                DatabaseName: {},
                Name: {},
                Region: {}
            }
        },
        Sgv: {
            type: "structure",
            members: {
                FunctionName: {},
                ClassName: {},
                OwnerName: {},
                OwnerType: {},
                ResourceUris: {
                    shape: "Sgx"
                }
            }
        },
        Sgx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ResourceType: {},
                    Uri: {}
                }
            }
        },
        Siu: {
            type: "structure",
            members: {
                BlueprintName: {},
                RunId: {},
                WorkflowName: {},
                State: {},
                StartedOn: {
                    type: "timestamp"
                },
                CompletedOn: {
                    type: "timestamp"
                },
                ErrorMessage: {},
                RollbackErrorMessage: {},
                Parameters: {},
                RoleArn: {}
            }
        },
        Sj7: {
            type: "structure",
            members: {
                GrokClassifier: {
                    type: "structure",
                    required: [ "Name", "Classification", "GrokPattern" ],
                    members: {
                        Name: {},
                        Classification: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        GrokPattern: {},
                        CustomPatterns: {}
                    }
                },
                XMLClassifier: {
                    type: "structure",
                    required: [ "Name", "Classification" ],
                    members: {
                        Name: {},
                        Classification: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        RowTag: {}
                    }
                },
                JsonClassifier: {
                    type: "structure",
                    required: [ "Name", "JsonPath" ],
                    members: {
                        Name: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        JsonPath: {}
                    }
                },
                CsvClassifier: {
                    type: "structure",
                    required: [ "Name" ],
                    members: {
                        Name: {},
                        CreationTime: {
                            type: "timestamp"
                        },
                        LastUpdated: {
                            type: "timestamp"
                        },
                        Version: {
                            type: "long"
                        },
                        Delimiter: {},
                        QuoteSymbol: {},
                        ContainsHeader: {},
                        Header: {
                            shape: "Sdo"
                        },
                        DisableValueTrimming: {
                            type: "boolean"
                        },
                        AllowSingleColumn: {
                            type: "boolean"
                        },
                        CustomDatatypeConfigured: {
                            type: "boolean"
                        },
                        CustomDatatypes: {
                            shape: "Sdp"
                        },
                        Serde: {}
                    }
                }
            }
        },
        Sjh: {
            type: "list",
            member: {}
        },
        Sjj: {
            type: "list",
            member: {
                shape: "Sjk"
            }
        },
        Sjk: {
            type: "structure",
            required: [ "ColumnName", "ColumnType", "AnalyzedTime", "StatisticsData" ],
            members: {
                ColumnName: {},
                ColumnType: {},
                AnalyzedTime: {
                    type: "timestamp"
                },
                StatisticsData: {
                    type: "structure",
                    required: [ "Type" ],
                    members: {
                        Type: {},
                        BooleanColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfTrues", "NumberOfFalses", "NumberOfNulls" ],
                            members: {
                                NumberOfTrues: {
                                    type: "long"
                                },
                                NumberOfFalses: {
                                    type: "long"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                }
                            }
                        },
                        DateColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    type: "timestamp"
                                },
                                MaximumValue: {
                                    type: "timestamp"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        DecimalColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    shape: "Sjs"
                                },
                                MaximumValue: {
                                    shape: "Sjs"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        DoubleColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    type: "double"
                                },
                                MaximumValue: {
                                    type: "double"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        LongColumnStatisticsData: {
                            type: "structure",
                            required: [ "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MinimumValue: {
                                    type: "long"
                                },
                                MaximumValue: {
                                    type: "long"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        StringColumnStatisticsData: {
                            type: "structure",
                            required: [ "MaximumLength", "AverageLength", "NumberOfNulls", "NumberOfDistinctValues" ],
                            members: {
                                MaximumLength: {
                                    type: "long"
                                },
                                AverageLength: {
                                    type: "double"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                },
                                NumberOfDistinctValues: {
                                    type: "long"
                                }
                            }
                        },
                        BinaryColumnStatisticsData: {
                            type: "structure",
                            required: [ "MaximumLength", "AverageLength", "NumberOfNulls" ],
                            members: {
                                MaximumLength: {
                                    type: "long"
                                },
                                AverageLength: {
                                    type: "double"
                                },
                                NumberOfNulls: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sjs: {
            type: "structure",
            required: [ "UnscaledValue", "Scale" ],
            members: {
                UnscaledValue: {
                    type: "blob"
                },
                Scale: {
                    type: "integer"
                }
            }
        },
        Sk1: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ColumnName: {},
                    Error: {
                        shape: "S14"
                    }
                }
            }
        },
        Sk7: {
            type: "structure",
            members: {
                CustomerId: {},
                ColumnStatisticsTaskRunId: {},
                DatabaseName: {},
                TableName: {},
                ColumnNameList: {
                    shape: "Sk9"
                },
                CatalogID: {},
                Role: {},
                SampleSize: {
                    type: "double"
                },
                SecurityConfiguration: {},
                NumberOfWorkers: {
                    type: "integer"
                },
                WorkerType: {},
                Status: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdated: {
                    type: "timestamp"
                },
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                ErrorMessage: {},
                DPUSeconds: {
                    type: "double"
                }
            }
        },
        Sk9: {
            type: "list",
            member: {}
        },
        Ski: {
            type: "structure",
            members: {
                Name: {},
                Description: {},
                ConnectionType: {},
                MatchCriteria: {
                    shape: "Sdv"
                },
                ConnectionProperties: {
                    shape: "Sdw"
                },
                PhysicalConnectionRequirements: {
                    shape: "Sdy"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastUpdatedTime: {
                    type: "timestamp"
                },
                LastUpdatedBy: {}
            }
        },
        Skz: {
            type: "structure",
            members: {
                EncryptionAtRest: {
                    type: "structure",
                    required: [ "CatalogEncryptionMode" ],
                    members: {
                        CatalogEncryptionMode: {},
                        SseAwsKmsKeyId: {}
                    }
                },
                ConnectionPasswordEncryption: {
                    type: "structure",
                    required: [ "ReturnConnectionPasswordEncrypted" ],
                    members: {
                        ReturnConnectionPasswordEncrypted: {
                            type: "boolean"
                        },
                        AwsKmsKeyId: {}
                    }
                }
            }
        },
        Slb: {
            type: "structure",
            members: {
                CloudWatchMetricsEnabled: {
                    type: "boolean"
                },
                ResultsS3Prefix: {}
            }
        },
        Slc: {
            type: "list",
            member: {}
        },
        Sle: {
            type: "map",
            key: {},
            value: {
                shape: "S43"
            }
        },
        Slh: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                Description: {},
                LocationUri: {},
                Parameters: {
                    shape: "Se"
                },
                CreateTime: {
                    type: "timestamp"
                },
                CreateTableDefaultPermissions: {
                    shape: "Sec"
                },
                TargetDatabase: {
                    shape: "Sei"
                },
                CatalogId: {},
                FederatedDatabase: {
                    shape: "Sej"
                }
            }
        },
        Slz: {
            type: "structure",
            members: {
                JobName: {},
                Version: {
                    type: "integer"
                },
                Run: {
                    type: "integer"
                },
                Attempt: {
                    type: "integer"
                },
                PreviousRunId: {},
                RunId: {},
                JobBookmark: {}
            }
        },
        Sm9: {
            type: "structure",
            members: {
                TaskType: {},
                ImportLabelsTaskRunProperties: {
                    type: "structure",
                    members: {
                        InputS3Path: {},
                        Replace: {
                            type: "boolean"
                        }
                    }
                },
                ExportLabelsTaskRunProperties: {
                    type: "structure",
                    members: {
                        OutputS3Path: {}
                    }
                },
                LabelingSetGenerationTaskRunProperties: {
                    type: "structure",
                    members: {
                        OutputS3Path: {}
                    }
                },
                FindMatchesTaskRunProperties: {
                    type: "structure",
                    members: {
                        JobId: {},
                        JobName: {},
                        JobRunId: {}
                    }
                }
            }
        },
        Sms: {
            type: "structure",
            required: [ "TransformType" ],
            members: {
                TransformType: {},
                FindMatchesMetrics: {
                    type: "structure",
                    members: {
                        AreaUnderPRCurve: {
                            type: "double"
                        },
                        Precision: {
                            type: "double"
                        },
                        Recall: {
                            type: "double"
                        },
                        F1: {
                            type: "double"
                        },
                        ConfusionMatrix: {
                            type: "structure",
                            members: {
                                NumTruePositives: {
                                    type: "long"
                                },
                                NumFalsePositives: {
                                    type: "long"
                                },
                                NumTrueNegatives: {
                                    type: "long"
                                },
                                NumFalseNegatives: {
                                    type: "long"
                                }
                            }
                        },
                        ColumnImportances: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    ColumnName: {},
                                    Importance: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Smz: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {},
                    DataType: {}
                }
            }
        },
        Sn2: {
            type: "structure",
            members: {
                Name: {},
                TransformType: {},
                Status: {},
                GlueVersion: {},
                CreatedBefore: {
                    type: "timestamp"
                },
                CreatedAfter: {
                    type: "timestamp"
                },
                LastModifiedBefore: {
                    type: "timestamp"
                },
                LastModifiedAfter: {
                    type: "timestamp"
                },
                Schema: {
                    shape: "Smz"
                }
            }
        },
        Sn3: {
            type: "structure",
            required: [ "Column", "SortDirection" ],
            members: {
                Column: {},
                SortDirection: {}
            }
        },
        Sn9: {
            type: "structure",
            required: [ "DatabaseName", "TableName" ],
            members: {
                DatabaseName: {},
                TableName: {}
            }
        },
        Sna: {
            type: "list",
            member: {
                shape: "Sn9"
            }
        },
        Snb: {
            type: "structure",
            members: {
                Jdbc: {
                    shape: "Sfk"
                },
                S3: {
                    shape: "Sfk"
                },
                DynamoDB: {
                    shape: "Sfk"
                }
            }
        },
        Snd: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SourceTable: {},
                    SourcePath: {},
                    SourceType: {},
                    TargetTable: {},
                    TargetPath: {},
                    TargetType: {}
                }
            }
        },
        Snw: {
            type: "structure",
            required: [ "SegmentNumber", "TotalSegments" ],
            members: {
                SegmentNumber: {
                    type: "integer"
                },
                TotalSegments: {
                    type: "integer"
                }
            }
        },
        Soj: {
            type: "structure",
            members: {
                LatestVersion: {
                    type: "boolean"
                },
                VersionNumber: {
                    type: "long"
                }
            }
        },
        Sos: {
            type: "structure",
            members: {
                Name: {},
                CreatedTimeStamp: {
                    type: "timestamp"
                },
                EncryptionConfiguration: {
                    shape: "Sfv"
                }
            }
        },
        Sp0: {
            type: "structure",
            members: {
                Id: {
                    type: "integer"
                },
                Code: {},
                State: {},
                Output: {
                    type: "structure",
                    members: {
                        Data: {
                            type: "structure",
                            members: {
                                TextPlain: {}
                            }
                        },
                        ExecutionCount: {
                            type: "integer"
                        },
                        Status: {},
                        ErrorName: {},
                        ErrorValue: {},
                        Traceback: {
                            shape: "S5a"
                        }
                    }
                },
                Progress: {
                    type: "double"
                },
                StartedOn: {
                    type: "long"
                },
                CompletedOn: {
                    type: "long"
                }
            }
        },
        Sp7: {
            type: "structure",
            required: [ "Name" ],
            members: {
                Name: {},
                DatabaseName: {},
                Description: {},
                Owner: {},
                CreateTime: {
                    type: "timestamp"
                },
                UpdateTime: {
                    type: "timestamp"
                },
                LastAccessTime: {
                    type: "timestamp"
                },
                LastAnalyzedTime: {
                    type: "timestamp"
                },
                Retention: {
                    type: "integer"
                },
                StorageDescriptor: {
                    shape: "S9"
                },
                PartitionKeys: {
                    shape: "Sa"
                },
                ViewOriginalText: {},
                ViewExpandedText: {},
                TableType: {},
                Parameters: {
                    shape: "Se"
                },
                CreatedBy: {},
                IsRegisteredWithLakeFormation: {
                    type: "boolean"
                },
                TargetTable: {
                    shape: "Sgk"
                },
                CatalogId: {},
                VersionId: {},
                FederatedTable: {
                    type: "structure",
                    members: {
                        Identifier: {},
                        DatabaseIdentifier: {},
                        ConnectionName: {}
                    }
                }
            }
        },
        Spd: {
            type: "structure",
            members: {
                Table: {
                    shape: "Sp7"
                },
                VersionId: {}
            }
        },
        Spk: {
            type: "list",
            member: {
                shape: "Sp7"
            }
        },
        Sps: {
            type: "structure",
            members: {
                AdditionalAuditContext: {},
                RequestedColumns: {
                    type: "list",
                    member: {}
                },
                AllColumnsRequested: {
                    type: "boolean"
                }
            }
        },
        Spv: {
            type: "list",
            member: {}
        },
        Sq8: {
            type: "structure",
            members: {
                FunctionName: {},
                DatabaseName: {},
                ClassName: {},
                OwnerName: {},
                OwnerType: {},
                CreateTime: {
                    type: "timestamp"
                },
                ResourceUris: {
                    shape: "Sgx"
                },
                CatalogId: {}
            }
        },
        St0: {
            type: "structure",
            members: {
                MetadataKey: {},
                MetadataValue: {}
            }
        },
        Stl: {
            type: "list",
            member: {}
        },
        Sve: {
            type: "list",
            member: {
                shape: "Sjk"
            }
        },
        Svg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ColumnStatistics: {
                        shape: "Sjk"
                    },
                    Error: {
                        shape: "S14"
                    }
                }
            }
        }
    },
    paginators: {
        GetBlueprintRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetClassifiers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetColumnStatisticsTaskRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetConnections: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCrawlerMetrics: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetCrawlers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetDatabases: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetDevEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetJobRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMLTaskRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetMLTransforms: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetPartitionIndexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "PartitionIndexDescriptorList"
        },
        GetPartitions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetResourcePolicies: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "GetResourcePoliciesResponseList"
        },
        GetSecurityConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "SecurityConfigurations"
        },
        GetTableVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetTriggers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetUnfilteredPartitionsMetadata: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetUserDefinedFunctions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        GetWorkflowRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListBlueprints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListColumnStatisticsTaskRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCrawlers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListCustomEntityTypes: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDataQualityResults: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDataQualityRuleRecommendationRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDataQualityRulesetEvaluationRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDataQualityRulesets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDevEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListMLTransforms: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListRegistries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Registries"
        },
        ListSchemaVersions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schemas"
        },
        ListSchemas: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Schemas"
        },
        ListSessions: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTableOptimizerRuns: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTriggers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListWorkflows: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        SearchTables: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["mobile"] = {};

AWS.Mobile = AWS.Service.defineService("mobile", [ "2017-07-01" ]);

AWS.apiLoader.services["mobile"]["2017-07-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-01",
        endpointPrefix: "mobile",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Mobile",
        serviceId: "Mobile",
        signatureVersion: "v4",
        signingName: "AWSMobileHubService",
        uid: "mobile-2017-07-01"
    },
    operations: {
        CreateProject: {
            http: {
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    region: {
                        location: "querystring",
                        locationName: "region"
                    },
                    contents: {
                        type: "blob"
                    },
                    snapshotId: {
                        location: "querystring",
                        locationName: "snapshotId"
                    }
                },
                payload: "contents"
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S7"
                    }
                }
            }
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{projectId}"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deletedResources: {
                        shape: "Sc"
                    },
                    orphanedResources: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeBundle: {
            http: {
                method: "GET",
                requestUri: "/bundles/{bundleId}"
            },
            input: {
                type: "structure",
                required: [ "bundleId" ],
                members: {
                    bundleId: {
                        location: "uri",
                        locationName: "bundleId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "Sq"
                    }
                }
            }
        },
        DescribeProject: {
            http: {
                method: "GET",
                requestUri: "/project"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    },
                    syncFromResources: {
                        location: "querystring",
                        locationName: "syncFromResources",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S7"
                    }
                }
            }
        },
        ExportBundle: {
            http: {
                requestUri: "/bundles/{bundleId}"
            },
            input: {
                type: "structure",
                required: [ "bundleId" ],
                members: {
                    bundleId: {
                        location: "uri",
                        locationName: "bundleId"
                    },
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    },
                    platform: {
                        location: "querystring",
                        locationName: "platform"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    downloadUrl: {}
                }
            }
        },
        ExportProject: {
            http: {
                requestUri: "/exports/{projectId}"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    projectId: {
                        location: "uri",
                        locationName: "projectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    downloadUrl: {},
                    shareUrl: {},
                    snapshotId: {}
                }
            }
        },
        ListBundles: {
            http: {
                method: "GET",
                requestUri: "/bundles"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    bundleList: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects"
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                projectId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        UpdateProject: {
            http: {
                requestUri: "/update"
            },
            input: {
                type: "structure",
                required: [ "projectId" ],
                members: {
                    contents: {
                        type: "blob"
                    },
                    projectId: {
                        location: "querystring",
                        locationName: "projectId"
                    }
                },
                payload: "contents"
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        shape: "S7"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                name: {},
                projectId: {},
                region: {},
                state: {},
                createdDate: {
                    type: "timestamp"
                },
                lastUpdatedDate: {
                    type: "timestamp"
                },
                consoleUrl: {},
                resources: {
                    shape: "Sc"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    type: {},
                    name: {},
                    arn: {},
                    feature: {},
                    attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                bundleId: {},
                title: {},
                version: {},
                description: {},
                iconUrl: {},
                availablePlatforms: {
                    type: "list",
                    member: {}
                }
            }
        }
    },
    paginators: {
        ListBundles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["pricing"] = {};

AWS.Pricing = AWS.Service.defineService("pricing", [ "2017-10-15" ]);

AWS.apiLoader.services["pricing"]["2017-10-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-15",
        endpointPrefix: "api.pricing",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Pricing",
        serviceFullName: "AWS Price List Service",
        serviceId: "Pricing",
        signatureVersion: "v4",
        signingName: "pricing",
        targetPrefix: "AWSPriceListService",
        uid: "pricing-2017-10-15"
    },
    operations: {
        DescribeServices: {
            input: {
                type: "structure",
                members: {
                    ServiceCode: {},
                    FormatVersion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Services: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ServiceCode" ],
                            members: {
                                ServiceCode: {},
                                AttributeNames: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    FormatVersion: {},
                    NextToken: {}
                }
            }
        },
        GetAttributeValues: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "AttributeName" ],
                members: {
                    ServiceCode: {},
                    AttributeName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AttributeValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetPriceListFileUrl: {
            input: {
                type: "structure",
                required: [ "PriceListArn", "FileFormat" ],
                members: {
                    PriceListArn: {},
                    FileFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Url: {}
                }
            }
        },
        GetProducts: {
            input: {
                type: "structure",
                required: [ "ServiceCode" ],
                members: {
                    ServiceCode: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Type", "Field", "Value" ],
                            members: {
                                Type: {},
                                Field: {},
                                Value: {}
                            }
                        }
                    },
                    FormatVersion: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FormatVersion: {},
                    PriceList: {
                        type: "list",
                        member: {
                            jsonvalue: true
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPriceLists: {
            input: {
                type: "structure",
                required: [ "ServiceCode", "EffectiveDate", "CurrencyCode" ],
                members: {
                    ServiceCode: {},
                    EffectiveDate: {
                        type: "timestamp"
                    },
                    RegionCode: {},
                    CurrencyCode: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PriceLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PriceListArn: {},
                                RegionCode: {},
                                CurrencyCode: {},
                                FileFormats: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        DescribeServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Services"
        },
        GetAttributeValues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AttributeValues"
        },
        GetProducts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PriceList"
        },
        ListPriceLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PriceLists"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["costexplorer"] = {};

AWS.CostExplorer = AWS.Service.defineService("costexplorer", [ "2017-10-25" ]);

AWS.apiLoader.services["costexplorer"]["2017-10-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-10-25",
        endpointPrefix: "ce",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "AWS Cost Explorer",
        serviceFullName: "AWS Cost Explorer Service",
        serviceId: "Cost Explorer",
        signatureVersion: "v4",
        signingName: "ce",
        targetPrefix: "AWSInsightsIndexService",
        uid: "ce-2017-10-25"
    },
    operations: {
        CreateAnomalyMonitor: {
            input: {
                type: "structure",
                required: [ "AnomalyMonitor" ],
                members: {
                    AnomalyMonitor: {
                        shape: "S2"
                    },
                    ResourceTags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            }
        },
        CreateAnomalySubscription: {
            input: {
                type: "structure",
                required: [ "AnomalySubscription" ],
                members: {
                    AnomalySubscription: {
                        shape: "Sq"
                    },
                    ResourceTags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        CreateCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "Name", "RuleVersion", "Rules" ],
                members: {
                    Name: {},
                    EffectiveStart: {},
                    RuleVersion: {},
                    Rules: {
                        shape: "S14"
                    },
                    DefaultValue: {},
                    SplitChargeRules: {
                        shape: "S1a"
                    },
                    ResourceTags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryArn: {},
                    EffectiveStart: {}
                }
            }
        },
        DeleteAnomalyMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAnomalySubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "CostCategoryArn" ],
                members: {
                    CostCategoryArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryArn: {},
                    EffectiveEnd: {}
                }
            }
        },
        DescribeCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "CostCategoryArn" ],
                members: {
                    CostCategoryArn: {},
                    EffectiveOn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategory: {
                        type: "structure",
                        required: [ "CostCategoryArn", "EffectiveStart", "Name", "RuleVersion", "Rules" ],
                        members: {
                            CostCategoryArn: {},
                            EffectiveStart: {},
                            EffectiveEnd: {},
                            Name: {},
                            RuleVersion: {},
                            Rules: {
                                shape: "S14"
                            },
                            SplitChargeRules: {
                                shape: "S1a"
                            },
                            ProcessingStatus: {
                                shape: "S1s"
                            },
                            DefaultValue: {}
                        }
                    }
                }
            }
        },
        GetAnomalies: {
            input: {
                type: "structure",
                required: [ "DateInterval" ],
                members: {
                    MonitorArn: {},
                    DateInterval: {
                        type: "structure",
                        required: [ "StartDate" ],
                        members: {
                            StartDate: {},
                            EndDate: {}
                        }
                    },
                    Feedback: {},
                    TotalImpact: {
                        type: "structure",
                        required: [ "NumericOperator", "StartValue" ],
                        members: {
                            NumericOperator: {},
                            StartValue: {
                                type: "double"
                            },
                            EndValue: {
                                type: "double"
                            }
                        }
                    },
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Anomalies" ],
                members: {
                    Anomalies: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AnomalyId", "AnomalyScore", "Impact", "MonitorArn" ],
                            members: {
                                AnomalyId: {},
                                AnomalyStartDate: {},
                                AnomalyEndDate: {},
                                DimensionValue: {},
                                RootCauses: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Service: {},
                                            Region: {},
                                            LinkedAccount: {},
                                            UsageType: {},
                                            LinkedAccountName: {}
                                        }
                                    }
                                },
                                AnomalyScore: {
                                    type: "structure",
                                    required: [ "MaxScore", "CurrentScore" ],
                                    members: {
                                        MaxScore: {
                                            type: "double"
                                        },
                                        CurrentScore: {
                                            type: "double"
                                        }
                                    }
                                },
                                Impact: {
                                    type: "structure",
                                    required: [ "MaxImpact" ],
                                    members: {
                                        MaxImpact: {
                                            type: "double"
                                        },
                                        TotalImpact: {
                                            type: "double"
                                        },
                                        TotalActualSpend: {
                                            type: "double"
                                        },
                                        TotalExpectedSpend: {
                                            type: "double"
                                        },
                                        TotalImpactPercentage: {
                                            type: "double"
                                        }
                                    }
                                },
                                MonitorArn: {},
                                Feedback: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetAnomalyMonitors: {
            input: {
                type: "structure",
                members: {
                    MonitorArnList: {
                        shape: "Sb"
                    },
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AnomalyMonitors" ],
                members: {
                    AnomalyMonitors: {
                        type: "list",
                        member: {
                            shape: "S2"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetAnomalySubscriptions: {
            input: {
                type: "structure",
                members: {
                    SubscriptionArnList: {
                        shape: "Sb"
                    },
                    MonitorArn: {},
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AnomalySubscriptions" ],
                members: {
                    AnomalySubscriptions: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetCostAndUsage: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Granularity", "Metrics" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S2k"
                    },
                    GroupBy: {
                        shape: "S2m"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPageToken: {},
                    GroupDefinitions: {
                        shape: "S2m"
                    },
                    ResultsByTime: {
                        shape: "S2r"
                    },
                    DimensionValueAttributes: {
                        shape: "S32"
                    }
                }
            }
        },
        GetCostAndUsageWithResources: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Granularity", "Filter" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S2k"
                    },
                    GroupBy: {
                        shape: "S2m"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPageToken: {},
                    GroupDefinitions: {
                        shape: "S2m"
                    },
                    ResultsByTime: {
                        shape: "S2r"
                    },
                    DimensionValueAttributes: {
                        shape: "S32"
                    }
                }
            }
        },
        GetCostCategories: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    SearchString: {},
                    TimePeriod: {
                        shape: "S2i"
                    },
                    CostCategoryName: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S3b"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ReturnSize", "TotalSize" ],
                members: {
                    NextPageToken: {},
                    CostCategoryNames: {
                        type: "list",
                        member: {}
                    },
                    CostCategoryValues: {
                        shape: "S3i"
                    },
                    ReturnSize: {
                        type: "integer"
                    },
                    TotalSize: {
                        type: "integer"
                    }
                }
            }
        },
        GetCostForecast: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Metric", "Granularity" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Metric: {},
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    PredictionIntervalLevel: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Total: {
                        shape: "S2u"
                    },
                    ForecastResultsByTime: {
                        shape: "S3n"
                    }
                }
            }
        },
        GetDimensionValues: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Dimension" ],
                members: {
                    SearchString: {},
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Dimension: {},
                    Context: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S3b"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DimensionValues", "ReturnSize", "TotalSize" ],
                members: {
                    DimensionValues: {
                        shape: "S32"
                    },
                    ReturnSize: {
                        type: "integer"
                    },
                    TotalSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            }
        },
        GetReservationCoverage: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    GroupBy: {
                        shape: "S2m"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S2k"
                    },
                    NextPageToken: {},
                    SortBy: {
                        shape: "S3c"
                    },
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CoveragesByTime" ],
                members: {
                    CoveragesByTime: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimePeriod: {
                                    shape: "S2i"
                                },
                                Groups: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Attributes: {
                                                shape: "S34"
                                            },
                                            Coverage: {
                                                shape: "S3y"
                                            }
                                        }
                                    }
                                },
                                Total: {
                                    shape: "S3y"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S3y"
                    },
                    NextPageToken: {}
                }
            }
        },
        GetReservationPurchaseRecommendation: {
            input: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    AccountId: {},
                    Service: {},
                    Filter: {
                        shape: "S7"
                    },
                    AccountScope: {},
                    LookbackPeriodInDays: {},
                    TermInYears: {},
                    PaymentOption: {},
                    ServiceSpecification: {
                        shape: "S4g"
                    },
                    PageSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        type: "structure",
                        members: {
                            RecommendationId: {},
                            GenerationTimestamp: {}
                        }
                    },
                    Recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountScope: {},
                                LookbackPeriodInDays: {},
                                TermInYears: {},
                                PaymentOption: {},
                                ServiceSpecification: {
                                    shape: "S4g"
                                },
                                RecommendationDetails: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            AccountId: {},
                                            InstanceDetails: {
                                                type: "structure",
                                                members: {
                                                    EC2InstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            InstanceType: {},
                                                            Region: {},
                                                            AvailabilityZone: {},
                                                            Platform: {},
                                                            Tenancy: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    RDSInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            InstanceType: {},
                                                            Region: {},
                                                            DatabaseEngine: {},
                                                            DatabaseEdition: {},
                                                            DeploymentOption: {},
                                                            LicenseModel: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    RedshiftInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            NodeType: {},
                                                            Region: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    ElastiCacheInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            NodeType: {},
                                                            Region: {},
                                                            ProductDescription: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    ESInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            InstanceClass: {},
                                                            InstanceSize: {},
                                                            Region: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    },
                                                    MemoryDBInstanceDetails: {
                                                        type: "structure",
                                                        members: {
                                                            Family: {},
                                                            NodeType: {},
                                                            Region: {},
                                                            CurrentGeneration: {
                                                                type: "boolean"
                                                            },
                                                            SizeFlexEligible: {
                                                                type: "boolean"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            RecommendedNumberOfInstancesToPurchase: {},
                                            RecommendedNormalizedUnitsToPurchase: {},
                                            MinimumNumberOfInstancesUsedPerHour: {},
                                            MinimumNormalizedUnitsUsedPerHour: {},
                                            MaximumNumberOfInstancesUsedPerHour: {},
                                            MaximumNormalizedUnitsUsedPerHour: {},
                                            AverageNumberOfInstancesUsedPerHour: {},
                                            AverageNormalizedUnitsUsedPerHour: {},
                                            AverageUtilization: {},
                                            EstimatedBreakEvenInMonths: {},
                                            CurrencyCode: {},
                                            EstimatedMonthlySavingsAmount: {},
                                            EstimatedMonthlySavingsPercentage: {},
                                            EstimatedMonthlyOnDemandCost: {},
                                            EstimatedReservationCostForLookbackPeriod: {},
                                            UpfrontCost: {},
                                            RecurringStandardMonthlyCost: {}
                                        }
                                    }
                                },
                                RecommendationSummary: {
                                    type: "structure",
                                    members: {
                                        TotalEstimatedMonthlySavingsAmount: {},
                                        TotalEstimatedMonthlySavingsPercentage: {},
                                        CurrencyCode: {}
                                    }
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetReservationUtilization: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    GroupBy: {
                        shape: "S2m"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S3c"
                    },
                    NextPageToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UtilizationsByTime" ],
                members: {
                    UtilizationsByTime: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimePeriod: {
                                    shape: "S2i"
                                },
                                Groups: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Key: {},
                                            Value: {},
                                            Attributes: {
                                                shape: "S34"
                                            },
                                            Utilization: {
                                                shape: "S56"
                                            }
                                        }
                                    }
                                },
                                Total: {
                                    shape: "S56"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S56"
                    },
                    NextPageToken: {}
                }
            }
        },
        GetRightsizingRecommendation: {
            input: {
                type: "structure",
                required: [ "Service" ],
                members: {
                    Filter: {
                        shape: "S7"
                    },
                    Configuration: {
                        shape: "S5p"
                    },
                    Service: {},
                    PageSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        type: "structure",
                        members: {
                            RecommendationId: {},
                            GenerationTimestamp: {},
                            LookbackPeriodInDays: {},
                            AdditionalMetadata: {}
                        }
                    },
                    Summary: {
                        type: "structure",
                        members: {
                            TotalRecommendationCount: {},
                            EstimatedTotalMonthlySavingsAmount: {},
                            SavingsCurrencyCode: {},
                            SavingsPercentage: {}
                        }
                    },
                    RightsizingRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                CurrentInstance: {
                                    type: "structure",
                                    members: {
                                        ResourceId: {},
                                        InstanceName: {},
                                        Tags: {
                                            type: "list",
                                            member: {
                                                shape: "Sf"
                                            }
                                        },
                                        ResourceDetails: {
                                            shape: "S5y"
                                        },
                                        ResourceUtilization: {
                                            shape: "S60"
                                        },
                                        ReservationCoveredHoursInLookbackPeriod: {},
                                        SavingsPlansCoveredHoursInLookbackPeriod: {},
                                        OnDemandHoursInLookbackPeriod: {},
                                        TotalRunningHoursInLookbackPeriod: {},
                                        MonthlyCost: {},
                                        CurrencyCode: {}
                                    }
                                },
                                RightsizingType: {},
                                ModifyRecommendationDetail: {
                                    type: "structure",
                                    members: {
                                        TargetInstances: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    EstimatedMonthlyCost: {},
                                                    EstimatedMonthlySavings: {},
                                                    CurrencyCode: {},
                                                    DefaultTargetInstance: {
                                                        type: "boolean"
                                                    },
                                                    ResourceDetails: {
                                                        shape: "S5y"
                                                    },
                                                    ExpectedResourceUtilization: {
                                                        shape: "S60"
                                                    },
                                                    PlatformDifferences: {
                                                        type: "list",
                                                        member: {}
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                TerminateRecommendationDetail: {
                                    type: "structure",
                                    members: {
                                        EstimatedMonthlySavings: {},
                                        CurrencyCode: {}
                                    }
                                },
                                FindingReasonCodes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    NextPageToken: {},
                    Configuration: {
                        shape: "S5p"
                    }
                }
            }
        },
        GetSavingsPlanPurchaseRecommendationDetails: {
            input: {
                type: "structure",
                required: [ "RecommendationDetailId" ],
                members: {
                    RecommendationDetailId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    RecommendationDetailId: {},
                    RecommendationDetailData: {
                        type: "structure",
                        members: {
                            AccountScope: {},
                            LookbackPeriodInDays: {},
                            SavingsPlansType: {},
                            TermInYears: {},
                            PaymentOption: {},
                            AccountId: {},
                            CurrencyCode: {},
                            InstanceFamily: {},
                            Region: {},
                            OfferingId: {},
                            GenerationTimestamp: {},
                            LatestUsageTimestamp: {},
                            CurrentAverageHourlyOnDemandSpend: {},
                            CurrentMaximumHourlyOnDemandSpend: {},
                            CurrentMinimumHourlyOnDemandSpend: {},
                            EstimatedAverageUtilization: {},
                            EstimatedMonthlySavingsAmount: {},
                            EstimatedOnDemandCost: {},
                            EstimatedOnDemandCostWithCurrentCommitment: {},
                            EstimatedROI: {},
                            EstimatedSPCost: {},
                            EstimatedSavingsAmount: {},
                            EstimatedSavingsPercentage: {},
                            ExistingHourlyCommitment: {},
                            HourlyCommitmentToPurchase: {},
                            UpfrontCost: {},
                            CurrentAverageCoverage: {},
                            EstimatedAverageCoverage: {},
                            MetricsOverLookbackPeriod: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        StartTime: {},
                                        EstimatedOnDemandCost: {},
                                        CurrentCoverage: {},
                                        EstimatedCoverage: {},
                                        EstimatedNewCommitmentUtilization: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSavingsPlansCoverage: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    GroupBy: {
                        shape: "S2m"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    Metrics: {
                        shape: "S2k"
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SavingsPlansCoverages" ],
                members: {
                    SavingsPlansCoverages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Attributes: {
                                    shape: "S34"
                                },
                                Coverage: {
                                    type: "structure",
                                    members: {
                                        SpendCoveredBySavingsPlans: {},
                                        OnDemandCost: {},
                                        TotalCost: {},
                                        CoveragePercentage: {}
                                    }
                                },
                                TimePeriod: {
                                    shape: "S2i"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetSavingsPlansPurchaseRecommendation: {
            input: {
                type: "structure",
                required: [ "SavingsPlansType", "TermInYears", "PaymentOption", "LookbackPeriodInDays" ],
                members: {
                    SavingsPlansType: {},
                    TermInYears: {},
                    PaymentOption: {},
                    AccountScope: {},
                    NextPageToken: {},
                    PageSize: {
                        type: "integer"
                    },
                    LookbackPeriodInDays: {},
                    Filter: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Metadata: {
                        type: "structure",
                        members: {
                            RecommendationId: {},
                            GenerationTimestamp: {},
                            AdditionalMetadata: {}
                        }
                    },
                    SavingsPlansPurchaseRecommendation: {
                        type: "structure",
                        members: {
                            AccountScope: {},
                            SavingsPlansType: {},
                            TermInYears: {},
                            PaymentOption: {},
                            LookbackPeriodInDays: {},
                            SavingsPlansPurchaseRecommendationDetails: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        SavingsPlansDetails: {
                                            type: "structure",
                                            members: {
                                                Region: {},
                                                InstanceFamily: {},
                                                OfferingId: {}
                                            }
                                        },
                                        AccountId: {},
                                        UpfrontCost: {},
                                        EstimatedROI: {},
                                        CurrencyCode: {},
                                        EstimatedSPCost: {},
                                        EstimatedOnDemandCost: {},
                                        EstimatedOnDemandCostWithCurrentCommitment: {},
                                        EstimatedSavingsAmount: {},
                                        EstimatedSavingsPercentage: {},
                                        HourlyCommitmentToPurchase: {},
                                        EstimatedAverageUtilization: {},
                                        EstimatedMonthlySavingsAmount: {},
                                        CurrentMinimumHourlyOnDemandSpend: {},
                                        CurrentMaximumHourlyOnDemandSpend: {},
                                        CurrentAverageHourlyOnDemandSpend: {},
                                        RecommendationDetailId: {}
                                    }
                                }
                            },
                            SavingsPlansPurchaseRecommendationSummary: {
                                type: "structure",
                                members: {
                                    EstimatedROI: {},
                                    CurrencyCode: {},
                                    EstimatedTotalCost: {},
                                    CurrentOnDemandSpend: {},
                                    EstimatedSavingsAmount: {},
                                    TotalRecommendationCount: {},
                                    DailyCommitmentToPurchase: {},
                                    HourlyCommitmentToPurchase: {},
                                    EstimatedSavingsPercentage: {},
                                    EstimatedMonthlySavingsAmount: {},
                                    EstimatedOnDemandCostWithCurrentCommitment: {}
                                }
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        GetSavingsPlansUtilization: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Total" ],
                members: {
                    SavingsPlansUtilizationsByTime: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TimePeriod", "Utilization" ],
                            members: {
                                TimePeriod: {
                                    shape: "S2i"
                                },
                                Utilization: {
                                    shape: "S72"
                                },
                                Savings: {
                                    shape: "S73"
                                },
                                AmortizedCommitment: {
                                    shape: "S74"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S75"
                    }
                }
            }
        },
        GetSavingsPlansUtilizationDetails: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Filter: {
                        shape: "S7"
                    },
                    DataType: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {
                        shape: "S3c"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SavingsPlansUtilizationDetails", "TimePeriod" ],
                members: {
                    SavingsPlansUtilizationDetails: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SavingsPlanArn: {},
                                Attributes: {
                                    shape: "S34"
                                },
                                Utilization: {
                                    shape: "S72"
                                },
                                Savings: {
                                    shape: "S73"
                                },
                                AmortizedCommitment: {
                                    shape: "S74"
                                }
                            }
                        }
                    },
                    Total: {
                        shape: "S75"
                    },
                    TimePeriod: {
                        shape: "S2i"
                    },
                    NextToken: {}
                }
            }
        },
        GetTags: {
            input: {
                type: "structure",
                required: [ "TimePeriod" ],
                members: {
                    SearchString: {},
                    TimePeriod: {
                        shape: "S2i"
                    },
                    TagKey: {},
                    Filter: {
                        shape: "S7"
                    },
                    SortBy: {
                        shape: "S3b"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Tags", "ReturnSize", "TotalSize" ],
                members: {
                    NextPageToken: {},
                    Tags: {
                        type: "list",
                        member: {}
                    },
                    ReturnSize: {
                        type: "integer"
                    },
                    TotalSize: {
                        type: "integer"
                    }
                }
            }
        },
        GetUsageForecast: {
            input: {
                type: "structure",
                required: [ "TimePeriod", "Metric", "Granularity" ],
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Metric: {},
                    Granularity: {},
                    Filter: {
                        shape: "S7"
                    },
                    PredictionIntervalLevel: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Total: {
                        shape: "S2u"
                    },
                    ForecastResultsByTime: {
                        shape: "S3n"
                    }
                }
            }
        },
        ListCostAllocationTags: {
            input: {
                type: "structure",
                members: {
                    Status: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    },
                    Type: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CostAllocationTags: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TagKey", "Type", "Status" ],
                            members: {
                                TagKey: {},
                                Type: {},
                                Status: {},
                                LastUpdatedDate: {},
                                LastUsedDate: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCostCategoryDefinitions: {
            input: {
                type: "structure",
                members: {
                    EffectiveOn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryReferences: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CostCategoryArn: {},
                                Name: {},
                                EffectiveStart: {},
                                EffectiveEnd: {},
                                NumberOfRules: {
                                    type: "integer"
                                },
                                ProcessingStatus: {
                                    shape: "S1s"
                                },
                                Values: {
                                    shape: "S3i"
                                },
                                DefaultValue: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSavingsPlansPurchaseRecommendationGeneration: {
            input: {
                type: "structure",
                members: {
                    GenerationStatus: {},
                    RecommendationIds: {
                        type: "list",
                        member: {}
                    },
                    PageSize: {
                        type: "integer"
                    },
                    NextPageToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GenerationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecommendationId: {},
                                GenerationStatus: {},
                                GenerationStartedTime: {},
                                GenerationCompletionTime: {},
                                EstimatedCompletionTime: {}
                            }
                        }
                    },
                    NextPageToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceTags: {
                        shape: "Sk"
                    }
                }
            }
        },
        ProvideAnomalyFeedback: {
            input: {
                type: "structure",
                required: [ "AnomalyId", "Feedback" ],
                members: {
                    AnomalyId: {},
                    Feedback: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AnomalyId" ],
                members: {
                    AnomalyId: {}
                }
            }
        },
        StartSavingsPlansPurchaseRecommendationGeneration: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    RecommendationId: {},
                    GenerationStartedTime: {},
                    EstimatedCompletionTime: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourceTags" ],
                members: {
                    ResourceArn: {},
                    ResourceTags: {
                        shape: "Sk"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourceTagKeys" ],
                members: {
                    ResourceArn: {},
                    ResourceTagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAnomalyMonitor: {
            input: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {},
                    MonitorName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitorArn" ],
                members: {
                    MonitorArn: {}
                }
            }
        },
        UpdateAnomalySubscription: {
            input: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {},
                    Threshold: {
                        deprecated: true,
                        deprecatedMessage: "Threshold has been deprecated in favor of ThresholdExpression",
                        type: "double"
                    },
                    Frequency: {},
                    MonitorArnList: {
                        shape: "Sr"
                    },
                    Subscribers: {
                        shape: "St"
                    },
                    SubscriptionName: {},
                    ThresholdExpression: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SubscriptionArn" ],
                members: {
                    SubscriptionArn: {}
                }
            }
        },
        UpdateCostAllocationTagsStatus: {
            input: {
                type: "structure",
                required: [ "CostAllocationTagsStatus" ],
                members: {
                    CostAllocationTagsStatus: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TagKey", "Status" ],
                            members: {
                                TagKey: {},
                                Status: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TagKey: {},
                                Code: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateCostCategoryDefinition: {
            input: {
                type: "structure",
                required: [ "CostCategoryArn", "RuleVersion", "Rules" ],
                members: {
                    CostCategoryArn: {},
                    EffectiveStart: {},
                    RuleVersion: {},
                    Rules: {
                        shape: "S14"
                    },
                    DefaultValue: {},
                    SplitChargeRules: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CostCategoryArn: {},
                    EffectiveStart: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "MonitorName", "MonitorType" ],
            members: {
                MonitorArn: {},
                MonitorName: {},
                CreationDate: {},
                LastUpdatedDate: {},
                LastEvaluatedDate: {},
                MonitorType: {},
                MonitorDimension: {},
                MonitorSpecification: {
                    shape: "S7"
                },
                DimensionalValueCount: {
                    type: "integer"
                }
            }
        },
        S7: {
            type: "structure",
            members: {
                Or: {
                    shape: "S8"
                },
                And: {
                    shape: "S8"
                },
                Not: {
                    shape: "S7"
                },
                Dimensions: {
                    type: "structure",
                    members: {
                        Key: {},
                        Values: {
                            shape: "Sb"
                        },
                        MatchOptions: {
                            shape: "Sd"
                        }
                    }
                },
                Tags: {
                    shape: "Sf"
                },
                CostCategories: {
                    type: "structure",
                    members: {
                        Key: {},
                        Values: {
                            shape: "Sb"
                        },
                        MatchOptions: {
                            shape: "Sd"
                        }
                    }
                }
            }
        },
        S8: {
            type: "list",
            member: {
                shape: "S7"
            }
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            members: {
                Key: {},
                Values: {
                    shape: "Sb"
                },
                MatchOptions: {
                    shape: "Sd"
                }
            }
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "MonitorArnList", "Subscribers", "Frequency", "SubscriptionName" ],
            members: {
                SubscriptionArn: {},
                AccountId: {},
                MonitorArnList: {
                    shape: "Sr"
                },
                Subscribers: {
                    shape: "St"
                },
                Threshold: {
                    deprecated: true,
                    deprecatedMessage: "Threshold has been deprecated in favor of ThresholdExpression",
                    type: "double"
                },
                Frequency: {},
                SubscriptionName: {},
                ThresholdExpression: {
                    shape: "S7"
                }
            }
        },
        Sr: {
            type: "list",
            member: {}
        },
        St: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Address: {},
                    Type: {},
                    Status: {}
                }
            }
        },
        S14: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Rule: {
                        shape: "S7"
                    },
                    InheritedValue: {
                        type: "structure",
                        members: {
                            DimensionName: {},
                            DimensionKey: {}
                        }
                    },
                    Type: {}
                }
            }
        },
        S1a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Source", "Targets", "Method" ],
                members: {
                    Source: {},
                    Targets: {
                        type: "list",
                        member: {}
                    },
                    Method: {},
                    Parameters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Type", "Values" ],
                            members: {
                                Type: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        S1s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Component: {},
                    Status: {}
                }
            }
        },
        S2i: {
            type: "structure",
            required: [ "Start", "End" ],
            members: {
                Start: {},
                End: {}
            }
        },
        S2k: {
            type: "list",
            member: {}
        },
        S2m: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Type: {},
                    Key: {}
                }
            }
        },
        S2r: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    Total: {
                        shape: "S2t"
                    },
                    Groups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Keys: {
                                    type: "list",
                                    member: {}
                                },
                                Metrics: {
                                    shape: "S2t"
                                }
                            }
                        }
                    },
                    Estimated: {
                        type: "boolean"
                    }
                }
            }
        },
        S2t: {
            type: "map",
            key: {},
            value: {
                shape: "S2u"
            }
        },
        S2u: {
            type: "structure",
            members: {
                Amount: {},
                Unit: {}
            }
        },
        S32: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Value: {},
                    Attributes: {
                        shape: "S34"
                    }
                }
            }
        },
        S34: {
            type: "map",
            key: {},
            value: {}
        },
        S3b: {
            type: "list",
            member: {
                shape: "S3c"
            }
        },
        S3c: {
            type: "structure",
            required: [ "Key" ],
            members: {
                Key: {},
                SortOrder: {}
            }
        },
        S3i: {
            type: "list",
            member: {}
        },
        S3n: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TimePeriod: {
                        shape: "S2i"
                    },
                    MeanValue: {},
                    PredictionIntervalLowerBound: {},
                    PredictionIntervalUpperBound: {}
                }
            }
        },
        S3y: {
            type: "structure",
            members: {
                CoverageHours: {
                    type: "structure",
                    members: {
                        OnDemandHours: {},
                        ReservedHours: {},
                        TotalRunningHours: {},
                        CoverageHoursPercentage: {}
                    }
                },
                CoverageNormalizedUnits: {
                    type: "structure",
                    members: {
                        OnDemandNormalizedUnits: {},
                        ReservedNormalizedUnits: {},
                        TotalRunningNormalizedUnits: {},
                        CoverageNormalizedUnitsPercentage: {}
                    }
                },
                CoverageCost: {
                    type: "structure",
                    members: {
                        OnDemandCost: {}
                    }
                }
            }
        },
        S4g: {
            type: "structure",
            members: {
                EC2Specification: {
                    type: "structure",
                    members: {
                        OfferingClass: {}
                    }
                }
            }
        },
        S56: {
            type: "structure",
            members: {
                UtilizationPercentage: {},
                UtilizationPercentageInUnits: {},
                PurchasedHours: {},
                PurchasedUnits: {},
                TotalActualHours: {},
                TotalActualUnits: {},
                UnusedHours: {},
                UnusedUnits: {},
                OnDemandCostOfRIHoursUsed: {},
                NetRISavings: {},
                TotalPotentialRISavings: {},
                AmortizedUpfrontFee: {},
                AmortizedRecurringFee: {},
                TotalAmortizedFee: {},
                RICostForUnusedHours: {},
                RealizedSavings: {},
                UnrealizedSavings: {}
            }
        },
        S5p: {
            type: "structure",
            required: [ "RecommendationTarget", "BenefitsConsidered" ],
            members: {
                RecommendationTarget: {},
                BenefitsConsidered: {
                    type: "boolean"
                }
            }
        },
        S5y: {
            type: "structure",
            members: {
                EC2ResourceDetails: {
                    type: "structure",
                    members: {
                        HourlyOnDemandRate: {},
                        InstanceType: {},
                        Platform: {},
                        Region: {},
                        Sku: {},
                        Memory: {},
                        NetworkPerformance: {},
                        Storage: {},
                        Vcpu: {}
                    }
                }
            }
        },
        S60: {
            type: "structure",
            members: {
                EC2ResourceUtilization: {
                    type: "structure",
                    members: {
                        MaxCpuUtilizationPercentage: {},
                        MaxMemoryUtilizationPercentage: {},
                        MaxStorageUtilizationPercentage: {},
                        EBSResourceUtilization: {
                            type: "structure",
                            members: {
                                EbsReadOpsPerSecond: {},
                                EbsWriteOpsPerSecond: {},
                                EbsReadBytesPerSecond: {},
                                EbsWriteBytesPerSecond: {}
                            }
                        },
                        DiskResourceUtilization: {
                            type: "structure",
                            members: {
                                DiskReadOpsPerSecond: {},
                                DiskWriteOpsPerSecond: {},
                                DiskReadBytesPerSecond: {},
                                DiskWriteBytesPerSecond: {}
                            }
                        },
                        NetworkResourceUtilization: {
                            type: "structure",
                            members: {
                                NetworkInBytesPerSecond: {},
                                NetworkOutBytesPerSecond: {},
                                NetworkPacketsInPerSecond: {},
                                NetworkPacketsOutPerSecond: {}
                            }
                        }
                    }
                }
            }
        },
        S72: {
            type: "structure",
            members: {
                TotalCommitment: {},
                UsedCommitment: {},
                UnusedCommitment: {},
                UtilizationPercentage: {}
            }
        },
        S73: {
            type: "structure",
            members: {
                NetSavings: {},
                OnDemandCostEquivalent: {}
            }
        },
        S74: {
            type: "structure",
            members: {
                AmortizedRecurringCommitment: {},
                AmortizedUpfrontCommitment: {},
                TotalAmortizedCommitment: {}
            }
        },
        S75: {
            type: "structure",
            required: [ "Utilization" ],
            members: {
                Utilization: {
                    shape: "S72"
                },
                Savings: {
                    shape: "S73"
                },
                AmortizedCommitment: {
                    shape: "S74"
                }
            }
        }
    },
    paginators: {
        GetSavingsPlansCoverage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetSavingsPlansUtilizationDetails: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCostAllocationTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCostCategoryDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediaconvert"] = {};

AWS.MediaConvert = AWS.Service.defineService("mediaconvert", [ "2017-08-29" ]);

AWS.apiLoader.services["mediaconvert"]["2017-08-29"] = {
    metadata: {
        apiVersion: "2017-08-29",
        endpointPrefix: "mediaconvert",
        signingName: "mediaconvert",
        serviceFullName: "AWS Elemental MediaConvert",
        serviceId: "MediaConvert",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "mediaconvert-2017-08-29",
        signatureVersion: "v4",
        serviceAbbreviation: "MediaConvert"
    },
    operations: {
        AssociateCertificate: {
            http: {
                requestUri: "/2017-08-29/certificates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CancelJob: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/jobs/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id",
                        location: "uri"
                    }
                },
                required: [ "Id" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateJob: {
            http: {
                requestUri: "/2017-08-29/jobs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AccelerationSettings: {
                        shape: "S7",
                        locationName: "accelerationSettings"
                    },
                    BillingTagsSource: {
                        locationName: "billingTagsSource"
                    },
                    ClientRequestToken: {
                        locationName: "clientRequestToken",
                        idempotencyToken: true
                    },
                    HopDestinations: {
                        shape: "Sa",
                        locationName: "hopDestinations"
                    },
                    JobTemplate: {
                        locationName: "jobTemplate"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    Role: {
                        locationName: "role"
                    },
                    Settings: {
                        shape: "Se",
                        locationName: "settings"
                    },
                    SimulateReservedQueue: {
                        locationName: "simulateReservedQueue"
                    },
                    StatusUpdateInterval: {
                        locationName: "statusUpdateInterval"
                    },
                    Tags: {
                        shape: "Skx",
                        locationName: "tags"
                    },
                    UserMetadata: {
                        shape: "Skx",
                        locationName: "userMetadata"
                    }
                },
                required: [ "Role", "Settings" ]
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Skz",
                        locationName: "job"
                    }
                }
            }
        },
        CreateJobTemplate: {
            http: {
                requestUri: "/2017-08-29/jobTemplates",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AccelerationSettings: {
                        shape: "S7",
                        locationName: "accelerationSettings"
                    },
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HopDestinations: {
                        shape: "Sa",
                        locationName: "hopDestinations"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    Settings: {
                        shape: "Slh",
                        locationName: "settings"
                    },
                    StatusUpdateInterval: {
                        locationName: "statusUpdateInterval"
                    },
                    Tags: {
                        shape: "Skx",
                        locationName: "tags"
                    }
                },
                required: [ "Settings", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    JobTemplate: {
                        shape: "Sll",
                        locationName: "jobTemplate"
                    }
                }
            }
        },
        CreatePreset: {
            http: {
                requestUri: "/2017-08-29/presets",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Settings: {
                        shape: "Slo",
                        locationName: "settings"
                    },
                    Tags: {
                        shape: "Skx",
                        locationName: "tags"
                    }
                },
                required: [ "Settings", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "Sls",
                        locationName: "preset"
                    }
                }
            }
        },
        CreateQueue: {
            http: {
                requestUri: "/2017-08-29/queues",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PricingPlan: {
                        locationName: "pricingPlan"
                    },
                    ReservationPlanSettings: {
                        shape: "Slv",
                        locationName: "reservationPlanSettings"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Tags: {
                        shape: "Skx",
                        locationName: "tags"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Sm0",
                        locationName: "queue"
                    }
                }
            }
        },
        DeleteJobTemplate: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/jobTemplates/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeletePreset: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/presets/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteQueue: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/queues/{name}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeEndpoints: {
            http: {
                requestUri: "/2017-08-29/endpoints",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    Mode: {
                        locationName: "mode"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Endpoints: {
                        locationName: "endpoints",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Url: {
                                    locationName: "url"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DisassociateCertificate: {
            http: {
                method: "DELETE",
                requestUri: "/2017-08-29/certificates/{arn}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn",
                        location: "uri"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetJob: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobs/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id",
                        location: "uri"
                    }
                },
                required: [ "Id" ]
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Skz",
                        locationName: "job"
                    }
                }
            }
        },
        GetJobTemplate: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobTemplates/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    JobTemplate: {
                        shape: "Sll",
                        locationName: "jobTemplate"
                    }
                }
            }
        },
        GetPolicy: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "Smo",
                        locationName: "policy"
                    }
                }
            }
        },
        GetPreset: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/presets/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "Sls",
                        locationName: "preset"
                    }
                }
            }
        },
        GetQueue: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/queues/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name",
                        location: "uri"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Sm0",
                        locationName: "queue"
                    }
                }
            }
        },
        ListJobTemplates: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category",
                        location: "querystring"
                    },
                    ListBy: {
                        locationName: "listBy",
                        location: "querystring"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobTemplates: {
                        locationName: "jobTemplates",
                        type: "list",
                        member: {
                            shape: "Sll"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListJobs: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    },
                    Queue: {
                        locationName: "queue",
                        location: "querystring"
                    },
                    Status: {
                        locationName: "status",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Jobs: {
                        locationName: "jobs",
                        type: "list",
                        member: {
                            shape: "Skz"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListPresets: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/presets",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category",
                        location: "querystring"
                    },
                    ListBy: {
                        locationName: "listBy",
                        location: "querystring"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Presets: {
                        locationName: "presets",
                        type: "list",
                        member: {
                            shape: "Sls"
                        }
                    }
                }
            }
        },
        ListQueues: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/queues",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ListBy: {
                        locationName: "listBy",
                        location: "querystring"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        location: "querystring",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken",
                        location: "querystring"
                    },
                    Order: {
                        locationName: "order",
                        location: "querystring"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Queues: {
                        locationName: "queues",
                        type: "list",
                        member: {
                            shape: "Sm0"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/2017-08-29/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn",
                        location: "uri"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {
                    ResourceTags: {
                        locationName: "resourceTags",
                        type: "structure",
                        members: {
                            Arn: {
                                locationName: "arn"
                            },
                            Tags: {
                                shape: "Skx",
                                locationName: "tags"
                            }
                        }
                    }
                }
            }
        },
        PutPolicy: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "Smo",
                        locationName: "policy"
                    }
                },
                required: [ "Policy" ]
            },
            output: {
                type: "structure",
                members: {
                    Policy: {
                        shape: "Smo",
                        locationName: "policy"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/2017-08-29/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Tags: {
                        shape: "Skx",
                        locationName: "tags"
                    }
                },
                required: [ "Arn", "Tags" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn",
                        location: "uri"
                    },
                    TagKeys: {
                        shape: "Sl4",
                        locationName: "tagKeys"
                    }
                },
                required: [ "Arn" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateJobTemplate: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/jobTemplates/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccelerationSettings: {
                        shape: "S7",
                        locationName: "accelerationSettings"
                    },
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HopDestinations: {
                        shape: "Sa",
                        locationName: "hopDestinations"
                    },
                    Name: {
                        locationName: "name",
                        location: "uri"
                    },
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    Settings: {
                        shape: "Slh",
                        locationName: "settings"
                    },
                    StatusUpdateInterval: {
                        locationName: "statusUpdateInterval"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    JobTemplate: {
                        shape: "Sll",
                        locationName: "jobTemplate"
                    }
                }
            }
        },
        UpdatePreset: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/presets/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        locationName: "category"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name",
                        location: "uri"
                    },
                    Settings: {
                        shape: "Slo",
                        locationName: "settings"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Preset: {
                        shape: "Sls",
                        locationName: "preset"
                    }
                }
            }
        },
        UpdateQueue: {
            http: {
                method: "PUT",
                requestUri: "/2017-08-29/queues/{name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Name: {
                        locationName: "name",
                        location: "uri"
                    },
                    ReservationPlanSettings: {
                        shape: "Slv",
                        locationName: "reservationPlanSettings"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                required: [ "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Queue: {
                        shape: "Sm0",
                        locationName: "queue"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                Mode: {
                    locationName: "mode"
                }
            },
            required: [ "Mode" ]
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Priority: {
                        locationName: "priority",
                        type: "integer"
                    },
                    Queue: {
                        locationName: "queue"
                    },
                    WaitMinutes: {
                        locationName: "waitMinutes",
                        type: "integer"
                    }
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                AdAvailOffset: {
                    locationName: "adAvailOffset",
                    type: "integer"
                },
                AvailBlanking: {
                    shape: "Sg",
                    locationName: "availBlanking"
                },
                Esam: {
                    shape: "Si",
                    locationName: "esam"
                },
                ExtendedDataServices: {
                    shape: "So",
                    locationName: "extendedDataServices"
                },
                FollowSource: {
                    locationName: "followSource",
                    type: "integer"
                },
                Inputs: {
                    locationName: "inputs",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AdvancedInputFilter: {
                                locationName: "advancedInputFilter"
                            },
                            AdvancedInputFilterSettings: {
                                shape: "Sv",
                                locationName: "advancedInputFilterSettings"
                            },
                            AudioSelectorGroups: {
                                shape: "Sy",
                                locationName: "audioSelectorGroups"
                            },
                            AudioSelectors: {
                                shape: "S12",
                                locationName: "audioSelectors"
                            },
                            CaptionSelectors: {
                                shape: "S1o",
                                locationName: "captionSelectors"
                            },
                            Crop: {
                                shape: "S2d",
                                locationName: "crop"
                            },
                            DeblockFilter: {
                                locationName: "deblockFilter"
                            },
                            DecryptionSettings: {
                                locationName: "decryptionSettings",
                                type: "structure",
                                members: {
                                    DecryptionMode: {
                                        locationName: "decryptionMode"
                                    },
                                    EncryptedDecryptionKey: {
                                        locationName: "encryptedDecryptionKey"
                                    },
                                    InitializationVector: {
                                        locationName: "initializationVector"
                                    },
                                    KmsKeyRegion: {
                                        locationName: "kmsKeyRegion"
                                    }
                                }
                            },
                            DenoiseFilter: {
                                locationName: "denoiseFilter"
                            },
                            DolbyVisionMetadataXml: {
                                locationName: "dolbyVisionMetadataXml"
                            },
                            FileInput: {
                                locationName: "fileInput"
                            },
                            FilterEnable: {
                                locationName: "filterEnable"
                            },
                            FilterStrength: {
                                locationName: "filterStrength",
                                type: "integer"
                            },
                            ImageInserter: {
                                shape: "S2q",
                                locationName: "imageInserter"
                            },
                            InputClippings: {
                                shape: "S2y",
                                locationName: "inputClippings"
                            },
                            InputScanType: {
                                locationName: "inputScanType"
                            },
                            Position: {
                                shape: "S2d",
                                locationName: "position"
                            },
                            ProgramNumber: {
                                locationName: "programNumber",
                                type: "integer"
                            },
                            PsiControl: {
                                locationName: "psiControl"
                            },
                            SupplementalImps: {
                                locationName: "supplementalImps",
                                type: "list",
                                member: {}
                            },
                            TimecodeSource: {
                                locationName: "timecodeSource"
                            },
                            TimecodeStart: {
                                locationName: "timecodeStart"
                            },
                            VideoGenerator: {
                                locationName: "videoGenerator",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "integer"
                                    }
                                }
                            },
                            VideoOverlays: {
                                shape: "S39",
                                locationName: "videoOverlays"
                            },
                            VideoSelector: {
                                shape: "S3e",
                                locationName: "videoSelector"
                            }
                        }
                    }
                },
                KantarWatermark: {
                    shape: "S3p",
                    locationName: "kantarWatermark"
                },
                MotionImageInserter: {
                    shape: "S3x",
                    locationName: "motionImageInserter"
                },
                NielsenConfiguration: {
                    shape: "S45",
                    locationName: "nielsenConfiguration"
                },
                NielsenNonLinearWatermark: {
                    shape: "S47",
                    locationName: "nielsenNonLinearWatermark"
                },
                OutputGroups: {
                    shape: "S4e",
                    locationName: "outputGroups"
                },
                TimecodeConfig: {
                    shape: "Skp",
                    locationName: "timecodeConfig"
                },
                TimedMetadataInsertion: {
                    shape: "Sks",
                    locationName: "timedMetadataInsertion"
                }
            }
        },
        Sg: {
            type: "structure",
            members: {
                AvailBlankingImage: {
                    locationName: "availBlankingImage"
                }
            }
        },
        Si: {
            type: "structure",
            members: {
                ManifestConfirmConditionNotification: {
                    locationName: "manifestConfirmConditionNotification",
                    type: "structure",
                    members: {
                        MccXml: {
                            locationName: "mccXml"
                        }
                    }
                },
                ResponseSignalPreroll: {
                    locationName: "responseSignalPreroll",
                    type: "integer"
                },
                SignalProcessingNotification: {
                    locationName: "signalProcessingNotification",
                    type: "structure",
                    members: {
                        SccXml: {
                            locationName: "sccXml"
                        }
                    }
                }
            }
        },
        So: {
            type: "structure",
            members: {
                CopyProtectionAction: {
                    locationName: "copyProtectionAction"
                },
                VchipAction: {
                    locationName: "vchipAction"
                }
            }
        },
        Sv: {
            type: "structure",
            members: {
                AddTexture: {
                    locationName: "addTexture"
                },
                Sharpening: {
                    locationName: "sharpening"
                }
            }
        },
        Sy: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    AudioSelectorNames: {
                        shape: "S10",
                        locationName: "audioSelectorNames"
                    }
                }
            }
        },
        S10: {
            type: "list",
            member: {}
        },
        S12: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    AudioDurationCorrection: {
                        locationName: "audioDurationCorrection"
                    },
                    CustomLanguageCode: {
                        locationName: "customLanguageCode"
                    },
                    DefaultSelection: {
                        locationName: "defaultSelection"
                    },
                    ExternalAudioFileInput: {
                        locationName: "externalAudioFileInput"
                    },
                    HlsRenditionGroupSettings: {
                        locationName: "hlsRenditionGroupSettings",
                        type: "structure",
                        members: {
                            RenditionGroupId: {
                                locationName: "renditionGroupId"
                            },
                            RenditionLanguageCode: {
                                locationName: "renditionLanguageCode"
                            },
                            RenditionName: {
                                locationName: "renditionName"
                            }
                        }
                    },
                    LanguageCode: {
                        locationName: "languageCode"
                    },
                    Offset: {
                        locationName: "offset",
                        type: "integer"
                    },
                    Pids: {
                        shape: "S1b",
                        locationName: "pids"
                    },
                    ProgramSelection: {
                        locationName: "programSelection",
                        type: "integer"
                    },
                    RemixSettings: {
                        shape: "S1e",
                        locationName: "remixSettings"
                    },
                    SelectorType: {
                        locationName: "selectorType"
                    },
                    Tracks: {
                        shape: "S1b",
                        locationName: "tracks"
                    }
                }
            }
        },
        S1b: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        S1e: {
            type: "structure",
            members: {
                ChannelMapping: {
                    locationName: "channelMapping",
                    type: "structure",
                    members: {
                        OutputChannels: {
                            locationName: "outputChannels",
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    InputChannels: {
                                        locationName: "inputChannels",
                                        type: "list",
                                        member: {
                                            type: "integer"
                                        }
                                    },
                                    InputChannelsFineTune: {
                                        locationName: "inputChannelsFineTune",
                                        type: "list",
                                        member: {
                                            type: "double"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ChannelsIn: {
                    locationName: "channelsIn",
                    type: "integer"
                },
                ChannelsOut: {
                    locationName: "channelsOut",
                    type: "integer"
                }
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    CustomLanguageCode: {
                        locationName: "customLanguageCode"
                    },
                    LanguageCode: {
                        locationName: "languageCode"
                    },
                    SourceSettings: {
                        locationName: "sourceSettings",
                        type: "structure",
                        members: {
                            AncillarySourceSettings: {
                                locationName: "ancillarySourceSettings",
                                type: "structure",
                                members: {
                                    Convert608To708: {
                                        locationName: "convert608To708"
                                    },
                                    SourceAncillaryChannelNumber: {
                                        locationName: "sourceAncillaryChannelNumber",
                                        type: "integer"
                                    },
                                    TerminateCaptions: {
                                        locationName: "terminateCaptions"
                                    }
                                }
                            },
                            DvbSubSourceSettings: {
                                locationName: "dvbSubSourceSettings",
                                type: "structure",
                                members: {
                                    Pid: {
                                        locationName: "pid",
                                        type: "integer"
                                    }
                                }
                            },
                            EmbeddedSourceSettings: {
                                locationName: "embeddedSourceSettings",
                                type: "structure",
                                members: {
                                    Convert608To708: {
                                        locationName: "convert608To708"
                                    },
                                    Source608ChannelNumber: {
                                        locationName: "source608ChannelNumber",
                                        type: "integer"
                                    },
                                    Source608TrackNumber: {
                                        locationName: "source608TrackNumber",
                                        type: "integer"
                                    },
                                    TerminateCaptions: {
                                        locationName: "terminateCaptions"
                                    }
                                }
                            },
                            FileSourceSettings: {
                                locationName: "fileSourceSettings",
                                type: "structure",
                                members: {
                                    Convert608To708: {
                                        locationName: "convert608To708"
                                    },
                                    ConvertPaintToPop: {
                                        locationName: "convertPaintToPop"
                                    },
                                    Framerate: {
                                        locationName: "framerate",
                                        type: "structure",
                                        members: {
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    SourceFile: {
                                        locationName: "sourceFile"
                                    },
                                    TimeDelta: {
                                        locationName: "timeDelta",
                                        type: "integer"
                                    },
                                    TimeDeltaUnits: {
                                        locationName: "timeDeltaUnits"
                                    }
                                }
                            },
                            SourceType: {
                                locationName: "sourceType"
                            },
                            TeletextSourceSettings: {
                                locationName: "teletextSourceSettings",
                                type: "structure",
                                members: {
                                    PageNumber: {
                                        locationName: "pageNumber"
                                    }
                                }
                            },
                            TrackSourceSettings: {
                                locationName: "trackSourceSettings",
                                type: "structure",
                                members: {
                                    TrackNumber: {
                                        locationName: "trackNumber",
                                        type: "integer"
                                    }
                                }
                            },
                            WebvttHlsSourceSettings: {
                                locationName: "webvttHlsSourceSettings",
                                type: "structure",
                                members: {
                                    RenditionGroupId: {
                                        locationName: "renditionGroupId"
                                    },
                                    RenditionLanguageCode: {
                                        locationName: "renditionLanguageCode"
                                    },
                                    RenditionName: {
                                        locationName: "renditionName"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S2d: {
            type: "structure",
            members: {
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                },
                X: {
                    locationName: "x",
                    type: "integer"
                },
                Y: {
                    locationName: "y",
                    type: "integer"
                }
            }
        },
        S2q: {
            type: "structure",
            members: {
                InsertableImages: {
                    locationName: "insertableImages",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Duration: {
                                locationName: "duration",
                                type: "integer"
                            },
                            FadeIn: {
                                locationName: "fadeIn",
                                type: "integer"
                            },
                            FadeOut: {
                                locationName: "fadeOut",
                                type: "integer"
                            },
                            Height: {
                                locationName: "height",
                                type: "integer"
                            },
                            ImageInserterInput: {
                                locationName: "imageInserterInput"
                            },
                            ImageX: {
                                locationName: "imageX",
                                type: "integer"
                            },
                            ImageY: {
                                locationName: "imageY",
                                type: "integer"
                            },
                            Layer: {
                                locationName: "layer",
                                type: "integer"
                            },
                            Opacity: {
                                locationName: "opacity",
                                type: "integer"
                            },
                            StartTime: {
                                locationName: "startTime"
                            },
                            Width: {
                                locationName: "width",
                                type: "integer"
                            }
                        }
                    }
                },
                SdrReferenceWhiteLevel: {
                    locationName: "sdrReferenceWhiteLevel",
                    type: "integer"
                }
            }
        },
        S2y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndTimecode: {
                        locationName: "endTimecode"
                    },
                    StartTimecode: {
                        locationName: "startTimecode"
                    }
                }
            }
        },
        S39: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    EndTimecode: {
                        locationName: "endTimecode"
                    },
                    Input: {
                        locationName: "input",
                        type: "structure",
                        members: {
                            FileInput: {
                                locationName: "fileInput"
                            },
                            InputClippings: {
                                locationName: "inputClippings",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        EndTimecode: {
                                            locationName: "endTimecode"
                                        },
                                        StartTimecode: {
                                            locationName: "startTimecode"
                                        }
                                    }
                                }
                            },
                            TimecodeSource: {
                                locationName: "timecodeSource"
                            },
                            TimecodeStart: {
                                locationName: "timecodeStart"
                            }
                        }
                    },
                    StartTimecode: {
                        locationName: "startTimecode"
                    }
                }
            }
        },
        S3e: {
            type: "structure",
            members: {
                AlphaBehavior: {
                    locationName: "alphaBehavior"
                },
                ColorSpace: {
                    locationName: "colorSpace"
                },
                ColorSpaceUsage: {
                    locationName: "colorSpaceUsage"
                },
                EmbeddedTimecodeOverride: {
                    locationName: "embeddedTimecodeOverride"
                },
                Hdr10Metadata: {
                    shape: "S3j",
                    locationName: "hdr10Metadata"
                },
                PadVideo: {
                    locationName: "padVideo"
                },
                Pid: {
                    locationName: "pid",
                    type: "integer"
                },
                ProgramNumber: {
                    locationName: "programNumber",
                    type: "integer"
                },
                Rotate: {
                    locationName: "rotate"
                },
                SampleRange: {
                    locationName: "sampleRange"
                }
            }
        },
        S3j: {
            type: "structure",
            members: {
                BluePrimaryX: {
                    locationName: "bluePrimaryX",
                    type: "integer"
                },
                BluePrimaryY: {
                    locationName: "bluePrimaryY",
                    type: "integer"
                },
                GreenPrimaryX: {
                    locationName: "greenPrimaryX",
                    type: "integer"
                },
                GreenPrimaryY: {
                    locationName: "greenPrimaryY",
                    type: "integer"
                },
                MaxContentLightLevel: {
                    locationName: "maxContentLightLevel",
                    type: "integer"
                },
                MaxFrameAverageLightLevel: {
                    locationName: "maxFrameAverageLightLevel",
                    type: "integer"
                },
                MaxLuminance: {
                    locationName: "maxLuminance",
                    type: "integer"
                },
                MinLuminance: {
                    locationName: "minLuminance",
                    type: "integer"
                },
                RedPrimaryX: {
                    locationName: "redPrimaryX",
                    type: "integer"
                },
                RedPrimaryY: {
                    locationName: "redPrimaryY",
                    type: "integer"
                },
                WhitePointX: {
                    locationName: "whitePointX",
                    type: "integer"
                },
                WhitePointY: {
                    locationName: "whitePointY",
                    type: "integer"
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                ChannelName: {
                    locationName: "channelName"
                },
                ContentReference: {
                    locationName: "contentReference"
                },
                CredentialsSecretName: {
                    locationName: "credentialsSecretName"
                },
                FileOffset: {
                    locationName: "fileOffset",
                    type: "double"
                },
                KantarLicenseId: {
                    locationName: "kantarLicenseId",
                    type: "integer"
                },
                KantarServerUrl: {
                    locationName: "kantarServerUrl"
                },
                LogDestination: {
                    locationName: "logDestination"
                },
                Metadata3: {
                    locationName: "metadata3"
                },
                Metadata4: {
                    locationName: "metadata4"
                },
                Metadata5: {
                    locationName: "metadata5"
                },
                Metadata6: {
                    locationName: "metadata6"
                },
                Metadata7: {
                    locationName: "metadata7"
                },
                Metadata8: {
                    locationName: "metadata8"
                }
            }
        },
        S3x: {
            type: "structure",
            members: {
                Framerate: {
                    locationName: "framerate",
                    type: "structure",
                    members: {
                        FramerateDenominator: {
                            locationName: "framerateDenominator",
                            type: "integer"
                        },
                        FramerateNumerator: {
                            locationName: "framerateNumerator",
                            type: "integer"
                        }
                    }
                },
                Input: {
                    locationName: "input"
                },
                InsertionMode: {
                    locationName: "insertionMode"
                },
                Offset: {
                    locationName: "offset",
                    type: "structure",
                    members: {
                        ImageX: {
                            locationName: "imageX",
                            type: "integer"
                        },
                        ImageY: {
                            locationName: "imageY",
                            type: "integer"
                        }
                    }
                },
                Playback: {
                    locationName: "playback"
                },
                StartTime: {
                    locationName: "startTime"
                }
            }
        },
        S45: {
            type: "structure",
            members: {
                BreakoutCode: {
                    locationName: "breakoutCode",
                    type: "integer"
                },
                DistributorId: {
                    locationName: "distributorId"
                }
            }
        },
        S47: {
            type: "structure",
            members: {
                ActiveWatermarkProcess: {
                    locationName: "activeWatermarkProcess"
                },
                AdiFilename: {
                    locationName: "adiFilename"
                },
                AssetId: {
                    locationName: "assetId"
                },
                AssetName: {
                    locationName: "assetName"
                },
                CbetSourceId: {
                    locationName: "cbetSourceId"
                },
                EpisodeId: {
                    locationName: "episodeId"
                },
                MetadataDestination: {
                    locationName: "metadataDestination"
                },
                SourceId: {
                    locationName: "sourceId",
                    type: "integer"
                },
                SourceWatermarkStatus: {
                    locationName: "sourceWatermarkStatus"
                },
                TicServerUrl: {
                    locationName: "ticServerUrl"
                },
                UniqueTicPerAudioTrack: {
                    locationName: "uniqueTicPerAudioTrack"
                }
            }
        },
        S4e: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AutomatedEncodingSettings: {
                        locationName: "automatedEncodingSettings",
                        type: "structure",
                        members: {
                            AbrSettings: {
                                locationName: "abrSettings",
                                type: "structure",
                                members: {
                                    MaxAbrBitrate: {
                                        locationName: "maxAbrBitrate",
                                        type: "integer"
                                    },
                                    MaxRenditions: {
                                        locationName: "maxRenditions",
                                        type: "integer"
                                    },
                                    MinAbrBitrate: {
                                        locationName: "minAbrBitrate",
                                        type: "integer"
                                    },
                                    Rules: {
                                        locationName: "rules",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                AllowedRenditions: {
                                                    locationName: "allowedRenditions",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Height: {
                                                                locationName: "height",
                                                                type: "integer"
                                                            },
                                                            Required: {
                                                                locationName: "required"
                                                            },
                                                            Width: {
                                                                locationName: "width",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                },
                                                ForceIncludeRenditions: {
                                                    locationName: "forceIncludeRenditions",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Height: {
                                                                locationName: "height",
                                                                type: "integer"
                                                            },
                                                            Width: {
                                                                locationName: "width",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                },
                                                MinBottomRenditionSize: {
                                                    locationName: "minBottomRenditionSize",
                                                    type: "structure",
                                                    members: {
                                                        Height: {
                                                            locationName: "height",
                                                            type: "integer"
                                                        },
                                                        Width: {
                                                            locationName: "width",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                MinTopRenditionSize: {
                                                    locationName: "minTopRenditionSize",
                                                    type: "structure",
                                                    members: {
                                                        Height: {
                                                            locationName: "height",
                                                            type: "integer"
                                                        },
                                                        Width: {
                                                            locationName: "width",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                Type: {
                                                    locationName: "type"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    CustomName: {
                        locationName: "customName"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OutputGroupSettings: {
                        locationName: "outputGroupSettings",
                        type: "structure",
                        members: {
                            CmafGroupSettings: {
                                locationName: "cmafGroupSettings",
                                type: "structure",
                                members: {
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "S10",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    BaseUrl: {
                                        locationName: "baseUrl"
                                    },
                                    ClientCache: {
                                        locationName: "clientCache"
                                    },
                                    CodecSpecification: {
                                        locationName: "codecSpecification"
                                    },
                                    DashManifestStyle: {
                                        locationName: "dashManifestStyle"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S52",
                                        locationName: "destinationSettings"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            ConstantInitializationVector: {
                                                locationName: "constantInitializationVector"
                                            },
                                            EncryptionMethod: {
                                                locationName: "encryptionMethod"
                                            },
                                            InitializationVectorInManifest: {
                                                locationName: "initializationVectorInManifest"
                                            },
                                            SpekeKeyProvider: {
                                                locationName: "spekeKeyProvider",
                                                type: "structure",
                                                members: {
                                                    CertificateArn: {
                                                        locationName: "certificateArn"
                                                    },
                                                    DashSignaledSystemIds: {
                                                        shape: "S5h",
                                                        locationName: "dashSignaledSystemIds"
                                                    },
                                                    HlsSignaledSystemIds: {
                                                        shape: "S5h",
                                                        locationName: "hlsSignaledSystemIds"
                                                    },
                                                    ResourceId: {
                                                        locationName: "resourceId"
                                                    },
                                                    Url: {
                                                        locationName: "url"
                                                    }
                                                }
                                            },
                                            StaticKeyProvider: {
                                                shape: "S5l",
                                                locationName: "staticKeyProvider"
                                            },
                                            Type: {
                                                locationName: "type"
                                            }
                                        }
                                    },
                                    FragmentLength: {
                                        locationName: "fragmentLength",
                                        type: "integer"
                                    },
                                    ImageBasedTrickPlay: {
                                        locationName: "imageBasedTrickPlay"
                                    },
                                    ImageBasedTrickPlaySettings: {
                                        locationName: "imageBasedTrickPlaySettings",
                                        type: "structure",
                                        members: {
                                            IntervalCadence: {
                                                locationName: "intervalCadence"
                                            },
                                            ThumbnailHeight: {
                                                locationName: "thumbnailHeight",
                                                type: "integer"
                                            },
                                            ThumbnailInterval: {
                                                locationName: "thumbnailInterval",
                                                type: "double"
                                            },
                                            ThumbnailWidth: {
                                                locationName: "thumbnailWidth",
                                                type: "integer"
                                            },
                                            TileHeight: {
                                                locationName: "tileHeight",
                                                type: "integer"
                                            },
                                            TileWidth: {
                                                locationName: "tileWidth",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    ManifestCompression: {
                                        locationName: "manifestCompression"
                                    },
                                    ManifestDurationFormat: {
                                        locationName: "manifestDurationFormat"
                                    },
                                    MinBufferTime: {
                                        locationName: "minBufferTime",
                                        type: "integer"
                                    },
                                    MinFinalSegmentLength: {
                                        locationName: "minFinalSegmentLength",
                                        type: "double"
                                    },
                                    MpdManifestBandwidthType: {
                                        locationName: "mpdManifestBandwidthType"
                                    },
                                    MpdProfile: {
                                        locationName: "mpdProfile"
                                    },
                                    PtsOffsetHandlingForBFrames: {
                                        locationName: "ptsOffsetHandlingForBFrames"
                                    },
                                    SegmentControl: {
                                        locationName: "segmentControl"
                                    },
                                    SegmentLength: {
                                        locationName: "segmentLength",
                                        type: "integer"
                                    },
                                    SegmentLengthControl: {
                                        locationName: "segmentLengthControl"
                                    },
                                    StreamInfResolution: {
                                        locationName: "streamInfResolution"
                                    },
                                    TargetDurationCompatibilityMode: {
                                        locationName: "targetDurationCompatibilityMode"
                                    },
                                    VideoCompositionOffsets: {
                                        locationName: "videoCompositionOffsets"
                                    },
                                    WriteDashManifest: {
                                        locationName: "writeDashManifest"
                                    },
                                    WriteHlsManifest: {
                                        locationName: "writeHlsManifest"
                                    },
                                    WriteSegmentTimelineInRepresentation: {
                                        locationName: "writeSegmentTimelineInRepresentation"
                                    }
                                }
                            },
                            DashIsoGroupSettings: {
                                locationName: "dashIsoGroupSettings",
                                type: "structure",
                                members: {
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "S10",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    AudioChannelConfigSchemeIdUri: {
                                        locationName: "audioChannelConfigSchemeIdUri"
                                    },
                                    BaseUrl: {
                                        locationName: "baseUrl"
                                    },
                                    DashManifestStyle: {
                                        locationName: "dashManifestStyle"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S52",
                                        locationName: "destinationSettings"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            PlaybackDeviceCompatibility: {
                                                locationName: "playbackDeviceCompatibility"
                                            },
                                            SpekeKeyProvider: {
                                                shape: "S6h",
                                                locationName: "spekeKeyProvider"
                                            }
                                        }
                                    },
                                    FragmentLength: {
                                        locationName: "fragmentLength",
                                        type: "integer"
                                    },
                                    HbbtvCompliance: {
                                        locationName: "hbbtvCompliance"
                                    },
                                    ImageBasedTrickPlay: {
                                        locationName: "imageBasedTrickPlay"
                                    },
                                    ImageBasedTrickPlaySettings: {
                                        locationName: "imageBasedTrickPlaySettings",
                                        type: "structure",
                                        members: {
                                            IntervalCadence: {
                                                locationName: "intervalCadence"
                                            },
                                            ThumbnailHeight: {
                                                locationName: "thumbnailHeight",
                                                type: "integer"
                                            },
                                            ThumbnailInterval: {
                                                locationName: "thumbnailInterval",
                                                type: "double"
                                            },
                                            ThumbnailWidth: {
                                                locationName: "thumbnailWidth",
                                                type: "integer"
                                            },
                                            TileHeight: {
                                                locationName: "tileHeight",
                                                type: "integer"
                                            },
                                            TileWidth: {
                                                locationName: "tileWidth",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    MinBufferTime: {
                                        locationName: "minBufferTime",
                                        type: "integer"
                                    },
                                    MinFinalSegmentLength: {
                                        locationName: "minFinalSegmentLength",
                                        type: "double"
                                    },
                                    MpdManifestBandwidthType: {
                                        locationName: "mpdManifestBandwidthType"
                                    },
                                    MpdProfile: {
                                        locationName: "mpdProfile"
                                    },
                                    PtsOffsetHandlingForBFrames: {
                                        locationName: "ptsOffsetHandlingForBFrames"
                                    },
                                    SegmentControl: {
                                        locationName: "segmentControl"
                                    },
                                    SegmentLength: {
                                        locationName: "segmentLength",
                                        type: "integer"
                                    },
                                    SegmentLengthControl: {
                                        locationName: "segmentLengthControl"
                                    },
                                    VideoCompositionOffsets: {
                                        locationName: "videoCompositionOffsets"
                                    },
                                    WriteSegmentTimelineInRepresentation: {
                                        locationName: "writeSegmentTimelineInRepresentation"
                                    }
                                }
                            },
                            FileGroupSettings: {
                                locationName: "fileGroupSettings",
                                type: "structure",
                                members: {
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S52",
                                        locationName: "destinationSettings"
                                    }
                                }
                            },
                            HlsGroupSettings: {
                                locationName: "hlsGroupSettings",
                                type: "structure",
                                members: {
                                    AdMarkers: {
                                        locationName: "adMarkers",
                                        type: "list",
                                        member: {}
                                    },
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "S10",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    AudioOnlyHeader: {
                                        locationName: "audioOnlyHeader"
                                    },
                                    BaseUrl: {
                                        locationName: "baseUrl"
                                    },
                                    CaptionLanguageMappings: {
                                        locationName: "captionLanguageMappings",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                CaptionChannel: {
                                                    locationName: "captionChannel",
                                                    type: "integer"
                                                },
                                                CustomLanguageCode: {
                                                    locationName: "customLanguageCode"
                                                },
                                                LanguageCode: {
                                                    locationName: "languageCode"
                                                },
                                                LanguageDescription: {
                                                    locationName: "languageDescription"
                                                }
                                            }
                                        }
                                    },
                                    CaptionLanguageSetting: {
                                        locationName: "captionLanguageSetting"
                                    },
                                    CaptionSegmentLengthControl: {
                                        locationName: "captionSegmentLengthControl"
                                    },
                                    ClientCache: {
                                        locationName: "clientCache"
                                    },
                                    CodecSpecification: {
                                        locationName: "codecSpecification"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S52",
                                        locationName: "destinationSettings"
                                    },
                                    DirectoryStructure: {
                                        locationName: "directoryStructure"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            ConstantInitializationVector: {
                                                locationName: "constantInitializationVector"
                                            },
                                            EncryptionMethod: {
                                                locationName: "encryptionMethod"
                                            },
                                            InitializationVectorInManifest: {
                                                locationName: "initializationVectorInManifest"
                                            },
                                            OfflineEncrypted: {
                                                locationName: "offlineEncrypted"
                                            },
                                            SpekeKeyProvider: {
                                                shape: "S6h",
                                                locationName: "spekeKeyProvider"
                                            },
                                            StaticKeyProvider: {
                                                shape: "S5l",
                                                locationName: "staticKeyProvider"
                                            },
                                            Type: {
                                                locationName: "type"
                                            }
                                        }
                                    },
                                    ImageBasedTrickPlay: {
                                        locationName: "imageBasedTrickPlay"
                                    },
                                    ImageBasedTrickPlaySettings: {
                                        locationName: "imageBasedTrickPlaySettings",
                                        type: "structure",
                                        members: {
                                            IntervalCadence: {
                                                locationName: "intervalCadence"
                                            },
                                            ThumbnailHeight: {
                                                locationName: "thumbnailHeight",
                                                type: "integer"
                                            },
                                            ThumbnailInterval: {
                                                locationName: "thumbnailInterval",
                                                type: "double"
                                            },
                                            ThumbnailWidth: {
                                                locationName: "thumbnailWidth",
                                                type: "integer"
                                            },
                                            TileHeight: {
                                                locationName: "tileHeight",
                                                type: "integer"
                                            },
                                            TileWidth: {
                                                locationName: "tileWidth",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    ManifestCompression: {
                                        locationName: "manifestCompression"
                                    },
                                    ManifestDurationFormat: {
                                        locationName: "manifestDurationFormat"
                                    },
                                    MinFinalSegmentLength: {
                                        locationName: "minFinalSegmentLength",
                                        type: "double"
                                    },
                                    MinSegmentLength: {
                                        locationName: "minSegmentLength",
                                        type: "integer"
                                    },
                                    OutputSelection: {
                                        locationName: "outputSelection"
                                    },
                                    ProgramDateTime: {
                                        locationName: "programDateTime"
                                    },
                                    ProgramDateTimePeriod: {
                                        locationName: "programDateTimePeriod",
                                        type: "integer"
                                    },
                                    ProgressiveWriteHlsManifest: {
                                        locationName: "progressiveWriteHlsManifest"
                                    },
                                    SegmentControl: {
                                        locationName: "segmentControl"
                                    },
                                    SegmentLength: {
                                        locationName: "segmentLength",
                                        type: "integer"
                                    },
                                    SegmentLengthControl: {
                                        locationName: "segmentLengthControl"
                                    },
                                    SegmentsPerSubdirectory: {
                                        locationName: "segmentsPerSubdirectory",
                                        type: "integer"
                                    },
                                    StreamInfResolution: {
                                        locationName: "streamInfResolution"
                                    },
                                    TargetDurationCompatibilityMode: {
                                        locationName: "targetDurationCompatibilityMode"
                                    },
                                    TimedMetadataId3Frame: {
                                        locationName: "timedMetadataId3Frame"
                                    },
                                    TimedMetadataId3Period: {
                                        locationName: "timedMetadataId3Period",
                                        type: "integer"
                                    },
                                    TimestampDeltaMilliseconds: {
                                        locationName: "timestampDeltaMilliseconds",
                                        type: "integer"
                                    }
                                }
                            },
                            MsSmoothGroupSettings: {
                                locationName: "msSmoothGroupSettings",
                                type: "structure",
                                members: {
                                    AdditionalManifests: {
                                        locationName: "additionalManifests",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                ManifestNameModifier: {
                                                    locationName: "manifestNameModifier"
                                                },
                                                SelectedOutputs: {
                                                    shape: "S10",
                                                    locationName: "selectedOutputs"
                                                }
                                            }
                                        }
                                    },
                                    AudioDeduplication: {
                                        locationName: "audioDeduplication"
                                    },
                                    Destination: {
                                        locationName: "destination"
                                    },
                                    DestinationSettings: {
                                        shape: "S52",
                                        locationName: "destinationSettings"
                                    },
                                    Encryption: {
                                        locationName: "encryption",
                                        type: "structure",
                                        members: {
                                            SpekeKeyProvider: {
                                                shape: "S6h",
                                                locationName: "spekeKeyProvider"
                                            }
                                        }
                                    },
                                    FragmentLength: {
                                        locationName: "fragmentLength",
                                        type: "integer"
                                    },
                                    FragmentLengthControl: {
                                        locationName: "fragmentLengthControl"
                                    },
                                    ManifestEncoding: {
                                        locationName: "manifestEncoding"
                                    }
                                }
                            },
                            Type: {
                                locationName: "type"
                            }
                        }
                    },
                    Outputs: {
                        locationName: "outputs",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AudioDescriptions: {
                                    shape: "S83",
                                    locationName: "audioDescriptions"
                                },
                                CaptionDescriptions: {
                                    locationName: "captionDescriptions",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            CaptionSelectorName: {
                                                locationName: "captionSelectorName"
                                            },
                                            CustomLanguageCode: {
                                                locationName: "customLanguageCode"
                                            },
                                            DestinationSettings: {
                                                shape: "Saq",
                                                locationName: "destinationSettings"
                                            },
                                            LanguageCode: {
                                                locationName: "languageCode"
                                            },
                                            LanguageDescription: {
                                                locationName: "languageDescription"
                                            }
                                        }
                                    }
                                },
                                ContainerSettings: {
                                    shape: "Sc0",
                                    locationName: "containerSettings"
                                },
                                Extension: {
                                    locationName: "extension"
                                },
                                NameModifier: {
                                    locationName: "nameModifier"
                                },
                                OutputSettings: {
                                    locationName: "outputSettings",
                                    type: "structure",
                                    members: {
                                        HlsSettings: {
                                            locationName: "hlsSettings",
                                            type: "structure",
                                            members: {
                                                AudioGroupId: {
                                                    locationName: "audioGroupId"
                                                },
                                                AudioOnlyContainer: {
                                                    locationName: "audioOnlyContainer"
                                                },
                                                AudioRenditionSets: {
                                                    locationName: "audioRenditionSets"
                                                },
                                                AudioTrackType: {
                                                    locationName: "audioTrackType"
                                                },
                                                DescriptiveVideoServiceFlag: {
                                                    locationName: "descriptiveVideoServiceFlag"
                                                },
                                                IFrameOnlyManifest: {
                                                    locationName: "iFrameOnlyManifest"
                                                },
                                                SegmentModifier: {
                                                    locationName: "segmentModifier"
                                                }
                                            }
                                        }
                                    }
                                },
                                Preset: {
                                    locationName: "preset"
                                },
                                VideoDescription: {
                                    shape: "Sef",
                                    locationName: "videoDescription"
                                }
                            }
                        }
                    }
                }
            }
        },
        S52: {
            type: "structure",
            members: {
                S3Settings: {
                    locationName: "s3Settings",
                    type: "structure",
                    members: {
                        AccessControl: {
                            locationName: "accessControl",
                            type: "structure",
                            members: {
                                CannedAcl: {
                                    locationName: "cannedAcl"
                                }
                            }
                        },
                        Encryption: {
                            locationName: "encryption",
                            type: "structure",
                            members: {
                                EncryptionType: {
                                    locationName: "encryptionType"
                                },
                                KmsEncryptionContext: {
                                    locationName: "kmsEncryptionContext"
                                },
                                KmsKeyArn: {
                                    locationName: "kmsKeyArn"
                                }
                            }
                        },
                        StorageClass: {
                            locationName: "storageClass"
                        }
                    }
                }
            }
        },
        S5h: {
            type: "list",
            member: {}
        },
        S5l: {
            type: "structure",
            members: {
                KeyFormat: {
                    locationName: "keyFormat"
                },
                KeyFormatVersions: {
                    locationName: "keyFormatVersions"
                },
                StaticKeyValue: {
                    locationName: "staticKeyValue"
                },
                Url: {
                    locationName: "url"
                }
            }
        },
        S6h: {
            type: "structure",
            members: {
                CertificateArn: {
                    locationName: "certificateArn"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                SystemIds: {
                    locationName: "systemIds",
                    type: "list",
                    member: {}
                },
                Url: {
                    locationName: "url"
                }
            }
        },
        S83: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AudioChannelTaggingSettings: {
                        locationName: "audioChannelTaggingSettings",
                        type: "structure",
                        members: {
                            ChannelTag: {
                                locationName: "channelTag"
                            },
                            ChannelTags: {
                                locationName: "channelTags",
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    AudioNormalizationSettings: {
                        locationName: "audioNormalizationSettings",
                        type: "structure",
                        members: {
                            Algorithm: {
                                locationName: "algorithm"
                            },
                            AlgorithmControl: {
                                locationName: "algorithmControl"
                            },
                            CorrectionGateLevel: {
                                locationName: "correctionGateLevel",
                                type: "integer"
                            },
                            LoudnessLogging: {
                                locationName: "loudnessLogging"
                            },
                            PeakCalculation: {
                                locationName: "peakCalculation"
                            },
                            TargetLkfs: {
                                locationName: "targetLkfs",
                                type: "double"
                            },
                            TruePeakLimiterThreshold: {
                                locationName: "truePeakLimiterThreshold",
                                type: "double"
                            }
                        }
                    },
                    AudioSourceName: {
                        locationName: "audioSourceName"
                    },
                    AudioType: {
                        locationName: "audioType",
                        type: "integer"
                    },
                    AudioTypeControl: {
                        locationName: "audioTypeControl"
                    },
                    CodecSettings: {
                        locationName: "codecSettings",
                        type: "structure",
                        members: {
                            AacSettings: {
                                locationName: "aacSettings",
                                type: "structure",
                                members: {
                                    AudioDescriptionBroadcasterMix: {
                                        locationName: "audioDescriptionBroadcasterMix"
                                    },
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    CodecProfile: {
                                        locationName: "codecProfile"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    RateControlMode: {
                                        locationName: "rateControlMode"
                                    },
                                    RawFormat: {
                                        locationName: "rawFormat"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    Specification: {
                                        locationName: "specification"
                                    },
                                    VbrQuality: {
                                        locationName: "vbrQuality"
                                    }
                                }
                            },
                            Ac3Settings: {
                                locationName: "ac3Settings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    BitstreamMode: {
                                        locationName: "bitstreamMode"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    Dialnorm: {
                                        locationName: "dialnorm",
                                        type: "integer"
                                    },
                                    DynamicRangeCompressionLine: {
                                        locationName: "dynamicRangeCompressionLine"
                                    },
                                    DynamicRangeCompressionProfile: {
                                        locationName: "dynamicRangeCompressionProfile"
                                    },
                                    DynamicRangeCompressionRf: {
                                        locationName: "dynamicRangeCompressionRf"
                                    },
                                    LfeFilter: {
                                        locationName: "lfeFilter"
                                    },
                                    MetadataControl: {
                                        locationName: "metadataControl"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            AiffSettings: {
                                locationName: "aiffSettings",
                                type: "structure",
                                members: {
                                    BitDepth: {
                                        locationName: "bitDepth",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            Codec: {
                                locationName: "codec"
                            },
                            Eac3AtmosSettings: {
                                locationName: "eac3AtmosSettings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    BitstreamMode: {
                                        locationName: "bitstreamMode"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    DialogueIntelligence: {
                                        locationName: "dialogueIntelligence"
                                    },
                                    DownmixControl: {
                                        locationName: "downmixControl"
                                    },
                                    DynamicRangeCompressionLine: {
                                        locationName: "dynamicRangeCompressionLine"
                                    },
                                    DynamicRangeCompressionRf: {
                                        locationName: "dynamicRangeCompressionRf"
                                    },
                                    DynamicRangeControl: {
                                        locationName: "dynamicRangeControl"
                                    },
                                    LoRoCenterMixLevel: {
                                        locationName: "loRoCenterMixLevel",
                                        type: "double"
                                    },
                                    LoRoSurroundMixLevel: {
                                        locationName: "loRoSurroundMixLevel",
                                        type: "double"
                                    },
                                    LtRtCenterMixLevel: {
                                        locationName: "ltRtCenterMixLevel",
                                        type: "double"
                                    },
                                    LtRtSurroundMixLevel: {
                                        locationName: "ltRtSurroundMixLevel",
                                        type: "double"
                                    },
                                    MeteringMode: {
                                        locationName: "meteringMode"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    SpeechThreshold: {
                                        locationName: "speechThreshold",
                                        type: "integer"
                                    },
                                    StereoDownmix: {
                                        locationName: "stereoDownmix"
                                    },
                                    SurroundExMode: {
                                        locationName: "surroundExMode"
                                    }
                                }
                            },
                            Eac3Settings: {
                                locationName: "eac3Settings",
                                type: "structure",
                                members: {
                                    AttenuationControl: {
                                        locationName: "attenuationControl"
                                    },
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    BitstreamMode: {
                                        locationName: "bitstreamMode"
                                    },
                                    CodingMode: {
                                        locationName: "codingMode"
                                    },
                                    DcFilter: {
                                        locationName: "dcFilter"
                                    },
                                    Dialnorm: {
                                        locationName: "dialnorm",
                                        type: "integer"
                                    },
                                    DynamicRangeCompressionLine: {
                                        locationName: "dynamicRangeCompressionLine"
                                    },
                                    DynamicRangeCompressionRf: {
                                        locationName: "dynamicRangeCompressionRf"
                                    },
                                    LfeControl: {
                                        locationName: "lfeControl"
                                    },
                                    LfeFilter: {
                                        locationName: "lfeFilter"
                                    },
                                    LoRoCenterMixLevel: {
                                        locationName: "loRoCenterMixLevel",
                                        type: "double"
                                    },
                                    LoRoSurroundMixLevel: {
                                        locationName: "loRoSurroundMixLevel",
                                        type: "double"
                                    },
                                    LtRtCenterMixLevel: {
                                        locationName: "ltRtCenterMixLevel",
                                        type: "double"
                                    },
                                    LtRtSurroundMixLevel: {
                                        locationName: "ltRtSurroundMixLevel",
                                        type: "double"
                                    },
                                    MetadataControl: {
                                        locationName: "metadataControl"
                                    },
                                    PassthroughControl: {
                                        locationName: "passthroughControl"
                                    },
                                    PhaseControl: {
                                        locationName: "phaseControl"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    StereoDownmix: {
                                        locationName: "stereoDownmix"
                                    },
                                    SurroundExMode: {
                                        locationName: "surroundExMode"
                                    },
                                    SurroundMode: {
                                        locationName: "surroundMode"
                                    }
                                }
                            },
                            FlacSettings: {
                                locationName: "flacSettings",
                                type: "structure",
                                members: {
                                    BitDepth: {
                                        locationName: "bitDepth",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            Mp2Settings: {
                                locationName: "mp2Settings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            Mp3Settings: {
                                locationName: "mp3Settings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    RateControlMode: {
                                        locationName: "rateControlMode"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    VbrQuality: {
                                        locationName: "vbrQuality",
                                        type: "integer"
                                    }
                                }
                            },
                            OpusSettings: {
                                locationName: "opusSettings",
                                type: "structure",
                                members: {
                                    Bitrate: {
                                        locationName: "bitrate",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            },
                            VorbisSettings: {
                                locationName: "vorbisSettings",
                                type: "structure",
                                members: {
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    },
                                    VbrQuality: {
                                        locationName: "vbrQuality",
                                        type: "integer"
                                    }
                                }
                            },
                            WavSettings: {
                                locationName: "wavSettings",
                                type: "structure",
                                members: {
                                    BitDepth: {
                                        locationName: "bitDepth",
                                        type: "integer"
                                    },
                                    Channels: {
                                        locationName: "channels",
                                        type: "integer"
                                    },
                                    Format: {
                                        locationName: "format"
                                    },
                                    SampleRate: {
                                        locationName: "sampleRate",
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    CustomLanguageCode: {
                        locationName: "customLanguageCode"
                    },
                    LanguageCode: {
                        locationName: "languageCode"
                    },
                    LanguageCodeControl: {
                        locationName: "languageCodeControl"
                    },
                    RemixSettings: {
                        shape: "S1e",
                        locationName: "remixSettings"
                    },
                    StreamName: {
                        locationName: "streamName"
                    }
                }
            }
        },
        Saq: {
            type: "structure",
            members: {
                BurninDestinationSettings: {
                    locationName: "burninDestinationSettings",
                    type: "structure",
                    members: {
                        Alignment: {
                            locationName: "alignment"
                        },
                        ApplyFontColor: {
                            locationName: "applyFontColor"
                        },
                        BackgroundColor: {
                            locationName: "backgroundColor"
                        },
                        BackgroundOpacity: {
                            locationName: "backgroundOpacity",
                            type: "integer"
                        },
                        FallbackFont: {
                            locationName: "fallbackFont"
                        },
                        FontColor: {
                            locationName: "fontColor"
                        },
                        FontOpacity: {
                            locationName: "fontOpacity",
                            type: "integer"
                        },
                        FontResolution: {
                            locationName: "fontResolution",
                            type: "integer"
                        },
                        FontScript: {
                            locationName: "fontScript"
                        },
                        FontSize: {
                            locationName: "fontSize",
                            type: "integer"
                        },
                        HexFontColor: {
                            locationName: "hexFontColor"
                        },
                        OutlineColor: {
                            locationName: "outlineColor"
                        },
                        OutlineSize: {
                            locationName: "outlineSize",
                            type: "integer"
                        },
                        ShadowColor: {
                            locationName: "shadowColor"
                        },
                        ShadowOpacity: {
                            locationName: "shadowOpacity",
                            type: "integer"
                        },
                        ShadowXOffset: {
                            locationName: "shadowXOffset",
                            type: "integer"
                        },
                        ShadowYOffset: {
                            locationName: "shadowYOffset",
                            type: "integer"
                        },
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        },
                        TeletextSpacing: {
                            locationName: "teletextSpacing"
                        },
                        XPosition: {
                            locationName: "xPosition",
                            type: "integer"
                        },
                        YPosition: {
                            locationName: "yPosition",
                            type: "integer"
                        }
                    }
                },
                DestinationType: {
                    locationName: "destinationType"
                },
                DvbSubDestinationSettings: {
                    locationName: "dvbSubDestinationSettings",
                    type: "structure",
                    members: {
                        Alignment: {
                            locationName: "alignment"
                        },
                        ApplyFontColor: {
                            locationName: "applyFontColor"
                        },
                        BackgroundColor: {
                            locationName: "backgroundColor"
                        },
                        BackgroundOpacity: {
                            locationName: "backgroundOpacity",
                            type: "integer"
                        },
                        DdsHandling: {
                            locationName: "ddsHandling"
                        },
                        DdsXCoordinate: {
                            locationName: "ddsXCoordinate",
                            type: "integer"
                        },
                        DdsYCoordinate: {
                            locationName: "ddsYCoordinate",
                            type: "integer"
                        },
                        FallbackFont: {
                            locationName: "fallbackFont"
                        },
                        FontColor: {
                            locationName: "fontColor"
                        },
                        FontOpacity: {
                            locationName: "fontOpacity",
                            type: "integer"
                        },
                        FontResolution: {
                            locationName: "fontResolution",
                            type: "integer"
                        },
                        FontScript: {
                            locationName: "fontScript"
                        },
                        FontSize: {
                            locationName: "fontSize",
                            type: "integer"
                        },
                        Height: {
                            locationName: "height",
                            type: "integer"
                        },
                        HexFontColor: {
                            locationName: "hexFontColor"
                        },
                        OutlineColor: {
                            locationName: "outlineColor"
                        },
                        OutlineSize: {
                            locationName: "outlineSize",
                            type: "integer"
                        },
                        ShadowColor: {
                            locationName: "shadowColor"
                        },
                        ShadowOpacity: {
                            locationName: "shadowOpacity",
                            type: "integer"
                        },
                        ShadowXOffset: {
                            locationName: "shadowXOffset",
                            type: "integer"
                        },
                        ShadowYOffset: {
                            locationName: "shadowYOffset",
                            type: "integer"
                        },
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        },
                        SubtitlingType: {
                            locationName: "subtitlingType"
                        },
                        TeletextSpacing: {
                            locationName: "teletextSpacing"
                        },
                        Width: {
                            locationName: "width",
                            type: "integer"
                        },
                        XPosition: {
                            locationName: "xPosition",
                            type: "integer"
                        },
                        YPosition: {
                            locationName: "yPosition",
                            type: "integer"
                        }
                    }
                },
                EmbeddedDestinationSettings: {
                    locationName: "embeddedDestinationSettings",
                    type: "structure",
                    members: {
                        Destination608ChannelNumber: {
                            locationName: "destination608ChannelNumber",
                            type: "integer"
                        },
                        Destination708ServiceNumber: {
                            locationName: "destination708ServiceNumber",
                            type: "integer"
                        }
                    }
                },
                ImscDestinationSettings: {
                    locationName: "imscDestinationSettings",
                    type: "structure",
                    members: {
                        Accessibility: {
                            locationName: "accessibility"
                        },
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                },
                SccDestinationSettings: {
                    locationName: "sccDestinationSettings",
                    type: "structure",
                    members: {
                        Framerate: {
                            locationName: "framerate"
                        }
                    }
                },
                SrtDestinationSettings: {
                    locationName: "srtDestinationSettings",
                    type: "structure",
                    members: {
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                },
                TeletextDestinationSettings: {
                    locationName: "teletextDestinationSettings",
                    type: "structure",
                    members: {
                        PageNumber: {
                            locationName: "pageNumber"
                        },
                        PageTypes: {
                            locationName: "pageTypes",
                            type: "list",
                            member: {}
                        }
                    }
                },
                TtmlDestinationSettings: {
                    locationName: "ttmlDestinationSettings",
                    type: "structure",
                    members: {
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                },
                WebvttDestinationSettings: {
                    locationName: "webvttDestinationSettings",
                    type: "structure",
                    members: {
                        Accessibility: {
                            locationName: "accessibility"
                        },
                        StylePassthrough: {
                            locationName: "stylePassthrough"
                        }
                    }
                }
            }
        },
        Sc0: {
            type: "structure",
            members: {
                CmfcSettings: {
                    locationName: "cmfcSettings",
                    type: "structure",
                    members: {
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        AudioGroupId: {
                            locationName: "audioGroupId"
                        },
                        AudioRenditionSets: {
                            locationName: "audioRenditionSets"
                        },
                        AudioTrackType: {
                            locationName: "audioTrackType"
                        },
                        DescriptiveVideoServiceFlag: {
                            locationName: "descriptiveVideoServiceFlag"
                        },
                        IFrameOnlyManifest: {
                            locationName: "iFrameOnlyManifest"
                        },
                        KlvMetadata: {
                            locationName: "klvMetadata"
                        },
                        ManifestMetadataSignaling: {
                            locationName: "manifestMetadataSignaling"
                        },
                        Scte35Esam: {
                            locationName: "scte35Esam"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        },
                        TimedMetadata: {
                            locationName: "timedMetadata"
                        },
                        TimedMetadataBoxVersion: {
                            locationName: "timedMetadataBoxVersion"
                        },
                        TimedMetadataSchemeIdUri: {
                            locationName: "timedMetadataSchemeIdUri"
                        },
                        TimedMetadataValue: {
                            locationName: "timedMetadataValue"
                        }
                    }
                },
                Container: {
                    locationName: "container"
                },
                F4vSettings: {
                    locationName: "f4vSettings",
                    type: "structure",
                    members: {
                        MoovPlacement: {
                            locationName: "moovPlacement"
                        }
                    }
                },
                M2tsSettings: {
                    locationName: "m2tsSettings",
                    type: "structure",
                    members: {
                        AudioBufferModel: {
                            locationName: "audioBufferModel"
                        },
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        AudioFramesPerPes: {
                            locationName: "audioFramesPerPes",
                            type: "integer"
                        },
                        AudioPids: {
                            shape: "Scj",
                            locationName: "audioPids"
                        },
                        Bitrate: {
                            locationName: "bitrate",
                            type: "integer"
                        },
                        BufferModel: {
                            locationName: "bufferModel"
                        },
                        DataPTSControl: {
                            locationName: "dataPTSControl"
                        },
                        DvbNitSettings: {
                            locationName: "dvbNitSettings",
                            type: "structure",
                            members: {
                                NetworkId: {
                                    locationName: "networkId",
                                    type: "integer"
                                },
                                NetworkName: {
                                    locationName: "networkName"
                                },
                                NitInterval: {
                                    locationName: "nitInterval",
                                    type: "integer"
                                }
                            }
                        },
                        DvbSdtSettings: {
                            locationName: "dvbSdtSettings",
                            type: "structure",
                            members: {
                                OutputSdt: {
                                    locationName: "outputSdt"
                                },
                                SdtInterval: {
                                    locationName: "sdtInterval",
                                    type: "integer"
                                },
                                ServiceName: {
                                    locationName: "serviceName"
                                },
                                ServiceProviderName: {
                                    locationName: "serviceProviderName"
                                }
                            }
                        },
                        DvbSubPids: {
                            shape: "Scj",
                            locationName: "dvbSubPids"
                        },
                        DvbTdtSettings: {
                            locationName: "dvbTdtSettings",
                            type: "structure",
                            members: {
                                TdtInterval: {
                                    locationName: "tdtInterval",
                                    type: "integer"
                                }
                            }
                        },
                        DvbTeletextPid: {
                            locationName: "dvbTeletextPid",
                            type: "integer"
                        },
                        EbpAudioInterval: {
                            locationName: "ebpAudioInterval"
                        },
                        EbpPlacement: {
                            locationName: "ebpPlacement"
                        },
                        EsRateInPes: {
                            locationName: "esRateInPes"
                        },
                        ForceTsVideoEbpOrder: {
                            locationName: "forceTsVideoEbpOrder"
                        },
                        FragmentTime: {
                            locationName: "fragmentTime",
                            type: "double"
                        },
                        KlvMetadata: {
                            locationName: "klvMetadata"
                        },
                        MaxPcrInterval: {
                            locationName: "maxPcrInterval",
                            type: "integer"
                        },
                        MinEbpInterval: {
                            locationName: "minEbpInterval",
                            type: "integer"
                        },
                        NielsenId3: {
                            locationName: "nielsenId3"
                        },
                        NullPacketBitrate: {
                            locationName: "nullPacketBitrate",
                            type: "double"
                        },
                        PatInterval: {
                            locationName: "patInterval",
                            type: "integer"
                        },
                        PcrControl: {
                            locationName: "pcrControl"
                        },
                        PcrPid: {
                            locationName: "pcrPid",
                            type: "integer"
                        },
                        PmtInterval: {
                            locationName: "pmtInterval",
                            type: "integer"
                        },
                        PmtPid: {
                            locationName: "pmtPid",
                            type: "integer"
                        },
                        PrivateMetadataPid: {
                            locationName: "privateMetadataPid",
                            type: "integer"
                        },
                        ProgramNumber: {
                            locationName: "programNumber",
                            type: "integer"
                        },
                        PtsOffset: {
                            locationName: "ptsOffset",
                            type: "integer"
                        },
                        PtsOffsetMode: {
                            locationName: "ptsOffsetMode"
                        },
                        RateMode: {
                            locationName: "rateMode"
                        },
                        Scte35Esam: {
                            locationName: "scte35Esam",
                            type: "structure",
                            members: {
                                Scte35EsamPid: {
                                    locationName: "scte35EsamPid",
                                    type: "integer"
                                }
                            }
                        },
                        Scte35Pid: {
                            locationName: "scte35Pid",
                            type: "integer"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        },
                        SegmentationMarkers: {
                            locationName: "segmentationMarkers"
                        },
                        SegmentationStyle: {
                            locationName: "segmentationStyle"
                        },
                        SegmentationTime: {
                            locationName: "segmentationTime",
                            type: "double"
                        },
                        TimedMetadataPid: {
                            locationName: "timedMetadataPid",
                            type: "integer"
                        },
                        TransportStreamId: {
                            locationName: "transportStreamId",
                            type: "integer"
                        },
                        VideoPid: {
                            locationName: "videoPid",
                            type: "integer"
                        }
                    }
                },
                M3u8Settings: {
                    locationName: "m3u8Settings",
                    type: "structure",
                    members: {
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        AudioFramesPerPes: {
                            locationName: "audioFramesPerPes",
                            type: "integer"
                        },
                        AudioPids: {
                            shape: "Scj",
                            locationName: "audioPids"
                        },
                        DataPTSControl: {
                            locationName: "dataPTSControl"
                        },
                        MaxPcrInterval: {
                            locationName: "maxPcrInterval",
                            type: "integer"
                        },
                        NielsenId3: {
                            locationName: "nielsenId3"
                        },
                        PatInterval: {
                            locationName: "patInterval",
                            type: "integer"
                        },
                        PcrControl: {
                            locationName: "pcrControl"
                        },
                        PcrPid: {
                            locationName: "pcrPid",
                            type: "integer"
                        },
                        PmtInterval: {
                            locationName: "pmtInterval",
                            type: "integer"
                        },
                        PmtPid: {
                            locationName: "pmtPid",
                            type: "integer"
                        },
                        PrivateMetadataPid: {
                            locationName: "privateMetadataPid",
                            type: "integer"
                        },
                        ProgramNumber: {
                            locationName: "programNumber",
                            type: "integer"
                        },
                        PtsOffset: {
                            locationName: "ptsOffset",
                            type: "integer"
                        },
                        PtsOffsetMode: {
                            locationName: "ptsOffsetMode"
                        },
                        Scte35Pid: {
                            locationName: "scte35Pid",
                            type: "integer"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        },
                        TimedMetadata: {
                            locationName: "timedMetadata"
                        },
                        TimedMetadataPid: {
                            locationName: "timedMetadataPid",
                            type: "integer"
                        },
                        TransportStreamId: {
                            locationName: "transportStreamId",
                            type: "integer"
                        },
                        VideoPid: {
                            locationName: "videoPid",
                            type: "integer"
                        }
                    }
                },
                MovSettings: {
                    locationName: "movSettings",
                    type: "structure",
                    members: {
                        ClapAtom: {
                            locationName: "clapAtom"
                        },
                        CslgAtom: {
                            locationName: "cslgAtom"
                        },
                        Mpeg2FourCCControl: {
                            locationName: "mpeg2FourCCControl"
                        },
                        PaddingControl: {
                            locationName: "paddingControl"
                        },
                        Reference: {
                            locationName: "reference"
                        }
                    }
                },
                Mp4Settings: {
                    locationName: "mp4Settings",
                    type: "structure",
                    members: {
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        CslgAtom: {
                            locationName: "cslgAtom"
                        },
                        CttsVersion: {
                            locationName: "cttsVersion",
                            type: "integer"
                        },
                        FreeSpaceBox: {
                            locationName: "freeSpaceBox"
                        },
                        MoovPlacement: {
                            locationName: "moovPlacement"
                        },
                        Mp4MajorBrand: {
                            locationName: "mp4MajorBrand"
                        }
                    }
                },
                MpdSettings: {
                    locationName: "mpdSettings",
                    type: "structure",
                    members: {
                        AccessibilityCaptionHints: {
                            locationName: "accessibilityCaptionHints"
                        },
                        AudioDuration: {
                            locationName: "audioDuration"
                        },
                        CaptionContainerType: {
                            locationName: "captionContainerType"
                        },
                        KlvMetadata: {
                            locationName: "klvMetadata"
                        },
                        ManifestMetadataSignaling: {
                            locationName: "manifestMetadataSignaling"
                        },
                        Scte35Esam: {
                            locationName: "scte35Esam"
                        },
                        Scte35Source: {
                            locationName: "scte35Source"
                        },
                        TimedMetadata: {
                            locationName: "timedMetadata"
                        },
                        TimedMetadataBoxVersion: {
                            locationName: "timedMetadataBoxVersion"
                        },
                        TimedMetadataSchemeIdUri: {
                            locationName: "timedMetadataSchemeIdUri"
                        },
                        TimedMetadataValue: {
                            locationName: "timedMetadataValue"
                        }
                    }
                },
                MxfSettings: {
                    locationName: "mxfSettings",
                    type: "structure",
                    members: {
                        AfdSignaling: {
                            locationName: "afdSignaling"
                        },
                        Profile: {
                            locationName: "profile"
                        },
                        XavcProfileSettings: {
                            locationName: "xavcProfileSettings",
                            type: "structure",
                            members: {
                                DurationMode: {
                                    locationName: "durationMode"
                                },
                                MaxAncDataSize: {
                                    locationName: "maxAncDataSize",
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        Scj: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Sef: {
            type: "structure",
            members: {
                AfdSignaling: {
                    locationName: "afdSignaling"
                },
                AntiAlias: {
                    locationName: "antiAlias"
                },
                CodecSettings: {
                    locationName: "codecSettings",
                    type: "structure",
                    members: {
                        Av1Settings: {
                            locationName: "av1Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                BitDepth: {
                                    locationName: "bitDepth"
                                },
                                FilmGrainSynthesis: {
                                    locationName: "filmGrainSynthesis"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                QvbrSettings: {
                                    locationName: "qvbrSettings",
                                    type: "structure",
                                    members: {
                                        QvbrQualityLevel: {
                                            locationName: "qvbrQualityLevel",
                                            type: "integer"
                                        },
                                        QvbrQualityLevelFineTune: {
                                            locationName: "qvbrQualityLevelFineTune",
                                            type: "double"
                                        }
                                    }
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                Slices: {
                                    locationName: "slices",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                }
                            }
                        },
                        AvcIntraSettings: {
                            locationName: "avcIntraSettings",
                            type: "structure",
                            members: {
                                AvcIntraClass: {
                                    locationName: "avcIntraClass"
                                },
                                AvcIntraUhdSettings: {
                                    locationName: "avcIntraUhdSettings",
                                    type: "structure",
                                    members: {
                                        QualityTuningLevel: {
                                            locationName: "qualityTuningLevel"
                                        }
                                    }
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                }
                            }
                        },
                        Codec: {
                            locationName: "codec"
                        },
                        FrameCaptureSettings: {
                            locationName: "frameCaptureSettings",
                            type: "structure",
                            members: {
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                MaxCaptures: {
                                    locationName: "maxCaptures",
                                    type: "integer"
                                },
                                Quality: {
                                    locationName: "quality",
                                    type: "integer"
                                }
                            }
                        },
                        H264Settings: {
                            locationName: "h264Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                BandwidthReductionFilter: {
                                    shape: "Sfe",
                                    locationName: "bandwidthReductionFilter"
                                },
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                CodecLevel: {
                                    locationName: "codecLevel"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                DynamicSubGop: {
                                    locationName: "dynamicSubGop"
                                },
                                EndOfStreamMarkers: {
                                    locationName: "endOfStreamMarkers"
                                },
                                EntropyEncoding: {
                                    locationName: "entropyEncoding"
                                },
                                FieldEncoding: {
                                    locationName: "fieldEncoding"
                                },
                                FlickerAdaptiveQuantization: {
                                    locationName: "flickerAdaptiveQuantization"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopBReference: {
                                    locationName: "gopBReference"
                                },
                                GopClosedCadence: {
                                    locationName: "gopClosedCadence",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                GopSizeUnits: {
                                    locationName: "gopSizeUnits"
                                },
                                HrdBufferFinalFillPercentage: {
                                    locationName: "hrdBufferFinalFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferInitialFillPercentage: {
                                    locationName: "hrdBufferInitialFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                MinIInterval: {
                                    locationName: "minIInterval",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                NumberReferenceFrames: {
                                    locationName: "numberReferenceFrames",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                QvbrSettings: {
                                    locationName: "qvbrSettings",
                                    type: "structure",
                                    members: {
                                        MaxAverageBitrate: {
                                            locationName: "maxAverageBitrate",
                                            type: "integer"
                                        },
                                        QvbrQualityLevel: {
                                            locationName: "qvbrQualityLevel",
                                            type: "integer"
                                        },
                                        QvbrQualityLevelFineTune: {
                                            locationName: "qvbrQualityLevelFineTune",
                                            type: "double"
                                        }
                                    }
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                RepeatPps: {
                                    locationName: "repeatPps"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SceneChangeDetect: {
                                    locationName: "sceneChangeDetect"
                                },
                                Slices: {
                                    locationName: "slices",
                                    type: "integer"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Softness: {
                                    locationName: "softness",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                Syntax: {
                                    locationName: "syntax"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                },
                                UnregisteredSeiTimecode: {
                                    locationName: "unregisteredSeiTimecode"
                                }
                            }
                        },
                        H265Settings: {
                            locationName: "h265Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                AlternateTransferFunctionSei: {
                                    locationName: "alternateTransferFunctionSei"
                                },
                                BandwidthReductionFilter: {
                                    shape: "Sfe",
                                    locationName: "bandwidthReductionFilter"
                                },
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                CodecLevel: {
                                    locationName: "codecLevel"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                DynamicSubGop: {
                                    locationName: "dynamicSubGop"
                                },
                                EndOfStreamMarkers: {
                                    locationName: "endOfStreamMarkers"
                                },
                                FlickerAdaptiveQuantization: {
                                    locationName: "flickerAdaptiveQuantization"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopBReference: {
                                    locationName: "gopBReference"
                                },
                                GopClosedCadence: {
                                    locationName: "gopClosedCadence",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                GopSizeUnits: {
                                    locationName: "gopSizeUnits"
                                },
                                HrdBufferFinalFillPercentage: {
                                    locationName: "hrdBufferFinalFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferInitialFillPercentage: {
                                    locationName: "hrdBufferInitialFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                MinIInterval: {
                                    locationName: "minIInterval",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                NumberReferenceFrames: {
                                    locationName: "numberReferenceFrames",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                QvbrSettings: {
                                    locationName: "qvbrSettings",
                                    type: "structure",
                                    members: {
                                        MaxAverageBitrate: {
                                            locationName: "maxAverageBitrate",
                                            type: "integer"
                                        },
                                        QvbrQualityLevel: {
                                            locationName: "qvbrQualityLevel",
                                            type: "integer"
                                        },
                                        QvbrQualityLevelFineTune: {
                                            locationName: "qvbrQualityLevelFineTune",
                                            type: "double"
                                        }
                                    }
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                SampleAdaptiveOffsetFilterMode: {
                                    locationName: "sampleAdaptiveOffsetFilterMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SceneChangeDetect: {
                                    locationName: "sceneChangeDetect"
                                },
                                Slices: {
                                    locationName: "slices",
                                    type: "integer"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                },
                                TemporalIds: {
                                    locationName: "temporalIds"
                                },
                                Tiles: {
                                    locationName: "tiles"
                                },
                                UnregisteredSeiTimecode: {
                                    locationName: "unregisteredSeiTimecode"
                                },
                                WriteMp4PackagingType: {
                                    locationName: "writeMp4PackagingType"
                                }
                            }
                        },
                        Mpeg2Settings: {
                            locationName: "mpeg2Settings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                CodecLevel: {
                                    locationName: "codecLevel"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                DynamicSubGop: {
                                    locationName: "dynamicSubGop"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopClosedCadence: {
                                    locationName: "gopClosedCadence",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                GopSizeUnits: {
                                    locationName: "gopSizeUnits"
                                },
                                HrdBufferFinalFillPercentage: {
                                    locationName: "hrdBufferFinalFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferInitialFillPercentage: {
                                    locationName: "hrdBufferInitialFillPercentage",
                                    type: "integer"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                IntraDcPrecision: {
                                    locationName: "intraDcPrecision"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                MinIInterval: {
                                    locationName: "minIInterval",
                                    type: "integer"
                                },
                                NumberBFramesBetweenReferenceFrames: {
                                    locationName: "numberBFramesBetweenReferenceFrames",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SceneChangeDetect: {
                                    locationName: "sceneChangeDetect"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Softness: {
                                    locationName: "softness",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                Syntax: {
                                    locationName: "syntax"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                }
                            }
                        },
                        ProresSettings: {
                            locationName: "proresSettings",
                            type: "structure",
                            members: {
                                ChromaSampling: {
                                    locationName: "chromaSampling"
                                },
                                CodecProfile: {
                                    locationName: "codecProfile"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                }
                            }
                        },
                        Vc3Settings: {
                            locationName: "vc3Settings",
                            type: "structure",
                            members: {
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                InterlaceMode: {
                                    locationName: "interlaceMode"
                                },
                                ScanTypeConversionMode: {
                                    locationName: "scanTypeConversionMode"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Telecine: {
                                    locationName: "telecine"
                                },
                                Vc3Class: {
                                    locationName: "vc3Class"
                                }
                            }
                        },
                        Vp8Settings: {
                            locationName: "vp8Settings",
                            type: "structure",
                            members: {
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                }
                            }
                        },
                        Vp9Settings: {
                            locationName: "vp9Settings",
                            type: "structure",
                            members: {
                                Bitrate: {
                                    locationName: "bitrate",
                                    type: "integer"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                GopSize: {
                                    locationName: "gopSize",
                                    type: "double"
                                },
                                HrdBufferSize: {
                                    locationName: "hrdBufferSize",
                                    type: "integer"
                                },
                                MaxBitrate: {
                                    locationName: "maxBitrate",
                                    type: "integer"
                                },
                                ParControl: {
                                    locationName: "parControl"
                                },
                                ParDenominator: {
                                    locationName: "parDenominator",
                                    type: "integer"
                                },
                                ParNumerator: {
                                    locationName: "parNumerator",
                                    type: "integer"
                                },
                                QualityTuningLevel: {
                                    locationName: "qualityTuningLevel"
                                },
                                RateControlMode: {
                                    locationName: "rateControlMode"
                                }
                            }
                        },
                        XavcSettings: {
                            locationName: "xavcSettings",
                            type: "structure",
                            members: {
                                AdaptiveQuantization: {
                                    locationName: "adaptiveQuantization"
                                },
                                EntropyEncoding: {
                                    locationName: "entropyEncoding"
                                },
                                FramerateControl: {
                                    locationName: "framerateControl"
                                },
                                FramerateConversionAlgorithm: {
                                    locationName: "framerateConversionAlgorithm"
                                },
                                FramerateDenominator: {
                                    locationName: "framerateDenominator",
                                    type: "integer"
                                },
                                FramerateNumerator: {
                                    locationName: "framerateNumerator",
                                    type: "integer"
                                },
                                Profile: {
                                    locationName: "profile"
                                },
                                SlowPal: {
                                    locationName: "slowPal"
                                },
                                Softness: {
                                    locationName: "softness",
                                    type: "integer"
                                },
                                SpatialAdaptiveQuantization: {
                                    locationName: "spatialAdaptiveQuantization"
                                },
                                TemporalAdaptiveQuantization: {
                                    locationName: "temporalAdaptiveQuantization"
                                },
                                Xavc4kIntraCbgProfileSettings: {
                                    locationName: "xavc4kIntraCbgProfileSettings",
                                    type: "structure",
                                    members: {
                                        XavcClass: {
                                            locationName: "xavcClass"
                                        }
                                    }
                                },
                                Xavc4kIntraVbrProfileSettings: {
                                    locationName: "xavc4kIntraVbrProfileSettings",
                                    type: "structure",
                                    members: {
                                        XavcClass: {
                                            locationName: "xavcClass"
                                        }
                                    }
                                },
                                Xavc4kProfileSettings: {
                                    locationName: "xavc4kProfileSettings",
                                    type: "structure",
                                    members: {
                                        BitrateClass: {
                                            locationName: "bitrateClass"
                                        },
                                        CodecProfile: {
                                            locationName: "codecProfile"
                                        },
                                        FlickerAdaptiveQuantization: {
                                            locationName: "flickerAdaptiveQuantization"
                                        },
                                        GopBReference: {
                                            locationName: "gopBReference"
                                        },
                                        GopClosedCadence: {
                                            locationName: "gopClosedCadence",
                                            type: "integer"
                                        },
                                        HrdBufferSize: {
                                            locationName: "hrdBufferSize",
                                            type: "integer"
                                        },
                                        QualityTuningLevel: {
                                            locationName: "qualityTuningLevel"
                                        },
                                        Slices: {
                                            locationName: "slices",
                                            type: "integer"
                                        }
                                    }
                                },
                                XavcHdIntraCbgProfileSettings: {
                                    locationName: "xavcHdIntraCbgProfileSettings",
                                    type: "structure",
                                    members: {
                                        XavcClass: {
                                            locationName: "xavcClass"
                                        }
                                    }
                                },
                                XavcHdProfileSettings: {
                                    locationName: "xavcHdProfileSettings",
                                    type: "structure",
                                    members: {
                                        BitrateClass: {
                                            locationName: "bitrateClass"
                                        },
                                        FlickerAdaptiveQuantization: {
                                            locationName: "flickerAdaptiveQuantization"
                                        },
                                        GopBReference: {
                                            locationName: "gopBReference"
                                        },
                                        GopClosedCadence: {
                                            locationName: "gopClosedCadence",
                                            type: "integer"
                                        },
                                        HrdBufferSize: {
                                            locationName: "hrdBufferSize",
                                            type: "integer"
                                        },
                                        InterlaceMode: {
                                            locationName: "interlaceMode"
                                        },
                                        QualityTuningLevel: {
                                            locationName: "qualityTuningLevel"
                                        },
                                        Slices: {
                                            locationName: "slices",
                                            type: "integer"
                                        },
                                        Telecine: {
                                            locationName: "telecine"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                ColorMetadata: {
                    locationName: "colorMetadata"
                },
                Crop: {
                    shape: "S2d",
                    locationName: "crop"
                },
                DropFrameTimecode: {
                    locationName: "dropFrameTimecode"
                },
                FixedAfd: {
                    locationName: "fixedAfd",
                    type: "integer"
                },
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                Position: {
                    shape: "S2d",
                    locationName: "position"
                },
                RespondToAfd: {
                    locationName: "respondToAfd"
                },
                ScalingBehavior: {
                    locationName: "scalingBehavior"
                },
                Sharpness: {
                    locationName: "sharpness",
                    type: "integer"
                },
                TimecodeInsertion: {
                    locationName: "timecodeInsertion"
                },
                VideoPreprocessors: {
                    locationName: "videoPreprocessors",
                    type: "structure",
                    members: {
                        ColorCorrector: {
                            locationName: "colorCorrector",
                            type: "structure",
                            members: {
                                Brightness: {
                                    locationName: "brightness",
                                    type: "integer"
                                },
                                ClipLimits: {
                                    locationName: "clipLimits",
                                    type: "structure",
                                    members: {
                                        MaximumRGBTolerance: {
                                            locationName: "maximumRGBTolerance",
                                            type: "integer"
                                        },
                                        MaximumYUV: {
                                            locationName: "maximumYUV",
                                            type: "integer"
                                        },
                                        MinimumRGBTolerance: {
                                            locationName: "minimumRGBTolerance",
                                            type: "integer"
                                        },
                                        MinimumYUV: {
                                            locationName: "minimumYUV",
                                            type: "integer"
                                        }
                                    }
                                },
                                ColorSpaceConversion: {
                                    locationName: "colorSpaceConversion"
                                },
                                Contrast: {
                                    locationName: "contrast",
                                    type: "integer"
                                },
                                Hdr10Metadata: {
                                    shape: "S3j",
                                    locationName: "hdr10Metadata"
                                },
                                HdrToSdrToneMapper: {
                                    locationName: "hdrToSdrToneMapper"
                                },
                                Hue: {
                                    locationName: "hue",
                                    type: "integer"
                                },
                                SampleRangeConversion: {
                                    locationName: "sampleRangeConversion"
                                },
                                Saturation: {
                                    locationName: "saturation",
                                    type: "integer"
                                },
                                SdrReferenceWhiteLevel: {
                                    locationName: "sdrReferenceWhiteLevel",
                                    type: "integer"
                                }
                            }
                        },
                        Deinterlacer: {
                            locationName: "deinterlacer",
                            type: "structure",
                            members: {
                                Algorithm: {
                                    locationName: "algorithm"
                                },
                                Control: {
                                    locationName: "control"
                                },
                                Mode: {
                                    locationName: "mode"
                                }
                            }
                        },
                        DolbyVision: {
                            locationName: "dolbyVision",
                            type: "structure",
                            members: {
                                L6Metadata: {
                                    locationName: "l6Metadata",
                                    type: "structure",
                                    members: {
                                        MaxCll: {
                                            locationName: "maxCll",
                                            type: "integer"
                                        },
                                        MaxFall: {
                                            locationName: "maxFall",
                                            type: "integer"
                                        }
                                    }
                                },
                                L6Mode: {
                                    locationName: "l6Mode"
                                },
                                Mapping: {
                                    locationName: "mapping"
                                },
                                Profile: {
                                    locationName: "profile"
                                }
                            }
                        },
                        Hdr10Plus: {
                            locationName: "hdr10Plus",
                            type: "structure",
                            members: {
                                MasteringMonitorNits: {
                                    locationName: "masteringMonitorNits",
                                    type: "integer"
                                },
                                TargetMonitorNits: {
                                    locationName: "targetMonitorNits",
                                    type: "integer"
                                }
                            }
                        },
                        ImageInserter: {
                            shape: "S2q",
                            locationName: "imageInserter"
                        },
                        NoiseReducer: {
                            locationName: "noiseReducer",
                            type: "structure",
                            members: {
                                Filter: {
                                    locationName: "filter"
                                },
                                FilterSettings: {
                                    locationName: "filterSettings",
                                    type: "structure",
                                    members: {
                                        Strength: {
                                            locationName: "strength",
                                            type: "integer"
                                        }
                                    }
                                },
                                SpatialFilterSettings: {
                                    locationName: "spatialFilterSettings",
                                    type: "structure",
                                    members: {
                                        PostFilterSharpenStrength: {
                                            locationName: "postFilterSharpenStrength",
                                            type: "integer"
                                        },
                                        Speed: {
                                            locationName: "speed",
                                            type: "integer"
                                        },
                                        Strength: {
                                            locationName: "strength",
                                            type: "integer"
                                        }
                                    }
                                },
                                TemporalFilterSettings: {
                                    locationName: "temporalFilterSettings",
                                    type: "structure",
                                    members: {
                                        AggressiveMode: {
                                            locationName: "aggressiveMode",
                                            type: "integer"
                                        },
                                        PostTemporalSharpening: {
                                            locationName: "postTemporalSharpening"
                                        },
                                        PostTemporalSharpeningStrength: {
                                            locationName: "postTemporalSharpeningStrength"
                                        },
                                        Speed: {
                                            locationName: "speed",
                                            type: "integer"
                                        },
                                        Strength: {
                                            locationName: "strength",
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        },
                        PartnerWatermarking: {
                            locationName: "partnerWatermarking",
                            type: "structure",
                            members: {
                                NexguardFileMarkerSettings: {
                                    locationName: "nexguardFileMarkerSettings",
                                    type: "structure",
                                    members: {
                                        License: {
                                            locationName: "license"
                                        },
                                        Payload: {
                                            locationName: "payload",
                                            type: "integer"
                                        },
                                        Preset: {
                                            locationName: "preset"
                                        },
                                        Strength: {
                                            locationName: "strength"
                                        }
                                    }
                                }
                            }
                        },
                        TimecodeBurnin: {
                            locationName: "timecodeBurnin",
                            type: "structure",
                            members: {
                                FontSize: {
                                    locationName: "fontSize",
                                    type: "integer"
                                },
                                Position: {
                                    locationName: "position"
                                },
                                Prefix: {
                                    locationName: "prefix"
                                }
                            }
                        }
                    }
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                }
            }
        },
        Sfe: {
            type: "structure",
            members: {
                Sharpening: {
                    locationName: "sharpening"
                },
                Strength: {
                    locationName: "strength"
                }
            }
        },
        Skp: {
            type: "structure",
            members: {
                Anchor: {
                    locationName: "anchor"
                },
                Source: {
                    locationName: "source"
                },
                Start: {
                    locationName: "start"
                },
                TimestampOffset: {
                    locationName: "timestampOffset"
                }
            }
        },
        Sks: {
            type: "structure",
            members: {
                Id3Insertions: {
                    locationName: "id3Insertions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Id3: {
                                locationName: "id3"
                            },
                            Timecode: {
                                locationName: "timecode"
                            }
                        }
                    }
                }
            }
        },
        Skx: {
            type: "map",
            key: {},
            value: {}
        },
        Skz: {
            type: "structure",
            members: {
                AccelerationSettings: {
                    shape: "S7",
                    locationName: "accelerationSettings"
                },
                AccelerationStatus: {
                    locationName: "accelerationStatus"
                },
                Arn: {
                    locationName: "arn"
                },
                BillingTagsSource: {
                    locationName: "billingTagsSource"
                },
                ClientRequestToken: {
                    locationName: "clientRequestToken"
                },
                CreatedAt: {
                    shape: "Sl1",
                    locationName: "createdAt"
                },
                CurrentPhase: {
                    locationName: "currentPhase"
                },
                ErrorCode: {
                    locationName: "errorCode",
                    type: "integer"
                },
                ErrorMessage: {
                    locationName: "errorMessage"
                },
                HopDestinations: {
                    shape: "Sa",
                    locationName: "hopDestinations"
                },
                Id: {
                    locationName: "id"
                },
                JobPercentComplete: {
                    locationName: "jobPercentComplete",
                    type: "integer"
                },
                JobTemplate: {
                    locationName: "jobTemplate"
                },
                Messages: {
                    locationName: "messages",
                    type: "structure",
                    members: {
                        Info: {
                            shape: "Sl4",
                            locationName: "info"
                        },
                        Warning: {
                            shape: "Sl4",
                            locationName: "warning"
                        }
                    }
                },
                OutputGroupDetails: {
                    locationName: "outputGroupDetails",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            OutputDetails: {
                                locationName: "outputDetails",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DurationInMs: {
                                            locationName: "durationInMs",
                                            type: "integer"
                                        },
                                        VideoDetails: {
                                            locationName: "videoDetails",
                                            type: "structure",
                                            members: {
                                                HeightInPx: {
                                                    locationName: "heightInPx",
                                                    type: "integer"
                                                },
                                                WidthInPx: {
                                                    locationName: "widthInPx",
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                Priority: {
                    locationName: "priority",
                    type: "integer"
                },
                Queue: {
                    locationName: "queue"
                },
                QueueTransitions: {
                    locationName: "queueTransitions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            DestinationQueue: {
                                locationName: "destinationQueue"
                            },
                            SourceQueue: {
                                locationName: "sourceQueue"
                            },
                            Timestamp: {
                                shape: "Sl1",
                                locationName: "timestamp"
                            }
                        }
                    }
                },
                RetryCount: {
                    locationName: "retryCount",
                    type: "integer"
                },
                Role: {
                    locationName: "role"
                },
                Settings: {
                    shape: "Se",
                    locationName: "settings"
                },
                SimulateReservedQueue: {
                    locationName: "simulateReservedQueue"
                },
                Status: {
                    locationName: "status"
                },
                StatusUpdateInterval: {
                    locationName: "statusUpdateInterval"
                },
                Timing: {
                    locationName: "timing",
                    type: "structure",
                    members: {
                        FinishTime: {
                            shape: "Sl1",
                            locationName: "finishTime"
                        },
                        StartTime: {
                            shape: "Sl1",
                            locationName: "startTime"
                        },
                        SubmitTime: {
                            shape: "Sl1",
                            locationName: "submitTime"
                        }
                    }
                },
                UserMetadata: {
                    shape: "Skx",
                    locationName: "userMetadata"
                },
                Warnings: {
                    locationName: "warnings",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Code: {
                                locationName: "code",
                                type: "integer"
                            },
                            Count: {
                                locationName: "count",
                                type: "integer"
                            }
                        },
                        required: [ "Count", "Code" ]
                    }
                }
            },
            required: [ "Settings", "Role" ]
        },
        Sl1: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        Sl4: {
            type: "list",
            member: {}
        },
        Slh: {
            type: "structure",
            members: {
                AdAvailOffset: {
                    locationName: "adAvailOffset",
                    type: "integer"
                },
                AvailBlanking: {
                    shape: "Sg",
                    locationName: "availBlanking"
                },
                Esam: {
                    shape: "Si",
                    locationName: "esam"
                },
                ExtendedDataServices: {
                    shape: "So",
                    locationName: "extendedDataServices"
                },
                FollowSource: {
                    locationName: "followSource",
                    type: "integer"
                },
                Inputs: {
                    locationName: "inputs",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AdvancedInputFilter: {
                                locationName: "advancedInputFilter"
                            },
                            AdvancedInputFilterSettings: {
                                shape: "Sv",
                                locationName: "advancedInputFilterSettings"
                            },
                            AudioSelectorGroups: {
                                shape: "Sy",
                                locationName: "audioSelectorGroups"
                            },
                            AudioSelectors: {
                                shape: "S12",
                                locationName: "audioSelectors"
                            },
                            CaptionSelectors: {
                                shape: "S1o",
                                locationName: "captionSelectors"
                            },
                            Crop: {
                                shape: "S2d",
                                locationName: "crop"
                            },
                            DeblockFilter: {
                                locationName: "deblockFilter"
                            },
                            DenoiseFilter: {
                                locationName: "denoiseFilter"
                            },
                            DolbyVisionMetadataXml: {
                                locationName: "dolbyVisionMetadataXml"
                            },
                            FilterEnable: {
                                locationName: "filterEnable"
                            },
                            FilterStrength: {
                                locationName: "filterStrength",
                                type: "integer"
                            },
                            ImageInserter: {
                                shape: "S2q",
                                locationName: "imageInserter"
                            },
                            InputClippings: {
                                shape: "S2y",
                                locationName: "inputClippings"
                            },
                            InputScanType: {
                                locationName: "inputScanType"
                            },
                            Position: {
                                shape: "S2d",
                                locationName: "position"
                            },
                            ProgramNumber: {
                                locationName: "programNumber",
                                type: "integer"
                            },
                            PsiControl: {
                                locationName: "psiControl"
                            },
                            TimecodeSource: {
                                locationName: "timecodeSource"
                            },
                            TimecodeStart: {
                                locationName: "timecodeStart"
                            },
                            VideoOverlays: {
                                shape: "S39",
                                locationName: "videoOverlays"
                            },
                            VideoSelector: {
                                shape: "S3e",
                                locationName: "videoSelector"
                            }
                        }
                    }
                },
                KantarWatermark: {
                    shape: "S3p",
                    locationName: "kantarWatermark"
                },
                MotionImageInserter: {
                    shape: "S3x",
                    locationName: "motionImageInserter"
                },
                NielsenConfiguration: {
                    shape: "S45",
                    locationName: "nielsenConfiguration"
                },
                NielsenNonLinearWatermark: {
                    shape: "S47",
                    locationName: "nielsenNonLinearWatermark"
                },
                OutputGroups: {
                    shape: "S4e",
                    locationName: "outputGroups"
                },
                TimecodeConfig: {
                    shape: "Skp",
                    locationName: "timecodeConfig"
                },
                TimedMetadataInsertion: {
                    shape: "Sks",
                    locationName: "timedMetadataInsertion"
                }
            }
        },
        Sll: {
            type: "structure",
            members: {
                AccelerationSettings: {
                    shape: "S7",
                    locationName: "accelerationSettings"
                },
                Arn: {
                    locationName: "arn"
                },
                Category: {
                    locationName: "category"
                },
                CreatedAt: {
                    shape: "Sl1",
                    locationName: "createdAt"
                },
                Description: {
                    locationName: "description"
                },
                HopDestinations: {
                    shape: "Sa",
                    locationName: "hopDestinations"
                },
                LastUpdated: {
                    shape: "Sl1",
                    locationName: "lastUpdated"
                },
                Name: {
                    locationName: "name"
                },
                Priority: {
                    locationName: "priority",
                    type: "integer"
                },
                Queue: {
                    locationName: "queue"
                },
                Settings: {
                    shape: "Slh",
                    locationName: "settings"
                },
                StatusUpdateInterval: {
                    locationName: "statusUpdateInterval"
                },
                Type: {
                    locationName: "type"
                }
            },
            required: [ "Settings", "Name" ]
        },
        Slo: {
            type: "structure",
            members: {
                AudioDescriptions: {
                    shape: "S83",
                    locationName: "audioDescriptions"
                },
                CaptionDescriptions: {
                    locationName: "captionDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CustomLanguageCode: {
                                locationName: "customLanguageCode"
                            },
                            DestinationSettings: {
                                shape: "Saq",
                                locationName: "destinationSettings"
                            },
                            LanguageCode: {
                                locationName: "languageCode"
                            },
                            LanguageDescription: {
                                locationName: "languageDescription"
                            }
                        }
                    }
                },
                ContainerSettings: {
                    shape: "Sc0",
                    locationName: "containerSettings"
                },
                VideoDescription: {
                    shape: "Sef",
                    locationName: "videoDescription"
                }
            }
        },
        Sls: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Category: {
                    locationName: "category"
                },
                CreatedAt: {
                    shape: "Sl1",
                    locationName: "createdAt"
                },
                Description: {
                    locationName: "description"
                },
                LastUpdated: {
                    shape: "Sl1",
                    locationName: "lastUpdated"
                },
                Name: {
                    locationName: "name"
                },
                Settings: {
                    shape: "Slo",
                    locationName: "settings"
                },
                Type: {
                    locationName: "type"
                }
            },
            required: [ "Settings", "Name" ]
        },
        Slv: {
            type: "structure",
            members: {
                Commitment: {
                    locationName: "commitment"
                },
                RenewalType: {
                    locationName: "renewalType"
                },
                ReservedSlots: {
                    locationName: "reservedSlots",
                    type: "integer"
                }
            },
            required: [ "Commitment", "ReservedSlots", "RenewalType" ]
        },
        Sm0: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                CreatedAt: {
                    shape: "Sl1",
                    locationName: "createdAt"
                },
                Description: {
                    locationName: "description"
                },
                LastUpdated: {
                    shape: "Sl1",
                    locationName: "lastUpdated"
                },
                Name: {
                    locationName: "name"
                },
                PricingPlan: {
                    locationName: "pricingPlan"
                },
                ProgressingJobsCount: {
                    locationName: "progressingJobsCount",
                    type: "integer"
                },
                ReservationPlan: {
                    locationName: "reservationPlan",
                    type: "structure",
                    members: {
                        Commitment: {
                            locationName: "commitment"
                        },
                        ExpiresAt: {
                            shape: "Sl1",
                            locationName: "expiresAt"
                        },
                        PurchasedAt: {
                            shape: "Sl1",
                            locationName: "purchasedAt"
                        },
                        RenewalType: {
                            locationName: "renewalType"
                        },
                        ReservedSlots: {
                            locationName: "reservedSlots",
                            type: "integer"
                        },
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                Status: {
                    locationName: "status"
                },
                SubmittedJobsCount: {
                    locationName: "submittedJobsCount",
                    type: "integer"
                },
                Type: {
                    locationName: "type"
                }
            },
            required: [ "Name" ]
        },
        Smo: {
            type: "structure",
            members: {
                HttpInputs: {
                    locationName: "httpInputs"
                },
                HttpsInputs: {
                    locationName: "httpsInputs"
                },
                S3Inputs: {
                    locationName: "s3Inputs"
                }
            }
        }
    },
    paginators: {
        DescribeEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Endpoints"
        },
        ListJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Jobs"
        },
        ListPresets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Presets"
        },
        ListJobTemplates: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobTemplates"
        },
        ListQueues: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Queues"
        }
    }
};

AWS.apiLoader.services["medialive"] = {};

AWS.MediaLive = AWS.Service.defineService("medialive", [ "2017-10-14" ]);

AWS.apiLoader.services["medialive"]["2017-10-14"] = {
    metadata: {
        apiVersion: "2017-10-14",
        endpointPrefix: "medialive",
        signingName: "medialive",
        serviceFullName: "AWS Elemental MediaLive",
        serviceId: "MediaLive",
        protocol: "rest-json",
        uid: "medialive-2017-10-14",
        signatureVersion: "v4",
        serviceAbbreviation: "MediaLive",
        jsonVersion: "1.1"
    },
    operations: {
        AcceptInputDeviceTransfer: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/accept",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchDelete: {
            http: {
                requestUri: "/prod/batch/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelIds: {
                        shape: "S5",
                        locationName: "channelIds"
                    },
                    InputIds: {
                        shape: "S5",
                        locationName: "inputIds"
                    },
                    InputSecurityGroupIds: {
                        shape: "S5",
                        locationName: "inputSecurityGroupIds"
                    },
                    MultiplexIds: {
                        shape: "S5",
                        locationName: "multiplexIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failed: {
                        shape: "S7",
                        locationName: "failed"
                    },
                    Successful: {
                        shape: "S9",
                        locationName: "successful"
                    }
                }
            }
        },
        BatchStart: {
            http: {
                requestUri: "/prod/batch/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelIds: {
                        shape: "S5",
                        locationName: "channelIds"
                    },
                    MultiplexIds: {
                        shape: "S5",
                        locationName: "multiplexIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failed: {
                        shape: "S7",
                        locationName: "failed"
                    },
                    Successful: {
                        shape: "S9",
                        locationName: "successful"
                    }
                }
            }
        },
        BatchStop: {
            http: {
                requestUri: "/prod/batch/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelIds: {
                        shape: "S5",
                        locationName: "channelIds"
                    },
                    MultiplexIds: {
                        shape: "S5",
                        locationName: "multiplexIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Failed: {
                        shape: "S7",
                        locationName: "failed"
                    },
                    Successful: {
                        shape: "S9",
                        locationName: "successful"
                    }
                }
            }
        },
        BatchUpdateSchedule: {
            http: {
                method: "PUT",
                requestUri: "/prod/channels/{channelId}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    Creates: {
                        locationName: "creates",
                        type: "structure",
                        members: {
                            ScheduleActions: {
                                shape: "Sh",
                                locationName: "scheduleActions"
                            }
                        },
                        required: [ "ScheduleActions" ]
                    },
                    Deletes: {
                        locationName: "deletes",
                        type: "structure",
                        members: {
                            ActionNames: {
                                shape: "S5",
                                locationName: "actionNames"
                            }
                        },
                        required: [ "ActionNames" ]
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Creates: {
                        locationName: "creates",
                        type: "structure",
                        members: {
                            ScheduleActions: {
                                shape: "Sh",
                                locationName: "scheduleActions"
                            }
                        },
                        required: [ "ScheduleActions" ]
                    },
                    Deletes: {
                        locationName: "deletes",
                        type: "structure",
                        members: {
                            ScheduleActions: {
                                shape: "Sh",
                                locationName: "scheduleActions"
                            }
                        },
                        required: [ "ScheduleActions" ]
                    }
                }
            }
        },
        CancelInputDeviceTransfer: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ClaimDevice: {
            http: {
                requestUri: "/prod/claimDevice",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/prod/channels",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    CdiInputSpecification: {
                        shape: "S27",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    },
                    EncoderSettings: {
                        shape: "S2i",
                        locationName: "encoderSettings"
                    },
                    InputAttachments: {
                        shape: "Sdf",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sf4",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Maintenance: {
                        locationName: "maintenance",
                        type: "structure",
                        members: {
                            MaintenanceDay: {
                                locationName: "maintenanceDay"
                            },
                            MaintenanceStartTime: {
                                locationName: "maintenanceStartTime"
                            }
                        }
                    },
                    Name: {
                        locationName: "name"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Reserved: {
                        locationName: "reserved",
                        deprecated: true
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Vpc: {
                        locationName: "vpc",
                        type: "structure",
                        members: {
                            PublicAddressAllocationIds: {
                                shape: "S5",
                                locationName: "publicAddressAllocationIds"
                            },
                            SecurityGroupIds: {
                                shape: "S5",
                                locationName: "securityGroupIds"
                            },
                            SubnetIds: {
                                shape: "S5",
                                locationName: "subnetIds"
                            }
                        },
                        required: [ "SubnetIds" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "Sff",
                        locationName: "channel"
                    }
                }
            }
        },
        CreateInput: {
            http: {
                requestUri: "/prod/inputs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Destinations: {
                        shape: "Sfo",
                        locationName: "destinations"
                    },
                    InputDevices: {
                        shape: "Sfq",
                        locationName: "inputDevices"
                    },
                    InputSecurityGroups: {
                        shape: "S5",
                        locationName: "inputSecurityGroups"
                    },
                    MediaConnectFlows: {
                        shape: "Sfs",
                        locationName: "mediaConnectFlows"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    Sources: {
                        shape: "Sfu",
                        locationName: "sources"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Type: {
                        locationName: "type"
                    },
                    Vpc: {
                        locationName: "vpc",
                        type: "structure",
                        members: {
                            SecurityGroupIds: {
                                shape: "S5",
                                locationName: "securityGroupIds"
                            },
                            SubnetIds: {
                                shape: "S5",
                                locationName: "subnetIds"
                            }
                        },
                        required: [ "SubnetIds" ]
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Input: {
                        shape: "Sfz",
                        locationName: "input"
                    }
                }
            }
        },
        CreateInputSecurityGroup: {
            http: {
                requestUri: "/prod/inputSecurityGroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    WhitelistRules: {
                        shape: "Sgb",
                        locationName: "whitelistRules"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroup: {
                        shape: "Sge",
                        locationName: "securityGroup"
                    }
                }
            }
        },
        CreateMultiplex: {
            http: {
                requestUri: "/prod/multiplexes",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    MultiplexSettings: {
                        shape: "Sgj",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                },
                required: [ "RequestId", "MultiplexSettings", "AvailabilityZones", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Multiplex: {
                        shape: "Sgo",
                        locationName: "multiplex"
                    }
                }
            }
        },
        CreateMultiplexProgram: {
            http: {
                requestUri: "/prod/multiplexes/{multiplexId}/programs",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sgu",
                        locationName: "multiplexProgramSettings"
                    },
                    ProgramName: {
                        locationName: "programName"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    }
                },
                required: [ "MultiplexId", "RequestId", "MultiplexProgramSettings", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    MultiplexProgram: {
                        shape: "Sh2",
                        locationName: "multiplexProgram"
                    }
                }
            }
        },
        CreatePartnerInput: {
            http: {
                requestUri: "/prod/inputs/{inputId}/partners",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {
                    Input: {
                        shape: "Sfz",
                        locationName: "input"
                    }
                }
            }
        },
        CreateTags: {
            http: {
                requestUri: "/prod/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn" ]
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/prod/channels/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S27",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sfg",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2i",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sdf",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sf4",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Maintenance: {
                        shape: "Sfi",
                        locationName: "maintenance"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sfj",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Sfm",
                        locationName: "vpc"
                    }
                }
            }
        },
        DeleteInput: {
            http: {
                method: "DELETE",
                requestUri: "/prod/inputs/{inputId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInputSecurityGroup: {
            http: {
                method: "DELETE",
                requestUri: "/prod/inputSecurityGroups/{inputSecurityGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputSecurityGroupId: {
                        location: "uri",
                        locationName: "inputSecurityGroupId"
                    }
                },
                required: [ "InputSecurityGroupId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMultiplex: {
            http: {
                method: "DELETE",
                requestUri: "/prod/multiplexes/{multiplexId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sgp",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sgj",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                }
            }
        },
        DeleteMultiplexProgram: {
            http: {
                method: "DELETE",
                requestUri: "/prod/multiplexes/{multiplexId}/programs/{programName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "MultiplexId", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    ChannelId: {
                        locationName: "channelId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sgu",
                        locationName: "multiplexProgramSettings"
                    },
                    PacketIdentifiersMap: {
                        shape: "Sh3",
                        locationName: "packetIdentifiersMap"
                    },
                    PipelineDetails: {
                        shape: "Sh5",
                        locationName: "pipelineDetails"
                    },
                    ProgramName: {
                        locationName: "programName"
                    }
                }
            }
        },
        DeleteReservation: {
            http: {
                method: "DELETE",
                requestUri: "/prod/reservations/{reservationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReservationId: {
                        location: "uri",
                        locationName: "reservationId"
                    }
                },
                required: [ "ReservationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Count: {
                        locationName: "count",
                        type: "integer"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    DurationUnits: {
                        locationName: "durationUnits"
                    },
                    End: {
                        locationName: "end"
                    },
                    FixedPrice: {
                        locationName: "fixedPrice",
                        type: "double"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OfferingDescription: {
                        locationName: "offeringDescription"
                    },
                    OfferingId: {
                        locationName: "offeringId"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    },
                    Region: {
                        locationName: "region"
                    },
                    RenewalSettings: {
                        shape: "Sho",
                        locationName: "renewalSettings"
                    },
                    ReservationId: {
                        locationName: "reservationId"
                    },
                    ResourceSpecification: {
                        shape: "Shq",
                        locationName: "resourceSpecification"
                    },
                    Start: {
                        locationName: "start"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    UsagePrice: {
                        locationName: "usagePrice",
                        type: "double"
                    }
                }
            }
        },
        DeleteSchedule: {
            http: {
                method: "DELETE",
                requestUri: "/prod/channels/{channelId}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTags: {
            http: {
                method: "DELETE",
                requestUri: "/prod/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "S5",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        DescribeAccountConfiguration: {
            http: {
                method: "GET",
                requestUri: "/prod/accountConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    AccountConfiguration: {
                        shape: "Si4",
                        locationName: "accountConfiguration"
                    }
                }
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/prod/channels/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S27",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sfg",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2i",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sdf",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sf4",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Maintenance: {
                        shape: "Sfi",
                        locationName: "maintenance"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sfj",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Sfm",
                        locationName: "vpc"
                    }
                }
            }
        },
        DescribeInput: {
            http: {
                method: "GET",
                requestUri: "/prod/inputs/{inputId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AttachedChannels: {
                        shape: "S5",
                        locationName: "attachedChannels"
                    },
                    Destinations: {
                        shape: "Sg0",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputClass: {
                        locationName: "inputClass"
                    },
                    InputDevices: {
                        shape: "Sfq",
                        locationName: "inputDevices"
                    },
                    InputPartnerIds: {
                        shape: "S5",
                        locationName: "inputPartnerIds"
                    },
                    InputSourceType: {
                        locationName: "inputSourceType"
                    },
                    MediaConnectFlows: {
                        shape: "Sg5",
                        locationName: "mediaConnectFlows"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    SecurityGroups: {
                        shape: "S5",
                        locationName: "securityGroups"
                    },
                    Sources: {
                        shape: "Sg7",
                        locationName: "sources"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Type: {
                        locationName: "type"
                    }
                }
            }
        },
        DescribeInputDevice: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDevices/{inputDeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ConnectionState: {
                        locationName: "connectionState"
                    },
                    DeviceSettingsSyncState: {
                        locationName: "deviceSettingsSyncState"
                    },
                    DeviceUpdateStatus: {
                        locationName: "deviceUpdateStatus"
                    },
                    HdDeviceSettings: {
                        shape: "Sie",
                        locationName: "hdDeviceSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MacAddress: {
                        locationName: "macAddress"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NetworkSettings: {
                        shape: "Sij",
                        locationName: "networkSettings"
                    },
                    SerialNumber: {
                        locationName: "serialNumber"
                    },
                    Type: {
                        locationName: "type"
                    },
                    UhdDeviceSettings: {
                        shape: "Sim",
                        locationName: "uhdDeviceSettings"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    MedialiveInputArns: {
                        shape: "S5",
                        locationName: "medialiveInputArns"
                    },
                    OutputType: {
                        locationName: "outputType"
                    }
                }
            }
        },
        DescribeInputDeviceThumbnail: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDevices/{inputDeviceId}/thumbnailData",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    },
                    Accept: {
                        location: "header",
                        locationName: "accept"
                    }
                },
                required: [ "InputDeviceId", "Accept" ]
            },
            output: {
                type: "structure",
                members: {
                    Body: {
                        locationName: "body",
                        type: "blob",
                        streaming: true
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    }
                },
                payload: "Body"
            }
        },
        DescribeInputSecurityGroup: {
            http: {
                method: "GET",
                requestUri: "/prod/inputSecurityGroups/{inputSecurityGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputSecurityGroupId: {
                        location: "uri",
                        locationName: "inputSecurityGroupId"
                    }
                },
                required: [ "InputSecurityGroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Inputs: {
                        shape: "S5",
                        locationName: "inputs"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    WhitelistRules: {
                        shape: "Sgg",
                        locationName: "whitelistRules"
                    }
                }
            }
        },
        DescribeMultiplex: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes/{multiplexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sgp",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sgj",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeMultiplexProgram: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes/{multiplexId}/programs/{programName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "MultiplexId", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    ChannelId: {
                        locationName: "channelId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sgu",
                        locationName: "multiplexProgramSettings"
                    },
                    PacketIdentifiersMap: {
                        shape: "Sh3",
                        locationName: "packetIdentifiersMap"
                    },
                    PipelineDetails: {
                        shape: "Sh5",
                        locationName: "pipelineDetails"
                    },
                    ProgramName: {
                        locationName: "programName"
                    }
                }
            }
        },
        DescribeOffering: {
            http: {
                method: "GET",
                requestUri: "/prod/offerings/{offeringId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    OfferingId: {
                        location: "uri",
                        locationName: "offeringId"
                    }
                },
                required: [ "OfferingId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    DurationUnits: {
                        locationName: "durationUnits"
                    },
                    FixedPrice: {
                        locationName: "fixedPrice",
                        type: "double"
                    },
                    OfferingDescription: {
                        locationName: "offeringDescription"
                    },
                    OfferingId: {
                        locationName: "offeringId"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    },
                    Region: {
                        locationName: "region"
                    },
                    ResourceSpecification: {
                        shape: "Shq",
                        locationName: "resourceSpecification"
                    },
                    UsagePrice: {
                        locationName: "usagePrice",
                        type: "double"
                    }
                }
            }
        },
        DescribeReservation: {
            http: {
                method: "GET",
                requestUri: "/prod/reservations/{reservationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ReservationId: {
                        location: "uri",
                        locationName: "reservationId"
                    }
                },
                required: [ "ReservationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Count: {
                        locationName: "count",
                        type: "integer"
                    },
                    CurrencyCode: {
                        locationName: "currencyCode"
                    },
                    Duration: {
                        locationName: "duration",
                        type: "integer"
                    },
                    DurationUnits: {
                        locationName: "durationUnits"
                    },
                    End: {
                        locationName: "end"
                    },
                    FixedPrice: {
                        locationName: "fixedPrice",
                        type: "double"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OfferingDescription: {
                        locationName: "offeringDescription"
                    },
                    OfferingId: {
                        locationName: "offeringId"
                    },
                    OfferingType: {
                        locationName: "offeringType"
                    },
                    Region: {
                        locationName: "region"
                    },
                    RenewalSettings: {
                        shape: "Sho",
                        locationName: "renewalSettings"
                    },
                    ReservationId: {
                        locationName: "reservationId"
                    },
                    ResourceSpecification: {
                        shape: "Shq",
                        locationName: "resourceSpecification"
                    },
                    Start: {
                        locationName: "start"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    UsagePrice: {
                        locationName: "usagePrice",
                        type: "double"
                    }
                }
            }
        },
        DescribeSchedule: {
            http: {
                method: "GET",
                requestUri: "/prod/channels/{channelId}/schedule",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    ScheduleActions: {
                        shape: "Sh",
                        locationName: "scheduleActions"
                    }
                }
            }
        },
        DescribeThumbnails: {
            http: {
                method: "GET",
                requestUri: "/prod/channels/{channelId}/thumbnails",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    PipelineId: {
                        location: "querystring",
                        locationName: "pipelineId"
                    },
                    ThumbnailType: {
                        location: "querystring",
                        locationName: "thumbnailType"
                    }
                },
                required: [ "ThumbnailType", "PipelineId", "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    ThumbnailDetails: {
                        locationName: "thumbnailDetails",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PipelineId: {
                                    locationName: "pipelineId"
                                },
                                Thumbnails: {
                                    locationName: "thumbnails",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Body: {
                                                locationName: "body"
                                            },
                                            ContentType: {
                                                locationName: "contentType"
                                            },
                                            ThumbnailType: {
                                                locationName: "thumbnailType"
                                            },
                                            TimeStamp: {
                                                locationName: "timeStamp",
                                                type: "timestamp",
                                                timestampFormat: "iso8601"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/prod/channels",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Channels: {
                        locationName: "channels",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CdiInputSpecification: {
                                    shape: "S27",
                                    locationName: "cdiInputSpecification"
                                },
                                ChannelClass: {
                                    locationName: "channelClass"
                                },
                                Destinations: {
                                    shape: "S2a",
                                    locationName: "destinations"
                                },
                                EgressEndpoints: {
                                    shape: "Sfg",
                                    locationName: "egressEndpoints"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                InputAttachments: {
                                    shape: "Sdf",
                                    locationName: "inputAttachments"
                                },
                                InputSpecification: {
                                    shape: "Sf4",
                                    locationName: "inputSpecification"
                                },
                                LogLevel: {
                                    locationName: "logLevel"
                                },
                                Maintenance: {
                                    shape: "Sfi",
                                    locationName: "maintenance"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                PipelinesRunningCount: {
                                    locationName: "pipelinesRunningCount",
                                    type: "integer"
                                },
                                RoleArn: {
                                    locationName: "roleArn"
                                },
                                State: {
                                    locationName: "state"
                                },
                                Tags: {
                                    shape: "Sfc",
                                    locationName: "tags"
                                },
                                Vpc: {
                                    shape: "Sfm",
                                    locationName: "vpc"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputDeviceTransfers: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDeviceTransfers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    TransferType: {
                        location: "querystring",
                        locationName: "transferType"
                    }
                },
                required: [ "TransferType" ]
            },
            output: {
                type: "structure",
                members: {
                    InputDeviceTransfers: {
                        locationName: "inputDeviceTransfers",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    locationName: "id"
                                },
                                Message: {
                                    locationName: "message"
                                },
                                TargetCustomerId: {
                                    locationName: "targetCustomerId"
                                },
                                TransferType: {
                                    locationName: "transferType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputDevices: {
            http: {
                method: "GET",
                requestUri: "/prod/inputDevices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputDevices: {
                        locationName: "inputDevices",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                ConnectionState: {
                                    locationName: "connectionState"
                                },
                                DeviceSettingsSyncState: {
                                    locationName: "deviceSettingsSyncState"
                                },
                                DeviceUpdateStatus: {
                                    locationName: "deviceUpdateStatus"
                                },
                                HdDeviceSettings: {
                                    shape: "Sie",
                                    locationName: "hdDeviceSettings"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                MacAddress: {
                                    locationName: "macAddress"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                NetworkSettings: {
                                    shape: "Sij",
                                    locationName: "networkSettings"
                                },
                                SerialNumber: {
                                    locationName: "serialNumber"
                                },
                                Type: {
                                    locationName: "type"
                                },
                                UhdDeviceSettings: {
                                    shape: "Sim",
                                    locationName: "uhdDeviceSettings"
                                },
                                Tags: {
                                    shape: "Sfc",
                                    locationName: "tags"
                                },
                                AvailabilityZone: {
                                    locationName: "availabilityZone"
                                },
                                MedialiveInputArns: {
                                    shape: "S5",
                                    locationName: "medialiveInputArns"
                                },
                                OutputType: {
                                    locationName: "outputType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputSecurityGroups: {
            http: {
                method: "GET",
                requestUri: "/prod/inputSecurityGroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InputSecurityGroups: {
                        locationName: "inputSecurityGroups",
                        type: "list",
                        member: {
                            shape: "Sge"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInputs: {
            http: {
                method: "GET",
                requestUri: "/prod/inputs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Inputs: {
                        locationName: "inputs",
                        type: "list",
                        member: {
                            shape: "Sfz"
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMultiplexPrograms: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes/{multiplexId}/programs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    MultiplexPrograms: {
                        locationName: "multiplexPrograms",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelId: {
                                    locationName: "channelId"
                                },
                                ProgramName: {
                                    locationName: "programName"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMultiplexes: {
            http: {
                method: "GET",
                requestUri: "/prod/multiplexes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Multiplexes: {
                        locationName: "multiplexes",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                AvailabilityZones: {
                                    shape: "S5",
                                    locationName: "availabilityZones"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                MultiplexSettings: {
                                    locationName: "multiplexSettings",
                                    type: "structure",
                                    members: {
                                        TransportStreamBitrate: {
                                            locationName: "transportStreamBitrate",
                                            type: "integer"
                                        }
                                    }
                                },
                                Name: {
                                    locationName: "name"
                                },
                                PipelinesRunningCount: {
                                    locationName: "pipelinesRunningCount",
                                    type: "integer"
                                },
                                ProgramCount: {
                                    locationName: "programCount",
                                    type: "integer"
                                },
                                State: {
                                    locationName: "state"
                                },
                                Tags: {
                                    shape: "Sfc",
                                    locationName: "tags"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOfferings: {
            http: {
                method: "GET",
                requestUri: "/prod/offerings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelClass: {
                        location: "querystring",
                        locationName: "channelClass"
                    },
                    ChannelConfiguration: {
                        location: "querystring",
                        locationName: "channelConfiguration"
                    },
                    Codec: {
                        location: "querystring",
                        locationName: "codec"
                    },
                    Duration: {
                        location: "querystring",
                        locationName: "duration"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    MaximumBitrate: {
                        location: "querystring",
                        locationName: "maximumBitrate"
                    },
                    MaximumFramerate: {
                        location: "querystring",
                        locationName: "maximumFramerate"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Resolution: {
                        location: "querystring",
                        locationName: "resolution"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    SpecialFeature: {
                        location: "querystring",
                        locationName: "specialFeature"
                    },
                    VideoQuality: {
                        location: "querystring",
                        locationName: "videoQuality"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Offerings: {
                        locationName: "offerings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CurrencyCode: {
                                    locationName: "currencyCode"
                                },
                                Duration: {
                                    locationName: "duration",
                                    type: "integer"
                                },
                                DurationUnits: {
                                    locationName: "durationUnits"
                                },
                                FixedPrice: {
                                    locationName: "fixedPrice",
                                    type: "double"
                                },
                                OfferingDescription: {
                                    locationName: "offeringDescription"
                                },
                                OfferingId: {
                                    locationName: "offeringId"
                                },
                                OfferingType: {
                                    locationName: "offeringType"
                                },
                                Region: {
                                    locationName: "region"
                                },
                                ResourceSpecification: {
                                    shape: "Shq",
                                    locationName: "resourceSpecification"
                                },
                                UsagePrice: {
                                    locationName: "usagePrice",
                                    type: "double"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListReservations: {
            http: {
                method: "GET",
                requestUri: "/prod/reservations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelClass: {
                        location: "querystring",
                        locationName: "channelClass"
                    },
                    Codec: {
                        location: "querystring",
                        locationName: "codec"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    MaximumBitrate: {
                        location: "querystring",
                        locationName: "maximumBitrate"
                    },
                    MaximumFramerate: {
                        location: "querystring",
                        locationName: "maximumFramerate"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    Resolution: {
                        location: "querystring",
                        locationName: "resolution"
                    },
                    ResourceType: {
                        location: "querystring",
                        locationName: "resourceType"
                    },
                    SpecialFeature: {
                        location: "querystring",
                        locationName: "specialFeature"
                    },
                    VideoQuality: {
                        location: "querystring",
                        locationName: "videoQuality"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Reservations: {
                        locationName: "reservations",
                        type: "list",
                        member: {
                            shape: "Skh"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/prod/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                }
            }
        },
        PurchaseOffering: {
            http: {
                requestUri: "/prod/offerings/{offeringId}/purchase",
                responseCode: 201
            },
            input: {
                type: "structure",
                members: {
                    Count: {
                        locationName: "count",
                        type: "integer"
                    },
                    Name: {
                        locationName: "name"
                    },
                    OfferingId: {
                        location: "uri",
                        locationName: "offeringId"
                    },
                    RenewalSettings: {
                        shape: "Sho",
                        locationName: "renewalSettings"
                    },
                    RequestId: {
                        locationName: "requestId",
                        idempotencyToken: true
                    },
                    Start: {
                        locationName: "start"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                },
                required: [ "OfferingId", "Count" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "Skh",
                        locationName: "reservation"
                    }
                }
            }
        },
        RebootInputDevice: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/reboot",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Force: {
                        locationName: "force"
                    },
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RejectInputDeviceTransfer: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/reject",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartChannel: {
            http: {
                requestUri: "/prod/channels/{channelId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S27",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sfg",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2i",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sdf",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sf4",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Maintenance: {
                        shape: "Sfi",
                        locationName: "maintenance"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sfj",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Sfm",
                        locationName: "vpc"
                    }
                }
            }
        },
        StartInputDevice: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartInputDeviceMaintenanceWindow: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/startInputDeviceMaintenanceWindow",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartMultiplex: {
            http: {
                requestUri: "/prod/multiplexes/{multiplexId}/start",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sgp",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sgj",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                }
            }
        },
        StopChannel: {
            http: {
                requestUri: "/prod/channels/{channelId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CdiInputSpecification: {
                        shape: "S27",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    },
                    EgressEndpoints: {
                        shape: "Sfg",
                        locationName: "egressEndpoints"
                    },
                    EncoderSettings: {
                        shape: "S2i",
                        locationName: "encoderSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    InputAttachments: {
                        shape: "Sdf",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sf4",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Maintenance: {
                        shape: "Sfi",
                        locationName: "maintenance"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelineDetails: {
                        shape: "Sfj",
                        locationName: "pipelineDetails"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    Vpc: {
                        shape: "Sfm",
                        locationName: "vpc"
                    }
                }
            }
        },
        StopInputDevice: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopMultiplex: {
            http: {
                requestUri: "/prod/multiplexes/{multiplexId}/stop",
                responseCode: 202
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AvailabilityZones: {
                        shape: "S5",
                        locationName: "availabilityZones"
                    },
                    Destinations: {
                        shape: "Sgp",
                        locationName: "destinations"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MultiplexSettings: {
                        shape: "Sgj",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    },
                    PipelinesRunningCount: {
                        locationName: "pipelinesRunningCount",
                        type: "integer"
                    },
                    ProgramCount: {
                        locationName: "programCount",
                        type: "integer"
                    },
                    State: {
                        locationName: "state"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    }
                }
            }
        },
        TransferInputDevice: {
            http: {
                requestUri: "/prod/inputDevices/{inputDeviceId}/transfer",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    },
                    TargetCustomerId: {
                        locationName: "targetCustomerId"
                    },
                    TargetRegion: {
                        locationName: "targetRegion"
                    },
                    TransferMessage: {
                        locationName: "transferMessage"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAccountConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/prod/accountConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccountConfiguration: {
                        shape: "Si4",
                        locationName: "accountConfiguration"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountConfiguration: {
                        shape: "Si4",
                        locationName: "accountConfiguration"
                    }
                }
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/prod/channels/{channelId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    CdiInputSpecification: {
                        shape: "S27",
                        locationName: "cdiInputSpecification"
                    },
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    },
                    EncoderSettings: {
                        shape: "S2i",
                        locationName: "encoderSettings"
                    },
                    InputAttachments: {
                        shape: "Sdf",
                        locationName: "inputAttachments"
                    },
                    InputSpecification: {
                        shape: "Sf4",
                        locationName: "inputSpecification"
                    },
                    LogLevel: {
                        locationName: "logLevel"
                    },
                    Maintenance: {
                        locationName: "maintenance",
                        type: "structure",
                        members: {
                            MaintenanceDay: {
                                locationName: "maintenanceDay"
                            },
                            MaintenanceScheduledDate: {
                                locationName: "maintenanceScheduledDate"
                            },
                            MaintenanceStartTime: {
                                locationName: "maintenanceStartTime"
                            }
                        }
                    },
                    Name: {
                        locationName: "name"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    }
                },
                required: [ "ChannelId" ]
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "Sff",
                        locationName: "channel"
                    }
                }
            }
        },
        UpdateChannelClass: {
            http: {
                method: "PUT",
                requestUri: "/prod/channels/{channelId}/channelClass",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ChannelClass: {
                        locationName: "channelClass"
                    },
                    ChannelId: {
                        location: "uri",
                        locationName: "channelId"
                    },
                    Destinations: {
                        shape: "S2a",
                        locationName: "destinations"
                    }
                },
                required: [ "ChannelId", "ChannelClass" ]
            },
            output: {
                type: "structure",
                members: {
                    Channel: {
                        shape: "Sff",
                        locationName: "channel"
                    }
                }
            }
        },
        UpdateInput: {
            http: {
                method: "PUT",
                requestUri: "/prod/inputs/{inputId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Destinations: {
                        shape: "Sfo",
                        locationName: "destinations"
                    },
                    InputDevices: {
                        locationName: "inputDevices",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {
                                    locationName: "id"
                                }
                            }
                        }
                    },
                    InputId: {
                        location: "uri",
                        locationName: "inputId"
                    },
                    InputSecurityGroups: {
                        shape: "S5",
                        locationName: "inputSecurityGroups"
                    },
                    MediaConnectFlows: {
                        shape: "Sfs",
                        locationName: "mediaConnectFlows"
                    },
                    Name: {
                        locationName: "name"
                    },
                    RoleArn: {
                        locationName: "roleArn"
                    },
                    Sources: {
                        shape: "Sfu",
                        locationName: "sources"
                    }
                },
                required: [ "InputId" ]
            },
            output: {
                type: "structure",
                members: {
                    Input: {
                        shape: "Sfz",
                        locationName: "input"
                    }
                }
            }
        },
        UpdateInputDevice: {
            http: {
                method: "PUT",
                requestUri: "/prod/inputDevices/{inputDeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    HdDeviceSettings: {
                        shape: "Slj",
                        locationName: "hdDeviceSettings"
                    },
                    InputDeviceId: {
                        location: "uri",
                        locationName: "inputDeviceId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    UhdDeviceSettings: {
                        shape: "Slj",
                        locationName: "uhdDeviceSettings"
                    },
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    }
                },
                required: [ "InputDeviceId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ConnectionState: {
                        locationName: "connectionState"
                    },
                    DeviceSettingsSyncState: {
                        locationName: "deviceSettingsSyncState"
                    },
                    DeviceUpdateStatus: {
                        locationName: "deviceUpdateStatus"
                    },
                    HdDeviceSettings: {
                        shape: "Sie",
                        locationName: "hdDeviceSettings"
                    },
                    Id: {
                        locationName: "id"
                    },
                    MacAddress: {
                        locationName: "macAddress"
                    },
                    Name: {
                        locationName: "name"
                    },
                    NetworkSettings: {
                        shape: "Sij",
                        locationName: "networkSettings"
                    },
                    SerialNumber: {
                        locationName: "serialNumber"
                    },
                    Type: {
                        locationName: "type"
                    },
                    UhdDeviceSettings: {
                        shape: "Sim",
                        locationName: "uhdDeviceSettings"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    AvailabilityZone: {
                        locationName: "availabilityZone"
                    },
                    MedialiveInputArns: {
                        shape: "S5",
                        locationName: "medialiveInputArns"
                    },
                    OutputType: {
                        locationName: "outputType"
                    }
                }
            }
        },
        UpdateInputSecurityGroup: {
            http: {
                method: "PUT",
                requestUri: "/prod/inputSecurityGroups/{inputSecurityGroupId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    InputSecurityGroupId: {
                        location: "uri",
                        locationName: "inputSecurityGroupId"
                    },
                    Tags: {
                        shape: "Sfc",
                        locationName: "tags"
                    },
                    WhitelistRules: {
                        shape: "Sgb",
                        locationName: "whitelistRules"
                    }
                },
                required: [ "InputSecurityGroupId" ]
            },
            output: {
                type: "structure",
                members: {
                    SecurityGroup: {
                        shape: "Sge",
                        locationName: "securityGroup"
                    }
                }
            }
        },
        UpdateMultiplex: {
            http: {
                method: "PUT",
                requestUri: "/prod/multiplexes/{multiplexId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    MultiplexSettings: {
                        shape: "Sgj",
                        locationName: "multiplexSettings"
                    },
                    Name: {
                        locationName: "name"
                    }
                },
                required: [ "MultiplexId" ]
            },
            output: {
                type: "structure",
                members: {
                    Multiplex: {
                        shape: "Sgo",
                        locationName: "multiplex"
                    }
                }
            }
        },
        UpdateMultiplexProgram: {
            http: {
                method: "PUT",
                requestUri: "/prod/multiplexes/{multiplexId}/programs/{programName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MultiplexId: {
                        location: "uri",
                        locationName: "multiplexId"
                    },
                    MultiplexProgramSettings: {
                        shape: "Sgu",
                        locationName: "multiplexProgramSettings"
                    },
                    ProgramName: {
                        location: "uri",
                        locationName: "programName"
                    }
                },
                required: [ "MultiplexId", "ProgramName" ]
            },
            output: {
                type: "structure",
                members: {
                    MultiplexProgram: {
                        shape: "Sh2",
                        locationName: "multiplexProgram"
                    }
                }
            }
        },
        UpdateReservation: {
            http: {
                method: "PUT",
                requestUri: "/prod/reservations/{reservationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    RenewalSettings: {
                        shape: "Sho",
                        locationName: "renewalSettings"
                    },
                    ReservationId: {
                        location: "uri",
                        locationName: "reservationId"
                    }
                },
                required: [ "ReservationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Reservation: {
                        shape: "Skh",
                        locationName: "reservation"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Code: {
                        locationName: "code"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Message: {
                        locationName: "message"
                    }
                }
            }
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Id: {
                        locationName: "id"
                    },
                    State: {
                        locationName: "state"
                    }
                }
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ActionName: {
                        locationName: "actionName"
                    },
                    ScheduleActionSettings: {
                        locationName: "scheduleActionSettings",
                        type: "structure",
                        members: {
                            HlsId3SegmentTaggingSettings: {
                                locationName: "hlsId3SegmentTaggingSettings",
                                type: "structure",
                                members: {
                                    Tag: {
                                        locationName: "tag"
                                    },
                                    Id3: {
                                        locationName: "id3"
                                    }
                                }
                            },
                            HlsTimedMetadataSettings: {
                                locationName: "hlsTimedMetadataSettings",
                                type: "structure",
                                members: {
                                    Id3: {
                                        locationName: "id3"
                                    }
                                },
                                required: [ "Id3" ]
                            },
                            InputPrepareSettings: {
                                locationName: "inputPrepareSettings",
                                type: "structure",
                                members: {
                                    InputAttachmentNameReference: {
                                        locationName: "inputAttachmentNameReference"
                                    },
                                    InputClippingSettings: {
                                        shape: "Sn",
                                        locationName: "inputClippingSettings"
                                    },
                                    UrlPath: {
                                        shape: "S5",
                                        locationName: "urlPath"
                                    }
                                }
                            },
                            InputSwitchSettings: {
                                locationName: "inputSwitchSettings",
                                type: "structure",
                                members: {
                                    InputAttachmentNameReference: {
                                        locationName: "inputAttachmentNameReference"
                                    },
                                    InputClippingSettings: {
                                        shape: "Sn",
                                        locationName: "inputClippingSettings"
                                    },
                                    UrlPath: {
                                        shape: "S5",
                                        locationName: "urlPath"
                                    }
                                },
                                required: [ "InputAttachmentNameReference" ]
                            },
                            MotionGraphicsImageActivateSettings: {
                                locationName: "motionGraphicsImageActivateSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "long"
                                    },
                                    PasswordParam: {
                                        locationName: "passwordParam"
                                    },
                                    Url: {
                                        locationName: "url"
                                    },
                                    Username: {
                                        locationName: "username"
                                    }
                                }
                            },
                            MotionGraphicsImageDeactivateSettings: {
                                locationName: "motionGraphicsImageDeactivateSettings",
                                type: "structure",
                                members: {}
                            },
                            PauseStateSettings: {
                                locationName: "pauseStateSettings",
                                type: "structure",
                                members: {
                                    Pipelines: {
                                        locationName: "pipelines",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                PipelineId: {
                                                    locationName: "pipelineId"
                                                }
                                            },
                                            required: [ "PipelineId" ]
                                        }
                                    }
                                }
                            },
                            Scte35InputSettings: {
                                locationName: "scte35InputSettings",
                                type: "structure",
                                members: {
                                    InputAttachmentNameReference: {
                                        locationName: "inputAttachmentNameReference"
                                    },
                                    Mode: {
                                        locationName: "mode"
                                    }
                                },
                                required: [ "Mode" ]
                            },
                            Scte35ReturnToNetworkSettings: {
                                locationName: "scte35ReturnToNetworkSettings",
                                type: "structure",
                                members: {
                                    SpliceEventId: {
                                        locationName: "spliceEventId",
                                        type: "long"
                                    }
                                },
                                required: [ "SpliceEventId" ]
                            },
                            Scte35SpliceInsertSettings: {
                                locationName: "scte35SpliceInsertSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "long"
                                    },
                                    SpliceEventId: {
                                        locationName: "spliceEventId",
                                        type: "long"
                                    }
                                },
                                required: [ "SpliceEventId" ]
                            },
                            Scte35TimeSignalSettings: {
                                locationName: "scte35TimeSignalSettings",
                                type: "structure",
                                members: {
                                    Scte35Descriptors: {
                                        locationName: "scte35Descriptors",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                Scte35DescriptorSettings: {
                                                    locationName: "scte35DescriptorSettings",
                                                    type: "structure",
                                                    members: {
                                                        SegmentationDescriptorScte35DescriptorSettings: {
                                                            locationName: "segmentationDescriptorScte35DescriptorSettings",
                                                            type: "structure",
                                                            members: {
                                                                DeliveryRestrictions: {
                                                                    locationName: "deliveryRestrictions",
                                                                    type: "structure",
                                                                    members: {
                                                                        ArchiveAllowedFlag: {
                                                                            locationName: "archiveAllowedFlag"
                                                                        },
                                                                        DeviceRestrictions: {
                                                                            locationName: "deviceRestrictions"
                                                                        },
                                                                        NoRegionalBlackoutFlag: {
                                                                            locationName: "noRegionalBlackoutFlag"
                                                                        },
                                                                        WebDeliveryAllowedFlag: {
                                                                            locationName: "webDeliveryAllowedFlag"
                                                                        }
                                                                    },
                                                                    required: [ "DeviceRestrictions", "ArchiveAllowedFlag", "WebDeliveryAllowedFlag", "NoRegionalBlackoutFlag" ]
                                                                },
                                                                SegmentNum: {
                                                                    locationName: "segmentNum",
                                                                    type: "integer"
                                                                },
                                                                SegmentationCancelIndicator: {
                                                                    locationName: "segmentationCancelIndicator"
                                                                },
                                                                SegmentationDuration: {
                                                                    locationName: "segmentationDuration",
                                                                    type: "long"
                                                                },
                                                                SegmentationEventId: {
                                                                    locationName: "segmentationEventId",
                                                                    type: "long"
                                                                },
                                                                SegmentationTypeId: {
                                                                    locationName: "segmentationTypeId",
                                                                    type: "integer"
                                                                },
                                                                SegmentationUpid: {
                                                                    locationName: "segmentationUpid"
                                                                },
                                                                SegmentationUpidType: {
                                                                    locationName: "segmentationUpidType",
                                                                    type: "integer"
                                                                },
                                                                SegmentsExpected: {
                                                                    locationName: "segmentsExpected",
                                                                    type: "integer"
                                                                },
                                                                SubSegmentNum: {
                                                                    locationName: "subSegmentNum",
                                                                    type: "integer"
                                                                },
                                                                SubSegmentsExpected: {
                                                                    locationName: "subSegmentsExpected",
                                                                    type: "integer"
                                                                }
                                                            },
                                                            required: [ "SegmentationEventId", "SegmentationCancelIndicator" ]
                                                        }
                                                    },
                                                    required: [ "SegmentationDescriptorScte35DescriptorSettings" ]
                                                }
                                            },
                                            required: [ "Scte35DescriptorSettings" ]
                                        }
                                    }
                                },
                                required: [ "Scte35Descriptors" ]
                            },
                            StaticImageActivateSettings: {
                                locationName: "staticImageActivateSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "integer"
                                    },
                                    FadeIn: {
                                        locationName: "fadeIn",
                                        type: "integer"
                                    },
                                    FadeOut: {
                                        locationName: "fadeOut",
                                        type: "integer"
                                    },
                                    Height: {
                                        locationName: "height",
                                        type: "integer"
                                    },
                                    Image: {
                                        shape: "S1m",
                                        locationName: "image"
                                    },
                                    ImageX: {
                                        locationName: "imageX",
                                        type: "integer"
                                    },
                                    ImageY: {
                                        locationName: "imageY",
                                        type: "integer"
                                    },
                                    Layer: {
                                        locationName: "layer",
                                        type: "integer"
                                    },
                                    Opacity: {
                                        locationName: "opacity",
                                        type: "integer"
                                    },
                                    Width: {
                                        locationName: "width",
                                        type: "integer"
                                    }
                                },
                                required: [ "Image" ]
                            },
                            StaticImageDeactivateSettings: {
                                locationName: "staticImageDeactivateSettings",
                                type: "structure",
                                members: {
                                    FadeOut: {
                                        locationName: "fadeOut",
                                        type: "integer"
                                    },
                                    Layer: {
                                        locationName: "layer",
                                        type: "integer"
                                    }
                                }
                            },
                            StaticImageOutputActivateSettings: {
                                locationName: "staticImageOutputActivateSettings",
                                type: "structure",
                                members: {
                                    Duration: {
                                        locationName: "duration",
                                        type: "integer"
                                    },
                                    FadeIn: {
                                        locationName: "fadeIn",
                                        type: "integer"
                                    },
                                    FadeOut: {
                                        locationName: "fadeOut",
                                        type: "integer"
                                    },
                                    Height: {
                                        locationName: "height",
                                        type: "integer"
                                    },
                                    Image: {
                                        shape: "S1m",
                                        locationName: "image"
                                    },
                                    ImageX: {
                                        locationName: "imageX",
                                        type: "integer"
                                    },
                                    ImageY: {
                                        locationName: "imageY",
                                        type: "integer"
                                    },
                                    Layer: {
                                        locationName: "layer",
                                        type: "integer"
                                    },
                                    Opacity: {
                                        locationName: "opacity",
                                        type: "integer"
                                    },
                                    OutputNames: {
                                        shape: "S5",
                                        locationName: "outputNames"
                                    },
                                    Width: {
                                        locationName: "width",
                                        type: "integer"
                                    }
                                },
                                required: [ "OutputNames", "Image" ]
                            },
                            StaticImageOutputDeactivateSettings: {
                                locationName: "staticImageOutputDeactivateSettings",
                                type: "structure",
                                members: {
                                    FadeOut: {
                                        locationName: "fadeOut",
                                        type: "integer"
                                    },
                                    Layer: {
                                        locationName: "layer",
                                        type: "integer"
                                    },
                                    OutputNames: {
                                        shape: "S5",
                                        locationName: "outputNames"
                                    }
                                },
                                required: [ "OutputNames" ]
                            }
                        }
                    },
                    ScheduleActionStartSettings: {
                        locationName: "scheduleActionStartSettings",
                        type: "structure",
                        members: {
                            FixedModeScheduleActionStartSettings: {
                                locationName: "fixedModeScheduleActionStartSettings",
                                type: "structure",
                                members: {
                                    Time: {
                                        locationName: "time"
                                    }
                                },
                                required: [ "Time" ]
                            },
                            FollowModeScheduleActionStartSettings: {
                                locationName: "followModeScheduleActionStartSettings",
                                type: "structure",
                                members: {
                                    FollowPoint: {
                                        locationName: "followPoint"
                                    },
                                    ReferenceActionName: {
                                        locationName: "referenceActionName"
                                    }
                                },
                                required: [ "ReferenceActionName", "FollowPoint" ]
                            },
                            ImmediateModeScheduleActionStartSettings: {
                                locationName: "immediateModeScheduleActionStartSettings",
                                type: "structure",
                                members: {}
                            }
                        }
                    }
                },
                required: [ "ActionName", "ScheduleActionStartSettings", "ScheduleActionSettings" ]
            }
        },
        Sn: {
            type: "structure",
            members: {
                InputTimecodeSource: {
                    locationName: "inputTimecodeSource"
                },
                StartTimecode: {
                    locationName: "startTimecode",
                    type: "structure",
                    members: {
                        Timecode: {
                            locationName: "timecode"
                        }
                    }
                },
                StopTimecode: {
                    locationName: "stopTimecode",
                    type: "structure",
                    members: {
                        LastFrameClippingBehavior: {
                            locationName: "lastFrameClippingBehavior"
                        },
                        Timecode: {
                            locationName: "timecode"
                        }
                    }
                }
            },
            required: [ "InputTimecodeSource" ]
        },
        S1m: {
            type: "structure",
            members: {
                PasswordParam: {
                    locationName: "passwordParam"
                },
                Uri: {
                    locationName: "uri"
                },
                Username: {
                    locationName: "username"
                }
            },
            required: [ "Uri" ]
        },
        S27: {
            type: "structure",
            members: {
                Resolution: {
                    locationName: "resolution"
                }
            }
        },
        S2a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id"
                    },
                    MediaPackageSettings: {
                        locationName: "mediaPackageSettings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ChannelId: {
                                    locationName: "channelId"
                                }
                            }
                        }
                    },
                    MultiplexSettings: {
                        locationName: "multiplexSettings",
                        type: "structure",
                        members: {
                            MultiplexId: {
                                locationName: "multiplexId"
                            },
                            ProgramName: {
                                locationName: "programName"
                            }
                        }
                    },
                    Settings: {
                        locationName: "settings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PasswordParam: {
                                    locationName: "passwordParam"
                                },
                                StreamName: {
                                    locationName: "streamName"
                                },
                                Url: {
                                    locationName: "url"
                                },
                                Username: {
                                    locationName: "username"
                                }
                            }
                        }
                    }
                }
            }
        },
        S2i: {
            type: "structure",
            members: {
                AudioDescriptions: {
                    locationName: "audioDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            AudioNormalizationSettings: {
                                locationName: "audioNormalizationSettings",
                                type: "structure",
                                members: {
                                    Algorithm: {
                                        locationName: "algorithm"
                                    },
                                    AlgorithmControl: {
                                        locationName: "algorithmControl"
                                    },
                                    TargetLkfs: {
                                        locationName: "targetLkfs",
                                        type: "double"
                                    }
                                }
                            },
                            AudioSelectorName: {
                                locationName: "audioSelectorName"
                            },
                            AudioType: {
                                locationName: "audioType"
                            },
                            AudioTypeControl: {
                                locationName: "audioTypeControl"
                            },
                            AudioWatermarkingSettings: {
                                locationName: "audioWatermarkingSettings",
                                type: "structure",
                                members: {
                                    NielsenWatermarksSettings: {
                                        locationName: "nielsenWatermarksSettings",
                                        type: "structure",
                                        members: {
                                            NielsenCbetSettings: {
                                                locationName: "nielsenCbetSettings",
                                                type: "structure",
                                                members: {
                                                    CbetCheckDigitString: {
                                                        locationName: "cbetCheckDigitString"
                                                    },
                                                    CbetStepaside: {
                                                        locationName: "cbetStepaside"
                                                    },
                                                    Csid: {
                                                        locationName: "csid"
                                                    }
                                                },
                                                required: [ "CbetCheckDigitString", "CbetStepaside", "Csid" ]
                                            },
                                            NielsenDistributionType: {
                                                locationName: "nielsenDistributionType"
                                            },
                                            NielsenNaesIiNwSettings: {
                                                locationName: "nielsenNaesIiNwSettings",
                                                type: "structure",
                                                members: {
                                                    CheckDigitString: {
                                                        locationName: "checkDigitString"
                                                    },
                                                    Sid: {
                                                        locationName: "sid",
                                                        type: "double"
                                                    },
                                                    Timezone: {
                                                        locationName: "timezone"
                                                    }
                                                },
                                                required: [ "CheckDigitString", "Sid" ]
                                            }
                                        }
                                    }
                                }
                            },
                            CodecSettings: {
                                locationName: "codecSettings",
                                type: "structure",
                                members: {
                                    AacSettings: {
                                        locationName: "aacSettings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            InputType: {
                                                locationName: "inputType"
                                            },
                                            Profile: {
                                                locationName: "profile"
                                            },
                                            RateControlMode: {
                                                locationName: "rateControlMode"
                                            },
                                            RawFormat: {
                                                locationName: "rawFormat"
                                            },
                                            SampleRate: {
                                                locationName: "sampleRate",
                                                type: "double"
                                            },
                                            Spec: {
                                                locationName: "spec"
                                            },
                                            VbrQuality: {
                                                locationName: "vbrQuality"
                                            }
                                        }
                                    },
                                    Ac3Settings: {
                                        locationName: "ac3Settings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            BitstreamMode: {
                                                locationName: "bitstreamMode"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            Dialnorm: {
                                                locationName: "dialnorm",
                                                type: "integer"
                                            },
                                            DrcProfile: {
                                                locationName: "drcProfile"
                                            },
                                            LfeFilter: {
                                                locationName: "lfeFilter"
                                            },
                                            MetadataControl: {
                                                locationName: "metadataControl"
                                            },
                                            AttenuationControl: {
                                                locationName: "attenuationControl"
                                            }
                                        }
                                    },
                                    Eac3AtmosSettings: {
                                        locationName: "eac3AtmosSettings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            Dialnorm: {
                                                locationName: "dialnorm",
                                                type: "integer"
                                            },
                                            DrcLine: {
                                                locationName: "drcLine"
                                            },
                                            DrcRf: {
                                                locationName: "drcRf"
                                            },
                                            HeightTrim: {
                                                locationName: "heightTrim",
                                                type: "double"
                                            },
                                            SurroundTrim: {
                                                locationName: "surroundTrim",
                                                type: "double"
                                            }
                                        }
                                    },
                                    Eac3Settings: {
                                        locationName: "eac3Settings",
                                        type: "structure",
                                        members: {
                                            AttenuationControl: {
                                                locationName: "attenuationControl"
                                            },
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            BitstreamMode: {
                                                locationName: "bitstreamMode"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            DcFilter: {
                                                locationName: "dcFilter"
                                            },
                                            Dialnorm: {
                                                locationName: "dialnorm",
                                                type: "integer"
                                            },
                                            DrcLine: {
                                                locationName: "drcLine"
                                            },
                                            DrcRf: {
                                                locationName: "drcRf"
                                            },
                                            LfeControl: {
                                                locationName: "lfeControl"
                                            },
                                            LfeFilter: {
                                                locationName: "lfeFilter"
                                            },
                                            LoRoCenterMixLevel: {
                                                locationName: "loRoCenterMixLevel",
                                                type: "double"
                                            },
                                            LoRoSurroundMixLevel: {
                                                locationName: "loRoSurroundMixLevel",
                                                type: "double"
                                            },
                                            LtRtCenterMixLevel: {
                                                locationName: "ltRtCenterMixLevel",
                                                type: "double"
                                            },
                                            LtRtSurroundMixLevel: {
                                                locationName: "ltRtSurroundMixLevel",
                                                type: "double"
                                            },
                                            MetadataControl: {
                                                locationName: "metadataControl"
                                            },
                                            PassthroughControl: {
                                                locationName: "passthroughControl"
                                            },
                                            PhaseControl: {
                                                locationName: "phaseControl"
                                            },
                                            StereoDownmix: {
                                                locationName: "stereoDownmix"
                                            },
                                            SurroundExMode: {
                                                locationName: "surroundExMode"
                                            },
                                            SurroundMode: {
                                                locationName: "surroundMode"
                                            }
                                        }
                                    },
                                    Mp2Settings: {
                                        locationName: "mp2Settings",
                                        type: "structure",
                                        members: {
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            SampleRate: {
                                                locationName: "sampleRate",
                                                type: "double"
                                            }
                                        }
                                    },
                                    PassThroughSettings: {
                                        locationName: "passThroughSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    WavSettings: {
                                        locationName: "wavSettings",
                                        type: "structure",
                                        members: {
                                            BitDepth: {
                                                locationName: "bitDepth",
                                                type: "double"
                                            },
                                            CodingMode: {
                                                locationName: "codingMode"
                                            },
                                            SampleRate: {
                                                locationName: "sampleRate",
                                                type: "double"
                                            }
                                        }
                                    }
                                }
                            },
                            LanguageCode: {
                                locationName: "languageCode"
                            },
                            LanguageCodeControl: {
                                locationName: "languageCodeControl"
                            },
                            Name: {
                                locationName: "name"
                            },
                            RemixSettings: {
                                locationName: "remixSettings",
                                type: "structure",
                                members: {
                                    ChannelMappings: {
                                        locationName: "channelMappings",
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            members: {
                                                InputChannelLevels: {
                                                    locationName: "inputChannelLevels",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Gain: {
                                                                locationName: "gain",
                                                                type: "integer"
                                                            },
                                                            InputChannel: {
                                                                locationName: "inputChannel",
                                                                type: "integer"
                                                            }
                                                        },
                                                        required: [ "InputChannel", "Gain" ]
                                                    }
                                                },
                                                OutputChannel: {
                                                    locationName: "outputChannel",
                                                    type: "integer"
                                                }
                                            },
                                            required: [ "OutputChannel", "InputChannelLevels" ]
                                        }
                                    },
                                    ChannelsIn: {
                                        locationName: "channelsIn",
                                        type: "integer"
                                    },
                                    ChannelsOut: {
                                        locationName: "channelsOut",
                                        type: "integer"
                                    }
                                },
                                required: [ "ChannelMappings" ]
                            },
                            StreamName: {
                                locationName: "streamName"
                            }
                        },
                        required: [ "AudioSelectorName", "Name" ]
                    }
                },
                AvailBlanking: {
                    locationName: "availBlanking",
                    type: "structure",
                    members: {
                        AvailBlankingImage: {
                            shape: "S1m",
                            locationName: "availBlankingImage"
                        },
                        State: {
                            locationName: "state"
                        }
                    }
                },
                AvailConfiguration: {
                    locationName: "availConfiguration",
                    type: "structure",
                    members: {
                        AvailSettings: {
                            locationName: "availSettings",
                            type: "structure",
                            members: {
                                Esam: {
                                    locationName: "esam",
                                    type: "structure",
                                    members: {
                                        AcquisitionPointId: {
                                            locationName: "acquisitionPointId"
                                        },
                                        AdAvailOffset: {
                                            locationName: "adAvailOffset",
                                            type: "integer"
                                        },
                                        PasswordParam: {
                                            locationName: "passwordParam"
                                        },
                                        PoisEndpoint: {
                                            locationName: "poisEndpoint"
                                        },
                                        Username: {
                                            locationName: "username"
                                        },
                                        ZoneIdentity: {
                                            locationName: "zoneIdentity"
                                        }
                                    },
                                    required: [ "AcquisitionPointId", "PoisEndpoint" ]
                                },
                                Scte35SpliceInsert: {
                                    locationName: "scte35SpliceInsert",
                                    type: "structure",
                                    members: {
                                        AdAvailOffset: {
                                            locationName: "adAvailOffset",
                                            type: "integer"
                                        },
                                        NoRegionalBlackoutFlag: {
                                            locationName: "noRegionalBlackoutFlag"
                                        },
                                        WebDeliveryAllowedFlag: {
                                            locationName: "webDeliveryAllowedFlag"
                                        }
                                    }
                                },
                                Scte35TimeSignalApos: {
                                    locationName: "scte35TimeSignalApos",
                                    type: "structure",
                                    members: {
                                        AdAvailOffset: {
                                            locationName: "adAvailOffset",
                                            type: "integer"
                                        },
                                        NoRegionalBlackoutFlag: {
                                            locationName: "noRegionalBlackoutFlag"
                                        },
                                        WebDeliveryAllowedFlag: {
                                            locationName: "webDeliveryAllowedFlag"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                BlackoutSlate: {
                    locationName: "blackoutSlate",
                    type: "structure",
                    members: {
                        BlackoutSlateImage: {
                            shape: "S1m",
                            locationName: "blackoutSlateImage"
                        },
                        NetworkEndBlackout: {
                            locationName: "networkEndBlackout"
                        },
                        NetworkEndBlackoutImage: {
                            shape: "S1m",
                            locationName: "networkEndBlackoutImage"
                        },
                        NetworkId: {
                            locationName: "networkId"
                        },
                        State: {
                            locationName: "state"
                        }
                    }
                },
                CaptionDescriptions: {
                    locationName: "captionDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Accessibility: {
                                locationName: "accessibility"
                            },
                            CaptionSelectorName: {
                                locationName: "captionSelectorName"
                            },
                            DestinationSettings: {
                                locationName: "destinationSettings",
                                type: "structure",
                                members: {
                                    AribDestinationSettings: {
                                        locationName: "aribDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    BurnInDestinationSettings: {
                                        locationName: "burnInDestinationSettings",
                                        type: "structure",
                                        members: {
                                            Alignment: {
                                                locationName: "alignment"
                                            },
                                            BackgroundColor: {
                                                locationName: "backgroundColor"
                                            },
                                            BackgroundOpacity: {
                                                locationName: "backgroundOpacity",
                                                type: "integer"
                                            },
                                            Font: {
                                                shape: "S1m",
                                                locationName: "font"
                                            },
                                            FontColor: {
                                                locationName: "fontColor"
                                            },
                                            FontOpacity: {
                                                locationName: "fontOpacity",
                                                type: "integer"
                                            },
                                            FontResolution: {
                                                locationName: "fontResolution",
                                                type: "integer"
                                            },
                                            FontSize: {
                                                locationName: "fontSize"
                                            },
                                            OutlineColor: {
                                                locationName: "outlineColor"
                                            },
                                            OutlineSize: {
                                                locationName: "outlineSize",
                                                type: "integer"
                                            },
                                            ShadowColor: {
                                                locationName: "shadowColor"
                                            },
                                            ShadowOpacity: {
                                                locationName: "shadowOpacity",
                                                type: "integer"
                                            },
                                            ShadowXOffset: {
                                                locationName: "shadowXOffset",
                                                type: "integer"
                                            },
                                            ShadowYOffset: {
                                                locationName: "shadowYOffset",
                                                type: "integer"
                                            },
                                            TeletextGridControl: {
                                                locationName: "teletextGridControl"
                                            },
                                            XPosition: {
                                                locationName: "xPosition",
                                                type: "integer"
                                            },
                                            YPosition: {
                                                locationName: "yPosition",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    DvbSubDestinationSettings: {
                                        locationName: "dvbSubDestinationSettings",
                                        type: "structure",
                                        members: {
                                            Alignment: {
                                                locationName: "alignment"
                                            },
                                            BackgroundColor: {
                                                locationName: "backgroundColor"
                                            },
                                            BackgroundOpacity: {
                                                locationName: "backgroundOpacity",
                                                type: "integer"
                                            },
                                            Font: {
                                                shape: "S1m",
                                                locationName: "font"
                                            },
                                            FontColor: {
                                                locationName: "fontColor"
                                            },
                                            FontOpacity: {
                                                locationName: "fontOpacity",
                                                type: "integer"
                                            },
                                            FontResolution: {
                                                locationName: "fontResolution",
                                                type: "integer"
                                            },
                                            FontSize: {
                                                locationName: "fontSize"
                                            },
                                            OutlineColor: {
                                                locationName: "outlineColor"
                                            },
                                            OutlineSize: {
                                                locationName: "outlineSize",
                                                type: "integer"
                                            },
                                            ShadowColor: {
                                                locationName: "shadowColor"
                                            },
                                            ShadowOpacity: {
                                                locationName: "shadowOpacity",
                                                type: "integer"
                                            },
                                            ShadowXOffset: {
                                                locationName: "shadowXOffset",
                                                type: "integer"
                                            },
                                            ShadowYOffset: {
                                                locationName: "shadowYOffset",
                                                type: "integer"
                                            },
                                            TeletextGridControl: {
                                                locationName: "teletextGridControl"
                                            },
                                            XPosition: {
                                                locationName: "xPosition",
                                                type: "integer"
                                            },
                                            YPosition: {
                                                locationName: "yPosition",
                                                type: "integer"
                                            }
                                        }
                                    },
                                    EbuTtDDestinationSettings: {
                                        locationName: "ebuTtDDestinationSettings",
                                        type: "structure",
                                        members: {
                                            CopyrightHolder: {
                                                locationName: "copyrightHolder"
                                            },
                                            FillLineGap: {
                                                locationName: "fillLineGap"
                                            },
                                            FontFamily: {
                                                locationName: "fontFamily"
                                            },
                                            StyleControl: {
                                                locationName: "styleControl"
                                            }
                                        }
                                    },
                                    EmbeddedDestinationSettings: {
                                        locationName: "embeddedDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    EmbeddedPlusScte20DestinationSettings: {
                                        locationName: "embeddedPlusScte20DestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    RtmpCaptionInfoDestinationSettings: {
                                        locationName: "rtmpCaptionInfoDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    Scte20PlusEmbeddedDestinationSettings: {
                                        locationName: "scte20PlusEmbeddedDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    Scte27DestinationSettings: {
                                        locationName: "scte27DestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    SmpteTtDestinationSettings: {
                                        locationName: "smpteTtDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    TeletextDestinationSettings: {
                                        locationName: "teletextDestinationSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    TtmlDestinationSettings: {
                                        locationName: "ttmlDestinationSettings",
                                        type: "structure",
                                        members: {
                                            StyleControl: {
                                                locationName: "styleControl"
                                            }
                                        }
                                    },
                                    WebvttDestinationSettings: {
                                        locationName: "webvttDestinationSettings",
                                        type: "structure",
                                        members: {
                                            StyleControl: {
                                                locationName: "styleControl"
                                            }
                                        }
                                    }
                                }
                            },
                            LanguageCode: {
                                locationName: "languageCode"
                            },
                            LanguageDescription: {
                                locationName: "languageDescription"
                            },
                            Name: {
                                locationName: "name"
                            }
                        },
                        required: [ "CaptionSelectorName", "Name" ]
                    }
                },
                ColorCorrectionSettings: {
                    locationName: "colorCorrectionSettings",
                    type: "structure",
                    members: {
                        GlobalColorCorrections: {
                            locationName: "globalColorCorrections",
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    InputColorSpace: {
                                        locationName: "inputColorSpace"
                                    },
                                    OutputColorSpace: {
                                        locationName: "outputColorSpace"
                                    },
                                    Uri: {
                                        locationName: "uri"
                                    }
                                },
                                required: [ "OutputColorSpace", "InputColorSpace", "Uri" ]
                            }
                        }
                    },
                    required: [ "GlobalColorCorrections" ]
                },
                FeatureActivations: {
                    locationName: "featureActivations",
                    type: "structure",
                    members: {
                        InputPrepareScheduleActions: {
                            locationName: "inputPrepareScheduleActions"
                        },
                        OutputStaticImageOverlayScheduleActions: {
                            locationName: "outputStaticImageOverlayScheduleActions"
                        }
                    }
                },
                GlobalConfiguration: {
                    locationName: "globalConfiguration",
                    type: "structure",
                    members: {
                        InitialAudioGain: {
                            locationName: "initialAudioGain",
                            type: "integer"
                        },
                        InputEndAction: {
                            locationName: "inputEndAction"
                        },
                        InputLossBehavior: {
                            locationName: "inputLossBehavior",
                            type: "structure",
                            members: {
                                BlackFrameMsec: {
                                    locationName: "blackFrameMsec",
                                    type: "integer"
                                },
                                InputLossImageColor: {
                                    locationName: "inputLossImageColor"
                                },
                                InputLossImageSlate: {
                                    shape: "S1m",
                                    locationName: "inputLossImageSlate"
                                },
                                InputLossImageType: {
                                    locationName: "inputLossImageType"
                                },
                                RepeatFrameMsec: {
                                    locationName: "repeatFrameMsec",
                                    type: "integer"
                                }
                            }
                        },
                        OutputLockingMode: {
                            locationName: "outputLockingMode"
                        },
                        OutputTimingSource: {
                            locationName: "outputTimingSource"
                        },
                        SupportLowFramerateInputs: {
                            locationName: "supportLowFramerateInputs"
                        },
                        OutputLockingSettings: {
                            locationName: "outputLockingSettings",
                            type: "structure",
                            members: {
                                EpochLockingSettings: {
                                    locationName: "epochLockingSettings",
                                    type: "structure",
                                    members: {
                                        CustomEpoch: {
                                            locationName: "customEpoch"
                                        },
                                        JamSyncTime: {
                                            locationName: "jamSyncTime"
                                        }
                                    }
                                },
                                PipelineLockingSettings: {
                                    locationName: "pipelineLockingSettings",
                                    type: "structure",
                                    members: {}
                                }
                            }
                        }
                    }
                },
                MotionGraphicsConfiguration: {
                    locationName: "motionGraphicsConfiguration",
                    type: "structure",
                    members: {
                        MotionGraphicsInsertion: {
                            locationName: "motionGraphicsInsertion"
                        },
                        MotionGraphicsSettings: {
                            locationName: "motionGraphicsSettings",
                            type: "structure",
                            members: {
                                HtmlMotionGraphicsSettings: {
                                    locationName: "htmlMotionGraphicsSettings",
                                    type: "structure",
                                    members: {}
                                }
                            }
                        }
                    },
                    required: [ "MotionGraphicsSettings" ]
                },
                NielsenConfiguration: {
                    locationName: "nielsenConfiguration",
                    type: "structure",
                    members: {
                        DistributorId: {
                            locationName: "distributorId"
                        },
                        NielsenPcmToId3Tagging: {
                            locationName: "nielsenPcmToId3Tagging"
                        }
                    }
                },
                OutputGroups: {
                    locationName: "outputGroups",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {
                                locationName: "name"
                            },
                            OutputGroupSettings: {
                                locationName: "outputGroupSettings",
                                type: "structure",
                                members: {
                                    ArchiveGroupSettings: {
                                        locationName: "archiveGroupSettings",
                                        type: "structure",
                                        members: {
                                            ArchiveCdnSettings: {
                                                locationName: "archiveCdnSettings",
                                                type: "structure",
                                                members: {
                                                    ArchiveS3Settings: {
                                                        locationName: "archiveS3Settings",
                                                        type: "structure",
                                                        members: {
                                                            CannedAcl: {
                                                                locationName: "cannedAcl"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            Destination: {
                                                shape: "S6z",
                                                locationName: "destination"
                                            },
                                            RolloverInterval: {
                                                locationName: "rolloverInterval",
                                                type: "integer"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    FrameCaptureGroupSettings: {
                                        locationName: "frameCaptureGroupSettings",
                                        type: "structure",
                                        members: {
                                            Destination: {
                                                shape: "S6z",
                                                locationName: "destination"
                                            },
                                            FrameCaptureCdnSettings: {
                                                locationName: "frameCaptureCdnSettings",
                                                type: "structure",
                                                members: {
                                                    FrameCaptureS3Settings: {
                                                        locationName: "frameCaptureS3Settings",
                                                        type: "structure",
                                                        members: {
                                                            CannedAcl: {
                                                                locationName: "cannedAcl"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    HlsGroupSettings: {
                                        locationName: "hlsGroupSettings",
                                        type: "structure",
                                        members: {
                                            AdMarkers: {
                                                locationName: "adMarkers",
                                                type: "list",
                                                member: {}
                                            },
                                            BaseUrlContent: {
                                                locationName: "baseUrlContent"
                                            },
                                            BaseUrlContent1: {
                                                locationName: "baseUrlContent1"
                                            },
                                            BaseUrlManifest: {
                                                locationName: "baseUrlManifest"
                                            },
                                            BaseUrlManifest1: {
                                                locationName: "baseUrlManifest1"
                                            },
                                            CaptionLanguageMappings: {
                                                locationName: "captionLanguageMappings",
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        CaptionChannel: {
                                                            locationName: "captionChannel",
                                                            type: "integer"
                                                        },
                                                        LanguageCode: {
                                                            locationName: "languageCode"
                                                        },
                                                        LanguageDescription: {
                                                            locationName: "languageDescription"
                                                        }
                                                    },
                                                    required: [ "LanguageCode", "LanguageDescription", "CaptionChannel" ]
                                                }
                                            },
                                            CaptionLanguageSetting: {
                                                locationName: "captionLanguageSetting"
                                            },
                                            ClientCache: {
                                                locationName: "clientCache"
                                            },
                                            CodecSpecification: {
                                                locationName: "codecSpecification"
                                            },
                                            ConstantIv: {
                                                locationName: "constantIv"
                                            },
                                            Destination: {
                                                shape: "S6z",
                                                locationName: "destination"
                                            },
                                            DirectoryStructure: {
                                                locationName: "directoryStructure"
                                            },
                                            DiscontinuityTags: {
                                                locationName: "discontinuityTags"
                                            },
                                            EncryptionType: {
                                                locationName: "encryptionType"
                                            },
                                            HlsCdnSettings: {
                                                locationName: "hlsCdnSettings",
                                                type: "structure",
                                                members: {
                                                    HlsAkamaiSettings: {
                                                        locationName: "hlsAkamaiSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            HttpTransferMode: {
                                                                locationName: "httpTransferMode"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            },
                                                            Salt: {
                                                                locationName: "salt"
                                                            },
                                                            Token: {
                                                                locationName: "token"
                                                            }
                                                        }
                                                    },
                                                    HlsBasicPutSettings: {
                                                        locationName: "hlsBasicPutSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    HlsMediaStoreSettings: {
                                                        locationName: "hlsMediaStoreSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            MediaStoreStorageClass: {
                                                                locationName: "mediaStoreStorageClass"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            }
                                                        }
                                                    },
                                                    HlsS3Settings: {
                                                        locationName: "hlsS3Settings",
                                                        type: "structure",
                                                        members: {
                                                            CannedAcl: {
                                                                locationName: "cannedAcl"
                                                            }
                                                        }
                                                    },
                                                    HlsWebdavSettings: {
                                                        locationName: "hlsWebdavSettings",
                                                        type: "structure",
                                                        members: {
                                                            ConnectionRetryInterval: {
                                                                locationName: "connectionRetryInterval",
                                                                type: "integer"
                                                            },
                                                            FilecacheDuration: {
                                                                locationName: "filecacheDuration",
                                                                type: "integer"
                                                            },
                                                            HttpTransferMode: {
                                                                locationName: "httpTransferMode"
                                                            },
                                                            NumRetries: {
                                                                locationName: "numRetries",
                                                                type: "integer"
                                                            },
                                                            RestartDelay: {
                                                                locationName: "restartDelay",
                                                                type: "integer"
                                                            }
                                                        }
                                                    }
                                                }
                                            },
                                            HlsId3SegmentTagging: {
                                                locationName: "hlsId3SegmentTagging"
                                            },
                                            IFrameOnlyPlaylists: {
                                                locationName: "iFrameOnlyPlaylists"
                                            },
                                            IncompleteSegmentBehavior: {
                                                locationName: "incompleteSegmentBehavior"
                                            },
                                            IndexNSegments: {
                                                locationName: "indexNSegments",
                                                type: "integer"
                                            },
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            IvInManifest: {
                                                locationName: "ivInManifest"
                                            },
                                            IvSource: {
                                                locationName: "ivSource"
                                            },
                                            KeepSegments: {
                                                locationName: "keepSegments",
                                                type: "integer"
                                            },
                                            KeyFormat: {
                                                locationName: "keyFormat"
                                            },
                                            KeyFormatVersions: {
                                                locationName: "keyFormatVersions"
                                            },
                                            KeyProviderSettings: {
                                                locationName: "keyProviderSettings",
                                                type: "structure",
                                                members: {
                                                    StaticKeySettings: {
                                                        locationName: "staticKeySettings",
                                                        type: "structure",
                                                        members: {
                                                            KeyProviderServer: {
                                                                shape: "S1m",
                                                                locationName: "keyProviderServer"
                                                            },
                                                            StaticKeyValue: {
                                                                locationName: "staticKeyValue"
                                                            }
                                                        },
                                                        required: [ "StaticKeyValue" ]
                                                    }
                                                }
                                            },
                                            ManifestCompression: {
                                                locationName: "manifestCompression"
                                            },
                                            ManifestDurationFormat: {
                                                locationName: "manifestDurationFormat"
                                            },
                                            MinSegmentLength: {
                                                locationName: "minSegmentLength",
                                                type: "integer"
                                            },
                                            Mode: {
                                                locationName: "mode"
                                            },
                                            OutputSelection: {
                                                locationName: "outputSelection"
                                            },
                                            ProgramDateTime: {
                                                locationName: "programDateTime"
                                            },
                                            ProgramDateTimeClock: {
                                                locationName: "programDateTimeClock"
                                            },
                                            ProgramDateTimePeriod: {
                                                locationName: "programDateTimePeriod",
                                                type: "integer"
                                            },
                                            RedundantManifest: {
                                                locationName: "redundantManifest"
                                            },
                                            SegmentLength: {
                                                locationName: "segmentLength",
                                                type: "integer"
                                            },
                                            SegmentationMode: {
                                                locationName: "segmentationMode"
                                            },
                                            SegmentsPerSubdirectory: {
                                                locationName: "segmentsPerSubdirectory",
                                                type: "integer"
                                            },
                                            StreamInfResolution: {
                                                locationName: "streamInfResolution"
                                            },
                                            TimedMetadataId3Frame: {
                                                locationName: "timedMetadataId3Frame"
                                            },
                                            TimedMetadataId3Period: {
                                                locationName: "timedMetadataId3Period",
                                                type: "integer"
                                            },
                                            TimestampDeltaMilliseconds: {
                                                locationName: "timestampDeltaMilliseconds",
                                                type: "integer"
                                            },
                                            TsFileMode: {
                                                locationName: "tsFileMode"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    MediaPackageGroupSettings: {
                                        locationName: "mediaPackageGroupSettings",
                                        type: "structure",
                                        members: {
                                            Destination: {
                                                shape: "S6z",
                                                locationName: "destination"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    MsSmoothGroupSettings: {
                                        locationName: "msSmoothGroupSettings",
                                        type: "structure",
                                        members: {
                                            AcquisitionPointId: {
                                                locationName: "acquisitionPointId"
                                            },
                                            AudioOnlyTimecodeControl: {
                                                locationName: "audioOnlyTimecodeControl"
                                            },
                                            CertificateMode: {
                                                locationName: "certificateMode"
                                            },
                                            ConnectionRetryInterval: {
                                                locationName: "connectionRetryInterval",
                                                type: "integer"
                                            },
                                            Destination: {
                                                shape: "S6z",
                                                locationName: "destination"
                                            },
                                            EventId: {
                                                locationName: "eventId"
                                            },
                                            EventIdMode: {
                                                locationName: "eventIdMode"
                                            },
                                            EventStopBehavior: {
                                                locationName: "eventStopBehavior"
                                            },
                                            FilecacheDuration: {
                                                locationName: "filecacheDuration",
                                                type: "integer"
                                            },
                                            FragmentLength: {
                                                locationName: "fragmentLength",
                                                type: "integer"
                                            },
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            NumRetries: {
                                                locationName: "numRetries",
                                                type: "integer"
                                            },
                                            RestartDelay: {
                                                locationName: "restartDelay",
                                                type: "integer"
                                            },
                                            SegmentationMode: {
                                                locationName: "segmentationMode"
                                            },
                                            SendDelayMs: {
                                                locationName: "sendDelayMs",
                                                type: "integer"
                                            },
                                            SparseTrackType: {
                                                locationName: "sparseTrackType"
                                            },
                                            StreamManifestBehavior: {
                                                locationName: "streamManifestBehavior"
                                            },
                                            TimestampOffset: {
                                                locationName: "timestampOffset"
                                            },
                                            TimestampOffsetMode: {
                                                locationName: "timestampOffsetMode"
                                            }
                                        },
                                        required: [ "Destination" ]
                                    },
                                    MultiplexGroupSettings: {
                                        locationName: "multiplexGroupSettings",
                                        type: "structure",
                                        members: {}
                                    },
                                    RtmpGroupSettings: {
                                        locationName: "rtmpGroupSettings",
                                        type: "structure",
                                        members: {
                                            AdMarkers: {
                                                locationName: "adMarkers",
                                                type: "list",
                                                member: {}
                                            },
                                            AuthenticationScheme: {
                                                locationName: "authenticationScheme"
                                            },
                                            CacheFullBehavior: {
                                                locationName: "cacheFullBehavior"
                                            },
                                            CacheLength: {
                                                locationName: "cacheLength",
                                                type: "integer"
                                            },
                                            CaptionData: {
                                                locationName: "captionData"
                                            },
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            RestartDelay: {
                                                locationName: "restartDelay",
                                                type: "integer"
                                            },
                                            IncludeFillerNalUnits: {
                                                locationName: "includeFillerNalUnits"
                                            }
                                        }
                                    },
                                    UdpGroupSettings: {
                                        locationName: "udpGroupSettings",
                                        type: "structure",
                                        members: {
                                            InputLossAction: {
                                                locationName: "inputLossAction"
                                            },
                                            TimedMetadataId3Frame: {
                                                locationName: "timedMetadataId3Frame"
                                            },
                                            TimedMetadataId3Period: {
                                                locationName: "timedMetadataId3Period",
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            Outputs: {
                                locationName: "outputs",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AudioDescriptionNames: {
                                            shape: "S5",
                                            locationName: "audioDescriptionNames"
                                        },
                                        CaptionDescriptionNames: {
                                            shape: "S5",
                                            locationName: "captionDescriptionNames"
                                        },
                                        OutputName: {
                                            locationName: "outputName"
                                        },
                                        OutputSettings: {
                                            locationName: "outputSettings",
                                            type: "structure",
                                            members: {
                                                ArchiveOutputSettings: {
                                                    locationName: "archiveOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        ContainerSettings: {
                                                            locationName: "containerSettings",
                                                            type: "structure",
                                                            members: {
                                                                M2tsSettings: {
                                                                    shape: "S97",
                                                                    locationName: "m2tsSettings"
                                                                },
                                                                RawSettings: {
                                                                    locationName: "rawSettings",
                                                                    type: "structure",
                                                                    members: {}
                                                                }
                                                            }
                                                        },
                                                        Extension: {
                                                            locationName: "extension"
                                                        },
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        }
                                                    },
                                                    required: [ "ContainerSettings" ]
                                                },
                                                FrameCaptureOutputSettings: {
                                                    locationName: "frameCaptureOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        }
                                                    }
                                                },
                                                HlsOutputSettings: {
                                                    locationName: "hlsOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        H265PackagingType: {
                                                            locationName: "h265PackagingType"
                                                        },
                                                        HlsSettings: {
                                                            locationName: "hlsSettings",
                                                            type: "structure",
                                                            members: {
                                                                AudioOnlyHlsSettings: {
                                                                    locationName: "audioOnlyHlsSettings",
                                                                    type: "structure",
                                                                    members: {
                                                                        AudioGroupId: {
                                                                            locationName: "audioGroupId"
                                                                        },
                                                                        AudioOnlyImage: {
                                                                            shape: "S1m",
                                                                            locationName: "audioOnlyImage"
                                                                        },
                                                                        AudioTrackType: {
                                                                            locationName: "audioTrackType"
                                                                        },
                                                                        SegmentType: {
                                                                            locationName: "segmentType"
                                                                        }
                                                                    }
                                                                },
                                                                Fmp4HlsSettings: {
                                                                    locationName: "fmp4HlsSettings",
                                                                    type: "structure",
                                                                    members: {
                                                                        AudioRenditionSets: {
                                                                            locationName: "audioRenditionSets"
                                                                        },
                                                                        NielsenId3Behavior: {
                                                                            locationName: "nielsenId3Behavior"
                                                                        },
                                                                        TimedMetadataBehavior: {
                                                                            locationName: "timedMetadataBehavior"
                                                                        }
                                                                    }
                                                                },
                                                                FrameCaptureHlsSettings: {
                                                                    locationName: "frameCaptureHlsSettings",
                                                                    type: "structure",
                                                                    members: {}
                                                                },
                                                                StandardHlsSettings: {
                                                                    locationName: "standardHlsSettings",
                                                                    type: "structure",
                                                                    members: {
                                                                        AudioRenditionSets: {
                                                                            locationName: "audioRenditionSets"
                                                                        },
                                                                        M3u8Settings: {
                                                                            locationName: "m3u8Settings",
                                                                            type: "structure",
                                                                            members: {
                                                                                AudioFramesPerPes: {
                                                                                    locationName: "audioFramesPerPes",
                                                                                    type: "integer"
                                                                                },
                                                                                AudioPids: {
                                                                                    locationName: "audioPids"
                                                                                },
                                                                                EcmPid: {
                                                                                    locationName: "ecmPid"
                                                                                },
                                                                                NielsenId3Behavior: {
                                                                                    locationName: "nielsenId3Behavior"
                                                                                },
                                                                                PatInterval: {
                                                                                    locationName: "patInterval",
                                                                                    type: "integer"
                                                                                },
                                                                                PcrControl: {
                                                                                    locationName: "pcrControl"
                                                                                },
                                                                                PcrPeriod: {
                                                                                    locationName: "pcrPeriod",
                                                                                    type: "integer"
                                                                                },
                                                                                PcrPid: {
                                                                                    locationName: "pcrPid"
                                                                                },
                                                                                PmtInterval: {
                                                                                    locationName: "pmtInterval",
                                                                                    type: "integer"
                                                                                },
                                                                                PmtPid: {
                                                                                    locationName: "pmtPid"
                                                                                },
                                                                                ProgramNum: {
                                                                                    locationName: "programNum",
                                                                                    type: "integer"
                                                                                },
                                                                                Scte35Behavior: {
                                                                                    locationName: "scte35Behavior"
                                                                                },
                                                                                Scte35Pid: {
                                                                                    locationName: "scte35Pid"
                                                                                },
                                                                                TimedMetadataBehavior: {
                                                                                    locationName: "timedMetadataBehavior"
                                                                                },
                                                                                TimedMetadataPid: {
                                                                                    locationName: "timedMetadataPid"
                                                                                },
                                                                                TransportStreamId: {
                                                                                    locationName: "transportStreamId",
                                                                                    type: "integer"
                                                                                },
                                                                                VideoPid: {
                                                                                    locationName: "videoPid"
                                                                                },
                                                                                KlvBehavior: {
                                                                                    locationName: "klvBehavior"
                                                                                },
                                                                                KlvDataPids: {
                                                                                    locationName: "klvDataPids"
                                                                                }
                                                                            }
                                                                        }
                                                                    },
                                                                    required: [ "M3u8Settings" ]
                                                                }
                                                            }
                                                        },
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        },
                                                        SegmentModifier: {
                                                            locationName: "segmentModifier"
                                                        }
                                                    },
                                                    required: [ "HlsSettings" ]
                                                },
                                                MediaPackageOutputSettings: {
                                                    locationName: "mediaPackageOutputSettings",
                                                    type: "structure",
                                                    members: {}
                                                },
                                                MsSmoothOutputSettings: {
                                                    locationName: "msSmoothOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        H265PackagingType: {
                                                            locationName: "h265PackagingType"
                                                        },
                                                        NameModifier: {
                                                            locationName: "nameModifier"
                                                        }
                                                    }
                                                },
                                                MultiplexOutputSettings: {
                                                    locationName: "multiplexOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        Destination: {
                                                            shape: "S6z",
                                                            locationName: "destination"
                                                        }
                                                    },
                                                    required: [ "Destination" ]
                                                },
                                                RtmpOutputSettings: {
                                                    locationName: "rtmpOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        CertificateMode: {
                                                            locationName: "certificateMode"
                                                        },
                                                        ConnectionRetryInterval: {
                                                            locationName: "connectionRetryInterval",
                                                            type: "integer"
                                                        },
                                                        Destination: {
                                                            shape: "S6z",
                                                            locationName: "destination"
                                                        },
                                                        NumRetries: {
                                                            locationName: "numRetries",
                                                            type: "integer"
                                                        }
                                                    },
                                                    required: [ "Destination" ]
                                                },
                                                UdpOutputSettings: {
                                                    locationName: "udpOutputSettings",
                                                    type: "structure",
                                                    members: {
                                                        BufferMsec: {
                                                            locationName: "bufferMsec",
                                                            type: "integer"
                                                        },
                                                        ContainerSettings: {
                                                            locationName: "containerSettings",
                                                            type: "structure",
                                                            members: {
                                                                M2tsSettings: {
                                                                    shape: "S97",
                                                                    locationName: "m2tsSettings"
                                                                }
                                                            }
                                                        },
                                                        Destination: {
                                                            shape: "S6z",
                                                            locationName: "destination"
                                                        },
                                                        FecOutputSettings: {
                                                            locationName: "fecOutputSettings",
                                                            type: "structure",
                                                            members: {
                                                                ColumnDepth: {
                                                                    locationName: "columnDepth",
                                                                    type: "integer"
                                                                },
                                                                IncludeFec: {
                                                                    locationName: "includeFec"
                                                                },
                                                                RowLength: {
                                                                    locationName: "rowLength",
                                                                    type: "integer"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    required: [ "Destination", "ContainerSettings" ]
                                                }
                                            }
                                        },
                                        VideoDescriptionName: {
                                            locationName: "videoDescriptionName"
                                        }
                                    },
                                    required: [ "OutputSettings" ]
                                }
                            }
                        },
                        required: [ "Outputs", "OutputGroupSettings" ]
                    }
                },
                TimecodeConfig: {
                    locationName: "timecodeConfig",
                    type: "structure",
                    members: {
                        Source: {
                            locationName: "source"
                        },
                        SyncThreshold: {
                            locationName: "syncThreshold",
                            type: "integer"
                        }
                    },
                    required: [ "Source" ]
                },
                VideoDescriptions: {
                    locationName: "videoDescriptions",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CodecSettings: {
                                locationName: "codecSettings",
                                type: "structure",
                                members: {
                                    FrameCaptureSettings: {
                                        locationName: "frameCaptureSettings",
                                        type: "structure",
                                        members: {
                                            CaptureInterval: {
                                                locationName: "captureInterval",
                                                type: "integer"
                                            },
                                            CaptureIntervalUnits: {
                                                locationName: "captureIntervalUnits"
                                            },
                                            TimecodeBurninSettings: {
                                                shape: "Sba",
                                                locationName: "timecodeBurninSettings"
                                            }
                                        }
                                    },
                                    H264Settings: {
                                        locationName: "h264Settings",
                                        type: "structure",
                                        members: {
                                            AdaptiveQuantization: {
                                                locationName: "adaptiveQuantization"
                                            },
                                            AfdSignaling: {
                                                locationName: "afdSignaling"
                                            },
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "integer"
                                            },
                                            BufFillPct: {
                                                locationName: "bufFillPct",
                                                type: "integer"
                                            },
                                            BufSize: {
                                                locationName: "bufSize",
                                                type: "integer"
                                            },
                                            ColorMetadata: {
                                                locationName: "colorMetadata"
                                            },
                                            ColorSpaceSettings: {
                                                locationName: "colorSpaceSettings",
                                                type: "structure",
                                                members: {
                                                    ColorSpacePassthroughSettings: {
                                                        shape: "Sbj",
                                                        locationName: "colorSpacePassthroughSettings"
                                                    },
                                                    Rec601Settings: {
                                                        shape: "Sbk",
                                                        locationName: "rec601Settings"
                                                    },
                                                    Rec709Settings: {
                                                        shape: "Sbl",
                                                        locationName: "rec709Settings"
                                                    }
                                                }
                                            },
                                            EntropyEncoding: {
                                                locationName: "entropyEncoding"
                                            },
                                            FilterSettings: {
                                                locationName: "filterSettings",
                                                type: "structure",
                                                members: {
                                                    TemporalFilterSettings: {
                                                        shape: "Sbo",
                                                        locationName: "temporalFilterSettings"
                                                    }
                                                }
                                            },
                                            FixedAfd: {
                                                locationName: "fixedAfd"
                                            },
                                            FlickerAq: {
                                                locationName: "flickerAq"
                                            },
                                            ForceFieldPictures: {
                                                locationName: "forceFieldPictures"
                                            },
                                            FramerateControl: {
                                                locationName: "framerateControl"
                                            },
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            },
                                            GopBReference: {
                                                locationName: "gopBReference"
                                            },
                                            GopClosedCadence: {
                                                locationName: "gopClosedCadence",
                                                type: "integer"
                                            },
                                            GopNumBFrames: {
                                                locationName: "gopNumBFrames",
                                                type: "integer"
                                            },
                                            GopSize: {
                                                locationName: "gopSize",
                                                type: "double"
                                            },
                                            GopSizeUnits: {
                                                locationName: "gopSizeUnits"
                                            },
                                            Level: {
                                                locationName: "level"
                                            },
                                            LookAheadRateControl: {
                                                locationName: "lookAheadRateControl"
                                            },
                                            MaxBitrate: {
                                                locationName: "maxBitrate",
                                                type: "integer"
                                            },
                                            MinIInterval: {
                                                locationName: "minIInterval",
                                                type: "integer"
                                            },
                                            NumRefFrames: {
                                                locationName: "numRefFrames",
                                                type: "integer"
                                            },
                                            ParControl: {
                                                locationName: "parControl"
                                            },
                                            ParDenominator: {
                                                locationName: "parDenominator",
                                                type: "integer"
                                            },
                                            ParNumerator: {
                                                locationName: "parNumerator",
                                                type: "integer"
                                            },
                                            Profile: {
                                                locationName: "profile"
                                            },
                                            QualityLevel: {
                                                locationName: "qualityLevel"
                                            },
                                            QvbrQualityLevel: {
                                                locationName: "qvbrQualityLevel",
                                                type: "integer"
                                            },
                                            RateControlMode: {
                                                locationName: "rateControlMode"
                                            },
                                            ScanType: {
                                                locationName: "scanType"
                                            },
                                            SceneChangeDetect: {
                                                locationName: "sceneChangeDetect"
                                            },
                                            Slices: {
                                                locationName: "slices",
                                                type: "integer"
                                            },
                                            Softness: {
                                                locationName: "softness",
                                                type: "integer"
                                            },
                                            SpatialAq: {
                                                locationName: "spatialAq"
                                            },
                                            SubgopLength: {
                                                locationName: "subgopLength"
                                            },
                                            Syntax: {
                                                locationName: "syntax"
                                            },
                                            TemporalAq: {
                                                locationName: "temporalAq"
                                            },
                                            TimecodeInsertion: {
                                                locationName: "timecodeInsertion"
                                            },
                                            TimecodeBurninSettings: {
                                                shape: "Sba",
                                                locationName: "timecodeBurninSettings"
                                            }
                                        }
                                    },
                                    H265Settings: {
                                        locationName: "h265Settings",
                                        type: "structure",
                                        members: {
                                            AdaptiveQuantization: {
                                                locationName: "adaptiveQuantization"
                                            },
                                            AfdSignaling: {
                                                locationName: "afdSignaling"
                                            },
                                            AlternativeTransferFunction: {
                                                locationName: "alternativeTransferFunction"
                                            },
                                            Bitrate: {
                                                locationName: "bitrate",
                                                type: "integer"
                                            },
                                            BufSize: {
                                                locationName: "bufSize",
                                                type: "integer"
                                            },
                                            ColorMetadata: {
                                                locationName: "colorMetadata"
                                            },
                                            ColorSpaceSettings: {
                                                locationName: "colorSpaceSettings",
                                                type: "structure",
                                                members: {
                                                    ColorSpacePassthroughSettings: {
                                                        shape: "Sbj",
                                                        locationName: "colorSpacePassthroughSettings"
                                                    },
                                                    DolbyVision81Settings: {
                                                        locationName: "dolbyVision81Settings",
                                                        type: "structure",
                                                        members: {}
                                                    },
                                                    Hdr10Settings: {
                                                        shape: "Scn",
                                                        locationName: "hdr10Settings"
                                                    },
                                                    Rec601Settings: {
                                                        shape: "Sbk",
                                                        locationName: "rec601Settings"
                                                    },
                                                    Rec709Settings: {
                                                        shape: "Sbl",
                                                        locationName: "rec709Settings"
                                                    }
                                                }
                                            },
                                            FilterSettings: {
                                                locationName: "filterSettings",
                                                type: "structure",
                                                members: {
                                                    TemporalFilterSettings: {
                                                        shape: "Sbo",
                                                        locationName: "temporalFilterSettings"
                                                    }
                                                }
                                            },
                                            FixedAfd: {
                                                locationName: "fixedAfd"
                                            },
                                            FlickerAq: {
                                                locationName: "flickerAq"
                                            },
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            },
                                            GopClosedCadence: {
                                                locationName: "gopClosedCadence",
                                                type: "integer"
                                            },
                                            GopSize: {
                                                locationName: "gopSize",
                                                type: "double"
                                            },
                                            GopSizeUnits: {
                                                locationName: "gopSizeUnits"
                                            },
                                            Level: {
                                                locationName: "level"
                                            },
                                            LookAheadRateControl: {
                                                locationName: "lookAheadRateControl"
                                            },
                                            MaxBitrate: {
                                                locationName: "maxBitrate",
                                                type: "integer"
                                            },
                                            MinIInterval: {
                                                locationName: "minIInterval",
                                                type: "integer"
                                            },
                                            ParDenominator: {
                                                locationName: "parDenominator",
                                                type: "integer"
                                            },
                                            ParNumerator: {
                                                locationName: "parNumerator",
                                                type: "integer"
                                            },
                                            Profile: {
                                                locationName: "profile"
                                            },
                                            QvbrQualityLevel: {
                                                locationName: "qvbrQualityLevel",
                                                type: "integer"
                                            },
                                            RateControlMode: {
                                                locationName: "rateControlMode"
                                            },
                                            ScanType: {
                                                locationName: "scanType"
                                            },
                                            SceneChangeDetect: {
                                                locationName: "sceneChangeDetect"
                                            },
                                            Slices: {
                                                locationName: "slices",
                                                type: "integer"
                                            },
                                            Tier: {
                                                locationName: "tier"
                                            },
                                            TimecodeInsertion: {
                                                locationName: "timecodeInsertion"
                                            },
                                            TimecodeBurninSettings: {
                                                shape: "Sba",
                                                locationName: "timecodeBurninSettings"
                                            }
                                        },
                                        required: [ "FramerateNumerator", "FramerateDenominator" ]
                                    },
                                    Mpeg2Settings: {
                                        locationName: "mpeg2Settings",
                                        type: "structure",
                                        members: {
                                            AdaptiveQuantization: {
                                                locationName: "adaptiveQuantization"
                                            },
                                            AfdSignaling: {
                                                locationName: "afdSignaling"
                                            },
                                            ColorMetadata: {
                                                locationName: "colorMetadata"
                                            },
                                            ColorSpace: {
                                                locationName: "colorSpace"
                                            },
                                            DisplayAspectRatio: {
                                                locationName: "displayAspectRatio"
                                            },
                                            FilterSettings: {
                                                locationName: "filterSettings",
                                                type: "structure",
                                                members: {
                                                    TemporalFilterSettings: {
                                                        shape: "Sbo",
                                                        locationName: "temporalFilterSettings"
                                                    }
                                                }
                                            },
                                            FixedAfd: {
                                                locationName: "fixedAfd"
                                            },
                                            FramerateDenominator: {
                                                locationName: "framerateDenominator",
                                                type: "integer"
                                            },
                                            FramerateNumerator: {
                                                locationName: "framerateNumerator",
                                                type: "integer"
                                            },
                                            GopClosedCadence: {
                                                locationName: "gopClosedCadence",
                                                type: "integer"
                                            },
                                            GopNumBFrames: {
                                                locationName: "gopNumBFrames",
                                                type: "integer"
                                            },
                                            GopSize: {
                                                locationName: "gopSize",
                                                type: "double"
                                            },
                                            GopSizeUnits: {
                                                locationName: "gopSizeUnits"
                                            },
                                            ScanType: {
                                                locationName: "scanType"
                                            },
                                            SubgopLength: {
                                                locationName: "subgopLength"
                                            },
                                            TimecodeInsertion: {
                                                locationName: "timecodeInsertion"
                                            },
                                            TimecodeBurninSettings: {
                                                shape: "Sba",
                                                locationName: "timecodeBurninSettings"
                                            }
                                        },
                                        required: [ "FramerateNumerator", "FramerateDenominator" ]
                                    }
                                }
                            },
                            Height: {
                                locationName: "height",
                                type: "integer"
                            },
                            Name: {
                                locationName: "name"
                            },
                            RespondToAfd: {
                                locationName: "respondToAfd"
                            },
                            ScalingBehavior: {
                                locationName: "scalingBehavior"
                            },
                            Sharpness: {
                                locationName: "sharpness",
                                type: "integer"
                            },
                            Width: {
                                locationName: "width",
                                type: "integer"
                            }
                        },
                        required: [ "Name" ]
                    }
                },
                ThumbnailConfiguration: {
                    locationName: "thumbnailConfiguration",
                    type: "structure",
                    members: {
                        State: {
                            locationName: "state"
                        }
                    },
                    required: [ "State" ]
                }
            },
            required: [ "VideoDescriptions", "AudioDescriptions", "OutputGroups", "TimecodeConfig" ]
        },
        S6z: {
            type: "structure",
            members: {
                DestinationRefId: {
                    locationName: "destinationRefId"
                }
            }
        },
        S97: {
            type: "structure",
            members: {
                AbsentInputAudioBehavior: {
                    locationName: "absentInputAudioBehavior"
                },
                Arib: {
                    locationName: "arib"
                },
                AribCaptionsPid: {
                    locationName: "aribCaptionsPid"
                },
                AribCaptionsPidControl: {
                    locationName: "aribCaptionsPidControl"
                },
                AudioBufferModel: {
                    locationName: "audioBufferModel"
                },
                AudioFramesPerPes: {
                    locationName: "audioFramesPerPes",
                    type: "integer"
                },
                AudioPids: {
                    locationName: "audioPids"
                },
                AudioStreamType: {
                    locationName: "audioStreamType"
                },
                Bitrate: {
                    locationName: "bitrate",
                    type: "integer"
                },
                BufferModel: {
                    locationName: "bufferModel"
                },
                CcDescriptor: {
                    locationName: "ccDescriptor"
                },
                DvbNitSettings: {
                    locationName: "dvbNitSettings",
                    type: "structure",
                    members: {
                        NetworkId: {
                            locationName: "networkId",
                            type: "integer"
                        },
                        NetworkName: {
                            locationName: "networkName"
                        },
                        RepInterval: {
                            locationName: "repInterval",
                            type: "integer"
                        }
                    },
                    required: [ "NetworkName", "NetworkId" ]
                },
                DvbSdtSettings: {
                    locationName: "dvbSdtSettings",
                    type: "structure",
                    members: {
                        OutputSdt: {
                            locationName: "outputSdt"
                        },
                        RepInterval: {
                            locationName: "repInterval",
                            type: "integer"
                        },
                        ServiceName: {
                            locationName: "serviceName"
                        },
                        ServiceProviderName: {
                            locationName: "serviceProviderName"
                        }
                    }
                },
                DvbSubPids: {
                    locationName: "dvbSubPids"
                },
                DvbTdtSettings: {
                    locationName: "dvbTdtSettings",
                    type: "structure",
                    members: {
                        RepInterval: {
                            locationName: "repInterval",
                            type: "integer"
                        }
                    }
                },
                DvbTeletextPid: {
                    locationName: "dvbTeletextPid"
                },
                Ebif: {
                    locationName: "ebif"
                },
                EbpAudioInterval: {
                    locationName: "ebpAudioInterval"
                },
                EbpLookaheadMs: {
                    locationName: "ebpLookaheadMs",
                    type: "integer"
                },
                EbpPlacement: {
                    locationName: "ebpPlacement"
                },
                EcmPid: {
                    locationName: "ecmPid"
                },
                EsRateInPes: {
                    locationName: "esRateInPes"
                },
                EtvPlatformPid: {
                    locationName: "etvPlatformPid"
                },
                EtvSignalPid: {
                    locationName: "etvSignalPid"
                },
                FragmentTime: {
                    locationName: "fragmentTime",
                    type: "double"
                },
                Klv: {
                    locationName: "klv"
                },
                KlvDataPids: {
                    locationName: "klvDataPids"
                },
                NielsenId3Behavior: {
                    locationName: "nielsenId3Behavior"
                },
                NullPacketBitrate: {
                    locationName: "nullPacketBitrate",
                    type: "double"
                },
                PatInterval: {
                    locationName: "patInterval",
                    type: "integer"
                },
                PcrControl: {
                    locationName: "pcrControl"
                },
                PcrPeriod: {
                    locationName: "pcrPeriod",
                    type: "integer"
                },
                PcrPid: {
                    locationName: "pcrPid"
                },
                PmtInterval: {
                    locationName: "pmtInterval",
                    type: "integer"
                },
                PmtPid: {
                    locationName: "pmtPid"
                },
                ProgramNum: {
                    locationName: "programNum",
                    type: "integer"
                },
                RateMode: {
                    locationName: "rateMode"
                },
                Scte27Pids: {
                    locationName: "scte27Pids"
                },
                Scte35Control: {
                    locationName: "scte35Control"
                },
                Scte35Pid: {
                    locationName: "scte35Pid"
                },
                SegmentationMarkers: {
                    locationName: "segmentationMarkers"
                },
                SegmentationStyle: {
                    locationName: "segmentationStyle"
                },
                SegmentationTime: {
                    locationName: "segmentationTime",
                    type: "double"
                },
                TimedMetadataBehavior: {
                    locationName: "timedMetadataBehavior"
                },
                TimedMetadataPid: {
                    locationName: "timedMetadataPid"
                },
                TransportStreamId: {
                    locationName: "transportStreamId",
                    type: "integer"
                },
                VideoPid: {
                    locationName: "videoPid"
                },
                Scte35PrerollPullupMilliseconds: {
                    locationName: "scte35PrerollPullupMilliseconds",
                    type: "double"
                }
            }
        },
        Sba: {
            type: "structure",
            members: {
                FontSize: {
                    locationName: "fontSize"
                },
                Position: {
                    locationName: "position"
                },
                Prefix: {
                    locationName: "prefix"
                }
            },
            required: [ "Position", "FontSize" ]
        },
        Sbj: {
            type: "structure",
            members: {}
        },
        Sbk: {
            type: "structure",
            members: {}
        },
        Sbl: {
            type: "structure",
            members: {}
        },
        Sbo: {
            type: "structure",
            members: {
                PostFilterSharpening: {
                    locationName: "postFilterSharpening"
                },
                Strength: {
                    locationName: "strength"
                }
            }
        },
        Scn: {
            type: "structure",
            members: {
                MaxCll: {
                    locationName: "maxCll",
                    type: "integer"
                },
                MaxFall: {
                    locationName: "maxFall",
                    type: "integer"
                }
            }
        },
        Sdf: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    AutomaticInputFailoverSettings: {
                        locationName: "automaticInputFailoverSettings",
                        type: "structure",
                        members: {
                            ErrorClearTimeMsec: {
                                locationName: "errorClearTimeMsec",
                                type: "integer"
                            },
                            FailoverConditions: {
                                locationName: "failoverConditions",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        FailoverConditionSettings: {
                                            locationName: "failoverConditionSettings",
                                            type: "structure",
                                            members: {
                                                AudioSilenceSettings: {
                                                    locationName: "audioSilenceSettings",
                                                    type: "structure",
                                                    members: {
                                                        AudioSelectorName: {
                                                            locationName: "audioSelectorName"
                                                        },
                                                        AudioSilenceThresholdMsec: {
                                                            locationName: "audioSilenceThresholdMsec",
                                                            type: "integer"
                                                        }
                                                    },
                                                    required: [ "AudioSelectorName" ]
                                                },
                                                InputLossSettings: {
                                                    locationName: "inputLossSettings",
                                                    type: "structure",
                                                    members: {
                                                        InputLossThresholdMsec: {
                                                            locationName: "inputLossThresholdMsec",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                VideoBlackSettings: {
                                                    locationName: "videoBlackSettings",
                                                    type: "structure",
                                                    members: {
                                                        BlackDetectThreshold: {
                                                            locationName: "blackDetectThreshold",
                                                            type: "double"
                                                        },
                                                        VideoBlackThresholdMsec: {
                                                            locationName: "videoBlackThresholdMsec",
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            InputPreference: {
                                locationName: "inputPreference"
                            },
                            SecondaryInputId: {
                                locationName: "secondaryInputId"
                            }
                        },
                        required: [ "SecondaryInputId" ]
                    },
                    InputAttachmentName: {
                        locationName: "inputAttachmentName"
                    },
                    InputId: {
                        locationName: "inputId"
                    },
                    InputSettings: {
                        locationName: "inputSettings",
                        type: "structure",
                        members: {
                            AudioSelectors: {
                                locationName: "audioSelectors",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Name: {
                                            locationName: "name"
                                        },
                                        SelectorSettings: {
                                            locationName: "selectorSettings",
                                            type: "structure",
                                            members: {
                                                AudioHlsRenditionSelection: {
                                                    locationName: "audioHlsRenditionSelection",
                                                    type: "structure",
                                                    members: {
                                                        GroupId: {
                                                            locationName: "groupId"
                                                        },
                                                        Name: {
                                                            locationName: "name"
                                                        }
                                                    },
                                                    required: [ "Name", "GroupId" ]
                                                },
                                                AudioLanguageSelection: {
                                                    locationName: "audioLanguageSelection",
                                                    type: "structure",
                                                    members: {
                                                        LanguageCode: {
                                                            locationName: "languageCode"
                                                        },
                                                        LanguageSelectionPolicy: {
                                                            locationName: "languageSelectionPolicy"
                                                        }
                                                    },
                                                    required: [ "LanguageCode" ]
                                                },
                                                AudioPidSelection: {
                                                    locationName: "audioPidSelection",
                                                    type: "structure",
                                                    members: {
                                                        Pid: {
                                                            locationName: "pid",
                                                            type: "integer"
                                                        }
                                                    },
                                                    required: [ "Pid" ]
                                                },
                                                AudioTrackSelection: {
                                                    locationName: "audioTrackSelection",
                                                    type: "structure",
                                                    members: {
                                                        Tracks: {
                                                            locationName: "tracks",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    Track: {
                                                                        locationName: "track",
                                                                        type: "integer"
                                                                    }
                                                                },
                                                                required: [ "Track" ]
                                                            }
                                                        },
                                                        DolbyEDecode: {
                                                            locationName: "dolbyEDecode",
                                                            type: "structure",
                                                            members: {
                                                                ProgramSelection: {
                                                                    locationName: "programSelection"
                                                                }
                                                            },
                                                            required: [ "ProgramSelection" ]
                                                        }
                                                    },
                                                    required: [ "Tracks" ]
                                                }
                                            }
                                        }
                                    },
                                    required: [ "Name" ]
                                }
                            },
                            CaptionSelectors: {
                                locationName: "captionSelectors",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        LanguageCode: {
                                            locationName: "languageCode"
                                        },
                                        Name: {
                                            locationName: "name"
                                        },
                                        SelectorSettings: {
                                            locationName: "selectorSettings",
                                            type: "structure",
                                            members: {
                                                AncillarySourceSettings: {
                                                    locationName: "ancillarySourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        SourceAncillaryChannelNumber: {
                                                            locationName: "sourceAncillaryChannelNumber",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                AribSourceSettings: {
                                                    locationName: "aribSourceSettings",
                                                    type: "structure",
                                                    members: {}
                                                },
                                                DvbSubSourceSettings: {
                                                    locationName: "dvbSubSourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        OcrLanguage: {
                                                            locationName: "ocrLanguage"
                                                        },
                                                        Pid: {
                                                            locationName: "pid",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                EmbeddedSourceSettings: {
                                                    locationName: "embeddedSourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        Convert608To708: {
                                                            locationName: "convert608To708"
                                                        },
                                                        Scte20Detection: {
                                                            locationName: "scte20Detection"
                                                        },
                                                        Source608ChannelNumber: {
                                                            locationName: "source608ChannelNumber",
                                                            type: "integer"
                                                        },
                                                        Source608TrackNumber: {
                                                            locationName: "source608TrackNumber",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                Scte20SourceSettings: {
                                                    locationName: "scte20SourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        Convert608To708: {
                                                            locationName: "convert608To708"
                                                        },
                                                        Source608ChannelNumber: {
                                                            locationName: "source608ChannelNumber",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                Scte27SourceSettings: {
                                                    locationName: "scte27SourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        OcrLanguage: {
                                                            locationName: "ocrLanguage"
                                                        },
                                                        Pid: {
                                                            locationName: "pid",
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                TeletextSourceSettings: {
                                                    locationName: "teletextSourceSettings",
                                                    type: "structure",
                                                    members: {
                                                        OutputRectangle: {
                                                            locationName: "outputRectangle",
                                                            type: "structure",
                                                            members: {
                                                                Height: {
                                                                    locationName: "height",
                                                                    type: "double"
                                                                },
                                                                LeftOffset: {
                                                                    locationName: "leftOffset",
                                                                    type: "double"
                                                                },
                                                                TopOffset: {
                                                                    locationName: "topOffset",
                                                                    type: "double"
                                                                },
                                                                Width: {
                                                                    locationName: "width",
                                                                    type: "double"
                                                                }
                                                            },
                                                            required: [ "TopOffset", "Height", "Width", "LeftOffset" ]
                                                        },
                                                        PageNumber: {
                                                            locationName: "pageNumber"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    required: [ "Name" ]
                                }
                            },
                            DeblockFilter: {
                                locationName: "deblockFilter"
                            },
                            DenoiseFilter: {
                                locationName: "denoiseFilter"
                            },
                            FilterStrength: {
                                locationName: "filterStrength",
                                type: "integer"
                            },
                            InputFilter: {
                                locationName: "inputFilter"
                            },
                            NetworkInputSettings: {
                                locationName: "networkInputSettings",
                                type: "structure",
                                members: {
                                    HlsInputSettings: {
                                        locationName: "hlsInputSettings",
                                        type: "structure",
                                        members: {
                                            Bandwidth: {
                                                locationName: "bandwidth",
                                                type: "integer"
                                            },
                                            BufferSegments: {
                                                locationName: "bufferSegments",
                                                type: "integer"
                                            },
                                            Retries: {
                                                locationName: "retries",
                                                type: "integer"
                                            },
                                            RetryInterval: {
                                                locationName: "retryInterval",
                                                type: "integer"
                                            },
                                            Scte35Source: {
                                                locationName: "scte35Source"
                                            }
                                        }
                                    },
                                    ServerValidation: {
                                        locationName: "serverValidation"
                                    }
                                }
                            },
                            Scte35Pid: {
                                locationName: "scte35Pid",
                                type: "integer"
                            },
                            Smpte2038DataPreference: {
                                locationName: "smpte2038DataPreference"
                            },
                            SourceEndBehavior: {
                                locationName: "sourceEndBehavior"
                            },
                            VideoSelector: {
                                locationName: "videoSelector",
                                type: "structure",
                                members: {
                                    ColorSpace: {
                                        locationName: "colorSpace"
                                    },
                                    ColorSpaceSettings: {
                                        locationName: "colorSpaceSettings",
                                        type: "structure",
                                        members: {
                                            Hdr10Settings: {
                                                shape: "Scn",
                                                locationName: "hdr10Settings"
                                            }
                                        }
                                    },
                                    ColorSpaceUsage: {
                                        locationName: "colorSpaceUsage"
                                    },
                                    SelectorSettings: {
                                        locationName: "selectorSettings",
                                        type: "structure",
                                        members: {
                                            VideoSelectorPid: {
                                                locationName: "videoSelectorPid",
                                                type: "structure",
                                                members: {
                                                    Pid: {
                                                        locationName: "pid",
                                                        type: "integer"
                                                    }
                                                }
                                            },
                                            VideoSelectorProgramId: {
                                                locationName: "videoSelectorProgramId",
                                                type: "structure",
                                                members: {
                                                    ProgramId: {
                                                        locationName: "programId",
                                                        type: "integer"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Sf4: {
            type: "structure",
            members: {
                Codec: {
                    locationName: "codec"
                },
                MaximumBitrate: {
                    locationName: "maximumBitrate"
                },
                Resolution: {
                    locationName: "resolution"
                }
            }
        },
        Sfc: {
            type: "map",
            key: {},
            value: {}
        },
        Sff: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                CdiInputSpecification: {
                    shape: "S27",
                    locationName: "cdiInputSpecification"
                },
                ChannelClass: {
                    locationName: "channelClass"
                },
                Destinations: {
                    shape: "S2a",
                    locationName: "destinations"
                },
                EgressEndpoints: {
                    shape: "Sfg",
                    locationName: "egressEndpoints"
                },
                EncoderSettings: {
                    shape: "S2i",
                    locationName: "encoderSettings"
                },
                Id: {
                    locationName: "id"
                },
                InputAttachments: {
                    shape: "Sdf",
                    locationName: "inputAttachments"
                },
                InputSpecification: {
                    shape: "Sf4",
                    locationName: "inputSpecification"
                },
                LogLevel: {
                    locationName: "logLevel"
                },
                Maintenance: {
                    shape: "Sfi",
                    locationName: "maintenance"
                },
                Name: {
                    locationName: "name"
                },
                PipelineDetails: {
                    shape: "Sfj",
                    locationName: "pipelineDetails"
                },
                PipelinesRunningCount: {
                    locationName: "pipelinesRunningCount",
                    type: "integer"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sfc",
                    locationName: "tags"
                },
                Vpc: {
                    shape: "Sfm",
                    locationName: "vpc"
                }
            }
        },
        Sfg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    SourceIp: {
                        locationName: "sourceIp"
                    }
                }
            }
        },
        Sfi: {
            type: "structure",
            members: {
                MaintenanceDay: {
                    locationName: "maintenanceDay"
                },
                MaintenanceDeadline: {
                    locationName: "maintenanceDeadline"
                },
                MaintenanceScheduledDate: {
                    locationName: "maintenanceScheduledDate"
                },
                MaintenanceStartTime: {
                    locationName: "maintenanceStartTime"
                }
            }
        },
        Sfj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ActiveInputAttachmentName: {
                        locationName: "activeInputAttachmentName"
                    },
                    ActiveInputSwitchActionName: {
                        locationName: "activeInputSwitchActionName"
                    },
                    ActiveMotionGraphicsActionName: {
                        locationName: "activeMotionGraphicsActionName"
                    },
                    ActiveMotionGraphicsUri: {
                        locationName: "activeMotionGraphicsUri"
                    },
                    PipelineId: {
                        locationName: "pipelineId"
                    }
                }
            }
        },
        Sfm: {
            type: "structure",
            members: {
                AvailabilityZones: {
                    shape: "S5",
                    locationName: "availabilityZones"
                },
                NetworkInterfaceIds: {
                    shape: "S5",
                    locationName: "networkInterfaceIds"
                },
                SecurityGroupIds: {
                    shape: "S5",
                    locationName: "securityGroupIds"
                },
                SubnetIds: {
                    shape: "S5",
                    locationName: "subnetIds"
                }
            }
        },
        Sfo: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    StreamName: {
                        locationName: "streamName"
                    }
                }
            }
        },
        Sfq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Id: {
                        locationName: "id"
                    }
                }
            }
        },
        Sfs: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        Sfu: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PasswordParam: {
                        locationName: "passwordParam"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Username: {
                        locationName: "username"
                    }
                }
            }
        },
        Sfz: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                AttachedChannels: {
                    shape: "S5",
                    locationName: "attachedChannels"
                },
                Destinations: {
                    shape: "Sg0",
                    locationName: "destinations"
                },
                Id: {
                    locationName: "id"
                },
                InputClass: {
                    locationName: "inputClass"
                },
                InputDevices: {
                    shape: "Sfq",
                    locationName: "inputDevices"
                },
                InputPartnerIds: {
                    shape: "S5",
                    locationName: "inputPartnerIds"
                },
                InputSourceType: {
                    locationName: "inputSourceType"
                },
                MediaConnectFlows: {
                    shape: "Sg5",
                    locationName: "mediaConnectFlows"
                },
                Name: {
                    locationName: "name"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SecurityGroups: {
                    shape: "S5",
                    locationName: "securityGroups"
                },
                Sources: {
                    shape: "Sg7",
                    locationName: "sources"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sfc",
                    locationName: "tags"
                },
                Type: {
                    locationName: "type"
                }
            }
        },
        Sg0: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Ip: {
                        locationName: "ip"
                    },
                    Port: {
                        locationName: "port"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Vpc: {
                        locationName: "vpc",
                        type: "structure",
                        members: {
                            AvailabilityZone: {
                                locationName: "availabilityZone"
                            },
                            NetworkInterfaceId: {
                                locationName: "networkInterfaceId"
                            }
                        }
                    }
                }
            }
        },
        Sg5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    FlowArn: {
                        locationName: "flowArn"
                    }
                }
            }
        },
        Sg7: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PasswordParam: {
                        locationName: "passwordParam"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Username: {
                        locationName: "username"
                    }
                }
            }
        },
        Sgb: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Cidr: {
                        locationName: "cidr"
                    }
                }
            }
        },
        Sge: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Id: {
                    locationName: "id"
                },
                Inputs: {
                    shape: "S5",
                    locationName: "inputs"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sfc",
                    locationName: "tags"
                },
                WhitelistRules: {
                    shape: "Sgg",
                    locationName: "whitelistRules"
                }
            }
        },
        Sgg: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Cidr: {
                        locationName: "cidr"
                    }
                }
            }
        },
        Sgj: {
            type: "structure",
            members: {
                MaximumVideoBufferDelayMilliseconds: {
                    locationName: "maximumVideoBufferDelayMilliseconds",
                    type: "integer"
                },
                TransportStreamBitrate: {
                    locationName: "transportStreamBitrate",
                    type: "integer"
                },
                TransportStreamId: {
                    locationName: "transportStreamId",
                    type: "integer"
                },
                TransportStreamReservedBitrate: {
                    locationName: "transportStreamReservedBitrate",
                    type: "integer"
                }
            },
            required: [ "TransportStreamBitrate", "TransportStreamId" ]
        },
        Sgo: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                AvailabilityZones: {
                    shape: "S5",
                    locationName: "availabilityZones"
                },
                Destinations: {
                    shape: "Sgp",
                    locationName: "destinations"
                },
                Id: {
                    locationName: "id"
                },
                MultiplexSettings: {
                    shape: "Sgj",
                    locationName: "multiplexSettings"
                },
                Name: {
                    locationName: "name"
                },
                PipelinesRunningCount: {
                    locationName: "pipelinesRunningCount",
                    type: "integer"
                },
                ProgramCount: {
                    locationName: "programCount",
                    type: "integer"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sfc",
                    locationName: "tags"
                }
            }
        },
        Sgp: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MediaConnectSettings: {
                        locationName: "mediaConnectSettings",
                        type: "structure",
                        members: {
                            EntitlementArn: {
                                locationName: "entitlementArn"
                            }
                        }
                    }
                }
            }
        },
        Sgu: {
            type: "structure",
            members: {
                PreferredChannelPipeline: {
                    locationName: "preferredChannelPipeline"
                },
                ProgramNumber: {
                    locationName: "programNumber",
                    type: "integer"
                },
                ServiceDescriptor: {
                    locationName: "serviceDescriptor",
                    type: "structure",
                    members: {
                        ProviderName: {
                            locationName: "providerName"
                        },
                        ServiceName: {
                            locationName: "serviceName"
                        }
                    },
                    required: [ "ProviderName", "ServiceName" ]
                },
                VideoSettings: {
                    locationName: "videoSettings",
                    type: "structure",
                    members: {
                        ConstantBitrate: {
                            locationName: "constantBitrate",
                            type: "integer"
                        },
                        StatmuxSettings: {
                            locationName: "statmuxSettings",
                            type: "structure",
                            members: {
                                MaximumBitrate: {
                                    locationName: "maximumBitrate",
                                    type: "integer"
                                },
                                MinimumBitrate: {
                                    locationName: "minimumBitrate",
                                    type: "integer"
                                },
                                Priority: {
                                    locationName: "priority",
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            },
            required: [ "ProgramNumber" ]
        },
        Sh2: {
            type: "structure",
            members: {
                ChannelId: {
                    locationName: "channelId"
                },
                MultiplexProgramSettings: {
                    shape: "Sgu",
                    locationName: "multiplexProgramSettings"
                },
                PacketIdentifiersMap: {
                    shape: "Sh3",
                    locationName: "packetIdentifiersMap"
                },
                PipelineDetails: {
                    shape: "Sh5",
                    locationName: "pipelineDetails"
                },
                ProgramName: {
                    locationName: "programName"
                }
            }
        },
        Sh3: {
            type: "structure",
            members: {
                AudioPids: {
                    shape: "Sh4",
                    locationName: "audioPids"
                },
                DvbSubPids: {
                    shape: "Sh4",
                    locationName: "dvbSubPids"
                },
                DvbTeletextPid: {
                    locationName: "dvbTeletextPid",
                    type: "integer"
                },
                EtvPlatformPid: {
                    locationName: "etvPlatformPid",
                    type: "integer"
                },
                EtvSignalPid: {
                    locationName: "etvSignalPid",
                    type: "integer"
                },
                KlvDataPids: {
                    shape: "Sh4",
                    locationName: "klvDataPids"
                },
                PcrPid: {
                    locationName: "pcrPid",
                    type: "integer"
                },
                PmtPid: {
                    locationName: "pmtPid",
                    type: "integer"
                },
                PrivateMetadataPid: {
                    locationName: "privateMetadataPid",
                    type: "integer"
                },
                Scte27Pids: {
                    shape: "Sh4",
                    locationName: "scte27Pids"
                },
                Scte35Pid: {
                    locationName: "scte35Pid",
                    type: "integer"
                },
                TimedMetadataPid: {
                    locationName: "timedMetadataPid",
                    type: "integer"
                },
                VideoPid: {
                    locationName: "videoPid",
                    type: "integer"
                }
            }
        },
        Sh4: {
            type: "list",
            member: {
                type: "integer"
            }
        },
        Sh5: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ActiveChannelPipeline: {
                        locationName: "activeChannelPipeline"
                    },
                    PipelineId: {
                        locationName: "pipelineId"
                    }
                }
            }
        },
        Sho: {
            type: "structure",
            members: {
                AutomaticRenewal: {
                    locationName: "automaticRenewal"
                },
                RenewalCount: {
                    locationName: "renewalCount",
                    type: "integer"
                }
            }
        },
        Shq: {
            type: "structure",
            members: {
                ChannelClass: {
                    locationName: "channelClass"
                },
                Codec: {
                    locationName: "codec"
                },
                MaximumBitrate: {
                    locationName: "maximumBitrate"
                },
                MaximumFramerate: {
                    locationName: "maximumFramerate"
                },
                Resolution: {
                    locationName: "resolution"
                },
                ResourceType: {
                    locationName: "resourceType"
                },
                SpecialFeature: {
                    locationName: "specialFeature"
                },
                VideoQuality: {
                    locationName: "videoQuality"
                }
            }
        },
        Si4: {
            type: "structure",
            members: {
                KmsKeyId: {
                    locationName: "kmsKeyId"
                }
            }
        },
        Sie: {
            type: "structure",
            members: {
                ActiveInput: {
                    locationName: "activeInput"
                },
                ConfiguredInput: {
                    locationName: "configuredInput"
                },
                DeviceState: {
                    locationName: "deviceState"
                },
                Framerate: {
                    locationName: "framerate",
                    type: "double"
                },
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                ScanType: {
                    locationName: "scanType"
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                },
                LatencyMs: {
                    locationName: "latencyMs",
                    type: "integer"
                }
            }
        },
        Sij: {
            type: "structure",
            members: {
                DnsAddresses: {
                    shape: "S5",
                    locationName: "dnsAddresses"
                },
                Gateway: {
                    locationName: "gateway"
                },
                IpAddress: {
                    locationName: "ipAddress"
                },
                IpScheme: {
                    locationName: "ipScheme"
                },
                SubnetMask: {
                    locationName: "subnetMask"
                }
            }
        },
        Sim: {
            type: "structure",
            members: {
                ActiveInput: {
                    locationName: "activeInput"
                },
                ConfiguredInput: {
                    locationName: "configuredInput"
                },
                DeviceState: {
                    locationName: "deviceState"
                },
                Framerate: {
                    locationName: "framerate",
                    type: "double"
                },
                Height: {
                    locationName: "height",
                    type: "integer"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                ScanType: {
                    locationName: "scanType"
                },
                Width: {
                    locationName: "width",
                    type: "integer"
                },
                LatencyMs: {
                    locationName: "latencyMs",
                    type: "integer"
                },
                Codec: {
                    locationName: "codec"
                },
                MediaconnectSettings: {
                    locationName: "mediaconnectSettings",
                    type: "structure",
                    members: {
                        FlowArn: {
                            locationName: "flowArn"
                        },
                        RoleArn: {
                            locationName: "roleArn"
                        },
                        SecretArn: {
                            locationName: "secretArn"
                        },
                        SourceName: {
                            locationName: "sourceName"
                        }
                    }
                }
            }
        },
        Skh: {
            type: "structure",
            members: {
                Arn: {
                    locationName: "arn"
                },
                Count: {
                    locationName: "count",
                    type: "integer"
                },
                CurrencyCode: {
                    locationName: "currencyCode"
                },
                Duration: {
                    locationName: "duration",
                    type: "integer"
                },
                DurationUnits: {
                    locationName: "durationUnits"
                },
                End: {
                    locationName: "end"
                },
                FixedPrice: {
                    locationName: "fixedPrice",
                    type: "double"
                },
                Name: {
                    locationName: "name"
                },
                OfferingDescription: {
                    locationName: "offeringDescription"
                },
                OfferingId: {
                    locationName: "offeringId"
                },
                OfferingType: {
                    locationName: "offeringType"
                },
                Region: {
                    locationName: "region"
                },
                RenewalSettings: {
                    shape: "Sho",
                    locationName: "renewalSettings"
                },
                ReservationId: {
                    locationName: "reservationId"
                },
                ResourceSpecification: {
                    shape: "Shq",
                    locationName: "resourceSpecification"
                },
                Start: {
                    locationName: "start"
                },
                State: {
                    locationName: "state"
                },
                Tags: {
                    shape: "Sfc",
                    locationName: "tags"
                },
                UsagePrice: {
                    locationName: "usagePrice",
                    type: "double"
                }
            }
        },
        Slj: {
            type: "structure",
            members: {
                ConfiguredInput: {
                    locationName: "configuredInput"
                },
                MaxBitrate: {
                    locationName: "maxBitrate",
                    type: "integer"
                },
                LatencyMs: {
                    locationName: "latencyMs",
                    type: "integer"
                },
                Codec: {
                    locationName: "codec"
                },
                MediaconnectSettings: {
                    locationName: "mediaconnectSettings",
                    type: "structure",
                    members: {
                        FlowArn: {
                            locationName: "flowArn"
                        },
                        RoleArn: {
                            locationName: "roleArn"
                        },
                        SecretArn: {
                            locationName: "secretArn"
                        },
                        SourceName: {
                            locationName: "sourceName"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        DescribeSchedule: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ScheduleActions"
        },
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Channels"
        },
        ListInputSecurityGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InputSecurityGroups"
        },
        ListInputs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Inputs"
        },
        ListOfferings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Offerings"
        },
        ListReservations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Reservations"
        },
        ListMultiplexPrograms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MultiplexPrograms"
        },
        ListMultiplexes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Multiplexes"
        },
        ListInputDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InputDevices"
        },
        ListInputDeviceTransfers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InputDeviceTransfers"
        }
    },
    waiters: {
        ChannelCreated: {
            description: "Wait until a channel has been created",
            operation: "DescribeChannel",
            delay: 3,
            maxAttempts: 5,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "CREATING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "failure",
                matcher: "path",
                argument: "State",
                expected: "CREATE_FAILED"
            } ]
        },
        ChannelRunning: {
            description: "Wait until a channel is running",
            operation: "DescribeChannel",
            delay: 5,
            maxAttempts: 120,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "RUNNING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STARTING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ChannelStopped: {
            description: "Wait until a channel has is stopped",
            operation: "DescribeChannel",
            delay: 5,
            maxAttempts: 60,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STOPPING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        ChannelDeleted: {
            description: "Wait until a channel has been deleted",
            operation: "DescribeChannel",
            delay: 5,
            maxAttempts: 84,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DELETED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        InputAttached: {
            description: "Wait until an input has been attached",
            operation: "DescribeInput",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "ATTACHED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DETACHED"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        InputDetached: {
            description: "Wait until an input has been detached",
            operation: "DescribeInput",
            delay: 5,
            maxAttempts: 84,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DETACHED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "CREATING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "ATTACHED"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        InputDeleted: {
            description: "Wait until an input has been deleted",
            operation: "DescribeInput",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DELETED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        MultiplexCreated: {
            description: "Wait until a multiplex has been created",
            operation: "DescribeMultiplex",
            delay: 3,
            maxAttempts: 5,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "CREATING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            }, {
                state: "failure",
                matcher: "path",
                argument: "State",
                expected: "CREATE_FAILED"
            } ]
        },
        MultiplexRunning: {
            description: "Wait until a multiplex is running",
            operation: "DescribeMultiplex",
            delay: 5,
            maxAttempts: 120,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "RUNNING"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STARTING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        MultiplexStopped: {
            description: "Wait until a multiplex has is stopped",
            operation: "DescribeMultiplex",
            delay: 5,
            maxAttempts: 28,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "IDLE"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "STOPPING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        },
        MultiplexDeleted: {
            description: "Wait until a multiplex has been deleted",
            operation: "DescribeMultiplex",
            delay: 5,
            maxAttempts: 20,
            acceptors: [ {
                state: "success",
                matcher: "path",
                argument: "State",
                expected: "DELETED"
            }, {
                state: "retry",
                matcher: "path",
                argument: "State",
                expected: "DELETING"
            }, {
                state: "retry",
                matcher: "status",
                expected: 500
            } ]
        }
    }
};

AWS.apiLoader.services["mediapackage"] = {};

AWS.MediaPackage = AWS.Service.defineService("mediapackage", [ "2017-10-12" ]);

AWS.apiLoader.services["mediapackage"]["2017-10-12"] = {
    metadata: {
        apiVersion: "2017-10-12",
        endpointPrefix: "mediapackage",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "MediaPackage",
        serviceFullName: "AWS Elemental MediaPackage",
        serviceId: "MediaPackage",
        signatureVersion: "v4",
        signingName: "mediapackage",
        uid: "mediapackage-2017-10-12"
    },
    operations: {
        ConfigureLogs: {
            http: {
                method: "PUT",
                requestUri: "/channels/{id}/configure_logs",
                responseCode: 200
            },
            input: {
                members: {
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                type: "structure"
            }
        },
        CreateChannel: {
            http: {
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Id: {
                        locationName: "id"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                type: "structure"
            }
        },
        CreateHarvestJob: {
            http: {
                requestUri: "/harvest_jobs",
                responseCode: 200
            },
            input: {
                members: {
                    EndTime: {
                        locationName: "endTime"
                    },
                    Id: {
                        locationName: "id"
                    },
                    OriginEndpointId: {
                        locationName: "originEndpointId"
                    },
                    S3Destination: {
                        locationName: "s3Destination",
                        shape: "Se"
                    },
                    StartTime: {
                        locationName: "startTime"
                    }
                },
                required: [ "S3Destination", "EndTime", "OriginEndpointId", "StartTime", "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EndTime: {
                        locationName: "endTime"
                    },
                    Id: {
                        locationName: "id"
                    },
                    OriginEndpointId: {
                        locationName: "originEndpointId"
                    },
                    S3Destination: {
                        locationName: "s3Destination",
                        shape: "Se"
                    },
                    StartTime: {
                        locationName: "startTime"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                type: "structure"
            }
        },
        CreateOriginEndpoint: {
            http: {
                requestUri: "/origin_endpoints",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "Si"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sj"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S12"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S1a"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1d"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sr"
                    }
                },
                required: [ "ChannelId", "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "Si"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "S1h"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S12"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S1a"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1d"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sr"
                    }
                },
                type: "structure"
            }
        },
        DeleteChannel: {
            http: {
                method: "DELETE",
                requestUri: "/channels/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DeleteOriginEndpoint: {
            http: {
                method: "DELETE",
                requestUri: "/origin_endpoints/{id}",
                responseCode: 202
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {},
                type: "structure"
            }
        },
        DescribeChannel: {
            http: {
                method: "GET",
                requestUri: "/channels/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                type: "structure"
            }
        },
        DescribeHarvestJob: {
            http: {
                method: "GET",
                requestUri: "/harvest_jobs/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    EndTime: {
                        locationName: "endTime"
                    },
                    Id: {
                        locationName: "id"
                    },
                    OriginEndpointId: {
                        locationName: "originEndpointId"
                    },
                    S3Destination: {
                        locationName: "s3Destination",
                        shape: "Se"
                    },
                    StartTime: {
                        locationName: "startTime"
                    },
                    Status: {
                        locationName: "status"
                    }
                },
                type: "structure"
            }
        },
        DescribeOriginEndpoint: {
            http: {
                method: "GET",
                requestUri: "/origin_endpoints/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "Si"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "S1h"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S12"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S1a"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1d"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sr"
                    }
                },
                type: "structure"
            }
        },
        ListChannels: {
            http: {
                method: "GET",
                requestUri: "/channels",
                responseCode: 200
            },
            input: {
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    Channels: {
                        locationName: "channels",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                EgressAccessLogs: {
                                    locationName: "egressAccessLogs",
                                    shape: "S2"
                                },
                                HlsIngest: {
                                    locationName: "hlsIngest",
                                    shape: "S6"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                IngressAccessLogs: {
                                    locationName: "ingressAccessLogs",
                                    shape: "S4"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "Sa"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            }
        },
        ListHarvestJobs: {
            http: {
                method: "GET",
                requestUri: "/harvest_jobs",
                responseCode: 200
            },
            input: {
                members: {
                    IncludeChannelId: {
                        location: "querystring",
                        locationName: "includeChannelId"
                    },
                    IncludeStatus: {
                        location: "querystring",
                        locationName: "includeStatus"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    HarvestJobs: {
                        locationName: "harvestJobs",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                ChannelId: {
                                    locationName: "channelId"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                EndTime: {
                                    locationName: "endTime"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                OriginEndpointId: {
                                    locationName: "originEndpointId"
                                },
                                S3Destination: {
                                    locationName: "s3Destination",
                                    shape: "Se"
                                },
                                StartTime: {
                                    locationName: "startTime"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            }
        },
        ListOriginEndpoints: {
            http: {
                method: "GET",
                requestUri: "/origin_endpoints",
                responseCode: 200
            },
            input: {
                members: {
                    ChannelId: {
                        location: "querystring",
                        locationName: "channelId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                type: "structure"
            },
            output: {
                members: {
                    NextToken: {
                        locationName: "nextToken"
                    },
                    OriginEndpoints: {
                        locationName: "originEndpoints",
                        member: {
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                Authorization: {
                                    locationName: "authorization",
                                    shape: "Si"
                                },
                                ChannelId: {
                                    locationName: "channelId"
                                },
                                CmafPackage: {
                                    locationName: "cmafPackage",
                                    shape: "S1h"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                DashPackage: {
                                    locationName: "dashPackage",
                                    shape: "S12"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                HlsPackage: {
                                    locationName: "hlsPackage",
                                    shape: "S1a"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                ManifestName: {
                                    locationName: "manifestName"
                                },
                                MssPackage: {
                                    locationName: "mssPackage",
                                    shape: "S1d"
                                },
                                Origination: {
                                    locationName: "origination"
                                },
                                StartoverWindowSeconds: {
                                    locationName: "startoverWindowSeconds",
                                    type: "integer"
                                },
                                Tags: {
                                    locationName: "tags",
                                    shape: "Sa"
                                },
                                TimeDelaySeconds: {
                                    locationName: "timeDelaySeconds",
                                    type: "integer"
                                },
                                Url: {
                                    locationName: "url"
                                },
                                Whitelist: {
                                    locationName: "whitelist",
                                    shape: "Sr"
                                }
                            },
                            type: "structure"
                        },
                        type: "list"
                    }
                },
                type: "structure"
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ],
                type: "structure"
            },
            output: {
                members: {
                    Tags: {
                        locationName: "tags",
                        shape: "S29"
                    }
                },
                type: "structure"
            }
        },
        RotateChannelCredentials: {
            deprecated: true,
            deprecatedMessage: "This API is deprecated. Please use RotateIngestEndpointCredentials instead",
            http: {
                method: "PUT",
                requestUri: "/channels/{id}/credentials",
                responseCode: 200
            },
            input: {
                deprecated: true,
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                deprecated: true,
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                type: "structure"
            }
        },
        RotateIngestEndpointCredentials: {
            http: {
                method: "PUT",
                requestUri: "/channels/{id}/ingest_endpoints/{ingest_endpoint_id}/credentials",
                responseCode: 200
            },
            input: {
                members: {
                    Id: {
                        location: "uri",
                        locationName: "id"
                    },
                    IngestEndpointId: {
                        location: "uri",
                        locationName: "ingest_endpoint_id"
                    }
                },
                required: [ "IngestEndpointId", "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                type: "structure"
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "S29"
                    }
                },
                required: [ "ResourceArn", "Tags" ],
                type: "structure"
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        shape: "Sr"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ],
                type: "structure"
            }
        },
        UpdateChannel: {
            http: {
                method: "PUT",
                requestUri: "/channels/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Description: {
                        locationName: "description"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EgressAccessLogs: {
                        locationName: "egressAccessLogs",
                        shape: "S2"
                    },
                    HlsIngest: {
                        locationName: "hlsIngest",
                        shape: "S6"
                    },
                    Id: {
                        locationName: "id"
                    },
                    IngressAccessLogs: {
                        locationName: "ingressAccessLogs",
                        shape: "S4"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    }
                },
                type: "structure"
            }
        },
        UpdateOriginEndpoint: {
            http: {
                method: "PUT",
                requestUri: "/origin_endpoints/{id}",
                responseCode: 200
            },
            input: {
                members: {
                    Authorization: {
                        locationName: "authorization",
                        shape: "Si"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "Sj"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S12"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S1a"
                    },
                    Id: {
                        location: "uri",
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1d"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sr"
                    }
                },
                required: [ "Id" ],
                type: "structure"
            },
            output: {
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Authorization: {
                        locationName: "authorization",
                        shape: "Si"
                    },
                    ChannelId: {
                        locationName: "channelId"
                    },
                    CmafPackage: {
                        locationName: "cmafPackage",
                        shape: "S1h"
                    },
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    DashPackage: {
                        locationName: "dashPackage",
                        shape: "S12"
                    },
                    Description: {
                        locationName: "description"
                    },
                    HlsPackage: {
                        locationName: "hlsPackage",
                        shape: "S1a"
                    },
                    Id: {
                        locationName: "id"
                    },
                    ManifestName: {
                        locationName: "manifestName"
                    },
                    MssPackage: {
                        locationName: "mssPackage",
                        shape: "S1d"
                    },
                    Origination: {
                        locationName: "origination"
                    },
                    StartoverWindowSeconds: {
                        locationName: "startoverWindowSeconds",
                        type: "integer"
                    },
                    Tags: {
                        locationName: "tags",
                        shape: "Sa"
                    },
                    TimeDelaySeconds: {
                        locationName: "timeDelaySeconds",
                        type: "integer"
                    },
                    Url: {
                        locationName: "url"
                    },
                    Whitelist: {
                        locationName: "whitelist",
                        shape: "Sr"
                    }
                },
                type: "structure"
            }
        }
    },
    shapes: {
        S2: {
            members: {
                LogGroupName: {
                    locationName: "logGroupName"
                }
            },
            type: "structure"
        },
        S4: {
            members: {
                LogGroupName: {
                    locationName: "logGroupName"
                }
            },
            type: "structure"
        },
        S6: {
            members: {
                IngestEndpoints: {
                    locationName: "ingestEndpoints",
                    member: {
                        members: {
                            Id: {
                                locationName: "id"
                            },
                            Password: {
                                locationName: "password",
                                shape: "S9"
                            },
                            Url: {
                                locationName: "url"
                            },
                            Username: {
                                locationName: "username",
                                shape: "S9"
                            }
                        },
                        type: "structure"
                    },
                    type: "list"
                }
            },
            type: "structure"
        },
        S9: {
            sensitive: true,
            type: "string"
        },
        Sa: {
            key: {},
            type: "map",
            value: {}
        },
        Se: {
            members: {
                BucketName: {
                    locationName: "bucketName"
                },
                ManifestKey: {
                    locationName: "manifestKey"
                },
                RoleArn: {
                    locationName: "roleArn"
                }
            },
            required: [ "ManifestKey", "BucketName", "RoleArn" ],
            type: "structure"
        },
        Si: {
            members: {
                CdnIdentifierSecret: {
                    locationName: "cdnIdentifierSecret"
                },
                SecretsRoleArn: {
                    locationName: "secretsRoleArn"
                }
            },
            required: [ "SecretsRoleArn", "CdnIdentifierSecret" ],
            type: "structure"
        },
        Sj: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    shape: "Sk"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    member: {
                        members: {
                            AdMarkers: {
                                locationName: "adMarkers"
                            },
                            AdTriggers: {
                                locationName: "adTriggers",
                                shape: "Sv"
                            },
                            AdsOnDeliveryRestrictions: {
                                locationName: "adsOnDeliveryRestrictions"
                            },
                            Id: {
                                locationName: "id"
                            },
                            IncludeIframeOnlyStream: {
                                locationName: "includeIframeOnlyStream",
                                type: "boolean"
                            },
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            PlaylistType: {
                                locationName: "playlistType"
                            },
                            PlaylistWindowSeconds: {
                                locationName: "playlistWindowSeconds",
                                type: "integer"
                            },
                            ProgramDateTimeIntervalSeconds: {
                                locationName: "programDateTimeIntervalSeconds",
                                type: "integer"
                            }
                        },
                        required: [ "Id" ],
                        type: "structure"
                    },
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentPrefix: {
                    locationName: "segmentPrefix"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "S10"
                }
            },
            type: "structure"
        },
        Sk: {
            members: {
                ConstantInitializationVector: {
                    locationName: "constantInitializationVector"
                },
                EncryptionMethod: {
                    locationName: "encryptionMethod"
                },
                KeyRotationIntervalSeconds: {
                    locationName: "keyRotationIntervalSeconds",
                    type: "integer"
                },
                SpekeKeyProvider: {
                    locationName: "spekeKeyProvider",
                    shape: "Sn"
                }
            },
            required: [ "SpekeKeyProvider" ],
            type: "structure"
        },
        Sn: {
            members: {
                CertificateArn: {
                    locationName: "certificateArn"
                },
                EncryptionContractConfiguration: {
                    locationName: "encryptionContractConfiguration",
                    members: {
                        PresetSpeke20Audio: {
                            locationName: "presetSpeke20Audio"
                        },
                        PresetSpeke20Video: {
                            locationName: "presetSpeke20Video"
                        }
                    },
                    required: [ "PresetSpeke20Audio", "PresetSpeke20Video" ],
                    type: "structure"
                },
                ResourceId: {
                    locationName: "resourceId"
                },
                RoleArn: {
                    locationName: "roleArn"
                },
                SystemIds: {
                    locationName: "systemIds",
                    shape: "Sr"
                },
                Url: {
                    locationName: "url"
                }
            },
            required: [ "ResourceId", "SystemIds", "Url", "RoleArn" ],
            type: "structure"
        },
        Sr: {
            member: {},
            type: "list"
        },
        Sv: {
            member: {},
            type: "list"
        },
        S10: {
            members: {
                MaxVideoBitsPerSecond: {
                    locationName: "maxVideoBitsPerSecond",
                    type: "integer"
                },
                MinVideoBitsPerSecond: {
                    locationName: "minVideoBitsPerSecond",
                    type: "integer"
                },
                StreamOrder: {
                    locationName: "streamOrder"
                }
            },
            type: "structure"
        },
        S12: {
            members: {
                AdTriggers: {
                    locationName: "adTriggers",
                    shape: "Sv"
                },
                AdsOnDeliveryRestrictions: {
                    locationName: "adsOnDeliveryRestrictions"
                },
                Encryption: {
                    locationName: "encryption",
                    members: {
                        KeyRotationIntervalSeconds: {
                            locationName: "keyRotationIntervalSeconds",
                            type: "integer"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Sn"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                IncludeIframeOnlyStream: {
                    locationName: "includeIframeOnlyStream",
                    type: "boolean"
                },
                ManifestLayout: {
                    locationName: "manifestLayout"
                },
                ManifestWindowSeconds: {
                    locationName: "manifestWindowSeconds",
                    type: "integer"
                },
                MinBufferTimeSeconds: {
                    locationName: "minBufferTimeSeconds",
                    type: "integer"
                },
                MinUpdatePeriodSeconds: {
                    locationName: "minUpdatePeriodSeconds",
                    type: "integer"
                },
                PeriodTriggers: {
                    locationName: "periodTriggers",
                    member: {},
                    type: "list"
                },
                Profile: {
                    locationName: "profile"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentTemplateFormat: {
                    locationName: "segmentTemplateFormat"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "S10"
                },
                SuggestedPresentationDelaySeconds: {
                    locationName: "suggestedPresentationDelaySeconds",
                    type: "integer"
                },
                UtcTiming: {
                    locationName: "utcTiming"
                },
                UtcTimingUri: {
                    locationName: "utcTimingUri"
                }
            },
            type: "structure"
        },
        S1a: {
            members: {
                AdMarkers: {
                    locationName: "adMarkers"
                },
                AdTriggers: {
                    locationName: "adTriggers",
                    shape: "Sv"
                },
                AdsOnDeliveryRestrictions: {
                    locationName: "adsOnDeliveryRestrictions"
                },
                Encryption: {
                    locationName: "encryption",
                    members: {
                        ConstantInitializationVector: {
                            locationName: "constantInitializationVector"
                        },
                        EncryptionMethod: {
                            locationName: "encryptionMethod"
                        },
                        KeyRotationIntervalSeconds: {
                            locationName: "keyRotationIntervalSeconds",
                            type: "integer"
                        },
                        RepeatExtXKey: {
                            locationName: "repeatExtXKey",
                            type: "boolean"
                        },
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Sn"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                IncludeDvbSubtitles: {
                    locationName: "includeDvbSubtitles",
                    type: "boolean"
                },
                IncludeIframeOnlyStream: {
                    locationName: "includeIframeOnlyStream",
                    type: "boolean"
                },
                PlaylistType: {
                    locationName: "playlistType"
                },
                PlaylistWindowSeconds: {
                    locationName: "playlistWindowSeconds",
                    type: "integer"
                },
                ProgramDateTimeIntervalSeconds: {
                    locationName: "programDateTimeIntervalSeconds",
                    type: "integer"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "S10"
                },
                UseAudioRenditionGroup: {
                    locationName: "useAudioRenditionGroup",
                    type: "boolean"
                }
            },
            type: "structure"
        },
        S1d: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    members: {
                        SpekeKeyProvider: {
                            locationName: "spekeKeyProvider",
                            shape: "Sn"
                        }
                    },
                    required: [ "SpekeKeyProvider" ],
                    type: "structure"
                },
                ManifestWindowSeconds: {
                    locationName: "manifestWindowSeconds",
                    type: "integer"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "S10"
                }
            },
            type: "structure"
        },
        S1h: {
            members: {
                Encryption: {
                    locationName: "encryption",
                    shape: "Sk"
                },
                HlsManifests: {
                    locationName: "hlsManifests",
                    member: {
                        members: {
                            AdMarkers: {
                                locationName: "adMarkers"
                            },
                            Id: {
                                locationName: "id"
                            },
                            IncludeIframeOnlyStream: {
                                locationName: "includeIframeOnlyStream",
                                type: "boolean"
                            },
                            ManifestName: {
                                locationName: "manifestName"
                            },
                            PlaylistType: {
                                locationName: "playlistType"
                            },
                            PlaylistWindowSeconds: {
                                locationName: "playlistWindowSeconds",
                                type: "integer"
                            },
                            ProgramDateTimeIntervalSeconds: {
                                locationName: "programDateTimeIntervalSeconds",
                                type: "integer"
                            },
                            Url: {
                                locationName: "url"
                            },
                            AdTriggers: {
                                locationName: "adTriggers",
                                shape: "Sv"
                            },
                            AdsOnDeliveryRestrictions: {
                                locationName: "adsOnDeliveryRestrictions"
                            }
                        },
                        required: [ "Id" ],
                        type: "structure"
                    },
                    type: "list"
                },
                SegmentDurationSeconds: {
                    locationName: "segmentDurationSeconds",
                    type: "integer"
                },
                SegmentPrefix: {
                    locationName: "segmentPrefix"
                },
                StreamSelection: {
                    locationName: "streamSelection",
                    shape: "S10"
                }
            },
            type: "structure"
        },
        S29: {
            key: {},
            type: "map",
            value: {}
        }
    },
    paginators: {
        ListChannels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Channels"
        },
        ListOriginEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OriginEndpoints"
        },
        ListHarvestJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HarvestJobs"
        }
    }
};

AWS.apiLoader.services["mediastore"] = {};

AWS.MediaStore = AWS.Service.defineService("mediastore", [ "2017-09-01" ]);

AWS.apiLoader.services["mediastore"]["2017-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-01",
        endpointPrefix: "mediastore",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "MediaStore",
        serviceFullName: "AWS Elemental MediaStore",
        serviceId: "MediaStore",
        signatureVersion: "v4",
        signingName: "mediastore",
        targetPrefix: "MediaStore_20170901",
        uid: "mediastore-2017-09-01"
    },
    operations: {
        CreateContainer: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Container" ],
                members: {
                    Container: {
                        shape: "S8"
                    }
                }
            }
        },
        DeleteContainer: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteContainerPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteCorsPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteMetricPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeContainer: {
            input: {
                type: "structure",
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Container: {
                        shape: "S8"
                    }
                }
            }
        },
        GetContainerPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Policy" ],
                members: {
                    Policy: {}
                }
            }
        },
        GetCorsPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CorsPolicy" ],
                members: {
                    CorsPolicy: {
                        shape: "Sv"
                    }
                }
            }
        },
        GetLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LifecyclePolicy" ],
                members: {
                    LifecyclePolicy: {}
                }
            }
        },
        GetMetricPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MetricPolicy" ],
                members: {
                    MetricPolicy: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListContainers: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Containers" ],
                members: {
                    Containers: {
                        type: "list",
                        member: {
                            shape: "S8"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S3"
                    }
                }
            }
        },
        PutContainerPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "Policy" ],
                members: {
                    ContainerName: {},
                    Policy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutCorsPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "CorsPolicy" ],
                members: {
                    ContainerName: {},
                    CorsPolicy: {
                        shape: "Sv"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutLifecyclePolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "LifecyclePolicy" ],
                members: {
                    ContainerName: {},
                    LifecyclePolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        PutMetricPolicy: {
            input: {
                type: "structure",
                required: [ "ContainerName", "MetricPolicy" ],
                members: {
                    ContainerName: {},
                    MetricPolicy: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartAccessLogging: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopAccessLogging: {
            input: {
                type: "structure",
                required: [ "ContainerName" ],
                members: {
                    ContainerName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "Resource", "Tags" ],
                members: {
                    Resource: {},
                    Tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "Resource", "TagKeys" ],
                members: {
                    Resource: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S8: {
            type: "structure",
            members: {
                Endpoint: {},
                CreationTime: {
                    type: "timestamp"
                },
                ARN: {},
                Name: {},
                Status: {},
                AccessLoggingEnabled: {
                    type: "boolean"
                }
            }
        },
        Sv: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AllowedOrigins", "AllowedHeaders" ],
                members: {
                    AllowedOrigins: {
                        type: "list",
                        member: {}
                    },
                    AllowedMethods: {
                        type: "list",
                        member: {}
                    },
                    AllowedHeaders: {
                        type: "list",
                        member: {}
                    },
                    MaxAgeSeconds: {
                        type: "integer"
                    },
                    ExposeHeaders: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            required: [ "ContainerLevelMetrics" ],
            members: {
                ContainerLevelMetrics: {},
                MetricPolicyRules: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ObjectGroup", "ObjectGroupName" ],
                        members: {
                            ObjectGroup: {},
                            ObjectGroupName: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListContainers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["mediastoredata"] = {};

AWS.MediaStoreData = AWS.Service.defineService("mediastoredata", [ "2017-09-01" ]);

AWS.apiLoader.services["mediastoredata"]["2017-09-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-01",
        endpointPrefix: "data.mediastore",
        protocol: "rest-json",
        serviceAbbreviation: "MediaStore Data",
        serviceFullName: "AWS Elemental MediaStore Data Plane",
        serviceId: "MediaStore Data",
        signatureVersion: "v4",
        signingName: "mediastore",
        uid: "mediastore-data-2017-09-01"
    },
    operations: {
        DeleteObject: {
            http: {
                method: "DELETE",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeObject: {
            http: {
                method: "HEAD",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    }
                }
            }
        },
        GetObject: {
            http: {
                method: "GET",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Path" ],
                members: {
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    },
                    Range: {
                        location: "header",
                        locationName: "Range"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StatusCode" ],
                members: {
                    Body: {
                        shape: "Se"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    ContentRange: {
                        location: "header",
                        locationName: "Content-Range"
                    },
                    ContentLength: {
                        location: "header",
                        locationName: "Content-Length",
                        type: "long"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    ETag: {
                        location: "header",
                        locationName: "ETag"
                    },
                    LastModified: {
                        location: "header",
                        locationName: "Last-Modified",
                        type: "timestamp"
                    },
                    StatusCode: {
                        location: "statusCode",
                        type: "integer"
                    }
                },
                payload: "Body"
            }
        },
        ListItems: {
            http: {
                method: "GET"
            },
            input: {
                type: "structure",
                members: {
                    Path: {
                        location: "querystring",
                        locationName: "Path"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Type: {},
                                ETag: {},
                                LastModified: {
                                    type: "timestamp"
                                },
                                ContentType: {},
                                ContentLength: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutObject: {
            http: {
                method: "PUT",
                requestUri: "/{Path+}"
            },
            input: {
                type: "structure",
                required: [ "Body", "Path" ],
                members: {
                    Body: {
                        shape: "Se"
                    },
                    Path: {
                        location: "uri",
                        locationName: "Path"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    CacheControl: {
                        location: "header",
                        locationName: "Cache-Control"
                    },
                    StorageClass: {
                        location: "header",
                        locationName: "x-amz-storage-class"
                    },
                    UploadAvailability: {
                        location: "header",
                        locationName: "x-amz-upload-availability"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                members: {
                    ContentSHA256: {},
                    ETag: {},
                    StorageClass: {}
                }
            },
            authtype: "v4-unsigned-body"
        }
    },
    shapes: {
        Se: {
            type: "blob",
            streaming: true
        }
    },
    paginators: {
        ListItems: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["appsync"] = {};

AWS.AppSync = AWS.Service.defineService("appsync", [ "2017-07-25" ]);

AWS.apiLoader.services["appsync"]["2017-07-25"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-25",
        endpointPrefix: "appsync",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "AWSAppSync",
        serviceFullName: "AWS AppSync",
        serviceId: "AppSync",
        signatureVersion: "v4",
        signingName: "appsync",
        uid: "appsync-2017-07-25"
    },
    operations: {
        AssociateApi: {
            http: {
                requestUri: "/v1/domainnames/{domainName}/apiassociation"
            },
            input: {
                type: "structure",
                required: [ "domainName", "apiId" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    apiId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    apiAssociation: {
                        shape: "S5"
                    }
                }
            }
        },
        AssociateMergedGraphqlApi: {
            http: {
                requestUri: "/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations"
            },
            input: {
                type: "structure",
                required: [ "sourceApiIdentifier", "mergedApiIdentifier" ],
                members: {
                    sourceApiIdentifier: {
                        location: "uri",
                        locationName: "sourceApiIdentifier"
                    },
                    mergedApiIdentifier: {},
                    description: {},
                    sourceApiAssociationConfig: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociation: {
                        shape: "Sb"
                    }
                }
            }
        },
        AssociateSourceGraphqlApi: {
            http: {
                requestUri: "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations"
            },
            input: {
                type: "structure",
                required: [ "mergedApiIdentifier", "sourceApiIdentifier" ],
                members: {
                    mergedApiIdentifier: {
                        location: "uri",
                        locationName: "mergedApiIdentifier"
                    },
                    sourceApiIdentifier: {},
                    description: {},
                    sourceApiAssociationConfig: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociation: {
                        shape: "Sb"
                    }
                }
            }
        },
        CreateApiCache: {
            http: {
                requestUri: "/v1/apis/{apiId}/ApiCaches"
            },
            input: {
                type: "structure",
                required: [ "apiId", "ttl", "apiCachingBehavior", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ttl: {
                        type: "long"
                    },
                    transitEncryptionEnabled: {
                        type: "boolean"
                    },
                    atRestEncryptionEnabled: {
                        type: "boolean"
                    },
                    apiCachingBehavior: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    apiCache: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateApiKey: {
            http: {
                requestUri: "/v1/apis/{apiId}/apikeys"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    description: {},
                    expires: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiKey: {
                        shape: "Sq"
                    }
                }
            }
        },
        CreateDataSource: {
            http: {
                requestUri: "/v1/apis/{apiId}/datasources"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    description: {},
                    type: {},
                    serviceRoleArn: {},
                    dynamodbConfig: {
                        shape: "Su"
                    },
                    lambdaConfig: {
                        shape: "Sw"
                    },
                    elasticsearchConfig: {
                        shape: "Sx"
                    },
                    openSearchServiceConfig: {
                        shape: "Sy"
                    },
                    httpConfig: {
                        shape: "Sz"
                    },
                    relationalDatabaseConfig: {
                        shape: "S13"
                    },
                    eventBridgeConfig: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSource: {
                        shape: "S18"
                    }
                }
            }
        },
        CreateDomainName: {
            http: {
                requestUri: "/v1/domainnames"
            },
            input: {
                type: "structure",
                required: [ "domainName", "certificateArn" ],
                members: {
                    domainName: {},
                    certificateArn: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domainNameConfig: {
                        shape: "S1d"
                    }
                }
            }
        },
        CreateFunction: {
            http: {
                requestUri: "/v1/apis/{apiId}/functions"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "dataSourceName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    description: {},
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    functionVersion: {},
                    syncConfig: {
                        shape: "S1g"
                    },
                    maxBatchSize: {
                        type: "integer"
                    },
                    runtime: {
                        shape: "S1l"
                    },
                    code: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    functionConfiguration: {
                        shape: "S1p"
                    }
                }
            }
        },
        CreateGraphqlApi: {
            http: {
                requestUri: "/v1/apis"
            },
            input: {
                type: "structure",
                required: [ "name", "authenticationType" ],
                members: {
                    name: {},
                    logConfig: {
                        shape: "S1r"
                    },
                    authenticationType: {},
                    userPoolConfig: {
                        shape: "S1u"
                    },
                    openIDConnectConfig: {
                        shape: "S1w"
                    },
                    tags: {
                        shape: "S1x"
                    },
                    additionalAuthenticationProviders: {
                        shape: "S20"
                    },
                    xrayEnabled: {
                        type: "boolean"
                    },
                    lambdaAuthorizerConfig: {
                        shape: "S23"
                    },
                    visibility: {},
                    apiType: {},
                    mergedApiExecutionRoleArn: {},
                    ownerContact: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApi: {
                        shape: "S28"
                    }
                }
            }
        },
        CreateResolver: {
            http: {
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {},
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    kind: {},
                    pipelineConfig: {
                        shape: "S2c"
                    },
                    syncConfig: {
                        shape: "S1g"
                    },
                    cachingConfig: {
                        shape: "S2e"
                    },
                    maxBatchSize: {
                        type: "integer"
                    },
                    runtime: {
                        shape: "S1l"
                    },
                    code: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resolver: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateType: {
            http: {
                requestUri: "/v1/apis/{apiId}/types"
            },
            input: {
                type: "structure",
                required: [ "apiId", "definition", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    definition: {},
                    format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    type: {
                        shape: "S2l"
                    }
                }
            }
        },
        DeleteApiCache: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/ApiCaches"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteApiKey: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/apikeys/{id}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "id" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDataSource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/datasources/{name}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteDomainName: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domainnames/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFunction: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/functions/{functionId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "functionId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteGraphqlApi: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResolver: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {
                        location: "uri",
                        locationName: "fieldName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteType: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/types/{typeName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateApi: {
            http: {
                method: "DELETE",
                requestUri: "/v1/domainnames/{domainName}/apiassociation"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateMergedGraphqlApi: {
            http: {
                method: "DELETE",
                requestUri: "/v1/sourceApis/{sourceApiIdentifier}/mergedApiAssociations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "sourceApiIdentifier", "associationId" ],
                members: {
                    sourceApiIdentifier: {
                        location: "uri",
                        locationName: "sourceApiIdentifier"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociationStatus: {}
                }
            }
        },
        DisassociateSourceGraphqlApi: {
            http: {
                method: "DELETE",
                requestUri: "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "mergedApiIdentifier", "associationId" ],
                members: {
                    mergedApiIdentifier: {
                        location: "uri",
                        locationName: "mergedApiIdentifier"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociationStatus: {}
                }
            }
        },
        EvaluateCode: {
            http: {
                requestUri: "/v1/dataplane-evaluatecode"
            },
            input: {
                type: "structure",
                required: [ "runtime", "code", "context" ],
                members: {
                    runtime: {
                        shape: "S1l"
                    },
                    code: {},
                    context: {},
                    function: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    evaluationResult: {},
                    error: {
                        type: "structure",
                        members: {
                            message: {},
                            codeErrors: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        errorType: {},
                                        value: {},
                                        location: {
                                            type: "structure",
                                            members: {
                                                line: {
                                                    type: "integer"
                                                },
                                                column: {
                                                    type: "integer"
                                                },
                                                span: {
                                                    type: "integer"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    logs: {
                        shape: "S3k"
                    }
                }
            }
        },
        EvaluateMappingTemplate: {
            http: {
                requestUri: "/v1/dataplane-evaluatetemplate"
            },
            input: {
                type: "structure",
                required: [ "template", "context" ],
                members: {
                    template: {},
                    context: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    evaluationResult: {},
                    error: {
                        type: "structure",
                        members: {
                            message: {}
                        }
                    },
                    logs: {
                        shape: "S3k"
                    }
                }
            }
        },
        FlushApiCache: {
            http: {
                method: "DELETE",
                requestUri: "/v1/apis/{apiId}/FlushCache"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetApiAssociation: {
            http: {
                method: "GET",
                requestUri: "/v1/domainnames/{domainName}/apiassociation"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiAssociation: {
                        shape: "S5"
                    }
                }
            }
        },
        GetApiCache: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/ApiCaches"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiCache: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetDataSource: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/datasources/{name}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSource: {
                        shape: "S18"
                    }
                }
            }
        },
        GetDataSourceIntrospection: {
            http: {
                method: "GET",
                requestUri: "/v1/datasources/introspections/{introspectionId}"
            },
            input: {
                type: "structure",
                required: [ "introspectionId" ],
                members: {
                    introspectionId: {
                        location: "uri",
                        locationName: "introspectionId"
                    },
                    includeModelsSDL: {
                        location: "querystring",
                        locationName: "includeModelsSDL",
                        type: "boolean"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    introspectionId: {},
                    introspectionStatus: {},
                    introspectionStatusDetail: {},
                    introspectionResult: {
                        type: "structure",
                        members: {
                            models: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        name: {},
                                        fields: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    name: {},
                                                    type: {
                                                        shape: "S47"
                                                    },
                                                    length: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        },
                                        primaryKey: {
                                            shape: "S49"
                                        },
                                        indexes: {
                                            type: "list",
                                            member: {
                                                shape: "S49"
                                            }
                                        },
                                        sdl: {}
                                    }
                                }
                            },
                            nextToken: {}
                        }
                    }
                }
            }
        },
        GetDomainName: {
            http: {
                method: "GET",
                requestUri: "/v1/domainnames/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainNameConfig: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetFunction: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/functions/{functionId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "functionId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functionConfiguration: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetGraphqlApi: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApi: {
                        shape: "S28"
                    }
                }
            }
        },
        GetIntrospectionSchema: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/schema"
            },
            input: {
                type: "structure",
                required: [ "apiId", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    includeDirectives: {
                        location: "querystring",
                        locationName: "includeDirectives",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    schema: {
                        type: "blob"
                    }
                },
                payload: "schema"
            }
        },
        GetResolver: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {
                        location: "uri",
                        locationName: "fieldName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolver: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetSchemaCreationStatus: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/schemacreation"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {},
                    details: {}
                }
            }
        },
        GetSourceApiAssociation: {
            http: {
                method: "GET",
                requestUri: "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "mergedApiIdentifier", "associationId" ],
                members: {
                    mergedApiIdentifier: {
                        location: "uri",
                        locationName: "mergedApiIdentifier"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociation: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetType: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types/{typeName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    type: {
                        shape: "S2l"
                    }
                }
            }
        },
        ListApiKeys: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/apikeys"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiKeys: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSources: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/datasources"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSources: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDomainNames: {
            http: {
                method: "GET",
                requestUri: "/v1/domainnames"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    domainNameConfigs: {
                        type: "list",
                        member: {
                            shape: "S1d"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFunctions: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/functions"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    functions: {
                        type: "list",
                        member: {
                            shape: "S1p"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListGraphqlApis: {
            http: {
                method: "GET",
                requestUri: "/v1/apis"
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    apiType: {
                        location: "querystring",
                        locationName: "apiType"
                    },
                    owner: {
                        location: "querystring",
                        locationName: "owner"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApis: {
                        type: "list",
                        member: {
                            shape: "S28"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListResolvers: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvers: {
                        shape: "S5e"
                    },
                    nextToken: {}
                }
            }
        },
        ListResolversByFunction: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/functions/{functionId}/resolvers"
            },
            input: {
                type: "structure",
                required: [ "apiId", "functionId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    resolvers: {
                        shape: "S5e"
                    },
                    nextToken: {}
                }
            }
        },
        ListSourceApiAssociations: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/sourceApiAssociations"
            },
            input: {
                type: "structure",
                required: [ "apiId" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                associationId: {},
                                associationArn: {},
                                sourceApiId: {},
                                sourceApiArn: {},
                                mergedApiId: {},
                                mergedApiArn: {},
                                description: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1x"
                    }
                }
            }
        },
        ListTypes: {
            http: {
                method: "GET",
                requestUri: "/v1/apis/{apiId}/types"
            },
            input: {
                type: "structure",
                required: [ "apiId", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    types: {
                        shape: "S5q"
                    },
                    nextToken: {}
                }
            }
        },
        ListTypesByAssociation: {
            http: {
                method: "GET",
                requestUri: "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/types"
            },
            input: {
                type: "structure",
                required: [ "mergedApiIdentifier", "associationId", "format" ],
                members: {
                    mergedApiIdentifier: {
                        location: "uri",
                        locationName: "mergedApiIdentifier"
                    },
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    },
                    format: {
                        location: "querystring",
                        locationName: "format"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    types: {
                        shape: "S5q"
                    },
                    nextToken: {}
                }
            }
        },
        StartDataSourceIntrospection: {
            http: {
                requestUri: "/v1/datasources/introspections"
            },
            input: {
                type: "structure",
                members: {
                    rdsDataApiConfig: {
                        type: "structure",
                        required: [ "resourceArn", "secretArn", "databaseName" ],
                        members: {
                            resourceArn: {},
                            secretArn: {},
                            databaseName: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    introspectionId: {},
                    introspectionStatus: {},
                    introspectionStatusDetail: {}
                }
            }
        },
        StartSchemaCreation: {
            http: {
                requestUri: "/v1/apis/{apiId}/schemacreation"
            },
            input: {
                type: "structure",
                required: [ "apiId", "definition" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    definition: {
                        type: "blob"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        StartSchemaMerge: {
            http: {
                requestUri: "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}/merge"
            },
            input: {
                type: "structure",
                required: [ "associationId", "mergedApiIdentifier" ],
                members: {
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    },
                    mergedApiIdentifier: {
                        location: "uri",
                        locationName: "mergedApiIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociationStatus: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1x"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resourceArn}"
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApiCache: {
            http: {
                requestUri: "/v1/apis/{apiId}/ApiCaches/update"
            },
            input: {
                type: "structure",
                required: [ "apiId", "ttl", "apiCachingBehavior", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    ttl: {
                        type: "long"
                    },
                    apiCachingBehavior: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    apiCache: {
                        shape: "Sm"
                    }
                }
            }
        },
        UpdateApiKey: {
            http: {
                requestUri: "/v1/apis/{apiId}/apikeys/{id}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "id" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    description: {},
                    expires: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    apiKey: {
                        shape: "Sq"
                    }
                }
            }
        },
        UpdateDataSource: {
            http: {
                requestUri: "/v1/apis/{apiId}/datasources/{name}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "type" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {
                        location: "uri",
                        locationName: "name"
                    },
                    description: {},
                    type: {},
                    serviceRoleArn: {},
                    dynamodbConfig: {
                        shape: "Su"
                    },
                    lambdaConfig: {
                        shape: "Sw"
                    },
                    elasticsearchConfig: {
                        shape: "Sx"
                    },
                    openSearchServiceConfig: {
                        shape: "Sy"
                    },
                    httpConfig: {
                        shape: "Sz"
                    },
                    relationalDatabaseConfig: {
                        shape: "S13"
                    },
                    eventBridgeConfig: {
                        shape: "S16"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataSource: {
                        shape: "S18"
                    }
                }
            }
        },
        UpdateDomainName: {
            http: {
                requestUri: "/v1/domainnames/{domainName}"
            },
            input: {
                type: "structure",
                required: [ "domainName" ],
                members: {
                    domainName: {
                        location: "uri",
                        locationName: "domainName"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    domainNameConfig: {
                        shape: "S1d"
                    }
                }
            }
        },
        UpdateFunction: {
            http: {
                requestUri: "/v1/apis/{apiId}/functions/{functionId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name", "functionId", "dataSourceName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    description: {},
                    functionId: {
                        location: "uri",
                        locationName: "functionId"
                    },
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    functionVersion: {},
                    syncConfig: {
                        shape: "S1g"
                    },
                    maxBatchSize: {
                        type: "integer"
                    },
                    runtime: {
                        shape: "S1l"
                    },
                    code: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    functionConfiguration: {
                        shape: "S1p"
                    }
                }
            }
        },
        UpdateGraphqlApi: {
            http: {
                requestUri: "/v1/apis/{apiId}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "name" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    name: {},
                    logConfig: {
                        shape: "S1r"
                    },
                    authenticationType: {},
                    userPoolConfig: {
                        shape: "S1u"
                    },
                    openIDConnectConfig: {
                        shape: "S1w"
                    },
                    additionalAuthenticationProviders: {
                        shape: "S20"
                    },
                    xrayEnabled: {
                        type: "boolean"
                    },
                    lambdaAuthorizerConfig: {
                        shape: "S23"
                    },
                    mergedApiExecutionRoleArn: {},
                    ownerContact: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    graphqlApi: {
                        shape: "S28"
                    }
                }
            }
        },
        UpdateResolver: {
            http: {
                requestUri: "/v1/apis/{apiId}/types/{typeName}/resolvers/{fieldName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "fieldName" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    fieldName: {
                        location: "uri",
                        locationName: "fieldName"
                    },
                    dataSourceName: {},
                    requestMappingTemplate: {},
                    responseMappingTemplate: {},
                    kind: {},
                    pipelineConfig: {
                        shape: "S2c"
                    },
                    syncConfig: {
                        shape: "S1g"
                    },
                    cachingConfig: {
                        shape: "S2e"
                    },
                    maxBatchSize: {
                        type: "integer"
                    },
                    runtime: {
                        shape: "S1l"
                    },
                    code: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resolver: {
                        shape: "S2h"
                    }
                }
            }
        },
        UpdateSourceApiAssociation: {
            http: {
                requestUri: "/v1/mergedApis/{mergedApiIdentifier}/sourceApiAssociations/{associationId}"
            },
            input: {
                type: "structure",
                required: [ "associationId", "mergedApiIdentifier" ],
                members: {
                    associationId: {
                        location: "uri",
                        locationName: "associationId"
                    },
                    mergedApiIdentifier: {
                        location: "uri",
                        locationName: "mergedApiIdentifier"
                    },
                    description: {},
                    sourceApiAssociationConfig: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceApiAssociation: {
                        shape: "Sb"
                    }
                }
            }
        },
        UpdateType: {
            http: {
                requestUri: "/v1/apis/{apiId}/types/{typeName}"
            },
            input: {
                type: "structure",
                required: [ "apiId", "typeName", "format" ],
                members: {
                    apiId: {
                        location: "uri",
                        locationName: "apiId"
                    },
                    typeName: {
                        location: "uri",
                        locationName: "typeName"
                    },
                    definition: {},
                    format: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    type: {
                        shape: "S2l"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                domainName: {},
                apiId: {},
                associationStatus: {},
                deploymentDetail: {}
            }
        },
        S8: {
            type: "structure",
            members: {
                mergeType: {}
            }
        },
        Sb: {
            type: "structure",
            members: {
                associationId: {},
                associationArn: {},
                sourceApiId: {},
                sourceApiArn: {},
                mergedApiArn: {},
                mergedApiId: {},
                description: {},
                sourceApiAssociationConfig: {
                    shape: "S8"
                },
                sourceApiAssociationStatus: {},
                sourceApiAssociationStatusDetail: {},
                lastSuccessfulMergeDate: {
                    type: "timestamp"
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                ttl: {
                    type: "long"
                },
                apiCachingBehavior: {},
                transitEncryptionEnabled: {
                    type: "boolean"
                },
                atRestEncryptionEnabled: {
                    type: "boolean"
                },
                type: {},
                status: {}
            }
        },
        Sq: {
            type: "structure",
            members: {
                id: {},
                description: {},
                expires: {
                    type: "long"
                },
                deletes: {
                    type: "long"
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "tableName", "awsRegion" ],
            members: {
                tableName: {},
                awsRegion: {},
                useCallerCredentials: {
                    type: "boolean"
                },
                deltaSyncConfig: {
                    type: "structure",
                    members: {
                        baseTableTTL: {
                            type: "long"
                        },
                        deltaSyncTableName: {},
                        deltaSyncTableTTL: {
                            type: "long"
                        }
                    }
                },
                versioned: {
                    type: "boolean"
                }
            }
        },
        Sw: {
            type: "structure",
            required: [ "lambdaFunctionArn" ],
            members: {
                lambdaFunctionArn: {}
            }
        },
        Sx: {
            type: "structure",
            required: [ "endpoint", "awsRegion" ],
            members: {
                endpoint: {},
                awsRegion: {}
            }
        },
        Sy: {
            type: "structure",
            required: [ "endpoint", "awsRegion" ],
            members: {
                endpoint: {},
                awsRegion: {}
            }
        },
        Sz: {
            type: "structure",
            members: {
                endpoint: {},
                authorizationConfig: {
                    type: "structure",
                    required: [ "authorizationType" ],
                    members: {
                        authorizationType: {},
                        awsIamConfig: {
                            type: "structure",
                            members: {
                                signingRegion: {},
                                signingServiceName: {}
                            }
                        }
                    }
                }
            }
        },
        S13: {
            type: "structure",
            members: {
                relationalDatabaseSourceType: {},
                rdsHttpEndpointConfig: {
                    type: "structure",
                    members: {
                        awsRegion: {},
                        dbClusterIdentifier: {},
                        databaseName: {},
                        schema: {},
                        awsSecretStoreArn: {}
                    }
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "eventBusArn" ],
            members: {
                eventBusArn: {}
            }
        },
        S18: {
            type: "structure",
            members: {
                dataSourceArn: {},
                name: {},
                description: {},
                type: {},
                serviceRoleArn: {},
                dynamodbConfig: {
                    shape: "Su"
                },
                lambdaConfig: {
                    shape: "Sw"
                },
                elasticsearchConfig: {
                    shape: "Sx"
                },
                openSearchServiceConfig: {
                    shape: "Sy"
                },
                httpConfig: {
                    shape: "Sz"
                },
                relationalDatabaseConfig: {
                    shape: "S13"
                },
                eventBridgeConfig: {
                    shape: "S16"
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                domainName: {},
                description: {},
                certificateArn: {},
                appsyncDomainName: {},
                hostedZoneId: {}
            }
        },
        S1g: {
            type: "structure",
            members: {
                conflictHandler: {},
                conflictDetection: {},
                lambdaConflictHandlerConfig: {
                    type: "structure",
                    members: {
                        lambdaConflictHandlerArn: {}
                    }
                }
            }
        },
        S1l: {
            type: "structure",
            required: [ "name", "runtimeVersion" ],
            members: {
                name: {},
                runtimeVersion: {}
            }
        },
        S1p: {
            type: "structure",
            members: {
                functionId: {},
                functionArn: {},
                name: {},
                description: {},
                dataSourceName: {},
                requestMappingTemplate: {},
                responseMappingTemplate: {},
                functionVersion: {},
                syncConfig: {
                    shape: "S1g"
                },
                maxBatchSize: {
                    type: "integer"
                },
                runtime: {
                    shape: "S1l"
                },
                code: {}
            }
        },
        S1r: {
            type: "structure",
            required: [ "fieldLogLevel", "cloudWatchLogsRoleArn" ],
            members: {
                fieldLogLevel: {},
                cloudWatchLogsRoleArn: {},
                excludeVerboseContent: {
                    type: "boolean"
                }
            }
        },
        S1u: {
            type: "structure",
            required: [ "userPoolId", "awsRegion", "defaultAction" ],
            members: {
                userPoolId: {},
                awsRegion: {},
                defaultAction: {},
                appIdClientRegex: {}
            }
        },
        S1w: {
            type: "structure",
            required: [ "issuer" ],
            members: {
                issuer: {},
                clientId: {},
                iatTTL: {
                    type: "long"
                },
                authTTL: {
                    type: "long"
                }
            }
        },
        S1x: {
            type: "map",
            key: {},
            value: {}
        },
        S20: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    authenticationType: {},
                    openIDConnectConfig: {
                        shape: "S1w"
                    },
                    userPoolConfig: {
                        type: "structure",
                        required: [ "userPoolId", "awsRegion" ],
                        members: {
                            userPoolId: {},
                            awsRegion: {},
                            appIdClientRegex: {}
                        }
                    },
                    lambdaAuthorizerConfig: {
                        shape: "S23"
                    }
                }
            }
        },
        S23: {
            type: "structure",
            required: [ "authorizerUri" ],
            members: {
                authorizerResultTtlInSeconds: {
                    type: "integer"
                },
                authorizerUri: {},
                identityValidationExpression: {}
            }
        },
        S28: {
            type: "structure",
            members: {
                name: {},
                apiId: {},
                authenticationType: {},
                logConfig: {
                    shape: "S1r"
                },
                userPoolConfig: {
                    shape: "S1u"
                },
                openIDConnectConfig: {
                    shape: "S1w"
                },
                arn: {},
                uris: {
                    shape: "S29"
                },
                tags: {
                    shape: "S1x"
                },
                additionalAuthenticationProviders: {
                    shape: "S20"
                },
                xrayEnabled: {
                    type: "boolean"
                },
                wafWebAclArn: {},
                lambdaAuthorizerConfig: {
                    shape: "S23"
                },
                dns: {
                    shape: "S29"
                },
                visibility: {},
                apiType: {},
                mergedApiExecutionRoleArn: {},
                owner: {},
                ownerContact: {}
            }
        },
        S29: {
            type: "map",
            key: {},
            value: {}
        },
        S2c: {
            type: "structure",
            members: {
                functions: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "ttl" ],
            members: {
                ttl: {
                    type: "long"
                },
                cachingKeys: {
                    type: "list",
                    member: {}
                }
            }
        },
        S2h: {
            type: "structure",
            members: {
                typeName: {},
                fieldName: {},
                dataSourceName: {},
                resolverArn: {},
                requestMappingTemplate: {},
                responseMappingTemplate: {},
                kind: {},
                pipelineConfig: {
                    shape: "S2c"
                },
                syncConfig: {
                    shape: "S1g"
                },
                cachingConfig: {
                    shape: "S2e"
                },
                maxBatchSize: {
                    type: "integer"
                },
                runtime: {
                    shape: "S1l"
                },
                code: {}
            }
        },
        S2l: {
            type: "structure",
            members: {
                name: {},
                description: {},
                arn: {},
                definition: {},
                format: {}
            }
        },
        S3k: {
            type: "list",
            member: {}
        },
        S47: {
            type: "structure",
            members: {
                kind: {},
                name: {},
                type: {
                    shape: "S47"
                },
                values: {
                    type: "list",
                    member: {}
                }
            }
        },
        S49: {
            type: "structure",
            members: {
                name: {},
                fields: {
                    type: "list",
                    member: {}
                }
            }
        },
        S5e: {
            type: "list",
            member: {
                shape: "S2h"
            }
        },
        S5q: {
            type: "list",
            member: {
                shape: "S2l"
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["guardduty"] = {};

AWS.GuardDuty = AWS.Service.defineService("guardduty", [ "2017-11-28" ]);

AWS.apiLoader.services["guardduty"]["2017-11-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-28",
        endpointPrefix: "guardduty",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon GuardDuty",
        serviceId: "GuardDuty",
        signatureVersion: "v4",
        signingName: "guardduty",
        uid: "guardduty-2017-11-28"
    },
    operations: {
        AcceptAdministratorInvitation: {
            http: {
                requestUri: "/detector/{detectorId}/administrator",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AdministratorId", "InvitationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AdministratorId: {
                        locationName: "administratorId"
                    },
                    InvitationId: {
                        locationName: "invitationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        AcceptInvitation: {
            http: {
                requestUri: "/detector/{detectorId}/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "MasterId", "InvitationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MasterId: {
                        locationName: "masterId"
                    },
                    InvitationId: {
                        locationName: "invitationId"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This input is deprecated, use AcceptAdministratorInvitationRequest instead"
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "This output is deprecated, use AcceptAdministratorInvitationResponse instead"
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use AcceptAdministratorInvitation instead"
        },
        ArchiveFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/archive",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S8",
                        locationName: "findingIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateDetector: {
            http: {
                requestUri: "/detector",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Enable" ],
                members: {
                    Enable: {
                        locationName: "enable",
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    FindingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    DataSources: {
                        shape: "Sf",
                        deprecated: true,
                        deprecatedMessage: "This parameter is deprecated, use Features instead",
                        locationName: "dataSources"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    },
                    Features: {
                        shape: "So",
                        locationName: "features"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DetectorId: {
                        locationName: "detectorId"
                    },
                    UnprocessedDataSources: {
                        locationName: "unprocessedDataSources",
                        type: "structure",
                        members: {
                            MalwareProtection: {
                                shape: "Sx",
                                locationName: "malwareProtection"
                            }
                        }
                    }
                }
            }
        },
        CreateFilter: {
            http: {
                requestUri: "/detector/{detectorId}/filter",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "Name", "FindingCriteria" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Action: {
                        locationName: "action"
                    },
                    Rank: {
                        locationName: "rank",
                        type: "integer"
                    },
                    FindingCriteria: {
                        shape: "S16",
                        locationName: "findingCriteria"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        CreateIPSet: {
            http: {
                requestUri: "/detector/{detectorId}/ipset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "Name", "Format", "Location", "Activate" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IpSetId" ],
                members: {
                    IpSetId: {
                        locationName: "ipSetId"
                    }
                }
            }
        },
        CreateMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountDetails" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountDetails: {
                        locationName: "accountDetails",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "Email" ],
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                Email: {
                                    locationName: "email"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        CreatePublishingDestination: {
            http: {
                requestUri: "/detector/{detectorId}/publishingDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationType", "DestinationProperties" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationType: {
                        locationName: "destinationType"
                    },
                    DestinationProperties: {
                        shape: "S1v",
                        locationName: "destinationProperties"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DestinationId" ],
                members: {
                    DestinationId: {
                        locationName: "destinationId"
                    }
                }
            }
        },
        CreateSampleFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingTypes: {
                        locationName: "findingTypes",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateThreatIntelSet: {
            http: {
                requestUri: "/detector/{detectorId}/threatintelset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "Name", "Format", "Location", "Activate" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    },
                    ClientToken: {
                        idempotencyToken: true,
                        locationName: "clientToken"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ThreatIntelSetId" ],
                members: {
                    ThreatIntelSetId: {
                        locationName: "threatIntelSetId"
                    }
                }
            }
        },
        DeclineInvitations: {
            http: {
                requestUri: "/invitation/decline",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteDetector: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFilter: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/filter/{filterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FilterName" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterName: {
                        location: "uri",
                        locationName: "filterName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteIPSet: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/ipset/{ipSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "IpSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    IpSetId: {
                        location: "uri",
                        locationName: "ipSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInvitations: {
            http: {
                requestUri: "/invitation/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AccountIds" ],
                members: {
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeleteMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        DeletePublishingDestination: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/publishingDestination/{destinationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationId: {
                        location: "uri",
                        locationName: "destinationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteThreatIntelSet: {
            http: {
                method: "DELETE",
                requestUri: "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "ThreatIntelSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ThreatIntelSetId: {
                        location: "uri",
                        locationName: "threatIntelSetId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeMalwareScans: {
            http: {
                requestUri: "/detector/{detectorId}/malware-scans",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    FilterCriteria: {
                        locationName: "filterCriteria",
                        type: "structure",
                        members: {
                            FilterCriterion: {
                                locationName: "filterCriterion",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        CriterionKey: {
                                            locationName: "criterionKey"
                                        },
                                        FilterCondition: {
                                            locationName: "filterCondition",
                                            type: "structure",
                                            members: {
                                                EqualsValue: {
                                                    locationName: "equalsValue"
                                                },
                                                GreaterThan: {
                                                    locationName: "greaterThan",
                                                    type: "long"
                                                },
                                                LessThan: {
                                                    locationName: "lessThan",
                                                    type: "long"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SortCriteria: {
                        shape: "S2u",
                        locationName: "sortCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Scans" ],
                members: {
                    Scans: {
                        locationName: "scans",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DetectorId: {
                                    locationName: "detectorId"
                                },
                                AdminDetectorId: {
                                    locationName: "adminDetectorId"
                                },
                                ScanId: {
                                    locationName: "scanId"
                                },
                                ScanStatus: {
                                    locationName: "scanStatus"
                                },
                                FailureReason: {
                                    locationName: "failureReason"
                                },
                                ScanStartTime: {
                                    locationName: "scanStartTime",
                                    type: "timestamp"
                                },
                                ScanEndTime: {
                                    locationName: "scanEndTime",
                                    type: "timestamp"
                                },
                                TriggerDetails: {
                                    locationName: "triggerDetails",
                                    type: "structure",
                                    members: {
                                        GuardDutyFindingId: {
                                            locationName: "guardDutyFindingId"
                                        },
                                        Description: {
                                            locationName: "description"
                                        }
                                    }
                                },
                                ResourceDetails: {
                                    locationName: "resourceDetails",
                                    type: "structure",
                                    members: {
                                        InstanceArn: {
                                            locationName: "instanceArn"
                                        }
                                    }
                                },
                                ScanResultDetails: {
                                    locationName: "scanResultDetails",
                                    type: "structure",
                                    members: {
                                        ScanResult: {
                                            locationName: "scanResult"
                                        }
                                    }
                                },
                                AccountId: {
                                    locationName: "accountId"
                                },
                                TotalBytes: {
                                    locationName: "totalBytes",
                                    type: "long"
                                },
                                FileCount: {
                                    locationName: "fileCount",
                                    type: "long"
                                },
                                AttachedVolumes: {
                                    shape: "S37",
                                    locationName: "attachedVolumes"
                                },
                                ScanType: {
                                    locationName: "scanType"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MemberAccountLimitReached" ],
                members: {
                    AutoEnable: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use AutoEnableOrganizationMembers instead",
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    MemberAccountLimitReached: {
                        locationName: "memberAccountLimitReached",
                        type: "boolean"
                    },
                    DataSources: {
                        deprecated: true,
                        deprecatedMessage: "This parameter is deprecated, use Features instead",
                        locationName: "dataSources",
                        type: "structure",
                        required: [ "S3Logs" ],
                        members: {
                            S3Logs: {
                                locationName: "s3Logs",
                                type: "structure",
                                required: [ "AutoEnable" ],
                                members: {
                                    AutoEnable: {
                                        locationName: "autoEnable",
                                        type: "boolean"
                                    }
                                }
                            },
                            Kubernetes: {
                                locationName: "kubernetes",
                                type: "structure",
                                required: [ "AuditLogs" ],
                                members: {
                                    AuditLogs: {
                                        locationName: "auditLogs",
                                        type: "structure",
                                        required: [ "AutoEnable" ],
                                        members: {
                                            AutoEnable: {
                                                locationName: "autoEnable",
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            MalwareProtection: {
                                locationName: "malwareProtection",
                                type: "structure",
                                members: {
                                    ScanEc2InstanceWithFindings: {
                                        locationName: "scanEc2InstanceWithFindings",
                                        type: "structure",
                                        members: {
                                            EbsVolumes: {
                                                locationName: "ebsVolumes",
                                                type: "structure",
                                                members: {
                                                    AutoEnable: {
                                                        locationName: "autoEnable",
                                                        type: "boolean"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Features: {
                        locationName: "features",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                AutoEnable: {
                                    locationName: "autoEnable"
                                },
                                AdditionalConfiguration: {
                                    locationName: "additionalConfiguration",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            },
                                            AutoEnable: {
                                                locationName: "autoEnable"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    AutoEnableOrganizationMembers: {
                        locationName: "autoEnableOrganizationMembers"
                    }
                }
            }
        },
        DescribePublishingDestination: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/publishingDestination/{destinationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationId: {
                        location: "uri",
                        locationName: "destinationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DestinationId", "DestinationType", "Status", "PublishingFailureStartTimestamp", "DestinationProperties" ],
                members: {
                    DestinationId: {
                        locationName: "destinationId"
                    },
                    DestinationType: {
                        locationName: "destinationType"
                    },
                    Status: {
                        locationName: "status"
                    },
                    PublishingFailureStartTimestamp: {
                        locationName: "publishingFailureStartTimestamp",
                        type: "long"
                    },
                    DestinationProperties: {
                        shape: "S1v",
                        locationName: "destinationProperties"
                    }
                }
            }
        },
        DisableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {
                        locationName: "adminAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromAdministratorAccount: {
            http: {
                requestUri: "/detector/{detectorId}/administrator/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateFromMasterAccount: {
            http: {
                requestUri: "/detector/{detectorId}/master/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This input is deprecated, use DisassociateFromAdministratorAccountRequest instead"
            },
            output: {
                type: "structure",
                members: {},
                deprecated: true,
                deprecatedMessage: "This output is deprecated, use DisassociateFromAdministratorAccountResponse instead"
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use DisassociateFromAdministratorAccount instead"
        },
        DisassociateMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        EnableOrganizationAdminAccount: {
            http: {
                requestUri: "/admin/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AdminAccountId" ],
                members: {
                    AdminAccountId: {
                        locationName: "adminAccountId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAdministratorAccount: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/administrator",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Administrator" ],
                members: {
                    Administrator: {
                        locationName: "administrator",
                        type: "structure",
                        members: {
                            AccountId: {
                                locationName: "accountId"
                            },
                            InvitationId: {
                                locationName: "invitationId"
                            },
                            RelationshipStatus: {
                                locationName: "relationshipStatus"
                            },
                            InvitedAt: {
                                locationName: "invitedAt"
                            }
                        }
                    }
                }
            }
        },
        GetCoverageStatistics: {
            http: {
                requestUri: "/detector/{detectorId}/coverage/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "StatisticsType" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterCriteria: {
                        shape: "S49",
                        locationName: "filterCriteria"
                    },
                    StatisticsType: {
                        locationName: "statisticsType",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CoverageStatistics: {
                        locationName: "coverageStatistics",
                        type: "structure",
                        members: {
                            CountByResourceType: {
                                locationName: "countByResourceType",
                                type: "map",
                                key: {},
                                value: {
                                    type: "long"
                                }
                            },
                            CountByCoverageStatus: {
                                locationName: "countByCoverageStatus",
                                type: "map",
                                key: {},
                                value: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDetector: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ServiceRole", "Status" ],
                members: {
                    CreatedAt: {
                        locationName: "createdAt"
                    },
                    FindingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    ServiceRole: {
                        locationName: "serviceRole"
                    },
                    Status: {
                        locationName: "status"
                    },
                    UpdatedAt: {
                        locationName: "updatedAt"
                    },
                    DataSources: {
                        shape: "S4p",
                        deprecated: true,
                        deprecatedMessage: "This parameter is deprecated, use Features instead",
                        locationName: "dataSources"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    },
                    Features: {
                        locationName: "features",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                UpdatedAt: {
                                    locationName: "updatedAt",
                                    type: "timestamp"
                                },
                                AdditionalConfiguration: {
                                    locationName: "additionalConfiguration",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            },
                                            Status: {
                                                locationName: "status"
                                            },
                                            UpdatedAt: {
                                                locationName: "updatedAt",
                                                type: "timestamp"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFilter: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/filter/{filterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FilterName" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterName: {
                        location: "uri",
                        locationName: "filterName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Action", "FindingCriteria" ],
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Action: {
                        locationName: "action"
                    },
                    Rank: {
                        locationName: "rank",
                        type: "integer"
                    },
                    FindingCriteria: {
                        shape: "S16",
                        locationName: "findingCriteria"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            }
        },
        GetFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S8",
                        locationName: "findingIds"
                    },
                    SortCriteria: {
                        shape: "S2u",
                        locationName: "sortCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Findings" ],
                members: {
                    Findings: {
                        locationName: "findings",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId", "Arn", "CreatedAt", "Id", "Region", "Resource", "SchemaVersion", "Severity", "Type", "UpdatedAt" ],
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                Arn: {
                                    locationName: "arn"
                                },
                                Confidence: {
                                    locationName: "confidence",
                                    type: "double"
                                },
                                CreatedAt: {
                                    locationName: "createdAt"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                Partition: {
                                    locationName: "partition"
                                },
                                Region: {
                                    locationName: "region"
                                },
                                Resource: {
                                    locationName: "resource",
                                    type: "structure",
                                    members: {
                                        AccessKeyDetails: {
                                            locationName: "accessKeyDetails",
                                            type: "structure",
                                            members: {
                                                AccessKeyId: {
                                                    locationName: "accessKeyId"
                                                },
                                                PrincipalId: {
                                                    locationName: "principalId"
                                                },
                                                UserName: {
                                                    locationName: "userName"
                                                },
                                                UserType: {
                                                    locationName: "userType"
                                                }
                                            }
                                        },
                                        S3BucketDetails: {
                                            locationName: "s3BucketDetails",
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    Arn: {
                                                        locationName: "arn"
                                                    },
                                                    Name: {
                                                        locationName: "name"
                                                    },
                                                    Type: {
                                                        locationName: "type"
                                                    },
                                                    CreatedAt: {
                                                        locationName: "createdAt",
                                                        type: "timestamp"
                                                    },
                                                    Owner: {
                                                        locationName: "owner",
                                                        type: "structure",
                                                        members: {
                                                            Id: {
                                                                locationName: "id"
                                                            }
                                                        }
                                                    },
                                                    Tags: {
                                                        shape: "S5d",
                                                        locationName: "tags"
                                                    },
                                                    DefaultServerSideEncryption: {
                                                        locationName: "defaultServerSideEncryption",
                                                        type: "structure",
                                                        members: {
                                                            EncryptionType: {
                                                                locationName: "encryptionType"
                                                            },
                                                            KmsMasterKeyArn: {
                                                                locationName: "kmsMasterKeyArn"
                                                            }
                                                        }
                                                    },
                                                    PublicAccess: {
                                                        locationName: "publicAccess",
                                                        type: "structure",
                                                        members: {
                                                            PermissionConfiguration: {
                                                                locationName: "permissionConfiguration",
                                                                type: "structure",
                                                                members: {
                                                                    BucketLevelPermissions: {
                                                                        locationName: "bucketLevelPermissions",
                                                                        type: "structure",
                                                                        members: {
                                                                            AccessControlList: {
                                                                                locationName: "accessControlList",
                                                                                type: "structure",
                                                                                members: {
                                                                                    AllowsPublicReadAccess: {
                                                                                        locationName: "allowsPublicReadAccess",
                                                                                        type: "boolean"
                                                                                    },
                                                                                    AllowsPublicWriteAccess: {
                                                                                        locationName: "allowsPublicWriteAccess",
                                                                                        type: "boolean"
                                                                                    }
                                                                                }
                                                                            },
                                                                            BucketPolicy: {
                                                                                locationName: "bucketPolicy",
                                                                                type: "structure",
                                                                                members: {
                                                                                    AllowsPublicReadAccess: {
                                                                                        locationName: "allowsPublicReadAccess",
                                                                                        type: "boolean"
                                                                                    },
                                                                                    AllowsPublicWriteAccess: {
                                                                                        locationName: "allowsPublicWriteAccess",
                                                                                        type: "boolean"
                                                                                    }
                                                                                }
                                                                            },
                                                                            BlockPublicAccess: {
                                                                                shape: "S5l",
                                                                                locationName: "blockPublicAccess"
                                                                            }
                                                                        }
                                                                    },
                                                                    AccountLevelPermissions: {
                                                                        locationName: "accountLevelPermissions",
                                                                        type: "structure",
                                                                        members: {
                                                                            BlockPublicAccess: {
                                                                                shape: "S5l",
                                                                                locationName: "blockPublicAccess"
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            EffectivePermission: {
                                                                locationName: "effectivePermission"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        InstanceDetails: {
                                            locationName: "instanceDetails",
                                            type: "structure",
                                            members: {
                                                AvailabilityZone: {
                                                    locationName: "availabilityZone"
                                                },
                                                IamInstanceProfile: {
                                                    locationName: "iamInstanceProfile",
                                                    type: "structure",
                                                    members: {
                                                        Arn: {
                                                            locationName: "arn"
                                                        },
                                                        Id: {
                                                            locationName: "id"
                                                        }
                                                    }
                                                },
                                                ImageDescription: {
                                                    locationName: "imageDescription"
                                                },
                                                ImageId: {
                                                    locationName: "imageId"
                                                },
                                                InstanceId: {
                                                    locationName: "instanceId"
                                                },
                                                InstanceState: {
                                                    locationName: "instanceState"
                                                },
                                                InstanceType: {
                                                    locationName: "instanceType"
                                                },
                                                OutpostArn: {
                                                    locationName: "outpostArn"
                                                },
                                                LaunchTime: {
                                                    locationName: "launchTime"
                                                },
                                                NetworkInterfaces: {
                                                    locationName: "networkInterfaces",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Ipv6Addresses: {
                                                                locationName: "ipv6Addresses",
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            NetworkInterfaceId: {
                                                                locationName: "networkInterfaceId"
                                                            },
                                                            PrivateDnsName: {
                                                                locationName: "privateDnsName"
                                                            },
                                                            PrivateIpAddress: {
                                                                locationName: "privateIpAddress"
                                                            },
                                                            PrivateIpAddresses: {
                                                                locationName: "privateIpAddresses",
                                                                type: "list",
                                                                member: {
                                                                    type: "structure",
                                                                    members: {
                                                                        PrivateDnsName: {
                                                                            locationName: "privateDnsName"
                                                                        },
                                                                        PrivateIpAddress: {
                                                                            locationName: "privateIpAddress"
                                                                        }
                                                                    }
                                                                }
                                                            },
                                                            PublicDnsName: {
                                                                locationName: "publicDnsName"
                                                            },
                                                            PublicIp: {
                                                                locationName: "publicIp"
                                                            },
                                                            SecurityGroups: {
                                                                shape: "S5u",
                                                                locationName: "securityGroups"
                                                            },
                                                            SubnetId: {
                                                                locationName: "subnetId"
                                                            },
                                                            VpcId: {
                                                                locationName: "vpcId"
                                                            }
                                                        }
                                                    }
                                                },
                                                Platform: {
                                                    locationName: "platform"
                                                },
                                                ProductCodes: {
                                                    locationName: "productCodes",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            Code: {
                                                                locationName: "productCodeId"
                                                            },
                                                            ProductType: {
                                                                locationName: "productCodeType"
                                                            }
                                                        }
                                                    }
                                                },
                                                Tags: {
                                                    shape: "S5d",
                                                    locationName: "tags"
                                                }
                                            }
                                        },
                                        EksClusterDetails: {
                                            locationName: "eksClusterDetails",
                                            type: "structure",
                                            members: {
                                                Name: {
                                                    locationName: "name"
                                                },
                                                Arn: {
                                                    locationName: "arn"
                                                },
                                                VpcId: {
                                                    locationName: "vpcId"
                                                },
                                                Status: {
                                                    locationName: "status"
                                                },
                                                Tags: {
                                                    shape: "S5d",
                                                    locationName: "tags"
                                                },
                                                CreatedAt: {
                                                    locationName: "createdAt",
                                                    type: "timestamp"
                                                }
                                            }
                                        },
                                        KubernetesDetails: {
                                            locationName: "kubernetesDetails",
                                            type: "structure",
                                            members: {
                                                KubernetesUserDetails: {
                                                    locationName: "kubernetesUserDetails",
                                                    type: "structure",
                                                    members: {
                                                        Username: {
                                                            locationName: "username"
                                                        },
                                                        Uid: {
                                                            locationName: "uid"
                                                        },
                                                        Groups: {
                                                            shape: "S61",
                                                            locationName: "groups"
                                                        },
                                                        SessionName: {
                                                            locationName: "sessionName",
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        ImpersonatedUser: {
                                                            locationName: "impersonatedUser",
                                                            type: "structure",
                                                            members: {
                                                                Username: {
                                                                    locationName: "username"
                                                                },
                                                                Groups: {
                                                                    shape: "S61",
                                                                    locationName: "groups"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                KubernetesWorkloadDetails: {
                                                    locationName: "kubernetesWorkloadDetails",
                                                    type: "structure",
                                                    members: {
                                                        Name: {
                                                            locationName: "name"
                                                        },
                                                        Type: {
                                                            locationName: "type"
                                                        },
                                                        Uid: {
                                                            locationName: "uid"
                                                        },
                                                        Namespace: {
                                                            locationName: "namespace"
                                                        },
                                                        HostNetwork: {
                                                            locationName: "hostNetwork",
                                                            type: "boolean"
                                                        },
                                                        Containers: {
                                                            shape: "S65",
                                                            locationName: "containers"
                                                        },
                                                        Volumes: {
                                                            shape: "S6a",
                                                            locationName: "volumes"
                                                        },
                                                        ServiceAccountName: {
                                                            locationName: "serviceAccountName"
                                                        },
                                                        HostIPC: {
                                                            locationName: "hostIPC",
                                                            type: "boolean"
                                                        },
                                                        HostPID: {
                                                            locationName: "hostPID",
                                                            type: "boolean"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        ResourceType: {
                                            locationName: "resourceType"
                                        },
                                        EbsVolumeDetails: {
                                            locationName: "ebsVolumeDetails",
                                            type: "structure",
                                            members: {
                                                ScannedVolumeDetails: {
                                                    shape: "S37",
                                                    locationName: "scannedVolumeDetails"
                                                },
                                                SkippedVolumeDetails: {
                                                    shape: "S37",
                                                    locationName: "skippedVolumeDetails"
                                                }
                                            }
                                        },
                                        EcsClusterDetails: {
                                            locationName: "ecsClusterDetails",
                                            type: "structure",
                                            members: {
                                                Name: {
                                                    locationName: "name"
                                                },
                                                Arn: {
                                                    locationName: "arn"
                                                },
                                                Status: {
                                                    locationName: "status"
                                                },
                                                ActiveServicesCount: {
                                                    locationName: "activeServicesCount",
                                                    type: "integer"
                                                },
                                                RegisteredContainerInstancesCount: {
                                                    locationName: "registeredContainerInstancesCount",
                                                    type: "integer"
                                                },
                                                RunningTasksCount: {
                                                    locationName: "runningTasksCount",
                                                    type: "integer"
                                                },
                                                Tags: {
                                                    shape: "S5d",
                                                    locationName: "tags"
                                                },
                                                TaskDetails: {
                                                    locationName: "taskDetails",
                                                    type: "structure",
                                                    members: {
                                                        Arn: {
                                                            locationName: "arn"
                                                        },
                                                        DefinitionArn: {
                                                            locationName: "definitionArn"
                                                        },
                                                        Version: {
                                                            locationName: "version"
                                                        },
                                                        TaskCreatedAt: {
                                                            locationName: "createdAt",
                                                            type: "timestamp"
                                                        },
                                                        StartedAt: {
                                                            locationName: "startedAt",
                                                            type: "timestamp"
                                                        },
                                                        StartedBy: {
                                                            locationName: "startedBy"
                                                        },
                                                        Tags: {
                                                            shape: "S5d",
                                                            locationName: "tags"
                                                        },
                                                        Volumes: {
                                                            shape: "S6a",
                                                            locationName: "volumes"
                                                        },
                                                        Containers: {
                                                            shape: "S65",
                                                            locationName: "containers"
                                                        },
                                                        Group: {
                                                            locationName: "group"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        ContainerDetails: {
                                            shape: "S66",
                                            locationName: "containerDetails"
                                        },
                                        RdsDbInstanceDetails: {
                                            locationName: "rdsDbInstanceDetails",
                                            type: "structure",
                                            members: {
                                                DbInstanceIdentifier: {
                                                    locationName: "dbInstanceIdentifier"
                                                },
                                                Engine: {
                                                    locationName: "engine"
                                                },
                                                EngineVersion: {
                                                    locationName: "engineVersion"
                                                },
                                                DbClusterIdentifier: {
                                                    locationName: "dbClusterIdentifier"
                                                },
                                                DbInstanceArn: {
                                                    locationName: "dbInstanceArn"
                                                },
                                                Tags: {
                                                    shape: "S5d",
                                                    locationName: "tags"
                                                }
                                            }
                                        },
                                        RdsDbUserDetails: {
                                            locationName: "rdsDbUserDetails",
                                            type: "structure",
                                            members: {
                                                User: {
                                                    locationName: "user"
                                                },
                                                Application: {
                                                    locationName: "application"
                                                },
                                                Database: {
                                                    locationName: "database"
                                                },
                                                Ssl: {
                                                    locationName: "ssl"
                                                },
                                                AuthMethod: {
                                                    locationName: "authMethod"
                                                }
                                            }
                                        },
                                        LambdaDetails: {
                                            locationName: "lambdaDetails",
                                            type: "structure",
                                            members: {
                                                FunctionArn: {
                                                    locationName: "functionArn"
                                                },
                                                FunctionName: {
                                                    locationName: "functionName"
                                                },
                                                Description: {
                                                    locationName: "description"
                                                },
                                                LastModifiedAt: {
                                                    locationName: "lastModifiedAt",
                                                    type: "timestamp"
                                                },
                                                RevisionId: {
                                                    locationName: "revisionId"
                                                },
                                                FunctionVersion: {
                                                    locationName: "functionVersion"
                                                },
                                                Role: {
                                                    locationName: "role"
                                                },
                                                VpcConfig: {
                                                    locationName: "vpcConfig",
                                                    type: "structure",
                                                    members: {
                                                        SubnetIds: {
                                                            locationName: "subnetIds",
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        VpcId: {
                                                            locationName: "vpcId"
                                                        },
                                                        SecurityGroups: {
                                                            shape: "S5u",
                                                            locationName: "securityGroups"
                                                        }
                                                    }
                                                },
                                                Tags: {
                                                    shape: "S5d",
                                                    locationName: "tags"
                                                }
                                            }
                                        }
                                    }
                                },
                                SchemaVersion: {
                                    locationName: "schemaVersion"
                                },
                                Service: {
                                    locationName: "service",
                                    type: "structure",
                                    members: {
                                        Action: {
                                            locationName: "action",
                                            type: "structure",
                                            members: {
                                                ActionType: {
                                                    locationName: "actionType"
                                                },
                                                AwsApiCallAction: {
                                                    locationName: "awsApiCallAction",
                                                    type: "structure",
                                                    members: {
                                                        Api: {
                                                            locationName: "api"
                                                        },
                                                        CallerType: {
                                                            locationName: "callerType"
                                                        },
                                                        DomainDetails: {
                                                            locationName: "domainDetails",
                                                            type: "structure",
                                                            members: {
                                                                Domain: {
                                                                    locationName: "domain"
                                                                }
                                                            }
                                                        },
                                                        ErrorCode: {
                                                            locationName: "errorCode"
                                                        },
                                                        UserAgent: {
                                                            locationName: "userAgent"
                                                        },
                                                        RemoteIpDetails: {
                                                            shape: "S6p",
                                                            locationName: "remoteIpDetails"
                                                        },
                                                        ServiceName: {
                                                            locationName: "serviceName"
                                                        },
                                                        RemoteAccountDetails: {
                                                            locationName: "remoteAccountDetails",
                                                            type: "structure",
                                                            members: {
                                                                AccountId: {
                                                                    locationName: "accountId"
                                                                },
                                                                Affiliated: {
                                                                    locationName: "affiliated",
                                                                    type: "boolean"
                                                                }
                                                            }
                                                        },
                                                        AffectedResources: {
                                                            locationName: "affectedResources",
                                                            type: "map",
                                                            key: {},
                                                            value: {}
                                                        }
                                                    }
                                                },
                                                DnsRequestAction: {
                                                    locationName: "dnsRequestAction",
                                                    type: "structure",
                                                    members: {
                                                        Domain: {
                                                            locationName: "domain"
                                                        },
                                                        Protocol: {
                                                            locationName: "protocol"
                                                        },
                                                        Blocked: {
                                                            locationName: "blocked",
                                                            type: "boolean"
                                                        },
                                                        DomainWithSuffix: {
                                                            locationName: "domainWithSuffix"
                                                        }
                                                    }
                                                },
                                                NetworkConnectionAction: {
                                                    locationName: "networkConnectionAction",
                                                    type: "structure",
                                                    members: {
                                                        Blocked: {
                                                            locationName: "blocked",
                                                            type: "boolean"
                                                        },
                                                        ConnectionDirection: {
                                                            locationName: "connectionDirection"
                                                        },
                                                        LocalPortDetails: {
                                                            shape: "S6y",
                                                            locationName: "localPortDetails"
                                                        },
                                                        Protocol: {
                                                            locationName: "protocol"
                                                        },
                                                        LocalIpDetails: {
                                                            shape: "S6z",
                                                            locationName: "localIpDetails"
                                                        },
                                                        RemoteIpDetails: {
                                                            shape: "S6p",
                                                            locationName: "remoteIpDetails"
                                                        },
                                                        RemotePortDetails: {
                                                            locationName: "remotePortDetails",
                                                            type: "structure",
                                                            members: {
                                                                Port: {
                                                                    locationName: "port",
                                                                    type: "integer"
                                                                },
                                                                PortName: {
                                                                    locationName: "portName"
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                PortProbeAction: {
                                                    locationName: "portProbeAction",
                                                    type: "structure",
                                                    members: {
                                                        Blocked: {
                                                            locationName: "blocked",
                                                            type: "boolean"
                                                        },
                                                        PortProbeDetails: {
                                                            locationName: "portProbeDetails",
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    LocalPortDetails: {
                                                                        shape: "S6y",
                                                                        locationName: "localPortDetails"
                                                                    },
                                                                    LocalIpDetails: {
                                                                        shape: "S6z",
                                                                        locationName: "localIpDetails"
                                                                    },
                                                                    RemoteIpDetails: {
                                                                        shape: "S6p",
                                                                        locationName: "remoteIpDetails"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                KubernetesApiCallAction: {
                                                    locationName: "kubernetesApiCallAction",
                                                    type: "structure",
                                                    members: {
                                                        RequestUri: {
                                                            locationName: "requestUri"
                                                        },
                                                        Verb: {
                                                            locationName: "verb"
                                                        },
                                                        SourceIps: {
                                                            locationName: "sourceIps",
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        UserAgent: {
                                                            locationName: "userAgent"
                                                        },
                                                        RemoteIpDetails: {
                                                            shape: "S6p",
                                                            locationName: "remoteIpDetails"
                                                        },
                                                        StatusCode: {
                                                            locationName: "statusCode",
                                                            type: "integer"
                                                        },
                                                        Parameters: {
                                                            locationName: "parameters"
                                                        },
                                                        Resource: {
                                                            locationName: "resource"
                                                        },
                                                        Subresource: {
                                                            locationName: "subresource"
                                                        },
                                                        Namespace: {
                                                            locationName: "namespace"
                                                        },
                                                        ResourceName: {
                                                            locationName: "resourceName"
                                                        }
                                                    }
                                                },
                                                RdsLoginAttemptAction: {
                                                    locationName: "rdsLoginAttemptAction",
                                                    type: "structure",
                                                    members: {
                                                        RemoteIpDetails: {
                                                            shape: "S6p",
                                                            locationName: "remoteIpDetails"
                                                        },
                                                        LoginAttributes: {
                                                            type: "list",
                                                            member: {
                                                                type: "structure",
                                                                members: {
                                                                    User: {
                                                                        locationName: "user"
                                                                    },
                                                                    Application: {
                                                                        locationName: "application"
                                                                    },
                                                                    FailedLoginAttempts: {
                                                                        locationName: "failedLoginAttempts",
                                                                        type: "integer"
                                                                    },
                                                                    SuccessfulLoginAttempts: {
                                                                        locationName: "successfulLoginAttempts",
                                                                        type: "integer"
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                KubernetesPermissionCheckedDetails: {
                                                    locationName: "kubernetesPermissionCheckedDetails",
                                                    type: "structure",
                                                    members: {
                                                        Verb: {
                                                            locationName: "verb"
                                                        },
                                                        Resource: {
                                                            locationName: "resource"
                                                        },
                                                        Namespace: {
                                                            locationName: "namespace"
                                                        },
                                                        Allowed: {
                                                            locationName: "allowed",
                                                            type: "boolean"
                                                        }
                                                    }
                                                },
                                                KubernetesRoleBindingDetails: {
                                                    locationName: "kubernetesRoleBindingDetails",
                                                    type: "structure",
                                                    members: {
                                                        Kind: {
                                                            locationName: "kind"
                                                        },
                                                        Name: {
                                                            locationName: "name"
                                                        },
                                                        Uid: {
                                                            locationName: "uid"
                                                        },
                                                        RoleRefName: {
                                                            locationName: "roleRefName"
                                                        },
                                                        RoleRefKind: {
                                                            locationName: "roleRefKind"
                                                        }
                                                    }
                                                },
                                                KubernetesRoleDetails: {
                                                    locationName: "kubernetesRoleDetails",
                                                    type: "structure",
                                                    members: {
                                                        Kind: {
                                                            locationName: "kind"
                                                        },
                                                        Name: {
                                                            locationName: "name"
                                                        },
                                                        Uid: {
                                                            locationName: "uid"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Evidence: {
                                            locationName: "evidence",
                                            type: "structure",
                                            members: {
                                                ThreatIntelligenceDetails: {
                                                    locationName: "threatIntelligenceDetails",
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            ThreatListName: {
                                                                locationName: "threatListName"
                                                            },
                                                            ThreatNames: {
                                                                locationName: "threatNames",
                                                                type: "list",
                                                                member: {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Archived: {
                                            locationName: "archived",
                                            type: "boolean"
                                        },
                                        Count: {
                                            locationName: "count",
                                            type: "integer"
                                        },
                                        DetectorId: {
                                            locationName: "detectorId"
                                        },
                                        EventFirstSeen: {
                                            locationName: "eventFirstSeen"
                                        },
                                        EventLastSeen: {
                                            locationName: "eventLastSeen"
                                        },
                                        ResourceRole: {
                                            locationName: "resourceRole"
                                        },
                                        ServiceName: {
                                            locationName: "serviceName"
                                        },
                                        UserFeedback: {
                                            locationName: "userFeedback"
                                        },
                                        AdditionalInfo: {
                                            locationName: "additionalInfo",
                                            type: "structure",
                                            members: {
                                                Value: {
                                                    locationName: "value"
                                                },
                                                Type: {
                                                    locationName: "type"
                                                }
                                            }
                                        },
                                        FeatureName: {
                                            locationName: "featureName"
                                        },
                                        EbsVolumeScanDetails: {
                                            locationName: "ebsVolumeScanDetails",
                                            type: "structure",
                                            members: {
                                                ScanId: {
                                                    locationName: "scanId"
                                                },
                                                ScanStartedAt: {
                                                    locationName: "scanStartedAt",
                                                    type: "timestamp"
                                                },
                                                ScanCompletedAt: {
                                                    locationName: "scanCompletedAt",
                                                    type: "timestamp"
                                                },
                                                TriggerFindingId: {
                                                    locationName: "triggerFindingId"
                                                },
                                                Sources: {
                                                    locationName: "sources",
                                                    type: "list",
                                                    member: {}
                                                },
                                                ScanDetections: {
                                                    locationName: "scanDetections",
                                                    type: "structure",
                                                    members: {
                                                        ScannedItemCount: {
                                                            locationName: "scannedItemCount",
                                                            type: "structure",
                                                            members: {
                                                                TotalGb: {
                                                                    locationName: "totalGb",
                                                                    type: "integer"
                                                                },
                                                                Files: {
                                                                    locationName: "files",
                                                                    type: "integer"
                                                                },
                                                                Volumes: {
                                                                    locationName: "volumes",
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        ThreatsDetectedItemCount: {
                                                            locationName: "threatsDetectedItemCount",
                                                            type: "structure",
                                                            members: {
                                                                Files: {
                                                                    locationName: "files",
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        HighestSeverityThreatDetails: {
                                                            locationName: "highestSeverityThreatDetails",
                                                            type: "structure",
                                                            members: {
                                                                Severity: {
                                                                    locationName: "severity"
                                                                },
                                                                ThreatName: {
                                                                    locationName: "threatName"
                                                                },
                                                                Count: {
                                                                    locationName: "count",
                                                                    type: "integer"
                                                                }
                                                            }
                                                        },
                                                        ThreatDetectedByName: {
                                                            locationName: "threatDetectedByName",
                                                            type: "structure",
                                                            members: {
                                                                ItemCount: {
                                                                    locationName: "itemCount",
                                                                    type: "integer"
                                                                },
                                                                UniqueThreatNameCount: {
                                                                    locationName: "uniqueThreatNameCount",
                                                                    type: "integer"
                                                                },
                                                                Shortened: {
                                                                    locationName: "shortened",
                                                                    type: "boolean"
                                                                },
                                                                ThreatNames: {
                                                                    locationName: "threatNames",
                                                                    type: "list",
                                                                    member: {
                                                                        type: "structure",
                                                                        members: {
                                                                            Name: {
                                                                                locationName: "name"
                                                                            },
                                                                            Severity: {
                                                                                locationName: "severity"
                                                                            },
                                                                            ItemCount: {
                                                                                locationName: "itemCount",
                                                                                type: "integer"
                                                                            },
                                                                            FilePaths: {
                                                                                locationName: "filePaths",
                                                                                type: "list",
                                                                                member: {
                                                                                    type: "structure",
                                                                                    members: {
                                                                                        FilePath: {
                                                                                            locationName: "filePath"
                                                                                        },
                                                                                        VolumeArn: {
                                                                                            locationName: "volumeArn"
                                                                                        },
                                                                                        Hash: {
                                                                                            locationName: "hash"
                                                                                        },
                                                                                        FileName: {
                                                                                            locationName: "fileName"
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                ScanType: {
                                                    locationName: "scanType"
                                                }
                                            }
                                        },
                                        RuntimeDetails: {
                                            locationName: "runtimeDetails",
                                            type: "structure",
                                            members: {
                                                Process: {
                                                    shape: "S7t",
                                                    locationName: "process"
                                                },
                                                Context: {
                                                    locationName: "context",
                                                    type: "structure",
                                                    members: {
                                                        ModifyingProcess: {
                                                            shape: "S7t",
                                                            locationName: "modifyingProcess"
                                                        },
                                                        ModifiedAt: {
                                                            locationName: "modifiedAt",
                                                            type: "timestamp"
                                                        },
                                                        ScriptPath: {
                                                            locationName: "scriptPath"
                                                        },
                                                        LibraryPath: {
                                                            locationName: "libraryPath"
                                                        },
                                                        LdPreloadValue: {
                                                            locationName: "ldPreloadValue"
                                                        },
                                                        SocketPath: {
                                                            locationName: "socketPath"
                                                        },
                                                        RuncBinaryPath: {
                                                            locationName: "runcBinaryPath"
                                                        },
                                                        ReleaseAgentPath: {
                                                            locationName: "releaseAgentPath"
                                                        },
                                                        MountSource: {
                                                            locationName: "mountSource"
                                                        },
                                                        MountTarget: {
                                                            locationName: "mountTarget"
                                                        },
                                                        FileSystemType: {
                                                            locationName: "fileSystemType"
                                                        },
                                                        Flags: {
                                                            locationName: "flags",
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        ModuleName: {
                                                            locationName: "moduleName"
                                                        },
                                                        ModuleFilePath: {
                                                            locationName: "moduleFilePath"
                                                        },
                                                        ModuleSha256: {
                                                            locationName: "moduleSha256"
                                                        },
                                                        ShellHistoryFilePath: {
                                                            locationName: "shellHistoryFilePath"
                                                        },
                                                        TargetProcess: {
                                                            shape: "S7t",
                                                            locationName: "targetProcess"
                                                        },
                                                        AddressFamily: {
                                                            locationName: "addressFamily"
                                                        },
                                                        IanaProtocolNumber: {
                                                            locationName: "ianaProtocolNumber",
                                                            type: "integer"
                                                        },
                                                        MemoryRegions: {
                                                            locationName: "memoryRegions",
                                                            type: "list",
                                                            member: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Detection: {
                                            locationName: "detection",
                                            type: "structure",
                                            members: {
                                                Anomaly: {
                                                    locationName: "anomaly",
                                                    type: "structure",
                                                    members: {
                                                        Profiles: {
                                                            locationName: "profiles",
                                                            type: "map",
                                                            key: {},
                                                            value: {
                                                                type: "map",
                                                                key: {},
                                                                value: {
                                                                    type: "list",
                                                                    member: {
                                                                        shape: "S84"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        Unusual: {
                                                            locationName: "unusual",
                                                            type: "structure",
                                                            members: {
                                                                Behavior: {
                                                                    locationName: "behavior",
                                                                    type: "map",
                                                                    key: {},
                                                                    value: {
                                                                        type: "map",
                                                                        key: {},
                                                                        value: {
                                                                            shape: "S84"
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Severity: {
                                    locationName: "severity",
                                    type: "double"
                                },
                                Title: {
                                    locationName: "title"
                                },
                                Type: {
                                    locationName: "type"
                                },
                                UpdatedAt: {
                                    locationName: "updatedAt"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetFindingsStatistics: {
            http: {
                requestUri: "/detector/{detectorId}/findings/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingStatisticTypes" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingStatisticTypes: {
                        locationName: "findingStatisticTypes",
                        type: "list",
                        member: {}
                    },
                    FindingCriteria: {
                        shape: "S16",
                        locationName: "findingCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FindingStatistics" ],
                members: {
                    FindingStatistics: {
                        locationName: "findingStatistics",
                        type: "structure",
                        members: {
                            CountBySeverity: {
                                locationName: "countBySeverity",
                                type: "map",
                                key: {},
                                value: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetIPSet: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/ipset/{ipSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "IpSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    IpSetId: {
                        location: "uri",
                        locationName: "ipSetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Format", "Location", "Status" ],
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            }
        },
        GetInvitationsCount: {
            http: {
                method: "GET",
                requestUri: "/invitation/count",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    InvitationsCount: {
                        locationName: "invitationsCount",
                        type: "integer"
                    }
                }
            }
        },
        GetMalwareScanSettings: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/malware-scan-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScanResourceCriteria: {
                        shape: "S8p",
                        locationName: "scanResourceCriteria"
                    },
                    EbsSnapshotPreservation: {
                        locationName: "ebsSnapshotPreservation"
                    }
                }
            }
        },
        GetMasterAccount: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/master",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    }
                },
                deprecated: true,
                deprecatedMessage: "This input is deprecated, use GetAdministratorAccountRequest instead"
            },
            output: {
                type: "structure",
                required: [ "Master" ],
                members: {
                    Master: {
                        locationName: "master",
                        type: "structure",
                        members: {
                            AccountId: {
                                locationName: "accountId"
                            },
                            InvitationId: {
                                locationName: "invitationId"
                            },
                            RelationshipStatus: {
                                locationName: "relationshipStatus"
                            },
                            InvitedAt: {
                                locationName: "invitedAt"
                            }
                        }
                    }
                },
                deprecated: true,
                deprecatedMessage: "This output is deprecated, use GetAdministratorAccountResponse instead"
            },
            deprecated: true,
            deprecatedMessage: "This operation is deprecated, use GetAdministratorAccount instead"
        },
        GetMemberDetectors: {
            http: {
                requestUri: "/detector/{detectorId}/member/detector/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MemberDataSourceConfigurations", "UnprocessedAccounts" ],
                members: {
                    MemberDataSourceConfigurations: {
                        locationName: "members",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AccountId" ],
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                DataSources: {
                                    shape: "S4p",
                                    deprecated: true,
                                    deprecatedMessage: "This parameter is deprecated, use Features instead",
                                    locationName: "dataSources"
                                },
                                Features: {
                                    locationName: "features",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            },
                                            Status: {
                                                locationName: "status"
                                            },
                                            UpdatedAt: {
                                                locationName: "updatedAt",
                                                type: "timestamp"
                                            },
                                            AdditionalConfiguration: {
                                                locationName: "additionalConfiguration",
                                                type: "list",
                                                member: {
                                                    type: "structure",
                                                    members: {
                                                        Name: {
                                                            locationName: "name"
                                                        },
                                                        Status: {
                                                            locationName: "status"
                                                        },
                                                        UpdatedAt: {
                                                            locationName: "updatedAt",
                                                            type: "timestamp"
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        GetMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Members", "UnprocessedAccounts" ],
                members: {
                    Members: {
                        shape: "S99",
                        locationName: "members"
                    },
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        GetRemainingFreeTrialDays: {
            http: {
                requestUri: "/detector/{detectorId}/freeTrial/daysRemaining",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Accounts: {
                        locationName: "accounts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                DataSources: {
                                    deprecated: true,
                                    deprecatedMessage: "This parameter is deprecated, use Features instead",
                                    locationName: "dataSources",
                                    type: "structure",
                                    members: {
                                        CloudTrail: {
                                            shape: "S9g",
                                            locationName: "cloudTrail"
                                        },
                                        DnsLogs: {
                                            shape: "S9g",
                                            locationName: "dnsLogs"
                                        },
                                        FlowLogs: {
                                            shape: "S9g",
                                            locationName: "flowLogs"
                                        },
                                        S3Logs: {
                                            shape: "S9g",
                                            locationName: "s3Logs"
                                        },
                                        Kubernetes: {
                                            locationName: "kubernetes",
                                            type: "structure",
                                            members: {
                                                AuditLogs: {
                                                    shape: "S9g",
                                                    locationName: "auditLogs"
                                                }
                                            }
                                        },
                                        MalwareProtection: {
                                            locationName: "malwareProtection",
                                            type: "structure",
                                            members: {
                                                ScanEc2InstanceWithFindings: {
                                                    shape: "S9g",
                                                    locationName: "scanEc2InstanceWithFindings"
                                                }
                                            }
                                        }
                                    }
                                },
                                Features: {
                                    locationName: "features",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            },
                                            FreeTrialDaysRemaining: {
                                                locationName: "freeTrialDaysRemaining",
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        GetThreatIntelSet: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "ThreatIntelSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ThreatIntelSetId: {
                        location: "uri",
                        locationName: "threatIntelSetId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name", "Format", "Location", "Status" ],
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Format: {
                        locationName: "format"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Status: {
                        locationName: "status"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            }
        },
        GetUsageStatistics: {
            http: {
                requestUri: "/detector/{detectorId}/usage/statistics",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "UsageStatisticType", "UsageCriteria" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    UsageStatisticType: {
                        locationName: "usageStatisticsType"
                    },
                    UsageCriteria: {
                        locationName: "usageCriteria",
                        type: "structure",
                        members: {
                            AccountIds: {
                                shape: "S25",
                                locationName: "accountIds"
                            },
                            DataSources: {
                                deprecated: true,
                                deprecatedMessage: "This parameter is deprecated, use Features instead",
                                locationName: "dataSources",
                                type: "list",
                                member: {}
                            },
                            Resources: {
                                locationName: "resources",
                                type: "list",
                                member: {}
                            },
                            Features: {
                                locationName: "features",
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    Unit: {
                        locationName: "unit"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UsageStatistics: {
                        locationName: "usageStatistics",
                        type: "structure",
                        members: {
                            SumByAccount: {
                                locationName: "sumByAccount",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        AccountId: {
                                            locationName: "accountId"
                                        },
                                        Total: {
                                            shape: "Sa1",
                                            locationName: "total"
                                        }
                                    }
                                }
                            },
                            SumByDataSource: {
                                locationName: "sumByDataSource",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DataSource: {
                                            locationName: "dataSource"
                                        },
                                        Total: {
                                            shape: "Sa1",
                                            locationName: "total"
                                        }
                                    }
                                }
                            },
                            SumByResource: {
                                shape: "Sa4",
                                locationName: "sumByResource"
                            },
                            TopResources: {
                                shape: "Sa4",
                                locationName: "topResources"
                            },
                            SumByFeature: {
                                locationName: "sumByFeature",
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Feature: {
                                            locationName: "feature"
                                        },
                                        Total: {
                                            shape: "Sa1",
                                            locationName: "total"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        InviteMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/invite",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    },
                    DisableEmailNotification: {
                        locationName: "disableEmailNotification",
                        type: "boolean"
                    },
                    Message: {
                        locationName: "message"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        ListCoverage: {
            http: {
                requestUri: "/detector/{detectorId}/coverage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    FilterCriteria: {
                        shape: "S49",
                        locationName: "filterCriteria"
                    },
                    SortCriteria: {
                        locationName: "sortCriteria",
                        type: "structure",
                        members: {
                            AttributeName: {
                                locationName: "attributeName"
                            },
                            OrderBy: {
                                locationName: "orderBy"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Resources" ],
                members: {
                    Resources: {
                        locationName: "resources",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ResourceId: {
                                    locationName: "resourceId"
                                },
                                DetectorId: {
                                    locationName: "detectorId"
                                },
                                AccountId: {
                                    locationName: "accountId"
                                },
                                ResourceDetails: {
                                    locationName: "resourceDetails",
                                    type: "structure",
                                    members: {
                                        EksClusterDetails: {
                                            locationName: "eksClusterDetails",
                                            type: "structure",
                                            members: {
                                                ClusterName: {
                                                    locationName: "clusterName"
                                                },
                                                CoveredNodes: {
                                                    locationName: "coveredNodes",
                                                    type: "long"
                                                },
                                                CompatibleNodes: {
                                                    locationName: "compatibleNodes",
                                                    type: "long"
                                                },
                                                AddonDetails: {
                                                    locationName: "addonDetails",
                                                    type: "structure",
                                                    members: {
                                                        AddonVersion: {
                                                            locationName: "addonVersion"
                                                        },
                                                        AddonStatus: {
                                                            locationName: "addonStatus"
                                                        }
                                                    }
                                                },
                                                ManagementType: {
                                                    locationName: "managementType"
                                                }
                                            }
                                        },
                                        ResourceType: {
                                            locationName: "resourceType"
                                        },
                                        EcsClusterDetails: {
                                            locationName: "ecsClusterDetails",
                                            type: "structure",
                                            members: {
                                                ClusterName: {
                                                    locationName: "clusterName"
                                                },
                                                FargateDetails: {
                                                    locationName: "fargateDetails",
                                                    type: "structure",
                                                    members: {
                                                        Issues: {
                                                            locationName: "issues",
                                                            type: "list",
                                                            member: {}
                                                        },
                                                        ManagementType: {
                                                            locationName: "managementType"
                                                        }
                                                    }
                                                },
                                                ContainerInstanceDetails: {
                                                    locationName: "containerInstanceDetails",
                                                    type: "structure",
                                                    members: {
                                                        CoveredContainerInstances: {
                                                            locationName: "coveredContainerInstances",
                                                            type: "long"
                                                        },
                                                        CompatibleContainerInstances: {
                                                            locationName: "compatibleContainerInstances",
                                                            type: "long"
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        Ec2InstanceDetails: {
                                            locationName: "ec2InstanceDetails",
                                            type: "structure",
                                            members: {
                                                InstanceId: {
                                                    locationName: "instanceId"
                                                },
                                                InstanceType: {
                                                    locationName: "instanceType"
                                                },
                                                ClusterArn: {
                                                    locationName: "clusterArn"
                                                },
                                                AgentDetails: {
                                                    locationName: "agentDetails",
                                                    type: "structure",
                                                    members: {
                                                        Version: {
                                                            locationName: "version"
                                                        }
                                                    }
                                                },
                                                ManagementType: {
                                                    locationName: "managementType"
                                                }
                                            }
                                        }
                                    }
                                },
                                CoverageStatus: {
                                    locationName: "coverageStatus"
                                },
                                Issue: {
                                    locationName: "issue"
                                },
                                UpdatedAt: {
                                    locationName: "updatedAt",
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListDetectors: {
            http: {
                method: "GET",
                requestUri: "/detector",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "DetectorIds" ],
                members: {
                    DetectorIds: {
                        locationName: "detectorIds",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFilters: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/filter",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FilterNames" ],
                members: {
                    FilterNames: {
                        locationName: "filterNames",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingCriteria: {
                        shape: "S16",
                        locationName: "findingCriteria"
                    },
                    SortCriteria: {
                        shape: "S2u",
                        locationName: "sortCriteria"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FindingIds" ],
                members: {
                    FindingIds: {
                        shape: "S8",
                        locationName: "findingIds"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListIPSets: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/ipset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IpSetIds" ],
                members: {
                    IpSetIds: {
                        locationName: "ipSetIds",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListInvitations: {
            http: {
                method: "GET",
                requestUri: "/invitation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Invitations: {
                        locationName: "invitations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {
                                    locationName: "accountId"
                                },
                                InvitationId: {
                                    locationName: "invitationId"
                                },
                                RelationshipStatus: {
                                    locationName: "relationshipStatus"
                                },
                                InvitedAt: {
                                    locationName: "invitedAt"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListMembers: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/member",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    OnlyAssociated: {
                        location: "querystring",
                        locationName: "onlyAssociated"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Members: {
                        shape: "S99",
                        locationName: "members"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListOrganizationAdminAccounts: {
            http: {
                method: "GET",
                requestUri: "/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AdminAccounts: {
                        locationName: "adminAccounts",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AdminAccountId: {
                                    locationName: "adminAccountId"
                                },
                                AdminStatus: {
                                    locationName: "adminStatus"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListPublishingDestinations: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/publishingDestination",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Destinations" ],
                members: {
                    Destinations: {
                        locationName: "destinations",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DestinationId", "DestinationType", "Status" ],
                            members: {
                                DestinationId: {
                                    locationName: "destinationId"
                                },
                                DestinationType: {
                                    locationName: "destinationType"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            }
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            }
        },
        ListThreatIntelSets: {
            http: {
                method: "GET",
                requestUri: "/detector/{detectorId}/threatintelset",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ThreatIntelSetIds" ],
                members: {
                    ThreatIntelSetIds: {
                        locationName: "threatIntelSetIds",
                        type: "list",
                        member: {}
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        StartMalwareScan: {
            http: {
                requestUri: "/malware-scan/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ScanId: {
                        locationName: "scanId"
                    }
                }
            }
        },
        StartMonitoringMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        StopMonitoringMembers: {
            http: {
                requestUri: "/detector/{detectorId}/member/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "Sl",
                        locationName: "tags"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UnarchiveFindings: {
            http: {
                requestUri: "/detector/{detectorId}/findings/unarchive",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S8",
                        locationName: "findingIds"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDetector: {
            http: {
                requestUri: "/detector/{detectorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    Enable: {
                        locationName: "enable",
                        type: "boolean"
                    },
                    FindingPublishingFrequency: {
                        locationName: "findingPublishingFrequency"
                    },
                    DataSources: {
                        shape: "Sf",
                        deprecated: true,
                        deprecatedMessage: "This parameter is deprecated, use Features instead",
                        locationName: "dataSources"
                    },
                    Features: {
                        shape: "So",
                        locationName: "features"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFilter: {
            http: {
                requestUri: "/detector/{detectorId}/filter/{filterName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FilterName" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FilterName: {
                        location: "uri",
                        locationName: "filterName"
                    },
                    Description: {
                        locationName: "description"
                    },
                    Action: {
                        locationName: "action"
                    },
                    Rank: {
                        locationName: "rank",
                        type: "integer"
                    },
                    FindingCriteria: {
                        shape: "S16",
                        locationName: "findingCriteria"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        UpdateFindingsFeedback: {
            http: {
                requestUri: "/detector/{detectorId}/findings/feedback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "FindingIds", "Feedback" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    FindingIds: {
                        shape: "S8",
                        locationName: "findingIds"
                    },
                    Feedback: {
                        locationName: "feedback"
                    },
                    Comments: {
                        locationName: "comments"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateIPSet: {
            http: {
                requestUri: "/detector/{detectorId}/ipset/{ipSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "IpSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    IpSetId: {
                        location: "uri",
                        locationName: "ipSetId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMalwareScanSettings: {
            http: {
                requestUri: "/detector/{detectorId}/malware-scan-settings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ScanResourceCriteria: {
                        shape: "S8p",
                        locationName: "scanResourceCriteria"
                    },
                    EbsSnapshotPreservation: {
                        locationName: "ebsSnapshotPreservation"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMemberDetectors: {
            http: {
                requestUri: "/detector/{detectorId}/member/detector/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "AccountIds" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AccountIds: {
                        shape: "S25",
                        locationName: "accountIds"
                    },
                    DataSources: {
                        shape: "Sf",
                        deprecated: true,
                        deprecatedMessage: "This parameter is deprecated, use Features instead",
                        locationName: "dataSources"
                    },
                    Features: {
                        locationName: "features",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                Status: {
                                    locationName: "status"
                                },
                                AdditionalConfiguration: {
                                    locationName: "additionalConfiguration",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            },
                                            Status: {
                                                locationName: "status"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UnprocessedAccounts" ],
                members: {
                    UnprocessedAccounts: {
                        shape: "S1r",
                        locationName: "unprocessedAccounts"
                    }
                }
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/detector/{detectorId}/admin",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    AutoEnable: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated, use AutoEnableOrganizationMembers instead",
                        locationName: "autoEnable",
                        type: "boolean"
                    },
                    DataSources: {
                        deprecated: true,
                        deprecatedMessage: "This parameter is deprecated, use Features instead",
                        locationName: "dataSources",
                        type: "structure",
                        members: {
                            S3Logs: {
                                locationName: "s3Logs",
                                type: "structure",
                                required: [ "AutoEnable" ],
                                members: {
                                    AutoEnable: {
                                        locationName: "autoEnable",
                                        type: "boolean"
                                    }
                                }
                            },
                            Kubernetes: {
                                locationName: "kubernetes",
                                type: "structure",
                                required: [ "AuditLogs" ],
                                members: {
                                    AuditLogs: {
                                        locationName: "auditLogs",
                                        type: "structure",
                                        required: [ "AutoEnable" ],
                                        members: {
                                            AutoEnable: {
                                                locationName: "autoEnable",
                                                type: "boolean"
                                            }
                                        }
                                    }
                                }
                            },
                            MalwareProtection: {
                                locationName: "malwareProtection",
                                type: "structure",
                                members: {
                                    ScanEc2InstanceWithFindings: {
                                        locationName: "scanEc2InstanceWithFindings",
                                        type: "structure",
                                        members: {
                                            EbsVolumes: {
                                                locationName: "ebsVolumes",
                                                type: "structure",
                                                members: {
                                                    AutoEnable: {
                                                        locationName: "autoEnable",
                                                        type: "boolean"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Features: {
                        locationName: "features",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                AutoEnable: {
                                    locationName: "autoEnable"
                                },
                                AdditionalConfiguration: {
                                    locationName: "additionalConfiguration",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            },
                                            AutoEnable: {
                                                locationName: "autoEnable"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    AutoEnableOrganizationMembers: {
                        locationName: "autoEnableOrganizationMembers"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePublishingDestination: {
            http: {
                requestUri: "/detector/{detectorId}/publishingDestination/{destinationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "DestinationId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    DestinationId: {
                        location: "uri",
                        locationName: "destinationId"
                    },
                    DestinationProperties: {
                        shape: "S1v",
                        locationName: "destinationProperties"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateThreatIntelSet: {
            http: {
                requestUri: "/detector/{detectorId}/threatintelset/{threatIntelSetId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DetectorId", "ThreatIntelSetId" ],
                members: {
                    DetectorId: {
                        location: "uri",
                        locationName: "detectorId"
                    },
                    ThreatIntelSetId: {
                        location: "uri",
                        locationName: "threatIntelSetId"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Location: {
                        locationName: "location"
                    },
                    Activate: {
                        locationName: "activate",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S8: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            members: {
                S3Logs: {
                    locationName: "s3Logs",
                    type: "structure",
                    required: [ "Enable" ],
                    members: {
                        Enable: {
                            locationName: "enable",
                            type: "boolean"
                        }
                    }
                },
                Kubernetes: {
                    locationName: "kubernetes",
                    type: "structure",
                    required: [ "AuditLogs" ],
                    members: {
                        AuditLogs: {
                            locationName: "auditLogs",
                            type: "structure",
                            required: [ "Enable" ],
                            members: {
                                Enable: {
                                    locationName: "enable",
                                    type: "boolean"
                                }
                            }
                        }
                    }
                },
                MalwareProtection: {
                    locationName: "malwareProtection",
                    type: "structure",
                    members: {
                        ScanEc2InstanceWithFindings: {
                            locationName: "scanEc2InstanceWithFindings",
                            type: "structure",
                            members: {
                                EbsVolumes: {
                                    locationName: "ebsVolumes",
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sl: {
            type: "map",
            key: {},
            value: {}
        },
        So: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    Status: {
                        locationName: "status"
                    },
                    AdditionalConfiguration: {
                        locationName: "additionalConfiguration",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    locationName: "name"
                                },
                                Status: {
                                    locationName: "status"
                                }
                            }
                        }
                    }
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                ScanEc2InstanceWithFindings: {
                    locationName: "scanEc2InstanceWithFindings",
                    type: "structure",
                    members: {
                        EbsVolumes: {
                            locationName: "ebsVolumes",
                            type: "structure",
                            members: {
                                Status: {
                                    locationName: "status"
                                },
                                Reason: {
                                    locationName: "reason"
                                }
                            }
                        }
                    }
                },
                ServiceRole: {
                    locationName: "serviceRole"
                }
            }
        },
        S16: {
            type: "structure",
            members: {
                Criterion: {
                    locationName: "criterion",
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            Eq: {
                                deprecated: true,
                                locationName: "eq",
                                type: "list",
                                member: {}
                            },
                            Neq: {
                                deprecated: true,
                                locationName: "neq",
                                type: "list",
                                member: {}
                            },
                            Gt: {
                                deprecated: true,
                                locationName: "gt",
                                type: "integer"
                            },
                            Gte: {
                                deprecated: true,
                                locationName: "gte",
                                type: "integer"
                            },
                            Lt: {
                                deprecated: true,
                                locationName: "lt",
                                type: "integer"
                            },
                            Lte: {
                                deprecated: true,
                                locationName: "lte",
                                type: "integer"
                            },
                            Equals: {
                                shape: "S1c",
                                locationName: "equals"
                            },
                            NotEquals: {
                                shape: "S1d",
                                locationName: "notEquals"
                            },
                            GreaterThan: {
                                locationName: "greaterThan",
                                type: "long"
                            },
                            GreaterThanOrEqual: {
                                locationName: "greaterThanOrEqual",
                                type: "long"
                            },
                            LessThan: {
                                locationName: "lessThan",
                                type: "long"
                            },
                            LessThanOrEqual: {
                                locationName: "lessThanOrEqual",
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "list",
            member: {}
        },
        S1r: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AccountId", "Result" ],
                members: {
                    AccountId: {
                        locationName: "accountId"
                    },
                    Result: {
                        locationName: "result"
                    }
                }
            }
        },
        S1v: {
            type: "structure",
            members: {
                DestinationArn: {
                    locationName: "destinationArn"
                },
                KmsKeyArn: {
                    locationName: "kmsKeyArn"
                }
            }
        },
        S25: {
            type: "list",
            member: {}
        },
        S2u: {
            type: "structure",
            members: {
                AttributeName: {
                    locationName: "attributeName"
                },
                OrderBy: {
                    locationName: "orderBy"
                }
            }
        },
        S37: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    VolumeArn: {
                        locationName: "volumeArn"
                    },
                    VolumeType: {
                        locationName: "volumeType"
                    },
                    DeviceName: {
                        locationName: "deviceName"
                    },
                    VolumeSizeInGB: {
                        locationName: "volumeSizeInGB",
                        type: "integer"
                    },
                    EncryptionType: {
                        locationName: "encryptionType"
                    },
                    SnapshotArn: {
                        locationName: "snapshotArn"
                    },
                    KmsKeyArn: {
                        locationName: "kmsKeyArn"
                    }
                }
            }
        },
        S49: {
            type: "structure",
            members: {
                FilterCriterion: {
                    locationName: "filterCriterion",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CriterionKey: {
                                locationName: "criterionKey"
                            },
                            FilterCondition: {
                                locationName: "filterCondition",
                                type: "structure",
                                members: {
                                    Equals: {
                                        shape: "S1c",
                                        locationName: "equals"
                                    },
                                    NotEquals: {
                                        shape: "S1d",
                                        locationName: "notEquals"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S4p: {
            type: "structure",
            required: [ "CloudTrail", "DNSLogs", "FlowLogs", "S3Logs" ],
            members: {
                CloudTrail: {
                    locationName: "cloudTrail",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                DNSLogs: {
                    locationName: "dnsLogs",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                FlowLogs: {
                    locationName: "flowLogs",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                S3Logs: {
                    locationName: "s3Logs",
                    type: "structure",
                    required: [ "Status" ],
                    members: {
                        Status: {
                            locationName: "status"
                        }
                    }
                },
                Kubernetes: {
                    locationName: "kubernetes",
                    type: "structure",
                    required: [ "AuditLogs" ],
                    members: {
                        AuditLogs: {
                            locationName: "auditLogs",
                            type: "structure",
                            required: [ "Status" ],
                            members: {
                                Status: {
                                    locationName: "status"
                                }
                            }
                        }
                    }
                },
                MalwareProtection: {
                    shape: "Sx",
                    locationName: "malwareProtection"
                }
            }
        },
        S5d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {
                        locationName: "key"
                    },
                    Value: {
                        locationName: "value"
                    }
                }
            }
        },
        S5l: {
            type: "structure",
            members: {
                IgnorePublicAcls: {
                    locationName: "ignorePublicAcls",
                    type: "boolean"
                },
                RestrictPublicBuckets: {
                    locationName: "restrictPublicBuckets",
                    type: "boolean"
                },
                BlockPublicAcls: {
                    locationName: "blockPublicAcls",
                    type: "boolean"
                },
                BlockPublicPolicy: {
                    locationName: "blockPublicPolicy",
                    type: "boolean"
                }
            }
        },
        S5u: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    GroupId: {
                        locationName: "groupId"
                    },
                    GroupName: {
                        locationName: "groupName"
                    }
                }
            }
        },
        S61: {
            type: "list",
            member: {}
        },
        S65: {
            type: "list",
            member: {
                shape: "S66"
            }
        },
        S66: {
            type: "structure",
            members: {
                ContainerRuntime: {
                    locationName: "containerRuntime"
                },
                Id: {
                    locationName: "id"
                },
                Name: {
                    locationName: "name"
                },
                Image: {
                    locationName: "image"
                },
                ImagePrefix: {
                    locationName: "imagePrefix"
                },
                VolumeMounts: {
                    locationName: "volumeMounts",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Name: {
                                locationName: "name"
                            },
                            MountPath: {
                                locationName: "mountPath"
                            }
                        }
                    }
                },
                SecurityContext: {
                    locationName: "securityContext",
                    type: "structure",
                    members: {
                        Privileged: {
                            locationName: "privileged",
                            type: "boolean"
                        },
                        AllowPrivilegeEscalation: {
                            locationName: "allowPrivilegeEscalation",
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S6a: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Name: {
                        locationName: "name"
                    },
                    HostPath: {
                        locationName: "hostPath",
                        type: "structure",
                        members: {
                            Path: {
                                locationName: "path"
                            }
                        }
                    }
                }
            }
        },
        S6p: {
            type: "structure",
            members: {
                City: {
                    locationName: "city",
                    type: "structure",
                    members: {
                        CityName: {
                            locationName: "cityName"
                        }
                    }
                },
                Country: {
                    locationName: "country",
                    type: "structure",
                    members: {
                        CountryCode: {
                            locationName: "countryCode"
                        },
                        CountryName: {
                            locationName: "countryName"
                        }
                    }
                },
                GeoLocation: {
                    locationName: "geoLocation",
                    type: "structure",
                    members: {
                        Lat: {
                            locationName: "lat",
                            type: "double"
                        },
                        Lon: {
                            locationName: "lon",
                            type: "double"
                        }
                    }
                },
                IpAddressV4: {
                    locationName: "ipAddressV4"
                },
                Organization: {
                    locationName: "organization",
                    type: "structure",
                    members: {
                        Asn: {
                            locationName: "asn"
                        },
                        AsnOrg: {
                            locationName: "asnOrg"
                        },
                        Isp: {
                            locationName: "isp"
                        },
                        Org: {
                            locationName: "org"
                        }
                    }
                }
            }
        },
        S6y: {
            type: "structure",
            members: {
                Port: {
                    locationName: "port",
                    type: "integer"
                },
                PortName: {
                    locationName: "portName"
                }
            }
        },
        S6z: {
            type: "structure",
            members: {
                IpAddressV4: {
                    locationName: "ipAddressV4"
                }
            }
        },
        S7t: {
            type: "structure",
            members: {
                Name: {
                    locationName: "name"
                },
                ExecutablePath: {
                    locationName: "executablePath"
                },
                ExecutableSha256: {
                    locationName: "executableSha256"
                },
                NamespacePid: {
                    locationName: "namespacePid",
                    type: "integer"
                },
                Pwd: {
                    locationName: "pwd"
                },
                Pid: {
                    locationName: "pid",
                    type: "integer"
                },
                StartTime: {
                    locationName: "startTime",
                    type: "timestamp"
                },
                Uuid: {
                    locationName: "uuid"
                },
                ParentUuid: {
                    locationName: "parentUuid"
                },
                User: {
                    locationName: "user"
                },
                UserId: {
                    locationName: "userId",
                    type: "integer"
                },
                Euid: {
                    locationName: "euid",
                    type: "integer"
                },
                Lineage: {
                    locationName: "lineage",
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            StartTime: {
                                locationName: "startTime",
                                type: "timestamp"
                            },
                            NamespacePid: {
                                locationName: "namespacePid",
                                type: "integer"
                            },
                            UserId: {
                                locationName: "userId",
                                type: "integer"
                            },
                            Name: {
                                locationName: "name"
                            },
                            Pid: {
                                locationName: "pid",
                                type: "integer"
                            },
                            Uuid: {
                                locationName: "uuid"
                            },
                            ExecutablePath: {
                                locationName: "executablePath"
                            },
                            Euid: {
                                locationName: "euid",
                                type: "integer"
                            },
                            ParentUuid: {
                                locationName: "parentUuid"
                            }
                        }
                    }
                }
            }
        },
        S84: {
            type: "structure",
            members: {
                ProfileType: {
                    locationName: "profileType"
                },
                ProfileSubtype: {
                    locationName: "profileSubtype"
                },
                Observations: {
                    locationName: "observations",
                    type: "structure",
                    members: {
                        Text: {
                            locationName: "text",
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S8p: {
            type: "structure",
            members: {
                Include: {
                    shape: "S8q",
                    locationName: "include"
                },
                Exclude: {
                    shape: "S8q",
                    locationName: "exclude"
                }
            }
        },
        S8q: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "MapEquals" ],
                members: {
                    MapEquals: {
                        locationName: "mapEquals",
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Key" ],
                            members: {
                                Key: {
                                    locationName: "key"
                                },
                                Value: {
                                    locationName: "value"
                                }
                            }
                        }
                    }
                }
            }
        },
        S99: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AccountId", "MasterId", "Email", "RelationshipStatus", "UpdatedAt" ],
                members: {
                    AccountId: {
                        locationName: "accountId"
                    },
                    DetectorId: {
                        locationName: "detectorId"
                    },
                    MasterId: {
                        locationName: "masterId"
                    },
                    Email: {
                        locationName: "email"
                    },
                    RelationshipStatus: {
                        locationName: "relationshipStatus"
                    },
                    InvitedAt: {
                        locationName: "invitedAt"
                    },
                    UpdatedAt: {
                        locationName: "updatedAt"
                    },
                    AdministratorId: {
                        locationName: "administratorId"
                    }
                }
            }
        },
        S9g: {
            type: "structure",
            members: {
                FreeTrialDaysRemaining: {
                    locationName: "freeTrialDaysRemaining",
                    type: "integer"
                }
            }
        },
        Sa1: {
            type: "structure",
            members: {
                Amount: {
                    locationName: "amount"
                },
                Unit: {
                    locationName: "unit"
                }
            }
        },
        Sa4: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Resource: {
                        locationName: "resource"
                    },
                    Total: {
                        shape: "Sa1",
                        locationName: "total"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeMalwareScans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Scans"
        },
        DescribeOrganizationConfiguration: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        GetUsageStatistics: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListCoverage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Resources"
        },
        ListDetectors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DetectorIds"
        },
        ListFilters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FilterNames"
        },
        ListFindings: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FindingIds"
        },
        ListIPSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IpSetIds"
        },
        ListInvitations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Invitations"
        },
        ListMembers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Members"
        },
        ListOrganizationAdminAccounts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AdminAccounts"
        },
        ListPublishingDestinations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListThreatIntelSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ThreatIntelSetIds"
        }
    }
};

AWS.apiLoader.services["mq"] = {};

AWS.MQ = AWS.Service.defineService("mq", [ "2017-11-27" ]);

AWS.apiLoader.services["mq"]["2017-11-27"] = {
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "mq",
        signingName: "mq",
        serviceFullName: "AmazonMQ",
        serviceId: "mq",
        protocol: "rest-json",
        jsonVersion: "1.1",
        uid: "mq-2017-11-27",
        signatureVersion: "v4"
    },
    operations: {
        CreateBroker: {
            http: {
                requestUri: "/v1/brokers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerName: {
                        locationName: "brokerName"
                    },
                    Configuration: {
                        shape: "S5",
                        locationName: "configuration"
                    },
                    CreatorRequestId: {
                        locationName: "creatorRequestId",
                        idempotencyToken: true
                    },
                    DeploymentMode: {
                        locationName: "deploymentMode"
                    },
                    EncryptionOptions: {
                        shape: "S8",
                        locationName: "encryptionOptions"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "Sa",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        shape: "Sc",
                        locationName: "logs"
                    },
                    MaintenanceWindowStartTime: {
                        shape: "Sd",
                        locationName: "maintenanceWindowStartTime"
                    },
                    PubliclyAccessible: {
                        locationName: "publiclyAccessible",
                        type: "boolean"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    },
                    StorageType: {
                        locationName: "storageType"
                    },
                    SubnetIds: {
                        shape: "Sb",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Users: {
                        locationName: "users",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConsoleAccess: {
                                    locationName: "consoleAccess",
                                    type: "boolean"
                                },
                                Groups: {
                                    shape: "Sb",
                                    locationName: "groups"
                                },
                                Password: {
                                    locationName: "password"
                                },
                                Username: {
                                    locationName: "username"
                                },
                                ReplicationUser: {
                                    locationName: "replicationUser",
                                    type: "boolean"
                                }
                            },
                            required: [ "Username", "Password" ]
                        }
                    },
                    DataReplicationMode: {
                        locationName: "dataReplicationMode"
                    },
                    DataReplicationPrimaryBrokerArn: {
                        locationName: "dataReplicationPrimaryBrokerArn"
                    }
                },
                required: [ "EngineVersion", "HostInstanceType", "AutoMinorVersionUpgrade", "Users", "BrokerName", "DeploymentMode", "EngineType", "PubliclyAccessible" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerArn: {
                        locationName: "brokerArn"
                    },
                    BrokerId: {
                        locationName: "brokerId"
                    }
                }
            }
        },
        CreateConfiguration: {
            http: {
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "EngineVersion", "EngineType", "Name" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    Created: {
                        shape: "Sn",
                        locationName: "created"
                    },
                    Id: {
                        locationName: "id"
                    },
                    LatestRevision: {
                        shape: "So",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    }
                }
            }
        },
        CreateTags: {
            http: {
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                },
                required: [ "ResourceArn" ]
            }
        },
        CreateUser: {
            http: {
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    ConsoleAccess: {
                        locationName: "consoleAccess",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sb",
                        locationName: "groups"
                    },
                    Password: {
                        locationName: "password"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    },
                    ReplicationUser: {
                        locationName: "replicationUser",
                        type: "boolean"
                    }
                },
                required: [ "Username", "BrokerId", "Password" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteBroker: {
            http: {
                method: "DELETE",
                requestUri: "/v1/brokers/{broker-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    }
                }
            }
        },
        DeleteTags: {
            http: {
                method: "DELETE",
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    },
                    TagKeys: {
                        shape: "Sb",
                        location: "querystring",
                        locationName: "tagKeys"
                    }
                },
                required: [ "TagKeys", "ResourceArn" ]
            }
        },
        DeleteUser: {
            http: {
                method: "DELETE",
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeBroker: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers/{broker-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    ActionsRequired: {
                        locationName: "actionsRequired",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActionRequiredCode: {
                                    locationName: "actionRequiredCode"
                                },
                                ActionRequiredInfo: {
                                    locationName: "actionRequiredInfo"
                                }
                            }
                        }
                    },
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerArn: {
                        locationName: "brokerArn"
                    },
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    BrokerInstances: {
                        locationName: "brokerInstances",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ConsoleURL: {
                                    locationName: "consoleURL"
                                },
                                Endpoints: {
                                    shape: "Sb",
                                    locationName: "endpoints"
                                },
                                IpAddress: {
                                    locationName: "ipAddress"
                                }
                            }
                        }
                    },
                    BrokerName: {
                        locationName: "brokerName"
                    },
                    BrokerState: {
                        locationName: "brokerState"
                    },
                    Configurations: {
                        locationName: "configurations",
                        type: "structure",
                        members: {
                            Current: {
                                shape: "S5",
                                locationName: "current"
                            },
                            History: {
                                locationName: "history",
                                type: "list",
                                member: {
                                    shape: "S5"
                                }
                            },
                            Pending: {
                                shape: "S5",
                                locationName: "pending"
                            }
                        }
                    },
                    Created: {
                        shape: "Sn",
                        locationName: "created"
                    },
                    DeploymentMode: {
                        locationName: "deploymentMode"
                    },
                    EncryptionOptions: {
                        shape: "S8",
                        locationName: "encryptionOptions"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "S16",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        locationName: "logs",
                        type: "structure",
                        members: {
                            Audit: {
                                locationName: "audit",
                                type: "boolean"
                            },
                            AuditLogGroup: {
                                locationName: "auditLogGroup"
                            },
                            General: {
                                locationName: "general",
                                type: "boolean"
                            },
                            GeneralLogGroup: {
                                locationName: "generalLogGroup"
                            },
                            Pending: {
                                locationName: "pending",
                                type: "structure",
                                members: {
                                    Audit: {
                                        locationName: "audit",
                                        type: "boolean"
                                    },
                                    General: {
                                        locationName: "general",
                                        type: "boolean"
                                    }
                                }
                            }
                        },
                        required: [ "GeneralLogGroup", "General" ]
                    },
                    MaintenanceWindowStartTime: {
                        shape: "Sd",
                        locationName: "maintenanceWindowStartTime"
                    },
                    PendingAuthenticationStrategy: {
                        locationName: "pendingAuthenticationStrategy"
                    },
                    PendingEngineVersion: {
                        locationName: "pendingEngineVersion"
                    },
                    PendingHostInstanceType: {
                        locationName: "pendingHostInstanceType"
                    },
                    PendingLdapServerMetadata: {
                        shape: "S16",
                        locationName: "pendingLdapServerMetadata"
                    },
                    PendingSecurityGroups: {
                        shape: "Sb",
                        locationName: "pendingSecurityGroups"
                    },
                    PubliclyAccessible: {
                        locationName: "publiclyAccessible",
                        type: "boolean"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    },
                    StorageType: {
                        locationName: "storageType"
                    },
                    SubnetIds: {
                        shape: "Sb",
                        locationName: "subnetIds"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    },
                    Users: {
                        shape: "S19",
                        locationName: "users"
                    },
                    DataReplicationMetadata: {
                        shape: "S1c",
                        locationName: "dataReplicationMetadata"
                    },
                    DataReplicationMode: {
                        locationName: "dataReplicationMode"
                    },
                    PendingDataReplicationMetadata: {
                        shape: "S1c",
                        locationName: "pendingDataReplicationMetadata"
                    },
                    PendingDataReplicationMode: {
                        locationName: "pendingDataReplicationMode"
                    }
                }
            }
        },
        DescribeBrokerEngineTypes: {
            http: {
                method: "GET",
                requestUri: "/v1/broker-engine-types",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerEngineTypes: {
                        locationName: "brokerEngineTypes",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                EngineType: {
                                    locationName: "engineType"
                                },
                                EngineVersions: {
                                    locationName: "engineVersions",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeBrokerInstanceOptions: {
            http: {
                method: "GET",
                requestUri: "/v1/broker-instance-options",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    EngineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    HostInstanceType: {
                        location: "querystring",
                        locationName: "hostInstanceType"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    StorageType: {
                        location: "querystring",
                        locationName: "storageType"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerInstanceOptions: {
                        locationName: "brokerInstanceOptions",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AvailabilityZones: {
                                    locationName: "availabilityZones",
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {
                                                locationName: "name"
                                            }
                                        }
                                    }
                                },
                                EngineType: {
                                    locationName: "engineType"
                                },
                                HostInstanceType: {
                                    locationName: "hostInstanceType"
                                },
                                StorageType: {
                                    locationName: "storageType"
                                },
                                SupportedDeploymentModes: {
                                    locationName: "supportedDeploymentModes",
                                    type: "list",
                                    member: {}
                                },
                                SupportedEngineVersions: {
                                    shape: "Sb",
                                    locationName: "supportedEngineVersions"
                                }
                            }
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        DescribeConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{configuration-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    }
                },
                required: [ "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    Created: {
                        shape: "Sn",
                        locationName: "created"
                    },
                    Description: {
                        locationName: "description"
                    },
                    EngineType: {
                        locationName: "engineType"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    Id: {
                        locationName: "id"
                    },
                    LatestRevision: {
                        shape: "So",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        DescribeConfigurationRevision: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{configuration-id}/revisions/{configuration-revision}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    },
                    ConfigurationRevision: {
                        location: "uri",
                        locationName: "configuration-revision"
                    }
                },
                required: [ "ConfigurationRevision", "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        locationName: "configurationId"
                    },
                    Created: {
                        shape: "Sn",
                        locationName: "created"
                    },
                    Data: {
                        locationName: "data"
                    },
                    Description: {
                        locationName: "description"
                    }
                }
            }
        },
        DescribeUser: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    ConsoleAccess: {
                        locationName: "consoleAccess",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sb",
                        locationName: "groups"
                    },
                    Pending: {
                        locationName: "pending",
                        type: "structure",
                        members: {
                            ConsoleAccess: {
                                locationName: "consoleAccess",
                                type: "boolean"
                            },
                            Groups: {
                                shape: "Sb",
                                locationName: "groups"
                            },
                            PendingChange: {
                                locationName: "pendingChange"
                            }
                        },
                        required: [ "PendingChange" ]
                    },
                    Username: {
                        locationName: "username"
                    },
                    ReplicationUser: {
                        locationName: "replicationUser",
                        type: "boolean"
                    }
                }
            }
        },
        ListBrokers: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BrokerSummaries: {
                        locationName: "brokerSummaries",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BrokerArn: {
                                    locationName: "brokerArn"
                                },
                                BrokerId: {
                                    locationName: "brokerId"
                                },
                                BrokerName: {
                                    locationName: "brokerName"
                                },
                                BrokerState: {
                                    locationName: "brokerState"
                                },
                                Created: {
                                    shape: "Sn",
                                    locationName: "created"
                                },
                                DeploymentMode: {
                                    locationName: "deploymentMode"
                                },
                                EngineType: {
                                    locationName: "engineType"
                                },
                                HostInstanceType: {
                                    locationName: "hostInstanceType"
                                }
                            },
                            required: [ "DeploymentMode", "EngineType" ]
                        }
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListConfigurationRevisions: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations/{configuration-id}/revisions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "ConfigurationId" ]
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        locationName: "configurationId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Revisions: {
                        locationName: "revisions",
                        type: "list",
                        member: {
                            shape: "So"
                        }
                    }
                }
            }
        },
        ListConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Configurations: {
                        locationName: "configurations",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {
                                    locationName: "arn"
                                },
                                AuthenticationStrategy: {
                                    locationName: "authenticationStrategy"
                                },
                                Created: {
                                    shape: "Sn",
                                    locationName: "created"
                                },
                                Description: {
                                    locationName: "description"
                                },
                                EngineType: {
                                    locationName: "engineType"
                                },
                                EngineVersion: {
                                    locationName: "engineVersion"
                                },
                                Id: {
                                    locationName: "id"
                                },
                                LatestRevision: {
                                    shape: "So",
                                    locationName: "latestRevision"
                                },
                                Name: {
                                    locationName: "name"
                                },
                                Tags: {
                                    shape: "Sg",
                                    locationName: "tags"
                                }
                            },
                            required: [ "Description", "EngineVersion", "LatestRevision", "AuthenticationStrategy", "EngineType", "Id", "Arn", "Name", "Created" ]
                        }
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    }
                }
            }
        },
        ListTags: {
            http: {
                method: "GET",
                requestUri: "/v1/tags/{resource-arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resource-arn"
                    }
                },
                required: [ "ResourceArn" ]
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sg",
                        locationName: "tags"
                    }
                }
            }
        },
        ListUsers: {
            http: {
                method: "GET",
                requestUri: "/v1/brokers/{broker-id}/users",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    MaxResults: {
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        locationName: "nextToken"
                    },
                    Users: {
                        shape: "S19",
                        locationName: "users"
                    }
                }
            }
        },
        Promote: {
            http: {
                requestUri: "/v1/brokers/{broker-id}/promote",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Mode: {
                        locationName: "mode"
                    }
                },
                required: [ "BrokerId", "Mode" ]
            },
            output: {
                type: "structure",
                members: {
                    BrokerId: {
                        locationName: "brokerId"
                    }
                }
            }
        },
        RebootBroker: {
            http: {
                requestUri: "/v1/brokers/{broker-id}/reboot",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBroker: {
            http: {
                method: "PUT",
                requestUri: "/v1/brokers/{broker-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    Configuration: {
                        shape: "S5",
                        locationName: "configuration"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "Sa",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        shape: "Sc",
                        locationName: "logs"
                    },
                    MaintenanceWindowStartTime: {
                        shape: "Sd",
                        locationName: "maintenanceWindowStartTime"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    },
                    DataReplicationMode: {
                        locationName: "dataReplicationMode"
                    }
                },
                required: [ "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationStrategy: {
                        locationName: "authenticationStrategy"
                    },
                    AutoMinorVersionUpgrade: {
                        locationName: "autoMinorVersionUpgrade",
                        type: "boolean"
                    },
                    BrokerId: {
                        locationName: "brokerId"
                    },
                    Configuration: {
                        shape: "S5",
                        locationName: "configuration"
                    },
                    EngineVersion: {
                        locationName: "engineVersion"
                    },
                    HostInstanceType: {
                        locationName: "hostInstanceType"
                    },
                    LdapServerMetadata: {
                        shape: "S16",
                        locationName: "ldapServerMetadata"
                    },
                    Logs: {
                        shape: "Sc",
                        locationName: "logs"
                    },
                    MaintenanceWindowStartTime: {
                        shape: "Sd",
                        locationName: "maintenanceWindowStartTime"
                    },
                    SecurityGroups: {
                        shape: "Sb",
                        locationName: "securityGroups"
                    },
                    DataReplicationMetadata: {
                        shape: "S1c",
                        locationName: "dataReplicationMetadata"
                    },
                    DataReplicationMode: {
                        locationName: "dataReplicationMode"
                    },
                    PendingDataReplicationMetadata: {
                        shape: "S1c",
                        locationName: "pendingDataReplicationMetadata"
                    },
                    PendingDataReplicationMode: {
                        locationName: "pendingDataReplicationMode"
                    }
                }
            }
        },
        UpdateConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/v1/configurations/{configuration-id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    ConfigurationId: {
                        location: "uri",
                        locationName: "configuration-id"
                    },
                    Data: {
                        locationName: "data"
                    },
                    Description: {
                        locationName: "description"
                    }
                },
                required: [ "ConfigurationId", "Data" ]
            },
            output: {
                type: "structure",
                members: {
                    Arn: {
                        locationName: "arn"
                    },
                    Created: {
                        shape: "Sn",
                        locationName: "created"
                    },
                    Id: {
                        locationName: "id"
                    },
                    LatestRevision: {
                        shape: "So",
                        locationName: "latestRevision"
                    },
                    Name: {
                        locationName: "name"
                    },
                    Warnings: {
                        locationName: "warnings",
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AttributeName: {
                                    locationName: "attributeName"
                                },
                                ElementName: {
                                    locationName: "elementName"
                                },
                                Reason: {
                                    locationName: "reason"
                                }
                            },
                            required: [ "Reason" ]
                        }
                    }
                }
            }
        },
        UpdateUser: {
            http: {
                method: "PUT",
                requestUri: "/v1/brokers/{broker-id}/users/{username}",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BrokerId: {
                        location: "uri",
                        locationName: "broker-id"
                    },
                    ConsoleAccess: {
                        locationName: "consoleAccess",
                        type: "boolean"
                    },
                    Groups: {
                        shape: "Sb",
                        locationName: "groups"
                    },
                    Password: {
                        locationName: "password"
                    },
                    Username: {
                        location: "uri",
                        locationName: "username"
                    },
                    ReplicationUser: {
                        locationName: "replicationUser",
                        type: "boolean"
                    }
                },
                required: [ "Username", "BrokerId" ]
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                Id: {
                    locationName: "id"
                },
                Revision: {
                    locationName: "revision",
                    type: "integer"
                }
            },
            required: [ "Id" ]
        },
        S8: {
            type: "structure",
            members: {
                KmsKeyId: {
                    locationName: "kmsKeyId"
                },
                UseAwsOwnedKey: {
                    locationName: "useAwsOwnedKey",
                    type: "boolean"
                }
            },
            required: [ "UseAwsOwnedKey" ]
        },
        Sa: {
            type: "structure",
            members: {
                Hosts: {
                    shape: "Sb",
                    locationName: "hosts"
                },
                RoleBase: {
                    locationName: "roleBase"
                },
                RoleName: {
                    locationName: "roleName"
                },
                RoleSearchMatching: {
                    locationName: "roleSearchMatching"
                },
                RoleSearchSubtree: {
                    locationName: "roleSearchSubtree",
                    type: "boolean"
                },
                ServiceAccountPassword: {
                    locationName: "serviceAccountPassword"
                },
                ServiceAccountUsername: {
                    locationName: "serviceAccountUsername"
                },
                UserBase: {
                    locationName: "userBase"
                },
                UserRoleName: {
                    locationName: "userRoleName"
                },
                UserSearchMatching: {
                    locationName: "userSearchMatching"
                },
                UserSearchSubtree: {
                    locationName: "userSearchSubtree",
                    type: "boolean"
                }
            },
            required: [ "Hosts", "UserSearchMatching", "UserBase", "RoleSearchMatching", "ServiceAccountUsername", "RoleBase", "ServiceAccountPassword" ]
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "structure",
            members: {
                Audit: {
                    locationName: "audit",
                    type: "boolean"
                },
                General: {
                    locationName: "general",
                    type: "boolean"
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                DayOfWeek: {
                    locationName: "dayOfWeek"
                },
                TimeOfDay: {
                    locationName: "timeOfDay"
                },
                TimeZone: {
                    locationName: "timeZone"
                }
            },
            required: [ "TimeOfDay", "DayOfWeek" ]
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sn: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        So: {
            type: "structure",
            members: {
                Created: {
                    shape: "Sn",
                    locationName: "created"
                },
                Description: {
                    locationName: "description"
                },
                Revision: {
                    locationName: "revision",
                    type: "integer"
                }
            },
            required: [ "Revision", "Created" ]
        },
        S16: {
            type: "structure",
            members: {
                Hosts: {
                    shape: "Sb",
                    locationName: "hosts"
                },
                RoleBase: {
                    locationName: "roleBase"
                },
                RoleName: {
                    locationName: "roleName"
                },
                RoleSearchMatching: {
                    locationName: "roleSearchMatching"
                },
                RoleSearchSubtree: {
                    locationName: "roleSearchSubtree",
                    type: "boolean"
                },
                ServiceAccountUsername: {
                    locationName: "serviceAccountUsername"
                },
                UserBase: {
                    locationName: "userBase"
                },
                UserRoleName: {
                    locationName: "userRoleName"
                },
                UserSearchMatching: {
                    locationName: "userSearchMatching"
                },
                UserSearchSubtree: {
                    locationName: "userSearchSubtree",
                    type: "boolean"
                }
            },
            required: [ "Hosts", "UserSearchMatching", "UserBase", "RoleSearchMatching", "ServiceAccountUsername", "RoleBase" ]
        },
        S19: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PendingChange: {
                        locationName: "pendingChange"
                    },
                    Username: {
                        locationName: "username"
                    }
                },
                required: [ "Username" ]
            }
        },
        S1c: {
            type: "structure",
            members: {
                DataReplicationCounterpart: {
                    locationName: "dataReplicationCounterpart",
                    type: "structure",
                    members: {
                        BrokerId: {
                            locationName: "brokerId"
                        },
                        Region: {
                            locationName: "region"
                        }
                    },
                    required: [ "BrokerId", "Region" ]
                },
                DataReplicationRole: {
                    locationName: "dataReplicationRole"
                }
            },
            required: [ "DataReplicationRole" ]
        }
    },
    paginators: {
        ListBrokers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "BrokerSummaries"
        }
    }
};

AWS.apiLoader.services["comprehend"] = {};

AWS.Comprehend = AWS.Service.defineService("comprehend", [ "2017-11-27" ]);

AWS.apiLoader.services["comprehend"]["2017-11-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-11-27",
        endpointPrefix: "comprehend",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Amazon Comprehend",
        serviceId: "Comprehend",
        signatureVersion: "v4",
        signingName: "comprehend",
        targetPrefix: "Comprehend_20171127",
        uid: "comprehend-2017-11-27"
    },
    operations: {
        BatchDetectDominantLanguage: {
            input: {
                type: "structure",
                required: [ "TextList" ],
                members: {
                    TextList: {
                        shape: "S2"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Languages: {
                                    shape: "S8"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectEntities: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Entities: {
                                    shape: "Sj"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectKeyPhrases: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                KeyPhrases: {
                                    shape: "Su"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectSentiment: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Sentiment: {},
                                SentimentScore: {
                                    shape: "S11"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectSyntax: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                SyntaxTokens: {
                                    shape: "S17"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        BatchDetectTargetedSentiment: {
            input: {
                type: "structure",
                required: [ "TextList", "LanguageCode" ],
                members: {
                    TextList: {
                        shape: "S2"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResultList", "ErrorList" ],
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Index: {
                                    type: "integer"
                                },
                                Entities: {
                                    shape: "S1f"
                                }
                            }
                        }
                    },
                    ErrorList: {
                        shape: "Sc"
                    }
                },
                sensitive: true
            }
        },
        ClassifyDocument: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    EndpointArn: {},
                    Bytes: {
                        type: "blob"
                    },
                    DocumentReaderConfig: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Classes: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Score: {
                                    type: "float"
                                },
                                Page: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    Labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Score: {
                                    type: "float"
                                },
                                Page: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    DocumentMetadata: {
                        shape: "S1z"
                    },
                    DocumentType: {
                        shape: "S22"
                    },
                    Errors: {
                        shape: "S25"
                    },
                    Warnings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Page: {
                                    type: "integer"
                                },
                                WarnCode: {},
                                WarnMessage: {}
                            }
                        }
                    }
                },
                sensitive: true
            }
        },
        ContainsPiiEntities: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Labels: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Score: {
                                    type: "float"
                                }
                            }
                        }
                    }
                }
            }
        },
        CreateDataset: {
            input: {
                type: "structure",
                required: [ "FlywheelArn", "DatasetName", "InputDataConfig" ],
                members: {
                    FlywheelArn: {},
                    DatasetName: {},
                    DatasetType: {},
                    Description: {},
                    InputDataConfig: {
                        type: "structure",
                        members: {
                            AugmentedManifests: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "AttributeNames", "S3Uri" ],
                                    members: {
                                        AttributeNames: {
                                            shape: "S2o"
                                        },
                                        S3Uri: {},
                                        AnnotationDataS3Uri: {},
                                        SourceDocumentsS3Uri: {},
                                        DocumentType: {}
                                    }
                                }
                            },
                            DataFormat: {},
                            DocumentClassifierInputDataConfig: {
                                type: "structure",
                                required: [ "S3Uri" ],
                                members: {
                                    S3Uri: {},
                                    LabelDelimiter: {}
                                }
                            },
                            EntityRecognizerInputDataConfig: {
                                type: "structure",
                                required: [ "Documents" ],
                                members: {
                                    Annotations: {
                                        type: "structure",
                                        required: [ "S3Uri" ],
                                        members: {
                                            S3Uri: {}
                                        }
                                    },
                                    Documents: {
                                        type: "structure",
                                        required: [ "S3Uri" ],
                                        members: {
                                            S3Uri: {},
                                            InputFormat: {}
                                        }
                                    },
                                    EntityList: {
                                        type: "structure",
                                        required: [ "S3Uri" ],
                                        members: {
                                            S3Uri: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetArn: {}
                }
            }
        },
        CreateDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierName", "DataAccessRoleArn", "InputDataConfig", "LanguageCode" ],
                members: {
                    DocumentClassifierName: {},
                    VersionName: {},
                    DataAccessRoleArn: {},
                    Tags: {
                        shape: "S31"
                    },
                    InputDataConfig: {
                        shape: "S3a"
                    },
                    OutputDataConfig: {
                        shape: "S3h"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LanguageCode: {},
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Mode: {},
                    ModelKmsKeyId: {},
                    ModelPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierArn: {}
                }
            }
        },
        CreateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "DesiredInferenceUnits" ],
                members: {
                    EndpointName: {},
                    ModelArn: {},
                    DesiredInferenceUnits: {
                        type: "integer"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S31"
                    },
                    DataAccessRoleArn: {},
                    FlywheelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointArn: {},
                    ModelArn: {}
                }
            }
        },
        CreateEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "RecognizerName", "DataAccessRoleArn", "InputDataConfig", "LanguageCode" ],
                members: {
                    RecognizerName: {},
                    VersionName: {},
                    DataAccessRoleArn: {},
                    Tags: {
                        shape: "S31"
                    },
                    InputDataConfig: {
                        shape: "S3z"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    LanguageCode: {},
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    ModelKmsKeyId: {},
                    ModelPolicy: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerArn: {}
                }
            }
        },
        CreateFlywheel: {
            input: {
                type: "structure",
                required: [ "FlywheelName", "DataAccessRoleArn", "DataLakeS3Uri" ],
                members: {
                    FlywheelName: {},
                    ActiveModelArn: {},
                    DataAccessRoleArn: {},
                    TaskConfig: {
                        shape: "S4b"
                    },
                    ModelType: {},
                    DataLakeS3Uri: {},
                    DataSecurityConfig: {
                        shape: "S4i"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelArn: {},
                    ActiveModelArn: {}
                }
            }
        },
        DeleteDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn" ],
                members: {
                    DocumentClassifierArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "EntityRecognizerArn" ],
                members: {
                    EntityRecognizerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteFlywheel: {
            input: {
                type: "structure",
                required: [ "FlywheelArn" ],
                members: {
                    FlywheelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    PolicyRevisionId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeDataset: {
            input: {
                type: "structure",
                required: [ "DatasetArn" ],
                members: {
                    DatasetArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetProperties: {
                        shape: "S4x"
                    }
                }
            }
        },
        DescribeDocumentClassificationJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassificationJobProperties: {
                        shape: "S55"
                    }
                }
            }
        },
        DescribeDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn" ],
                members: {
                    DocumentClassifierArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierProperties: {
                        shape: "S5d"
                    }
                }
            }
        },
        DescribeDominantLanguageDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DominantLanguageDetectionJobProperties: {
                        shape: "S5k"
                    }
                }
            }
        },
        DescribeEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointProperties: {
                        shape: "S5n"
                    }
                }
            }
        },
        DescribeEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitiesDetectionJobProperties: {
                        shape: "S5r"
                    }
                }
            }
        },
        DescribeEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "EntityRecognizerArn" ],
                members: {
                    EntityRecognizerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerProperties: {
                        shape: "S5u"
                    }
                }
            }
        },
        DescribeEventsDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsDetectionJobProperties: {
                        shape: "S63"
                    }
                }
            }
        },
        DescribeFlywheel: {
            input: {
                type: "structure",
                required: [ "FlywheelArn" ],
                members: {
                    FlywheelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelProperties: {
                        shape: "S68"
                    }
                }
            }
        },
        DescribeFlywheelIteration: {
            input: {
                type: "structure",
                required: [ "FlywheelArn", "FlywheelIterationId" ],
                members: {
                    FlywheelArn: {},
                    FlywheelIterationId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelIterationProperties: {
                        shape: "S6d"
                    }
                }
            }
        },
        DescribeKeyPhrasesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPhrasesDetectionJobProperties: {
                        shape: "S6i"
                    }
                }
            }
        },
        DescribePiiEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PiiEntitiesDetectionJobProperties: {
                        shape: "S6l"
                    }
                }
            }
        },
        DescribeResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourcePolicy: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    PolicyRevisionId: {}
                }
            }
        },
        DescribeSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SentimentDetectionJobProperties: {
                        shape: "S6w"
                    }
                }
            }
        },
        DescribeTargetedSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TargetedSentimentDetectionJobProperties: {
                        shape: "S6z"
                    }
                }
            }
        },
        DescribeTopicsDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicsDetectionJobProperties: {
                        shape: "S72"
                    }
                }
            }
        },
        DetectDominantLanguage: {
            input: {
                type: "structure",
                required: [ "Text" ],
                members: {
                    Text: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Languages: {
                        shape: "S8"
                    }
                },
                sensitive: true
            }
        },
        DetectEntities: {
            input: {
                type: "structure",
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {},
                    EndpointArn: {},
                    Bytes: {
                        type: "blob"
                    },
                    DocumentReaderConfig: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        shape: "Sj"
                    },
                    DocumentMetadata: {
                        shape: "S1z"
                    },
                    DocumentType: {
                        shape: "S22"
                    },
                    Blocks: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Id: {},
                                BlockType: {},
                                Text: {},
                                Page: {
                                    type: "integer"
                                },
                                Geometry: {
                                    type: "structure",
                                    members: {
                                        BoundingBox: {
                                            type: "structure",
                                            members: {
                                                Height: {
                                                    type: "float"
                                                },
                                                Left: {
                                                    type: "float"
                                                },
                                                Top: {
                                                    type: "float"
                                                },
                                                Width: {
                                                    type: "float"
                                                }
                                            }
                                        },
                                        Polygon: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    X: {
                                                        type: "float"
                                                    },
                                                    Y: {
                                                        type: "float"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                Relationships: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Ids: {
                                                type: "list",
                                                member: {}
                                            },
                                            Type: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    Errors: {
                        shape: "S25"
                    }
                },
                sensitive: true
            }
        },
        DetectKeyPhrases: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPhrases: {
                        shape: "Su"
                    }
                },
                sensitive: true
            }
        },
        DetectPiiEntities: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {},
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Score: {
                                    type: "float"
                                },
                                Type: {},
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        DetectSentiment: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Sentiment: {},
                    SentimentScore: {
                        shape: "S11"
                    }
                },
                sensitive: true
            }
        },
        DetectSyntax: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SyntaxTokens: {
                        shape: "S17"
                    }
                },
                sensitive: true
            }
        },
        DetectTargetedSentiment: {
            input: {
                type: "structure",
                required: [ "Text", "LanguageCode" ],
                members: {
                    Text: {
                        shape: "S3"
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Entities: {
                        shape: "S1f"
                    }
                },
                sensitive: true
            }
        },
        DetectToxicContent: {
            input: {
                type: "structure",
                required: [ "TextSegments", "LanguageCode" ],
                members: {
                    TextSegments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Text" ],
                            members: {
                                Text: {
                                    shape: "S3"
                                }
                            }
                        },
                        sensitive: true
                    },
                    LanguageCode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResultList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Labels: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            Name: {},
                                            Score: {
                                                type: "float"
                                            }
                                        }
                                    }
                                },
                                Toxicity: {
                                    type: "float"
                                }
                            }
                        }
                    }
                }
            }
        },
        ImportModel: {
            input: {
                type: "structure",
                required: [ "SourceModelArn" ],
                members: {
                    SourceModelArn: {},
                    ModelName: {},
                    VersionName: {},
                    ModelKmsKeyId: {},
                    DataAccessRoleArn: {},
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelArn: {}
                }
            }
        },
        ListDatasets: {
            input: {
                type: "structure",
                members: {
                    FlywheelArn: {},
                    Filter: {
                        type: "structure",
                        members: {
                            Status: {},
                            DatasetType: {},
                            CreationTimeAfter: {
                                type: "timestamp"
                            },
                            CreationTimeBefore: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DatasetPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S4x"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocumentClassificationJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassificationJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S55"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocumentClassifierSummaries: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierSummariesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DocumentClassifierName: {},
                                NumberOfVersions: {
                                    type: "integer"
                                },
                                LatestVersionCreatedAt: {
                                    type: "timestamp"
                                },
                                LatestVersionName: {},
                                LatestVersionStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDocumentClassifiers: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            Status: {},
                            DocumentClassifierName: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DocumentClassifierPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S5d"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDominantLanguageDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DominantLanguageDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S5k"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpoints: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            ModelArn: {},
                            Status: {},
                            CreationTimeBefore: {
                                type: "timestamp"
                            },
                            CreationTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EndpointPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S5n"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntitiesDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntitiesDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S5r"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntityRecognizerSummaries: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerSummariesList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RecognizerName: {},
                                NumberOfVersions: {
                                    type: "integer"
                                },
                                LatestVersionCreatedAt: {
                                    type: "timestamp"
                                },
                                LatestVersionName: {},
                                LatestVersionStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEntityRecognizers: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            Status: {},
                            RecognizerName: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EntityRecognizerPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S5u"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEventsDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EventsDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S63"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFlywheelIterationHistory: {
            input: {
                type: "structure",
                required: [ "FlywheelArn" ],
                members: {
                    FlywheelArn: {},
                    Filter: {
                        type: "structure",
                        members: {
                            CreationTimeAfter: {
                                type: "timestamp"
                            },
                            CreationTimeBefore: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelIterationPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S6d"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFlywheels: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            Status: {},
                            CreationTimeAfter: {
                                type: "timestamp"
                            },
                            CreationTimeBefore: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FlywheelArn: {},
                                ActiveModelArn: {},
                                DataLakeS3Uri: {},
                                Status: {},
                                ModelType: {},
                                Message: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LatestFlywheelIteration: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListKeyPhrasesDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    KeyPhrasesDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S6i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPiiEntitiesDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PiiEntitiesDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S6l"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSentimentDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SentimentDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S6w"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S31"
                    }
                }
            }
        },
        ListTargetedSentimentDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TargetedSentimentDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S6z"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTopicsDetectionJobs: {
            input: {
                type: "structure",
                members: {
                    Filter: {
                        type: "structure",
                        members: {
                            JobName: {},
                            JobStatus: {},
                            SubmitTimeBefore: {
                                type: "timestamp"
                            },
                            SubmitTimeAfter: {
                                type: "timestamp"
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TopicsDetectionJobPropertiesList: {
                        type: "list",
                        member: {
                            shape: "S72"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "ResourcePolicy" ],
                members: {
                    ResourceArn: {},
                    ResourcePolicy: {},
                    PolicyRevisionId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PolicyRevisionId: {}
                }
            }
        },
        StartDocumentClassificationJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn" ],
                members: {
                    JobName: {},
                    DocumentClassifierArn: {},
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    },
                    FlywheelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {},
                    DocumentClassifierArn: {}
                }
            }
        },
        StartDominantLanguageDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StartEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    EntityRecognizerArn: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    },
                    FlywheelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {},
                    EntityRecognizerArn: {}
                }
            }
        },
        StartEventsDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode", "TargetEventTypes" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    TargetEventTypes: {
                        shape: "S64"
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StartFlywheelIteration: {
            input: {
                type: "structure",
                required: [ "FlywheelArn" ],
                members: {
                    FlywheelArn: {},
                    ClientRequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelArn: {},
                    FlywheelIterationId: {}
                }
            }
        },
        StartKeyPhrasesDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StartPiiEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "Mode", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    Mode: {},
                    RedactionConfig: {
                        shape: "S6n"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StartSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StartTargetedSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn", "LanguageCode" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    LanguageCode: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StartTopicsDetectionJob: {
            input: {
                type: "structure",
                required: [ "InputDataConfig", "OutputDataConfig", "DataAccessRoleArn" ],
                members: {
                    InputDataConfig: {
                        shape: "S59"
                    },
                    OutputDataConfig: {
                        shape: "S5a"
                    },
                    DataAccessRoleArn: {},
                    JobName: {},
                    NumberOfTopics: {
                        type: "integer"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    VolumeKmsKeyId: {},
                    VpcConfig: {
                        shape: "S3j"
                    },
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobArn: {},
                    JobStatus: {}
                }
            }
        },
        StopDominantLanguageDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopEventsDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopKeyPhrasesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopPiiEntitiesDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopTargetedSentimentDetectionJob: {
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobId: {},
                    JobStatus: {}
                }
            }
        },
        StopTrainingDocumentClassifier: {
            input: {
                type: "structure",
                required: [ "DocumentClassifierArn" ],
                members: {
                    DocumentClassifierArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StopTrainingEntityRecognizer: {
            input: {
                type: "structure",
                required: [ "EntityRecognizerArn" ],
                members: {
                    EntityRecognizerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S31"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {},
                    DesiredModelArn: {},
                    DesiredInferenceUnits: {
                        type: "integer"
                    },
                    DesiredDataAccessRoleArn: {},
                    FlywheelArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DesiredModelArn: {}
                }
            }
        },
        UpdateFlywheel: {
            input: {
                type: "structure",
                required: [ "FlywheelArn" ],
                members: {
                    FlywheelArn: {},
                    ActiveModelArn: {},
                    DataAccessRoleArn: {},
                    DataSecurityConfig: {
                        type: "structure",
                        members: {
                            ModelKmsKeyId: {},
                            VolumeKmsKeyId: {},
                            VpcConfig: {
                                shape: "S3j"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    FlywheelProperties: {
                        shape: "S68"
                    }
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "list",
            member: {
                shape: "S3"
            },
            sensitive: true
        },
        S3: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    LanguageCode: {},
                    Score: {
                        type: "float"
                    }
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Index: {
                        type: "integer"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sj: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Score: {
                        type: "float"
                    },
                    Type: {},
                    Text: {},
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    },
                    BlockReferences: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                BlockId: {},
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                },
                                ChildBlocks: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            ChildBlockId: {},
                                            BeginOffset: {
                                                type: "integer"
                                            },
                                            EndOffset: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Su: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Score: {
                        type: "float"
                    },
                    Text: {},
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    }
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                Positive: {
                    type: "float"
                },
                Negative: {
                    type: "float"
                },
                Neutral: {
                    type: "float"
                },
                Mixed: {
                    type: "float"
                }
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    TokenId: {
                        type: "integer"
                    },
                    Text: {},
                    BeginOffset: {
                        type: "integer"
                    },
                    EndOffset: {
                        type: "integer"
                    },
                    PartOfSpeech: {
                        type: "structure",
                        members: {
                            Tag: {},
                            Score: {
                                type: "float"
                            }
                        }
                    }
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    DescriptiveMentionIndex: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    },
                    Mentions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Score: {
                                    type: "float"
                                },
                                GroupScore: {
                                    type: "float"
                                },
                                Text: {},
                                Type: {},
                                MentionSentiment: {
                                    type: "structure",
                                    members: {
                                        Sentiment: {},
                                        SentimentScore: {
                                            shape: "S11"
                                        }
                                    }
                                },
                                BeginOffset: {
                                    type: "integer"
                                },
                                EndOffset: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "DocumentReadAction" ],
            members: {
                DocumentReadAction: {},
                DocumentReadMode: {},
                FeatureTypes: {
                    type: "list",
                    member: {}
                }
            }
        },
        S1z: {
            type: "structure",
            members: {
                Pages: {
                    type: "integer"
                },
                ExtractedCharacters: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Page: {
                                type: "integer"
                            },
                            Count: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Page: {
                        type: "integer"
                    },
                    Type: {}
                }
            }
        },
        S25: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Page: {
                        type: "integer"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        S2o: {
            type: "list",
            member: {}
        },
        S31: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S3a: {
            type: "structure",
            members: {
                DataFormat: {},
                S3Uri: {},
                TestS3Uri: {},
                LabelDelimiter: {},
                AugmentedManifests: {
                    type: "list",
                    member: {
                        shape: "S3d"
                    }
                },
                DocumentType: {},
                Documents: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        TestS3Uri: {}
                    }
                },
                DocumentReaderConfig: {
                    shape: "S1p"
                }
            }
        },
        S3d: {
            type: "structure",
            required: [ "S3Uri", "AttributeNames" ],
            members: {
                S3Uri: {},
                Split: {},
                AttributeNames: {
                    shape: "S2o"
                },
                AnnotationDataS3Uri: {},
                SourceDocumentsS3Uri: {},
                DocumentType: {}
            }
        },
        S3h: {
            type: "structure",
            members: {
                S3Uri: {},
                KmsKeyId: {},
                FlywheelStatsS3Prefix: {}
            }
        },
        S3j: {
            type: "structure",
            required: [ "SecurityGroupIds", "Subnets" ],
            members: {
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                Subnets: {
                    type: "list",
                    member: {}
                }
            }
        },
        S3z: {
            type: "structure",
            required: [ "EntityTypes" ],
            members: {
                DataFormat: {},
                EntityTypes: {
                    shape: "S41"
                },
                Documents: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        TestS3Uri: {},
                        InputFormat: {}
                    }
                },
                Annotations: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        TestS3Uri: {}
                    }
                },
                EntityList: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {}
                    }
                },
                AugmentedManifests: {
                    type: "list",
                    member: {
                        shape: "S3d"
                    }
                }
            }
        },
        S41: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type" ],
                members: {
                    Type: {}
                }
            }
        },
        S4b: {
            type: "structure",
            required: [ "LanguageCode" ],
            members: {
                LanguageCode: {},
                DocumentClassificationConfig: {
                    type: "structure",
                    required: [ "Mode" ],
                    members: {
                        Mode: {},
                        Labels: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                EntityRecognitionConfig: {
                    type: "structure",
                    required: [ "EntityTypes" ],
                    members: {
                        EntityTypes: {
                            shape: "S41"
                        }
                    }
                }
            }
        },
        S4i: {
            type: "structure",
            members: {
                ModelKmsKeyId: {},
                VolumeKmsKeyId: {},
                DataLakeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                }
            }
        },
        S4x: {
            type: "structure",
            members: {
                DatasetArn: {},
                DatasetName: {},
                DatasetType: {},
                DatasetS3Uri: {},
                Description: {},
                Status: {},
                Message: {},
                NumberOfDocuments: {
                    type: "long"
                },
                CreationTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        S55: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                DocumentClassifierArn: {},
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                },
                FlywheelArn: {}
            }
        },
        S59: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                InputFormat: {},
                DocumentReaderConfig: {
                    shape: "S1p"
                }
            }
        },
        S5a: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                KmsKeyId: {}
            }
        },
        S5d: {
            type: "structure",
            members: {
                DocumentClassifierArn: {},
                LanguageCode: {},
                Status: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S3a"
                },
                OutputDataConfig: {
                    shape: "S3h"
                },
                ClassifierMetadata: {
                    type: "structure",
                    members: {
                        NumberOfLabels: {
                            type: "integer"
                        },
                        NumberOfTrainedDocuments: {
                            type: "integer"
                        },
                        NumberOfTestDocuments: {
                            type: "integer"
                        },
                        EvaluationMetrics: {
                            type: "structure",
                            members: {
                                Accuracy: {
                                    type: "double"
                                },
                                Precision: {
                                    type: "double"
                                },
                                Recall: {
                                    type: "double"
                                },
                                F1Score: {
                                    type: "double"
                                },
                                MicroPrecision: {
                                    type: "double"
                                },
                                MicroRecall: {
                                    type: "double"
                                },
                                MicroF1Score: {
                                    type: "double"
                                },
                                HammingLoss: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    sensitive: true
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                },
                Mode: {},
                ModelKmsKeyId: {},
                VersionName: {},
                SourceModelArn: {},
                FlywheelArn: {}
            }
        },
        S5k: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                }
            }
        },
        S5n: {
            type: "structure",
            members: {
                EndpointArn: {},
                Status: {},
                Message: {},
                ModelArn: {},
                DesiredModelArn: {},
                DesiredInferenceUnits: {
                    type: "integer"
                },
                CurrentInferenceUnits: {
                    type: "integer"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DesiredDataAccessRoleArn: {},
                FlywheelArn: {}
            }
        },
        S5r: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                EntityRecognizerArn: {},
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                },
                FlywheelArn: {}
            }
        },
        S5u: {
            type: "structure",
            members: {
                EntityRecognizerArn: {},
                LanguageCode: {},
                Status: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S3z"
                },
                RecognizerMetadata: {
                    type: "structure",
                    members: {
                        NumberOfTrainedDocuments: {
                            type: "integer"
                        },
                        NumberOfTestDocuments: {
                            type: "integer"
                        },
                        EvaluationMetrics: {
                            type: "structure",
                            members: {
                                Precision: {
                                    type: "double"
                                },
                                Recall: {
                                    type: "double"
                                },
                                F1Score: {
                                    type: "double"
                                }
                            }
                        },
                        EntityTypes: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    Type: {},
                                    EvaluationMetrics: {
                                        type: "structure",
                                        members: {
                                            Precision: {
                                                type: "double"
                                            },
                                            Recall: {
                                                type: "double"
                                            },
                                            F1Score: {
                                                type: "double"
                                            }
                                        }
                                    },
                                    NumberOfTrainMentions: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    sensitive: true
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                },
                ModelKmsKeyId: {},
                VersionName: {},
                SourceModelArn: {},
                FlywheelArn: {},
                OutputDataConfig: {
                    type: "structure",
                    members: {
                        FlywheelStatsS3Prefix: {}
                    }
                }
            }
        },
        S63: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                TargetEventTypes: {
                    shape: "S64"
                }
            }
        },
        S64: {
            type: "list",
            member: {}
        },
        S68: {
            type: "structure",
            members: {
                FlywheelArn: {},
                ActiveModelArn: {},
                DataAccessRoleArn: {},
                TaskConfig: {
                    shape: "S4b"
                },
                DataLakeS3Uri: {},
                DataSecurityConfig: {
                    shape: "S4i"
                },
                Status: {},
                ModelType: {},
                Message: {},
                CreationTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                LatestFlywheelIteration: {}
            }
        },
        S6d: {
            type: "structure",
            members: {
                FlywheelArn: {},
                FlywheelIterationId: {},
                CreationTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                Status: {},
                Message: {},
                EvaluatedModelArn: {},
                EvaluatedModelMetrics: {
                    shape: "S6f"
                },
                TrainedModelArn: {},
                TrainedModelMetrics: {
                    shape: "S6f"
                },
                EvaluationManifestS3Prefix: {}
            }
        },
        S6f: {
            type: "structure",
            members: {
                AverageF1Score: {
                    type: "double"
                },
                AveragePrecision: {
                    type: "double"
                },
                AverageRecall: {
                    type: "double"
                },
                AverageAccuracy: {
                    type: "double"
                }
            }
        },
        S6i: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                }
            }
        },
        S6l: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        KmsKeyId: {}
                    }
                },
                RedactionConfig: {
                    shape: "S6n"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                Mode: {}
            }
        },
        S6n: {
            type: "structure",
            members: {
                PiiEntityTypes: {
                    type: "list",
                    member: {}
                },
                MaskMode: {},
                MaskCharacter: {}
            }
        },
        S6w: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                }
            }
        },
        S6z: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                LanguageCode: {},
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                }
            }
        },
        S72: {
            type: "structure",
            members: {
                JobId: {},
                JobArn: {},
                JobName: {},
                JobStatus: {},
                Message: {},
                SubmitTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                InputDataConfig: {
                    shape: "S59"
                },
                OutputDataConfig: {
                    shape: "S5a"
                },
                NumberOfTopics: {
                    type: "integer"
                },
                DataAccessRoleArn: {},
                VolumeKmsKeyId: {},
                VpcConfig: {
                    shape: "S3j"
                }
            }
        }
    },
    paginators: {
        ListDatasets: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDocumentClassificationJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDocumentClassifierSummaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDocumentClassifiers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListDominantLanguageDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListEndpoints: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EndpointPropertiesList"
        },
        ListEntitiesDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListEntityRecognizerSummaries: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListEntityRecognizers: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListEventsDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListFlywheelIterationHistory: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListFlywheels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListKeyPhrasesDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListPiiEntitiesDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "PiiEntitiesDetectionJobPropertiesList"
        },
        ListSentimentDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTargetedSentimentDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        },
        ListTopicsDetectionJobs: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken"
        }
    }
};

AWS.apiLoader.services["iotjobsdataplane"] = {};

AWS.IoTJobsDataPlane = AWS.Service.defineService("iotjobsdataplane", [ "2017-09-29" ]);

AWS.apiLoader.services["iotjobsdataplane"]["2017-09-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-29",
        endpointPrefix: "data.jobs.iot",
        protocol: "rest-json",
        serviceFullName: "AWS IoT Jobs Data Plane",
        serviceId: "IoT Jobs Data Plane",
        signatureVersion: "v4",
        signingName: "iot-jobs-data",
        uid: "iot-jobs-data-2017-09-29"
    },
    operations: {
        DescribeJobExecution: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    includeJobDocument: {
                        location: "querystring",
                        locationName: "includeJobDocument",
                        type: "boolean"
                    },
                    executionNumber: {
                        location: "querystring",
                        locationName: "executionNumber",
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    execution: {
                        shape: "S7"
                    }
                }
            }
        },
        GetPendingJobExecutions: {
            http: {
                method: "GET",
                requestUri: "/things/{thingName}/jobs"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    inProgressJobs: {
                        shape: "Sl"
                    },
                    queuedJobs: {
                        shape: "Sl"
                    }
                }
            }
        },
        StartNextPendingJobExecution: {
            http: {
                method: "PUT",
                requestUri: "/things/{thingName}/jobs/$next"
            },
            input: {
                type: "structure",
                required: [ "thingName" ],
                members: {
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    statusDetails: {
                        shape: "Sa"
                    },
                    stepTimeoutInMinutes: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    execution: {
                        shape: "S7"
                    }
                }
            }
        },
        UpdateJobExecution: {
            http: {
                requestUri: "/things/{thingName}/jobs/{jobId}"
            },
            input: {
                type: "structure",
                required: [ "jobId", "thingName", "status" ],
                members: {
                    jobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    thingName: {
                        location: "uri",
                        locationName: "thingName"
                    },
                    status: {},
                    statusDetails: {
                        shape: "Sa"
                    },
                    stepTimeoutInMinutes: {
                        type: "long"
                    },
                    expectedVersion: {
                        type: "long"
                    },
                    includeJobExecutionState: {
                        type: "boolean"
                    },
                    includeJobDocument: {
                        type: "boolean"
                    },
                    executionNumber: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    executionState: {
                        type: "structure",
                        members: {
                            status: {},
                            statusDetails: {
                                shape: "Sa"
                            },
                            versionNumber: {
                                type: "long"
                            }
                        }
                    },
                    jobDocument: {}
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "structure",
            members: {
                jobId: {},
                thingName: {},
                status: {},
                statusDetails: {
                    shape: "Sa"
                },
                queuedAt: {
                    type: "long"
                },
                startedAt: {
                    type: "long"
                },
                lastUpdatedAt: {
                    type: "long"
                },
                approximateSecondsBeforeTimedOut: {
                    type: "long"
                },
                versionNumber: {
                    type: "long"
                },
                executionNumber: {
                    type: "long"
                },
                jobDocument: {}
            }
        },
        Sa: {
            type: "map",
            key: {},
            value: {}
        },
        Sl: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    jobId: {},
                    queuedAt: {
                        type: "long"
                    },
                    startedAt: {
                        type: "long"
                    },
                    lastUpdatedAt: {
                        type: "long"
                    },
                    versionNumber: {
                        type: "long"
                    },
                    executionNumber: {
                        type: "long"
                    }
                }
            }
        }
    },
    paginators: {}
};

AWS.apiLoader.services["kinesisvideoarchivedmedia"] = {};

AWS.KinesisVideoArchivedMedia = AWS.Service.defineService("kinesisvideoarchivedmedia", [ "2017-09-30" ]);

AWS.apiLoader.services["kinesisvideoarchivedmedia"]["2017-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-30",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Kinesis Video Archived Media",
        serviceFullName: "Amazon Kinesis Video Streams Archived Media",
        serviceId: "Kinesis Video Archived Media",
        signatureVersion: "v4",
        uid: "kinesis-video-archived-media-2017-09-30"
    },
    operations: {
        GetClip: {
            http: {
                requestUri: "/getClip"
            },
            input: {
                type: "structure",
                required: [ "ClipFragmentSelector" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    ClipFragmentSelector: {
                        type: "structure",
                        required: [ "FragmentSelectorType", "TimestampRange" ],
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                required: [ "StartTimestamp", "EndTimestamp" ],
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Payload: {
                        shape: "Sa"
                    }
                },
                payload: "Payload"
            }
        },
        GetDASHStreamingSessionURL: {
            http: {
                requestUri: "/getDASHStreamingSessionURL"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    PlaybackMode: {},
                    DisplayFragmentTimestamp: {},
                    DisplayFragmentNumber: {},
                    DASHFragmentSelector: {
                        type: "structure",
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    },
                    Expires: {
                        type: "integer"
                    },
                    MaxManifestFragmentResults: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DASHStreamingSessionURL: {}
                }
            }
        },
        GetHLSStreamingSessionURL: {
            http: {
                requestUri: "/getHLSStreamingSessionURL"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    PlaybackMode: {},
                    HLSFragmentSelector: {
                        type: "structure",
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    },
                    ContainerFormat: {},
                    DiscontinuityMode: {},
                    DisplayFragmentTimestamp: {},
                    Expires: {
                        type: "integer"
                    },
                    MaxMediaPlaylistFragmentResults: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HLSStreamingSessionURL: {}
                }
            }
        },
        GetImages: {
            http: {
                requestUri: "/getImages"
            },
            input: {
                type: "structure",
                required: [ "ImageSelectorType", "StartTimestamp", "EndTimestamp", "Format" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    ImageSelectorType: {},
                    StartTimestamp: {
                        type: "timestamp"
                    },
                    EndTimestamp: {
                        type: "timestamp"
                    },
                    SamplingInterval: {
                        type: "integer"
                    },
                    Format: {},
                    FormatConfig: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    WidthPixels: {
                        type: "integer"
                    },
                    HeightPixels: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "long"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TimeStamp: {
                                    type: "timestamp"
                                },
                                Error: {},
                                ImageContent: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        GetMediaForFragmentList: {
            http: {
                requestUri: "/getMediaForFragmentList"
            },
            input: {
                type: "structure",
                required: [ "Fragments" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    Fragments: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Payload: {
                        shape: "Sa"
                    }
                },
                payload: "Payload"
            }
        },
        ListFragments: {
            http: {
                requestUri: "/listFragments"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    MaxResults: {
                        type: "long"
                    },
                    NextToken: {},
                    FragmentSelector: {
                        type: "structure",
                        required: [ "FragmentSelectorType", "TimestampRange" ],
                        members: {
                            FragmentSelectorType: {},
                            TimestampRange: {
                                type: "structure",
                                required: [ "StartTimestamp", "EndTimestamp" ],
                                members: {
                                    StartTimestamp: {
                                        type: "timestamp"
                                    },
                                    EndTimestamp: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fragments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                FragmentNumber: {},
                                FragmentSizeInBytes: {
                                    type: "long"
                                },
                                ProducerTimestamp: {
                                    type: "timestamp"
                                },
                                ServerTimestamp: {
                                    type: "timestamp"
                                },
                                FragmentLengthInMilliseconds: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "blob",
            streaming: true
        }
    },
    paginators: {
        GetImages: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Images"
        },
        ListFragments: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "Fragments"
        }
    }
};

AWS.apiLoader.services["kinesisvideomedia"] = {};

AWS.KinesisVideoMedia = AWS.Service.defineService("kinesisvideomedia", [ "2017-09-30" ]);

AWS.apiLoader.services["kinesisvideomedia"]["2017-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-30",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Kinesis Video Media",
        serviceFullName: "Amazon Kinesis Video Streams Media",
        serviceId: "Kinesis Video Media",
        signatureVersion: "v4",
        uid: "kinesis-video-media-2017-09-30"
    },
    operations: {
        GetMedia: {
            http: {
                requestUri: "/getMedia"
            },
            input: {
                type: "structure",
                required: [ "StartSelector" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    StartSelector: {
                        type: "structure",
                        required: [ "StartSelectorType" ],
                        members: {
                            StartSelectorType: {},
                            AfterFragmentNumber: {},
                            StartTimestamp: {
                                type: "timestamp"
                            },
                            ContinuationToken: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Payload: {
                        type: "blob",
                        streaming: true
                    }
                },
                payload: "Payload"
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["kinesisvideo"] = {};

AWS.KinesisVideo = AWS.Service.defineService("kinesisvideo", [ "2017-09-30" ]);

AWS.apiLoader.services["kinesisvideo"]["2017-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-09-30",
        endpointPrefix: "kinesisvideo",
        protocol: "rest-json",
        serviceAbbreviation: "Kinesis Video",
        serviceFullName: "Amazon Kinesis Video Streams",
        serviceId: "Kinesis Video",
        signatureVersion: "v4",
        uid: "kinesisvideo-2017-09-30"
    },
    operations: {
        CreateSignalingChannel: {
            http: {
                requestUri: "/createSignalingChannel"
            },
            input: {
                type: "structure",
                required: [ "ChannelName" ],
                members: {
                    ChannelName: {},
                    ChannelType: {},
                    SingleMasterConfiguration: {
                        shape: "S4"
                    },
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelARN: {}
                }
            }
        },
        CreateStream: {
            http: {
                requestUri: "/createStream"
            },
            input: {
                type: "structure",
                required: [ "StreamName" ],
                members: {
                    DeviceName: {},
                    StreamName: {},
                    MediaType: {},
                    KmsKeyId: {},
                    DataRetentionInHours: {
                        type: "integer"
                    },
                    Tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamARN: {}
                }
            }
        },
        DeleteEdgeConfiguration: {
            http: {
                requestUri: "/deleteEdgeConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSignalingChannel: {
            http: {
                requestUri: "/deleteSignalingChannel"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN" ],
                members: {
                    ChannelARN: {},
                    CurrentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteStream: {
            http: {
                requestUri: "/deleteStream"
            },
            input: {
                type: "structure",
                required: [ "StreamARN" ],
                members: {
                    StreamARN: {},
                    CurrentVersion: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeEdgeConfiguration: {
            http: {
                requestUri: "/describeEdgeConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    SyncStatus: {},
                    FailedStatusDetails: {},
                    EdgeConfig: {
                        shape: "Sw"
                    },
                    EdgeAgentStatus: {
                        type: "structure",
                        members: {
                            LastRecorderStatus: {
                                type: "structure",
                                members: {
                                    JobStatusDetails: {},
                                    LastCollectedTime: {
                                        type: "timestamp"
                                    },
                                    LastUpdatedTime: {
                                        type: "timestamp"
                                    },
                                    RecorderStatus: {}
                                }
                            },
                            LastUploaderStatus: {
                                type: "structure",
                                members: {
                                    JobStatusDetails: {},
                                    LastCollectedTime: {
                                        type: "timestamp"
                                    },
                                    LastUpdatedTime: {
                                        type: "timestamp"
                                    },
                                    UploaderStatus: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeImageGenerationConfiguration: {
            http: {
                requestUri: "/describeImageGenerationConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageGenerationConfiguration: {
                        shape: "S1k"
                    }
                }
            }
        },
        DescribeMappedResourceConfiguration: {
            http: {
                requestUri: "/describeMappedResourceConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MappedResourceConfigurationList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Type: {},
                                ARN: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeMediaStorageConfiguration: {
            http: {
                requestUri: "/describeMediaStorageConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    ChannelName: {},
                    ChannelARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaStorageConfiguration: {
                        shape: "S26"
                    }
                }
            }
        },
        DescribeNotificationConfiguration: {
            http: {
                requestUri: "/describeNotificationConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotificationConfiguration: {
                        shape: "S2a"
                    }
                }
            }
        },
        DescribeSignalingChannel: {
            http: {
                requestUri: "/describeSignalingChannel"
            },
            input: {
                type: "structure",
                members: {
                    ChannelName: {},
                    ChannelARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelInfo: {
                        shape: "S2e"
                    }
                }
            }
        },
        DescribeStream: {
            http: {
                requestUri: "/describeStream"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamInfo: {
                        shape: "S2i"
                    }
                }
            }
        },
        GetDataEndpoint: {
            http: {
                requestUri: "/getDataEndpoint"
            },
            input: {
                type: "structure",
                required: [ "APIName" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    APIName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DataEndpoint: {}
                }
            }
        },
        GetSignalingChannelEndpoint: {
            http: {
                requestUri: "/getSignalingChannelEndpoint"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN" ],
                members: {
                    ChannelARN: {},
                    SingleMasterChannelEndpointConfiguration: {
                        type: "structure",
                        members: {
                            Protocols: {
                                type: "list",
                                member: {}
                            },
                            Role: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceEndpointList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Protocol: {},
                                ResourceEndpoint: {}
                            }
                        }
                    }
                }
            }
        },
        ListEdgeAgentConfigurations: {
            http: {
                requestUri: "/listEdgeAgentConfigurations"
            },
            input: {
                type: "structure",
                required: [ "HubDeviceArn" ],
                members: {
                    HubDeviceArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    EdgeConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StreamName: {},
                                StreamARN: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                SyncStatus: {},
                                FailedStatusDetails: {},
                                EdgeConfig: {
                                    shape: "Sw"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSignalingChannels: {
            http: {
                requestUri: "/listSignalingChannels"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ChannelNameCondition: {
                        type: "structure",
                        members: {
                            ComparisonOperator: {},
                            ComparisonValue: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ChannelInfoList: {
                        type: "list",
                        member: {
                            shape: "S2e"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStreams: {
            http: {
                requestUri: "/listStreams"
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    StreamNameCondition: {
                        type: "structure",
                        members: {
                            ComparisonOperator: {},
                            ComparisonValue: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamInfoList: {
                        type: "list",
                        member: {
                            shape: "S2i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/ListTagsForResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    NextToken: {},
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Si"
                    }
                }
            }
        },
        ListTagsForStream: {
            http: {
                requestUri: "/listTagsForStream"
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    StreamARN: {},
                    StreamName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Tags: {
                        shape: "Si"
                    }
                }
            }
        },
        StartEdgeConfigurationUpdate: {
            http: {
                requestUri: "/startEdgeConfigurationUpdate"
            },
            input: {
                type: "structure",
                required: [ "EdgeConfig" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    EdgeConfig: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    SyncStatus: {},
                    FailedStatusDetails: {},
                    EdgeConfig: {
                        shape: "Sw"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagStream: {
            http: {
                requestUri: "/tagStream"
            },
            input: {
                type: "structure",
                required: [ "Tags" ],
                members: {
                    StreamARN: {},
                    StreamName: {},
                    Tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource"
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeyList" ],
                members: {
                    ResourceARN: {},
                    TagKeyList: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagStream: {
            http: {
                requestUri: "/untagStream"
            },
            input: {
                type: "structure",
                required: [ "TagKeyList" ],
                members: {
                    StreamARN: {},
                    StreamName: {},
                    TagKeyList: {
                        shape: "S3n"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDataRetention: {
            http: {
                requestUri: "/updateDataRetention"
            },
            input: {
                type: "structure",
                required: [ "CurrentVersion", "Operation", "DataRetentionChangeInHours" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    CurrentVersion: {},
                    Operation: {},
                    DataRetentionChangeInHours: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateImageGenerationConfiguration: {
            http: {
                requestUri: "/updateImageGenerationConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    ImageGenerationConfiguration: {
                        shape: "S1k"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateMediaStorageConfiguration: {
            http: {
                requestUri: "/updateMediaStorageConfiguration"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN", "MediaStorageConfiguration" ],
                members: {
                    ChannelARN: {},
                    MediaStorageConfiguration: {
                        shape: "S26"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNotificationConfiguration: {
            http: {
                requestUri: "/updateNotificationConfiguration"
            },
            input: {
                type: "structure",
                members: {
                    StreamName: {},
                    StreamARN: {},
                    NotificationConfiguration: {
                        shape: "S2a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSignalingChannel: {
            http: {
                requestUri: "/updateSignalingChannel"
            },
            input: {
                type: "structure",
                required: [ "ChannelARN", "CurrentVersion" ],
                members: {
                    ChannelARN: {},
                    CurrentVersion: {},
                    SingleMasterConfiguration: {
                        shape: "S4"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateStream: {
            http: {
                requestUri: "/updateStream"
            },
            input: {
                type: "structure",
                required: [ "CurrentVersion" ],
                members: {
                    StreamName: {},
                    StreamARN: {},
                    CurrentVersion: {},
                    DeviceName: {},
                    MediaType: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                MessageTtlSeconds: {
                    type: "integer"
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {}
        },
        Sw: {
            type: "structure",
            required: [ "HubDeviceArn", "RecorderConfig" ],
            members: {
                HubDeviceArn: {},
                RecorderConfig: {
                    type: "structure",
                    required: [ "MediaSourceConfig" ],
                    members: {
                        MediaSourceConfig: {
                            type: "structure",
                            required: [ "MediaUriSecretArn", "MediaUriType" ],
                            members: {
                                MediaUriSecretArn: {
                                    type: "string",
                                    sensitive: true
                                },
                                MediaUriType: {}
                            }
                        },
                        ScheduleConfig: {
                            shape: "S12"
                        }
                    }
                },
                UploaderConfig: {
                    type: "structure",
                    required: [ "ScheduleConfig" ],
                    members: {
                        ScheduleConfig: {
                            shape: "S12"
                        }
                    }
                },
                DeletionConfig: {
                    type: "structure",
                    members: {
                        EdgeRetentionInHours: {
                            type: "integer"
                        },
                        LocalSizeConfig: {
                            type: "structure",
                            members: {
                                MaxLocalMediaSizeInMB: {
                                    type: "integer"
                                },
                                StrategyOnFullSize: {}
                            }
                        },
                        DeleteAfterUpload: {
                            type: "boolean"
                        }
                    }
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "ScheduleExpression", "DurationInSeconds" ],
            members: {
                ScheduleExpression: {},
                DurationInSeconds: {
                    type: "integer"
                }
            }
        },
        S1k: {
            type: "structure",
            required: [ "Status", "ImageSelectorType", "DestinationConfig", "SamplingInterval", "Format" ],
            members: {
                Status: {},
                ImageSelectorType: {},
                DestinationConfig: {
                    type: "structure",
                    required: [ "Uri", "DestinationRegion" ],
                    members: {
                        Uri: {},
                        DestinationRegion: {}
                    }
                },
                SamplingInterval: {
                    type: "integer"
                },
                Format: {},
                FormatConfig: {
                    type: "map",
                    key: {},
                    value: {}
                },
                WidthPixels: {
                    type: "integer"
                },
                HeightPixels: {
                    type: "integer"
                }
            }
        },
        S26: {
            type: "structure",
            required: [ "Status" ],
            members: {
                StreamARN: {},
                Status: {}
            }
        },
        S2a: {
            type: "structure",
            required: [ "Status", "DestinationConfig" ],
            members: {
                Status: {},
                DestinationConfig: {
                    type: "structure",
                    required: [ "Uri" ],
                    members: {
                        Uri: {}
                    }
                }
            }
        },
        S2e: {
            type: "structure",
            members: {
                ChannelName: {},
                ChannelARN: {},
                ChannelType: {},
                ChannelStatus: {},
                CreationTime: {
                    type: "timestamp"
                },
                SingleMasterConfiguration: {
                    shape: "S4"
                },
                Version: {}
            }
        },
        S2i: {
            type: "structure",
            members: {
                DeviceName: {},
                StreamName: {},
                StreamARN: {},
                MediaType: {},
                KmsKeyId: {},
                Version: {},
                Status: {},
                CreationTime: {
                    type: "timestamp"
                },
                DataRetentionInHours: {
                    type: "integer"
                }
            }
        },
        S3n: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        DescribeMappedResourceConfiguration: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "MappedResourceConfigurationList"
        },
        ListEdgeAgentConfigurations: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "EdgeConfigs"
        },
        ListSignalingChannels: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "ChannelInfoList"
        },
        ListStreams: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "StreamInfoList"
        }
    }
};

AWS.apiLoader.services["sagemakerruntime"] = {};

AWS.SageMakerRuntime = AWS.Service.defineService("sagemakerruntime", [ "2017-05-13" ]);

AWS.apiLoader.services["sagemakerruntime"]["2017-05-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-05-13",
        endpointPrefix: "runtime.sagemaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon SageMaker Runtime",
        serviceId: "SageMaker Runtime",
        signatureVersion: "v4",
        signingName: "sagemaker",
        uid: "runtime.sagemaker-2017-05-13"
    },
    operations: {
        InvokeEndpoint: {
            http: {
                requestUri: "/endpoints/{EndpointName}/invocations"
            },
            input: {
                type: "structure",
                required: [ "EndpointName", "Body" ],
                members: {
                    EndpointName: {
                        location: "uri",
                        locationName: "EndpointName"
                    },
                    Body: {
                        shape: "S3"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Accept: {
                        location: "header",
                        locationName: "Accept"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    },
                    TargetModel: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Model"
                    },
                    TargetVariant: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Variant"
                    },
                    TargetContainerHostname: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Container-Hostname"
                    },
                    InferenceId: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Inference-Id"
                    },
                    EnableExplanations: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Enable-Explanations"
                    },
                    InferenceComponentName: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Inference-Component"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                required: [ "Body" ],
                members: {
                    Body: {
                        shape: "S3"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    InvokedProductionVariant: {
                        location: "header",
                        locationName: "x-Amzn-Invoked-Production-Variant"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    }
                },
                payload: "Body"
            }
        },
        InvokeEndpointAsync: {
            http: {
                requestUri: "/endpoints/{EndpointName}/async-invocations",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "EndpointName", "InputLocation" ],
                members: {
                    EndpointName: {
                        location: "uri",
                        locationName: "EndpointName"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Content-Type"
                    },
                    Accept: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Accept"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    },
                    InferenceId: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Inference-Id"
                    },
                    InputLocation: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-InputLocation"
                    },
                    RequestTTLSeconds: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-RequestTTLSeconds",
                        type: "integer"
                    },
                    InvocationTimeoutSeconds: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-InvocationTimeoutSeconds",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InferenceId: {},
                    OutputLocation: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-OutputLocation"
                    },
                    FailureLocation: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-FailureLocation"
                    }
                }
            }
        },
        InvokeEndpointWithResponseStream: {
            http: {
                requestUri: "/endpoints/{EndpointName}/invocations-response-stream"
            },
            input: {
                type: "structure",
                required: [ "EndpointName", "Body" ],
                members: {
                    EndpointName: {
                        location: "uri",
                        locationName: "EndpointName"
                    },
                    Body: {
                        shape: "S3"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Accept: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Accept"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    },
                    TargetVariant: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Variant"
                    },
                    TargetContainerHostname: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Target-Container-Hostname"
                    },
                    InferenceId: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Inference-Id"
                    },
                    InferenceComponentName: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Inference-Component"
                    }
                },
                payload: "Body"
            },
            output: {
                type: "structure",
                required: [ "Body" ],
                members: {
                    Body: {
                        type: "structure",
                        members: {
                            PayloadPart: {
                                type: "structure",
                                members: {
                                    Bytes: {
                                        eventpayload: true,
                                        type: "blob",
                                        sensitive: true
                                    }
                                },
                                event: true
                            },
                            ModelStreamError: {
                                type: "structure",
                                members: {
                                    Message: {},
                                    ErrorCode: {}
                                },
                                exception: true,
                                synthetic: true
                            },
                            InternalStreamFailure: {
                                type: "structure",
                                members: {
                                    Message: {}
                                },
                                exception: true,
                                fault: true,
                                synthetic: true
                            }
                        },
                        eventstream: true
                    },
                    ContentType: {
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Content-Type"
                    },
                    InvokedProductionVariant: {
                        location: "header",
                        locationName: "x-Amzn-Invoked-Production-Variant"
                    },
                    CustomAttributes: {
                        shape: "S5",
                        location: "header",
                        locationName: "X-Amzn-SageMaker-Custom-Attributes"
                    }
                },
                payload: "Body"
            }
        }
    },
    shapes: {
        S3: {
            type: "blob",
            sensitive: true
        },
        S5: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["sagemaker"] = {};

AWS.SageMaker = AWS.Service.defineService("sagemaker", [ "2017-07-24" ]);

AWS.apiLoader.services["sagemaker"]["2017-07-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2017-07-24",
        endpointPrefix: "api.sagemaker",
        jsonVersion: "1.1",
        protocol: "json",
        serviceAbbreviation: "SageMaker",
        serviceFullName: "Amazon SageMaker Service",
        serviceId: "SageMaker",
        signatureVersion: "v4",
        signingName: "sagemaker",
        targetPrefix: "SageMaker",
        uid: "sagemaker-2017-07-24"
    },
    operations: {
        AddAssociation: {
            input: {
                type: "structure",
                required: [ "SourceArn", "DestinationArn" ],
                members: {
                    SourceArn: {},
                    DestinationArn: {},
                    AssociationType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceArn: {},
                    DestinationArn: {}
                }
            }
        },
        AddTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        AssociateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName", "TrialName" ],
                members: {
                    TrialComponentName: {},
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {},
                    TrialArn: {}
                }
            }
        },
        BatchDescribeModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageArnList" ],
                members: {
                    ModelPackageArnList: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ModelPackageSummaries: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "ModelPackageGroupName", "ModelPackageArn", "CreationTime", "InferenceSpecification", "ModelPackageStatus" ],
                            members: {
                                ModelPackageGroupName: {},
                                ModelPackageVersion: {
                                    type: "integer"
                                },
                                ModelPackageArn: {},
                                ModelPackageDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                InferenceSpecification: {
                                    shape: "Sr"
                                },
                                ModelPackageStatus: {},
                                ModelApprovalStatus: {}
                            }
                        }
                    },
                    BatchDescribeModelPackageErrorMap: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "ErrorCode", "ErrorResponse" ],
                            members: {
                                ErrorCode: {},
                                ErrorResponse: {}
                            }
                        }
                    }
                }
            }
        },
        CreateAction: {
            input: {
                type: "structure",
                required: [ "ActionName", "Source", "ActionType" ],
                members: {
                    ActionName: {},
                    Source: {
                        shape: "S1n"
                    },
                    ActionType: {},
                    Description: {},
                    Status: {},
                    Properties: {
                        shape: "S1s"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionArn: {}
                }
            }
        },
        CreateAlgorithm: {
            input: {
                type: "structure",
                required: [ "AlgorithmName", "TrainingSpecification" ],
                members: {
                    AlgorithmName: {},
                    AlgorithmDescription: {},
                    TrainingSpecification: {
                        shape: "S1z"
                    },
                    InferenceSpecification: {
                        shape: "Sr"
                    },
                    ValidationSpecification: {
                        shape: "S2r"
                    },
                    CertifyForMarketplace: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AlgorithmArn" ],
                members: {
                    AlgorithmArn: {}
                }
            }
        },
        CreateApp: {
            input: {
                type: "structure",
                required: [ "DomainId", "AppType", "AppName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    AppType: {},
                    AppName: {},
                    Tags: {
                        shape: "S7"
                    },
                    ResourceSpec: {
                        shape: "S4h"
                    },
                    SpaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppArn: {}
                }
            }
        },
        CreateAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {},
                    Tags: {
                        shape: "S7"
                    },
                    KernelGatewayImageConfig: {
                        shape: "S4s"
                    },
                    JupyterLabAppImageConfig: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppImageConfigArn: {}
                }
            }
        },
        CreateArtifact: {
            input: {
                type: "structure",
                required: [ "Source", "ArtifactType" ],
                members: {
                    ArtifactName: {},
                    Source: {
                        shape: "S5b"
                    },
                    ArtifactType: {},
                    Properties: {
                        shape: "S1s"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactArn: {}
                }
            }
        },
        CreateAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName", "InputDataConfig", "OutputDataConfig", "RoleArn" ],
                members: {
                    AutoMLJobName: {},
                    InputDataConfig: {
                        shape: "S5j"
                    },
                    OutputDataConfig: {
                        shape: "S5r"
                    },
                    ProblemType: {},
                    AutoMLJobObjective: {
                        shape: "S5t"
                    },
                    AutoMLJobConfig: {
                        shape: "S5v"
                    },
                    RoleArn: {},
                    GenerateCandidateDefinitionsOnly: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    ModelDeployConfig: {
                        shape: "S6f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobArn" ],
                members: {
                    AutoMLJobArn: {}
                }
            }
        },
        CreateAutoMLJobV2: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName", "AutoMLJobInputDataConfig", "OutputDataConfig", "AutoMLProblemTypeConfig", "RoleArn" ],
                members: {
                    AutoMLJobName: {},
                    AutoMLJobInputDataConfig: {
                        shape: "S6l"
                    },
                    OutputDataConfig: {
                        shape: "S5r"
                    },
                    AutoMLProblemTypeConfig: {
                        shape: "S6n"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    },
                    SecurityConfig: {
                        shape: "S60"
                    },
                    AutoMLJobObjective: {
                        shape: "S5t"
                    },
                    ModelDeployConfig: {
                        shape: "S6f"
                    },
                    DataSplitConfig: {
                        shape: "S66"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobArn" ],
                members: {
                    AutoMLJobArn: {}
                }
            }
        },
        CreateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName", "InstanceGroups" ],
                members: {
                    ClusterName: {},
                    InstanceGroups: {
                        shape: "S7n"
                    },
                    VpcConfig: {
                        shape: "S61"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ClusterArn" ],
                members: {
                    ClusterArn: {}
                }
            }
        },
        CreateCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName", "GitConfig" ],
                members: {
                    CodeRepositoryName: {},
                    GitConfig: {
                        shape: "S7y"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositoryArn" ],
                members: {
                    CodeRepositoryArn: {}
                }
            }
        },
        CreateCompilationJob: {
            input: {
                type: "structure",
                required: [ "CompilationJobName", "RoleArn", "OutputConfig", "StoppingCondition" ],
                members: {
                    CompilationJobName: {},
                    RoleArn: {},
                    ModelPackageVersionArn: {},
                    InputConfig: {
                        shape: "S85"
                    },
                    OutputConfig: {
                        shape: "S88"
                    },
                    VpcConfig: {
                        shape: "S8f"
                    },
                    StoppingCondition: {
                        shape: "S3p"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CompilationJobArn" ],
                members: {
                    CompilationJobArn: {}
                }
            }
        },
        CreateContext: {
            input: {
                type: "structure",
                required: [ "ContextName", "Source", "ContextType" ],
                members: {
                    ContextName: {},
                    Source: {
                        shape: "S8n"
                    },
                    ContextType: {},
                    Description: {},
                    Properties: {
                        shape: "S1s"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextArn: {}
                }
            }
        },
        CreateDataQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "DataQualityAppSpecification", "DataQualityJobInput", "DataQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    DataQualityBaselineConfig: {
                        shape: "S8s"
                    },
                    DataQualityAppSpecification: {
                        shape: "S8w"
                    },
                    DataQualityJobInput: {
                        shape: "S95"
                    },
                    DataQualityJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "OutputConfig" ],
                members: {
                    DeviceFleetName: {},
                    RoleArn: {},
                    Description: {},
                    OutputConfig: {
                        shape: "Sa1"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    EnableIotRoleAlias: {
                        type: "boolean"
                    }
                }
            }
        },
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "DomainName", "AuthMode", "DefaultUserSettings", "SubnetIds", "VpcId" ],
                members: {
                    DomainName: {},
                    AuthMode: {},
                    DefaultUserSettings: {
                        shape: "Sa7"
                    },
                    SubnetIds: {
                        shape: "S64"
                    },
                    VpcId: {},
                    Tags: {
                        shape: "S7"
                    },
                    AppNetworkAccessType: {},
                    HomeEfsFileSystemKmsKeyId: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use KmsKeyId instead."
                    },
                    KmsKeyId: {},
                    AppSecurityGroupManagement: {},
                    DomainSettings: {
                        shape: "Sbh"
                    },
                    DefaultSpaceSettings: {
                        shape: "Sbl"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainArn: {},
                    Url: {}
                }
            }
        },
        CreateEdgeDeploymentPlan: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName", "ModelConfigs", "DeviceFleetName" ],
                members: {
                    EdgeDeploymentPlanName: {},
                    ModelConfigs: {
                        shape: "Sbq"
                    },
                    DeviceFleetName: {},
                    Stages: {
                        shape: "Sbs"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EdgeDeploymentPlanArn" ],
                members: {
                    EdgeDeploymentPlanArn: {}
                }
            }
        },
        CreateEdgeDeploymentStage: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName", "Stages" ],
                members: {
                    EdgeDeploymentPlanName: {},
                    Stages: {
                        shape: "Sbs"
                    }
                }
            }
        },
        CreateEdgePackagingJob: {
            input: {
                type: "structure",
                required: [ "EdgePackagingJobName", "CompilationJobName", "ModelName", "ModelVersion", "RoleArn", "OutputConfig" ],
                members: {
                    EdgePackagingJobName: {},
                    CompilationJobName: {},
                    ModelName: {},
                    ModelVersion: {},
                    RoleArn: {},
                    OutputConfig: {
                        shape: "Sa1"
                    },
                    ResourceKey: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "EndpointConfigName" ],
                members: {
                    EndpointName: {},
                    EndpointConfigName: {},
                    DeploymentConfig: {
                        shape: "Sc8"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        CreateEndpointConfig: {
            input: {
                type: "structure",
                required: [ "EndpointConfigName", "ProductionVariants" ],
                members: {
                    EndpointConfigName: {},
                    ProductionVariants: {
                        shape: "Scq"
                    },
                    DataCaptureConfig: {
                        shape: "Sdc"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    KmsKeyId: {},
                    AsyncInferenceConfig: {
                        shape: "Sdn"
                    },
                    ExplainerConfig: {
                        shape: "Sdv"
                    },
                    ShadowProductionVariants: {
                        shape: "Scq"
                    },
                    ExecutionRoleArn: {},
                    VpcConfig: {
                        shape: "S61"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointConfigArn" ],
                members: {
                    EndpointConfigArn: {}
                }
            }
        },
        CreateExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {},
                    DisplayName: {},
                    Description: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentArn: {}
                }
            }
        },
        CreateFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "RecordIdentifierFeatureName", "EventTimeFeatureName", "FeatureDefinitions" ],
                members: {
                    FeatureGroupName: {},
                    RecordIdentifierFeatureName: {},
                    EventTimeFeatureName: {},
                    FeatureDefinitions: {
                        shape: "Seu"
                    },
                    OnlineStoreConfig: {
                        shape: "Sf1"
                    },
                    OfflineStoreConfig: {
                        shape: "Sf7"
                    },
                    RoleArn: {},
                    Description: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupArn" ],
                members: {
                    FeatureGroupArn: {}
                }
            }
        },
        CreateFlowDefinition: {
            input: {
                type: "structure",
                required: [ "FlowDefinitionName", "HumanLoopConfig", "OutputConfig", "RoleArn" ],
                members: {
                    FlowDefinitionName: {},
                    HumanLoopRequestSource: {
                        shape: "Sfj"
                    },
                    HumanLoopActivationConfig: {
                        shape: "Sfl"
                    },
                    HumanLoopConfig: {
                        shape: "Sfo"
                    },
                    OutputConfig: {
                        shape: "Sg3"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FlowDefinitionArn" ],
                members: {
                    FlowDefinitionArn: {}
                }
            }
        },
        CreateHub: {
            input: {
                type: "structure",
                required: [ "HubName", "HubDescription" ],
                members: {
                    HubName: {},
                    HubDescription: {},
                    HubDisplayName: {},
                    HubSearchKeywords: {
                        shape: "Sga"
                    },
                    S3StorageConfig: {
                        shape: "Sgc"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HubArn" ],
                members: {
                    HubArn: {}
                }
            }
        },
        CreateHumanTaskUi: {
            input: {
                type: "structure",
                required: [ "HumanTaskUiName", "UiTemplate" ],
                members: {
                    HumanTaskUiName: {},
                    UiTemplate: {
                        shape: "Sgi"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HumanTaskUiArn" ],
                members: {
                    HumanTaskUiArn: {}
                }
            }
        },
        CreateHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName", "HyperParameterTuningJobConfig" ],
                members: {
                    HyperParameterTuningJobName: {},
                    HyperParameterTuningJobConfig: {
                        shape: "Sgn"
                    },
                    TrainingJobDefinition: {
                        shape: "Shg"
                    },
                    TrainingJobDefinitions: {
                        shape: "Shw"
                    },
                    WarmStartConfig: {
                        shape: "Shx"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    Autotune: {
                        shape: "Si1"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HyperParameterTuningJobArn" ],
                members: {
                    HyperParameterTuningJobArn: {}
                }
            }
        },
        CreateImage: {
            input: {
                type: "structure",
                required: [ "ImageName", "RoleArn" ],
                members: {
                    Description: {},
                    DisplayName: {},
                    ImageName: {},
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageArn: {}
                }
            }
        },
        CreateImageVersion: {
            input: {
                type: "structure",
                required: [ "BaseImage", "ClientToken", "ImageName" ],
                members: {
                    BaseImage: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    ImageName: {},
                    Aliases: {
                        shape: "Sic"
                    },
                    VendorGuidance: {},
                    JobType: {},
                    MLFramework: {},
                    ProgrammingLang: {},
                    Processor: {},
                    Horovod: {
                        type: "boolean"
                    },
                    ReleaseNotes: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageVersionArn: {}
                }
            }
        },
        CreateInferenceComponent: {
            input: {
                type: "structure",
                required: [ "InferenceComponentName", "EndpointName", "VariantName", "Specification", "RuntimeConfig" ],
                members: {
                    InferenceComponentName: {},
                    EndpointName: {},
                    VariantName: {},
                    Specification: {
                        shape: "Sio"
                    },
                    RuntimeConfig: {
                        shape: "Siv"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceComponentArn" ],
                members: {
                    InferenceComponentArn: {}
                }
            }
        },
        CreateInferenceExperiment: {
            input: {
                type: "structure",
                required: [ "Name", "Type", "RoleArn", "EndpointName", "ModelVariants", "ShadowModeConfig" ],
                members: {
                    Name: {},
                    Type: {},
                    Schedule: {
                        shape: "Sj2"
                    },
                    Description: {},
                    RoleArn: {},
                    EndpointName: {},
                    ModelVariants: {
                        shape: "Sj5"
                    },
                    DataStorageConfig: {
                        shape: "Sjd"
                    },
                    ShadowModeConfig: {
                        shape: "Sje"
                    },
                    KmsKey: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceExperimentArn" ],
                members: {
                    InferenceExperimentArn: {}
                }
            }
        },
        CreateInferenceRecommendationsJob: {
            input: {
                type: "structure",
                required: [ "JobName", "JobType", "RoleArn", "InputConfig" ],
                members: {
                    JobName: {},
                    JobType: {},
                    RoleArn: {},
                    InputConfig: {
                        shape: "Sjm"
                    },
                    JobDescription: {},
                    StoppingConditions: {
                        shape: "Skq"
                    },
                    OutputConfig: {
                        type: "structure",
                        members: {
                            KmsKeyId: {},
                            CompiledOutputConfig: {
                                type: "structure",
                                members: {
                                    S3OutputUri: {}
                                }
                            }
                        }
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobArn" ],
                members: {
                    JobArn: {}
                }
            }
        },
        CreateLabelingJob: {
            input: {
                type: "structure",
                required: [ "LabelingJobName", "LabelAttributeName", "InputConfig", "OutputConfig", "RoleArn", "HumanTaskConfig" ],
                members: {
                    LabelingJobName: {},
                    LabelAttributeName: {},
                    InputConfig: {
                        shape: "Sl2"
                    },
                    OutputConfig: {
                        shape: "Sl9"
                    },
                    RoleArn: {},
                    LabelCategoryConfigS3Uri: {},
                    StoppingConditions: {
                        shape: "Sla"
                    },
                    LabelingJobAlgorithmsConfig: {
                        shape: "Sld"
                    },
                    HumanTaskConfig: {
                        shape: "Slh"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "LabelingJobArn" ],
                members: {
                    LabelingJobArn: {}
                }
            }
        },
        CreateModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {},
                    PrimaryContainer: {
                        shape: "Slw"
                    },
                    Containers: {
                        shape: "Smc"
                    },
                    InferenceExecutionConfig: {
                        shape: "Smd"
                    },
                    ExecutionRoleArn: {},
                    Tags: {
                        shape: "S7"
                    },
                    VpcConfig: {
                        shape: "S61"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelArn" ],
                members: {
                    ModelArn: {}
                }
            }
        },
        CreateModelBiasJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "ModelBiasAppSpecification", "ModelBiasJobInput", "ModelBiasJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    ModelBiasBaselineConfig: {
                        shape: "Smh"
                    },
                    ModelBiasAppSpecification: {
                        shape: "Smi"
                    },
                    ModelBiasJobInput: {
                        shape: "Smj"
                    },
                    ModelBiasJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateModelCard: {
            input: {
                type: "structure",
                required: [ "ModelCardName", "Content", "ModelCardStatus" ],
                members: {
                    ModelCardName: {},
                    SecurityConfig: {
                        shape: "Smn"
                    },
                    Content: {
                        shape: "Smo"
                    },
                    ModelCardStatus: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardArn" ],
                members: {
                    ModelCardArn: {}
                }
            }
        },
        CreateModelCardExportJob: {
            input: {
                type: "structure",
                required: [ "ModelCardName", "ModelCardExportJobName", "OutputConfig" ],
                members: {
                    ModelCardName: {},
                    ModelCardVersion: {
                        type: "integer"
                    },
                    ModelCardExportJobName: {},
                    OutputConfig: {
                        shape: "Smu"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardExportJobArn" ],
                members: {
                    ModelCardExportJobArn: {}
                }
            }
        },
        CreateModelExplainabilityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "ModelExplainabilityAppSpecification", "ModelExplainabilityJobInput", "ModelExplainabilityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    ModelExplainabilityBaselineConfig: {
                        shape: "Smy"
                    },
                    ModelExplainabilityAppSpecification: {
                        shape: "Smz"
                    },
                    ModelExplainabilityJobInput: {
                        shape: "Sn0"
                    },
                    ModelExplainabilityJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateModelPackage: {
            input: {
                type: "structure",
                members: {
                    ModelPackageName: {},
                    ModelPackageGroupName: {},
                    ModelPackageDescription: {},
                    InferenceSpecification: {
                        shape: "Sr"
                    },
                    ValidationSpecification: {
                        shape: "Sn3"
                    },
                    SourceAlgorithmSpecification: {
                        shape: "Sn6"
                    },
                    CertifyForMarketplace: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    ModelApprovalStatus: {},
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    ModelMetrics: {
                        shape: "Sn9"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    CustomerMetadataProperties: {
                        shape: "Sng"
                    },
                    DriftCheckBaselines: {
                        shape: "Snj"
                    },
                    Domain: {},
                    Task: {},
                    SamplePayloadUrl: {},
                    AdditionalInferenceSpecifications: {
                        shape: "Snp"
                    },
                    SkipModelValidation: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageArn" ],
                members: {
                    ModelPackageArn: {}
                }
            }
        },
        CreateModelPackageGroup: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {},
                    ModelPackageGroupDescription: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupArn" ],
                members: {
                    ModelPackageGroupArn: {}
                }
            }
        },
        CreateModelQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName", "ModelQualityAppSpecification", "ModelQualityJobInput", "ModelQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionName: {},
                    ModelQualityBaselineConfig: {
                        shape: "Snx"
                    },
                    ModelQualityAppSpecification: {
                        shape: "Sny"
                    },
                    ModelQualityJobInput: {
                        shape: "So0"
                    },
                    ModelQualityJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn" ],
                members: {
                    JobDefinitionArn: {}
                }
            }
        },
        CreateMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName", "MonitoringScheduleConfig" ],
                members: {
                    MonitoringScheduleName: {},
                    MonitoringScheduleConfig: {
                        shape: "So4"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn" ],
                members: {
                    MonitoringScheduleArn: {}
                }
            }
        },
        CreateNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName", "InstanceType", "RoleArn" ],
                members: {
                    NotebookInstanceName: {},
                    InstanceType: {},
                    SubnetId: {},
                    SecurityGroupIds: {
                        shape: "Sa8"
                    },
                    RoleArn: {},
                    KmsKeyId: {},
                    Tags: {
                        shape: "S7"
                    },
                    LifecycleConfigName: {},
                    DirectInternetAccess: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    AcceleratorTypes: {
                        shape: "Sol"
                    },
                    DefaultCodeRepository: {},
                    AdditionalCodeRepositories: {
                        shape: "Soo"
                    },
                    RootAccess: {},
                    PlatformIdentifier: {},
                    InstanceMetadataServiceConfiguration: {
                        shape: "Sor"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceArn: {}
                }
            }
        },
        CreateNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {},
                    OnCreate: {
                        shape: "Sow"
                    },
                    OnStart: {
                        shape: "Sow"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceLifecycleConfigArn: {}
                }
            }
        },
        CreatePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName", "ClientRequestToken", "RoleArn" ],
                members: {
                    PipelineName: {},
                    PipelineDisplayName: {},
                    PipelineDefinition: {},
                    PipelineDefinitionS3Location: {
                        shape: "Sp4"
                    },
                    PipelineDescription: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    },
                    ParallelismConfiguration: {
                        shape: "Spa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {}
                }
            }
        },
        CreatePresignedDomainUrl: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    SessionExpirationDurationInSeconds: {
                        type: "integer"
                    },
                    ExpiresInSeconds: {
                        type: "integer"
                    },
                    SpaceName: {},
                    LandingUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizedUrl: {}
                }
            }
        },
        CreatePresignedNotebookInstanceUrl: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {},
                    SessionExpirationDurationInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthorizedUrl: {}
                }
            }
        },
        CreateProcessingJob: {
            input: {
                type: "structure",
                required: [ "ProcessingJobName", "ProcessingResources", "AppSpecification", "RoleArn" ],
                members: {
                    ProcessingInputs: {
                        shape: "Spn"
                    },
                    ProcessingOutputConfig: {
                        shape: "Sqa"
                    },
                    ProcessingJobName: {},
                    ProcessingResources: {
                        shape: "Sqf"
                    },
                    StoppingCondition: {
                        shape: "Sqh"
                    },
                    AppSpecification: {
                        shape: "Sqj"
                    },
                    Environment: {
                        shape: "Sql"
                    },
                    NetworkConfig: {
                        shape: "Soc"
                    },
                    RoleArn: {},
                    Tags: {
                        shape: "S7"
                    },
                    ExperimentConfig: {
                        shape: "Sqm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessingJobArn" ],
                members: {
                    ProcessingJobArn: {}
                }
            }
        },
        CreateProject: {
            input: {
                type: "structure",
                required: [ "ProjectName", "ServiceCatalogProvisioningDetails" ],
                members: {
                    ProjectName: {},
                    ProjectDescription: {},
                    ServiceCatalogProvisioningDetails: {
                        shape: "Sqr"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectArn", "ProjectId" ],
                members: {
                    ProjectArn: {},
                    ProjectId: {}
                }
            }
        },
        CreateSpace: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpaceName" ],
                members: {
                    DomainId: {},
                    SpaceName: {},
                    Tags: {
                        shape: "S7"
                    },
                    SpaceSettings: {
                        shape: "Sr1"
                    },
                    SpaceDisplayName: {},
                    OwnershipSettings: {
                        shape: "Sr9"
                    },
                    SpaceSharingSettings: {
                        shape: "Sra"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpaceArn: {}
                }
            }
        },
        CreateStudioLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "StudioLifecycleConfigName", "StudioLifecycleConfigContent", "StudioLifecycleConfigAppType" ],
                members: {
                    StudioLifecycleConfigName: {},
                    StudioLifecycleConfigContent: {},
                    StudioLifecycleConfigAppType: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StudioLifecycleConfigArn: {}
                }
            }
        },
        CreateTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName", "AlgorithmSpecification", "RoleArn", "OutputDataConfig", "ResourceConfig", "StoppingCondition" ],
                members: {
                    TrainingJobName: {},
                    HyperParameters: {
                        shape: "S2w"
                    },
                    AlgorithmSpecification: {
                        shape: "Srl"
                    },
                    RoleArn: {},
                    InputDataConfig: {
                        shape: "S2y"
                    },
                    OutputDataConfig: {
                        shape: "S3g"
                    },
                    ResourceConfig: {
                        shape: "S3j"
                    },
                    VpcConfig: {
                        shape: "S61"
                    },
                    StoppingCondition: {
                        shape: "S3p"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    },
                    EnableInterContainerTrafficEncryption: {
                        type: "boolean"
                    },
                    EnableManagedSpotTraining: {
                        type: "boolean"
                    },
                    CheckpointConfig: {
                        shape: "Shl"
                    },
                    DebugHookConfig: {
                        shape: "Sru"
                    },
                    DebugRuleConfigurations: {
                        shape: "Ss2"
                    },
                    TensorBoardOutputConfig: {
                        shape: "Ss6"
                    },
                    ExperimentConfig: {
                        shape: "Sqm"
                    },
                    ProfilerConfig: {
                        shape: "Ss7"
                    },
                    ProfilerRuleConfigurations: {
                        shape: "Ssb"
                    },
                    Environment: {
                        shape: "Ssd"
                    },
                    RetryStrategy: {
                        shape: "Shm"
                    },
                    InfraCheckConfig: {
                        shape: "Ssg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobArn" ],
                members: {
                    TrainingJobArn: {}
                }
            }
        },
        CreateTransformJob: {
            input: {
                type: "structure",
                required: [ "TransformJobName", "ModelName", "TransformInput", "TransformOutput", "TransformResources" ],
                members: {
                    TransformJobName: {},
                    ModelName: {},
                    MaxConcurrentTransforms: {
                        type: "integer"
                    },
                    ModelClientConfig: {
                        shape: "Ssm"
                    },
                    MaxPayloadInMB: {
                        type: "integer"
                    },
                    BatchStrategy: {},
                    Environment: {
                        shape: "S3x"
                    },
                    TransformInput: {
                        shape: "S40"
                    },
                    TransformOutput: {
                        shape: "S44"
                    },
                    DataCaptureConfig: {
                        shape: "Ssp"
                    },
                    TransformResources: {
                        shape: "S47"
                    },
                    DataProcessing: {
                        shape: "Ssq"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    ExperimentConfig: {
                        shape: "Sqm"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TransformJobArn" ],
                members: {
                    TransformJobArn: {}
                }
            }
        },
        CreateTrial: {
            input: {
                type: "structure",
                required: [ "TrialName", "ExperimentName" ],
                members: {
                    TrialName: {},
                    DisplayName: {},
                    ExperimentName: {},
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialArn: {}
                }
            }
        },
        CreateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {},
                    DisplayName: {},
                    Status: {
                        shape: "Ssy"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Parameters: {
                        shape: "St1"
                    },
                    InputArtifacts: {
                        shape: "St5"
                    },
                    OutputArtifacts: {
                        shape: "St5"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {}
                }
            }
        },
        CreateUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    SingleSignOnUserIdentifier: {},
                    SingleSignOnUserValue: {},
                    Tags: {
                        shape: "S7"
                    },
                    UserSettings: {
                        shape: "Sa7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfileArn: {}
                }
            }
        },
        CreateWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    CognitoConfig: {
                        shape: "Stg"
                    },
                    OidcConfig: {
                        shape: "Stj"
                    },
                    SourceIpConfig: {
                        shape: "Stm"
                    },
                    WorkforceName: {},
                    Tags: {
                        shape: "S7"
                    },
                    WorkforceVpcConfig: {
                        shape: "Stq"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "WorkforceArn" ],
                members: {
                    WorkforceArn: {}
                }
            }
        },
        CreateWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName", "MemberDefinitions", "Description" ],
                members: {
                    WorkteamName: {},
                    WorkforceName: {},
                    MemberDefinitions: {
                        shape: "Su0"
                    },
                    Description: {},
                    NotificationConfiguration: {
                        shape: "Su8"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    WorkteamArn: {}
                }
            }
        },
        DeleteAction: {
            input: {
                type: "structure",
                required: [ "ActionName" ],
                members: {
                    ActionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionArn: {}
                }
            }
        },
        DeleteAlgorithm: {
            input: {
                type: "structure",
                required: [ "AlgorithmName" ],
                members: {
                    AlgorithmName: {}
                }
            }
        },
        DeleteApp: {
            input: {
                type: "structure",
                required: [ "DomainId", "AppType", "AppName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    AppType: {},
                    AppName: {},
                    SpaceName: {}
                }
            }
        },
        DeleteAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {}
                }
            }
        },
        DeleteArtifact: {
            input: {
                type: "structure",
                members: {
                    ArtifactArn: {},
                    Source: {
                        shape: "S5b"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactArn: {}
                }
            }
        },
        DeleteAssociation: {
            input: {
                type: "structure",
                required: [ "SourceArn", "DestinationArn" ],
                members: {
                    SourceArn: {},
                    DestinationArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SourceArn: {},
                    DestinationArn: {}
                }
            }
        },
        DeleteCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ClusterArn" ],
                members: {
                    ClusterArn: {}
                }
            }
        },
        DeleteCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName" ],
                members: {
                    CodeRepositoryName: {}
                }
            }
        },
        DeleteContext: {
            input: {
                type: "structure",
                required: [ "ContextName" ],
                members: {
                    ContextName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextArn: {}
                }
            }
        },
        DeleteDataQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName" ],
                members: {
                    DeviceFleetName: {}
                }
            }
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    RetentionPolicy: {
                        type: "structure",
                        members: {
                            HomeEfsFileSystem: {}
                        }
                    }
                }
            }
        },
        DeleteEdgeDeploymentPlan: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName" ],
                members: {
                    EdgeDeploymentPlanName: {}
                }
            }
        },
        DeleteEdgeDeploymentStage: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName", "StageName" ],
                members: {
                    EdgeDeploymentPlanName: {},
                    StageName: {}
                }
            }
        },
        DeleteEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            }
        },
        DeleteEndpointConfig: {
            input: {
                type: "structure",
                required: [ "EndpointConfigName" ],
                members: {
                    EndpointConfigName: {}
                }
            }
        },
        DeleteExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentArn: {}
                }
            }
        },
        DeleteFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName" ],
                members: {
                    FeatureGroupName: {}
                }
            }
        },
        DeleteFlowDefinition: {
            input: {
                type: "structure",
                required: [ "FlowDefinitionName" ],
                members: {
                    FlowDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteHub: {
            input: {
                type: "structure",
                required: [ "HubName" ],
                members: {
                    HubName: {}
                }
            }
        },
        DeleteHubContent: {
            input: {
                type: "structure",
                required: [ "HubName", "HubContentType", "HubContentName", "HubContentVersion" ],
                members: {
                    HubName: {},
                    HubContentType: {},
                    HubContentName: {},
                    HubContentVersion: {}
                }
            }
        },
        DeleteHumanTaskUi: {
            input: {
                type: "structure",
                required: [ "HumanTaskUiName" ],
                members: {
                    HumanTaskUiName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteImage: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteImageVersion: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {},
                    Version: {
                        type: "integer"
                    },
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteInferenceComponent: {
            input: {
                type: "structure",
                required: [ "InferenceComponentName" ],
                members: {
                    InferenceComponentName: {}
                }
            }
        },
        DeleteInferenceExperiment: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceExperimentArn" ],
                members: {
                    InferenceExperimentArn: {}
                }
            }
        },
        DeleteModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            }
        },
        DeleteModelBiasJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteModelCard: {
            input: {
                type: "structure",
                required: [ "ModelCardName" ],
                members: {
                    ModelCardName: {}
                }
            }
        },
        DeleteModelExplainabilityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageName" ],
                members: {
                    ModelPackageName: {}
                }
            }
        },
        DeleteModelPackageGroup: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            }
        },
        DeleteModelPackageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            }
        },
        DeleteModelQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            }
        },
        DeleteMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            }
        },
        DeleteNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            }
        },
        DeleteNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {}
                }
            }
        },
        DeletePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName", "ClientRequestToken" ],
                members: {
                    PipelineName: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {}
                }
            }
        },
        DeleteProject: {
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {}
                }
            }
        },
        DeleteSpace: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpaceName" ],
                members: {
                    DomainId: {},
                    SpaceName: {}
                }
            }
        },
        DeleteStudioLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "StudioLifecycleConfigName" ],
                members: {
                    StudioLifecycleConfigName: {}
                }
            }
        },
        DeleteTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTrial: {
            input: {
                type: "structure",
                required: [ "TrialName" ],
                members: {
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialArn: {}
                }
            }
        },
        DeleteTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {}
                }
            }
        },
        DeleteUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {}
                }
            }
        },
        DeleteWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    WorkforceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName" ],
                members: {
                    WorkteamName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Success" ],
                members: {
                    Success: {
                        type: "boolean"
                    }
                }
            }
        },
        DeregisterDevices: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "DeviceNames" ],
                members: {
                    DeviceFleetName: {},
                    DeviceNames: {
                        shape: "Sbx"
                    }
                }
            }
        },
        DescribeAction: {
            input: {
                type: "structure",
                required: [ "ActionName" ],
                members: {
                    ActionName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionName: {},
                    ActionArn: {},
                    Source: {
                        shape: "S1n"
                    },
                    ActionType: {},
                    Description: {},
                    Status: {},
                    Properties: {
                        shape: "S1s"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    LineageGroupArn: {}
                }
            }
        },
        DescribeAlgorithm: {
            input: {
                type: "structure",
                required: [ "AlgorithmName" ],
                members: {
                    AlgorithmName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AlgorithmName", "AlgorithmArn", "CreationTime", "TrainingSpecification", "AlgorithmStatus", "AlgorithmStatusDetails" ],
                members: {
                    AlgorithmName: {},
                    AlgorithmArn: {},
                    AlgorithmDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    TrainingSpecification: {
                        shape: "S1z"
                    },
                    InferenceSpecification: {
                        shape: "Sr"
                    },
                    ValidationSpecification: {
                        shape: "S2r"
                    },
                    AlgorithmStatus: {},
                    AlgorithmStatusDetails: {
                        type: "structure",
                        members: {
                            ValidationStatuses: {
                                shape: "Swm"
                            },
                            ImageScanStatuses: {
                                shape: "Swm"
                            }
                        }
                    },
                    ProductId: {},
                    CertifyForMarketplace: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeApp: {
            input: {
                type: "structure",
                required: [ "DomainId", "AppType", "AppName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    AppType: {},
                    AppName: {},
                    SpaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppArn: {},
                    AppType: {},
                    AppName: {},
                    DomainId: {},
                    UserProfileName: {},
                    Status: {},
                    LastHealthCheckTimestamp: {
                        type: "timestamp"
                    },
                    LastUserActivityTimestamp: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ResourceSpec: {
                        shape: "S4h"
                    },
                    SpaceName: {}
                }
            }
        },
        DescribeAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AppImageConfigArn: {},
                    AppImageConfigName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    KernelGatewayImageConfig: {
                        shape: "S4s"
                    },
                    JupyterLabAppImageConfig: {
                        shape: "S51"
                    }
                }
            }
        },
        DescribeArtifact: {
            input: {
                type: "structure",
                required: [ "ArtifactArn" ],
                members: {
                    ArtifactArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactName: {},
                    ArtifactArn: {},
                    Source: {
                        shape: "S5b"
                    },
                    ArtifactType: {},
                    Properties: {
                        shape: "S1s"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    LineageGroupArn: {}
                }
            }
        },
        DescribeAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobName", "AutoMLJobArn", "InputDataConfig", "OutputDataConfig", "RoleArn", "CreationTime", "LastModifiedTime", "AutoMLJobStatus", "AutoMLJobSecondaryStatus" ],
                members: {
                    AutoMLJobName: {},
                    AutoMLJobArn: {},
                    InputDataConfig: {
                        shape: "S5j"
                    },
                    OutputDataConfig: {
                        shape: "S5r"
                    },
                    RoleArn: {},
                    AutoMLJobObjective: {
                        shape: "S5t"
                    },
                    ProblemType: {},
                    AutoMLJobConfig: {
                        shape: "S5v"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    PartialFailureReasons: {
                        shape: "Sx0"
                    },
                    BestCandidate: {
                        shape: "Sx2"
                    },
                    AutoMLJobStatus: {},
                    AutoMLJobSecondaryStatus: {},
                    GenerateCandidateDefinitionsOnly: {
                        type: "boolean"
                    },
                    AutoMLJobArtifacts: {
                        shape: "Sxu"
                    },
                    ResolvedAttributes: {
                        type: "structure",
                        members: {
                            AutoMLJobObjective: {
                                shape: "S5t"
                            },
                            ProblemType: {},
                            CompletionCriteria: {
                                shape: "S5w"
                            }
                        }
                    },
                    ModelDeployConfig: {
                        shape: "S6f"
                    },
                    ModelDeployResult: {
                        shape: "Sxy"
                    }
                }
            }
        },
        DescribeAutoMLJobV2: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobName", "AutoMLJobArn", "AutoMLJobInputDataConfig", "OutputDataConfig", "RoleArn", "CreationTime", "LastModifiedTime", "AutoMLJobStatus", "AutoMLJobSecondaryStatus" ],
                members: {
                    AutoMLJobName: {},
                    AutoMLJobArn: {},
                    AutoMLJobInputDataConfig: {
                        shape: "S6l"
                    },
                    OutputDataConfig: {
                        shape: "S5r"
                    },
                    RoleArn: {},
                    AutoMLJobObjective: {
                        shape: "S5t"
                    },
                    AutoMLProblemTypeConfig: {
                        shape: "S6n"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    PartialFailureReasons: {
                        shape: "Sx0"
                    },
                    BestCandidate: {
                        shape: "Sx2"
                    },
                    AutoMLJobStatus: {},
                    AutoMLJobSecondaryStatus: {},
                    ModelDeployConfig: {
                        shape: "S6f"
                    },
                    ModelDeployResult: {
                        shape: "Sxy"
                    },
                    DataSplitConfig: {
                        shape: "S66"
                    },
                    SecurityConfig: {
                        shape: "S60"
                    },
                    AutoMLJobArtifacts: {
                        shape: "Sxu"
                    },
                    ResolvedAttributes: {
                        type: "structure",
                        members: {
                            AutoMLJobObjective: {
                                shape: "S5t"
                            },
                            CompletionCriteria: {
                                shape: "S5w"
                            },
                            AutoMLProblemTypeResolvedAttributes: {
                                type: "structure",
                                members: {
                                    TabularResolvedAttributes: {
                                        type: "structure",
                                        members: {
                                            ProblemType: {}
                                        }
                                    },
                                    TextGenerationResolvedAttributes: {
                                        type: "structure",
                                        members: {
                                            BaseModelName: {}
                                        }
                                    }
                                },
                                union: true
                            }
                        }
                    },
                    AutoMLProblemTypeConfigName: {}
                }
            }
        },
        DescribeCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ClusterArn", "ClusterStatus", "InstanceGroups" ],
                members: {
                    ClusterArn: {},
                    ClusterName: {},
                    ClusterStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureMessage: {},
                    InstanceGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CurrentCount: {
                                    type: "integer"
                                },
                                TargetCount: {
                                    type: "integer"
                                },
                                InstanceGroupName: {},
                                InstanceType: {},
                                LifeCycleConfig: {
                                    shape: "S7s"
                                },
                                ExecutionRole: {},
                                ThreadsPerCore: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    VpcConfig: {
                        shape: "S61"
                    }
                }
            }
        },
        DescribeClusterNode: {
            input: {
                type: "structure",
                required: [ "ClusterName", "NodeId" ],
                members: {
                    ClusterName: {},
                    NodeId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "NodeDetails" ],
                members: {
                    NodeDetails: {
                        type: "structure",
                        members: {
                            InstanceGroupName: {},
                            InstanceId: {},
                            InstanceStatus: {
                                shape: "Syg"
                            },
                            InstanceType: {},
                            LaunchTime: {
                                type: "timestamp"
                            },
                            LifeCycleConfig: {
                                shape: "S7s"
                            },
                            ThreadsPerCore: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        DescribeCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName" ],
                members: {
                    CodeRepositoryName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositoryName", "CodeRepositoryArn", "CreationTime", "LastModifiedTime" ],
                members: {
                    CodeRepositoryName: {},
                    CodeRepositoryArn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    GitConfig: {
                        shape: "S7y"
                    }
                }
            }
        },
        DescribeCompilationJob: {
            input: {
                type: "structure",
                required: [ "CompilationJobName" ],
                members: {
                    CompilationJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CompilationJobName", "CompilationJobArn", "CompilationJobStatus", "StoppingCondition", "CreationTime", "LastModifiedTime", "FailureReason", "ModelArtifacts", "RoleArn", "InputConfig", "OutputConfig" ],
                members: {
                    CompilationJobName: {},
                    CompilationJobArn: {},
                    CompilationJobStatus: {},
                    CompilationStartTime: {
                        type: "timestamp"
                    },
                    CompilationEndTime: {
                        type: "timestamp"
                    },
                    StoppingCondition: {
                        shape: "S3p"
                    },
                    InferenceImage: {},
                    ModelPackageVersionArn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ModelArtifacts: {
                        shape: "Syp"
                    },
                    ModelDigests: {
                        type: "structure",
                        members: {
                            ArtifactDigest: {}
                        }
                    },
                    RoleArn: {},
                    InputConfig: {
                        shape: "S85"
                    },
                    OutputConfig: {
                        shape: "S88"
                    },
                    VpcConfig: {
                        shape: "S8f"
                    },
                    DerivedInformation: {
                        type: "structure",
                        members: {
                            DerivedDataInputConfig: {}
                        }
                    }
                }
            }
        },
        DescribeContext: {
            input: {
                type: "structure",
                required: [ "ContextName" ],
                members: {
                    ContextName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextName: {},
                    ContextArn: {},
                    Source: {
                        shape: "S8n"
                    },
                    ContextType: {},
                    Description: {},
                    Properties: {
                        shape: "S1s"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    LineageGroupArn: {}
                }
            }
        },
        DescribeDataQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "DataQualityAppSpecification", "DataQualityJobInput", "DataQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    DataQualityBaselineConfig: {
                        shape: "S8s"
                    },
                    DataQualityAppSpecification: {
                        shape: "S8w"
                    },
                    DataQualityJobInput: {
                        shape: "S95"
                    },
                    DataQualityJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    }
                }
            }
        },
        DescribeDevice: {
            input: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName" ],
                members: {
                    NextToken: {},
                    DeviceName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceName", "DeviceFleetName", "RegistrationTime" ],
                members: {
                    DeviceArn: {},
                    DeviceName: {},
                    Description: {},
                    DeviceFleetName: {},
                    IotThingName: {},
                    RegistrationTime: {
                        type: "timestamp"
                    },
                    LatestHeartbeat: {
                        type: "timestamp"
                    },
                    Models: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "ModelVersion" ],
                            members: {
                                ModelName: {},
                                ModelVersion: {},
                                LatestSampleTime: {
                                    type: "timestamp"
                                },
                                LatestInference: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    MaxModels: {
                        type: "integer"
                    },
                    NextToken: {},
                    AgentVersion: {}
                }
            }
        },
        DescribeDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName" ],
                members: {
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceFleetName", "DeviceFleetArn", "OutputConfig", "CreationTime", "LastModifiedTime" ],
                members: {
                    DeviceFleetName: {},
                    DeviceFleetArn: {},
                    OutputConfig: {
                        shape: "Sa1"
                    },
                    Description: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    IotRoleAlias: {}
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainArn: {},
                    DomainId: {},
                    DomainName: {},
                    HomeEfsFileSystemId: {},
                    SingleSignOnManagedApplicationInstanceId: {},
                    SingleSignOnApplicationArn: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    AuthMode: {},
                    DefaultUserSettings: {
                        shape: "Sa7"
                    },
                    AppNetworkAccessType: {},
                    HomeEfsFileSystemKmsKeyId: {
                        deprecated: true,
                        deprecatedMessage: "This property is deprecated, use KmsKeyId instead."
                    },
                    SubnetIds: {
                        shape: "S64"
                    },
                    Url: {},
                    VpcId: {},
                    KmsKeyId: {},
                    DomainSettings: {
                        shape: "Sbh"
                    },
                    AppSecurityGroupManagement: {},
                    SecurityGroupIdForDomainBoundary: {},
                    DefaultSpaceSettings: {
                        shape: "Sbl"
                    }
                }
            }
        },
        DescribeEdgeDeploymentPlan: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName" ],
                members: {
                    EdgeDeploymentPlanName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EdgeDeploymentPlanArn", "EdgeDeploymentPlanName", "ModelConfigs", "DeviceFleetName", "Stages" ],
                members: {
                    EdgeDeploymentPlanArn: {},
                    EdgeDeploymentPlanName: {},
                    ModelConfigs: {
                        shape: "Sbq"
                    },
                    DeviceFleetName: {},
                    EdgeDeploymentSuccess: {
                        type: "integer"
                    },
                    EdgeDeploymentPending: {
                        type: "integer"
                    },
                    EdgeDeploymentFailed: {
                        type: "integer"
                    },
                    Stages: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StageName", "DeviceSelectionConfig", "DeploymentConfig", "DeploymentStatus" ],
                            members: {
                                StageName: {},
                                DeviceSelectionConfig: {
                                    shape: "Sbu"
                                },
                                DeploymentConfig: {
                                    shape: "Sbz"
                                },
                                DeploymentStatus: {
                                    type: "structure",
                                    required: [ "StageStatus", "EdgeDeploymentSuccessInStage", "EdgeDeploymentPendingInStage", "EdgeDeploymentFailedInStage" ],
                                    members: {
                                        StageStatus: {},
                                        EdgeDeploymentSuccessInStage: {
                                            type: "integer"
                                        },
                                        EdgeDeploymentPendingInStage: {
                                            type: "integer"
                                        },
                                        EdgeDeploymentFailedInStage: {
                                            type: "integer"
                                        },
                                        EdgeDeploymentStatusMessage: {},
                                        EdgeDeploymentStageStartTime: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeEdgePackagingJob: {
            input: {
                type: "structure",
                required: [ "EdgePackagingJobName" ],
                members: {
                    EdgePackagingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EdgePackagingJobArn", "EdgePackagingJobName", "EdgePackagingJobStatus" ],
                members: {
                    EdgePackagingJobArn: {},
                    EdgePackagingJobName: {},
                    CompilationJobName: {},
                    ModelName: {},
                    ModelVersion: {},
                    RoleArn: {},
                    OutputConfig: {
                        shape: "Sa1"
                    },
                    ResourceKey: {},
                    EdgePackagingJobStatus: {},
                    EdgePackagingJobStatusMessage: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    ModelArtifact: {},
                    ModelSignature: {},
                    PresetDeploymentOutput: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Type: {},
                            Artifact: {},
                            Status: {},
                            StatusMessage: {}
                        }
                    }
                }
            }
        },
        DescribeEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName" ],
                members: {
                    EndpointName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointName", "EndpointArn", "EndpointConfigName", "EndpointStatus", "CreationTime", "LastModifiedTime" ],
                members: {
                    EndpointName: {},
                    EndpointArn: {},
                    EndpointConfigName: {},
                    ProductionVariants: {
                        shape: "Szu"
                    },
                    DataCaptureConfig: {
                        shape: "S102"
                    },
                    EndpointStatus: {},
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastDeploymentConfig: {
                        shape: "Sc8"
                    },
                    AsyncInferenceConfig: {
                        shape: "Sdn"
                    },
                    PendingDeploymentSummary: {
                        type: "structure",
                        required: [ "EndpointConfigName" ],
                        members: {
                            EndpointConfigName: {},
                            ProductionVariants: {
                                shape: "S106"
                            },
                            StartTime: {
                                type: "timestamp"
                            },
                            ShadowProductionVariants: {
                                shape: "S106"
                            }
                        }
                    },
                    ExplainerConfig: {
                        shape: "Sdv"
                    },
                    ShadowProductionVariants: {
                        shape: "Szu"
                    }
                }
            }
        },
        DescribeEndpointConfig: {
            input: {
                type: "structure",
                required: [ "EndpointConfigName" ],
                members: {
                    EndpointConfigName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointConfigName", "EndpointConfigArn", "ProductionVariants", "CreationTime" ],
                members: {
                    EndpointConfigName: {},
                    EndpointConfigArn: {},
                    ProductionVariants: {
                        shape: "Scq"
                    },
                    DataCaptureConfig: {
                        shape: "Sdc"
                    },
                    KmsKeyId: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    AsyncInferenceConfig: {
                        shape: "Sdn"
                    },
                    ExplainerConfig: {
                        shape: "Sdv"
                    },
                    ShadowProductionVariants: {
                        shape: "Scq"
                    },
                    ExecutionRoleArn: {},
                    VpcConfig: {
                        shape: "S61"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    }
                }
            }
        },
        DescribeExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentName: {},
                    ExperimentArn: {},
                    DisplayName: {},
                    Source: {
                        shape: "S10c"
                    },
                    Description: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    }
                }
            }
        },
        DescribeFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName" ],
                members: {
                    FeatureGroupName: {},
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupArn", "FeatureGroupName", "RecordIdentifierFeatureName", "EventTimeFeatureName", "FeatureDefinitions", "CreationTime", "NextToken" ],
                members: {
                    FeatureGroupArn: {},
                    FeatureGroupName: {},
                    RecordIdentifierFeatureName: {},
                    EventTimeFeatureName: {},
                    FeatureDefinitions: {
                        shape: "Seu"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    OnlineStoreConfig: {
                        shape: "Sf1"
                    },
                    OfflineStoreConfig: {
                        shape: "Sf7"
                    },
                    RoleArn: {},
                    FeatureGroupStatus: {},
                    OfflineStoreStatus: {
                        shape: "S10j"
                    },
                    LastUpdateStatus: {
                        shape: "S10m"
                    },
                    FailureReason: {},
                    Description: {},
                    NextToken: {},
                    OnlineStoreTotalSizeBytes: {
                        type: "long"
                    }
                }
            }
        },
        DescribeFeatureMetadata: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "FeatureName" ],
                members: {
                    FeatureGroupName: {},
                    FeatureName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupArn", "FeatureGroupName", "FeatureName", "FeatureType", "CreationTime", "LastModifiedTime" ],
                members: {
                    FeatureGroupArn: {},
                    FeatureGroupName: {},
                    FeatureName: {},
                    FeatureType: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    Parameters: {
                        shape: "S10s"
                    }
                }
            }
        },
        DescribeFlowDefinition: {
            input: {
                type: "structure",
                required: [ "FlowDefinitionName" ],
                members: {
                    FlowDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FlowDefinitionArn", "FlowDefinitionName", "FlowDefinitionStatus", "CreationTime", "HumanLoopConfig", "OutputConfig", "RoleArn" ],
                members: {
                    FlowDefinitionArn: {},
                    FlowDefinitionName: {},
                    FlowDefinitionStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    HumanLoopRequestSource: {
                        shape: "Sfj"
                    },
                    HumanLoopActivationConfig: {
                        shape: "Sfl"
                    },
                    HumanLoopConfig: {
                        shape: "Sfo"
                    },
                    OutputConfig: {
                        shape: "Sg3"
                    },
                    RoleArn: {},
                    FailureReason: {}
                }
            }
        },
        DescribeHub: {
            input: {
                type: "structure",
                required: [ "HubName" ],
                members: {
                    HubName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HubName", "HubArn", "HubStatus", "CreationTime", "LastModifiedTime" ],
                members: {
                    HubName: {},
                    HubArn: {},
                    HubDisplayName: {},
                    HubDescription: {},
                    HubSearchKeywords: {
                        shape: "Sga"
                    },
                    S3StorageConfig: {
                        shape: "Sgc"
                    },
                    HubStatus: {},
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeHubContent: {
            input: {
                type: "structure",
                required: [ "HubName", "HubContentType", "HubContentName" ],
                members: {
                    HubName: {},
                    HubContentType: {},
                    HubContentName: {},
                    HubContentVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HubContentName", "HubContentArn", "HubContentVersion", "HubContentType", "DocumentSchemaVersion", "HubName", "HubArn", "HubContentDocument", "HubContentStatus", "CreationTime" ],
                members: {
                    HubContentName: {},
                    HubContentArn: {},
                    HubContentVersion: {},
                    HubContentType: {},
                    DocumentSchemaVersion: {},
                    HubName: {},
                    HubArn: {},
                    HubContentDisplayName: {},
                    HubContentDescription: {},
                    HubContentMarkdown: {},
                    HubContentDocument: {},
                    HubContentSearchKeywords: {
                        shape: "S11a"
                    },
                    HubContentDependencies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DependencyOriginPath: {},
                                DependencyCopyPath: {}
                            }
                        }
                    },
                    HubContentStatus: {},
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeHumanTaskUi: {
            input: {
                type: "structure",
                required: [ "HumanTaskUiName" ],
                members: {
                    HumanTaskUiName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HumanTaskUiArn", "HumanTaskUiName", "CreationTime", "UiTemplate" ],
                members: {
                    HumanTaskUiArn: {},
                    HumanTaskUiName: {},
                    HumanTaskUiStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    UiTemplate: {
                        type: "structure",
                        members: {
                            Url: {},
                            ContentSha256: {}
                        }
                    }
                }
            }
        },
        DescribeHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName" ],
                members: {
                    HyperParameterTuningJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HyperParameterTuningJobName", "HyperParameterTuningJobArn", "HyperParameterTuningJobConfig", "HyperParameterTuningJobStatus", "CreationTime", "TrainingJobStatusCounters", "ObjectiveStatusCounters" ],
                members: {
                    HyperParameterTuningJobName: {},
                    HyperParameterTuningJobArn: {},
                    HyperParameterTuningJobConfig: {
                        shape: "Sgn"
                    },
                    TrainingJobDefinition: {
                        shape: "Shg"
                    },
                    TrainingJobDefinitions: {
                        shape: "Shw"
                    },
                    HyperParameterTuningJobStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    HyperParameterTuningEndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    TrainingJobStatusCounters: {
                        shape: "S11p"
                    },
                    ObjectiveStatusCounters: {
                        shape: "S11r"
                    },
                    BestTrainingJob: {
                        shape: "S11t"
                    },
                    OverallBestTrainingJob: {
                        shape: "S11t"
                    },
                    WarmStartConfig: {
                        shape: "Shx"
                    },
                    FailureReason: {},
                    TuningJobCompletionDetails: {
                        shape: "S11w"
                    },
                    ConsumedResources: {
                        shape: "S11x"
                    },
                    Autotune: {
                        shape: "Si1"
                    }
                }
            }
        },
        DescribeImage: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    CreationTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    DisplayName: {},
                    FailureReason: {},
                    ImageArn: {},
                    ImageName: {},
                    ImageStatus: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    RoleArn: {}
                }
            }
        },
        DescribeImageVersion: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {},
                    Version: {
                        type: "integer"
                    },
                    Alias: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BaseImage: {},
                    ContainerImage: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ImageArn: {},
                    ImageVersionArn: {},
                    ImageVersionStatus: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    Version: {
                        type: "integer"
                    },
                    VendorGuidance: {},
                    JobType: {},
                    MLFramework: {},
                    ProgrammingLang: {},
                    Processor: {},
                    Horovod: {
                        type: "boolean"
                    },
                    ReleaseNotes: {}
                }
            }
        },
        DescribeInferenceComponent: {
            input: {
                type: "structure",
                required: [ "InferenceComponentName" ],
                members: {
                    InferenceComponentName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceComponentName", "InferenceComponentArn", "EndpointName", "EndpointArn", "CreationTime", "LastModifiedTime" ],
                members: {
                    InferenceComponentName: {},
                    InferenceComponentArn: {},
                    EndpointName: {},
                    EndpointArn: {},
                    VariantName: {},
                    FailureReason: {},
                    Specification: {
                        type: "structure",
                        members: {
                            ModelName: {},
                            Container: {
                                type: "structure",
                                members: {
                                    DeployedImage: {
                                        shape: "Szx"
                                    },
                                    ArtifactUrl: {},
                                    Environment: {
                                        shape: "Sz"
                                    }
                                }
                            },
                            StartupParameters: {
                                shape: "Siq"
                            },
                            ComputeResourceRequirements: {
                                shape: "Sir"
                            }
                        }
                    },
                    RuntimeConfig: {
                        type: "structure",
                        members: {
                            DesiredCopyCount: {
                                type: "integer"
                            },
                            CurrentCopyCount: {
                                type: "integer"
                            }
                        }
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    InferenceComponentStatus: {}
                }
            }
        },
        DescribeInferenceExperiment: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "Name", "Type", "Status", "EndpointMetadata", "ModelVariants" ],
                members: {
                    Arn: {},
                    Name: {},
                    Type: {},
                    Schedule: {
                        shape: "Sj2"
                    },
                    Status: {},
                    StatusReason: {},
                    Description: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CompletionTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    RoleArn: {},
                    EndpointMetadata: {
                        type: "structure",
                        required: [ "EndpointName" ],
                        members: {
                            EndpointName: {},
                            EndpointConfigName: {},
                            EndpointStatus: {},
                            FailureReason: {}
                        }
                    },
                    ModelVariants: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "VariantName", "InfrastructureConfig", "Status" ],
                            members: {
                                ModelName: {},
                                VariantName: {},
                                InfrastructureConfig: {
                                    shape: "Sj8"
                                },
                                Status: {}
                            }
                        }
                    },
                    DataStorageConfig: {
                        shape: "Sjd"
                    },
                    ShadowModeConfig: {
                        shape: "Sje"
                    },
                    KmsKey: {}
                }
            }
        },
        DescribeInferenceRecommendationsJob: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobName", "JobType", "JobArn", "RoleArn", "Status", "CreationTime", "LastModifiedTime", "InputConfig" ],
                members: {
                    JobName: {},
                    JobDescription: {},
                    JobType: {},
                    JobArn: {},
                    RoleArn: {},
                    Status: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CompletionTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    InputConfig: {
                        shape: "Sjm"
                    },
                    StoppingConditions: {
                        shape: "Skq"
                    },
                    InferenceRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Metrics", "EndpointConfiguration", "ModelConfiguration" ],
                            members: {
                                Metrics: {
                                    shape: "S12o"
                                },
                                EndpointConfiguration: {
                                    shape: "S12r"
                                },
                                ModelConfiguration: {
                                    shape: "S12t"
                                },
                                RecommendationId: {},
                                InvocationEndTime: {
                                    type: "timestamp"
                                },
                                InvocationStartTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    EndpointPerformances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Metrics", "EndpointInfo" ],
                            members: {
                                Metrics: {
                                    shape: "S131"
                                },
                                EndpointInfo: {
                                    shape: "Skj"
                                }
                            }
                        }
                    }
                }
            }
        },
        DescribeLabelingJob: {
            input: {
                type: "structure",
                required: [ "LabelingJobName" ],
                members: {
                    LabelingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LabelingJobStatus", "LabelCounters", "CreationTime", "LastModifiedTime", "JobReferenceCode", "LabelingJobName", "LabelingJobArn", "InputConfig", "OutputConfig", "RoleArn", "HumanTaskConfig" ],
                members: {
                    LabelingJobStatus: {},
                    LabelCounters: {
                        shape: "S135"
                    },
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    JobReferenceCode: {},
                    LabelingJobName: {},
                    LabelingJobArn: {},
                    LabelAttributeName: {},
                    InputConfig: {
                        shape: "Sl2"
                    },
                    OutputConfig: {
                        shape: "Sl9"
                    },
                    RoleArn: {},
                    LabelCategoryConfigS3Uri: {},
                    StoppingConditions: {
                        shape: "Sla"
                    },
                    LabelingJobAlgorithmsConfig: {
                        shape: "Sld"
                    },
                    HumanTaskConfig: {
                        shape: "Slh"
                    },
                    Tags: {
                        shape: "S7"
                    },
                    LabelingJobOutput: {
                        shape: "S138"
                    }
                }
            }
        },
        DescribeLineageGroup: {
            input: {
                type: "structure",
                required: [ "LineageGroupName" ],
                members: {
                    LineageGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LineageGroupName: {},
                    LineageGroupArn: {},
                    DisplayName: {},
                    Description: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    }
                }
            }
        },
        DescribeModel: {
            input: {
                type: "structure",
                required: [ "ModelName" ],
                members: {
                    ModelName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelName", "CreationTime", "ModelArn" ],
                members: {
                    ModelName: {},
                    PrimaryContainer: {
                        shape: "Slw"
                    },
                    Containers: {
                        shape: "Smc"
                    },
                    InferenceExecutionConfig: {
                        shape: "Smd"
                    },
                    ExecutionRoleArn: {},
                    VpcConfig: {
                        shape: "S61"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelArn: {},
                    EnableNetworkIsolation: {
                        type: "boolean"
                    },
                    DeploymentRecommendation: {
                        shape: "S13d"
                    }
                }
            }
        },
        DescribeModelBiasJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "ModelBiasAppSpecification", "ModelBiasJobInput", "ModelBiasJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelBiasBaselineConfig: {
                        shape: "Smh"
                    },
                    ModelBiasAppSpecification: {
                        shape: "Smi"
                    },
                    ModelBiasJobInput: {
                        shape: "Smj"
                    },
                    ModelBiasJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    }
                }
            }
        },
        DescribeModelCard: {
            input: {
                type: "structure",
                required: [ "ModelCardName" ],
                members: {
                    ModelCardName: {},
                    ModelCardVersion: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardArn", "ModelCardName", "ModelCardVersion", "Content", "ModelCardStatus", "CreationTime", "CreatedBy" ],
                members: {
                    ModelCardArn: {},
                    ModelCardName: {},
                    ModelCardVersion: {
                        type: "integer"
                    },
                    Content: {
                        shape: "Smo"
                    },
                    ModelCardStatus: {},
                    SecurityConfig: {
                        shape: "Smn"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    ModelCardProcessingStatus: {}
                }
            }
        },
        DescribeModelCardExportJob: {
            input: {
                type: "structure",
                required: [ "ModelCardExportJobArn" ],
                members: {
                    ModelCardExportJobArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardExportJobName", "ModelCardExportJobArn", "Status", "ModelCardName", "ModelCardVersion", "OutputConfig", "CreatedAt", "LastModifiedAt" ],
                members: {
                    ModelCardExportJobName: {},
                    ModelCardExportJobArn: {},
                    Status: {},
                    ModelCardName: {},
                    ModelCardVersion: {
                        type: "integer"
                    },
                    OutputConfig: {
                        shape: "Smu"
                    },
                    CreatedAt: {
                        type: "timestamp"
                    },
                    LastModifiedAt: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    ExportArtifacts: {
                        type: "structure",
                        required: [ "S3ExportArtifacts" ],
                        members: {
                            S3ExportArtifacts: {}
                        }
                    }
                }
            }
        },
        DescribeModelExplainabilityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "ModelExplainabilityAppSpecification", "ModelExplainabilityJobInput", "ModelExplainabilityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelExplainabilityBaselineConfig: {
                        shape: "Smy"
                    },
                    ModelExplainabilityAppSpecification: {
                        shape: "Smz"
                    },
                    ModelExplainabilityJobInput: {
                        shape: "Sn0"
                    },
                    ModelExplainabilityJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    }
                }
            }
        },
        DescribeModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageName" ],
                members: {
                    ModelPackageName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageName", "ModelPackageArn", "CreationTime", "ModelPackageStatus", "ModelPackageStatusDetails" ],
                members: {
                    ModelPackageName: {},
                    ModelPackageGroupName: {},
                    ModelPackageVersion: {
                        type: "integer"
                    },
                    ModelPackageArn: {},
                    ModelPackageDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    InferenceSpecification: {
                        shape: "Sr"
                    },
                    SourceAlgorithmSpecification: {
                        shape: "Sn6"
                    },
                    ValidationSpecification: {
                        shape: "Sn3"
                    },
                    ModelPackageStatus: {},
                    ModelPackageStatusDetails: {
                        shape: "S13u"
                    },
                    CertifyForMarketplace: {
                        type: "boolean"
                    },
                    ModelApprovalStatus: {},
                    CreatedBy: {
                        shape: "Swf"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    ModelMetrics: {
                        shape: "Sn9"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    ApprovalDescription: {},
                    CustomerMetadataProperties: {
                        shape: "Sng"
                    },
                    DriftCheckBaselines: {
                        shape: "Snj"
                    },
                    Domain: {},
                    Task: {},
                    SamplePayloadUrl: {},
                    AdditionalInferenceSpecifications: {
                        shape: "Snp"
                    },
                    SkipModelValidation: {}
                }
            }
        },
        DescribeModelPackageGroup: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupName", "ModelPackageGroupArn", "CreationTime", "CreatedBy", "ModelPackageGroupStatus" ],
                members: {
                    ModelPackageGroupName: {},
                    ModelPackageGroupArn: {},
                    ModelPackageGroupDescription: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    ModelPackageGroupStatus: {}
                }
            }
        },
        DescribeModelQualityJobDefinition: {
            input: {
                type: "structure",
                required: [ "JobDefinitionName" ],
                members: {
                    JobDefinitionName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionArn", "JobDefinitionName", "CreationTime", "ModelQualityAppSpecification", "ModelQualityJobInput", "ModelQualityJobOutputConfig", "JobResources", "RoleArn" ],
                members: {
                    JobDefinitionArn: {},
                    JobDefinitionName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    ModelQualityBaselineConfig: {
                        shape: "Snx"
                    },
                    ModelQualityAppSpecification: {
                        shape: "Sny"
                    },
                    ModelQualityJobInput: {
                        shape: "So0"
                    },
                    ModelQualityJobOutputConfig: {
                        shape: "S9j"
                    },
                    JobResources: {
                        shape: "S9p"
                    },
                    NetworkConfig: {
                        shape: "S9u"
                    },
                    RoleArn: {},
                    StoppingCondition: {
                        shape: "S9v"
                    }
                }
            }
        },
        DescribeMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn", "MonitoringScheduleName", "MonitoringScheduleStatus", "CreationTime", "LastModifiedTime", "MonitoringScheduleConfig" ],
                members: {
                    MonitoringScheduleArn: {},
                    MonitoringScheduleName: {},
                    MonitoringScheduleStatus: {},
                    MonitoringType: {},
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    MonitoringScheduleConfig: {
                        shape: "So4"
                    },
                    EndpointName: {},
                    LastMonitoringExecutionSummary: {
                        shape: "S147"
                    }
                }
            }
        },
        DescribeNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceArn: {},
                    NotebookInstanceName: {},
                    NotebookInstanceStatus: {},
                    FailureReason: {},
                    Url: {},
                    InstanceType: {},
                    SubnetId: {},
                    SecurityGroups: {
                        shape: "Sa8"
                    },
                    RoleArn: {},
                    KmsKeyId: {},
                    NetworkInterfaceId: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    NotebookInstanceLifecycleConfigName: {},
                    DirectInternetAccess: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    AcceleratorTypes: {
                        shape: "Sol"
                    },
                    DefaultCodeRepository: {},
                    AdditionalCodeRepositories: {
                        shape: "Soo"
                    },
                    RootAccess: {},
                    PlatformIdentifier: {},
                    InstanceMetadataServiceConfiguration: {
                        shape: "Sor"
                    }
                }
            }
        },
        DescribeNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NotebookInstanceLifecycleConfigArn: {},
                    NotebookInstanceLifecycleConfigName: {},
                    OnCreate: {
                        shape: "Sow"
                    },
                    OnStart: {
                        shape: "Sow"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {},
                    PipelineName: {},
                    PipelineDisplayName: {},
                    PipelineDefinition: {},
                    PipelineDescription: {},
                    RoleArn: {},
                    PipelineStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastRunTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    ParallelismConfiguration: {
                        shape: "Spa"
                    }
                }
            }
        },
        DescribePipelineDefinitionForExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineDefinition: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribePipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {},
                    PipelineExecutionArn: {},
                    PipelineExecutionDisplayName: {},
                    PipelineExecutionStatus: {},
                    PipelineExecutionDescription: {},
                    PipelineExperimentConfig: {
                        shape: "S14r"
                    },
                    FailureReason: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    ParallelismConfiguration: {
                        shape: "Spa"
                    },
                    SelectiveExecutionConfig: {
                        shape: "S14t"
                    }
                }
            }
        },
        DescribeProcessingJob: {
            input: {
                type: "structure",
                required: [ "ProcessingJobName" ],
                members: {
                    ProcessingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessingJobName", "ProcessingResources", "AppSpecification", "ProcessingJobArn", "ProcessingJobStatus", "CreationTime" ],
                members: {
                    ProcessingInputs: {
                        shape: "Spn"
                    },
                    ProcessingOutputConfig: {
                        shape: "Sqa"
                    },
                    ProcessingJobName: {},
                    ProcessingResources: {
                        shape: "Sqf"
                    },
                    StoppingCondition: {
                        shape: "Sqh"
                    },
                    AppSpecification: {
                        shape: "Sqj"
                    },
                    Environment: {
                        shape: "Sql"
                    },
                    NetworkConfig: {
                        shape: "Soc"
                    },
                    RoleArn: {},
                    ExperimentConfig: {
                        shape: "Sqm"
                    },
                    ProcessingJobArn: {},
                    ProcessingJobStatus: {},
                    ExitMessage: {},
                    FailureReason: {},
                    ProcessingEndTime: {
                        type: "timestamp"
                    },
                    ProcessingStartTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    MonitoringScheduleArn: {},
                    AutoMLJobArn: {},
                    TrainingJobArn: {}
                }
            }
        },
        DescribeProject: {
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectArn", "ProjectName", "ProjectId", "ServiceCatalogProvisioningDetails", "ProjectStatus", "CreationTime" ],
                members: {
                    ProjectArn: {},
                    ProjectName: {},
                    ProjectId: {},
                    ProjectDescription: {},
                    ServiceCatalogProvisioningDetails: {
                        shape: "Sqr"
                    },
                    ServiceCatalogProvisionedProductDetails: {
                        shape: "S152"
                    },
                    ProjectStatus: {},
                    CreatedBy: {
                        shape: "Swf"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    }
                }
            }
        },
        DescribeSpace: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpaceName" ],
                members: {
                    DomainId: {},
                    SpaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainId: {},
                    SpaceArn: {},
                    SpaceName: {},
                    HomeEfsFileSystemUid: {},
                    Status: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    SpaceSettings: {
                        shape: "Sr1"
                    },
                    Url: {},
                    SpaceDisplayName: {},
                    OwnershipSettings: {
                        shape: "Sr9"
                    },
                    SpaceSharingSettings: {
                        shape: "Sra"
                    }
                }
            }
        },
        DescribeStudioLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "StudioLifecycleConfigName" ],
                members: {
                    StudioLifecycleConfigName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    StudioLifecycleConfigArn: {},
                    StudioLifecycleConfigName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    StudioLifecycleConfigContent: {},
                    StudioLifecycleConfigAppType: {}
                }
            }
        },
        DescribeSubscribedWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamArn" ],
                members: {
                    WorkteamArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "SubscribedWorkteam" ],
                members: {
                    SubscribedWorkteam: {
                        shape: "S15d"
                    }
                }
            }
        },
        DescribeTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName" ],
                members: {
                    TrainingJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobName", "TrainingJobArn", "ModelArtifacts", "TrainingJobStatus", "SecondaryStatus", "AlgorithmSpecification", "ResourceConfig", "StoppingCondition", "CreationTime" ],
                members: {
                    TrainingJobName: {},
                    TrainingJobArn: {},
                    TuningJobArn: {},
                    LabelingJobArn: {},
                    AutoMLJobArn: {},
                    ModelArtifacts: {
                        shape: "Syp"
                    },
                    TrainingJobStatus: {},
                    SecondaryStatus: {},
                    FailureReason: {},
                    HyperParameters: {
                        shape: "S2w"
                    },
                    AlgorithmSpecification: {
                        shape: "Srl"
                    },
                    RoleArn: {},
                    InputDataConfig: {
                        shape: "S2y"
                    },
                    OutputDataConfig: {
                        shape: "S3g"
                    },
                    ResourceConfig: {
                        shape: "S3j"
                    },
                    VpcConfig: {
                        shape: "S61"
                    },
                    StoppingCondition: {
                        shape: "S3p"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    TrainingStartTime: {
                        type: "timestamp"
                    },
                    TrainingEndTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    SecondaryStatusTransitions: {
                        shape: "S15h"
                    },
                    FinalMetricDataList: {
                        shape: "S15k"
                    },
                    EnableNetworkIsolation: {
                        type: "boolean"
                    },
                    EnableInterContainerTrafficEncryption: {
                        type: "boolean"
                    },
                    EnableManagedSpotTraining: {
                        type: "boolean"
                    },
                    CheckpointConfig: {
                        shape: "Shl"
                    },
                    TrainingTimeInSeconds: {
                        type: "integer"
                    },
                    BillableTimeInSeconds: {
                        type: "integer"
                    },
                    DebugHookConfig: {
                        shape: "Sru"
                    },
                    ExperimentConfig: {
                        shape: "Sqm"
                    },
                    DebugRuleConfigurations: {
                        shape: "Ss2"
                    },
                    TensorBoardOutputConfig: {
                        shape: "Ss6"
                    },
                    DebugRuleEvaluationStatuses: {
                        shape: "S15o"
                    },
                    ProfilerConfig: {
                        shape: "Ss7"
                    },
                    ProfilerRuleConfigurations: {
                        shape: "Ssb"
                    },
                    ProfilerRuleEvaluationStatuses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                RuleConfigurationName: {},
                                RuleEvaluationJobArn: {},
                                RuleEvaluationStatus: {},
                                StatusDetails: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    ProfilingStatus: {},
                    RetryStrategy: {
                        shape: "Shm"
                    },
                    Environment: {
                        shape: "Ssd"
                    },
                    WarmPoolStatus: {
                        shape: "S15v"
                    },
                    InfraCheckConfig: {
                        shape: "Ssg"
                    }
                }
            }
        },
        DescribeTransformJob: {
            input: {
                type: "structure",
                required: [ "TransformJobName" ],
                members: {
                    TransformJobName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TransformJobName", "TransformJobArn", "TransformJobStatus", "ModelName", "TransformInput", "TransformResources", "CreationTime" ],
                members: {
                    TransformJobName: {},
                    TransformJobArn: {},
                    TransformJobStatus: {},
                    FailureReason: {},
                    ModelName: {},
                    MaxConcurrentTransforms: {
                        type: "integer"
                    },
                    ModelClientConfig: {
                        shape: "Ssm"
                    },
                    MaxPayloadInMB: {
                        type: "integer"
                    },
                    BatchStrategy: {},
                    Environment: {
                        shape: "S3x"
                    },
                    TransformInput: {
                        shape: "S40"
                    },
                    TransformOutput: {
                        shape: "S44"
                    },
                    DataCaptureConfig: {
                        shape: "Ssp"
                    },
                    TransformResources: {
                        shape: "S47"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    TransformStartTime: {
                        type: "timestamp"
                    },
                    TransformEndTime: {
                        type: "timestamp"
                    },
                    LabelingJobArn: {},
                    AutoMLJobArn: {},
                    DataProcessing: {
                        shape: "Ssq"
                    },
                    ExperimentConfig: {
                        shape: "Sqm"
                    }
                }
            }
        },
        DescribeTrial: {
            input: {
                type: "structure",
                required: [ "TrialName" ],
                members: {
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialName: {},
                    TrialArn: {},
                    DisplayName: {},
                    ExperimentName: {},
                    Source: {
                        shape: "S163"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    }
                }
            }
        },
        DescribeTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentName: {},
                    TrialComponentArn: {},
                    DisplayName: {},
                    Source: {
                        shape: "S167"
                    },
                    Status: {
                        shape: "Ssy"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    CreatedBy: {
                        shape: "Swf"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    LastModifiedBy: {
                        shape: "Swf"
                    },
                    Parameters: {
                        shape: "St1"
                    },
                    InputArtifacts: {
                        shape: "St5"
                    },
                    OutputArtifacts: {
                        shape: "St5"
                    },
                    MetadataProperties: {
                        shape: "S1u"
                    },
                    Metrics: {
                        shape: "S169"
                    },
                    LineageGroupArn: {},
                    Sources: {
                        type: "list",
                        member: {
                            shape: "S167"
                        }
                    }
                }
            }
        },
        DescribeUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainId: {},
                    UserProfileArn: {},
                    UserProfileName: {},
                    HomeEfsFileSystemUid: {},
                    Status: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    CreationTime: {
                        type: "timestamp"
                    },
                    FailureReason: {},
                    SingleSignOnUserIdentifier: {},
                    SingleSignOnUserValue: {},
                    UserSettings: {
                        shape: "Sa7"
                    }
                }
            }
        },
        DescribeWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    WorkforceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workforce" ],
                members: {
                    Workforce: {
                        shape: "S16j"
                    }
                }
            }
        },
        DescribeWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName" ],
                members: {
                    WorkteamName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Workteam" ],
                members: {
                    Workteam: {
                        shape: "S16r"
                    }
                }
            }
        },
        DisableSagemakerServicecatalogPortfolio: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DisassociateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName", "TrialName" ],
                members: {
                    TrialComponentName: {},
                    TrialName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {},
                    TrialArn: {}
                }
            }
        },
        EnableSagemakerServicecatalogPortfolio: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetDeviceFleetReport: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName" ],
                members: {
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceFleetArn", "DeviceFleetName" ],
                members: {
                    DeviceFleetArn: {},
                    DeviceFleetName: {},
                    OutputConfig: {
                        shape: "Sa1"
                    },
                    Description: {},
                    ReportGenerated: {
                        type: "timestamp"
                    },
                    DeviceStats: {
                        type: "structure",
                        required: [ "ConnectedDeviceCount", "RegisteredDeviceCount" ],
                        members: {
                            ConnectedDeviceCount: {
                                type: "long"
                            },
                            RegisteredDeviceCount: {
                                type: "long"
                            }
                        }
                    },
                    AgentVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Version", "AgentCount" ],
                            members: {
                                Version: {},
                                AgentCount: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    ModelStats: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "ModelVersion", "OfflineDeviceCount", "ConnectedDeviceCount", "ActiveDeviceCount", "SamplingDeviceCount" ],
                            members: {
                                ModelName: {},
                                ModelVersion: {},
                                OfflineDeviceCount: {
                                    type: "long"
                                },
                                ConnectedDeviceCount: {
                                    type: "long"
                                },
                                ActiveDeviceCount: {
                                    type: "long"
                                },
                                SamplingDeviceCount: {
                                    type: "long"
                                }
                            }
                        }
                    }
                }
            }
        },
        GetLineageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "LineageGroupName" ],
                members: {
                    LineageGroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LineageGroupArn: {},
                    ResourcePolicy: {}
                }
            }
        },
        GetModelPackageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName" ],
                members: {
                    ModelPackageGroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ResourcePolicy" ],
                members: {
                    ResourcePolicy: {}
                }
            }
        },
        GetSagemakerServicecatalogPortfolioStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    Status: {}
                }
            }
        },
        GetScalingConfigurationRecommendation: {
            input: {
                type: "structure",
                required: [ "InferenceRecommendationsJobName" ],
                members: {
                    InferenceRecommendationsJobName: {},
                    RecommendationId: {},
                    EndpointName: {},
                    TargetCpuUtilizationPerCore: {
                        type: "integer"
                    },
                    ScalingPolicyObjective: {
                        shape: "S17j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InferenceRecommendationsJobName: {},
                    RecommendationId: {},
                    EndpointName: {},
                    TargetCpuUtilizationPerCore: {
                        type: "integer"
                    },
                    ScalingPolicyObjective: {
                        shape: "S17j"
                    },
                    Metric: {
                        type: "structure",
                        members: {
                            InvocationsPerInstance: {
                                type: "integer"
                            },
                            ModelLatency: {
                                type: "integer"
                            }
                        }
                    },
                    DynamicScalingConfiguration: {
                        type: "structure",
                        members: {
                            MinCapacity: {
                                type: "integer"
                            },
                            MaxCapacity: {
                                type: "integer"
                            },
                            ScaleInCooldown: {
                                type: "integer"
                            },
                            ScaleOutCooldown: {
                                type: "integer"
                            },
                            ScalingPolicies: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        TargetTracking: {
                                            type: "structure",
                                            members: {
                                                MetricSpecification: {
                                                    type: "structure",
                                                    members: {
                                                        Predefined: {
                                                            type: "structure",
                                                            members: {
                                                                PredefinedMetricType: {}
                                                            }
                                                        },
                                                        Customized: {
                                                            type: "structure",
                                                            members: {
                                                                MetricName: {},
                                                                Namespace: {},
                                                                Statistic: {}
                                                            }
                                                        }
                                                    },
                                                    union: true
                                                },
                                                TargetValue: {
                                                    type: "double"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                }
                            }
                        }
                    }
                }
            }
        },
        GetSearchSuggestions: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {},
                    SuggestionQuery: {
                        type: "structure",
                        members: {
                            PropertyNameQuery: {
                                type: "structure",
                                required: [ "PropertyNameHint" ],
                                members: {
                                    PropertyNameHint: {}
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PropertyNameSuggestions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PropertyName: {}
                            }
                        }
                    }
                }
            }
        },
        ImportHubContent: {
            input: {
                type: "structure",
                required: [ "HubContentName", "HubContentType", "DocumentSchemaVersion", "HubName", "HubContentDocument" ],
                members: {
                    HubContentName: {},
                    HubContentVersion: {},
                    HubContentType: {},
                    DocumentSchemaVersion: {},
                    HubName: {},
                    HubContentDisplayName: {},
                    HubContentDescription: {},
                    HubContentMarkdown: {},
                    HubContentDocument: {},
                    HubContentSearchKeywords: {
                        shape: "S11a"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HubArn", "HubContentArn" ],
                members: {
                    HubArn: {},
                    HubContentArn: {}
                }
            }
        },
        ListActions: {
            input: {
                type: "structure",
                members: {
                    SourceUri: {},
                    ActionType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ActionArn: {},
                                ActionName: {},
                                Source: {
                                    shape: "S1n"
                                },
                                ActionType: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAlgorithms: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AlgorithmSummaryList" ],
                members: {
                    AlgorithmSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AlgorithmName", "AlgorithmArn", "CreationTime", "AlgorithmStatus" ],
                            members: {
                                AlgorithmName: {},
                                AlgorithmArn: {},
                                AlgorithmDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                AlgorithmStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAliases: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {},
                    Alias: {},
                    Version: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SageMakerImageVersionAliases: {
                        shape: "Sic"
                    },
                    NextToken: {}
                }
            }
        },
        ListAppImageConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    ModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    ModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    AppImageConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AppImageConfigArn: {},
                                AppImageConfigName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                KernelGatewayImageConfig: {
                                    shape: "S4s"
                                },
                                JupyterLabAppImageConfig: {
                                    shape: "S51"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListApps: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {},
                    SortBy: {},
                    DomainIdEquals: {},
                    UserProfileNameEquals: {},
                    SpaceNameEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Apps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainId: {},
                                UserProfileName: {},
                                AppType: {},
                                AppName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                SpaceName: {},
                                ResourceSpec: {
                                    shape: "S4h"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListArtifacts: {
            input: {
                type: "structure",
                members: {
                    SourceUri: {},
                    ArtifactType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ArtifactArn: {},
                                ArtifactName: {},
                                Source: {
                                    shape: "S5b"
                                },
                                ArtifactType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAssociations: {
            input: {
                type: "structure",
                members: {
                    SourceArn: {},
                    DestinationArn: {},
                    SourceType: {},
                    DestinationType: {},
                    AssociationType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceArn: {},
                                DestinationArn: {},
                                SourceType: {},
                                DestinationType: {},
                                AssociationType: {},
                                SourceName: {},
                                DestinationName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {
                                    shape: "Swf"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListAutoMLJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "AutoMLJobSummaries" ],
                members: {
                    AutoMLJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AutoMLJobName", "AutoMLJobArn", "AutoMLJobStatus", "AutoMLJobSecondaryStatus", "CreationTime", "LastModifiedTime" ],
                            members: {
                                AutoMLJobName: {},
                                AutoMLJobArn: {},
                                AutoMLJobStatus: {},
                                AutoMLJobSecondaryStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {},
                                PartialFailureReasons: {
                                    shape: "Sx0"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCandidatesForAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {},
                    StatusEquals: {},
                    CandidateNameEquals: {},
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Candidates" ],
                members: {
                    Candidates: {
                        type: "list",
                        member: {
                            shape: "Sx2"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListClusterNodes: {
            input: {
                type: "structure",
                required: [ "ClusterName" ],
                members: {
                    ClusterName: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    InstanceGroupNameContains: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "NextToken", "ClusterNodeSummaries" ],
                members: {
                    NextToken: {},
                    ClusterNodeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InstanceGroupName", "InstanceId", "InstanceType", "LaunchTime", "InstanceStatus" ],
                            members: {
                                InstanceGroupName: {},
                                InstanceId: {},
                                InstanceType: {},
                                LaunchTime: {
                                    type: "timestamp"
                                },
                                InstanceStatus: {
                                    shape: "Syg"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListClusters: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "NextToken", "ClusterSummaries" ],
                members: {
                    NextToken: {},
                    ClusterSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ClusterArn", "ClusterName", "CreationTime", "ClusterStatus" ],
                            members: {
                                ClusterArn: {},
                                ClusterName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ClusterStatus: {}
                            }
                        }
                    }
                }
            }
        },
        ListCodeRepositories: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositorySummaryList" ],
                members: {
                    CodeRepositorySummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CodeRepositoryName", "CodeRepositoryArn", "CreationTime", "LastModifiedTime" ],
                            members: {
                                CodeRepositoryName: {},
                                CodeRepositoryArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                GitConfig: {
                                    shape: "S7y"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCompilationJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "CompilationJobSummaries" ],
                members: {
                    CompilationJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CompilationJobName", "CompilationJobArn", "CreationTime", "CompilationJobStatus" ],
                            members: {
                                CompilationJobName: {},
                                CompilationJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CompilationStartTime: {
                                    type: "timestamp"
                                },
                                CompilationEndTime: {
                                    type: "timestamp"
                                },
                                CompilationTargetDevice: {},
                                CompilationTargetPlatformOs: {},
                                CompilationTargetPlatformArch: {},
                                CompilationTargetPlatformAccelerator: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                CompilationJobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListContexts: {
            input: {
                type: "structure",
                members: {
                    SourceUri: {},
                    ContextType: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ContextArn: {},
                                ContextName: {},
                                Source: {
                                    shape: "S8n"
                                },
                                ContextType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDataQualityJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "S1ab"
                    },
                    NextToken: {}
                }
            }
        },
        ListDeviceFleets: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceFleetSummaries" ],
                members: {
                    DeviceFleetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceFleetArn", "DeviceFleetName" ],
                            members: {
                                DeviceFleetArn: {},
                                DeviceFleetName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevices: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    LatestHeartbeatAfter: {
                        type: "timestamp"
                    },
                    ModelName: {},
                    DeviceFleetName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceSummaries" ],
                members: {
                    DeviceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "DeviceName", "DeviceArn" ],
                            members: {
                                DeviceName: {},
                                DeviceArn: {},
                                Description: {},
                                DeviceFleetName: {},
                                IotThingName: {},
                                RegistrationTime: {
                                    type: "timestamp"
                                },
                                LatestHeartbeat: {
                                    type: "timestamp"
                                },
                                Models: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "ModelName", "ModelVersion" ],
                                        members: {
                                            ModelName: {},
                                            ModelVersion: {}
                                        }
                                    }
                                },
                                AgentVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainArn: {},
                                DomainId: {},
                                DomainName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                Url: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEdgeDeploymentPlans: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    DeviceFleetNameContains: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EdgeDeploymentPlanSummaries" ],
                members: {
                    EdgeDeploymentPlanSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EdgeDeploymentPlanArn", "EdgeDeploymentPlanName", "DeviceFleetName", "EdgeDeploymentSuccess", "EdgeDeploymentPending", "EdgeDeploymentFailed" ],
                            members: {
                                EdgeDeploymentPlanArn: {},
                                EdgeDeploymentPlanName: {},
                                DeviceFleetName: {},
                                EdgeDeploymentSuccess: {
                                    type: "integer"
                                },
                                EdgeDeploymentPending: {
                                    type: "integer"
                                },
                                EdgeDeploymentFailed: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEdgePackagingJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    ModelNameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "EdgePackagingJobSummaries" ],
                members: {
                    EdgePackagingJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EdgePackagingJobArn", "EdgePackagingJobName", "EdgePackagingJobStatus" ],
                            members: {
                                EdgePackagingJobArn: {},
                                EdgePackagingJobName: {},
                                EdgePackagingJobStatus: {},
                                CompilationJobName: {},
                                ModelName: {},
                                ModelVersion: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpointConfigs: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointConfigs" ],
                members: {
                    EndpointConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EndpointConfigName", "EndpointConfigArn", "CreationTime" ],
                            members: {
                                EndpointConfigName: {},
                                EndpointConfigArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEndpoints: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Endpoints" ],
                members: {
                    Endpoints: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EndpointName", "EndpointArn", "CreationTime", "LastModifiedTime", "EndpointStatus" ],
                            members: {
                                EndpointName: {},
                                EndpointArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                EndpointStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExperiments: {
            input: {
                type: "structure",
                members: {
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ExperimentArn: {},
                                ExperimentName: {},
                                DisplayName: {},
                                ExperimentSource: {
                                    shape: "S10c"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFeatureGroups: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    FeatureGroupStatusEquals: {},
                    OfflineStoreStatusEquals: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupSummaries", "NextToken" ],
                members: {
                    FeatureGroupSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FeatureGroupName", "FeatureGroupArn", "CreationTime" ],
                            members: {
                                FeatureGroupName: {},
                                FeatureGroupArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FeatureGroupStatus: {},
                                OfflineStoreStatus: {
                                    shape: "S10j"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFlowDefinitions: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FlowDefinitionSummaries" ],
                members: {
                    FlowDefinitionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "FlowDefinitionName", "FlowDefinitionArn", "FlowDefinitionStatus", "CreationTime" ],
                            members: {
                                FlowDefinitionName: {},
                                FlowDefinitionArn: {},
                                FlowDefinitionStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHubContentVersions: {
            input: {
                type: "structure",
                required: [ "HubName", "HubContentType", "HubContentName" ],
                members: {
                    HubName: {},
                    HubContentType: {},
                    HubContentName: {},
                    MinVersion: {},
                    MaxSchemaVersion: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HubContentSummaries" ],
                members: {
                    HubContentSummaries: {
                        shape: "S1c1"
                    },
                    NextToken: {}
                }
            }
        },
        ListHubContents: {
            input: {
                type: "structure",
                required: [ "HubName", "HubContentType" ],
                members: {
                    HubName: {},
                    HubContentType: {},
                    NameContains: {},
                    MaxSchemaVersion: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HubContentSummaries" ],
                members: {
                    HubContentSummaries: {
                        shape: "S1c1"
                    },
                    NextToken: {}
                }
            }
        },
        ListHubs: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HubSummaries" ],
                members: {
                    HubSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "HubName", "HubArn", "HubStatus", "CreationTime", "LastModifiedTime" ],
                            members: {
                                HubName: {},
                                HubArn: {},
                                HubDisplayName: {},
                                HubDescription: {},
                                HubSearchKeywords: {
                                    shape: "Sga"
                                },
                                HubStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHumanTaskUis: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HumanTaskUiSummaries" ],
                members: {
                    HumanTaskUiSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "HumanTaskUiName", "HumanTaskUiArn", "CreationTime" ],
                            members: {
                                HumanTaskUiName: {},
                                HumanTaskUiArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHyperParameterTuningJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "HyperParameterTuningJobSummaries" ],
                members: {
                    HyperParameterTuningJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "HyperParameterTuningJobName", "HyperParameterTuningJobArn", "HyperParameterTuningJobStatus", "Strategy", "CreationTime", "TrainingJobStatusCounters", "ObjectiveStatusCounters" ],
                            members: {
                                HyperParameterTuningJobName: {},
                                HyperParameterTuningJobArn: {},
                                HyperParameterTuningJobStatus: {},
                                Strategy: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                HyperParameterTuningEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                TrainingJobStatusCounters: {
                                    shape: "S11p"
                                },
                                ObjectiveStatusCounters: {
                                    shape: "S11r"
                                },
                                ResourceLimits: {
                                    shape: "Sgt"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImageVersions: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    ImageName: {},
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "ImageArn", "ImageVersionArn", "ImageVersionStatus", "LastModifiedTime", "Version" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {},
                                ImageArn: {},
                                ImageVersionArn: {},
                                ImageVersionStatus: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                Version: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListImages: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Images: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "ImageArn", "ImageName", "ImageStatus", "LastModifiedTime" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                DisplayName: {},
                                FailureReason: {},
                                ImageArn: {},
                                ImageName: {},
                                ImageStatus: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInferenceComponents: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    EndpointNameEquals: {},
                    VariantNameEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceComponents" ],
                members: {
                    InferenceComponents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CreationTime", "InferenceComponentArn", "InferenceComponentName", "EndpointArn", "EndpointName", "VariantName", "LastModifiedTime" ],
                            members: {
                                CreationTime: {
                                    type: "timestamp"
                                },
                                InferenceComponentArn: {},
                                InferenceComponentName: {},
                                EndpointArn: {},
                                EndpointName: {},
                                VariantName: {},
                                InferenceComponentStatus: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInferenceExperiments: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    Type: {},
                    StatusEquals: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InferenceExperiments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Type", "Status", "CreationTime", "LastModifiedTime" ],
                            members: {
                                Name: {},
                                Type: {},
                                Schedule: {
                                    shape: "Sj2"
                                },
                                Status: {},
                                StatusReason: {},
                                Description: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                RoleArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInferenceRecommendationsJobSteps: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {},
                    Status: {},
                    StepType: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Steps: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "StepType", "JobName", "Status" ],
                            members: {
                                StepType: {},
                                JobName: {},
                                Status: {},
                                InferenceBenchmark: {
                                    type: "structure",
                                    required: [ "ModelConfiguration" ],
                                    members: {
                                        Metrics: {
                                            shape: "S12o"
                                        },
                                        EndpointConfiguration: {
                                            shape: "S12r"
                                        },
                                        ModelConfiguration: {
                                            shape: "S12t"
                                        },
                                        FailureReason: {},
                                        EndpointMetrics: {
                                            shape: "S131"
                                        },
                                        InvocationEndTime: {
                                            type: "timestamp"
                                        },
                                        InvocationStartTime: {
                                            type: "timestamp"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInferenceRecommendationsJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ModelNameEquals: {},
                    ModelPackageVersionArnEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceRecommendationsJobs" ],
                members: {
                    InferenceRecommendationsJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "JobName", "JobDescription", "JobType", "JobArn", "Status", "CreationTime", "RoleArn", "LastModifiedTime" ],
                            members: {
                                JobName: {},
                                JobDescription: {},
                                JobType: {},
                                JobArn: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CompletionTime: {
                                    type: "timestamp"
                                },
                                RoleArn: {},
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                FailureReason: {},
                                ModelName: {},
                                SamplePayloadUrl: {},
                                ModelPackageVersionArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLabelingJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    NameContains: {},
                    SortBy: {},
                    SortOrder: {},
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LabelingJobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "LabelingJobName", "LabelingJobArn", "CreationTime", "LastModifiedTime", "LabelingJobStatus", "LabelCounters", "WorkteamArn", "PreHumanTaskLambdaArn" ],
                            members: {
                                LabelingJobName: {},
                                LabelingJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LabelingJobStatus: {},
                                LabelCounters: {
                                    shape: "S135"
                                },
                                WorkteamArn: {},
                                PreHumanTaskLambdaArn: {},
                                AnnotationConsolidationLambdaArn: {},
                                FailureReason: {},
                                LabelingJobOutput: {
                                    shape: "S138"
                                },
                                InputConfig: {
                                    shape: "Sl2"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLabelingJobsForWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamArn" ],
                members: {
                    WorkteamArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    JobReferenceCodeContains: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "LabelingJobSummaryList" ],
                members: {
                    LabelingJobSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "JobReferenceCode", "WorkRequesterAccountId", "CreationTime" ],
                            members: {
                                LabelingJobName: {},
                                JobReferenceCode: {},
                                WorkRequesterAccountId: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LabelCounters: {
                                    type: "structure",
                                    members: {
                                        HumanLabeled: {
                                            type: "integer"
                                        },
                                        PendingHuman: {
                                            type: "integer"
                                        },
                                        Total: {
                                            type: "integer"
                                        }
                                    }
                                },
                                NumberOfHumanWorkersPerDataObject: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListLineageGroups: {
            input: {
                type: "structure",
                members: {
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    LineageGroupSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                LineageGroupArn: {},
                                LineageGroupName: {},
                                DisplayName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelBiasJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "S1ab"
                    },
                    NextToken: {}
                }
            }
        },
        ListModelCardExportJobs: {
            input: {
                type: "structure",
                required: [ "ModelCardName" ],
                members: {
                    ModelCardName: {},
                    ModelCardVersion: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    ModelCardExportJobNameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardExportJobSummaries" ],
                members: {
                    ModelCardExportJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelCardExportJobName", "ModelCardExportJobArn", "Status", "ModelCardName", "ModelCardVersion", "CreatedAt", "LastModifiedAt" ],
                            members: {
                                ModelCardExportJobName: {},
                                ModelCardExportJobArn: {},
                                Status: {},
                                ModelCardName: {},
                                ModelCardVersion: {
                                    type: "integer"
                                },
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                LastModifiedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelCardVersions: {
            input: {
                type: "structure",
                required: [ "ModelCardName" ],
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    ModelCardName: {},
                    ModelCardStatus: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardVersionSummaryList" ],
                members: {
                    ModelCardVersionSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelCardName", "ModelCardArn", "ModelCardStatus", "ModelCardVersion", "CreationTime" ],
                            members: {
                                ModelCardName: {},
                                ModelCardArn: {},
                                ModelCardStatus: {},
                                ModelCardVersion: {
                                    type: "integer"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelCards: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    ModelCardStatus: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardSummaries" ],
                members: {
                    ModelCardSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelCardName", "ModelCardArn", "ModelCardStatus", "CreationTime" ],
                            members: {
                                ModelCardName: {},
                                ModelCardArn: {},
                                ModelCardStatus: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelExplainabilityJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "S1ab"
                    },
                    NextToken: {}
                }
            }
        },
        ListModelMetadata: {
            input: {
                type: "structure",
                members: {
                    SearchExpression: {
                        type: "structure",
                        members: {
                            Filters: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "Name", "Value" ],
                                    members: {
                                        Name: {},
                                        Value: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelMetadataSummaries" ],
                members: {
                    ModelMetadataSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Domain", "Framework", "Task", "Model", "FrameworkVersion" ],
                            members: {
                                Domain: {},
                                Framework: {},
                                Task: {},
                                Model: {},
                                FrameworkVersion: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelPackageGroups: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupSummaryList" ],
                members: {
                    ModelPackageGroupSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelPackageGroupName", "ModelPackageGroupArn", "CreationTime", "ModelPackageGroupStatus" ],
                            members: {
                                ModelPackageGroupName: {},
                                ModelPackageGroupArn: {},
                                ModelPackageGroupDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ModelPackageGroupStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelPackages: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    ModelApprovalStatus: {},
                    ModelPackageGroupName: {},
                    ModelPackageType: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageSummaryList" ],
                members: {
                    ModelPackageSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelPackageArn", "CreationTime", "ModelPackageStatus" ],
                            members: {
                                ModelPackageName: {},
                                ModelPackageGroupName: {},
                                ModelPackageVersion: {
                                    type: "integer"
                                },
                                ModelPackageArn: {},
                                ModelPackageDescription: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ModelPackageStatus: {},
                                ModelApprovalStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListModelQualityJobDefinitions: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobDefinitionSummaries" ],
                members: {
                    JobDefinitionSummaries: {
                        shape: "S1ab"
                    },
                    NextToken: {}
                }
            }
        },
        ListModels: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Models" ],
                members: {
                    Models: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ModelName", "ModelArn", "CreationTime" ],
                            members: {
                                ModelName: {},
                                ModelArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoringAlertHistory: {
            input: {
                type: "structure",
                members: {
                    MonitoringScheduleName: {},
                    MonitoringAlertName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    MonitoringAlertHistory: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MonitoringScheduleName", "MonitoringAlertName", "CreationTime", "AlertStatus" ],
                            members: {
                                MonitoringScheduleName: {},
                                MonitoringAlertName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                AlertStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoringAlerts: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonitoringAlertSummaries: {
                        shape: "S1fm"
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoringExecutions: {
            input: {
                type: "structure",
                members: {
                    MonitoringScheduleName: {},
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ScheduledTimeBefore: {
                        type: "timestamp"
                    },
                    ScheduledTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    MonitoringJobDefinitionName: {},
                    MonitoringTypeEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringExecutionSummaries" ],
                members: {
                    MonitoringExecutionSummaries: {
                        type: "list",
                        member: {
                            shape: "S147"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMonitoringSchedules: {
            input: {
                type: "structure",
                members: {
                    EndpointName: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    MonitoringJobDefinitionName: {},
                    MonitoringTypeEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleSummaries" ],
                members: {
                    MonitoringScheduleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "MonitoringScheduleName", "MonitoringScheduleArn", "CreationTime", "LastModifiedTime", "MonitoringScheduleStatus" ],
                            members: {
                                MonitoringScheduleName: {},
                                MonitoringScheduleArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                MonitoringScheduleStatus: {},
                                EndpointName: {},
                                MonitoringJobDefinitionName: {},
                                MonitoringType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNotebookInstanceLifecycleConfigs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotebookInstanceLifecycleConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NotebookInstanceLifecycleConfigName", "NotebookInstanceLifecycleConfigArn" ],
                            members: {
                                NotebookInstanceLifecycleConfigName: {},
                                NotebookInstanceLifecycleConfigArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListNotebookInstances: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    StatusEquals: {},
                    NotebookInstanceLifecycleConfigNameContains: {},
                    DefaultCodeRepositoryContains: {},
                    AdditionalCodeRepositoryEquals: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NotebookInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NotebookInstanceName", "NotebookInstanceArn" ],
                            members: {
                                NotebookInstanceName: {},
                                NotebookInstanceArn: {},
                                NotebookInstanceStatus: {},
                                Url: {},
                                InstanceType: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                NotebookInstanceLifecycleConfigName: {},
                                DefaultCodeRepository: {},
                                AdditionalCodeRepositories: {
                                    shape: "Soo"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListPipelineExecutionSteps: {
            input: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionSteps: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StepName: {},
                                StepDisplayName: {},
                                StepDescription: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                StepStatus: {},
                                CacheHitResult: {
                                    type: "structure",
                                    members: {
                                        SourcePipelineExecutionArn: {}
                                    }
                                },
                                AttemptCount: {
                                    type: "integer"
                                },
                                FailureReason: {},
                                Metadata: {
                                    type: "structure",
                                    members: {
                                        TrainingJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        ProcessingJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        TransformJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        TuningJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        Model: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        RegisterModel: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        },
                                        Condition: {
                                            type: "structure",
                                            members: {
                                                Outcome: {}
                                            }
                                        },
                                        Callback: {
                                            type: "structure",
                                            members: {
                                                CallbackToken: {},
                                                SqsQueueUrl: {},
                                                OutputParameters: {
                                                    shape: "S1h1"
                                                }
                                            }
                                        },
                                        Lambda: {
                                            type: "structure",
                                            members: {
                                                Arn: {},
                                                OutputParameters: {
                                                    shape: "S1h1"
                                                }
                                            }
                                        },
                                        QualityCheck: {
                                            type: "structure",
                                            members: {
                                                CheckType: {},
                                                BaselineUsedForDriftCheckStatistics: {},
                                                BaselineUsedForDriftCheckConstraints: {},
                                                CalculatedBaselineStatistics: {},
                                                CalculatedBaselineConstraints: {},
                                                ModelPackageGroupName: {},
                                                ViolationReport: {},
                                                CheckJobArn: {},
                                                SkipCheck: {
                                                    type: "boolean"
                                                },
                                                RegisterNewBaseline: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        ClarifyCheck: {
                                            type: "structure",
                                            members: {
                                                CheckType: {},
                                                BaselineUsedForDriftCheckConstraints: {},
                                                CalculatedBaselineConstraints: {},
                                                ModelPackageGroupName: {},
                                                ViolationReport: {},
                                                CheckJobArn: {},
                                                SkipCheck: {
                                                    type: "boolean"
                                                },
                                                RegisterNewBaseline: {
                                                    type: "boolean"
                                                }
                                            }
                                        },
                                        EMR: {
                                            type: "structure",
                                            members: {
                                                ClusterId: {},
                                                StepId: {},
                                                StepName: {},
                                                LogFilePath: {}
                                            }
                                        },
                                        Fail: {
                                            type: "structure",
                                            members: {
                                                ErrorMessage: {}
                                            }
                                        },
                                        AutoMLJob: {
                                            type: "structure",
                                            members: {
                                                Arn: {}
                                            }
                                        }
                                    }
                                },
                                SelectiveExecutionResult: {
                                    type: "structure",
                                    members: {
                                        SourcePipelineExecutionArn: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPipelineExecutions: {
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PipelineExecutionArn: {},
                                StartTime: {
                                    type: "timestamp"
                                },
                                PipelineExecutionStatus: {},
                                PipelineExecutionDescription: {},
                                PipelineExecutionDisplayName: {},
                                PipelineExecutionFailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPipelineParametersForExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineParameters: {
                        shape: "S1hi"
                    },
                    NextToken: {}
                }
            }
        },
        ListPipelines: {
            input: {
                type: "structure",
                members: {
                    PipelineNamePrefix: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                PipelineArn: {},
                                PipelineName: {},
                                PipelineDisplayName: {},
                                PipelineDescription: {},
                                RoleArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastExecutionTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProcessingJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProcessingJobSummaries" ],
                members: {
                    ProcessingJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProcessingJobName", "ProcessingJobArn", "CreationTime", "ProcessingJobStatus" ],
                            members: {
                                ProcessingJobName: {},
                                ProcessingJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ProcessingEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                ProcessingJobStatus: {},
                                FailureReason: {},
                                ExitMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProjects: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NameContains: {},
                    NextToken: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectSummaryList" ],
                members: {
                    ProjectSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ProjectName", "ProjectArn", "ProjectId", "CreationTime", "ProjectStatus" ],
                            members: {
                                ProjectName: {},
                                ProjectDescription: {},
                                ProjectArn: {},
                                ProjectId: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                ProjectStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResourceCatalogs: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    SortOrder: {},
                    SortBy: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceCatalogs: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ResourceCatalogArn", "ResourceCatalogName", "Description", "CreationTime" ],
                            members: {
                                ResourceCatalogArn: {},
                                ResourceCatalogName: {},
                                Description: {},
                                CreationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpaces: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {},
                    SortBy: {},
                    DomainIdEquals: {},
                    SpaceNameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Spaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainId: {},
                                SpaceName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                SpaceDisplayName: {},
                                SpaceSettingsSummary: {
                                    type: "structure",
                                    members: {
                                        AppType: {},
                                        SpaceStorageSettings: {
                                            shape: "Sr4"
                                        }
                                    }
                                },
                                SpaceSharingSettingsSummary: {
                                    type: "structure",
                                    members: {
                                        SharingType: {}
                                    }
                                },
                                OwnershipSettingsSummary: {
                                    type: "structure",
                                    members: {
                                        OwnerUserProfileName: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStageDevices: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName", "StageName" ],
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    EdgeDeploymentPlanName: {},
                    ExcludeDevicesDeployedInOtherStage: {
                        type: "boolean"
                    },
                    StageName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "DeviceDeploymentSummaries" ],
                members: {
                    DeviceDeploymentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "EdgeDeploymentPlanArn", "EdgeDeploymentPlanName", "StageName", "DeviceName", "DeviceArn" ],
                            members: {
                                EdgeDeploymentPlanArn: {},
                                EdgeDeploymentPlanName: {},
                                StageName: {},
                                DeployedStageName: {},
                                DeviceFleetName: {},
                                DeviceName: {},
                                DeviceArn: {},
                                DeviceDeploymentStatus: {},
                                DeviceDeploymentStatusMessage: {},
                                Description: {},
                                DeploymentStartTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListStudioLifecycleConfigs: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    NameContains: {},
                    AppTypeEquals: {},
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    ModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    ModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    StudioLifecycleConfigs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                StudioLifecycleConfigArn: {},
                                StudioLifecycleConfigName: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                StudioLifecycleConfigAppType: {}
                            }
                        }
                    }
                }
            }
        },
        ListSubscribedWorkteams: {
            input: {
                type: "structure",
                members: {
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "SubscribedWorkteams" ],
                members: {
                    SubscribedWorkteams: {
                        type: "list",
                        member: {
                            shape: "S15d"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTags: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    },
                    NextToken: {}
                }
            }
        },
        ListTrainingJobs: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    WarmPoolStatusEquals: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobSummaries" ],
                members: {
                    TrainingJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TrainingJobName", "TrainingJobArn", "CreationTime", "TrainingJobStatus" ],
                            members: {
                                TrainingJobName: {},
                                TrainingJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                TrainingEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                TrainingJobStatus: {},
                                WarmPoolStatus: {
                                    shape: "S15v"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrainingJobsForHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName" ],
                members: {
                    HyperParameterTuningJobName: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {}
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobSummaries" ],
                members: {
                    TrainingJobSummaries: {
                        type: "list",
                        member: {
                            shape: "S11t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTransformJobs: {
            input: {
                type: "structure",
                members: {
                    CreationTimeAfter: {
                        type: "timestamp"
                    },
                    CreationTimeBefore: {
                        type: "timestamp"
                    },
                    LastModifiedTimeAfter: {
                        type: "timestamp"
                    },
                    LastModifiedTimeBefore: {
                        type: "timestamp"
                    },
                    NameContains: {},
                    StatusEquals: {},
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TransformJobSummaries" ],
                members: {
                    TransformJobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "TransformJobName", "TransformJobArn", "CreationTime", "TransformJobStatus" ],
                            members: {
                                TransformJobName: {},
                                TransformJobArn: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                TransformEndTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                TransformJobStatus: {},
                                FailureReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrialComponents: {
            input: {
                type: "structure",
                members: {
                    ExperimentName: {},
                    TrialName: {},
                    SourceArn: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrialComponentName: {},
                                TrialComponentArn: {},
                                DisplayName: {},
                                TrialComponentSource: {
                                    shape: "S167"
                                },
                                Status: {
                                    shape: "Ssy"
                                },
                                StartTime: {
                                    type: "timestamp"
                                },
                                EndTime: {
                                    type: "timestamp"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                CreatedBy: {
                                    shape: "Swf"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                },
                                LastModifiedBy: {
                                    shape: "Swf"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTrials: {
            input: {
                type: "structure",
                members: {
                    ExperimentName: {},
                    TrialComponentName: {},
                    CreatedAfter: {
                        type: "timestamp"
                    },
                    CreatedBefore: {
                        type: "timestamp"
                    },
                    SortBy: {},
                    SortOrder: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrialArn: {},
                                TrialName: {},
                                DisplayName: {},
                                TrialSource: {
                                    shape: "S163"
                                },
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListUserProfiles: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    SortOrder: {},
                    SortBy: {},
                    DomainIdEquals: {},
                    UserProfileNameContains: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfiles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DomainId: {},
                                UserProfileName: {},
                                Status: {},
                                CreationTime: {
                                    type: "timestamp"
                                },
                                LastModifiedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkforces: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workforces" ],
                members: {
                    Workforces: {
                        type: "list",
                        member: {
                            shape: "S16j"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListWorkteams: {
            input: {
                type: "structure",
                members: {
                    SortBy: {},
                    SortOrder: {},
                    NameContains: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workteams" ],
                members: {
                    Workteams: {
                        type: "list",
                        member: {
                            shape: "S16r"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        PutModelPackageGroupPolicy: {
            input: {
                type: "structure",
                required: [ "ModelPackageGroupName", "ResourcePolicy" ],
                members: {
                    ModelPackageGroupName: {},
                    ResourcePolicy: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageGroupArn" ],
                members: {
                    ModelPackageGroupArn: {}
                }
            }
        },
        QueryLineage: {
            input: {
                type: "structure",
                members: {
                    StartArns: {
                        type: "list",
                        member: {}
                    },
                    Direction: {},
                    IncludeEdges: {
                        type: "boolean"
                    },
                    Filters: {
                        type: "structure",
                        members: {
                            Types: {
                                type: "list",
                                member: {}
                            },
                            LineageTypes: {
                                type: "list",
                                member: {}
                            },
                            CreatedBefore: {
                                type: "timestamp"
                            },
                            CreatedAfter: {
                                type: "timestamp"
                            },
                            ModifiedBefore: {
                                type: "timestamp"
                            },
                            ModifiedAfter: {
                                type: "timestamp"
                            },
                            Properties: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    },
                    MaxDepth: {
                        type: "integer"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Vertices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Type: {},
                                LineageType: {}
                            }
                        }
                    },
                    Edges: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                SourceArn: {},
                                DestinationArn: {},
                                AssociationType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RegisterDevices: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "Devices" ],
                members: {
                    DeviceFleetName: {},
                    Devices: {
                        shape: "S1kg"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        RenderUiTemplate: {
            input: {
                type: "structure",
                required: [ "Task", "RoleArn" ],
                members: {
                    UiTemplate: {
                        shape: "Sgi"
                    },
                    Task: {
                        type: "structure",
                        required: [ "Input" ],
                        members: {
                            Input: {}
                        }
                    },
                    RoleArn: {},
                    HumanTaskUiArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "RenderedContent", "Errors" ],
                members: {
                    RenderedContent: {},
                    Errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Code", "Message" ],
                            members: {
                                Code: {},
                                Message: {}
                            }
                        }
                    }
                }
            }
        },
        RetryPipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn", "ClientRequestToken" ],
                members: {
                    PipelineExecutionArn: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    ParallelismConfiguration: {
                        shape: "Spa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        Search: {
            input: {
                type: "structure",
                required: [ "Resource" ],
                members: {
                    Resource: {},
                    SearchExpression: {
                        shape: "S1kr"
                    },
                    SortBy: {},
                    SortOrder: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    CrossAccountFilterOption: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Results: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                TrainingJob: {
                                    shape: "S1l5"
                                },
                                Experiment: {
                                    type: "structure",
                                    members: {
                                        ExperimentName: {},
                                        ExperimentArn: {},
                                        DisplayName: {},
                                        Source: {
                                            shape: "S10c"
                                        },
                                        Description: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                Trial: {
                                    type: "structure",
                                    members: {
                                        TrialName: {},
                                        TrialArn: {},
                                        DisplayName: {},
                                        ExperimentName: {},
                                        Source: {
                                            shape: "S163"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        MetadataProperties: {
                                            shape: "S1u"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        TrialComponentSummaries: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    TrialComponentName: {},
                                                    TrialComponentArn: {},
                                                    TrialComponentSource: {
                                                        shape: "S167"
                                                    },
                                                    CreationTime: {
                                                        type: "timestamp"
                                                    },
                                                    CreatedBy: {
                                                        shape: "Swf"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                TrialComponent: {
                                    type: "structure",
                                    members: {
                                        TrialComponentName: {},
                                        DisplayName: {},
                                        TrialComponentArn: {},
                                        Source: {
                                            shape: "S167"
                                        },
                                        Status: {
                                            shape: "Ssy"
                                        },
                                        StartTime: {
                                            type: "timestamp"
                                        },
                                        EndTime: {
                                            type: "timestamp"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        Parameters: {
                                            shape: "St1"
                                        },
                                        InputArtifacts: {
                                            shape: "St5"
                                        },
                                        OutputArtifacts: {
                                            shape: "St5"
                                        },
                                        Metrics: {
                                            shape: "S169"
                                        },
                                        MetadataProperties: {
                                            shape: "S1u"
                                        },
                                        SourceDetail: {
                                            type: "structure",
                                            members: {
                                                SourceArn: {},
                                                TrainingJob: {
                                                    shape: "S1l5"
                                                },
                                                ProcessingJob: {
                                                    type: "structure",
                                                    members: {
                                                        ProcessingInputs: {
                                                            shape: "Spn"
                                                        },
                                                        ProcessingOutputConfig: {
                                                            shape: "Sqa"
                                                        },
                                                        ProcessingJobName: {},
                                                        ProcessingResources: {
                                                            shape: "Sqf"
                                                        },
                                                        StoppingCondition: {
                                                            shape: "Sqh"
                                                        },
                                                        AppSpecification: {
                                                            shape: "Sqj"
                                                        },
                                                        Environment: {
                                                            shape: "Sql"
                                                        },
                                                        NetworkConfig: {
                                                            shape: "Soc"
                                                        },
                                                        RoleArn: {},
                                                        ExperimentConfig: {
                                                            shape: "Sqm"
                                                        },
                                                        ProcessingJobArn: {},
                                                        ProcessingJobStatus: {},
                                                        ExitMessage: {},
                                                        FailureReason: {},
                                                        ProcessingEndTime: {
                                                            type: "timestamp"
                                                        },
                                                        ProcessingStartTime: {
                                                            type: "timestamp"
                                                        },
                                                        LastModifiedTime: {
                                                            type: "timestamp"
                                                        },
                                                        CreationTime: {
                                                            type: "timestamp"
                                                        },
                                                        MonitoringScheduleArn: {},
                                                        AutoMLJobArn: {},
                                                        TrainingJobArn: {},
                                                        Tags: {
                                                            shape: "S7"
                                                        }
                                                    }
                                                },
                                                TransformJob: {
                                                    shape: "S1ld"
                                                }
                                            }
                                        },
                                        LineageGroupArn: {},
                                        Tags: {
                                            shape: "S7"
                                        },
                                        Parents: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    TrialName: {},
                                                    ExperimentName: {}
                                                }
                                            }
                                        },
                                        RunName: {}
                                    }
                                },
                                Endpoint: {
                                    type: "structure",
                                    required: [ "EndpointName", "EndpointArn", "EndpointConfigName", "EndpointStatus", "CreationTime", "LastModifiedTime" ],
                                    members: {
                                        EndpointName: {},
                                        EndpointArn: {},
                                        EndpointConfigName: {},
                                        ProductionVariants: {
                                            shape: "Szu"
                                        },
                                        DataCaptureConfig: {
                                            shape: "S102"
                                        },
                                        EndpointStatus: {},
                                        FailureReason: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        MonitoringSchedules: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    MonitoringScheduleArn: {},
                                                    MonitoringScheduleName: {},
                                                    MonitoringScheduleStatus: {},
                                                    MonitoringType: {},
                                                    FailureReason: {},
                                                    CreationTime: {
                                                        type: "timestamp"
                                                    },
                                                    LastModifiedTime: {
                                                        type: "timestamp"
                                                    },
                                                    MonitoringScheduleConfig: {
                                                        shape: "So4"
                                                    },
                                                    EndpointName: {},
                                                    LastMonitoringExecutionSummary: {
                                                        shape: "S147"
                                                    },
                                                    Tags: {
                                                        shape: "S7"
                                                    }
                                                }
                                            }
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        ShadowProductionVariants: {
                                            shape: "Szu"
                                        }
                                    }
                                },
                                ModelPackage: {
                                    type: "structure",
                                    members: {
                                        ModelPackageName: {},
                                        ModelPackageGroupName: {},
                                        ModelPackageVersion: {
                                            type: "integer"
                                        },
                                        ModelPackageArn: {},
                                        ModelPackageDescription: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        InferenceSpecification: {
                                            shape: "Sr"
                                        },
                                        SourceAlgorithmSpecification: {
                                            shape: "Sn6"
                                        },
                                        ValidationSpecification: {
                                            shape: "Sn3"
                                        },
                                        ModelPackageStatus: {},
                                        ModelPackageStatusDetails: {
                                            shape: "S13u"
                                        },
                                        CertifyForMarketplace: {
                                            type: "boolean"
                                        },
                                        ModelApprovalStatus: {},
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        MetadataProperties: {
                                            shape: "S1u"
                                        },
                                        ModelMetrics: {
                                            shape: "Sn9"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        ApprovalDescription: {},
                                        Domain: {},
                                        Task: {},
                                        SamplePayloadUrl: {},
                                        AdditionalInferenceSpecifications: {
                                            shape: "Snp"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        CustomerMetadataProperties: {
                                            shape: "Sng"
                                        },
                                        DriftCheckBaselines: {
                                            shape: "Snj"
                                        },
                                        SkipModelValidation: {}
                                    }
                                },
                                ModelPackageGroup: {
                                    type: "structure",
                                    members: {
                                        ModelPackageGroupName: {},
                                        ModelPackageGroupArn: {},
                                        ModelPackageGroupDescription: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        ModelPackageGroupStatus: {},
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                Pipeline: {
                                    type: "structure",
                                    members: {
                                        PipelineArn: {},
                                        PipelineName: {},
                                        PipelineDisplayName: {},
                                        PipelineDescription: {},
                                        RoleArn: {},
                                        PipelineStatus: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastRunTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        ParallelismConfiguration: {
                                            shape: "Spa"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                PipelineExecution: {
                                    type: "structure",
                                    members: {
                                        PipelineArn: {},
                                        PipelineExecutionArn: {},
                                        PipelineExecutionDisplayName: {},
                                        PipelineExecutionStatus: {},
                                        PipelineExecutionDescription: {},
                                        PipelineExperimentConfig: {
                                            shape: "S14r"
                                        },
                                        FailureReason: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        ParallelismConfiguration: {
                                            shape: "Spa"
                                        },
                                        PipelineParameters: {
                                            shape: "S1hi"
                                        },
                                        SelectiveExecutionConfig: {
                                            shape: "S14t"
                                        }
                                    }
                                },
                                FeatureGroup: {
                                    type: "structure",
                                    members: {
                                        FeatureGroupArn: {},
                                        FeatureGroupName: {},
                                        RecordIdentifierFeatureName: {},
                                        EventTimeFeatureName: {},
                                        FeatureDefinitions: {
                                            shape: "Seu"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        OnlineStoreConfig: {
                                            shape: "Sf1"
                                        },
                                        OfflineStoreConfig: {
                                            shape: "Sf7"
                                        },
                                        RoleArn: {},
                                        FeatureGroupStatus: {},
                                        OfflineStoreStatus: {
                                            shape: "S10j"
                                        },
                                        LastUpdateStatus: {
                                            shape: "S10m"
                                        },
                                        FailureReason: {},
                                        Description: {},
                                        Tags: {
                                            shape: "S7"
                                        }
                                    }
                                },
                                Project: {
                                    type: "structure",
                                    members: {
                                        ProjectArn: {},
                                        ProjectName: {},
                                        ProjectId: {},
                                        ProjectDescription: {},
                                        ServiceCatalogProvisioningDetails: {
                                            shape: "Sqr"
                                        },
                                        ServiceCatalogProvisionedProductDetails: {
                                            shape: "S152"
                                        },
                                        ProjectStatus: {},
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        }
                                    }
                                },
                                FeatureMetadata: {
                                    type: "structure",
                                    members: {
                                        FeatureGroupArn: {},
                                        FeatureGroupName: {},
                                        FeatureName: {},
                                        FeatureType: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        Description: {},
                                        Parameters: {
                                            shape: "S10s"
                                        }
                                    }
                                },
                                HyperParameterTuningJob: {
                                    type: "structure",
                                    members: {
                                        HyperParameterTuningJobName: {},
                                        HyperParameterTuningJobArn: {},
                                        HyperParameterTuningJobConfig: {
                                            shape: "Sgn"
                                        },
                                        TrainingJobDefinition: {
                                            shape: "Shg"
                                        },
                                        TrainingJobDefinitions: {
                                            shape: "Shw"
                                        },
                                        HyperParameterTuningJobStatus: {},
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        HyperParameterTuningEndTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        TrainingJobStatusCounters: {
                                            shape: "S11p"
                                        },
                                        ObjectiveStatusCounters: {
                                            shape: "S11r"
                                        },
                                        BestTrainingJob: {
                                            shape: "S11t"
                                        },
                                        OverallBestTrainingJob: {
                                            shape: "S11t"
                                        },
                                        WarmStartConfig: {
                                            shape: "Shx"
                                        },
                                        FailureReason: {},
                                        Tags: {
                                            shape: "S7"
                                        },
                                        TuningJobCompletionDetails: {
                                            shape: "S11w"
                                        },
                                        ConsumedResources: {
                                            shape: "S11x"
                                        }
                                    }
                                },
                                Model: {
                                    type: "structure",
                                    members: {
                                        Model: {
                                            type: "structure",
                                            members: {
                                                ModelName: {},
                                                PrimaryContainer: {
                                                    shape: "Slw"
                                                },
                                                Containers: {
                                                    shape: "Smc"
                                                },
                                                InferenceExecutionConfig: {
                                                    shape: "Smd"
                                                },
                                                ExecutionRoleArn: {},
                                                VpcConfig: {
                                                    shape: "S61"
                                                },
                                                CreationTime: {
                                                    type: "timestamp"
                                                },
                                                ModelArn: {},
                                                EnableNetworkIsolation: {
                                                    type: "boolean"
                                                },
                                                Tags: {
                                                    shape: "S7"
                                                },
                                                DeploymentRecommendation: {
                                                    shape: "S13d"
                                                }
                                            }
                                        },
                                        Endpoints: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "EndpointName", "EndpointArn", "CreationTime", "LastModifiedTime", "EndpointStatus" ],
                                                members: {
                                                    EndpointName: {},
                                                    EndpointArn: {},
                                                    CreationTime: {
                                                        type: "timestamp"
                                                    },
                                                    LastModifiedTime: {
                                                        type: "timestamp"
                                                    },
                                                    EndpointStatus: {}
                                                }
                                            }
                                        },
                                        LastBatchTransformJob: {
                                            shape: "S1ld"
                                        },
                                        MonitoringSchedules: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    MonitoringScheduleArn: {},
                                                    MonitoringScheduleName: {},
                                                    MonitoringScheduleStatus: {},
                                                    MonitoringType: {},
                                                    FailureReason: {},
                                                    CreationTime: {
                                                        type: "timestamp"
                                                    },
                                                    LastModifiedTime: {
                                                        type: "timestamp"
                                                    },
                                                    MonitoringScheduleConfig: {
                                                        shape: "So4"
                                                    },
                                                    EndpointName: {},
                                                    MonitoringAlertSummaries: {
                                                        shape: "S1fm"
                                                    },
                                                    LastMonitoringExecutionSummary: {
                                                        shape: "S147"
                                                    },
                                                    BatchTransformInput: {
                                                        shape: "S9d"
                                                    }
                                                }
                                            }
                                        },
                                        ModelCard: {
                                            type: "structure",
                                            members: {
                                                ModelCardArn: {},
                                                ModelCardName: {},
                                                ModelCardVersion: {
                                                    type: "integer"
                                                },
                                                ModelCardStatus: {},
                                                SecurityConfig: {
                                                    shape: "Smn"
                                                },
                                                CreationTime: {
                                                    type: "timestamp"
                                                },
                                                CreatedBy: {
                                                    shape: "Swf"
                                                },
                                                LastModifiedTime: {
                                                    type: "timestamp"
                                                },
                                                LastModifiedBy: {
                                                    shape: "Swf"
                                                },
                                                Tags: {
                                                    shape: "S7"
                                                },
                                                ModelId: {},
                                                RiskRating: {}
                                            }
                                        }
                                    }
                                },
                                ModelCard: {
                                    type: "structure",
                                    members: {
                                        ModelCardArn: {},
                                        ModelCardName: {},
                                        ModelCardVersion: {
                                            type: "integer"
                                        },
                                        Content: {
                                            shape: "Smo"
                                        },
                                        ModelCardStatus: {},
                                        SecurityConfig: {
                                            shape: "Smn"
                                        },
                                        CreationTime: {
                                            type: "timestamp"
                                        },
                                        CreatedBy: {
                                            shape: "Swf"
                                        },
                                        LastModifiedTime: {
                                            type: "timestamp"
                                        },
                                        LastModifiedBy: {
                                            shape: "Swf"
                                        },
                                        Tags: {
                                            shape: "S7"
                                        },
                                        ModelId: {},
                                        RiskRating: {},
                                        ModelPackageGroupName: {}
                                    }
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        SendPipelineExecutionStepFailure: {
            input: {
                type: "structure",
                required: [ "CallbackToken" ],
                members: {
                    CallbackToken: {},
                    FailureReason: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        SendPipelineExecutionStepSuccess: {
            input: {
                type: "structure",
                required: [ "CallbackToken" ],
                members: {
                    CallbackToken: {},
                    OutputParameters: {
                        shape: "S1h1"
                    },
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        StartEdgeDeploymentStage: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName", "StageName" ],
                members: {
                    EdgeDeploymentPlanName: {},
                    StageName: {}
                }
            }
        },
        StartInferenceExperiment: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceExperimentArn" ],
                members: {
                    InferenceExperimentArn: {}
                }
            }
        },
        StartMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            }
        },
        StartNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            }
        },
        StartPipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineName", "ClientRequestToken" ],
                members: {
                    PipelineName: {},
                    PipelineExecutionDisplayName: {},
                    PipelineParameters: {
                        shape: "S1hi"
                    },
                    PipelineExecutionDescription: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    },
                    ParallelismConfiguration: {
                        shape: "Spa"
                    },
                    SelectiveExecutionConfig: {
                        shape: "S14t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        StopAutoMLJob: {
            input: {
                type: "structure",
                required: [ "AutoMLJobName" ],
                members: {
                    AutoMLJobName: {}
                }
            }
        },
        StopCompilationJob: {
            input: {
                type: "structure",
                required: [ "CompilationJobName" ],
                members: {
                    CompilationJobName: {}
                }
            }
        },
        StopEdgeDeploymentStage: {
            input: {
                type: "structure",
                required: [ "EdgeDeploymentPlanName", "StageName" ],
                members: {
                    EdgeDeploymentPlanName: {},
                    StageName: {}
                }
            }
        },
        StopEdgePackagingJob: {
            input: {
                type: "structure",
                required: [ "EdgePackagingJobName" ],
                members: {
                    EdgePackagingJobName: {}
                }
            }
        },
        StopHyperParameterTuningJob: {
            input: {
                type: "structure",
                required: [ "HyperParameterTuningJobName" ],
                members: {
                    HyperParameterTuningJobName: {}
                }
            }
        },
        StopInferenceExperiment: {
            input: {
                type: "structure",
                required: [ "Name", "ModelVariantActions" ],
                members: {
                    Name: {},
                    ModelVariantActions: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    DesiredModelVariants: {
                        shape: "Sj5"
                    },
                    DesiredState: {},
                    Reason: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceExperimentArn" ],
                members: {
                    InferenceExperimentArn: {}
                }
            }
        },
        StopInferenceRecommendationsJob: {
            input: {
                type: "structure",
                required: [ "JobName" ],
                members: {
                    JobName: {}
                }
            }
        },
        StopLabelingJob: {
            input: {
                type: "structure",
                required: [ "LabelingJobName" ],
                members: {
                    LabelingJobName: {}
                }
            }
        },
        StopMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName" ],
                members: {
                    MonitoringScheduleName: {}
                }
            }
        },
        StopNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {}
                }
            }
        },
        StopPipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn", "ClientRequestToken" ],
                members: {
                    PipelineExecutionArn: {},
                    ClientRequestToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        StopProcessingJob: {
            input: {
                type: "structure",
                required: [ "ProcessingJobName" ],
                members: {
                    ProcessingJobName: {}
                }
            }
        },
        StopTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName" ],
                members: {
                    TrainingJobName: {}
                }
            }
        },
        StopTransformJob: {
            input: {
                type: "structure",
                required: [ "TransformJobName" ],
                members: {
                    TransformJobName: {}
                }
            }
        },
        UpdateAction: {
            input: {
                type: "structure",
                required: [ "ActionName" ],
                members: {
                    ActionName: {},
                    Description: {},
                    Status: {},
                    Properties: {
                        shape: "S1s"
                    },
                    PropertiesToRemove: {
                        shape: "S1mu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ActionArn: {}
                }
            }
        },
        UpdateAppImageConfig: {
            input: {
                type: "structure",
                required: [ "AppImageConfigName" ],
                members: {
                    AppImageConfigName: {},
                    KernelGatewayImageConfig: {
                        shape: "S4s"
                    },
                    JupyterLabAppImageConfig: {
                        shape: "S51"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppImageConfigArn: {}
                }
            }
        },
        UpdateArtifact: {
            input: {
                type: "structure",
                required: [ "ArtifactArn" ],
                members: {
                    ArtifactArn: {},
                    ArtifactName: {},
                    Properties: {
                        shape: "S1s"
                    },
                    PropertiesToRemove: {
                        shape: "S1mu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ArtifactArn: {}
                }
            }
        },
        UpdateCluster: {
            input: {
                type: "structure",
                required: [ "ClusterName", "InstanceGroups" ],
                members: {
                    ClusterName: {},
                    InstanceGroups: {
                        shape: "S7n"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ClusterArn" ],
                members: {
                    ClusterArn: {}
                }
            }
        },
        UpdateCodeRepository: {
            input: {
                type: "structure",
                required: [ "CodeRepositoryName" ],
                members: {
                    CodeRepositoryName: {},
                    GitConfig: {
                        type: "structure",
                        members: {
                            SecretArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CodeRepositoryArn" ],
                members: {
                    CodeRepositoryArn: {}
                }
            }
        },
        UpdateContext: {
            input: {
                type: "structure",
                required: [ "ContextName" ],
                members: {
                    ContextName: {},
                    Description: {},
                    Properties: {
                        shape: "S1s"
                    },
                    PropertiesToRemove: {
                        shape: "S1mu"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ContextArn: {}
                }
            }
        },
        UpdateDeviceFleet: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "OutputConfig" ],
                members: {
                    DeviceFleetName: {},
                    RoleArn: {},
                    Description: {},
                    OutputConfig: {
                        shape: "Sa1"
                    },
                    EnableIotRoleAlias: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateDevices: {
            input: {
                type: "structure",
                required: [ "DeviceFleetName", "Devices" ],
                members: {
                    DeviceFleetName: {},
                    Devices: {
                        shape: "S1kg"
                    }
                }
            }
        },
        UpdateDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    DefaultUserSettings: {
                        shape: "Sa7"
                    },
                    DomainSettingsForUpdate: {
                        type: "structure",
                        members: {
                            RStudioServerProDomainSettingsForUpdate: {
                                type: "structure",
                                required: [ "DomainExecutionRoleArn" ],
                                members: {
                                    DomainExecutionRoleArn: {},
                                    DefaultResourceSpec: {
                                        shape: "S4h"
                                    },
                                    RStudioConnectUrl: {},
                                    RStudioPackageManagerUrl: {}
                                }
                            },
                            ExecutionRoleIdentityConfig: {},
                            SecurityGroupIds: {
                                shape: "Sbi"
                            }
                        }
                    },
                    DefaultSpaceSettings: {
                        shape: "Sbl"
                    },
                    AppSecurityGroupManagement: {},
                    SubnetIds: {
                        shape: "S64"
                    },
                    AppNetworkAccessType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainArn: {}
                }
            }
        },
        UpdateEndpoint: {
            input: {
                type: "structure",
                required: [ "EndpointName", "EndpointConfigName" ],
                members: {
                    EndpointName: {},
                    EndpointConfigName: {},
                    RetainAllVariantProperties: {
                        type: "boolean"
                    },
                    ExcludeRetainedVariantProperties: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "VariantPropertyType" ],
                            members: {
                                VariantPropertyType: {}
                            }
                        }
                    },
                    DeploymentConfig: {
                        shape: "Sc8"
                    },
                    RetainDeploymentConfig: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        UpdateEndpointWeightsAndCapacities: {
            input: {
                type: "structure",
                required: [ "EndpointName", "DesiredWeightsAndCapacities" ],
                members: {
                    EndpointName: {},
                    DesiredWeightsAndCapacities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "VariantName" ],
                            members: {
                                VariantName: {},
                                DesiredWeight: {
                                    type: "float"
                                },
                                DesiredInstanceCount: {
                                    type: "integer"
                                },
                                ServerlessUpdateConfig: {
                                    type: "structure",
                                    members: {
                                        MaxConcurrency: {
                                            type: "integer"
                                        },
                                        ProvisionedConcurrency: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "EndpointArn" ],
                members: {
                    EndpointArn: {}
                }
            }
        },
        UpdateExperiment: {
            input: {
                type: "structure",
                required: [ "ExperimentName" ],
                members: {
                    ExperimentName: {},
                    DisplayName: {},
                    Description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ExperimentArn: {}
                }
            }
        },
        UpdateFeatureGroup: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName" ],
                members: {
                    FeatureGroupName: {},
                    FeatureAdditions: {
                        type: "list",
                        member: {
                            shape: "Sev"
                        }
                    },
                    OnlineStoreConfig: {
                        type: "structure",
                        members: {
                            TtlDuration: {
                                shape: "Sf3"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "FeatureGroupArn" ],
                members: {
                    FeatureGroupArn: {}
                }
            }
        },
        UpdateFeatureMetadata: {
            input: {
                type: "structure",
                required: [ "FeatureGroupName", "FeatureName" ],
                members: {
                    FeatureGroupName: {},
                    FeatureName: {},
                    Description: {},
                    ParameterAdditions: {
                        type: "list",
                        member: {
                            shape: "S10t"
                        }
                    },
                    ParameterRemovals: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        UpdateHub: {
            input: {
                type: "structure",
                required: [ "HubName" ],
                members: {
                    HubName: {},
                    HubDescription: {},
                    HubDisplayName: {},
                    HubSearchKeywords: {
                        shape: "Sga"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "HubArn" ],
                members: {
                    HubArn: {}
                }
            }
        },
        UpdateImage: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    DeleteProperties: {
                        type: "list",
                        member: {}
                    },
                    Description: {},
                    DisplayName: {},
                    ImageName: {},
                    RoleArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageArn: {}
                }
            }
        },
        UpdateImageVersion: {
            input: {
                type: "structure",
                required: [ "ImageName" ],
                members: {
                    ImageName: {},
                    Alias: {},
                    Version: {
                        type: "integer"
                    },
                    AliasesToAdd: {
                        shape: "Sic"
                    },
                    AliasesToDelete: {
                        shape: "Sic"
                    },
                    VendorGuidance: {},
                    JobType: {},
                    MLFramework: {},
                    ProgrammingLang: {},
                    Processor: {},
                    Horovod: {
                        type: "boolean"
                    },
                    ReleaseNotes: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ImageVersionArn: {}
                }
            }
        },
        UpdateInferenceComponent: {
            input: {
                type: "structure",
                required: [ "InferenceComponentName" ],
                members: {
                    InferenceComponentName: {},
                    Specification: {
                        shape: "Sio"
                    },
                    RuntimeConfig: {
                        shape: "Siv"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceComponentArn" ],
                members: {
                    InferenceComponentArn: {}
                }
            }
        },
        UpdateInferenceComponentRuntimeConfig: {
            input: {
                type: "structure",
                required: [ "InferenceComponentName", "DesiredRuntimeConfig" ],
                members: {
                    InferenceComponentName: {},
                    DesiredRuntimeConfig: {
                        shape: "Siv"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceComponentArn" ],
                members: {
                    InferenceComponentArn: {}
                }
            }
        },
        UpdateInferenceExperiment: {
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Schedule: {
                        shape: "Sj2"
                    },
                    Description: {},
                    ModelVariants: {
                        shape: "Sj5"
                    },
                    DataStorageConfig: {
                        shape: "Sjd"
                    },
                    ShadowModeConfig: {
                        shape: "Sje"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "InferenceExperimentArn" ],
                members: {
                    InferenceExperimentArn: {}
                }
            }
        },
        UpdateModelCard: {
            input: {
                type: "structure",
                required: [ "ModelCardName" ],
                members: {
                    ModelCardName: {},
                    Content: {
                        shape: "Smo"
                    },
                    ModelCardStatus: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ModelCardArn" ],
                members: {
                    ModelCardArn: {}
                }
            }
        },
        UpdateModelPackage: {
            input: {
                type: "structure",
                required: [ "ModelPackageArn" ],
                members: {
                    ModelPackageArn: {},
                    ModelApprovalStatus: {},
                    ApprovalDescription: {},
                    CustomerMetadataProperties: {
                        shape: "Sng"
                    },
                    CustomerMetadataPropertiesToRemove: {
                        type: "list",
                        member: {}
                    },
                    AdditionalInferenceSpecificationsToAdd: {
                        shape: "Snp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ModelPackageArn" ],
                members: {
                    ModelPackageArn: {}
                }
            }
        },
        UpdateMonitoringAlert: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName", "MonitoringAlertName", "DatapointsToAlert", "EvaluationPeriod" ],
                members: {
                    MonitoringScheduleName: {},
                    MonitoringAlertName: {},
                    DatapointsToAlert: {
                        type: "integer"
                    },
                    EvaluationPeriod: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn" ],
                members: {
                    MonitoringScheduleArn: {},
                    MonitoringAlertName: {}
                }
            }
        },
        UpdateMonitoringSchedule: {
            input: {
                type: "structure",
                required: [ "MonitoringScheduleName", "MonitoringScheduleConfig" ],
                members: {
                    MonitoringScheduleName: {},
                    MonitoringScheduleConfig: {
                        shape: "So4"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "MonitoringScheduleArn" ],
                members: {
                    MonitoringScheduleArn: {}
                }
            }
        },
        UpdateNotebookInstance: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceName" ],
                members: {
                    NotebookInstanceName: {},
                    InstanceType: {},
                    RoleArn: {},
                    LifecycleConfigName: {},
                    DisassociateLifecycleConfig: {
                        type: "boolean"
                    },
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    DefaultCodeRepository: {},
                    AdditionalCodeRepositories: {
                        shape: "Soo"
                    },
                    AcceleratorTypes: {
                        shape: "Sol"
                    },
                    DisassociateAcceleratorTypes: {
                        type: "boolean"
                    },
                    DisassociateDefaultCodeRepository: {
                        type: "boolean"
                    },
                    DisassociateAdditionalCodeRepositories: {
                        type: "boolean"
                    },
                    RootAccess: {},
                    InstanceMetadataServiceConfiguration: {
                        shape: "Sor"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNotebookInstanceLifecycleConfig: {
            input: {
                type: "structure",
                required: [ "NotebookInstanceLifecycleConfigName" ],
                members: {
                    NotebookInstanceLifecycleConfigName: {},
                    OnCreate: {
                        shape: "Sow"
                    },
                    OnStart: {
                        shape: "Sow"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdatePipeline: {
            input: {
                type: "structure",
                required: [ "PipelineName" ],
                members: {
                    PipelineName: {},
                    PipelineDisplayName: {},
                    PipelineDefinition: {},
                    PipelineDefinitionS3Location: {
                        shape: "Sp4"
                    },
                    PipelineDescription: {},
                    RoleArn: {},
                    ParallelismConfiguration: {
                        shape: "Spa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineArn: {}
                }
            }
        },
        UpdatePipelineExecution: {
            input: {
                type: "structure",
                required: [ "PipelineExecutionArn" ],
                members: {
                    PipelineExecutionArn: {},
                    PipelineExecutionDescription: {},
                    PipelineExecutionDisplayName: {},
                    ParallelismConfiguration: {
                        shape: "Spa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PipelineExecutionArn: {}
                }
            }
        },
        UpdateProject: {
            input: {
                type: "structure",
                required: [ "ProjectName" ],
                members: {
                    ProjectName: {},
                    ProjectDescription: {},
                    ServiceCatalogProvisioningUpdateDetails: {
                        type: "structure",
                        members: {
                            ProvisioningArtifactId: {},
                            ProvisioningParameters: {
                                shape: "Sqt"
                            }
                        }
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ProjectArn" ],
                members: {
                    ProjectArn: {}
                }
            }
        },
        UpdateSpace: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpaceName" ],
                members: {
                    DomainId: {},
                    SpaceName: {},
                    SpaceSettings: {
                        shape: "Sr1"
                    },
                    SpaceDisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    SpaceArn: {}
                }
            }
        },
        UpdateTrainingJob: {
            input: {
                type: "structure",
                required: [ "TrainingJobName" ],
                members: {
                    TrainingJobName: {},
                    ProfilerConfig: {
                        type: "structure",
                        members: {
                            S3OutputPath: {},
                            ProfilingIntervalInMilliseconds: {
                                type: "long"
                            },
                            ProfilingParameters: {
                                shape: "Ss9"
                            },
                            DisableProfiler: {
                                type: "boolean"
                            }
                        }
                    },
                    ProfilerRuleConfigurations: {
                        shape: "Ssb"
                    },
                    ResourceConfig: {
                        type: "structure",
                        required: [ "KeepAlivePeriodInSeconds" ],
                        members: {
                            KeepAlivePeriodInSeconds: {
                                type: "integer"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "TrainingJobArn" ],
                members: {
                    TrainingJobArn: {}
                }
            }
        },
        UpdateTrial: {
            input: {
                type: "structure",
                required: [ "TrialName" ],
                members: {
                    TrialName: {},
                    DisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialArn: {}
                }
            }
        },
        UpdateTrialComponent: {
            input: {
                type: "structure",
                required: [ "TrialComponentName" ],
                members: {
                    TrialComponentName: {},
                    DisplayName: {},
                    Status: {
                        shape: "Ssy"
                    },
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    Parameters: {
                        shape: "St1"
                    },
                    ParametersToRemove: {
                        shape: "S1p7"
                    },
                    InputArtifacts: {
                        shape: "St5"
                    },
                    InputArtifactsToRemove: {
                        shape: "S1p7"
                    },
                    OutputArtifacts: {
                        shape: "St5"
                    },
                    OutputArtifactsToRemove: {
                        shape: "S1p7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TrialComponentArn: {}
                }
            }
        },
        UpdateUserProfile: {
            input: {
                type: "structure",
                required: [ "DomainId", "UserProfileName" ],
                members: {
                    DomainId: {},
                    UserProfileName: {},
                    UserSettings: {
                        shape: "Sa7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    UserProfileArn: {}
                }
            }
        },
        UpdateWorkforce: {
            input: {
                type: "structure",
                required: [ "WorkforceName" ],
                members: {
                    WorkforceName: {},
                    SourceIpConfig: {
                        shape: "Stm"
                    },
                    OidcConfig: {
                        shape: "Stj"
                    },
                    WorkforceVpcConfig: {
                        shape: "Stq"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workforce" ],
                members: {
                    Workforce: {
                        shape: "S16j"
                    }
                }
            }
        },
        UpdateWorkteam: {
            input: {
                type: "structure",
                required: [ "WorkteamName" ],
                members: {
                    WorkteamName: {},
                    MemberDefinitions: {
                        shape: "Su0"
                    },
                    Description: {},
                    NotificationConfiguration: {
                        shape: "Su8"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Workteam" ],
                members: {
                    Workteam: {
                        shape: "S16r"
                    }
                }
            }
        }
    },
    shapes: {
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "Containers" ],
            members: {
                Containers: {
                    shape: "Ss"
                },
                SupportedTransformInstanceTypes: {
                    shape: "S1a"
                },
                SupportedRealtimeInferenceInstanceTypes: {
                    shape: "S1c"
                },
                SupportedContentTypes: {
                    shape: "S1e"
                },
                SupportedResponseMIMETypes: {
                    shape: "S1g"
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Image" ],
                members: {
                    ContainerHostname: {},
                    Image: {},
                    ImageDigest: {},
                    ModelDataUrl: {},
                    ProductId: {},
                    Environment: {
                        shape: "Sz"
                    },
                    ModelInput: {
                        type: "structure",
                        required: [ "DataInputConfig" ],
                        members: {
                            DataInputConfig: {}
                        }
                    },
                    Framework: {},
                    FrameworkVersion: {},
                    NearestModelName: {},
                    AdditionalS3DataSource: {
                        shape: "S16"
                    }
                }
            }
        },
        Sz: {
            type: "map",
            key: {},
            value: {}
        },
        S16: {
            type: "structure",
            required: [ "S3DataType", "S3Uri" ],
            members: {
                S3DataType: {},
                S3Uri: {},
                CompressionType: {}
            }
        },
        S1a: {
            type: "list",
            member: {}
        },
        S1c: {
            type: "list",
            member: {}
        },
        S1e: {
            type: "list",
            member: {}
        },
        S1g: {
            type: "list",
            member: {}
        },
        S1n: {
            type: "structure",
            required: [ "SourceUri" ],
            members: {
                SourceUri: {},
                SourceType: {},
                SourceId: {}
            }
        },
        S1s: {
            type: "map",
            key: {},
            value: {}
        },
        S1u: {
            type: "structure",
            members: {
                CommitId: {},
                Repository: {},
                GeneratedBy: {},
                ProjectId: {}
            }
        },
        S1z: {
            type: "structure",
            required: [ "TrainingImage", "SupportedTrainingInstanceTypes", "TrainingChannels" ],
            members: {
                TrainingImage: {},
                TrainingImageDigest: {},
                SupportedHyperParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Type" ],
                        members: {
                            Name: {},
                            Description: {},
                            Type: {},
                            Range: {
                                type: "structure",
                                members: {
                                    IntegerParameterRangeSpecification: {
                                        type: "structure",
                                        required: [ "MinValue", "MaxValue" ],
                                        members: {
                                            MinValue: {},
                                            MaxValue: {}
                                        }
                                    },
                                    ContinuousParameterRangeSpecification: {
                                        type: "structure",
                                        required: [ "MinValue", "MaxValue" ],
                                        members: {
                                            MinValue: {},
                                            MaxValue: {}
                                        }
                                    },
                                    CategoricalParameterRangeSpecification: {
                                        type: "structure",
                                        required: [ "Values" ],
                                        members: {
                                            Values: {
                                                shape: "S29"
                                            }
                                        }
                                    }
                                }
                            },
                            IsTunable: {
                                type: "boolean"
                            },
                            IsRequired: {
                                type: "boolean"
                            },
                            DefaultValue: {}
                        }
                    }
                },
                SupportedTrainingInstanceTypes: {
                    type: "list",
                    member: {}
                },
                SupportsDistributedTraining: {
                    type: "boolean"
                },
                MetricDefinitions: {
                    shape: "S2e"
                },
                TrainingChannels: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "SupportedContentTypes", "SupportedInputModes" ],
                        members: {
                            Name: {},
                            Description: {},
                            IsRequired: {
                                type: "boolean"
                            },
                            SupportedContentTypes: {
                                shape: "S1e"
                            },
                            SupportedCompressionTypes: {
                                type: "list",
                                member: {}
                            },
                            SupportedInputModes: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                },
                SupportedTuningJobObjectiveMetrics: {
                    type: "list",
                    member: {
                        shape: "S2p"
                    }
                },
                AdditionalS3DataSource: {
                    shape: "S16"
                }
            }
        },
        S29: {
            type: "list",
            member: {}
        },
        S2e: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Regex" ],
                members: {
                    Name: {},
                    Regex: {}
                }
            }
        },
        S2p: {
            type: "structure",
            required: [ "Type", "MetricName" ],
            members: {
                Type: {},
                MetricName: {}
            }
        },
        S2r: {
            type: "structure",
            required: [ "ValidationRole", "ValidationProfiles" ],
            members: {
                ValidationRole: {},
                ValidationProfiles: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ProfileName", "TrainingJobDefinition" ],
                        members: {
                            ProfileName: {},
                            TrainingJobDefinition: {
                                type: "structure",
                                required: [ "TrainingInputMode", "InputDataConfig", "OutputDataConfig", "ResourceConfig", "StoppingCondition" ],
                                members: {
                                    TrainingInputMode: {},
                                    HyperParameters: {
                                        shape: "S2w"
                                    },
                                    InputDataConfig: {
                                        shape: "S2y"
                                    },
                                    OutputDataConfig: {
                                        shape: "S3g"
                                    },
                                    ResourceConfig: {
                                        shape: "S3j"
                                    },
                                    StoppingCondition: {
                                        shape: "S3p"
                                    }
                                }
                            },
                            TransformJobDefinition: {
                                shape: "S3t"
                            }
                        }
                    }
                }
            }
        },
        S2w: {
            type: "map",
            key: {},
            value: {}
        },
        S2y: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ChannelName", "DataSource" ],
                members: {
                    ChannelName: {},
                    DataSource: {
                        type: "structure",
                        members: {
                            S3DataSource: {
                                type: "structure",
                                required: [ "S3DataType", "S3Uri" ],
                                members: {
                                    S3DataType: {},
                                    S3Uri: {},
                                    S3DataDistributionType: {},
                                    AttributeNames: {
                                        type: "list",
                                        member: {}
                                    },
                                    InstanceGroupNames: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            FileSystemDataSource: {
                                type: "structure",
                                required: [ "FileSystemId", "FileSystemAccessMode", "FileSystemType", "DirectoryPath" ],
                                members: {
                                    FileSystemId: {},
                                    FileSystemAccessMode: {},
                                    FileSystemType: {},
                                    DirectoryPath: {}
                                }
                            }
                        }
                    },
                    ContentType: {},
                    CompressionType: {},
                    RecordWrapperType: {},
                    InputMode: {},
                    ShuffleConfig: {
                        type: "structure",
                        required: [ "Seed" ],
                        members: {
                            Seed: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S3g: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                KmsKeyId: {},
                S3OutputPath: {},
                CompressionType: {}
            }
        },
        S3j: {
            type: "structure",
            required: [ "VolumeSizeInGB" ],
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                VolumeSizeInGB: {
                    type: "integer"
                },
                VolumeKmsKeyId: {},
                InstanceGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "InstanceType", "InstanceCount", "InstanceGroupName" ],
                        members: {
                            InstanceType: {},
                            InstanceCount: {
                                type: "integer"
                            },
                            InstanceGroupName: {}
                        }
                    }
                },
                KeepAlivePeriodInSeconds: {
                    type: "integer"
                }
            }
        },
        S3p: {
            type: "structure",
            members: {
                MaxRuntimeInSeconds: {
                    type: "integer"
                },
                MaxWaitTimeInSeconds: {
                    type: "integer"
                },
                MaxPendingTimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S3t: {
            type: "structure",
            required: [ "TransformInput", "TransformOutput", "TransformResources" ],
            members: {
                MaxConcurrentTransforms: {
                    type: "integer"
                },
                MaxPayloadInMB: {
                    type: "integer"
                },
                BatchStrategy: {},
                Environment: {
                    shape: "S3x"
                },
                TransformInput: {
                    shape: "S40"
                },
                TransformOutput: {
                    shape: "S44"
                },
                TransformResources: {
                    shape: "S47"
                }
            }
        },
        S3x: {
            type: "map",
            key: {},
            value: {}
        },
        S40: {
            type: "structure",
            required: [ "DataSource" ],
            members: {
                DataSource: {
                    type: "structure",
                    required: [ "S3DataSource" ],
                    members: {
                        S3DataSource: {
                            type: "structure",
                            required: [ "S3DataType", "S3Uri" ],
                            members: {
                                S3DataType: {},
                                S3Uri: {}
                            }
                        }
                    }
                },
                ContentType: {},
                CompressionType: {},
                SplitType: {}
            }
        },
        S44: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                Accept: {},
                AssembleWith: {},
                KmsKeyId: {}
            }
        },
        S47: {
            type: "structure",
            required: [ "InstanceType", "InstanceCount" ],
            members: {
                InstanceType: {},
                InstanceCount: {
                    type: "integer"
                },
                VolumeKmsKeyId: {}
            }
        },
        S4h: {
            type: "structure",
            members: {
                SageMakerImageArn: {},
                SageMakerImageVersionArn: {},
                SageMakerImageVersionAlias: {},
                InstanceType: {},
                LifecycleConfigArn: {}
            }
        },
        S4s: {
            type: "structure",
            required: [ "KernelSpecs" ],
            members: {
                KernelSpecs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name" ],
                        members: {
                            Name: {},
                            DisplayName: {}
                        }
                    }
                },
                FileSystemConfig: {
                    type: "structure",
                    members: {
                        MountPath: {},
                        DefaultUid: {
                            type: "integer"
                        },
                        DefaultGid: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S51: {
            type: "structure",
            members: {
                ContainerConfig: {
                    type: "structure",
                    members: {
                        ContainerArguments: {
                            type: "list",
                            member: {}
                        },
                        ContainerEntrypoint: {
                            type: "list",
                            member: {}
                        },
                        ContainerEnvironmentVariables: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                }
            }
        },
        S5b: {
            type: "structure",
            required: [ "SourceUri" ],
            members: {
                SourceUri: {},
                SourceTypes: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "SourceIdType", "Value" ],
                        members: {
                            SourceIdType: {},
                            Value: {}
                        }
                    }
                }
            }
        },
        S5j: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DataSource", "TargetAttributeName" ],
                members: {
                    DataSource: {
                        shape: "S5l"
                    },
                    CompressionType: {},
                    TargetAttributeName: {},
                    ContentType: {},
                    ChannelType: {},
                    SampleWeightAttributeName: {}
                }
            }
        },
        S5l: {
            type: "structure",
            required: [ "S3DataSource" ],
            members: {
                S3DataSource: {
                    type: "structure",
                    required: [ "S3DataType", "S3Uri" ],
                    members: {
                        S3DataType: {},
                        S3Uri: {}
                    }
                }
            }
        },
        S5r: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                KmsKeyId: {},
                S3OutputPath: {}
            }
        },
        S5t: {
            type: "structure",
            required: [ "MetricName" ],
            members: {
                MetricName: {}
            }
        },
        S5v: {
            type: "structure",
            members: {
                CompletionCriteria: {
                    shape: "S5w"
                },
                SecurityConfig: {
                    shape: "S60"
                },
                DataSplitConfig: {
                    shape: "S66"
                },
                CandidateGenerationConfig: {
                    type: "structure",
                    members: {
                        FeatureSpecificationS3Uri: {},
                        AlgorithmsConfig: {
                            shape: "S69"
                        }
                    }
                },
                Mode: {}
            }
        },
        S5w: {
            type: "structure",
            members: {
                MaxCandidates: {
                    type: "integer"
                },
                MaxRuntimePerTrainingJobInSeconds: {
                    type: "integer"
                },
                MaxAutoMLJobRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S60: {
            type: "structure",
            members: {
                VolumeKmsKeyId: {},
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                VpcConfig: {
                    shape: "S61"
                }
            }
        },
        S61: {
            type: "structure",
            required: [ "SecurityGroupIds", "Subnets" ],
            members: {
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                Subnets: {
                    shape: "S64"
                }
            }
        },
        S64: {
            type: "list",
            member: {}
        },
        S66: {
            type: "structure",
            members: {
                ValidationFraction: {
                    type: "float"
                }
            }
        },
        S69: {
            type: "list",
            member: {
                type: "structure",
                required: [ "AutoMLAlgorithms" ],
                members: {
                    AutoMLAlgorithms: {
                        type: "list",
                        member: {}
                    }
                }
            }
        },
        S6f: {
            type: "structure",
            members: {
                AutoGenerateEndpointName: {
                    type: "boolean"
                },
                EndpointName: {}
            }
        },
        S6l: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ChannelType: {},
                    ContentType: {},
                    CompressionType: {},
                    DataSource: {
                        shape: "S5l"
                    }
                }
            }
        },
        S6n: {
            type: "structure",
            members: {
                ImageClassificationJobConfig: {
                    type: "structure",
                    members: {
                        CompletionCriteria: {
                            shape: "S5w"
                        }
                    }
                },
                TextClassificationJobConfig: {
                    type: "structure",
                    required: [ "ContentColumn", "TargetLabelColumn" ],
                    members: {
                        CompletionCriteria: {
                            shape: "S5w"
                        },
                        ContentColumn: {},
                        TargetLabelColumn: {}
                    }
                },
                TabularJobConfig: {
                    type: "structure",
                    required: [ "TargetAttributeName" ],
                    members: {
                        CandidateGenerationConfig: {
                            type: "structure",
                            members: {
                                AlgorithmsConfig: {
                                    shape: "S69"
                                }
                            }
                        },
                        CompletionCriteria: {
                            shape: "S5w"
                        },
                        FeatureSpecificationS3Uri: {},
                        Mode: {},
                        GenerateCandidateDefinitionsOnly: {
                            type: "boolean"
                        },
                        ProblemType: {},
                        TargetAttributeName: {},
                        SampleWeightAttributeName: {}
                    }
                },
                TimeSeriesForecastingJobConfig: {
                    type: "structure",
                    required: [ "ForecastFrequency", "ForecastHorizon", "TimeSeriesConfig" ],
                    members: {
                        FeatureSpecificationS3Uri: {},
                        CompletionCriteria: {
                            shape: "S5w"
                        },
                        ForecastFrequency: {},
                        ForecastHorizon: {
                            type: "integer"
                        },
                        ForecastQuantiles: {
                            type: "list",
                            member: {}
                        },
                        Transformations: {
                            type: "structure",
                            members: {
                                Filling: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "map",
                                        key: {},
                                        value: {}
                                    }
                                },
                                Aggregation: {
                                    type: "map",
                                    key: {},
                                    value: {}
                                }
                            }
                        },
                        TimeSeriesConfig: {
                            type: "structure",
                            required: [ "TargetAttributeName", "TimestampAttributeName", "ItemIdentifierAttributeName" ],
                            members: {
                                TargetAttributeName: {},
                                TimestampAttributeName: {},
                                ItemIdentifierAttributeName: {},
                                GroupingAttributeNames: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        HolidayConfig: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    CountryCode: {}
                                }
                            }
                        }
                    }
                },
                TextGenerationJobConfig: {
                    type: "structure",
                    members: {
                        CompletionCriteria: {
                            shape: "S5w"
                        },
                        BaseModelName: {},
                        TextGenerationHyperParameters: {
                            type: "map",
                            key: {},
                            value: {}
                        }
                    }
                }
            },
            union: true
        },
        S7n: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InstanceCount", "InstanceGroupName", "InstanceType", "LifeCycleConfig", "ExecutionRole" ],
                members: {
                    InstanceCount: {
                        type: "integer"
                    },
                    InstanceGroupName: {},
                    InstanceType: {},
                    LifeCycleConfig: {
                        shape: "S7s"
                    },
                    ExecutionRole: {},
                    ThreadsPerCore: {
                        type: "integer"
                    }
                }
            }
        },
        S7s: {
            type: "structure",
            required: [ "SourceS3Uri", "OnCreate" ],
            members: {
                SourceS3Uri: {},
                OnCreate: {}
            }
        },
        S7y: {
            type: "structure",
            required: [ "RepositoryUrl" ],
            members: {
                RepositoryUrl: {},
                Branch: {},
                SecretArn: {}
            }
        },
        S85: {
            type: "structure",
            required: [ "S3Uri", "Framework" ],
            members: {
                S3Uri: {},
                DataInputConfig: {},
                Framework: {},
                FrameworkVersion: {}
            }
        },
        S88: {
            type: "structure",
            required: [ "S3OutputLocation" ],
            members: {
                S3OutputLocation: {},
                TargetDevice: {},
                TargetPlatform: {
                    type: "structure",
                    required: [ "Os", "Arch" ],
                    members: {
                        Os: {},
                        Arch: {},
                        Accelerator: {}
                    }
                },
                CompilerOptions: {},
                KmsKeyId: {}
            }
        },
        S8f: {
            type: "structure",
            required: [ "SecurityGroupIds", "Subnets" ],
            members: {
                SecurityGroupIds: {
                    type: "list",
                    member: {}
                },
                Subnets: {
                    type: "list",
                    member: {}
                }
            }
        },
        S8n: {
            type: "structure",
            required: [ "SourceUri" ],
            members: {
                SourceUri: {},
                SourceType: {},
                SourceId: {}
            }
        },
        S8s: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S8u"
                },
                StatisticsResource: {
                    shape: "S8v"
                }
            }
        },
        S8u: {
            type: "structure",
            members: {
                S3Uri: {}
            }
        },
        S8v: {
            type: "structure",
            members: {
                S3Uri: {}
            }
        },
        S8w: {
            type: "structure",
            required: [ "ImageUri" ],
            members: {
                ImageUri: {},
                ContainerEntrypoint: {
                    shape: "S8y"
                },
                ContainerArguments: {
                    shape: "S90"
                },
                RecordPreprocessorSourceUri: {},
                PostAnalyticsProcessorSourceUri: {},
                Environment: {
                    shape: "S92"
                }
            }
        },
        S8y: {
            type: "list",
            member: {}
        },
        S90: {
            type: "list",
            member: {}
        },
        S92: {
            type: "map",
            key: {},
            value: {}
        },
        S95: {
            type: "structure",
            members: {
                EndpointInput: {
                    shape: "S96"
                },
                BatchTransformInput: {
                    shape: "S9d"
                }
            }
        },
        S96: {
            type: "structure",
            required: [ "EndpointName", "LocalPath" ],
            members: {
                EndpointName: {},
                LocalPath: {},
                S3InputMode: {},
                S3DataDistributionType: {},
                FeaturesAttribute: {},
                InferenceAttribute: {},
                ProbabilityAttribute: {},
                ProbabilityThresholdAttribute: {
                    type: "double"
                },
                StartTimeOffset: {},
                EndTimeOffset: {},
                ExcludeFeaturesAttribute: {}
            }
        },
        S9d: {
            type: "structure",
            required: [ "DataCapturedDestinationS3Uri", "DatasetFormat", "LocalPath" ],
            members: {
                DataCapturedDestinationS3Uri: {},
                DatasetFormat: {
                    type: "structure",
                    members: {
                        Csv: {
                            type: "structure",
                            members: {
                                Header: {
                                    type: "boolean"
                                }
                            }
                        },
                        Json: {
                            type: "structure",
                            members: {
                                Line: {
                                    type: "boolean"
                                }
                            }
                        },
                        Parquet: {
                            type: "structure",
                            members: {}
                        }
                    }
                },
                LocalPath: {},
                S3InputMode: {},
                S3DataDistributionType: {},
                FeaturesAttribute: {},
                InferenceAttribute: {},
                ProbabilityAttribute: {},
                ProbabilityThresholdAttribute: {
                    type: "double"
                },
                StartTimeOffset: {},
                EndTimeOffset: {},
                ExcludeFeaturesAttribute: {}
            }
        },
        S9j: {
            type: "structure",
            required: [ "MonitoringOutputs" ],
            members: {
                MonitoringOutputs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "S3Output" ],
                        members: {
                            S3Output: {
                                type: "structure",
                                required: [ "S3Uri", "LocalPath" ],
                                members: {
                                    S3Uri: {},
                                    LocalPath: {},
                                    S3UploadMode: {}
                                }
                            }
                        }
                    }
                },
                KmsKeyId: {}
            }
        },
        S9p: {
            type: "structure",
            required: [ "ClusterConfig" ],
            members: {
                ClusterConfig: {
                    type: "structure",
                    required: [ "InstanceCount", "InstanceType", "VolumeSizeInGB" ],
                    members: {
                        InstanceCount: {
                            type: "integer"
                        },
                        InstanceType: {},
                        VolumeSizeInGB: {
                            type: "integer"
                        },
                        VolumeKmsKeyId: {}
                    }
                }
            }
        },
        S9u: {
            type: "structure",
            members: {
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                VpcConfig: {
                    shape: "S61"
                }
            }
        },
        S9v: {
            type: "structure",
            required: [ "MaxRuntimeInSeconds" ],
            members: {
                MaxRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        Sa1: {
            type: "structure",
            required: [ "S3OutputLocation" ],
            members: {
                S3OutputLocation: {},
                KmsKeyId: {},
                PresetDeploymentType: {},
                PresetDeploymentConfig: {}
            }
        },
        Sa7: {
            type: "structure",
            members: {
                ExecutionRole: {},
                SecurityGroups: {
                    shape: "Sa8"
                },
                SharingSettings: {
                    type: "structure",
                    members: {
                        NotebookOutputOption: {},
                        S3OutputPath: {},
                        S3KmsKeyId: {}
                    }
                },
                JupyterServerAppSettings: {
                    shape: "Sab"
                },
                KernelGatewayAppSettings: {
                    shape: "Sag"
                },
                TensorBoardAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S4h"
                        }
                    }
                },
                RStudioServerProAppSettings: {
                    type: "structure",
                    members: {
                        AccessStatus: {},
                        UserGroup: {}
                    }
                },
                RSessionAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S4h"
                        },
                        CustomImages: {
                            shape: "Sah"
                        }
                    }
                },
                CanvasAppSettings: {
                    type: "structure",
                    members: {
                        TimeSeriesForecastingSettings: {
                            type: "structure",
                            members: {
                                Status: {},
                                AmazonForecastRoleArn: {}
                            }
                        },
                        ModelRegisterSettings: {
                            type: "structure",
                            members: {
                                Status: {},
                                CrossAccountModelRegisterRoleArn: {}
                            }
                        },
                        WorkspaceSettings: {
                            type: "structure",
                            members: {
                                S3ArtifactPath: {},
                                S3KmsKeyId: {}
                            }
                        },
                        IdentityProviderOAuthSettings: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    DataSourceName: {},
                                    Status: {},
                                    SecretArn: {}
                                }
                            }
                        },
                        KendraSettings: {
                            type: "structure",
                            members: {
                                Status: {}
                            }
                        },
                        DirectDeploySettings: {
                            type: "structure",
                            members: {
                                Status: {}
                            }
                        }
                    }
                },
                JupyterLabAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S4h"
                        },
                        CustomImages: {
                            shape: "Sah"
                        },
                        LifecycleConfigArns: {
                            shape: "Sac"
                        },
                        CodeRepositories: {
                            shape: "Sad"
                        }
                    }
                },
                CodeEditorAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S4h"
                        },
                        LifecycleConfigArns: {
                            shape: "Sac"
                        }
                    }
                },
                SpaceStorageSettings: {
                    type: "structure",
                    members: {
                        DefaultEbsStorageSettings: {
                            type: "structure",
                            required: [ "DefaultEbsVolumeSizeInGb", "MaximumEbsVolumeSizeInGb" ],
                            members: {
                                DefaultEbsVolumeSizeInGb: {
                                    type: "integer"
                                },
                                MaximumEbsVolumeSizeInGb: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                DefaultLandingUri: {},
                StudioWebPortal: {},
                CustomPosixUserConfig: {
                    type: "structure",
                    required: [ "Uid", "Gid" ],
                    members: {
                        Uid: {
                            type: "long"
                        },
                        Gid: {
                            type: "long"
                        }
                    }
                },
                CustomFileSystemConfigs: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EFSFileSystemConfig: {
                                type: "structure",
                                required: [ "FileSystemId" ],
                                members: {
                                    FileSystemId: {},
                                    FileSystemPath: {}
                                }
                            }
                        },
                        union: true
                    }
                }
            }
        },
        Sa8: {
            type: "list",
            member: {}
        },
        Sab: {
            type: "structure",
            members: {
                DefaultResourceSpec: {
                    shape: "S4h"
                },
                LifecycleConfigArns: {
                    shape: "Sac"
                },
                CodeRepositories: {
                    shape: "Sad"
                }
            }
        },
        Sac: {
            type: "list",
            member: {}
        },
        Sad: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RepositoryUrl" ],
                members: {
                    RepositoryUrl: {}
                }
            }
        },
        Sag: {
            type: "structure",
            members: {
                DefaultResourceSpec: {
                    shape: "S4h"
                },
                CustomImages: {
                    shape: "Sah"
                },
                LifecycleConfigArns: {
                    shape: "Sac"
                }
            }
        },
        Sah: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ImageName", "AppImageConfigName" ],
                members: {
                    ImageName: {},
                    ImageVersionNumber: {
                        type: "integer"
                    },
                    AppImageConfigName: {}
                }
            }
        },
        Sbh: {
            type: "structure",
            members: {
                SecurityGroupIds: {
                    shape: "Sbi"
                },
                RStudioServerProDomainSettings: {
                    type: "structure",
                    required: [ "DomainExecutionRoleArn" ],
                    members: {
                        DomainExecutionRoleArn: {},
                        RStudioConnectUrl: {},
                        RStudioPackageManagerUrl: {},
                        DefaultResourceSpec: {
                            shape: "S4h"
                        }
                    }
                },
                ExecutionRoleIdentityConfig: {}
            }
        },
        Sbi: {
            type: "list",
            member: {}
        },
        Sbl: {
            type: "structure",
            members: {
                ExecutionRole: {},
                SecurityGroups: {
                    shape: "Sa8"
                },
                JupyterServerAppSettings: {
                    shape: "Sab"
                },
                KernelGatewayAppSettings: {
                    shape: "Sag"
                }
            }
        },
        Sbq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ModelHandle", "EdgePackagingJobName" ],
                members: {
                    ModelHandle: {},
                    EdgePackagingJobName: {}
                }
            }
        },
        Sbs: {
            type: "list",
            member: {
                type: "structure",
                required: [ "StageName", "DeviceSelectionConfig" ],
                members: {
                    StageName: {},
                    DeviceSelectionConfig: {
                        shape: "Sbu"
                    },
                    DeploymentConfig: {
                        shape: "Sbz"
                    }
                }
            }
        },
        Sbu: {
            type: "structure",
            required: [ "DeviceSubsetType" ],
            members: {
                DeviceSubsetType: {},
                Percentage: {
                    type: "integer"
                },
                DeviceNames: {
                    shape: "Sbx"
                },
                DeviceNameContains: {}
            }
        },
        Sbx: {
            type: "list",
            member: {}
        },
        Sbz: {
            type: "structure",
            required: [ "FailureHandlingPolicy" ],
            members: {
                FailureHandlingPolicy: {}
            }
        },
        Sc8: {
            type: "structure",
            members: {
                BlueGreenUpdatePolicy: {
                    type: "structure",
                    required: [ "TrafficRoutingConfiguration" ],
                    members: {
                        TrafficRoutingConfiguration: {
                            type: "structure",
                            required: [ "Type", "WaitIntervalInSeconds" ],
                            members: {
                                Type: {},
                                WaitIntervalInSeconds: {
                                    type: "integer"
                                },
                                CanarySize: {
                                    shape: "Scd"
                                },
                                LinearStepSize: {
                                    shape: "Scd"
                                }
                            }
                        },
                        TerminationWaitInSeconds: {
                            type: "integer"
                        },
                        MaximumExecutionTimeoutInSeconds: {
                            type: "integer"
                        }
                    }
                },
                AutoRollbackConfiguration: {
                    type: "structure",
                    members: {
                        Alarms: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    AlarmName: {}
                                }
                            }
                        }
                    }
                },
                RollingUpdatePolicy: {
                    type: "structure",
                    required: [ "MaximumBatchSize", "WaitIntervalInSeconds" ],
                    members: {
                        MaximumBatchSize: {
                            shape: "Scd"
                        },
                        WaitIntervalInSeconds: {
                            type: "integer"
                        },
                        MaximumExecutionTimeoutInSeconds: {
                            type: "integer"
                        },
                        RollbackMaximumBatchSize: {
                            shape: "Scd"
                        }
                    }
                }
            }
        },
        Scd: {
            type: "structure",
            required: [ "Type", "Value" ],
            members: {
                Type: {},
                Value: {
                    type: "integer"
                }
            }
        },
        Scq: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VariantName" ],
                members: {
                    VariantName: {},
                    ModelName: {},
                    InitialInstanceCount: {
                        type: "integer"
                    },
                    InstanceType: {},
                    InitialVariantWeight: {
                        type: "float"
                    },
                    AcceleratorType: {},
                    CoreDumpConfig: {
                        type: "structure",
                        required: [ "DestinationS3Uri" ],
                        members: {
                            DestinationS3Uri: {},
                            KmsKeyId: {}
                        }
                    },
                    ServerlessConfig: {
                        shape: "Scy"
                    },
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    ModelDataDownloadTimeoutInSeconds: {
                        type: "integer"
                    },
                    ContainerStartupHealthCheckTimeoutInSeconds: {
                        type: "integer"
                    },
                    EnableSSMAccess: {
                        type: "boolean"
                    },
                    ManagedInstanceScaling: {
                        shape: "Sd6"
                    },
                    RoutingConfig: {
                        shape: "Sda"
                    }
                }
            }
        },
        Scy: {
            type: "structure",
            required: [ "MemorySizeInMB", "MaxConcurrency" ],
            members: {
                MemorySizeInMB: {
                    type: "integer"
                },
                MaxConcurrency: {
                    type: "integer"
                },
                ProvisionedConcurrency: {
                    type: "integer"
                }
            }
        },
        Sd6: {
            type: "structure",
            members: {
                Status: {},
                MinInstanceCount: {
                    type: "integer"
                },
                MaxInstanceCount: {
                    type: "integer"
                }
            }
        },
        Sda: {
            type: "structure",
            required: [ "RoutingStrategy" ],
            members: {
                RoutingStrategy: {}
            }
        },
        Sdc: {
            type: "structure",
            required: [ "InitialSamplingPercentage", "DestinationS3Uri", "CaptureOptions" ],
            members: {
                EnableCapture: {
                    type: "boolean"
                },
                InitialSamplingPercentage: {
                    type: "integer"
                },
                DestinationS3Uri: {},
                KmsKeyId: {},
                CaptureOptions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "CaptureMode" ],
                        members: {
                            CaptureMode: {}
                        }
                    }
                },
                CaptureContentTypeHeader: {
                    shape: "Sdi"
                }
            }
        },
        Sdi: {
            type: "structure",
            members: {
                CsvContentTypes: {
                    type: "list",
                    member: {}
                },
                JsonContentTypes: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sdn: {
            type: "structure",
            required: [ "OutputConfig" ],
            members: {
                ClientConfig: {
                    type: "structure",
                    members: {
                        MaxConcurrentInvocationsPerInstance: {
                            type: "integer"
                        }
                    }
                },
                OutputConfig: {
                    type: "structure",
                    members: {
                        KmsKeyId: {},
                        S3OutputPath: {},
                        NotificationConfig: {
                            type: "structure",
                            members: {
                                SuccessTopic: {},
                                ErrorTopic: {},
                                IncludeInferenceResponseIn: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        S3FailurePath: {}
                    }
                }
            }
        },
        Sdv: {
            type: "structure",
            members: {
                ClarifyExplainerConfig: {
                    type: "structure",
                    required: [ "ShapConfig" ],
                    members: {
                        EnableExplanations: {},
                        InferenceConfig: {
                            type: "structure",
                            members: {
                                FeaturesAttribute: {},
                                ContentTemplate: {},
                                MaxRecordCount: {
                                    type: "integer"
                                },
                                MaxPayloadInMB: {
                                    type: "integer"
                                },
                                ProbabilityIndex: {
                                    type: "integer"
                                },
                                LabelIndex: {
                                    type: "integer"
                                },
                                ProbabilityAttribute: {},
                                LabelAttribute: {},
                                LabelHeaders: {
                                    type: "list",
                                    member: {}
                                },
                                FeatureHeaders: {
                                    type: "list",
                                    member: {}
                                },
                                FeatureTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        ShapConfig: {
                            type: "structure",
                            required: [ "ShapBaselineConfig" ],
                            members: {
                                ShapBaselineConfig: {
                                    type: "structure",
                                    members: {
                                        MimeType: {},
                                        ShapBaseline: {},
                                        ShapBaselineUri: {}
                                    }
                                },
                                NumberOfSamples: {
                                    type: "integer"
                                },
                                UseLogit: {
                                    type: "boolean"
                                },
                                Seed: {
                                    type: "integer"
                                },
                                TextConfig: {
                                    type: "structure",
                                    required: [ "Language", "Granularity" ],
                                    members: {
                                        Language: {},
                                        Granularity: {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Seu: {
            type: "list",
            member: {
                shape: "Sev"
            }
        },
        Sev: {
            type: "structure",
            members: {
                FeatureName: {},
                FeatureType: {},
                CollectionType: {},
                CollectionConfig: {
                    type: "structure",
                    members: {
                        VectorConfig: {
                            type: "structure",
                            required: [ "Dimension" ],
                            members: {
                                Dimension: {
                                    type: "integer"
                                }
                            }
                        }
                    },
                    union: true
                }
            }
        },
        Sf1: {
            type: "structure",
            members: {
                SecurityConfig: {
                    type: "structure",
                    members: {
                        KmsKeyId: {}
                    }
                },
                EnableOnlineStore: {
                    type: "boolean"
                },
                TtlDuration: {
                    shape: "Sf3"
                },
                StorageType: {}
            }
        },
        Sf3: {
            type: "structure",
            members: {
                Unit: {},
                Value: {
                    type: "integer"
                }
            }
        },
        Sf7: {
            type: "structure",
            required: [ "S3StorageConfig" ],
            members: {
                S3StorageConfig: {
                    type: "structure",
                    required: [ "S3Uri" ],
                    members: {
                        S3Uri: {},
                        KmsKeyId: {},
                        ResolvedOutputS3Uri: {}
                    }
                },
                DisableGlueTableCreation: {
                    type: "boolean"
                },
                DataCatalogConfig: {
                    type: "structure",
                    required: [ "TableName", "Catalog", "Database" ],
                    members: {
                        TableName: {},
                        Catalog: {},
                        Database: {}
                    }
                },
                TableFormat: {}
            }
        },
        Sfj: {
            type: "structure",
            required: [ "AwsManagedHumanLoopRequestSource" ],
            members: {
                AwsManagedHumanLoopRequestSource: {}
            }
        },
        Sfl: {
            type: "structure",
            required: [ "HumanLoopActivationConditionsConfig" ],
            members: {
                HumanLoopActivationConditionsConfig: {
                    type: "structure",
                    required: [ "HumanLoopActivationConditions" ],
                    members: {
                        HumanLoopActivationConditions: {
                            jsonvalue: true
                        }
                    }
                }
            }
        },
        Sfo: {
            type: "structure",
            required: [ "WorkteamArn", "HumanTaskUiArn", "TaskTitle", "TaskDescription", "TaskCount" ],
            members: {
                WorkteamArn: {},
                HumanTaskUiArn: {},
                TaskTitle: {},
                TaskDescription: {},
                TaskCount: {
                    type: "integer"
                },
                TaskAvailabilityLifetimeInSeconds: {
                    type: "integer"
                },
                TaskTimeLimitInSeconds: {
                    type: "integer"
                },
                TaskKeywords: {
                    type: "list",
                    member: {}
                },
                PublicWorkforceTaskPrice: {
                    shape: "Sfy"
                }
            }
        },
        Sfy: {
            type: "structure",
            members: {
                AmountInUsd: {
                    type: "structure",
                    members: {
                        Dollars: {
                            type: "integer"
                        },
                        Cents: {
                            type: "integer"
                        },
                        TenthFractionsOfACent: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Sg3: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                KmsKeyId: {}
            }
        },
        Sga: {
            type: "list",
            member: {}
        },
        Sgc: {
            type: "structure",
            members: {
                S3OutputPath: {}
            }
        },
        Sgi: {
            type: "structure",
            required: [ "Content" ],
            members: {
                Content: {}
            }
        },
        Sgn: {
            type: "structure",
            required: [ "Strategy", "ResourceLimits" ],
            members: {
                Strategy: {},
                StrategyConfig: {
                    type: "structure",
                    members: {
                        HyperbandStrategyConfig: {
                            type: "structure",
                            members: {
                                MinResource: {
                                    type: "integer"
                                },
                                MaxResource: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                HyperParameterTuningJobObjective: {
                    shape: "S2p"
                },
                ResourceLimits: {
                    shape: "Sgt"
                },
                ParameterRanges: {
                    shape: "Sgx"
                },
                TrainingJobEarlyStoppingType: {},
                TuningJobCompletionCriteria: {
                    type: "structure",
                    members: {
                        TargetObjectiveMetricValue: {
                            type: "float"
                        },
                        BestObjectiveNotImproving: {
                            type: "structure",
                            members: {
                                MaxNumberOfTrainingJobsNotImproving: {
                                    type: "integer"
                                }
                            }
                        },
                        ConvergenceDetected: {
                            type: "structure",
                            members: {
                                CompleteOnConvergence: {}
                            }
                        }
                    }
                },
                RandomSeed: {
                    type: "integer"
                }
            }
        },
        Sgt: {
            type: "structure",
            required: [ "MaxParallelTrainingJobs" ],
            members: {
                MaxNumberOfTrainingJobs: {
                    type: "integer"
                },
                MaxParallelTrainingJobs: {
                    type: "integer"
                },
                MaxRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        Sgx: {
            type: "structure",
            members: {
                IntegerParameterRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "MinValue", "MaxValue" ],
                        members: {
                            Name: {},
                            MinValue: {},
                            MaxValue: {},
                            ScalingType: {}
                        }
                    }
                },
                ContinuousParameterRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "MinValue", "MaxValue" ],
                        members: {
                            Name: {},
                            MinValue: {},
                            MaxValue: {},
                            ScalingType: {}
                        }
                    }
                },
                CategoricalParameterRanges: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "Values" ],
                        members: {
                            Name: {},
                            Values: {
                                shape: "S29"
                            }
                        }
                    }
                },
                AutoParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Name", "ValueHint" ],
                        members: {
                            Name: {},
                            ValueHint: {}
                        }
                    }
                }
            }
        },
        Shg: {
            type: "structure",
            required: [ "AlgorithmSpecification", "RoleArn", "OutputDataConfig", "StoppingCondition" ],
            members: {
                DefinitionName: {},
                TuningObjective: {
                    shape: "S2p"
                },
                HyperParameterRanges: {
                    shape: "Sgx"
                },
                StaticHyperParameters: {
                    shape: "S2w"
                },
                AlgorithmSpecification: {
                    type: "structure",
                    required: [ "TrainingInputMode" ],
                    members: {
                        TrainingImage: {},
                        TrainingInputMode: {},
                        AlgorithmName: {},
                        MetricDefinitions: {
                            shape: "S2e"
                        }
                    }
                },
                RoleArn: {},
                InputDataConfig: {
                    shape: "S2y"
                },
                VpcConfig: {
                    shape: "S61"
                },
                OutputDataConfig: {
                    shape: "S3g"
                },
                ResourceConfig: {
                    shape: "S3j"
                },
                StoppingCondition: {
                    shape: "S3p"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableManagedSpotTraining: {
                    type: "boolean"
                },
                CheckpointConfig: {
                    shape: "Shl"
                },
                RetryStrategy: {
                    shape: "Shm"
                },
                HyperParameterTuningResourceConfig: {
                    type: "structure",
                    members: {
                        InstanceType: {},
                        InstanceCount: {
                            type: "integer"
                        },
                        VolumeSizeInGB: {
                            type: "integer"
                        },
                        VolumeKmsKeyId: {},
                        AllocationStrategy: {},
                        InstanceConfigs: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "InstanceType", "InstanceCount", "VolumeSizeInGB" ],
                                members: {
                                    InstanceType: {},
                                    InstanceCount: {
                                        type: "integer"
                                    },
                                    VolumeSizeInGB: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                Environment: {
                    type: "map",
                    key: {},
                    value: {}
                }
            }
        },
        Shl: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {},
                LocalPath: {}
            }
        },
        Shm: {
            type: "structure",
            required: [ "MaximumRetryAttempts" ],
            members: {
                MaximumRetryAttempts: {
                    type: "integer"
                }
            }
        },
        Shw: {
            type: "list",
            member: {
                shape: "Shg"
            }
        },
        Shx: {
            type: "structure",
            required: [ "ParentHyperParameterTuningJobs", "WarmStartType" ],
            members: {
                ParentHyperParameterTuningJobs: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            HyperParameterTuningJobName: {}
                        }
                    }
                },
                WarmStartType: {}
            }
        },
        Si1: {
            type: "structure",
            required: [ "Mode" ],
            members: {
                Mode: {}
            }
        },
        Sic: {
            type: "list",
            member: {}
        },
        Sio: {
            type: "structure",
            required: [ "ComputeResourceRequirements" ],
            members: {
                ModelName: {},
                Container: {
                    type: "structure",
                    members: {
                        Image: {},
                        ArtifactUrl: {},
                        Environment: {
                            shape: "Sz"
                        }
                    }
                },
                StartupParameters: {
                    shape: "Siq"
                },
                ComputeResourceRequirements: {
                    shape: "Sir"
                }
            }
        },
        Siq: {
            type: "structure",
            members: {
                ModelDataDownloadTimeoutInSeconds: {
                    type: "integer"
                },
                ContainerStartupHealthCheckTimeoutInSeconds: {
                    type: "integer"
                }
            }
        },
        Sir: {
            type: "structure",
            required: [ "MinMemoryRequiredInMb" ],
            members: {
                NumberOfCpuCoresRequired: {
                    type: "float"
                },
                NumberOfAcceleratorDevicesRequired: {
                    type: "float"
                },
                MinMemoryRequiredInMb: {
                    type: "integer"
                },
                MaxMemoryRequiredInMb: {
                    type: "integer"
                }
            }
        },
        Siv: {
            type: "structure",
            required: [ "CopyCount" ],
            members: {
                CopyCount: {
                    type: "integer"
                }
            }
        },
        Sj2: {
            type: "structure",
            members: {
                StartTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                }
            }
        },
        Sj5: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ModelName", "VariantName", "InfrastructureConfig" ],
                members: {
                    ModelName: {},
                    VariantName: {},
                    InfrastructureConfig: {
                        shape: "Sj8"
                    }
                }
            }
        },
        Sj8: {
            type: "structure",
            required: [ "InfrastructureType", "RealTimeInferenceConfig" ],
            members: {
                InfrastructureType: {},
                RealTimeInferenceConfig: {
                    type: "structure",
                    required: [ "InstanceType", "InstanceCount" ],
                    members: {
                        InstanceType: {},
                        InstanceCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Sjd: {
            type: "structure",
            required: [ "Destination" ],
            members: {
                Destination: {},
                KmsKey: {},
                ContentType: {
                    shape: "Sdi"
                }
            }
        },
        Sje: {
            type: "structure",
            required: [ "SourceModelVariantName", "ShadowModelVariants" ],
            members: {
                SourceModelVariantName: {},
                ShadowModelVariants: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ShadowModelVariantName", "SamplingPercentage" ],
                        members: {
                            ShadowModelVariantName: {},
                            SamplingPercentage: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        Sjm: {
            type: "structure",
            members: {
                ModelPackageVersionArn: {},
                JobDurationInSeconds: {
                    type: "integer"
                },
                TrafficPattern: {
                    type: "structure",
                    members: {
                        TrafficType: {},
                        Phases: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    InitialNumberOfUsers: {
                                        type: "integer"
                                    },
                                    SpawnRate: {
                                        type: "integer"
                                    },
                                    DurationInSeconds: {
                                        type: "integer"
                                    }
                                }
                            }
                        },
                        Stairs: {
                            type: "structure",
                            members: {
                                DurationInSeconds: {
                                    type: "integer"
                                },
                                NumberOfSteps: {
                                    type: "integer"
                                },
                                UsersPerStep: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                ResourceLimit: {
                    type: "structure",
                    members: {
                        MaxNumberOfTests: {
                            type: "integer"
                        },
                        MaxParallelOfTests: {
                            type: "integer"
                        }
                    }
                },
                EndpointConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            InstanceType: {},
                            InferenceSpecificationName: {},
                            EnvironmentParameterRanges: {
                                type: "structure",
                                members: {
                                    CategoricalParameterRanges: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "Name", "Value" ],
                                            members: {
                                                Name: {},
                                                Value: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            ServerlessConfig: {
                                shape: "Scy"
                            }
                        }
                    }
                },
                VolumeKmsKeyId: {},
                ContainerConfig: {
                    type: "structure",
                    members: {
                        Domain: {},
                        Task: {},
                        Framework: {},
                        FrameworkVersion: {},
                        PayloadConfig: {
                            type: "structure",
                            members: {
                                SamplePayloadUrl: {},
                                SupportedContentTypes: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        NearestModelName: {},
                        SupportedInstanceTypes: {
                            type: "list",
                            member: {}
                        },
                        DataInputConfig: {},
                        SupportedEndpointType: {},
                        SupportedResponseMIMETypes: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                Endpoints: {
                    type: "list",
                    member: {
                        shape: "Skj"
                    }
                },
                VpcConfig: {
                    type: "structure",
                    required: [ "SecurityGroupIds", "Subnets" ],
                    members: {
                        SecurityGroupIds: {
                            type: "list",
                            member: {}
                        },
                        Subnets: {
                            type: "list",
                            member: {}
                        }
                    }
                },
                ModelName: {}
            }
        },
        Skj: {
            type: "structure",
            required: [ "EndpointName" ],
            members: {
                EndpointName: {}
            }
        },
        Skq: {
            type: "structure",
            members: {
                MaxInvocations: {
                    type: "integer"
                },
                ModelLatencyThresholds: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            Percentile: {},
                            ValueInMilliseconds: {
                                type: "integer"
                            }
                        }
                    }
                },
                FlatInvocations: {}
            }
        },
        Sl2: {
            type: "structure",
            required: [ "DataSource" ],
            members: {
                DataSource: {
                    type: "structure",
                    members: {
                        S3DataSource: {
                            type: "structure",
                            required: [ "ManifestS3Uri" ],
                            members: {
                                ManifestS3Uri: {}
                            }
                        },
                        SnsDataSource: {
                            type: "structure",
                            required: [ "SnsTopicArn" ],
                            members: {
                                SnsTopicArn: {}
                            }
                        }
                    }
                },
                DataAttributes: {
                    type: "structure",
                    members: {
                        ContentClassifiers: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        Sl9: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {},
                KmsKeyId: {},
                SnsTopicArn: {}
            }
        },
        Sla: {
            type: "structure",
            members: {
                MaxHumanLabeledObjectCount: {
                    type: "integer"
                },
                MaxPercentageOfInputDatasetLabeled: {
                    type: "integer"
                }
            }
        },
        Sld: {
            type: "structure",
            required: [ "LabelingJobAlgorithmSpecificationArn" ],
            members: {
                LabelingJobAlgorithmSpecificationArn: {},
                InitialActiveLearningModelArn: {},
                LabelingJobResourceConfig: {
                    type: "structure",
                    members: {
                        VolumeKmsKeyId: {},
                        VpcConfig: {
                            shape: "S61"
                        }
                    }
                }
            }
        },
        Slh: {
            type: "structure",
            required: [ "WorkteamArn", "UiConfig", "PreHumanTaskLambdaArn", "TaskTitle", "TaskDescription", "NumberOfHumanWorkersPerDataObject", "TaskTimeLimitInSeconds", "AnnotationConsolidationConfig" ],
            members: {
                WorkteamArn: {},
                UiConfig: {
                    type: "structure",
                    members: {
                        UiTemplateS3Uri: {},
                        HumanTaskUiArn: {}
                    }
                },
                PreHumanTaskLambdaArn: {},
                TaskKeywords: {
                    type: "list",
                    member: {}
                },
                TaskTitle: {},
                TaskDescription: {},
                NumberOfHumanWorkersPerDataObject: {
                    type: "integer"
                },
                TaskTimeLimitInSeconds: {
                    type: "integer"
                },
                TaskAvailabilityLifetimeInSeconds: {
                    type: "integer"
                },
                MaxConcurrentTaskCount: {
                    type: "integer"
                },
                AnnotationConsolidationConfig: {
                    type: "structure",
                    required: [ "AnnotationConsolidationLambdaArn" ],
                    members: {
                        AnnotationConsolidationLambdaArn: {}
                    }
                },
                PublicWorkforceTaskPrice: {
                    shape: "Sfy"
                }
            }
        },
        Slw: {
            type: "structure",
            members: {
                ContainerHostname: {},
                Image: {},
                ImageConfig: {
                    type: "structure",
                    required: [ "RepositoryAccessMode" ],
                    members: {
                        RepositoryAccessMode: {},
                        RepositoryAuthConfig: {
                            type: "structure",
                            required: [ "RepositoryCredentialsProviderArn" ],
                            members: {
                                RepositoryCredentialsProviderArn: {}
                            }
                        }
                    }
                },
                Mode: {},
                ModelDataUrl: {},
                Environment: {
                    shape: "Sz"
                },
                ModelPackageName: {},
                InferenceSpecificationName: {},
                MultiModelConfig: {
                    type: "structure",
                    members: {
                        ModelCacheSetting: {}
                    }
                },
                ModelDataSource: {
                    type: "structure",
                    required: [ "S3DataSource" ],
                    members: {
                        S3DataSource: {
                            type: "structure",
                            required: [ "S3Uri", "S3DataType", "CompressionType" ],
                            members: {
                                S3Uri: {},
                                S3DataType: {},
                                CompressionType: {},
                                ModelAccessConfig: {
                                    type: "structure",
                                    required: [ "AcceptEula" ],
                                    members: {
                                        AcceptEula: {
                                            type: "boolean"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        Smc: {
            type: "list",
            member: {
                shape: "Slw"
            }
        },
        Smd: {
            type: "structure",
            required: [ "Mode" ],
            members: {
                Mode: {}
            }
        },
        Smh: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S8u"
                }
            }
        },
        Smi: {
            type: "structure",
            required: [ "ImageUri", "ConfigUri" ],
            members: {
                ImageUri: {},
                ConfigUri: {},
                Environment: {
                    shape: "S92"
                }
            }
        },
        Smj: {
            type: "structure",
            required: [ "GroundTruthS3Input" ],
            members: {
                EndpointInput: {
                    shape: "S96"
                },
                BatchTransformInput: {
                    shape: "S9d"
                },
                GroundTruthS3Input: {
                    shape: "Smk"
                }
            }
        },
        Smk: {
            type: "structure",
            members: {
                S3Uri: {}
            }
        },
        Smn: {
            type: "structure",
            members: {
                KmsKeyId: {}
            }
        },
        Smo: {
            type: "string",
            sensitive: true
        },
        Smu: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                S3OutputPath: {}
            }
        },
        Smy: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S8u"
                }
            }
        },
        Smz: {
            type: "structure",
            required: [ "ImageUri", "ConfigUri" ],
            members: {
                ImageUri: {},
                ConfigUri: {},
                Environment: {
                    shape: "S92"
                }
            }
        },
        Sn0: {
            type: "structure",
            members: {
                EndpointInput: {
                    shape: "S96"
                },
                BatchTransformInput: {
                    shape: "S9d"
                }
            }
        },
        Sn3: {
            type: "structure",
            required: [ "ValidationRole", "ValidationProfiles" ],
            members: {
                ValidationRole: {},
                ValidationProfiles: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "ProfileName", "TransformJobDefinition" ],
                        members: {
                            ProfileName: {},
                            TransformJobDefinition: {
                                shape: "S3t"
                            }
                        }
                    }
                }
            }
        },
        Sn6: {
            type: "structure",
            required: [ "SourceAlgorithms" ],
            members: {
                SourceAlgorithms: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "AlgorithmName" ],
                        members: {
                            ModelDataUrl: {},
                            AlgorithmName: {}
                        }
                    }
                }
            }
        },
        Sn9: {
            type: "structure",
            members: {
                ModelQuality: {
                    type: "structure",
                    members: {
                        Statistics: {
                            shape: "Snb"
                        },
                        Constraints: {
                            shape: "Snb"
                        }
                    }
                },
                ModelDataQuality: {
                    type: "structure",
                    members: {
                        Statistics: {
                            shape: "Snb"
                        },
                        Constraints: {
                            shape: "Snb"
                        }
                    }
                },
                Bias: {
                    type: "structure",
                    members: {
                        Report: {
                            shape: "Snb"
                        },
                        PreTrainingReport: {
                            shape: "Snb"
                        },
                        PostTrainingReport: {
                            shape: "Snb"
                        }
                    }
                },
                Explainability: {
                    type: "structure",
                    members: {
                        Report: {
                            shape: "Snb"
                        }
                    }
                }
            }
        },
        Snb: {
            type: "structure",
            required: [ "ContentType", "S3Uri" ],
            members: {
                ContentType: {},
                ContentDigest: {},
                S3Uri: {}
            }
        },
        Sng: {
            type: "map",
            key: {},
            value: {}
        },
        Snj: {
            type: "structure",
            members: {
                Bias: {
                    type: "structure",
                    members: {
                        ConfigFile: {
                            shape: "Snl"
                        },
                        PreTrainingConstraints: {
                            shape: "Snb"
                        },
                        PostTrainingConstraints: {
                            shape: "Snb"
                        }
                    }
                },
                Explainability: {
                    type: "structure",
                    members: {
                        Constraints: {
                            shape: "Snb"
                        },
                        ConfigFile: {
                            shape: "Snl"
                        }
                    }
                },
                ModelQuality: {
                    type: "structure",
                    members: {
                        Statistics: {
                            shape: "Snb"
                        },
                        Constraints: {
                            shape: "Snb"
                        }
                    }
                },
                ModelDataQuality: {
                    type: "structure",
                    members: {
                        Statistics: {
                            shape: "Snb"
                        },
                        Constraints: {
                            shape: "Snb"
                        }
                    }
                }
            }
        },
        Snl: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                ContentType: {},
                ContentDigest: {},
                S3Uri: {}
            }
        },
        Snp: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Containers" ],
                members: {
                    Name: {},
                    Description: {},
                    Containers: {
                        shape: "Ss"
                    },
                    SupportedTransformInstanceTypes: {
                        shape: "S1a"
                    },
                    SupportedRealtimeInferenceInstanceTypes: {
                        shape: "S1c"
                    },
                    SupportedContentTypes: {
                        shape: "S1e"
                    },
                    SupportedResponseMIMETypes: {
                        shape: "S1g"
                    }
                }
            }
        },
        Snx: {
            type: "structure",
            members: {
                BaseliningJobName: {},
                ConstraintsResource: {
                    shape: "S8u"
                }
            }
        },
        Sny: {
            type: "structure",
            required: [ "ImageUri" ],
            members: {
                ImageUri: {},
                ContainerEntrypoint: {
                    shape: "S8y"
                },
                ContainerArguments: {
                    shape: "S90"
                },
                RecordPreprocessorSourceUri: {},
                PostAnalyticsProcessorSourceUri: {},
                ProblemType: {},
                Environment: {
                    shape: "S92"
                }
            }
        },
        So0: {
            type: "structure",
            required: [ "GroundTruthS3Input" ],
            members: {
                EndpointInput: {
                    shape: "S96"
                },
                BatchTransformInput: {
                    shape: "S9d"
                },
                GroundTruthS3Input: {
                    shape: "Smk"
                }
            }
        },
        So4: {
            type: "structure",
            members: {
                ScheduleConfig: {
                    type: "structure",
                    required: [ "ScheduleExpression" ],
                    members: {
                        ScheduleExpression: {},
                        DataAnalysisStartTime: {},
                        DataAnalysisEndTime: {}
                    }
                },
                MonitoringJobDefinition: {
                    type: "structure",
                    required: [ "MonitoringInputs", "MonitoringOutputConfig", "MonitoringResources", "MonitoringAppSpecification", "RoleArn" ],
                    members: {
                        BaselineConfig: {
                            type: "structure",
                            members: {
                                BaseliningJobName: {},
                                ConstraintsResource: {
                                    shape: "S8u"
                                },
                                StatisticsResource: {
                                    shape: "S8v"
                                }
                            }
                        },
                        MonitoringInputs: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    EndpointInput: {
                                        shape: "S96"
                                    },
                                    BatchTransformInput: {
                                        shape: "S9d"
                                    }
                                }
                            }
                        },
                        MonitoringOutputConfig: {
                            shape: "S9j"
                        },
                        MonitoringResources: {
                            shape: "S9p"
                        },
                        MonitoringAppSpecification: {
                            type: "structure",
                            required: [ "ImageUri" ],
                            members: {
                                ImageUri: {},
                                ContainerEntrypoint: {
                                    shape: "S8y"
                                },
                                ContainerArguments: {
                                    shape: "S90"
                                },
                                RecordPreprocessorSourceUri: {},
                                PostAnalyticsProcessorSourceUri: {}
                            }
                        },
                        StoppingCondition: {
                            shape: "S9v"
                        },
                        Environment: {
                            shape: "S92"
                        },
                        NetworkConfig: {
                            shape: "Soc"
                        },
                        RoleArn: {}
                    }
                },
                MonitoringJobDefinitionName: {},
                MonitoringType: {}
            }
        },
        Soc: {
            type: "structure",
            members: {
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                VpcConfig: {
                    shape: "S61"
                }
            }
        },
        Sol: {
            type: "list",
            member: {}
        },
        Soo: {
            type: "list",
            member: {}
        },
        Sor: {
            type: "structure",
            required: [ "MinimumInstanceMetadataServiceVersion" ],
            members: {
                MinimumInstanceMetadataServiceVersion: {}
            }
        },
        Sow: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Content: {}
                }
            }
        },
        Sp4: {
            type: "structure",
            required: [ "Bucket", "ObjectKey" ],
            members: {
                Bucket: {},
                ObjectKey: {},
                VersionId: {}
            }
        },
        Spa: {
            type: "structure",
            required: [ "MaxParallelExecutionSteps" ],
            members: {
                MaxParallelExecutionSteps: {
                    type: "integer"
                }
            }
        },
        Spn: {
            type: "list",
            member: {
                type: "structure",
                required: [ "InputName" ],
                members: {
                    InputName: {},
                    AppManaged: {
                        type: "boolean"
                    },
                    S3Input: {
                        type: "structure",
                        required: [ "S3Uri", "S3DataType" ],
                        members: {
                            S3Uri: {},
                            LocalPath: {},
                            S3DataType: {},
                            S3InputMode: {},
                            S3DataDistributionType: {},
                            S3CompressionType: {}
                        }
                    },
                    DatasetDefinition: {
                        type: "structure",
                        members: {
                            AthenaDatasetDefinition: {
                                type: "structure",
                                required: [ "Catalog", "Database", "QueryString", "OutputS3Uri", "OutputFormat" ],
                                members: {
                                    Catalog: {},
                                    Database: {},
                                    QueryString: {},
                                    WorkGroup: {},
                                    OutputS3Uri: {},
                                    KmsKeyId: {},
                                    OutputFormat: {},
                                    OutputCompression: {}
                                }
                            },
                            RedshiftDatasetDefinition: {
                                type: "structure",
                                required: [ "ClusterId", "Database", "DbUser", "QueryString", "ClusterRoleArn", "OutputS3Uri", "OutputFormat" ],
                                members: {
                                    ClusterId: {},
                                    Database: {},
                                    DbUser: {},
                                    QueryString: {},
                                    ClusterRoleArn: {},
                                    OutputS3Uri: {},
                                    KmsKeyId: {},
                                    OutputFormat: {},
                                    OutputCompression: {}
                                }
                            },
                            LocalPath: {},
                            DataDistributionType: {},
                            InputMode: {}
                        }
                    }
                }
            }
        },
        Sqa: {
            type: "structure",
            required: [ "Outputs" ],
            members: {
                Outputs: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "OutputName" ],
                        members: {
                            OutputName: {},
                            S3Output: {
                                type: "structure",
                                required: [ "S3Uri", "LocalPath", "S3UploadMode" ],
                                members: {
                                    S3Uri: {},
                                    LocalPath: {},
                                    S3UploadMode: {}
                                }
                            },
                            FeatureStoreOutput: {
                                type: "structure",
                                required: [ "FeatureGroupName" ],
                                members: {
                                    FeatureGroupName: {}
                                }
                            },
                            AppManaged: {
                                type: "boolean"
                            }
                        }
                    }
                },
                KmsKeyId: {}
            }
        },
        Sqf: {
            type: "structure",
            required: [ "ClusterConfig" ],
            members: {
                ClusterConfig: {
                    type: "structure",
                    required: [ "InstanceCount", "InstanceType", "VolumeSizeInGB" ],
                    members: {
                        InstanceCount: {
                            type: "integer"
                        },
                        InstanceType: {},
                        VolumeSizeInGB: {
                            type: "integer"
                        },
                        VolumeKmsKeyId: {}
                    }
                }
            }
        },
        Sqh: {
            type: "structure",
            required: [ "MaxRuntimeInSeconds" ],
            members: {
                MaxRuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        Sqj: {
            type: "structure",
            required: [ "ImageUri" ],
            members: {
                ImageUri: {},
                ContainerEntrypoint: {
                    shape: "S8y"
                },
                ContainerArguments: {
                    type: "list",
                    member: {}
                }
            }
        },
        Sql: {
            type: "map",
            key: {},
            value: {}
        },
        Sqm: {
            type: "structure",
            members: {
                ExperimentName: {},
                TrialName: {},
                TrialComponentDisplayName: {},
                RunName: {}
            }
        },
        Sqr: {
            type: "structure",
            required: [ "ProductId" ],
            members: {
                ProductId: {},
                ProvisioningArtifactId: {},
                PathId: {},
                ProvisioningParameters: {
                    shape: "Sqt"
                }
            }
        },
        Sqt: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sr1: {
            type: "structure",
            members: {
                JupyterServerAppSettings: {
                    shape: "Sab"
                },
                KernelGatewayAppSettings: {
                    shape: "Sag"
                },
                JupyterLabAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S4h"
                        },
                        CodeRepositories: {
                            shape: "Sad"
                        }
                    }
                },
                CodeEditorAppSettings: {
                    type: "structure",
                    members: {
                        DefaultResourceSpec: {
                            shape: "S4h"
                        }
                    }
                },
                SpaceStorageSettings: {
                    shape: "Sr4"
                },
                AppType: {},
                CustomFileSystems: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            EFSFileSystem: {
                                type: "structure",
                                required: [ "FileSystemId" ],
                                members: {
                                    FileSystemId: {}
                                }
                            }
                        },
                        union: true
                    }
                }
            }
        },
        Sr4: {
            type: "structure",
            members: {
                EbsStorageSettings: {
                    type: "structure",
                    required: [ "EbsVolumeSizeInGb" ],
                    members: {
                        EbsVolumeSizeInGb: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        Sr9: {
            type: "structure",
            required: [ "OwnerUserProfileName" ],
            members: {
                OwnerUserProfileName: {}
            }
        },
        Sra: {
            type: "structure",
            required: [ "SharingType" ],
            members: {
                SharingType: {}
            }
        },
        Srl: {
            type: "structure",
            required: [ "TrainingInputMode" ],
            members: {
                TrainingImage: {},
                AlgorithmName: {},
                TrainingInputMode: {},
                MetricDefinitions: {
                    shape: "S2e"
                },
                EnableSageMakerMetricsTimeSeries: {
                    type: "boolean"
                },
                ContainerEntrypoint: {
                    type: "list",
                    member: {}
                },
                ContainerArguments: {
                    type: "list",
                    member: {}
                },
                TrainingImageConfig: {
                    type: "structure",
                    required: [ "TrainingRepositoryAccessMode" ],
                    members: {
                        TrainingRepositoryAccessMode: {},
                        TrainingRepositoryAuthConfig: {
                            type: "structure",
                            required: [ "TrainingRepositoryCredentialsProviderArn" ],
                            members: {
                                TrainingRepositoryCredentialsProviderArn: {}
                            }
                        }
                    }
                }
            }
        },
        Sru: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                LocalPath: {},
                S3OutputPath: {},
                HookParameters: {
                    type: "map",
                    key: {},
                    value: {}
                },
                CollectionConfigurations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            CollectionName: {},
                            CollectionParameters: {
                                type: "map",
                                key: {},
                                value: {}
                            }
                        }
                    }
                }
            }
        },
        Ss2: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleConfigurationName", "RuleEvaluatorImage" ],
                members: {
                    RuleConfigurationName: {},
                    LocalPath: {},
                    S3OutputPath: {},
                    RuleEvaluatorImage: {},
                    InstanceType: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    RuleParameters: {
                        shape: "Ss5"
                    }
                }
            }
        },
        Ss5: {
            type: "map",
            key: {},
            value: {}
        },
        Ss6: {
            type: "structure",
            required: [ "S3OutputPath" ],
            members: {
                LocalPath: {},
                S3OutputPath: {}
            }
        },
        Ss7: {
            type: "structure",
            members: {
                S3OutputPath: {},
                ProfilingIntervalInMilliseconds: {
                    type: "long"
                },
                ProfilingParameters: {
                    shape: "Ss9"
                },
                DisableProfiler: {
                    type: "boolean"
                }
            }
        },
        Ss9: {
            type: "map",
            key: {},
            value: {}
        },
        Ssb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "RuleConfigurationName", "RuleEvaluatorImage" ],
                members: {
                    RuleConfigurationName: {},
                    LocalPath: {},
                    S3OutputPath: {},
                    RuleEvaluatorImage: {},
                    InstanceType: {},
                    VolumeSizeInGB: {
                        type: "integer"
                    },
                    RuleParameters: {
                        shape: "Ss5"
                    }
                }
            }
        },
        Ssd: {
            type: "map",
            key: {},
            value: {}
        },
        Ssg: {
            type: "structure",
            members: {
                EnableInfraCheck: {
                    type: "boolean"
                }
            }
        },
        Ssm: {
            type: "structure",
            members: {
                InvocationsTimeoutInSeconds: {
                    type: "integer"
                },
                InvocationsMaxRetries: {
                    type: "integer"
                }
            }
        },
        Ssp: {
            type: "structure",
            required: [ "DestinationS3Uri" ],
            members: {
                DestinationS3Uri: {},
                KmsKeyId: {},
                GenerateInferenceId: {
                    type: "boolean"
                }
            }
        },
        Ssq: {
            type: "structure",
            members: {
                InputFilter: {},
                OutputFilter: {},
                JoinSource: {}
            }
        },
        Ssy: {
            type: "structure",
            members: {
                PrimaryStatus: {},
                Message: {}
            }
        },
        St1: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    StringValue: {},
                    NumberValue: {
                        type: "double"
                    }
                }
            }
        },
        St5: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "Value" ],
                members: {
                    MediaType: {},
                    Value: {}
                }
            }
        },
        Stg: {
            type: "structure",
            required: [ "UserPool", "ClientId" ],
            members: {
                UserPool: {},
                ClientId: {}
            }
        },
        Stj: {
            type: "structure",
            required: [ "ClientId", "ClientSecret", "Issuer", "AuthorizationEndpoint", "TokenEndpoint", "UserInfoEndpoint", "LogoutEndpoint", "JwksUri" ],
            members: {
                ClientId: {},
                ClientSecret: {
                    type: "string",
                    sensitive: true
                },
                Issuer: {},
                AuthorizationEndpoint: {},
                TokenEndpoint: {},
                UserInfoEndpoint: {},
                LogoutEndpoint: {},
                JwksUri: {}
            }
        },
        Stm: {
            type: "structure",
            required: [ "Cidrs" ],
            members: {
                Cidrs: {
                    type: "list",
                    member: {}
                }
            }
        },
        Stq: {
            type: "structure",
            members: {
                VpcId: {},
                SecurityGroupIds: {
                    shape: "Sts"
                },
                Subnets: {
                    shape: "Stu"
                }
            }
        },
        Sts: {
            type: "list",
            member: {}
        },
        Stu: {
            type: "list",
            member: {}
        },
        Su0: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    CognitoMemberDefinition: {
                        type: "structure",
                        required: [ "UserPool", "UserGroup", "ClientId" ],
                        members: {
                            UserPool: {},
                            UserGroup: {},
                            ClientId: {}
                        }
                    },
                    OidcMemberDefinition: {
                        type: "structure",
                        required: [ "Groups" ],
                        members: {
                            Groups: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            }
        },
        Su8: {
            type: "structure",
            members: {
                NotificationTopicArn: {}
            }
        },
        Swf: {
            type: "structure",
            members: {
                UserProfileArn: {},
                UserProfileName: {},
                DomainId: {},
                IamIdentity: {
                    type: "structure",
                    members: {
                        Arn: {},
                        PrincipalId: {},
                        SourceIdentity: {}
                    }
                }
            }
        },
        Swm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Status" ],
                members: {
                    Name: {},
                    Status: {},
                    FailureReason: {}
                }
            }
        },
        Sx0: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    PartialFailureMessage: {}
                }
            }
        },
        Sx2: {
            type: "structure",
            required: [ "CandidateName", "ObjectiveStatus", "CandidateSteps", "CandidateStatus", "CreationTime", "LastModifiedTime" ],
            members: {
                CandidateName: {},
                FinalAutoMLJobObjectiveMetric: {
                    type: "structure",
                    required: [ "MetricName", "Value" ],
                    members: {
                        Type: {},
                        MetricName: {},
                        Value: {
                            type: "float"
                        },
                        StandardMetricName: {}
                    }
                },
                ObjectiveStatus: {},
                CandidateSteps: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "CandidateStepType", "CandidateStepArn", "CandidateStepName" ],
                        members: {
                            CandidateStepType: {},
                            CandidateStepArn: {},
                            CandidateStepName: {}
                        }
                    }
                },
                CandidateStatus: {},
                InferenceContainers: {
                    shape: "Sxe"
                },
                CreationTime: {
                    type: "timestamp"
                },
                EndTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                FailureReason: {},
                CandidateProperties: {
                    type: "structure",
                    members: {
                        CandidateArtifactLocations: {
                            type: "structure",
                            required: [ "Explainability" ],
                            members: {
                                Explainability: {},
                                ModelInsights: {},
                                BacktestResults: {}
                            }
                        },
                        CandidateMetrics: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    MetricName: {},
                                    Value: {
                                        type: "float"
                                    },
                                    Set: {},
                                    StandardMetricName: {}
                                }
                            }
                        }
                    }
                },
                InferenceContainerDefinitions: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Sxe"
                    }
                }
            }
        },
        Sxe: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Image", "ModelDataUrl" ],
                members: {
                    Image: {},
                    ModelDataUrl: {},
                    Environment: {
                        shape: "Sz"
                    }
                }
            }
        },
        Sxu: {
            type: "structure",
            members: {
                CandidateDefinitionNotebookLocation: {},
                DataExplorationNotebookLocation: {}
            }
        },
        Sxy: {
            type: "structure",
            members: {
                EndpointName: {}
            }
        },
        Syg: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                Message: {}
            }
        },
        Syp: {
            type: "structure",
            required: [ "S3ModelArtifacts" ],
            members: {
                S3ModelArtifacts: {}
            }
        },
        Szu: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VariantName" ],
                members: {
                    VariantName: {},
                    DeployedImages: {
                        shape: "Szw"
                    },
                    CurrentWeight: {
                        type: "float"
                    },
                    DesiredWeight: {
                        type: "float"
                    },
                    CurrentInstanceCount: {
                        type: "integer"
                    },
                    DesiredInstanceCount: {
                        type: "integer"
                    },
                    VariantStatus: {
                        shape: "Szy"
                    },
                    CurrentServerlessConfig: {
                        shape: "Scy"
                    },
                    DesiredServerlessConfig: {
                        shape: "Scy"
                    },
                    ManagedInstanceScaling: {
                        shape: "Sd6"
                    },
                    RoutingConfig: {
                        shape: "Sda"
                    }
                }
            }
        },
        Szw: {
            type: "list",
            member: {
                shape: "Szx"
            }
        },
        Szx: {
            type: "structure",
            members: {
                SpecifiedImage: {},
                ResolvedImage: {},
                ResolutionTime: {
                    type: "timestamp"
                }
            }
        },
        Szy: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Status" ],
                members: {
                    Status: {},
                    StatusMessage: {},
                    StartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S102: {
            type: "structure",
            required: [ "EnableCapture", "CaptureStatus", "CurrentSamplingPercentage", "DestinationS3Uri", "KmsKeyId" ],
            members: {
                EnableCapture: {
                    type: "boolean"
                },
                CaptureStatus: {},
                CurrentSamplingPercentage: {
                    type: "integer"
                },
                DestinationS3Uri: {},
                KmsKeyId: {}
            }
        },
        S106: {
            type: "list",
            member: {
                type: "structure",
                required: [ "VariantName" ],
                members: {
                    VariantName: {},
                    DeployedImages: {
                        shape: "Szw"
                    },
                    CurrentWeight: {
                        type: "float"
                    },
                    DesiredWeight: {
                        type: "float"
                    },
                    CurrentInstanceCount: {
                        type: "integer"
                    },
                    DesiredInstanceCount: {
                        type: "integer"
                    },
                    InstanceType: {},
                    AcceleratorType: {},
                    VariantStatus: {
                        shape: "Szy"
                    },
                    CurrentServerlessConfig: {
                        shape: "Scy"
                    },
                    DesiredServerlessConfig: {
                        shape: "Scy"
                    },
                    ManagedInstanceScaling: {
                        shape: "Sd6"
                    },
                    RoutingConfig: {
                        shape: "Sda"
                    }
                }
            }
        },
        S10c: {
            type: "structure",
            required: [ "SourceArn" ],
            members: {
                SourceArn: {},
                SourceType: {}
            }
        },
        S10j: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                BlockedReason: {}
            }
        },
        S10m: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                FailureReason: {}
            }
        },
        S10s: {
            type: "list",
            member: {
                shape: "S10t"
            }
        },
        S10t: {
            type: "structure",
            members: {
                Key: {},
                Value: {}
            }
        },
        S11a: {
            type: "list",
            member: {}
        },
        S11p: {
            type: "structure",
            members: {
                Completed: {
                    type: "integer"
                },
                InProgress: {
                    type: "integer"
                },
                RetryableError: {
                    type: "integer"
                },
                NonRetryableError: {
                    type: "integer"
                },
                Stopped: {
                    type: "integer"
                }
            }
        },
        S11r: {
            type: "structure",
            members: {
                Succeeded: {
                    type: "integer"
                },
                Pending: {
                    type: "integer"
                },
                Failed: {
                    type: "integer"
                }
            }
        },
        S11t: {
            type: "structure",
            required: [ "TrainingJobName", "TrainingJobArn", "CreationTime", "TrainingJobStatus", "TunedHyperParameters" ],
            members: {
                TrainingJobDefinitionName: {},
                TrainingJobName: {},
                TrainingJobArn: {},
                TuningJobName: {},
                CreationTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                TrainingJobStatus: {},
                TunedHyperParameters: {
                    shape: "S2w"
                },
                FailureReason: {},
                FinalHyperParameterTuningJobObjectiveMetric: {
                    type: "structure",
                    required: [ "MetricName", "Value" ],
                    members: {
                        Type: {},
                        MetricName: {},
                        Value: {
                            type: "float"
                        }
                    }
                },
                ObjectiveStatus: {}
            }
        },
        S11w: {
            type: "structure",
            members: {
                NumberOfTrainingJobsObjectiveNotImproving: {
                    type: "integer"
                },
                ConvergenceDetectedTime: {
                    type: "timestamp"
                }
            }
        },
        S11x: {
            type: "structure",
            members: {
                RuntimeInSeconds: {
                    type: "integer"
                }
            }
        },
        S12o: {
            type: "structure",
            required: [ "CostPerHour", "CostPerInference", "MaxInvocations", "ModelLatency" ],
            members: {
                CostPerHour: {
                    type: "float"
                },
                CostPerInference: {
                    type: "float"
                },
                MaxInvocations: {
                    type: "integer"
                },
                ModelLatency: {
                    type: "integer"
                },
                CpuUtilization: {
                    type: "float"
                },
                MemoryUtilization: {
                    type: "float"
                },
                ModelSetupTime: {
                    type: "integer"
                }
            }
        },
        S12r: {
            type: "structure",
            required: [ "EndpointName", "VariantName" ],
            members: {
                EndpointName: {},
                VariantName: {},
                InstanceType: {},
                InitialInstanceCount: {
                    type: "integer"
                },
                ServerlessConfig: {
                    shape: "Scy"
                }
            }
        },
        S12t: {
            type: "structure",
            members: {
                InferenceSpecificationName: {},
                EnvironmentParameters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "Key", "ValueType", "Value" ],
                        members: {
                            Key: {},
                            ValueType: {},
                            Value: {}
                        }
                    }
                },
                CompilationJobName: {}
            }
        },
        S131: {
            type: "structure",
            required: [ "MaxInvocations", "ModelLatency" ],
            members: {
                MaxInvocations: {
                    type: "integer"
                },
                ModelLatency: {
                    type: "integer"
                }
            }
        },
        S135: {
            type: "structure",
            members: {
                TotalLabeled: {
                    type: "integer"
                },
                HumanLabeled: {
                    type: "integer"
                },
                MachineLabeled: {
                    type: "integer"
                },
                FailedNonRetryableError: {
                    type: "integer"
                },
                Unlabeled: {
                    type: "integer"
                }
            }
        },
        S138: {
            type: "structure",
            required: [ "OutputDatasetS3Uri" ],
            members: {
                OutputDatasetS3Uri: {},
                FinalActiveLearningModelArn: {}
            }
        },
        S13d: {
            type: "structure",
            required: [ "RecommendationStatus" ],
            members: {
                RecommendationStatus: {},
                RealTimeInferenceRecommendations: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "RecommendationId", "InstanceType" ],
                        members: {
                            RecommendationId: {},
                            InstanceType: {},
                            Environment: {
                                shape: "Sz"
                            }
                        }
                    }
                }
            }
        },
        S13u: {
            type: "structure",
            required: [ "ValidationStatuses" ],
            members: {
                ValidationStatuses: {
                    shape: "S13v"
                },
                ImageScanStatuses: {
                    shape: "S13v"
                }
            }
        },
        S13v: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Status" ],
                members: {
                    Name: {},
                    Status: {},
                    FailureReason: {}
                }
            }
        },
        S147: {
            type: "structure",
            required: [ "MonitoringScheduleName", "ScheduledTime", "CreationTime", "LastModifiedTime", "MonitoringExecutionStatus" ],
            members: {
                MonitoringScheduleName: {},
                ScheduledTime: {
                    type: "timestamp"
                },
                CreationTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                MonitoringExecutionStatus: {},
                ProcessingJobArn: {},
                EndpointName: {},
                FailureReason: {},
                MonitoringJobDefinitionName: {},
                MonitoringType: {}
            }
        },
        S14r: {
            type: "structure",
            members: {
                ExperimentName: {},
                TrialName: {}
            }
        },
        S14t: {
            type: "structure",
            required: [ "SelectedSteps" ],
            members: {
                SourcePipelineExecutionArn: {},
                SelectedSteps: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "StepName" ],
                        members: {
                            StepName: {}
                        }
                    }
                }
            }
        },
        S152: {
            type: "structure",
            members: {
                ProvisionedProductId: {},
                ProvisionedProductStatusMessage: {}
            }
        },
        S15d: {
            type: "structure",
            required: [ "WorkteamArn" ],
            members: {
                WorkteamArn: {},
                MarketplaceTitle: {},
                SellerName: {},
                MarketplaceDescription: {},
                ListingId: {}
            }
        },
        S15h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Status", "StartTime" ],
                members: {
                    Status: {},
                    StartTime: {
                        type: "timestamp"
                    },
                    EndTime: {
                        type: "timestamp"
                    },
                    StatusMessage: {}
                }
            }
        },
        S15k: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MetricName: {},
                    Value: {
                        type: "float"
                    },
                    Timestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        S15o: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    RuleConfigurationName: {},
                    RuleEvaluationJobArn: {},
                    RuleEvaluationStatus: {},
                    StatusDetails: {},
                    LastModifiedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S15v: {
            type: "structure",
            required: [ "Status" ],
            members: {
                Status: {},
                ResourceRetainedBillableTimeInSeconds: {
                    type: "integer"
                },
                ReusedByJob: {}
            }
        },
        S163: {
            type: "structure",
            required: [ "SourceArn" ],
            members: {
                SourceArn: {},
                SourceType: {}
            }
        },
        S167: {
            type: "structure",
            required: [ "SourceArn" ],
            members: {
                SourceArn: {},
                SourceType: {}
            }
        },
        S169: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    MetricName: {},
                    SourceArn: {},
                    TimeStamp: {
                        type: "timestamp"
                    },
                    Max: {
                        type: "double"
                    },
                    Min: {
                        type: "double"
                    },
                    Last: {
                        type: "double"
                    },
                    Count: {
                        type: "integer"
                    },
                    Avg: {
                        type: "double"
                    },
                    StdDev: {
                        type: "double"
                    }
                }
            }
        },
        S16j: {
            type: "structure",
            required: [ "WorkforceName", "WorkforceArn" ],
            members: {
                WorkforceName: {},
                WorkforceArn: {},
                LastUpdatedDate: {
                    type: "timestamp"
                },
                SourceIpConfig: {
                    shape: "Stm"
                },
                SubDomain: {},
                CognitoConfig: {
                    shape: "Stg"
                },
                OidcConfig: {
                    type: "structure",
                    members: {
                        ClientId: {},
                        Issuer: {},
                        AuthorizationEndpoint: {},
                        TokenEndpoint: {},
                        UserInfoEndpoint: {},
                        LogoutEndpoint: {},
                        JwksUri: {}
                    }
                },
                CreateDate: {
                    type: "timestamp"
                },
                WorkforceVpcConfig: {
                    type: "structure",
                    required: [ "VpcId", "SecurityGroupIds", "Subnets" ],
                    members: {
                        VpcId: {},
                        SecurityGroupIds: {
                            shape: "Sts"
                        },
                        Subnets: {
                            shape: "Stu"
                        },
                        VpcEndpointId: {}
                    }
                },
                Status: {},
                FailureReason: {}
            }
        },
        S16r: {
            type: "structure",
            required: [ "WorkteamName", "MemberDefinitions", "WorkteamArn", "Description" ],
            members: {
                WorkteamName: {},
                MemberDefinitions: {
                    shape: "Su0"
                },
                WorkteamArn: {},
                WorkforceArn: {},
                ProductListingIds: {
                    type: "list",
                    member: {}
                },
                Description: {},
                SubDomain: {},
                CreateDate: {
                    type: "timestamp"
                },
                LastUpdatedDate: {
                    type: "timestamp"
                },
                NotificationConfiguration: {
                    shape: "Su8"
                }
            }
        },
        S17j: {
            type: "structure",
            members: {
                MinInvocationsPerMinute: {
                    type: "integer"
                },
                MaxInvocationsPerMinute: {
                    type: "integer"
                }
            }
        },
        S1ab: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MonitoringJobDefinitionName", "MonitoringJobDefinitionArn", "CreationTime", "EndpointName" ],
                members: {
                    MonitoringJobDefinitionName: {},
                    MonitoringJobDefinitionArn: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    EndpointName: {}
                }
            }
        },
        S1c1: {
            type: "list",
            member: {
                type: "structure",
                required: [ "HubContentName", "HubContentArn", "HubContentVersion", "HubContentType", "DocumentSchemaVersion", "HubContentStatus", "CreationTime" ],
                members: {
                    HubContentName: {},
                    HubContentArn: {},
                    HubContentVersion: {},
                    HubContentType: {},
                    DocumentSchemaVersion: {},
                    HubContentDisplayName: {},
                    HubContentDescription: {},
                    HubContentSearchKeywords: {
                        shape: "S11a"
                    },
                    HubContentStatus: {},
                    CreationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        S1fm: {
            type: "list",
            member: {
                type: "structure",
                required: [ "MonitoringAlertName", "CreationTime", "LastModifiedTime", "AlertStatus", "DatapointsToAlert", "EvaluationPeriod", "Actions" ],
                members: {
                    MonitoringAlertName: {},
                    CreationTime: {
                        type: "timestamp"
                    },
                    LastModifiedTime: {
                        type: "timestamp"
                    },
                    AlertStatus: {},
                    DatapointsToAlert: {
                        type: "integer"
                    },
                    EvaluationPeriod: {
                        type: "integer"
                    },
                    Actions: {
                        type: "structure",
                        members: {
                            ModelDashboardIndicator: {
                                type: "structure",
                                members: {
                                    Enabled: {
                                        type: "boolean"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1h1: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S1hi: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name", "Value" ],
                members: {
                    Name: {},
                    Value: {}
                }
            }
        },
        S1kg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DeviceName" ],
                members: {
                    DeviceName: {},
                    Description: {},
                    IotThingName: {}
                }
            }
        },
        S1kr: {
            type: "structure",
            members: {
                Filters: {
                    shape: "S1ks"
                },
                NestedFilters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "NestedPropertyName", "Filters" ],
                        members: {
                            NestedPropertyName: {},
                            Filters: {
                                shape: "S1ks"
                            }
                        }
                    }
                },
                SubExpressions: {
                    type: "list",
                    member: {
                        shape: "S1kr"
                    }
                },
                Operator: {}
            }
        },
        S1ks: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {},
                    Operator: {},
                    Value: {}
                }
            }
        },
        S1l5: {
            type: "structure",
            members: {
                TrainingJobName: {},
                TrainingJobArn: {},
                TuningJobArn: {},
                LabelingJobArn: {},
                AutoMLJobArn: {},
                ModelArtifacts: {
                    shape: "Syp"
                },
                TrainingJobStatus: {},
                SecondaryStatus: {},
                FailureReason: {},
                HyperParameters: {
                    shape: "S2w"
                },
                AlgorithmSpecification: {
                    shape: "Srl"
                },
                RoleArn: {},
                InputDataConfig: {
                    shape: "S2y"
                },
                OutputDataConfig: {
                    shape: "S3g"
                },
                ResourceConfig: {
                    shape: "S3j"
                },
                VpcConfig: {
                    shape: "S61"
                },
                StoppingCondition: {
                    shape: "S3p"
                },
                CreationTime: {
                    type: "timestamp"
                },
                TrainingStartTime: {
                    type: "timestamp"
                },
                TrainingEndTime: {
                    type: "timestamp"
                },
                LastModifiedTime: {
                    type: "timestamp"
                },
                SecondaryStatusTransitions: {
                    shape: "S15h"
                },
                FinalMetricDataList: {
                    shape: "S15k"
                },
                EnableNetworkIsolation: {
                    type: "boolean"
                },
                EnableInterContainerTrafficEncryption: {
                    type: "boolean"
                },
                EnableManagedSpotTraining: {
                    type: "boolean"
                },
                CheckpointConfig: {
                    shape: "Shl"
                },
                TrainingTimeInSeconds: {
                    type: "integer"
                },
                BillableTimeInSeconds: {
                    type: "integer"
                },
                DebugHookConfig: {
                    shape: "Sru"
                },
                ExperimentConfig: {
                    shape: "Sqm"
                },
                DebugRuleConfigurations: {
                    shape: "Ss2"
                },
                TensorBoardOutputConfig: {
                    shape: "Ss6"
                },
                DebugRuleEvaluationStatuses: {
                    shape: "S15o"
                },
                ProfilerConfig: {
                    shape: "Ss7"
                },
                Environment: {
                    shape: "Ssd"
                },
                RetryStrategy: {
                    shape: "Shm"
                },
                Tags: {
                    shape: "S7"
                }
            }
        },
        S1ld: {
            type: "structure",
            members: {
                TransformJobName: {},
                TransformJobArn: {},
                TransformJobStatus: {},
                FailureReason: {},
                ModelName: {},
                MaxConcurrentTransforms: {
                    type: "integer"
                },
                ModelClientConfig: {
                    shape: "Ssm"
                },
                MaxPayloadInMB: {
                    type: "integer"
                },
                BatchStrategy: {},
                Environment: {
                    shape: "S3x"
                },
                TransformInput: {
                    shape: "S40"
                },
                TransformOutput: {
                    shape: "S44"
                },
                TransformResources: {
                    shape: "S47"
                },
                CreationTime: {
                    type: "timestamp"
                },
                TransformStartTime: {
                    type: "timestamp"
                },
                TransformEndTime: {
                    type: "timestamp"
                },
                LabelingJobArn: {},
                AutoMLJobArn: {},
                DataProcessing: {
                    shape: "Ssq"
                },
                ExperimentConfig: {
                    shape: "Sqm"
                },
                Tags: {
                    shape: "S7"
                },
                DataCaptureConfig: {
                    shape: "Ssp"
                }
            }
        },
        S1mu: {
            type: "list",
            member: {}
        },
        S1p7: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListActions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ActionSummaries"
        },
        ListAlgorithms: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AlgorithmSummaryList"
        },
        ListAliases: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SageMakerImageVersionAliases"
        },
        ListAppImageConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AppImageConfigs"
        },
        ListApps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Apps"
        },
        ListArtifacts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ArtifactSummaries"
        },
        ListAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AssociationSummaries"
        },
        ListAutoMLJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AutoMLJobSummaries"
        },
        ListCandidatesForAutoMLJob: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Candidates"
        },
        ListClusterNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterNodeSummaries"
        },
        ListClusters: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ClusterSummaries"
        },
        ListCodeRepositories: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CodeRepositorySummaryList"
        },
        ListCompilationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "CompilationJobSummaries"
        },
        ListContexts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ContextSummaries"
        },
        ListDataQualityJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListDeviceFleets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DeviceFleetSummaries"
        },
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DeviceSummaries"
        },
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Domains"
        },
        ListEdgeDeploymentPlans: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EdgeDeploymentPlanSummaries"
        },
        ListEdgePackagingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EdgePackagingJobSummaries"
        },
        ListEndpointConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EndpointConfigs"
        },
        ListEndpoints: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Endpoints"
        },
        ListExperiments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ExperimentSummaries"
        },
        ListFeatureGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FeatureGroupSummaries"
        },
        ListFlowDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "FlowDefinitionSummaries"
        },
        ListHumanTaskUis: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HumanTaskUiSummaries"
        },
        ListHyperParameterTuningJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "HyperParameterTuningJobSummaries"
        },
        ListImageVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ImageVersions"
        },
        ListImages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Images"
        },
        ListInferenceComponents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InferenceComponents"
        },
        ListInferenceExperiments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InferenceExperiments"
        },
        ListInferenceRecommendationsJobSteps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Steps"
        },
        ListInferenceRecommendationsJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InferenceRecommendationsJobs"
        },
        ListLabelingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LabelingJobSummaryList"
        },
        ListLabelingJobsForWorkteam: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LabelingJobSummaryList"
        },
        ListLineageGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "LineageGroupSummaries"
        },
        ListModelBiasJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListModelCardExportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelCardExportJobSummaries"
        },
        ListModelCardVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelCardVersionSummaryList"
        },
        ListModelCards: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelCardSummaries"
        },
        ListModelExplainabilityJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListModelMetadata: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelMetadataSummaries"
        },
        ListModelPackageGroups: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelPackageGroupSummaryList"
        },
        ListModelPackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ModelPackageSummaryList"
        },
        ListModelQualityJobDefinitions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobDefinitionSummaries"
        },
        ListModels: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Models"
        },
        ListMonitoringAlertHistory: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MonitoringAlertHistory"
        },
        ListMonitoringAlerts: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MonitoringAlertSummaries"
        },
        ListMonitoringExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MonitoringExecutionSummaries"
        },
        ListMonitoringSchedules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "MonitoringScheduleSummaries"
        },
        ListNotebookInstanceLifecycleConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NotebookInstanceLifecycleConfigs"
        },
        ListNotebookInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "NotebookInstances"
        },
        ListPipelineExecutionSteps: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineExecutionSteps"
        },
        ListPipelineExecutions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineExecutionSummaries"
        },
        ListPipelineParametersForExecution: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineParameters"
        },
        ListPipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PipelineSummaries"
        },
        ListProcessingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ProcessingJobSummaries"
        },
        ListProjects: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListResourceCatalogs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceCatalogs"
        },
        ListSpaces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Spaces"
        },
        ListStageDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DeviceDeploymentSummaries"
        },
        ListStudioLifecycleConfigs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StudioLifecycleConfigs"
        },
        ListSubscribedWorkteams: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SubscribedWorkteams"
        },
        ListTags: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Tags"
        },
        ListTrainingJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrainingJobSummaries"
        },
        ListTrainingJobsForHyperParameterTuningJob: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrainingJobSummaries"
        },
        ListTransformJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TransformJobSummaries"
        },
        ListTrialComponents: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrialComponentSummaries"
        },
        ListTrials: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "TrialSummaries"
        },
        ListUserProfiles: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "UserProfiles"
        },
        ListWorkforces: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Workforces"
        },
        ListWorkteams: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Workteams"
        },
        QueryLineage: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        Search: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Results"
        }
    },
    waiters: {
        NotebookInstanceInService: {
            delay: 30,
            maxAttempts: 60,
            operation: "DescribeNotebookInstance",
            acceptors: [ {
                expected: "InService",
                matcher: "path",
                state: "success",
                argument: "NotebookInstanceStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "NotebookInstanceStatus"
            } ]
        },
        NotebookInstanceStopped: {
            delay: 30,
            operation: "DescribeNotebookInstance",
            maxAttempts: 60,
            acceptors: [ {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "NotebookInstanceStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "NotebookInstanceStatus"
            } ]
        },
        NotebookInstanceDeleted: {
            delay: 30,
            maxAttempts: 60,
            operation: "DescribeNotebookInstance",
            acceptors: [ {
                expected: "ValidationException",
                matcher: "error",
                state: "success"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "NotebookInstanceStatus"
            } ]
        },
        TrainingJobCompletedOrStopped: {
            delay: 120,
            maxAttempts: 180,
            operation: "DescribeTrainingJob",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "TrainingJobStatus"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "TrainingJobStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "TrainingJobStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        EndpointInService: {
            delay: 30,
            maxAttempts: 120,
            operation: "DescribeEndpoint",
            acceptors: [ {
                expected: "InService",
                matcher: "path",
                state: "success",
                argument: "EndpointStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "EndpointStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        EndpointDeleted: {
            delay: 30,
            maxAttempts: 60,
            operation: "DescribeEndpoint",
            acceptors: [ {
                expected: "ValidationException",
                matcher: "error",
                state: "success"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "EndpointStatus"
            } ]
        },
        TransformJobCompletedOrStopped: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeTransformJob",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "TransformJobStatus"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "TransformJobStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "TransformJobStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ProcessingJobCompletedOrStopped: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeProcessingJob",
            acceptors: [ {
                expected: "Completed",
                matcher: "path",
                state: "success",
                argument: "ProcessingJobStatus"
            }, {
                expected: "Stopped",
                matcher: "path",
                state: "success",
                argument: "ProcessingJobStatus"
            }, {
                expected: "Failed",
                matcher: "path",
                state: "failure",
                argument: "ProcessingJobStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ImageCreated: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeImage",
            acceptors: [ {
                expected: "CREATED",
                matcher: "path",
                state: "success",
                argument: "ImageStatus"
            }, {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "ImageStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ImageUpdated: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeImage",
            acceptors: [ {
                expected: "CREATED",
                matcher: "path",
                state: "success",
                argument: "ImageStatus"
            }, {
                expected: "UPDATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "ImageStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ImageDeleted: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeImage",
            acceptors: [ {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            }, {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "ImageStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ImageVersionCreated: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeImageVersion",
            acceptors: [ {
                expected: "CREATED",
                matcher: "path",
                state: "success",
                argument: "ImageVersionStatus"
            }, {
                expected: "CREATE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "ImageVersionStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        },
        ImageVersionDeleted: {
            delay: 60,
            maxAttempts: 60,
            operation: "DescribeImageVersion",
            acceptors: [ {
                expected: "ResourceNotFoundException",
                matcher: "error",
                state: "success"
            }, {
                expected: "DELETE_FAILED",
                matcher: "path",
                state: "failure",
                argument: "ImageVersionStatus"
            }, {
                expected: "ValidationException",
                matcher: "error",
                state: "failure"
            } ]
        }
    }
};

